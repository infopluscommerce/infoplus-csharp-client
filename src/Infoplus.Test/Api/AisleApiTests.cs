/* 
 * Infoplus API
 *
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Infoplus.Client;
using Infoplus.Api;
using Infoplus.Model;

namespace Infoplus.Test
{
    /// <summary>
    ///  Class for testing AisleApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class AisleApiTests
    {
        private AisleApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new AisleApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of AisleApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' AisleApi
            //Assert.IsInstanceOfType(typeof(AisleApi), instance, "instance is a AisleApi");
        }

        
        /// <summary>
        /// Test AddAisle
        /// </summary>
        [Test]
        public void AddAisleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Aisle body = null;
            //var response = instance.AddAisle(body);
            //Assert.IsInstanceOf<Aisle> (response, "response is Aisle");
        }
        
        /// <summary>
        /// Test AddAisleAudit
        /// </summary>
        [Test]
        public void AddAisleAuditTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? aisleId = null;
            //string aisleAudit = null;
            //instance.AddAisleAudit(aisleId, aisleAudit);
            
        }
        
        /// <summary>
        /// Test AddAisleFile
        /// </summary>
        [Test]
        public void AddAisleFileTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? aisleId = null;
            //string fileName = null;
            //instance.AddAisleFile(aisleId, fileName);
            
        }
        
        /// <summary>
        /// Test AddAisleFileByURL
        /// </summary>
        [Test]
        public void AddAisleFileByURLTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //RecordFile body = null;
            //int? aisleId = null;
            //instance.AddAisleFileByURL(body, aisleId);
            
        }
        
        /// <summary>
        /// Test AddAisleTag
        /// </summary>
        [Test]
        public void AddAisleTagTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? aisleId = null;
            //string aisleTag = null;
            //instance.AddAisleTag(aisleId, aisleTag);
            
        }
        
        /// <summary>
        /// Test DeleteAisle
        /// </summary>
        [Test]
        public void DeleteAisleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? aisleId = null;
            //instance.DeleteAisle(aisleId);
            
        }
        
        /// <summary>
        /// Test DeleteAisleFile
        /// </summary>
        [Test]
        public void DeleteAisleFileTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? aisleId = null;
            //int? fileId = null;
            //instance.DeleteAisleFile(aisleId, fileId);
            
        }
        
        /// <summary>
        /// Test DeleteAisleTag
        /// </summary>
        [Test]
        public void DeleteAisleTagTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? aisleId = null;
            //string aisleTag = null;
            //instance.DeleteAisleTag(aisleId, aisleTag);
            
        }
        
        /// <summary>
        /// Test GetAisleByFilter
        /// </summary>
        [Test]
        public void GetAisleByFilterTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string filter = null;
            //int? page = null;
            //int? limit = null;
            //string sort = null;
            //var response = instance.GetAisleByFilter(filter, page, limit, sort);
            //Assert.IsInstanceOf<List<Aisle>> (response, "response is List<Aisle>");
        }
        
        /// <summary>
        /// Test GetAisleById
        /// </summary>
        [Test]
        public void GetAisleByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? aisleId = null;
            //var response = instance.GetAisleById(aisleId);
            //Assert.IsInstanceOf<Aisle> (response, "response is Aisle");
        }
        
        /// <summary>
        /// Test GetAisleFiles
        /// </summary>
        [Test]
        public void GetAisleFilesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? aisleId = null;
            //instance.GetAisleFiles(aisleId);
            
        }
        
        /// <summary>
        /// Test GetAisleTags
        /// </summary>
        [Test]
        public void GetAisleTagsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? aisleId = null;
            //instance.GetAisleTags(aisleId);
            
        }
        
        /// <summary>
        /// Test GetDuplicateAisleById
        /// </summary>
        [Test]
        public void GetDuplicateAisleByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? aisleId = null;
            //var response = instance.GetDuplicateAisleById(aisleId);
            //Assert.IsInstanceOf<Aisle> (response, "response is Aisle");
        }
        
        /// <summary>
        /// Test UpdateAisle
        /// </summary>
        [Test]
        public void UpdateAisleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Aisle body = null;
            //instance.UpdateAisle(body);
            
        }
        
        /// <summary>
        /// Test UpdateAisleCustomFields
        /// </summary>
        [Test]
        public void UpdateAisleCustomFieldsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Aisle body = null;
            //instance.UpdateAisleCustomFields(body);
            
        }
        
    }

}
