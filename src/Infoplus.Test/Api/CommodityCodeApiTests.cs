/* 
 * Infoplus API
 *
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Infoplus.Client;
using Infoplus.Api;
using Infoplus.Model;

namespace Infoplus.Test
{
    /// <summary>
    ///  Class for testing CommodityCodeApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class CommodityCodeApiTests
    {
        private CommodityCodeApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new CommodityCodeApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of CommodityCodeApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' CommodityCodeApi
            //Assert.IsInstanceOfType(typeof(CommodityCodeApi), instance, "instance is a CommodityCodeApi");
        }

        
        /// <summary>
        /// Test AddCommodityCodeAudit
        /// </summary>
        [Test]
        public void AddCommodityCodeAuditTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? commodityCodeId = null;
            //string commodityCodeAudit = null;
            //instance.AddCommodityCodeAudit(commodityCodeId, commodityCodeAudit);
            
        }
        
        /// <summary>
        /// Test AddCommodityCodeFile
        /// </summary>
        [Test]
        public void AddCommodityCodeFileTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? commodityCodeId = null;
            //string fileName = null;
            //instance.AddCommodityCodeFile(commodityCodeId, fileName);
            
        }
        
        /// <summary>
        /// Test AddCommodityCodeFileByURL
        /// </summary>
        [Test]
        public void AddCommodityCodeFileByURLTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //RecordFile body = null;
            //int? commodityCodeId = null;
            //instance.AddCommodityCodeFileByURL(body, commodityCodeId);
            
        }
        
        /// <summary>
        /// Test AddCommodityCodeTag
        /// </summary>
        [Test]
        public void AddCommodityCodeTagTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? commodityCodeId = null;
            //string commodityCodeTag = null;
            //instance.AddCommodityCodeTag(commodityCodeId, commodityCodeTag);
            
        }
        
        /// <summary>
        /// Test DeleteCommodityCodeFile
        /// </summary>
        [Test]
        public void DeleteCommodityCodeFileTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? commodityCodeId = null;
            //int? fileId = null;
            //instance.DeleteCommodityCodeFile(commodityCodeId, fileId);
            
        }
        
        /// <summary>
        /// Test DeleteCommodityCodeTag
        /// </summary>
        [Test]
        public void DeleteCommodityCodeTagTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? commodityCodeId = null;
            //string commodityCodeTag = null;
            //instance.DeleteCommodityCodeTag(commodityCodeId, commodityCodeTag);
            
        }
        
        /// <summary>
        /// Test GetCommodityCodeByFilter
        /// </summary>
        [Test]
        public void GetCommodityCodeByFilterTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string filter = null;
            //int? page = null;
            //int? limit = null;
            //string sort = null;
            //var response = instance.GetCommodityCodeByFilter(filter, page, limit, sort);
            //Assert.IsInstanceOf<List<CommodityCode>> (response, "response is List<CommodityCode>");
        }
        
        /// <summary>
        /// Test GetCommodityCodeById
        /// </summary>
        [Test]
        public void GetCommodityCodeByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? commodityCodeId = null;
            //var response = instance.GetCommodityCodeById(commodityCodeId);
            //Assert.IsInstanceOf<CommodityCode> (response, "response is CommodityCode");
        }
        
        /// <summary>
        /// Test GetCommodityCodeFiles
        /// </summary>
        [Test]
        public void GetCommodityCodeFilesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? commodityCodeId = null;
            //instance.GetCommodityCodeFiles(commodityCodeId);
            
        }
        
        /// <summary>
        /// Test GetCommodityCodeTags
        /// </summary>
        [Test]
        public void GetCommodityCodeTagsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? commodityCodeId = null;
            //instance.GetCommodityCodeTags(commodityCodeId);
            
        }
        
        /// <summary>
        /// Test GetDuplicateCommodityCodeById
        /// </summary>
        [Test]
        public void GetDuplicateCommodityCodeByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? commodityCodeId = null;
            //var response = instance.GetDuplicateCommodityCodeById(commodityCodeId);
            //Assert.IsInstanceOf<CommodityCode> (response, "response is CommodityCode");
        }
        
    }

}
