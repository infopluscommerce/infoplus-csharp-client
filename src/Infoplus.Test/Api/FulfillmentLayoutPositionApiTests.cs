/* 
 * Infoplus API
 *
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Infoplus.Client;
using Infoplus.Api;
using Infoplus.Model;

namespace Infoplus.Test
{
    /// <summary>
    ///  Class for testing FulfillmentLayoutPositionApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class FulfillmentLayoutPositionApiTests
    {
        private FulfillmentLayoutPositionApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new FulfillmentLayoutPositionApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of FulfillmentLayoutPositionApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' FulfillmentLayoutPositionApi
            //Assert.IsInstanceOfType(typeof(FulfillmentLayoutPositionApi), instance, "instance is a FulfillmentLayoutPositionApi");
        }

        
        /// <summary>
        /// Test AddFulfillmentLayoutPositionAudit
        /// </summary>
        [Test]
        public void AddFulfillmentLayoutPositionAuditTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? fulfillmentLayoutPositionId = null;
            //string fulfillmentLayoutPositionAudit = null;
            //instance.AddFulfillmentLayoutPositionAudit(fulfillmentLayoutPositionId, fulfillmentLayoutPositionAudit);
            
        }
        
        /// <summary>
        /// Test AddFulfillmentLayoutPositionFile
        /// </summary>
        [Test]
        public void AddFulfillmentLayoutPositionFileTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? fulfillmentLayoutPositionId = null;
            //string fileName = null;
            //instance.AddFulfillmentLayoutPositionFile(fulfillmentLayoutPositionId, fileName);
            
        }
        
        /// <summary>
        /// Test AddFulfillmentLayoutPositionFileByURL
        /// </summary>
        [Test]
        public void AddFulfillmentLayoutPositionFileByURLTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //RecordFile body = null;
            //int? fulfillmentLayoutPositionId = null;
            //instance.AddFulfillmentLayoutPositionFileByURL(body, fulfillmentLayoutPositionId);
            
        }
        
        /// <summary>
        /// Test AddFulfillmentLayoutPositionTag
        /// </summary>
        [Test]
        public void AddFulfillmentLayoutPositionTagTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? fulfillmentLayoutPositionId = null;
            //string fulfillmentLayoutPositionTag = null;
            //instance.AddFulfillmentLayoutPositionTag(fulfillmentLayoutPositionId, fulfillmentLayoutPositionTag);
            
        }
        
        /// <summary>
        /// Test DeleteFulfillmentLayoutPositionFile
        /// </summary>
        [Test]
        public void DeleteFulfillmentLayoutPositionFileTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? fulfillmentLayoutPositionId = null;
            //int? fileId = null;
            //instance.DeleteFulfillmentLayoutPositionFile(fulfillmentLayoutPositionId, fileId);
            
        }
        
        /// <summary>
        /// Test DeleteFulfillmentLayoutPositionTag
        /// </summary>
        [Test]
        public void DeleteFulfillmentLayoutPositionTagTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? fulfillmentLayoutPositionId = null;
            //string fulfillmentLayoutPositionTag = null;
            //instance.DeleteFulfillmentLayoutPositionTag(fulfillmentLayoutPositionId, fulfillmentLayoutPositionTag);
            
        }
        
        /// <summary>
        /// Test GetDuplicateFulfillmentLayoutPositionById
        /// </summary>
        [Test]
        public void GetDuplicateFulfillmentLayoutPositionByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? fulfillmentLayoutPositionId = null;
            //var response = instance.GetDuplicateFulfillmentLayoutPositionById(fulfillmentLayoutPositionId);
            //Assert.IsInstanceOf<FulfillmentLayoutPosition> (response, "response is FulfillmentLayoutPosition");
        }
        
        /// <summary>
        /// Test GetFulfillmentLayoutPositionByFilter
        /// </summary>
        [Test]
        public void GetFulfillmentLayoutPositionByFilterTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string filter = null;
            //int? page = null;
            //int? limit = null;
            //string sort = null;
            //var response = instance.GetFulfillmentLayoutPositionByFilter(filter, page, limit, sort);
            //Assert.IsInstanceOf<List<FulfillmentLayoutPosition>> (response, "response is List<FulfillmentLayoutPosition>");
        }
        
        /// <summary>
        /// Test GetFulfillmentLayoutPositionById
        /// </summary>
        [Test]
        public void GetFulfillmentLayoutPositionByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? fulfillmentLayoutPositionId = null;
            //var response = instance.GetFulfillmentLayoutPositionById(fulfillmentLayoutPositionId);
            //Assert.IsInstanceOf<FulfillmentLayoutPosition> (response, "response is FulfillmentLayoutPosition");
        }
        
        /// <summary>
        /// Test GetFulfillmentLayoutPositionFiles
        /// </summary>
        [Test]
        public void GetFulfillmentLayoutPositionFilesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? fulfillmentLayoutPositionId = null;
            //instance.GetFulfillmentLayoutPositionFiles(fulfillmentLayoutPositionId);
            
        }
        
        /// <summary>
        /// Test GetFulfillmentLayoutPositionTags
        /// </summary>
        [Test]
        public void GetFulfillmentLayoutPositionTagsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? fulfillmentLayoutPositionId = null;
            //instance.GetFulfillmentLayoutPositionTags(fulfillmentLayoutPositionId);
            
        }
        
    }

}
