/* 
 * Infoplus API
 *
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Infoplus.Client;
using Infoplus.Api;
using Infoplus.Model;

namespace Infoplus.Test
{
    /// <summary>
    ///  Class for testing ItemCategoryApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class ItemCategoryApiTests
    {
        private ItemCategoryApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new ItemCategoryApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of ItemCategoryApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' ItemCategoryApi
            //Assert.IsInstanceOfType(typeof(ItemCategoryApi), instance, "instance is a ItemCategoryApi");
        }

        
        /// <summary>
        /// Test AddItemCategory
        /// </summary>
        [Test]
        public void AddItemCategoryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ItemCategory body = null;
            //var response = instance.AddItemCategory(body);
            //Assert.IsInstanceOf<ItemCategory> (response, "response is ItemCategory");
        }
        
        /// <summary>
        /// Test AddItemCategoryAudit
        /// </summary>
        [Test]
        public void AddItemCategoryAuditTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? itemCategoryId = null;
            //string itemCategoryAudit = null;
            //instance.AddItemCategoryAudit(itemCategoryId, itemCategoryAudit);
            
        }
        
        /// <summary>
        /// Test AddItemCategoryFile
        /// </summary>
        [Test]
        public void AddItemCategoryFileTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? itemCategoryId = null;
            //string fileName = null;
            //instance.AddItemCategoryFile(itemCategoryId, fileName);
            
        }
        
        /// <summary>
        /// Test AddItemCategoryFileByURL
        /// </summary>
        [Test]
        public void AddItemCategoryFileByURLTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //RecordFile body = null;
            //int? itemCategoryId = null;
            //instance.AddItemCategoryFileByURL(body, itemCategoryId);
            
        }
        
        /// <summary>
        /// Test AddItemCategoryTag
        /// </summary>
        [Test]
        public void AddItemCategoryTagTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? itemCategoryId = null;
            //string itemCategoryTag = null;
            //instance.AddItemCategoryTag(itemCategoryId, itemCategoryTag);
            
        }
        
        /// <summary>
        /// Test DeleteItemCategory
        /// </summary>
        [Test]
        public void DeleteItemCategoryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? itemCategoryId = null;
            //instance.DeleteItemCategory(itemCategoryId);
            
        }
        
        /// <summary>
        /// Test DeleteItemCategoryFile
        /// </summary>
        [Test]
        public void DeleteItemCategoryFileTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? itemCategoryId = null;
            //int? fileId = null;
            //instance.DeleteItemCategoryFile(itemCategoryId, fileId);
            
        }
        
        /// <summary>
        /// Test DeleteItemCategoryTag
        /// </summary>
        [Test]
        public void DeleteItemCategoryTagTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? itemCategoryId = null;
            //string itemCategoryTag = null;
            //instance.DeleteItemCategoryTag(itemCategoryId, itemCategoryTag);
            
        }
        
        /// <summary>
        /// Test GetDuplicateItemCategoryById
        /// </summary>
        [Test]
        public void GetDuplicateItemCategoryByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? itemCategoryId = null;
            //var response = instance.GetDuplicateItemCategoryById(itemCategoryId);
            //Assert.IsInstanceOf<ItemCategory> (response, "response is ItemCategory");
        }
        
        /// <summary>
        /// Test GetItemCategoryByFilter
        /// </summary>
        [Test]
        public void GetItemCategoryByFilterTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string filter = null;
            //int? page = null;
            //int? limit = null;
            //string sort = null;
            //var response = instance.GetItemCategoryByFilter(filter, page, limit, sort);
            //Assert.IsInstanceOf<List<ItemCategory>> (response, "response is List<ItemCategory>");
        }
        
        /// <summary>
        /// Test GetItemCategoryById
        /// </summary>
        [Test]
        public void GetItemCategoryByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? itemCategoryId = null;
            //var response = instance.GetItemCategoryById(itemCategoryId);
            //Assert.IsInstanceOf<ItemCategory> (response, "response is ItemCategory");
        }
        
        /// <summary>
        /// Test GetItemCategoryFiles
        /// </summary>
        [Test]
        public void GetItemCategoryFilesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? itemCategoryId = null;
            //instance.GetItemCategoryFiles(itemCategoryId);
            
        }
        
        /// <summary>
        /// Test GetItemCategoryTags
        /// </summary>
        [Test]
        public void GetItemCategoryTagsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? itemCategoryId = null;
            //instance.GetItemCategoryTags(itemCategoryId);
            
        }
        
        /// <summary>
        /// Test UpdateItemCategory
        /// </summary>
        [Test]
        public void UpdateItemCategoryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ItemCategory body = null;
            //instance.UpdateItemCategory(body);
            
        }
        
    }

}
