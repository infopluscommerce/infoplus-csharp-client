/* 
 * Infoplus API
 *
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Infoplus.Client;
using Infoplus.Api;
using Infoplus.Model;

namespace Infoplus.Test
{
    /// <summary>
    ///  Class for testing ItemProductCodeApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class ItemProductCodeApiTests
    {
        private ItemProductCodeApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new ItemProductCodeApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of ItemProductCodeApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' ItemProductCodeApi
            //Assert.IsInstanceOfType(typeof(ItemProductCodeApi), instance, "instance is a ItemProductCodeApi");
        }

        
        /// <summary>
        /// Test AddItemProductCode
        /// </summary>
        [Test]
        public void AddItemProductCodeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ItemProductCode body = null;
            //var response = instance.AddItemProductCode(body);
            //Assert.IsInstanceOf<ItemProductCode> (response, "response is ItemProductCode");
        }
        
        /// <summary>
        /// Test AddItemProductCodeAudit
        /// </summary>
        [Test]
        public void AddItemProductCodeAuditTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? itemProductCodeId = null;
            //string itemProductCodeAudit = null;
            //instance.AddItemProductCodeAudit(itemProductCodeId, itemProductCodeAudit);
            
        }
        
        /// <summary>
        /// Test AddItemProductCodeFile
        /// </summary>
        [Test]
        public void AddItemProductCodeFileTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? itemProductCodeId = null;
            //string fileName = null;
            //instance.AddItemProductCodeFile(itemProductCodeId, fileName);
            
        }
        
        /// <summary>
        /// Test AddItemProductCodeFileByURL
        /// </summary>
        [Test]
        public void AddItemProductCodeFileByURLTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //RecordFile body = null;
            //int? itemProductCodeId = null;
            //instance.AddItemProductCodeFileByURL(body, itemProductCodeId);
            
        }
        
        /// <summary>
        /// Test AddItemProductCodeTag
        /// </summary>
        [Test]
        public void AddItemProductCodeTagTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? itemProductCodeId = null;
            //string itemProductCodeTag = null;
            //instance.AddItemProductCodeTag(itemProductCodeId, itemProductCodeTag);
            
        }
        
        /// <summary>
        /// Test DeleteItemProductCode
        /// </summary>
        [Test]
        public void DeleteItemProductCodeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? itemProductCodeId = null;
            //instance.DeleteItemProductCode(itemProductCodeId);
            
        }
        
        /// <summary>
        /// Test DeleteItemProductCodeFile
        /// </summary>
        [Test]
        public void DeleteItemProductCodeFileTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? itemProductCodeId = null;
            //int? fileId = null;
            //instance.DeleteItemProductCodeFile(itemProductCodeId, fileId);
            
        }
        
        /// <summary>
        /// Test DeleteItemProductCodeTag
        /// </summary>
        [Test]
        public void DeleteItemProductCodeTagTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? itemProductCodeId = null;
            //string itemProductCodeTag = null;
            //instance.DeleteItemProductCodeTag(itemProductCodeId, itemProductCodeTag);
            
        }
        
        /// <summary>
        /// Test GetDuplicateItemProductCodeById
        /// </summary>
        [Test]
        public void GetDuplicateItemProductCodeByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? itemProductCodeId = null;
            //var response = instance.GetDuplicateItemProductCodeById(itemProductCodeId);
            //Assert.IsInstanceOf<ItemProductCode> (response, "response is ItemProductCode");
        }
        
        /// <summary>
        /// Test GetItemProductCodeByFilter
        /// </summary>
        [Test]
        public void GetItemProductCodeByFilterTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string filter = null;
            //int? page = null;
            //int? limit = null;
            //string sort = null;
            //var response = instance.GetItemProductCodeByFilter(filter, page, limit, sort);
            //Assert.IsInstanceOf<List<ItemProductCode>> (response, "response is List<ItemProductCode>");
        }
        
        /// <summary>
        /// Test GetItemProductCodeById
        /// </summary>
        [Test]
        public void GetItemProductCodeByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? itemProductCodeId = null;
            //var response = instance.GetItemProductCodeById(itemProductCodeId);
            //Assert.IsInstanceOf<ItemProductCode> (response, "response is ItemProductCode");
        }
        
        /// <summary>
        /// Test GetItemProductCodeFiles
        /// </summary>
        [Test]
        public void GetItemProductCodeFilesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? itemProductCodeId = null;
            //instance.GetItemProductCodeFiles(itemProductCodeId);
            
        }
        
        /// <summary>
        /// Test GetItemProductCodeTags
        /// </summary>
        [Test]
        public void GetItemProductCodeTagsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? itemProductCodeId = null;
            //instance.GetItemProductCodeTags(itemProductCodeId);
            
        }
        
        /// <summary>
        /// Test UpdateItemProductCode
        /// </summary>
        [Test]
        public void UpdateItemProductCodeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ItemProductCode body = null;
            //instance.UpdateItemProductCode(body);
            
        }
        
    }

}
