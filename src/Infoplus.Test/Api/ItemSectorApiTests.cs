/* 
 * Infoplus API
 *
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Infoplus.Client;
using Infoplus.Api;
using Infoplus.Model;

namespace Infoplus.Test
{
    /// <summary>
    ///  Class for testing ItemSectorApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class ItemSectorApiTests
    {
        private ItemSectorApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new ItemSectorApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of ItemSectorApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' ItemSectorApi
            //Assert.IsInstanceOfType(typeof(ItemSectorApi), instance, "instance is a ItemSectorApi");
        }

        
        /// <summary>
        /// Test AddItemSector
        /// </summary>
        [Test]
        public void AddItemSectorTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ItemSector body = null;
            //var response = instance.AddItemSector(body);
            //Assert.IsInstanceOf<ItemSector> (response, "response is ItemSector");
        }
        
        /// <summary>
        /// Test AddItemSectorAudit
        /// </summary>
        [Test]
        public void AddItemSectorAuditTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? itemSectorId = null;
            //string itemSectorAudit = null;
            //instance.AddItemSectorAudit(itemSectorId, itemSectorAudit);
            
        }
        
        /// <summary>
        /// Test AddItemSectorFile
        /// </summary>
        [Test]
        public void AddItemSectorFileTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? itemSectorId = null;
            //string fileName = null;
            //instance.AddItemSectorFile(itemSectorId, fileName);
            
        }
        
        /// <summary>
        /// Test AddItemSectorFileByURL
        /// </summary>
        [Test]
        public void AddItemSectorFileByURLTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //RecordFile body = null;
            //int? itemSectorId = null;
            //instance.AddItemSectorFileByURL(body, itemSectorId);
            
        }
        
        /// <summary>
        /// Test AddItemSectorTag
        /// </summary>
        [Test]
        public void AddItemSectorTagTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? itemSectorId = null;
            //string itemSectorTag = null;
            //instance.AddItemSectorTag(itemSectorId, itemSectorTag);
            
        }
        
        /// <summary>
        /// Test DeleteItemSector
        /// </summary>
        [Test]
        public void DeleteItemSectorTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? itemSectorId = null;
            //instance.DeleteItemSector(itemSectorId);
            
        }
        
        /// <summary>
        /// Test DeleteItemSectorFile
        /// </summary>
        [Test]
        public void DeleteItemSectorFileTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? itemSectorId = null;
            //int? fileId = null;
            //instance.DeleteItemSectorFile(itemSectorId, fileId);
            
        }
        
        /// <summary>
        /// Test DeleteItemSectorTag
        /// </summary>
        [Test]
        public void DeleteItemSectorTagTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? itemSectorId = null;
            //string itemSectorTag = null;
            //instance.DeleteItemSectorTag(itemSectorId, itemSectorTag);
            
        }
        
        /// <summary>
        /// Test GetDuplicateItemSectorById
        /// </summary>
        [Test]
        public void GetDuplicateItemSectorByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? itemSectorId = null;
            //var response = instance.GetDuplicateItemSectorById(itemSectorId);
            //Assert.IsInstanceOf<ItemSector> (response, "response is ItemSector");
        }
        
        /// <summary>
        /// Test GetItemSectorByFilter
        /// </summary>
        [Test]
        public void GetItemSectorByFilterTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string filter = null;
            //int? page = null;
            //int? limit = null;
            //string sort = null;
            //var response = instance.GetItemSectorByFilter(filter, page, limit, sort);
            //Assert.IsInstanceOf<List<ItemSector>> (response, "response is List<ItemSector>");
        }
        
        /// <summary>
        /// Test GetItemSectorById
        /// </summary>
        [Test]
        public void GetItemSectorByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? itemSectorId = null;
            //var response = instance.GetItemSectorById(itemSectorId);
            //Assert.IsInstanceOf<ItemSector> (response, "response is ItemSector");
        }
        
        /// <summary>
        /// Test GetItemSectorFiles
        /// </summary>
        [Test]
        public void GetItemSectorFilesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? itemSectorId = null;
            //instance.GetItemSectorFiles(itemSectorId);
            
        }
        
        /// <summary>
        /// Test GetItemSectorTags
        /// </summary>
        [Test]
        public void GetItemSectorTagsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? itemSectorId = null;
            //instance.GetItemSectorTags(itemSectorId);
            
        }
        
        /// <summary>
        /// Test UpdateItemSector
        /// </summary>
        [Test]
        public void UpdateItemSectorTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ItemSector body = null;
            //instance.UpdateItemSector(body);
            
        }
        
    }

}
