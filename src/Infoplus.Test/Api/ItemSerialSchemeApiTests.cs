/* 
 * Infoplus API
 *
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Infoplus.Client;
using Infoplus.Api;
using Infoplus.Model;

namespace Infoplus.Test
{
    /// <summary>
    ///  Class for testing ItemSerialSchemeApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class ItemSerialSchemeApiTests
    {
        private ItemSerialSchemeApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new ItemSerialSchemeApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of ItemSerialSchemeApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' ItemSerialSchemeApi
            //Assert.IsInstanceOfType(typeof(ItemSerialSchemeApi), instance, "instance is a ItemSerialSchemeApi");
        }

        
        /// <summary>
        /// Test AddItemSerialScheme
        /// </summary>
        [Test]
        public void AddItemSerialSchemeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ItemSerialScheme body = null;
            //var response = instance.AddItemSerialScheme(body);
            //Assert.IsInstanceOf<ItemSerialScheme> (response, "response is ItemSerialScheme");
        }
        
        /// <summary>
        /// Test AddItemSerialSchemeAudit
        /// </summary>
        [Test]
        public void AddItemSerialSchemeAuditTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? itemSerialSchemeId = null;
            //string itemSerialSchemeAudit = null;
            //instance.AddItemSerialSchemeAudit(itemSerialSchemeId, itemSerialSchemeAudit);
            
        }
        
        /// <summary>
        /// Test AddItemSerialSchemeFile
        /// </summary>
        [Test]
        public void AddItemSerialSchemeFileTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? itemSerialSchemeId = null;
            //string fileName = null;
            //instance.AddItemSerialSchemeFile(itemSerialSchemeId, fileName);
            
        }
        
        /// <summary>
        /// Test AddItemSerialSchemeFileByURL
        /// </summary>
        [Test]
        public void AddItemSerialSchemeFileByURLTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //RecordFile body = null;
            //int? itemSerialSchemeId = null;
            //instance.AddItemSerialSchemeFileByURL(body, itemSerialSchemeId);
            
        }
        
        /// <summary>
        /// Test AddItemSerialSchemeTag
        /// </summary>
        [Test]
        public void AddItemSerialSchemeTagTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? itemSerialSchemeId = null;
            //string itemSerialSchemeTag = null;
            //instance.AddItemSerialSchemeTag(itemSerialSchemeId, itemSerialSchemeTag);
            
        }
        
        /// <summary>
        /// Test DeleteItemSerialScheme
        /// </summary>
        [Test]
        public void DeleteItemSerialSchemeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? itemSerialSchemeId = null;
            //instance.DeleteItemSerialScheme(itemSerialSchemeId);
            
        }
        
        /// <summary>
        /// Test DeleteItemSerialSchemeFile
        /// </summary>
        [Test]
        public void DeleteItemSerialSchemeFileTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? itemSerialSchemeId = null;
            //int? fileId = null;
            //instance.DeleteItemSerialSchemeFile(itemSerialSchemeId, fileId);
            
        }
        
        /// <summary>
        /// Test DeleteItemSerialSchemeTag
        /// </summary>
        [Test]
        public void DeleteItemSerialSchemeTagTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? itemSerialSchemeId = null;
            //string itemSerialSchemeTag = null;
            //instance.DeleteItemSerialSchemeTag(itemSerialSchemeId, itemSerialSchemeTag);
            
        }
        
        /// <summary>
        /// Test GetDuplicateItemSerialSchemeById
        /// </summary>
        [Test]
        public void GetDuplicateItemSerialSchemeByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? itemSerialSchemeId = null;
            //var response = instance.GetDuplicateItemSerialSchemeById(itemSerialSchemeId);
            //Assert.IsInstanceOf<ItemSerialScheme> (response, "response is ItemSerialScheme");
        }
        
        /// <summary>
        /// Test GetItemSerialSchemeByFilter
        /// </summary>
        [Test]
        public void GetItemSerialSchemeByFilterTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string filter = null;
            //int? page = null;
            //int? limit = null;
            //string sort = null;
            //var response = instance.GetItemSerialSchemeByFilter(filter, page, limit, sort);
            //Assert.IsInstanceOf<List<ItemSerialScheme>> (response, "response is List<ItemSerialScheme>");
        }
        
        /// <summary>
        /// Test GetItemSerialSchemeById
        /// </summary>
        [Test]
        public void GetItemSerialSchemeByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? itemSerialSchemeId = null;
            //var response = instance.GetItemSerialSchemeById(itemSerialSchemeId);
            //Assert.IsInstanceOf<ItemSerialScheme> (response, "response is ItemSerialScheme");
        }
        
        /// <summary>
        /// Test GetItemSerialSchemeFiles
        /// </summary>
        [Test]
        public void GetItemSerialSchemeFilesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? itemSerialSchemeId = null;
            //instance.GetItemSerialSchemeFiles(itemSerialSchemeId);
            
        }
        
        /// <summary>
        /// Test GetItemSerialSchemeTags
        /// </summary>
        [Test]
        public void GetItemSerialSchemeTagsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? itemSerialSchemeId = null;
            //instance.GetItemSerialSchemeTags(itemSerialSchemeId);
            
        }
        
        /// <summary>
        /// Test UpdateItemSerialScheme
        /// </summary>
        [Test]
        public void UpdateItemSerialSchemeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ItemSerialScheme body = null;
            //instance.UpdateItemSerialScheme(body);
            
        }
        
    }

}
