/* 
 * Infoplus API
 *
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Infoplus.Client;
using Infoplus.Api;
using Infoplus.Model;

namespace Infoplus.Test
{
    /// <summary>
    ///  Class for testing ItemSubCategoryApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class ItemSubCategoryApiTests
    {
        private ItemSubCategoryApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new ItemSubCategoryApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of ItemSubCategoryApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' ItemSubCategoryApi
            //Assert.IsInstanceOfType(typeof(ItemSubCategoryApi), instance, "instance is a ItemSubCategoryApi");
        }

        
        /// <summary>
        /// Test AddItemSubCategory
        /// </summary>
        [Test]
        public void AddItemSubCategoryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ItemSubCategory body = null;
            //var response = instance.AddItemSubCategory(body);
            //Assert.IsInstanceOf<ItemSubCategory> (response, "response is ItemSubCategory");
        }
        
        /// <summary>
        /// Test AddItemSubCategoryAudit
        /// </summary>
        [Test]
        public void AddItemSubCategoryAuditTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? itemSubCategoryId = null;
            //string itemSubCategoryAudit = null;
            //instance.AddItemSubCategoryAudit(itemSubCategoryId, itemSubCategoryAudit);
            
        }
        
        /// <summary>
        /// Test AddItemSubCategoryFile
        /// </summary>
        [Test]
        public void AddItemSubCategoryFileTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? itemSubCategoryId = null;
            //string fileName = null;
            //instance.AddItemSubCategoryFile(itemSubCategoryId, fileName);
            
        }
        
        /// <summary>
        /// Test AddItemSubCategoryFileByURL
        /// </summary>
        [Test]
        public void AddItemSubCategoryFileByURLTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //RecordFile body = null;
            //int? itemSubCategoryId = null;
            //instance.AddItemSubCategoryFileByURL(body, itemSubCategoryId);
            
        }
        
        /// <summary>
        /// Test AddItemSubCategoryTag
        /// </summary>
        [Test]
        public void AddItemSubCategoryTagTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? itemSubCategoryId = null;
            //string itemSubCategoryTag = null;
            //instance.AddItemSubCategoryTag(itemSubCategoryId, itemSubCategoryTag);
            
        }
        
        /// <summary>
        /// Test DeleteItemSubCategory
        /// </summary>
        [Test]
        public void DeleteItemSubCategoryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? itemSubCategoryId = null;
            //instance.DeleteItemSubCategory(itemSubCategoryId);
            
        }
        
        /// <summary>
        /// Test DeleteItemSubCategoryFile
        /// </summary>
        [Test]
        public void DeleteItemSubCategoryFileTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? itemSubCategoryId = null;
            //int? fileId = null;
            //instance.DeleteItemSubCategoryFile(itemSubCategoryId, fileId);
            
        }
        
        /// <summary>
        /// Test DeleteItemSubCategoryTag
        /// </summary>
        [Test]
        public void DeleteItemSubCategoryTagTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? itemSubCategoryId = null;
            //string itemSubCategoryTag = null;
            //instance.DeleteItemSubCategoryTag(itemSubCategoryId, itemSubCategoryTag);
            
        }
        
        /// <summary>
        /// Test GetDuplicateItemSubCategoryById
        /// </summary>
        [Test]
        public void GetDuplicateItemSubCategoryByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? itemSubCategoryId = null;
            //var response = instance.GetDuplicateItemSubCategoryById(itemSubCategoryId);
            //Assert.IsInstanceOf<ItemSubCategory> (response, "response is ItemSubCategory");
        }
        
        /// <summary>
        /// Test GetItemSubCategoryByFilter
        /// </summary>
        [Test]
        public void GetItemSubCategoryByFilterTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string filter = null;
            //int? page = null;
            //int? limit = null;
            //string sort = null;
            //var response = instance.GetItemSubCategoryByFilter(filter, page, limit, sort);
            //Assert.IsInstanceOf<List<ItemSubCategory>> (response, "response is List<ItemSubCategory>");
        }
        
        /// <summary>
        /// Test GetItemSubCategoryById
        /// </summary>
        [Test]
        public void GetItemSubCategoryByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? itemSubCategoryId = null;
            //var response = instance.GetItemSubCategoryById(itemSubCategoryId);
            //Assert.IsInstanceOf<ItemSubCategory> (response, "response is ItemSubCategory");
        }
        
        /// <summary>
        /// Test GetItemSubCategoryFiles
        /// </summary>
        [Test]
        public void GetItemSubCategoryFilesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? itemSubCategoryId = null;
            //instance.GetItemSubCategoryFiles(itemSubCategoryId);
            
        }
        
        /// <summary>
        /// Test GetItemSubCategoryTags
        /// </summary>
        [Test]
        public void GetItemSubCategoryTagsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? itemSubCategoryId = null;
            //instance.GetItemSubCategoryTags(itemSubCategoryId);
            
        }
        
        /// <summary>
        /// Test UpdateItemSubCategory
        /// </summary>
        [Test]
        public void UpdateItemSubCategoryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ItemSubCategory body = null;
            //instance.UpdateItemSubCategory(body);
            
        }
        
    }

}
