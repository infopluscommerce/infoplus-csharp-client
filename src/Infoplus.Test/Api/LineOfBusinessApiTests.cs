/* 
 * Infoplus API
 *
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Infoplus.Client;
using Infoplus.Api;
using Infoplus.Model;

namespace Infoplus.Test
{
    /// <summary>
    ///  Class for testing LineOfBusinessApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class LineOfBusinessApiTests
    {
        private LineOfBusinessApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new LineOfBusinessApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of LineOfBusinessApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' LineOfBusinessApi
            //Assert.IsInstanceOfType(typeof(LineOfBusinessApi), instance, "instance is a LineOfBusinessApi");
        }

        
        /// <summary>
        /// Test AddLineOfBusiness
        /// </summary>
        [Test]
        public void AddLineOfBusinessTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //LineOfBusiness body = null;
            //var response = instance.AddLineOfBusiness(body);
            //Assert.IsInstanceOf<LineOfBusiness> (response, "response is LineOfBusiness");
        }
        
        /// <summary>
        /// Test AddLineOfBusinessAudit
        /// </summary>
        [Test]
        public void AddLineOfBusinessAuditTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? lineOfBusinessId = null;
            //string lineOfBusinessAudit = null;
            //instance.AddLineOfBusinessAudit(lineOfBusinessId, lineOfBusinessAudit);
            
        }
        
        /// <summary>
        /// Test AddLineOfBusinessFile
        /// </summary>
        [Test]
        public void AddLineOfBusinessFileTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? lineOfBusinessId = null;
            //string fileName = null;
            //instance.AddLineOfBusinessFile(lineOfBusinessId, fileName);
            
        }
        
        /// <summary>
        /// Test AddLineOfBusinessFileByURL
        /// </summary>
        [Test]
        public void AddLineOfBusinessFileByURLTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //RecordFile body = null;
            //int? lineOfBusinessId = null;
            //instance.AddLineOfBusinessFileByURL(body, lineOfBusinessId);
            
        }
        
        /// <summary>
        /// Test AddLineOfBusinessTag
        /// </summary>
        [Test]
        public void AddLineOfBusinessTagTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? lineOfBusinessId = null;
            //string lineOfBusinessTag = null;
            //instance.AddLineOfBusinessTag(lineOfBusinessId, lineOfBusinessTag);
            
        }
        
        /// <summary>
        /// Test DeleteLineOfBusinessFile
        /// </summary>
        [Test]
        public void DeleteLineOfBusinessFileTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? lineOfBusinessId = null;
            //int? fileId = null;
            //instance.DeleteLineOfBusinessFile(lineOfBusinessId, fileId);
            
        }
        
        /// <summary>
        /// Test DeleteLineOfBusinessTag
        /// </summary>
        [Test]
        public void DeleteLineOfBusinessTagTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? lineOfBusinessId = null;
            //string lineOfBusinessTag = null;
            //instance.DeleteLineOfBusinessTag(lineOfBusinessId, lineOfBusinessTag);
            
        }
        
        /// <summary>
        /// Test GetDuplicateLineOfBusinessById
        /// </summary>
        [Test]
        public void GetDuplicateLineOfBusinessByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? lineOfBusinessId = null;
            //var response = instance.GetDuplicateLineOfBusinessById(lineOfBusinessId);
            //Assert.IsInstanceOf<LineOfBusiness> (response, "response is LineOfBusiness");
        }
        
        /// <summary>
        /// Test GetLineOfBusinessByFilter
        /// </summary>
        [Test]
        public void GetLineOfBusinessByFilterTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string filter = null;
            //int? page = null;
            //int? limit = null;
            //string sort = null;
            //var response = instance.GetLineOfBusinessByFilter(filter, page, limit, sort);
            //Assert.IsInstanceOf<List<LineOfBusiness>> (response, "response is List<LineOfBusiness>");
        }
        
        /// <summary>
        /// Test GetLineOfBusinessById
        /// </summary>
        [Test]
        public void GetLineOfBusinessByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? lineOfBusinessId = null;
            //var response = instance.GetLineOfBusinessById(lineOfBusinessId);
            //Assert.IsInstanceOf<LineOfBusiness> (response, "response is LineOfBusiness");
        }
        
        /// <summary>
        /// Test GetLineOfBusinessFiles
        /// </summary>
        [Test]
        public void GetLineOfBusinessFilesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? lineOfBusinessId = null;
            //instance.GetLineOfBusinessFiles(lineOfBusinessId);
            
        }
        
        /// <summary>
        /// Test GetLineOfBusinessTags
        /// </summary>
        [Test]
        public void GetLineOfBusinessTagsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? lineOfBusinessId = null;
            //instance.GetLineOfBusinessTags(lineOfBusinessId);
            
        }
        
        /// <summary>
        /// Test UpdateLineOfBusiness
        /// </summary>
        [Test]
        public void UpdateLineOfBusinessTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //LineOfBusiness body = null;
            //instance.UpdateLineOfBusiness(body);
            
        }
        
        /// <summary>
        /// Test UpdateLineOfBusinessCustomFields
        /// </summary>
        [Test]
        public void UpdateLineOfBusinessCustomFieldsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //LineOfBusiness body = null;
            //instance.UpdateLineOfBusinessCustomFields(body);
            
        }
        
    }

}
