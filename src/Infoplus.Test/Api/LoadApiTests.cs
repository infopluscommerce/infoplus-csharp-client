/* 
 * Infoplus API
 *
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Infoplus.Client;
using Infoplus.Api;
using Infoplus.Model;

namespace Infoplus.Test
{
    /// <summary>
    ///  Class for testing LoadApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class LoadApiTests
    {
        private LoadApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new LoadApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of LoadApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' LoadApi
            //Assert.IsInstanceOfType(typeof(LoadApi), instance, "instance is a LoadApi");
        }

        
        /// <summary>
        /// Test AddLoadAudit
        /// </summary>
        [Test]
        public void AddLoadAuditTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? loadId = null;
            //string loadAudit = null;
            //instance.AddLoadAudit(loadId, loadAudit);
            
        }
        
        /// <summary>
        /// Test AddLoadFile
        /// </summary>
        [Test]
        public void AddLoadFileTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? loadId = null;
            //string fileName = null;
            //instance.AddLoadFile(loadId, fileName);
            
        }
        
        /// <summary>
        /// Test AddLoadFileByURL
        /// </summary>
        [Test]
        public void AddLoadFileByURLTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //RecordFile body = null;
            //int? loadId = null;
            //instance.AddLoadFileByURL(body, loadId);
            
        }
        
        /// <summary>
        /// Test AddLoadTag
        /// </summary>
        [Test]
        public void AddLoadTagTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? loadId = null;
            //string loadTag = null;
            //instance.AddLoadTag(loadId, loadTag);
            
        }
        
        /// <summary>
        /// Test DeleteLoadFile
        /// </summary>
        [Test]
        public void DeleteLoadFileTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? loadId = null;
            //int? fileId = null;
            //instance.DeleteLoadFile(loadId, fileId);
            
        }
        
        /// <summary>
        /// Test DeleteLoadTag
        /// </summary>
        [Test]
        public void DeleteLoadTagTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? loadId = null;
            //string loadTag = null;
            //instance.DeleteLoadTag(loadId, loadTag);
            
        }
        
        /// <summary>
        /// Test GetDuplicateLoadById
        /// </summary>
        [Test]
        public void GetDuplicateLoadByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? loadId = null;
            //var response = instance.GetDuplicateLoadById(loadId);
            //Assert.IsInstanceOf<Load> (response, "response is Load");
        }
        
        /// <summary>
        /// Test GetLoadByFilter
        /// </summary>
        [Test]
        public void GetLoadByFilterTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string filter = null;
            //int? page = null;
            //int? limit = null;
            //string sort = null;
            //var response = instance.GetLoadByFilter(filter, page, limit, sort);
            //Assert.IsInstanceOf<List<Load>> (response, "response is List<Load>");
        }
        
        /// <summary>
        /// Test GetLoadById
        /// </summary>
        [Test]
        public void GetLoadByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? loadId = null;
            //var response = instance.GetLoadById(loadId);
            //Assert.IsInstanceOf<Load> (response, "response is Load");
        }
        
        /// <summary>
        /// Test GetLoadFiles
        /// </summary>
        [Test]
        public void GetLoadFilesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? loadId = null;
            //instance.GetLoadFiles(loadId);
            
        }
        
        /// <summary>
        /// Test GetLoadTags
        /// </summary>
        [Test]
        public void GetLoadTagsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? loadId = null;
            //instance.GetLoadTags(loadId);
            
        }
        
        /// <summary>
        /// Test UpdateLoadCustomFields
        /// </summary>
        [Test]
        public void UpdateLoadCustomFieldsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Load body = null;
            //instance.UpdateLoadCustomFields(body);
            
        }
        
    }

}
