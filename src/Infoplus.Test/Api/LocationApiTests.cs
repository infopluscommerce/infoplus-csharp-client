/* 
 * Infoplus API
 *
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Infoplus.Client;
using Infoplus.Api;
using Infoplus.Model;

namespace Infoplus.Test
{
    /// <summary>
    ///  Class for testing LocationApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class LocationApiTests
    {
        private LocationApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new LocationApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of LocationApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' LocationApi
            //Assert.IsInstanceOfType(typeof(LocationApi), instance, "instance is a LocationApi");
        }

        
        /// <summary>
        /// Test AddLocation
        /// </summary>
        [Test]
        public void AddLocationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Location body = null;
            //var response = instance.AddLocation(body);
            //Assert.IsInstanceOf<Location> (response, "response is Location");
        }
        
        /// <summary>
        /// Test AddLocationAudit
        /// </summary>
        [Test]
        public void AddLocationAuditTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? locationId = null;
            //string locationAudit = null;
            //instance.AddLocationAudit(locationId, locationAudit);
            
        }
        
        /// <summary>
        /// Test AddLocationFile
        /// </summary>
        [Test]
        public void AddLocationFileTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? locationId = null;
            //string fileName = null;
            //instance.AddLocationFile(locationId, fileName);
            
        }
        
        /// <summary>
        /// Test AddLocationFileByURL
        /// </summary>
        [Test]
        public void AddLocationFileByURLTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //RecordFile body = null;
            //int? locationId = null;
            //instance.AddLocationFileByURL(body, locationId);
            
        }
        
        /// <summary>
        /// Test AddLocationTag
        /// </summary>
        [Test]
        public void AddLocationTagTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? locationId = null;
            //string locationTag = null;
            //instance.AddLocationTag(locationId, locationTag);
            
        }
        
        /// <summary>
        /// Test DeleteLocation
        /// </summary>
        [Test]
        public void DeleteLocationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? locationId = null;
            //instance.DeleteLocation(locationId);
            
        }
        
        /// <summary>
        /// Test DeleteLocationFile
        /// </summary>
        [Test]
        public void DeleteLocationFileTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? locationId = null;
            //int? fileId = null;
            //instance.DeleteLocationFile(locationId, fileId);
            
        }
        
        /// <summary>
        /// Test DeleteLocationTag
        /// </summary>
        [Test]
        public void DeleteLocationTagTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? locationId = null;
            //string locationTag = null;
            //instance.DeleteLocationTag(locationId, locationTag);
            
        }
        
        /// <summary>
        /// Test GetDuplicateLocationById
        /// </summary>
        [Test]
        public void GetDuplicateLocationByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? locationId = null;
            //var response = instance.GetDuplicateLocationById(locationId);
            //Assert.IsInstanceOf<Location> (response, "response is Location");
        }
        
        /// <summary>
        /// Test GetLocationByFilter
        /// </summary>
        [Test]
        public void GetLocationByFilterTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string filter = null;
            //int? page = null;
            //int? limit = null;
            //string sort = null;
            //var response = instance.GetLocationByFilter(filter, page, limit, sort);
            //Assert.IsInstanceOf<List<Location>> (response, "response is List<Location>");
        }
        
        /// <summary>
        /// Test GetLocationById
        /// </summary>
        [Test]
        public void GetLocationByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? locationId = null;
            //var response = instance.GetLocationById(locationId);
            //Assert.IsInstanceOf<Location> (response, "response is Location");
        }
        
        /// <summary>
        /// Test GetLocationFiles
        /// </summary>
        [Test]
        public void GetLocationFilesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? locationId = null;
            //instance.GetLocationFiles(locationId);
            
        }
        
        /// <summary>
        /// Test GetLocationTags
        /// </summary>
        [Test]
        public void GetLocationTagsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? locationId = null;
            //instance.GetLocationTags(locationId);
            
        }
        
        /// <summary>
        /// Test UpdateLocation
        /// </summary>
        [Test]
        public void UpdateLocationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Location body = null;
            //instance.UpdateLocation(body);
            
        }
        
        /// <summary>
        /// Test UpdateLocationCustomFields
        /// </summary>
        [Test]
        public void UpdateLocationCustomFieldsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Location body = null;
            //instance.UpdateLocationCustomFields(body);
            
        }
        
    }

}
