/* 
 * Infoplus API
 *
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Infoplus.Client;
using Infoplus.Api;
using Infoplus.Model;

namespace Infoplus.Test
{
    /// <summary>
    ///  Class for testing LowStockApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class LowStockApiTests
    {
        private LowStockApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new LowStockApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of LowStockApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' LowStockApi
            //Assert.IsInstanceOfType(typeof(LowStockApi), instance, "instance is a LowStockApi");
        }

        
        /// <summary>
        /// Test AddLowStockAudit
        /// </summary>
        [Test]
        public void AddLowStockAuditTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? lowStockId = null;
            //string lowStockAudit = null;
            //instance.AddLowStockAudit(lowStockId, lowStockAudit);
            
        }
        
        /// <summary>
        /// Test AddLowStockFile
        /// </summary>
        [Test]
        public void AddLowStockFileTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? lowStockId = null;
            //string fileName = null;
            //instance.AddLowStockFile(lowStockId, fileName);
            
        }
        
        /// <summary>
        /// Test AddLowStockFileByURL
        /// </summary>
        [Test]
        public void AddLowStockFileByURLTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //RecordFile body = null;
            //int? lowStockId = null;
            //instance.AddLowStockFileByURL(body, lowStockId);
            
        }
        
        /// <summary>
        /// Test AddLowStockTag
        /// </summary>
        [Test]
        public void AddLowStockTagTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? lowStockId = null;
            //string lowStockTag = null;
            //instance.AddLowStockTag(lowStockId, lowStockTag);
            
        }
        
        /// <summary>
        /// Test DeleteLowStockFile
        /// </summary>
        [Test]
        public void DeleteLowStockFileTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? lowStockId = null;
            //int? fileId = null;
            //instance.DeleteLowStockFile(lowStockId, fileId);
            
        }
        
        /// <summary>
        /// Test DeleteLowStockTag
        /// </summary>
        [Test]
        public void DeleteLowStockTagTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? lowStockId = null;
            //string lowStockTag = null;
            //instance.DeleteLowStockTag(lowStockId, lowStockTag);
            
        }
        
        /// <summary>
        /// Test GetDuplicateLowStockById
        /// </summary>
        [Test]
        public void GetDuplicateLowStockByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? lowStockId = null;
            //var response = instance.GetDuplicateLowStockById(lowStockId);
            //Assert.IsInstanceOf<LowStock> (response, "response is LowStock");
        }
        
        /// <summary>
        /// Test GetLowStockByFilter
        /// </summary>
        [Test]
        public void GetLowStockByFilterTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string filter = null;
            //int? page = null;
            //int? limit = null;
            //string sort = null;
            //var response = instance.GetLowStockByFilter(filter, page, limit, sort);
            //Assert.IsInstanceOf<List<LowStock>> (response, "response is List<LowStock>");
        }
        
        /// <summary>
        /// Test GetLowStockById
        /// </summary>
        [Test]
        public void GetLowStockByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? lowStockId = null;
            //var response = instance.GetLowStockById(lowStockId);
            //Assert.IsInstanceOf<LowStock> (response, "response is LowStock");
        }
        
        /// <summary>
        /// Test GetLowStockFiles
        /// </summary>
        [Test]
        public void GetLowStockFilesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? lowStockId = null;
            //instance.GetLowStockFiles(lowStockId);
            
        }
        
        /// <summary>
        /// Test GetLowStockTags
        /// </summary>
        [Test]
        public void GetLowStockTagsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? lowStockId = null;
            //instance.GetLowStockTags(lowStockId);
            
        }
        
    }

}
