/* 
 * Infoplus API
 *
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Infoplus.Client;
using Infoplus.Api;
using Infoplus.Model;

namespace Infoplus.Test
{
    /// <summary>
    ///  Class for testing NonBusinessDayApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class NonBusinessDayApiTests
    {
        private NonBusinessDayApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new NonBusinessDayApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of NonBusinessDayApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' NonBusinessDayApi
            //Assert.IsInstanceOfType(typeof(NonBusinessDayApi), instance, "instance is a NonBusinessDayApi");
        }

        
        /// <summary>
        /// Test AddNonBusinessDay
        /// </summary>
        [Test]
        public void AddNonBusinessDayTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //NonBusinessDay body = null;
            //var response = instance.AddNonBusinessDay(body);
            //Assert.IsInstanceOf<NonBusinessDay> (response, "response is NonBusinessDay");
        }
        
        /// <summary>
        /// Test AddNonBusinessDayAudit
        /// </summary>
        [Test]
        public void AddNonBusinessDayAuditTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? nonBusinessDayId = null;
            //string nonBusinessDayAudit = null;
            //instance.AddNonBusinessDayAudit(nonBusinessDayId, nonBusinessDayAudit);
            
        }
        
        /// <summary>
        /// Test AddNonBusinessDayFile
        /// </summary>
        [Test]
        public void AddNonBusinessDayFileTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? nonBusinessDayId = null;
            //string fileName = null;
            //instance.AddNonBusinessDayFile(nonBusinessDayId, fileName);
            
        }
        
        /// <summary>
        /// Test AddNonBusinessDayFileByURL
        /// </summary>
        [Test]
        public void AddNonBusinessDayFileByURLTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //RecordFile body = null;
            //int? nonBusinessDayId = null;
            //instance.AddNonBusinessDayFileByURL(body, nonBusinessDayId);
            
        }
        
        /// <summary>
        /// Test AddNonBusinessDayTag
        /// </summary>
        [Test]
        public void AddNonBusinessDayTagTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? nonBusinessDayId = null;
            //string nonBusinessDayTag = null;
            //instance.AddNonBusinessDayTag(nonBusinessDayId, nonBusinessDayTag);
            
        }
        
        /// <summary>
        /// Test DeleteNonBusinessDay
        /// </summary>
        [Test]
        public void DeleteNonBusinessDayTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? nonBusinessDayId = null;
            //instance.DeleteNonBusinessDay(nonBusinessDayId);
            
        }
        
        /// <summary>
        /// Test DeleteNonBusinessDayFile
        /// </summary>
        [Test]
        public void DeleteNonBusinessDayFileTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? nonBusinessDayId = null;
            //int? fileId = null;
            //instance.DeleteNonBusinessDayFile(nonBusinessDayId, fileId);
            
        }
        
        /// <summary>
        /// Test DeleteNonBusinessDayTag
        /// </summary>
        [Test]
        public void DeleteNonBusinessDayTagTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? nonBusinessDayId = null;
            //string nonBusinessDayTag = null;
            //instance.DeleteNonBusinessDayTag(nonBusinessDayId, nonBusinessDayTag);
            
        }
        
        /// <summary>
        /// Test GetDuplicateNonBusinessDayById
        /// </summary>
        [Test]
        public void GetDuplicateNonBusinessDayByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? nonBusinessDayId = null;
            //var response = instance.GetDuplicateNonBusinessDayById(nonBusinessDayId);
            //Assert.IsInstanceOf<NonBusinessDay> (response, "response is NonBusinessDay");
        }
        
        /// <summary>
        /// Test GetNonBusinessDayByFilter
        /// </summary>
        [Test]
        public void GetNonBusinessDayByFilterTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string filter = null;
            //int? page = null;
            //int? limit = null;
            //string sort = null;
            //var response = instance.GetNonBusinessDayByFilter(filter, page, limit, sort);
            //Assert.IsInstanceOf<List<NonBusinessDay>> (response, "response is List<NonBusinessDay>");
        }
        
        /// <summary>
        /// Test GetNonBusinessDayById
        /// </summary>
        [Test]
        public void GetNonBusinessDayByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? nonBusinessDayId = null;
            //var response = instance.GetNonBusinessDayById(nonBusinessDayId);
            //Assert.IsInstanceOf<NonBusinessDay> (response, "response is NonBusinessDay");
        }
        
        /// <summary>
        /// Test GetNonBusinessDayFiles
        /// </summary>
        [Test]
        public void GetNonBusinessDayFilesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? nonBusinessDayId = null;
            //instance.GetNonBusinessDayFiles(nonBusinessDayId);
            
        }
        
        /// <summary>
        /// Test GetNonBusinessDayTags
        /// </summary>
        [Test]
        public void GetNonBusinessDayTagsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? nonBusinessDayId = null;
            //instance.GetNonBusinessDayTags(nonBusinessDayId);
            
        }
        
        /// <summary>
        /// Test UpdateNonBusinessDay
        /// </summary>
        [Test]
        public void UpdateNonBusinessDayTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //NonBusinessDay body = null;
            //instance.UpdateNonBusinessDay(body);
            
        }
        
    }

}
