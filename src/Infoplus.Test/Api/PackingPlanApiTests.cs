/* 
 * Infoplus API
 *
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Infoplus.Client;
using Infoplus.Api;
using Infoplus.Model;

namespace Infoplus.Test
{
    /// <summary>
    ///  Class for testing PackingPlanApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class PackingPlanApiTests
    {
        private PackingPlanApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new PackingPlanApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of PackingPlanApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' PackingPlanApi
            //Assert.IsInstanceOfType(typeof(PackingPlanApi), instance, "instance is a PackingPlanApi");
        }

        
        /// <summary>
        /// Test AddPackingPlan
        /// </summary>
        [Test]
        public void AddPackingPlanTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //PackingPlan body = null;
            //var response = instance.AddPackingPlan(body);
            //Assert.IsInstanceOf<PackingPlan> (response, "response is PackingPlan");
        }
        
        /// <summary>
        /// Test AddPackingPlanAudit
        /// </summary>
        [Test]
        public void AddPackingPlanAuditTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? packingPlanId = null;
            //string packingPlanAudit = null;
            //instance.AddPackingPlanAudit(packingPlanId, packingPlanAudit);
            
        }
        
        /// <summary>
        /// Test AddPackingPlanFile
        /// </summary>
        [Test]
        public void AddPackingPlanFileTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? packingPlanId = null;
            //string fileName = null;
            //instance.AddPackingPlanFile(packingPlanId, fileName);
            
        }
        
        /// <summary>
        /// Test AddPackingPlanFileByURL
        /// </summary>
        [Test]
        public void AddPackingPlanFileByURLTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //RecordFile body = null;
            //int? packingPlanId = null;
            //instance.AddPackingPlanFileByURL(body, packingPlanId);
            
        }
        
        /// <summary>
        /// Test AddPackingPlanTag
        /// </summary>
        [Test]
        public void AddPackingPlanTagTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? packingPlanId = null;
            //string packingPlanTag = null;
            //instance.AddPackingPlanTag(packingPlanId, packingPlanTag);
            
        }
        
        /// <summary>
        /// Test DeletePackingPlan
        /// </summary>
        [Test]
        public void DeletePackingPlanTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? packingPlanId = null;
            //instance.DeletePackingPlan(packingPlanId);
            
        }
        
        /// <summary>
        /// Test DeletePackingPlanFile
        /// </summary>
        [Test]
        public void DeletePackingPlanFileTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? packingPlanId = null;
            //int? fileId = null;
            //instance.DeletePackingPlanFile(packingPlanId, fileId);
            
        }
        
        /// <summary>
        /// Test DeletePackingPlanTag
        /// </summary>
        [Test]
        public void DeletePackingPlanTagTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? packingPlanId = null;
            //string packingPlanTag = null;
            //instance.DeletePackingPlanTag(packingPlanId, packingPlanTag);
            
        }
        
        /// <summary>
        /// Test GetDuplicatePackingPlanById
        /// </summary>
        [Test]
        public void GetDuplicatePackingPlanByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? packingPlanId = null;
            //var response = instance.GetDuplicatePackingPlanById(packingPlanId);
            //Assert.IsInstanceOf<PackingPlan> (response, "response is PackingPlan");
        }
        
        /// <summary>
        /// Test GetPackingPlanByFilter
        /// </summary>
        [Test]
        public void GetPackingPlanByFilterTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string filter = null;
            //int? page = null;
            //int? limit = null;
            //string sort = null;
            //var response = instance.GetPackingPlanByFilter(filter, page, limit, sort);
            //Assert.IsInstanceOf<List<PackingPlan>> (response, "response is List<PackingPlan>");
        }
        
        /// <summary>
        /// Test GetPackingPlanById
        /// </summary>
        [Test]
        public void GetPackingPlanByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? packingPlanId = null;
            //var response = instance.GetPackingPlanById(packingPlanId);
            //Assert.IsInstanceOf<PackingPlan> (response, "response is PackingPlan");
        }
        
        /// <summary>
        /// Test GetPackingPlanFiles
        /// </summary>
        [Test]
        public void GetPackingPlanFilesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? packingPlanId = null;
            //instance.GetPackingPlanFiles(packingPlanId);
            
        }
        
        /// <summary>
        /// Test GetPackingPlanTags
        /// </summary>
        [Test]
        public void GetPackingPlanTagsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? packingPlanId = null;
            //instance.GetPackingPlanTags(packingPlanId);
            
        }
        
        /// <summary>
        /// Test UpdatePackingPlan
        /// </summary>
        [Test]
        public void UpdatePackingPlanTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //PackingPlan body = null;
            //instance.UpdatePackingPlan(body);
            
        }
        
        /// <summary>
        /// Test UpdatePackingPlanCustomFields
        /// </summary>
        [Test]
        public void UpdatePackingPlanCustomFieldsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //PackingPlan body = null;
            //instance.UpdatePackingPlanCustomFields(body);
            
        }
        
    }

}
