/* 
 * Infoplus API
 *
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Infoplus.Client;
using Infoplus.Api;
using Infoplus.Model;

namespace Infoplus.Test
{
    /// <summary>
    ///  Class for testing PalletTypeApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class PalletTypeApiTests
    {
        private PalletTypeApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new PalletTypeApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of PalletTypeApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' PalletTypeApi
            //Assert.IsInstanceOfType(typeof(PalletTypeApi), instance, "instance is a PalletTypeApi");
        }

        
        /// <summary>
        /// Test AddPalletType
        /// </summary>
        [Test]
        public void AddPalletTypeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //PalletType body = null;
            //var response = instance.AddPalletType(body);
            //Assert.IsInstanceOf<PalletType> (response, "response is PalletType");
        }
        
        /// <summary>
        /// Test AddPalletTypeAudit
        /// </summary>
        [Test]
        public void AddPalletTypeAuditTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? palletTypeId = null;
            //string palletTypeAudit = null;
            //instance.AddPalletTypeAudit(palletTypeId, palletTypeAudit);
            
        }
        
        /// <summary>
        /// Test AddPalletTypeFile
        /// </summary>
        [Test]
        public void AddPalletTypeFileTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? palletTypeId = null;
            //string fileName = null;
            //instance.AddPalletTypeFile(palletTypeId, fileName);
            
        }
        
        /// <summary>
        /// Test AddPalletTypeFileByURL
        /// </summary>
        [Test]
        public void AddPalletTypeFileByURLTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //RecordFile body = null;
            //int? palletTypeId = null;
            //instance.AddPalletTypeFileByURL(body, palletTypeId);
            
        }
        
        /// <summary>
        /// Test AddPalletTypeTag
        /// </summary>
        [Test]
        public void AddPalletTypeTagTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? palletTypeId = null;
            //string palletTypeTag = null;
            //instance.AddPalletTypeTag(palletTypeId, palletTypeTag);
            
        }
        
        /// <summary>
        /// Test DeletePalletType
        /// </summary>
        [Test]
        public void DeletePalletTypeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? palletTypeId = null;
            //instance.DeletePalletType(palletTypeId);
            
        }
        
        /// <summary>
        /// Test DeletePalletTypeFile
        /// </summary>
        [Test]
        public void DeletePalletTypeFileTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? palletTypeId = null;
            //int? fileId = null;
            //instance.DeletePalletTypeFile(palletTypeId, fileId);
            
        }
        
        /// <summary>
        /// Test DeletePalletTypeTag
        /// </summary>
        [Test]
        public void DeletePalletTypeTagTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? palletTypeId = null;
            //string palletTypeTag = null;
            //instance.DeletePalletTypeTag(palletTypeId, palletTypeTag);
            
        }
        
        /// <summary>
        /// Test GetDuplicatePalletTypeById
        /// </summary>
        [Test]
        public void GetDuplicatePalletTypeByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? palletTypeId = null;
            //var response = instance.GetDuplicatePalletTypeById(palletTypeId);
            //Assert.IsInstanceOf<PalletType> (response, "response is PalletType");
        }
        
        /// <summary>
        /// Test GetPalletTypeByFilter
        /// </summary>
        [Test]
        public void GetPalletTypeByFilterTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string filter = null;
            //int? page = null;
            //int? limit = null;
            //string sort = null;
            //var response = instance.GetPalletTypeByFilter(filter, page, limit, sort);
            //Assert.IsInstanceOf<List<PalletType>> (response, "response is List<PalletType>");
        }
        
        /// <summary>
        /// Test GetPalletTypeById
        /// </summary>
        [Test]
        public void GetPalletTypeByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? palletTypeId = null;
            //var response = instance.GetPalletTypeById(palletTypeId);
            //Assert.IsInstanceOf<PalletType> (response, "response is PalletType");
        }
        
        /// <summary>
        /// Test GetPalletTypeFiles
        /// </summary>
        [Test]
        public void GetPalletTypeFilesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? palletTypeId = null;
            //instance.GetPalletTypeFiles(palletTypeId);
            
        }
        
        /// <summary>
        /// Test GetPalletTypeTags
        /// </summary>
        [Test]
        public void GetPalletTypeTagsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? palletTypeId = null;
            //instance.GetPalletTypeTags(palletTypeId);
            
        }
        
        /// <summary>
        /// Test UpdatePalletType
        /// </summary>
        [Test]
        public void UpdatePalletTypeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //PalletType body = null;
            //instance.UpdatePalletType(body);
            
        }
        
        /// <summary>
        /// Test UpdatePalletTypeCustomFields
        /// </summary>
        [Test]
        public void UpdatePalletTypeCustomFieldsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //PalletType body = null;
            //instance.UpdatePalletTypeCustomFields(body);
            
        }
        
    }

}
