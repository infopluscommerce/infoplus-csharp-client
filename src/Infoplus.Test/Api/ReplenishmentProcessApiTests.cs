/* 
 * Infoplus API
 *
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Infoplus.Client;
using Infoplus.Api;
using Infoplus.Model;

namespace Infoplus.Test
{
    /// <summary>
    ///  Class for testing ReplenishmentProcessApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class ReplenishmentProcessApiTests
    {
        private ReplenishmentProcessApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new ReplenishmentProcessApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of ReplenishmentProcessApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' ReplenishmentProcessApi
            //Assert.IsInstanceOfType(typeof(ReplenishmentProcessApi), instance, "instance is a ReplenishmentProcessApi");
        }

        
        /// <summary>
        /// Test AddReplenishmentProcessAudit
        /// </summary>
        [Test]
        public void AddReplenishmentProcessAuditTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? replenishmentProcessId = null;
            //string replenishmentProcessAudit = null;
            //instance.AddReplenishmentProcessAudit(replenishmentProcessId, replenishmentProcessAudit);
            
        }
        
        /// <summary>
        /// Test AddReplenishmentProcessFile
        /// </summary>
        [Test]
        public void AddReplenishmentProcessFileTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? replenishmentProcessId = null;
            //string fileName = null;
            //instance.AddReplenishmentProcessFile(replenishmentProcessId, fileName);
            
        }
        
        /// <summary>
        /// Test AddReplenishmentProcessFileByURL
        /// </summary>
        [Test]
        public void AddReplenishmentProcessFileByURLTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //RecordFile body = null;
            //int? replenishmentProcessId = null;
            //instance.AddReplenishmentProcessFileByURL(body, replenishmentProcessId);
            
        }
        
        /// <summary>
        /// Test AddReplenishmentProcessTag
        /// </summary>
        [Test]
        public void AddReplenishmentProcessTagTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? replenishmentProcessId = null;
            //string replenishmentProcessTag = null;
            //instance.AddReplenishmentProcessTag(replenishmentProcessId, replenishmentProcessTag);
            
        }
        
        /// <summary>
        /// Test DeleteReplenishmentProcessFile
        /// </summary>
        [Test]
        public void DeleteReplenishmentProcessFileTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? replenishmentProcessId = null;
            //int? fileId = null;
            //instance.DeleteReplenishmentProcessFile(replenishmentProcessId, fileId);
            
        }
        
        /// <summary>
        /// Test DeleteReplenishmentProcessTag
        /// </summary>
        [Test]
        public void DeleteReplenishmentProcessTagTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? replenishmentProcessId = null;
            //string replenishmentProcessTag = null;
            //instance.DeleteReplenishmentProcessTag(replenishmentProcessId, replenishmentProcessTag);
            
        }
        
        /// <summary>
        /// Test GetDuplicateReplenishmentProcessById
        /// </summary>
        [Test]
        public void GetDuplicateReplenishmentProcessByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? replenishmentProcessId = null;
            //var response = instance.GetDuplicateReplenishmentProcessById(replenishmentProcessId);
            //Assert.IsInstanceOf<ReplenishmentProcess> (response, "response is ReplenishmentProcess");
        }
        
        /// <summary>
        /// Test GetReplenishmentProcessByFilter
        /// </summary>
        [Test]
        public void GetReplenishmentProcessByFilterTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string filter = null;
            //int? page = null;
            //int? limit = null;
            //string sort = null;
            //var response = instance.GetReplenishmentProcessByFilter(filter, page, limit, sort);
            //Assert.IsInstanceOf<List<ReplenishmentProcess>> (response, "response is List<ReplenishmentProcess>");
        }
        
        /// <summary>
        /// Test GetReplenishmentProcessById
        /// </summary>
        [Test]
        public void GetReplenishmentProcessByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? replenishmentProcessId = null;
            //var response = instance.GetReplenishmentProcessById(replenishmentProcessId);
            //Assert.IsInstanceOf<ReplenishmentProcess> (response, "response is ReplenishmentProcess");
        }
        
        /// <summary>
        /// Test GetReplenishmentProcessFiles
        /// </summary>
        [Test]
        public void GetReplenishmentProcessFilesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? replenishmentProcessId = null;
            //instance.GetReplenishmentProcessFiles(replenishmentProcessId);
            
        }
        
        /// <summary>
        /// Test GetReplenishmentProcessTags
        /// </summary>
        [Test]
        public void GetReplenishmentProcessTagsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? replenishmentProcessId = null;
            //instance.GetReplenishmentProcessTags(replenishmentProcessId);
            
        }
        
        /// <summary>
        /// Test UpdateReplenishmentProcessCustomFields
        /// </summary>
        [Test]
        public void UpdateReplenishmentProcessCustomFieldsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ReplenishmentProcess body = null;
            //instance.UpdateReplenishmentProcessCustomFields(body);
            
        }
        
    }

}
