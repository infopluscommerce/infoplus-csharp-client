/* 
 * Infoplus API
 *
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Infoplus.Client;
using Infoplus.Api;
using Infoplus.Model;

namespace Infoplus.Test
{
    /// <summary>
    ///  Class for testing SubstitutionApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class SubstitutionApiTests
    {
        private SubstitutionApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new SubstitutionApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of SubstitutionApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' SubstitutionApi
            //Assert.IsInstanceOfType(typeof(SubstitutionApi), instance, "instance is a SubstitutionApi");
        }

        
        /// <summary>
        /// Test AddSubstitution
        /// </summary>
        [Test]
        public void AddSubstitutionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Substitution body = null;
            //var response = instance.AddSubstitution(body);
            //Assert.IsInstanceOf<Substitution> (response, "response is Substitution");
        }
        
        /// <summary>
        /// Test AddSubstitutionAudit
        /// </summary>
        [Test]
        public void AddSubstitutionAuditTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? substitutionId = null;
            //string substitutionAudit = null;
            //instance.AddSubstitutionAudit(substitutionId, substitutionAudit);
            
        }
        
        /// <summary>
        /// Test AddSubstitutionFile
        /// </summary>
        [Test]
        public void AddSubstitutionFileTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? substitutionId = null;
            //string fileName = null;
            //instance.AddSubstitutionFile(substitutionId, fileName);
            
        }
        
        /// <summary>
        /// Test AddSubstitutionFileByURL
        /// </summary>
        [Test]
        public void AddSubstitutionFileByURLTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //RecordFile body = null;
            //int? substitutionId = null;
            //instance.AddSubstitutionFileByURL(body, substitutionId);
            
        }
        
        /// <summary>
        /// Test AddSubstitutionTag
        /// </summary>
        [Test]
        public void AddSubstitutionTagTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? substitutionId = null;
            //string substitutionTag = null;
            //instance.AddSubstitutionTag(substitutionId, substitutionTag);
            
        }
        
        /// <summary>
        /// Test DeleteSubstitution
        /// </summary>
        [Test]
        public void DeleteSubstitutionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? substitutionId = null;
            //instance.DeleteSubstitution(substitutionId);
            
        }
        
        /// <summary>
        /// Test DeleteSubstitutionFile
        /// </summary>
        [Test]
        public void DeleteSubstitutionFileTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? substitutionId = null;
            //int? fileId = null;
            //instance.DeleteSubstitutionFile(substitutionId, fileId);
            
        }
        
        /// <summary>
        /// Test DeleteSubstitutionTag
        /// </summary>
        [Test]
        public void DeleteSubstitutionTagTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? substitutionId = null;
            //string substitutionTag = null;
            //instance.DeleteSubstitutionTag(substitutionId, substitutionTag);
            
        }
        
        /// <summary>
        /// Test GetDuplicateSubstitutionById
        /// </summary>
        [Test]
        public void GetDuplicateSubstitutionByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? substitutionId = null;
            //var response = instance.GetDuplicateSubstitutionById(substitutionId);
            //Assert.IsInstanceOf<Substitution> (response, "response is Substitution");
        }
        
        /// <summary>
        /// Test GetSubstitutionByFilter
        /// </summary>
        [Test]
        public void GetSubstitutionByFilterTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string filter = null;
            //int? page = null;
            //int? limit = null;
            //string sort = null;
            //var response = instance.GetSubstitutionByFilter(filter, page, limit, sort);
            //Assert.IsInstanceOf<List<Substitution>> (response, "response is List<Substitution>");
        }
        
        /// <summary>
        /// Test GetSubstitutionById
        /// </summary>
        [Test]
        public void GetSubstitutionByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? substitutionId = null;
            //var response = instance.GetSubstitutionById(substitutionId);
            //Assert.IsInstanceOf<Substitution> (response, "response is Substitution");
        }
        
        /// <summary>
        /// Test GetSubstitutionFiles
        /// </summary>
        [Test]
        public void GetSubstitutionFilesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? substitutionId = null;
            //instance.GetSubstitutionFiles(substitutionId);
            
        }
        
        /// <summary>
        /// Test GetSubstitutionTags
        /// </summary>
        [Test]
        public void GetSubstitutionTagsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? substitutionId = null;
            //instance.GetSubstitutionTags(substitutionId);
            
        }
        
        /// <summary>
        /// Test UpdateSubstitution
        /// </summary>
        [Test]
        public void UpdateSubstitutionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Substitution body = null;
            //instance.UpdateSubstitution(body);
            
        }
        
        /// <summary>
        /// Test UpdateSubstitutionCustomFields
        /// </summary>
        [Test]
        public void UpdateSubstitutionCustomFieldsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Substitution body = null;
            //instance.UpdateSubstitutionCustomFields(body);
            
        }
        
    }

}
