/* 
 * Infoplus API
 *
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Infoplus.Client;
using Infoplus.Api;
using Infoplus.Model;

namespace Infoplus.Test
{
    /// <summary>
    ///  Class for testing SupplementApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class SupplementApiTests
    {
        private SupplementApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new SupplementApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of SupplementApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' SupplementApi
            //Assert.IsInstanceOfType(typeof(SupplementApi), instance, "instance is a SupplementApi");
        }

        
        /// <summary>
        /// Test AddSupplement
        /// </summary>
        [Test]
        public void AddSupplementTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Supplement body = null;
            //var response = instance.AddSupplement(body);
            //Assert.IsInstanceOf<Supplement> (response, "response is Supplement");
        }
        
        /// <summary>
        /// Test AddSupplementAudit
        /// </summary>
        [Test]
        public void AddSupplementAuditTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? supplementId = null;
            //string supplementAudit = null;
            //instance.AddSupplementAudit(supplementId, supplementAudit);
            
        }
        
        /// <summary>
        /// Test AddSupplementFile
        /// </summary>
        [Test]
        public void AddSupplementFileTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? supplementId = null;
            //string fileName = null;
            //instance.AddSupplementFile(supplementId, fileName);
            
        }
        
        /// <summary>
        /// Test AddSupplementFileByURL
        /// </summary>
        [Test]
        public void AddSupplementFileByURLTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //RecordFile body = null;
            //int? supplementId = null;
            //instance.AddSupplementFileByURL(body, supplementId);
            
        }
        
        /// <summary>
        /// Test AddSupplementTag
        /// </summary>
        [Test]
        public void AddSupplementTagTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? supplementId = null;
            //string supplementTag = null;
            //instance.AddSupplementTag(supplementId, supplementTag);
            
        }
        
        /// <summary>
        /// Test DeleteSupplement
        /// </summary>
        [Test]
        public void DeleteSupplementTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? supplementId = null;
            //instance.DeleteSupplement(supplementId);
            
        }
        
        /// <summary>
        /// Test DeleteSupplementFile
        /// </summary>
        [Test]
        public void DeleteSupplementFileTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? supplementId = null;
            //int? fileId = null;
            //instance.DeleteSupplementFile(supplementId, fileId);
            
        }
        
        /// <summary>
        /// Test DeleteSupplementTag
        /// </summary>
        [Test]
        public void DeleteSupplementTagTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? supplementId = null;
            //string supplementTag = null;
            //instance.DeleteSupplementTag(supplementId, supplementTag);
            
        }
        
        /// <summary>
        /// Test GetDuplicateSupplementById
        /// </summary>
        [Test]
        public void GetDuplicateSupplementByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? supplementId = null;
            //var response = instance.GetDuplicateSupplementById(supplementId);
            //Assert.IsInstanceOf<Supplement> (response, "response is Supplement");
        }
        
        /// <summary>
        /// Test GetSupplementByFilter
        /// </summary>
        [Test]
        public void GetSupplementByFilterTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string filter = null;
            //int? page = null;
            //int? limit = null;
            //string sort = null;
            //var response = instance.GetSupplementByFilter(filter, page, limit, sort);
            //Assert.IsInstanceOf<List<Supplement>> (response, "response is List<Supplement>");
        }
        
        /// <summary>
        /// Test GetSupplementById
        /// </summary>
        [Test]
        public void GetSupplementByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? supplementId = null;
            //var response = instance.GetSupplementById(supplementId);
            //Assert.IsInstanceOf<Supplement> (response, "response is Supplement");
        }
        
        /// <summary>
        /// Test GetSupplementFiles
        /// </summary>
        [Test]
        public void GetSupplementFilesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? supplementId = null;
            //instance.GetSupplementFiles(supplementId);
            
        }
        
        /// <summary>
        /// Test GetSupplementTags
        /// </summary>
        [Test]
        public void GetSupplementTagsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? supplementId = null;
            //instance.GetSupplementTags(supplementId);
            
        }
        
        /// <summary>
        /// Test UpdateSupplement
        /// </summary>
        [Test]
        public void UpdateSupplementTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Supplement body = null;
            //instance.UpdateSupplement(body);
            
        }
        
        /// <summary>
        /// Test UpdateSupplementCustomFields
        /// </summary>
        [Test]
        public void UpdateSupplementCustomFieldsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Supplement body = null;
            //instance.UpdateSupplementCustomFields(body);
            
        }
        
    }

}
