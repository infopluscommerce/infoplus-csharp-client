/* 
 * Infoplus API
 *
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Infoplus.Client;
using Infoplus.Api;
using Infoplus.Model;

namespace Infoplus.Test
{
    /// <summary>
    ///  Class for testing WorkApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class WorkApiTests
    {
        private WorkApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new WorkApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of WorkApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' WorkApi
            //Assert.IsInstanceOfType(typeof(WorkApi), instance, "instance is a WorkApi");
        }

        
        /// <summary>
        /// Test AddWorkAudit
        /// </summary>
        [Test]
        public void AddWorkAuditTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? workId = null;
            //string workAudit = null;
            //instance.AddWorkAudit(workId, workAudit);
            
        }
        
        /// <summary>
        /// Test AddWorkFile
        /// </summary>
        [Test]
        public void AddWorkFileTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? workId = null;
            //string fileName = null;
            //instance.AddWorkFile(workId, fileName);
            
        }
        
        /// <summary>
        /// Test AddWorkFileByURL
        /// </summary>
        [Test]
        public void AddWorkFileByURLTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //RecordFile body = null;
            //int? workId = null;
            //instance.AddWorkFileByURL(body, workId);
            
        }
        
        /// <summary>
        /// Test AddWorkTag
        /// </summary>
        [Test]
        public void AddWorkTagTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? workId = null;
            //string workTag = null;
            //instance.AddWorkTag(workId, workTag);
            
        }
        
        /// <summary>
        /// Test DeleteWorkFile
        /// </summary>
        [Test]
        public void DeleteWorkFileTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? workId = null;
            //int? fileId = null;
            //instance.DeleteWorkFile(workId, fileId);
            
        }
        
        /// <summary>
        /// Test DeleteWorkTag
        /// </summary>
        [Test]
        public void DeleteWorkTagTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? workId = null;
            //string workTag = null;
            //instance.DeleteWorkTag(workId, workTag);
            
        }
        
        /// <summary>
        /// Test GetDuplicateWorkById
        /// </summary>
        [Test]
        public void GetDuplicateWorkByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? workId = null;
            //var response = instance.GetDuplicateWorkById(workId);
            //Assert.IsInstanceOf<Work> (response, "response is Work");
        }
        
        /// <summary>
        /// Test GetWorkByFilter
        /// </summary>
        [Test]
        public void GetWorkByFilterTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string filter = null;
            //int? page = null;
            //int? limit = null;
            //string sort = null;
            //var response = instance.GetWorkByFilter(filter, page, limit, sort);
            //Assert.IsInstanceOf<List<Work>> (response, "response is List<Work>");
        }
        
        /// <summary>
        /// Test GetWorkById
        /// </summary>
        [Test]
        public void GetWorkByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? workId = null;
            //var response = instance.GetWorkById(workId);
            //Assert.IsInstanceOf<Work> (response, "response is Work");
        }
        
        /// <summary>
        /// Test GetWorkFiles
        /// </summary>
        [Test]
        public void GetWorkFilesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? workId = null;
            //instance.GetWorkFiles(workId);
            
        }
        
        /// <summary>
        /// Test GetWorkTags
        /// </summary>
        [Test]
        public void GetWorkTagsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? workId = null;
            //instance.GetWorkTags(workId);
            
        }
        
        /// <summary>
        /// Test UpdateWork
        /// </summary>
        [Test]
        public void UpdateWorkTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Work body = null;
            //instance.UpdateWork(body);
            
        }
        
        /// <summary>
        /// Test UpdateWorkCustomFields
        /// </summary>
        [Test]
        public void UpdateWorkCustomFieldsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Work body = null;
            //instance.UpdateWorkCustomFields(body);
            
        }
        
    }

}
