/* 
 * Infoplus API
 *
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Infoplus.Client;
using Infoplus.Api;
using Infoplus.Model;

namespace Infoplus.Test
{
    /// <summary>
    ///  Class for testing ZoneApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class ZoneApiTests
    {
        private ZoneApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new ZoneApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of ZoneApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' ZoneApi
            //Assert.IsInstanceOfType(typeof(ZoneApi), instance, "instance is a ZoneApi");
        }

        
        /// <summary>
        /// Test AddZone
        /// </summary>
        [Test]
        public void AddZoneTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Zone body = null;
            //var response = instance.AddZone(body);
            //Assert.IsInstanceOf<Zone> (response, "response is Zone");
        }
        
        /// <summary>
        /// Test AddZoneAudit
        /// </summary>
        [Test]
        public void AddZoneAuditTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? zoneId = null;
            //string zoneAudit = null;
            //instance.AddZoneAudit(zoneId, zoneAudit);
            
        }
        
        /// <summary>
        /// Test AddZoneFile
        /// </summary>
        [Test]
        public void AddZoneFileTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? zoneId = null;
            //string fileName = null;
            //instance.AddZoneFile(zoneId, fileName);
            
        }
        
        /// <summary>
        /// Test AddZoneFileByURL
        /// </summary>
        [Test]
        public void AddZoneFileByURLTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //RecordFile body = null;
            //int? zoneId = null;
            //instance.AddZoneFileByURL(body, zoneId);
            
        }
        
        /// <summary>
        /// Test AddZoneTag
        /// </summary>
        [Test]
        public void AddZoneTagTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? zoneId = null;
            //string zoneTag = null;
            //instance.AddZoneTag(zoneId, zoneTag);
            
        }
        
        /// <summary>
        /// Test DeleteZone
        /// </summary>
        [Test]
        public void DeleteZoneTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? zoneId = null;
            //instance.DeleteZone(zoneId);
            
        }
        
        /// <summary>
        /// Test DeleteZoneFile
        /// </summary>
        [Test]
        public void DeleteZoneFileTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? zoneId = null;
            //int? fileId = null;
            //instance.DeleteZoneFile(zoneId, fileId);
            
        }
        
        /// <summary>
        /// Test DeleteZoneTag
        /// </summary>
        [Test]
        public void DeleteZoneTagTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? zoneId = null;
            //string zoneTag = null;
            //instance.DeleteZoneTag(zoneId, zoneTag);
            
        }
        
        /// <summary>
        /// Test GetDuplicateZoneById
        /// </summary>
        [Test]
        public void GetDuplicateZoneByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? zoneId = null;
            //var response = instance.GetDuplicateZoneById(zoneId);
            //Assert.IsInstanceOf<Zone> (response, "response is Zone");
        }
        
        /// <summary>
        /// Test GetZoneByFilter
        /// </summary>
        [Test]
        public void GetZoneByFilterTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string filter = null;
            //int? page = null;
            //int? limit = null;
            //string sort = null;
            //var response = instance.GetZoneByFilter(filter, page, limit, sort);
            //Assert.IsInstanceOf<List<Zone>> (response, "response is List<Zone>");
        }
        
        /// <summary>
        /// Test GetZoneById
        /// </summary>
        [Test]
        public void GetZoneByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? zoneId = null;
            //var response = instance.GetZoneById(zoneId);
            //Assert.IsInstanceOf<Zone> (response, "response is Zone");
        }
        
        /// <summary>
        /// Test GetZoneFiles
        /// </summary>
        [Test]
        public void GetZoneFilesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? zoneId = null;
            //instance.GetZoneFiles(zoneId);
            
        }
        
        /// <summary>
        /// Test GetZoneTags
        /// </summary>
        [Test]
        public void GetZoneTagsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? zoneId = null;
            //instance.GetZoneTags(zoneId);
            
        }
        
        /// <summary>
        /// Test UpdateZone
        /// </summary>
        [Test]
        public void UpdateZoneTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Zone body = null;
            //instance.UpdateZone(body);
            
        }
        
        /// <summary>
        /// Test UpdateZoneCustomFields
        /// </summary>
        [Test]
        public void UpdateZoneCustomFieldsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Zone body = null;
            //instance.UpdateZoneCustomFields(body);
            
        }
        
    }

}
