/* 
 * Infoplus API
 *
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Infoplus.Client;
using Infoplus.Model;

namespace Infoplus.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IBillingCodeActivityApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create a billingCodeActivity
        /// </summary>
        /// <remarks>
        /// Inserts a new billingCodeActivity using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">BillingCodeActivity to be inserted.</param>
        /// <returns>BillingCodeActivity</returns>
        BillingCodeActivity AddBillingCodeActivity (BillingCodeActivity body);

        /// <summary>
        /// Create a billingCodeActivity
        /// </summary>
        /// <remarks>
        /// Inserts a new billingCodeActivity using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">BillingCodeActivity to be inserted.</param>
        /// <returns>ApiResponse of BillingCodeActivity</returns>
        ApiResponse<BillingCodeActivity> AddBillingCodeActivityWithHttpInfo (BillingCodeActivity body);
        /// <summary>
        /// Add new audit for a billingCodeActivity
        /// </summary>
        /// <remarks>
        /// Adds an audit to an existing billingCodeActivity.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="billingCodeActivityId">Id of the billingCodeActivity to add an audit to</param>
        /// <param name="billingCodeActivityAudit">The audit to add</param>
        /// <returns></returns>
        void AddBillingCodeActivityAudit (int? billingCodeActivityId, string billingCodeActivityAudit);

        /// <summary>
        /// Add new audit for a billingCodeActivity
        /// </summary>
        /// <remarks>
        /// Adds an audit to an existing billingCodeActivity.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="billingCodeActivityId">Id of the billingCodeActivity to add an audit to</param>
        /// <param name="billingCodeActivityAudit">The audit to add</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddBillingCodeActivityAuditWithHttpInfo (int? billingCodeActivityId, string billingCodeActivityAudit);
        /// <summary>
        /// Attach a file to a billingCodeActivity
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing billingCodeActivity.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="billingCodeActivityId">Id of the billingCodeActivity to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns></returns>
        void AddBillingCodeActivityFile (int? billingCodeActivityId, string fileName);

        /// <summary>
        /// Attach a file to a billingCodeActivity
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing billingCodeActivity.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="billingCodeActivityId">Id of the billingCodeActivity to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddBillingCodeActivityFileWithHttpInfo (int? billingCodeActivityId, string fileName);
        /// <summary>
        /// Attach a file to a billingCodeActivity by URL.
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing billingCodeActivity by URL.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="billingCodeActivityId">Id of the billingCodeActivity to add an file to</param>
        /// <returns></returns>
        void AddBillingCodeActivityFileByURL (RecordFile body, int? billingCodeActivityId);

        /// <summary>
        /// Attach a file to a billingCodeActivity by URL.
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing billingCodeActivity by URL.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="billingCodeActivityId">Id of the billingCodeActivity to add an file to</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddBillingCodeActivityFileByURLWithHttpInfo (RecordFile body, int? billingCodeActivityId);
        /// <summary>
        /// Add new tags for a billingCodeActivity.
        /// </summary>
        /// <remarks>
        /// Adds a tag to an existing billingCodeActivity.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="billingCodeActivityId">Id of the billingCodeActivity to add a tag to</param>
        /// <param name="billingCodeActivityTag">The tag to add</param>
        /// <returns></returns>
        void AddBillingCodeActivityTag (int? billingCodeActivityId, string billingCodeActivityTag);

        /// <summary>
        /// Add new tags for a billingCodeActivity.
        /// </summary>
        /// <remarks>
        /// Adds a tag to an existing billingCodeActivity.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="billingCodeActivityId">Id of the billingCodeActivity to add a tag to</param>
        /// <param name="billingCodeActivityTag">The tag to add</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddBillingCodeActivityTagWithHttpInfo (int? billingCodeActivityId, string billingCodeActivityTag);
        /// <summary>
        /// Delete a billingCodeActivity
        /// </summary>
        /// <remarks>
        /// Deletes the billingCodeActivity identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="billingCodeActivityId">Id of the billingCodeActivity to be deleted.</param>
        /// <returns></returns>
        void DeleteBillingCodeActivity (int? billingCodeActivityId);

        /// <summary>
        /// Delete a billingCodeActivity
        /// </summary>
        /// <remarks>
        /// Deletes the billingCodeActivity identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="billingCodeActivityId">Id of the billingCodeActivity to be deleted.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteBillingCodeActivityWithHttpInfo (int? billingCodeActivityId);
        /// <summary>
        /// Delete a file for a billingCodeActivity.
        /// </summary>
        /// <remarks>
        /// Deletes an existing billingCodeActivity file using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="billingCodeActivityId">Id of the billingCodeActivity to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns></returns>
        void DeleteBillingCodeActivityFile (int? billingCodeActivityId, int? fileId);

        /// <summary>
        /// Delete a file for a billingCodeActivity.
        /// </summary>
        /// <remarks>
        /// Deletes an existing billingCodeActivity file using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="billingCodeActivityId">Id of the billingCodeActivity to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteBillingCodeActivityFileWithHttpInfo (int? billingCodeActivityId, int? fileId);
        /// <summary>
        /// Delete a tag for a billingCodeActivity.
        /// </summary>
        /// <remarks>
        /// Deletes an existing billingCodeActivity tag using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="billingCodeActivityId">Id of the billingCodeActivity to remove tag from</param>
        /// <param name="billingCodeActivityTag">The tag to delete</param>
        /// <returns></returns>
        void DeleteBillingCodeActivityTag (int? billingCodeActivityId, string billingCodeActivityTag);

        /// <summary>
        /// Delete a tag for a billingCodeActivity.
        /// </summary>
        /// <remarks>
        /// Deletes an existing billingCodeActivity tag using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="billingCodeActivityId">Id of the billingCodeActivity to remove tag from</param>
        /// <param name="billingCodeActivityTag">The tag to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteBillingCodeActivityTagWithHttpInfo (int? billingCodeActivityId, string billingCodeActivityTag);
        /// <summary>
        /// Search billingCodeActivitys by filter
        /// </summary>
        /// <remarks>
        /// Returns the list of billingCodeActivitys that match the given filter.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>List&lt;BillingCodeActivity&gt;</returns>
        List<BillingCodeActivity> GetBillingCodeActivityByFilter (string filter = null, int? page = null, int? limit = null, string sort = null);

        /// <summary>
        /// Search billingCodeActivitys by filter
        /// </summary>
        /// <remarks>
        /// Returns the list of billingCodeActivitys that match the given filter.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>ApiResponse of List&lt;BillingCodeActivity&gt;</returns>
        ApiResponse<List<BillingCodeActivity>> GetBillingCodeActivityByFilterWithHttpInfo (string filter = null, int? page = null, int? limit = null, string sort = null);
        /// <summary>
        /// Get a billingCodeActivity by id
        /// </summary>
        /// <remarks>
        /// Returns the billingCodeActivity identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="billingCodeActivityId">Id of the billingCodeActivity to be returned.</param>
        /// <returns>BillingCodeActivity</returns>
        BillingCodeActivity GetBillingCodeActivityById (int? billingCodeActivityId);

        /// <summary>
        /// Get a billingCodeActivity by id
        /// </summary>
        /// <remarks>
        /// Returns the billingCodeActivity identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="billingCodeActivityId">Id of the billingCodeActivity to be returned.</param>
        /// <returns>ApiResponse of BillingCodeActivity</returns>
        ApiResponse<BillingCodeActivity> GetBillingCodeActivityByIdWithHttpInfo (int? billingCodeActivityId);
        /// <summary>
        /// Get the files for a billingCodeActivity.
        /// </summary>
        /// <remarks>
        /// Get all existing billingCodeActivity files.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="billingCodeActivityId">Id of the billingCodeActivity to get files for</param>
        /// <returns></returns>
        void GetBillingCodeActivityFiles (int? billingCodeActivityId);

        /// <summary>
        /// Get the files for a billingCodeActivity.
        /// </summary>
        /// <remarks>
        /// Get all existing billingCodeActivity files.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="billingCodeActivityId">Id of the billingCodeActivity to get files for</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetBillingCodeActivityFilesWithHttpInfo (int? billingCodeActivityId);
        /// <summary>
        /// Get the tags for a billingCodeActivity.
        /// </summary>
        /// <remarks>
        /// Get all existing billingCodeActivity tags.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="billingCodeActivityId">Id of the billingCodeActivity to get tags for</param>
        /// <returns></returns>
        void GetBillingCodeActivityTags (int? billingCodeActivityId);

        /// <summary>
        /// Get the tags for a billingCodeActivity.
        /// </summary>
        /// <remarks>
        /// Get all existing billingCodeActivity tags.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="billingCodeActivityId">Id of the billingCodeActivity to get tags for</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetBillingCodeActivityTagsWithHttpInfo (int? billingCodeActivityId);
        /// <summary>
        /// Get a duplicated a billingCodeActivity by id
        /// </summary>
        /// <remarks>
        /// Returns a duplicated billingCodeActivity identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="billingCodeActivityId">Id of the billingCodeActivity to be duplicated.</param>
        /// <returns>BillingCodeActivity</returns>
        BillingCodeActivity GetDuplicateBillingCodeActivityById (int? billingCodeActivityId);

        /// <summary>
        /// Get a duplicated a billingCodeActivity by id
        /// </summary>
        /// <remarks>
        /// Returns a duplicated billingCodeActivity identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="billingCodeActivityId">Id of the billingCodeActivity to be duplicated.</param>
        /// <returns>ApiResponse of BillingCodeActivity</returns>
        ApiResponse<BillingCodeActivity> GetDuplicateBillingCodeActivityByIdWithHttpInfo (int? billingCodeActivityId);
        /// <summary>
        /// Update a billingCodeActivity
        /// </summary>
        /// <remarks>
        /// Updates an existing billingCodeActivity using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">BillingCodeActivity to be updated.</param>
        /// <returns></returns>
        void UpdateBillingCodeActivity (BillingCodeActivity body);

        /// <summary>
        /// Update a billingCodeActivity
        /// </summary>
        /// <remarks>
        /// Updates an existing billingCodeActivity using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">BillingCodeActivity to be updated.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateBillingCodeActivityWithHttpInfo (BillingCodeActivity body);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create a billingCodeActivity
        /// </summary>
        /// <remarks>
        /// Inserts a new billingCodeActivity using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">BillingCodeActivity to be inserted.</param>
        /// <returns>Task of BillingCodeActivity</returns>
        System.Threading.Tasks.Task<BillingCodeActivity> AddBillingCodeActivityAsync (BillingCodeActivity body);

        /// <summary>
        /// Create a billingCodeActivity
        /// </summary>
        /// <remarks>
        /// Inserts a new billingCodeActivity using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">BillingCodeActivity to be inserted.</param>
        /// <returns>Task of ApiResponse (BillingCodeActivity)</returns>
        System.Threading.Tasks.Task<ApiResponse<BillingCodeActivity>> AddBillingCodeActivityAsyncWithHttpInfo (BillingCodeActivity body);
        /// <summary>
        /// Add new audit for a billingCodeActivity
        /// </summary>
        /// <remarks>
        /// Adds an audit to an existing billingCodeActivity.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="billingCodeActivityId">Id of the billingCodeActivity to add an audit to</param>
        /// <param name="billingCodeActivityAudit">The audit to add</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddBillingCodeActivityAuditAsync (int? billingCodeActivityId, string billingCodeActivityAudit);

        /// <summary>
        /// Add new audit for a billingCodeActivity
        /// </summary>
        /// <remarks>
        /// Adds an audit to an existing billingCodeActivity.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="billingCodeActivityId">Id of the billingCodeActivity to add an audit to</param>
        /// <param name="billingCodeActivityAudit">The audit to add</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddBillingCodeActivityAuditAsyncWithHttpInfo (int? billingCodeActivityId, string billingCodeActivityAudit);
        /// <summary>
        /// Attach a file to a billingCodeActivity
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing billingCodeActivity.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="billingCodeActivityId">Id of the billingCodeActivity to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddBillingCodeActivityFileAsync (int? billingCodeActivityId, string fileName);

        /// <summary>
        /// Attach a file to a billingCodeActivity
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing billingCodeActivity.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="billingCodeActivityId">Id of the billingCodeActivity to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddBillingCodeActivityFileAsyncWithHttpInfo (int? billingCodeActivityId, string fileName);
        /// <summary>
        /// Attach a file to a billingCodeActivity by URL.
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing billingCodeActivity by URL.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="billingCodeActivityId">Id of the billingCodeActivity to add an file to</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddBillingCodeActivityFileByURLAsync (RecordFile body, int? billingCodeActivityId);

        /// <summary>
        /// Attach a file to a billingCodeActivity by URL.
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing billingCodeActivity by URL.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="billingCodeActivityId">Id of the billingCodeActivity to add an file to</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddBillingCodeActivityFileByURLAsyncWithHttpInfo (RecordFile body, int? billingCodeActivityId);
        /// <summary>
        /// Add new tags for a billingCodeActivity.
        /// </summary>
        /// <remarks>
        /// Adds a tag to an existing billingCodeActivity.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="billingCodeActivityId">Id of the billingCodeActivity to add a tag to</param>
        /// <param name="billingCodeActivityTag">The tag to add</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddBillingCodeActivityTagAsync (int? billingCodeActivityId, string billingCodeActivityTag);

        /// <summary>
        /// Add new tags for a billingCodeActivity.
        /// </summary>
        /// <remarks>
        /// Adds a tag to an existing billingCodeActivity.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="billingCodeActivityId">Id of the billingCodeActivity to add a tag to</param>
        /// <param name="billingCodeActivityTag">The tag to add</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddBillingCodeActivityTagAsyncWithHttpInfo (int? billingCodeActivityId, string billingCodeActivityTag);
        /// <summary>
        /// Delete a billingCodeActivity
        /// </summary>
        /// <remarks>
        /// Deletes the billingCodeActivity identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="billingCodeActivityId">Id of the billingCodeActivity to be deleted.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteBillingCodeActivityAsync (int? billingCodeActivityId);

        /// <summary>
        /// Delete a billingCodeActivity
        /// </summary>
        /// <remarks>
        /// Deletes the billingCodeActivity identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="billingCodeActivityId">Id of the billingCodeActivity to be deleted.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteBillingCodeActivityAsyncWithHttpInfo (int? billingCodeActivityId);
        /// <summary>
        /// Delete a file for a billingCodeActivity.
        /// </summary>
        /// <remarks>
        /// Deletes an existing billingCodeActivity file using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="billingCodeActivityId">Id of the billingCodeActivity to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteBillingCodeActivityFileAsync (int? billingCodeActivityId, int? fileId);

        /// <summary>
        /// Delete a file for a billingCodeActivity.
        /// </summary>
        /// <remarks>
        /// Deletes an existing billingCodeActivity file using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="billingCodeActivityId">Id of the billingCodeActivity to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteBillingCodeActivityFileAsyncWithHttpInfo (int? billingCodeActivityId, int? fileId);
        /// <summary>
        /// Delete a tag for a billingCodeActivity.
        /// </summary>
        /// <remarks>
        /// Deletes an existing billingCodeActivity tag using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="billingCodeActivityId">Id of the billingCodeActivity to remove tag from</param>
        /// <param name="billingCodeActivityTag">The tag to delete</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteBillingCodeActivityTagAsync (int? billingCodeActivityId, string billingCodeActivityTag);

        /// <summary>
        /// Delete a tag for a billingCodeActivity.
        /// </summary>
        /// <remarks>
        /// Deletes an existing billingCodeActivity tag using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="billingCodeActivityId">Id of the billingCodeActivity to remove tag from</param>
        /// <param name="billingCodeActivityTag">The tag to delete</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteBillingCodeActivityTagAsyncWithHttpInfo (int? billingCodeActivityId, string billingCodeActivityTag);
        /// <summary>
        /// Search billingCodeActivitys by filter
        /// </summary>
        /// <remarks>
        /// Returns the list of billingCodeActivitys that match the given filter.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>Task of List&lt;BillingCodeActivity&gt;</returns>
        System.Threading.Tasks.Task<List<BillingCodeActivity>> GetBillingCodeActivityByFilterAsync (string filter = null, int? page = null, int? limit = null, string sort = null);

        /// <summary>
        /// Search billingCodeActivitys by filter
        /// </summary>
        /// <remarks>
        /// Returns the list of billingCodeActivitys that match the given filter.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;BillingCodeActivity&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<BillingCodeActivity>>> GetBillingCodeActivityByFilterAsyncWithHttpInfo (string filter = null, int? page = null, int? limit = null, string sort = null);
        /// <summary>
        /// Get a billingCodeActivity by id
        /// </summary>
        /// <remarks>
        /// Returns the billingCodeActivity identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="billingCodeActivityId">Id of the billingCodeActivity to be returned.</param>
        /// <returns>Task of BillingCodeActivity</returns>
        System.Threading.Tasks.Task<BillingCodeActivity> GetBillingCodeActivityByIdAsync (int? billingCodeActivityId);

        /// <summary>
        /// Get a billingCodeActivity by id
        /// </summary>
        /// <remarks>
        /// Returns the billingCodeActivity identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="billingCodeActivityId">Id of the billingCodeActivity to be returned.</param>
        /// <returns>Task of ApiResponse (BillingCodeActivity)</returns>
        System.Threading.Tasks.Task<ApiResponse<BillingCodeActivity>> GetBillingCodeActivityByIdAsyncWithHttpInfo (int? billingCodeActivityId);
        /// <summary>
        /// Get the files for a billingCodeActivity.
        /// </summary>
        /// <remarks>
        /// Get all existing billingCodeActivity files.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="billingCodeActivityId">Id of the billingCodeActivity to get files for</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetBillingCodeActivityFilesAsync (int? billingCodeActivityId);

        /// <summary>
        /// Get the files for a billingCodeActivity.
        /// </summary>
        /// <remarks>
        /// Get all existing billingCodeActivity files.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="billingCodeActivityId">Id of the billingCodeActivity to get files for</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetBillingCodeActivityFilesAsyncWithHttpInfo (int? billingCodeActivityId);
        /// <summary>
        /// Get the tags for a billingCodeActivity.
        /// </summary>
        /// <remarks>
        /// Get all existing billingCodeActivity tags.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="billingCodeActivityId">Id of the billingCodeActivity to get tags for</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetBillingCodeActivityTagsAsync (int? billingCodeActivityId);

        /// <summary>
        /// Get the tags for a billingCodeActivity.
        /// </summary>
        /// <remarks>
        /// Get all existing billingCodeActivity tags.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="billingCodeActivityId">Id of the billingCodeActivity to get tags for</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetBillingCodeActivityTagsAsyncWithHttpInfo (int? billingCodeActivityId);
        /// <summary>
        /// Get a duplicated a billingCodeActivity by id
        /// </summary>
        /// <remarks>
        /// Returns a duplicated billingCodeActivity identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="billingCodeActivityId">Id of the billingCodeActivity to be duplicated.</param>
        /// <returns>Task of BillingCodeActivity</returns>
        System.Threading.Tasks.Task<BillingCodeActivity> GetDuplicateBillingCodeActivityByIdAsync (int? billingCodeActivityId);

        /// <summary>
        /// Get a duplicated a billingCodeActivity by id
        /// </summary>
        /// <remarks>
        /// Returns a duplicated billingCodeActivity identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="billingCodeActivityId">Id of the billingCodeActivity to be duplicated.</param>
        /// <returns>Task of ApiResponse (BillingCodeActivity)</returns>
        System.Threading.Tasks.Task<ApiResponse<BillingCodeActivity>> GetDuplicateBillingCodeActivityByIdAsyncWithHttpInfo (int? billingCodeActivityId);
        /// <summary>
        /// Update a billingCodeActivity
        /// </summary>
        /// <remarks>
        /// Updates an existing billingCodeActivity using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">BillingCodeActivity to be updated.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateBillingCodeActivityAsync (BillingCodeActivity body);

        /// <summary>
        /// Update a billingCodeActivity
        /// </summary>
        /// <remarks>
        /// Updates an existing billingCodeActivity using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">BillingCodeActivity to be updated.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateBillingCodeActivityAsyncWithHttpInfo (BillingCodeActivity body);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class BillingCodeActivityApi : IBillingCodeActivityApi
    {
        private Infoplus.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="BillingCodeActivityApi"/> class.
        /// </summary>
        /// <returns></returns>
        public BillingCodeActivityApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = Infoplus.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BillingCodeActivityApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public BillingCodeActivityApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Infoplus.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Infoplus.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create a billingCodeActivity Inserts a new billingCodeActivity using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">BillingCodeActivity to be inserted.</param>
        /// <returns>BillingCodeActivity</returns>
        public BillingCodeActivity AddBillingCodeActivity (BillingCodeActivity body)
        {
             ApiResponse<BillingCodeActivity> localVarResponse = AddBillingCodeActivityWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a billingCodeActivity Inserts a new billingCodeActivity using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">BillingCodeActivity to be inserted.</param>
        /// <returns>ApiResponse of BillingCodeActivity</returns>
        public ApiResponse< BillingCodeActivity > AddBillingCodeActivityWithHttpInfo (BillingCodeActivity body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling BillingCodeActivityApi->AddBillingCodeActivity");

            var localVarPath = "/beta/billingCodeActivity";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddBillingCodeActivity", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BillingCodeActivity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BillingCodeActivity) Configuration.ApiClient.Deserialize(localVarResponse, typeof(BillingCodeActivity)));
        }

        /// <summary>
        /// Create a billingCodeActivity Inserts a new billingCodeActivity using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">BillingCodeActivity to be inserted.</param>
        /// <returns>Task of BillingCodeActivity</returns>
        public async System.Threading.Tasks.Task<BillingCodeActivity> AddBillingCodeActivityAsync (BillingCodeActivity body)
        {
             ApiResponse<BillingCodeActivity> localVarResponse = await AddBillingCodeActivityAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a billingCodeActivity Inserts a new billingCodeActivity using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">BillingCodeActivity to be inserted.</param>
        /// <returns>Task of ApiResponse (BillingCodeActivity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BillingCodeActivity>> AddBillingCodeActivityAsyncWithHttpInfo (BillingCodeActivity body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling BillingCodeActivityApi->AddBillingCodeActivity");

            var localVarPath = "/beta/billingCodeActivity";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddBillingCodeActivity", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BillingCodeActivity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BillingCodeActivity) Configuration.ApiClient.Deserialize(localVarResponse, typeof(BillingCodeActivity)));
        }

        /// <summary>
        /// Add new audit for a billingCodeActivity Adds an audit to an existing billingCodeActivity.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="billingCodeActivityId">Id of the billingCodeActivity to add an audit to</param>
        /// <param name="billingCodeActivityAudit">The audit to add</param>
        /// <returns></returns>
        public void AddBillingCodeActivityAudit (int? billingCodeActivityId, string billingCodeActivityAudit)
        {
             AddBillingCodeActivityAuditWithHttpInfo(billingCodeActivityId, billingCodeActivityAudit);
        }

        /// <summary>
        /// Add new audit for a billingCodeActivity Adds an audit to an existing billingCodeActivity.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="billingCodeActivityId">Id of the billingCodeActivity to add an audit to</param>
        /// <param name="billingCodeActivityAudit">The audit to add</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AddBillingCodeActivityAuditWithHttpInfo (int? billingCodeActivityId, string billingCodeActivityAudit)
        {
            // verify the required parameter 'billingCodeActivityId' is set
            if (billingCodeActivityId == null)
                throw new ApiException(400, "Missing required parameter 'billingCodeActivityId' when calling BillingCodeActivityApi->AddBillingCodeActivityAudit");
            // verify the required parameter 'billingCodeActivityAudit' is set
            if (billingCodeActivityAudit == null)
                throw new ApiException(400, "Missing required parameter 'billingCodeActivityAudit' when calling BillingCodeActivityApi->AddBillingCodeActivityAudit");

            var localVarPath = "/beta/billingCodeActivity/{billingCodeActivityId}/audit/{billingCodeActivityAudit}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (billingCodeActivityId != null) localVarPathParams.Add("billingCodeActivityId", Configuration.ApiClient.ParameterToString(billingCodeActivityId)); // path parameter
            if (billingCodeActivityAudit != null) localVarPathParams.Add("billingCodeActivityAudit", Configuration.ApiClient.ParameterToString(billingCodeActivityAudit)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddBillingCodeActivityAudit", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Add new audit for a billingCodeActivity Adds an audit to an existing billingCodeActivity.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="billingCodeActivityId">Id of the billingCodeActivity to add an audit to</param>
        /// <param name="billingCodeActivityAudit">The audit to add</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddBillingCodeActivityAuditAsync (int? billingCodeActivityId, string billingCodeActivityAudit)
        {
             await AddBillingCodeActivityAuditAsyncWithHttpInfo(billingCodeActivityId, billingCodeActivityAudit);

        }

        /// <summary>
        /// Add new audit for a billingCodeActivity Adds an audit to an existing billingCodeActivity.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="billingCodeActivityId">Id of the billingCodeActivity to add an audit to</param>
        /// <param name="billingCodeActivityAudit">The audit to add</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddBillingCodeActivityAuditAsyncWithHttpInfo (int? billingCodeActivityId, string billingCodeActivityAudit)
        {
            // verify the required parameter 'billingCodeActivityId' is set
            if (billingCodeActivityId == null)
                throw new ApiException(400, "Missing required parameter 'billingCodeActivityId' when calling BillingCodeActivityApi->AddBillingCodeActivityAudit");
            // verify the required parameter 'billingCodeActivityAudit' is set
            if (billingCodeActivityAudit == null)
                throw new ApiException(400, "Missing required parameter 'billingCodeActivityAudit' when calling BillingCodeActivityApi->AddBillingCodeActivityAudit");

            var localVarPath = "/beta/billingCodeActivity/{billingCodeActivityId}/audit/{billingCodeActivityAudit}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (billingCodeActivityId != null) localVarPathParams.Add("billingCodeActivityId", Configuration.ApiClient.ParameterToString(billingCodeActivityId)); // path parameter
            if (billingCodeActivityAudit != null) localVarPathParams.Add("billingCodeActivityAudit", Configuration.ApiClient.ParameterToString(billingCodeActivityAudit)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddBillingCodeActivityAudit", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Attach a file to a billingCodeActivity Adds a file to an existing billingCodeActivity.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="billingCodeActivityId">Id of the billingCodeActivity to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns></returns>
        public void AddBillingCodeActivityFile (int? billingCodeActivityId, string fileName)
        {
             AddBillingCodeActivityFileWithHttpInfo(billingCodeActivityId, fileName);
        }

        /// <summary>
        /// Attach a file to a billingCodeActivity Adds a file to an existing billingCodeActivity.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="billingCodeActivityId">Id of the billingCodeActivity to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AddBillingCodeActivityFileWithHttpInfo (int? billingCodeActivityId, string fileName)
        {
            // verify the required parameter 'billingCodeActivityId' is set
            if (billingCodeActivityId == null)
                throw new ApiException(400, "Missing required parameter 'billingCodeActivityId' when calling BillingCodeActivityApi->AddBillingCodeActivityFile");
            // verify the required parameter 'fileName' is set
            if (fileName == null)
                throw new ApiException(400, "Missing required parameter 'fileName' when calling BillingCodeActivityApi->AddBillingCodeActivityFile");

            var localVarPath = "/beta/billingCodeActivity/{billingCodeActivityId}/file/{fileName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (billingCodeActivityId != null) localVarPathParams.Add("billingCodeActivityId", Configuration.ApiClient.ParameterToString(billingCodeActivityId)); // path parameter
            if (fileName != null) localVarPathParams.Add("fileName", Configuration.ApiClient.ParameterToString(fileName)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddBillingCodeActivityFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Attach a file to a billingCodeActivity Adds a file to an existing billingCodeActivity.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="billingCodeActivityId">Id of the billingCodeActivity to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddBillingCodeActivityFileAsync (int? billingCodeActivityId, string fileName)
        {
             await AddBillingCodeActivityFileAsyncWithHttpInfo(billingCodeActivityId, fileName);

        }

        /// <summary>
        /// Attach a file to a billingCodeActivity Adds a file to an existing billingCodeActivity.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="billingCodeActivityId">Id of the billingCodeActivity to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddBillingCodeActivityFileAsyncWithHttpInfo (int? billingCodeActivityId, string fileName)
        {
            // verify the required parameter 'billingCodeActivityId' is set
            if (billingCodeActivityId == null)
                throw new ApiException(400, "Missing required parameter 'billingCodeActivityId' when calling BillingCodeActivityApi->AddBillingCodeActivityFile");
            // verify the required parameter 'fileName' is set
            if (fileName == null)
                throw new ApiException(400, "Missing required parameter 'fileName' when calling BillingCodeActivityApi->AddBillingCodeActivityFile");

            var localVarPath = "/beta/billingCodeActivity/{billingCodeActivityId}/file/{fileName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (billingCodeActivityId != null) localVarPathParams.Add("billingCodeActivityId", Configuration.ApiClient.ParameterToString(billingCodeActivityId)); // path parameter
            if (fileName != null) localVarPathParams.Add("fileName", Configuration.ApiClient.ParameterToString(fileName)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddBillingCodeActivityFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Attach a file to a billingCodeActivity by URL. Adds a file to an existing billingCodeActivity by URL.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="billingCodeActivityId">Id of the billingCodeActivity to add an file to</param>
        /// <returns></returns>
        public void AddBillingCodeActivityFileByURL (RecordFile body, int? billingCodeActivityId)
        {
             AddBillingCodeActivityFileByURLWithHttpInfo(body, billingCodeActivityId);
        }

        /// <summary>
        /// Attach a file to a billingCodeActivity by URL. Adds a file to an existing billingCodeActivity by URL.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="billingCodeActivityId">Id of the billingCodeActivity to add an file to</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AddBillingCodeActivityFileByURLWithHttpInfo (RecordFile body, int? billingCodeActivityId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling BillingCodeActivityApi->AddBillingCodeActivityFileByURL");
            // verify the required parameter 'billingCodeActivityId' is set
            if (billingCodeActivityId == null)
                throw new ApiException(400, "Missing required parameter 'billingCodeActivityId' when calling BillingCodeActivityApi->AddBillingCodeActivityFileByURL");

            var localVarPath = "/beta/billingCodeActivity/{billingCodeActivityId}/file";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (billingCodeActivityId != null) localVarPathParams.Add("billingCodeActivityId", Configuration.ApiClient.ParameterToString(billingCodeActivityId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddBillingCodeActivityFileByURL", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Attach a file to a billingCodeActivity by URL. Adds a file to an existing billingCodeActivity by URL.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="billingCodeActivityId">Id of the billingCodeActivity to add an file to</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddBillingCodeActivityFileByURLAsync (RecordFile body, int? billingCodeActivityId)
        {
             await AddBillingCodeActivityFileByURLAsyncWithHttpInfo(body, billingCodeActivityId);

        }

        /// <summary>
        /// Attach a file to a billingCodeActivity by URL. Adds a file to an existing billingCodeActivity by URL.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="billingCodeActivityId">Id of the billingCodeActivity to add an file to</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddBillingCodeActivityFileByURLAsyncWithHttpInfo (RecordFile body, int? billingCodeActivityId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling BillingCodeActivityApi->AddBillingCodeActivityFileByURL");
            // verify the required parameter 'billingCodeActivityId' is set
            if (billingCodeActivityId == null)
                throw new ApiException(400, "Missing required parameter 'billingCodeActivityId' when calling BillingCodeActivityApi->AddBillingCodeActivityFileByURL");

            var localVarPath = "/beta/billingCodeActivity/{billingCodeActivityId}/file";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (billingCodeActivityId != null) localVarPathParams.Add("billingCodeActivityId", Configuration.ApiClient.ParameterToString(billingCodeActivityId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddBillingCodeActivityFileByURL", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Add new tags for a billingCodeActivity. Adds a tag to an existing billingCodeActivity.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="billingCodeActivityId">Id of the billingCodeActivity to add a tag to</param>
        /// <param name="billingCodeActivityTag">The tag to add</param>
        /// <returns></returns>
        public void AddBillingCodeActivityTag (int? billingCodeActivityId, string billingCodeActivityTag)
        {
             AddBillingCodeActivityTagWithHttpInfo(billingCodeActivityId, billingCodeActivityTag);
        }

        /// <summary>
        /// Add new tags for a billingCodeActivity. Adds a tag to an existing billingCodeActivity.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="billingCodeActivityId">Id of the billingCodeActivity to add a tag to</param>
        /// <param name="billingCodeActivityTag">The tag to add</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AddBillingCodeActivityTagWithHttpInfo (int? billingCodeActivityId, string billingCodeActivityTag)
        {
            // verify the required parameter 'billingCodeActivityId' is set
            if (billingCodeActivityId == null)
                throw new ApiException(400, "Missing required parameter 'billingCodeActivityId' when calling BillingCodeActivityApi->AddBillingCodeActivityTag");
            // verify the required parameter 'billingCodeActivityTag' is set
            if (billingCodeActivityTag == null)
                throw new ApiException(400, "Missing required parameter 'billingCodeActivityTag' when calling BillingCodeActivityApi->AddBillingCodeActivityTag");

            var localVarPath = "/beta/billingCodeActivity/{billingCodeActivityId}/tag/{billingCodeActivityTag}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (billingCodeActivityId != null) localVarPathParams.Add("billingCodeActivityId", Configuration.ApiClient.ParameterToString(billingCodeActivityId)); // path parameter
            if (billingCodeActivityTag != null) localVarPathParams.Add("billingCodeActivityTag", Configuration.ApiClient.ParameterToString(billingCodeActivityTag)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddBillingCodeActivityTag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Add new tags for a billingCodeActivity. Adds a tag to an existing billingCodeActivity.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="billingCodeActivityId">Id of the billingCodeActivity to add a tag to</param>
        /// <param name="billingCodeActivityTag">The tag to add</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddBillingCodeActivityTagAsync (int? billingCodeActivityId, string billingCodeActivityTag)
        {
             await AddBillingCodeActivityTagAsyncWithHttpInfo(billingCodeActivityId, billingCodeActivityTag);

        }

        /// <summary>
        /// Add new tags for a billingCodeActivity. Adds a tag to an existing billingCodeActivity.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="billingCodeActivityId">Id of the billingCodeActivity to add a tag to</param>
        /// <param name="billingCodeActivityTag">The tag to add</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddBillingCodeActivityTagAsyncWithHttpInfo (int? billingCodeActivityId, string billingCodeActivityTag)
        {
            // verify the required parameter 'billingCodeActivityId' is set
            if (billingCodeActivityId == null)
                throw new ApiException(400, "Missing required parameter 'billingCodeActivityId' when calling BillingCodeActivityApi->AddBillingCodeActivityTag");
            // verify the required parameter 'billingCodeActivityTag' is set
            if (billingCodeActivityTag == null)
                throw new ApiException(400, "Missing required parameter 'billingCodeActivityTag' when calling BillingCodeActivityApi->AddBillingCodeActivityTag");

            var localVarPath = "/beta/billingCodeActivity/{billingCodeActivityId}/tag/{billingCodeActivityTag}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (billingCodeActivityId != null) localVarPathParams.Add("billingCodeActivityId", Configuration.ApiClient.ParameterToString(billingCodeActivityId)); // path parameter
            if (billingCodeActivityTag != null) localVarPathParams.Add("billingCodeActivityTag", Configuration.ApiClient.ParameterToString(billingCodeActivityTag)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddBillingCodeActivityTag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a billingCodeActivity Deletes the billingCodeActivity identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="billingCodeActivityId">Id of the billingCodeActivity to be deleted.</param>
        /// <returns></returns>
        public void DeleteBillingCodeActivity (int? billingCodeActivityId)
        {
             DeleteBillingCodeActivityWithHttpInfo(billingCodeActivityId);
        }

        /// <summary>
        /// Delete a billingCodeActivity Deletes the billingCodeActivity identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="billingCodeActivityId">Id of the billingCodeActivity to be deleted.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteBillingCodeActivityWithHttpInfo (int? billingCodeActivityId)
        {
            // verify the required parameter 'billingCodeActivityId' is set
            if (billingCodeActivityId == null)
                throw new ApiException(400, "Missing required parameter 'billingCodeActivityId' when calling BillingCodeActivityApi->DeleteBillingCodeActivity");

            var localVarPath = "/beta/billingCodeActivity/{billingCodeActivityId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (billingCodeActivityId != null) localVarPathParams.Add("billingCodeActivityId", Configuration.ApiClient.ParameterToString(billingCodeActivityId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteBillingCodeActivity", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a billingCodeActivity Deletes the billingCodeActivity identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="billingCodeActivityId">Id of the billingCodeActivity to be deleted.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteBillingCodeActivityAsync (int? billingCodeActivityId)
        {
             await DeleteBillingCodeActivityAsyncWithHttpInfo(billingCodeActivityId);

        }

        /// <summary>
        /// Delete a billingCodeActivity Deletes the billingCodeActivity identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="billingCodeActivityId">Id of the billingCodeActivity to be deleted.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteBillingCodeActivityAsyncWithHttpInfo (int? billingCodeActivityId)
        {
            // verify the required parameter 'billingCodeActivityId' is set
            if (billingCodeActivityId == null)
                throw new ApiException(400, "Missing required parameter 'billingCodeActivityId' when calling BillingCodeActivityApi->DeleteBillingCodeActivity");

            var localVarPath = "/beta/billingCodeActivity/{billingCodeActivityId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (billingCodeActivityId != null) localVarPathParams.Add("billingCodeActivityId", Configuration.ApiClient.ParameterToString(billingCodeActivityId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteBillingCodeActivity", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a file for a billingCodeActivity. Deletes an existing billingCodeActivity file using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="billingCodeActivityId">Id of the billingCodeActivity to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns></returns>
        public void DeleteBillingCodeActivityFile (int? billingCodeActivityId, int? fileId)
        {
             DeleteBillingCodeActivityFileWithHttpInfo(billingCodeActivityId, fileId);
        }

        /// <summary>
        /// Delete a file for a billingCodeActivity. Deletes an existing billingCodeActivity file using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="billingCodeActivityId">Id of the billingCodeActivity to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteBillingCodeActivityFileWithHttpInfo (int? billingCodeActivityId, int? fileId)
        {
            // verify the required parameter 'billingCodeActivityId' is set
            if (billingCodeActivityId == null)
                throw new ApiException(400, "Missing required parameter 'billingCodeActivityId' when calling BillingCodeActivityApi->DeleteBillingCodeActivityFile");
            // verify the required parameter 'fileId' is set
            if (fileId == null)
                throw new ApiException(400, "Missing required parameter 'fileId' when calling BillingCodeActivityApi->DeleteBillingCodeActivityFile");

            var localVarPath = "/beta/billingCodeActivity/{billingCodeActivityId}/file/{fileId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (billingCodeActivityId != null) localVarPathParams.Add("billingCodeActivityId", Configuration.ApiClient.ParameterToString(billingCodeActivityId)); // path parameter
            if (fileId != null) localVarPathParams.Add("fileId", Configuration.ApiClient.ParameterToString(fileId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteBillingCodeActivityFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a file for a billingCodeActivity. Deletes an existing billingCodeActivity file using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="billingCodeActivityId">Id of the billingCodeActivity to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteBillingCodeActivityFileAsync (int? billingCodeActivityId, int? fileId)
        {
             await DeleteBillingCodeActivityFileAsyncWithHttpInfo(billingCodeActivityId, fileId);

        }

        /// <summary>
        /// Delete a file for a billingCodeActivity. Deletes an existing billingCodeActivity file using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="billingCodeActivityId">Id of the billingCodeActivity to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteBillingCodeActivityFileAsyncWithHttpInfo (int? billingCodeActivityId, int? fileId)
        {
            // verify the required parameter 'billingCodeActivityId' is set
            if (billingCodeActivityId == null)
                throw new ApiException(400, "Missing required parameter 'billingCodeActivityId' when calling BillingCodeActivityApi->DeleteBillingCodeActivityFile");
            // verify the required parameter 'fileId' is set
            if (fileId == null)
                throw new ApiException(400, "Missing required parameter 'fileId' when calling BillingCodeActivityApi->DeleteBillingCodeActivityFile");

            var localVarPath = "/beta/billingCodeActivity/{billingCodeActivityId}/file/{fileId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (billingCodeActivityId != null) localVarPathParams.Add("billingCodeActivityId", Configuration.ApiClient.ParameterToString(billingCodeActivityId)); // path parameter
            if (fileId != null) localVarPathParams.Add("fileId", Configuration.ApiClient.ParameterToString(fileId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteBillingCodeActivityFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a tag for a billingCodeActivity. Deletes an existing billingCodeActivity tag using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="billingCodeActivityId">Id of the billingCodeActivity to remove tag from</param>
        /// <param name="billingCodeActivityTag">The tag to delete</param>
        /// <returns></returns>
        public void DeleteBillingCodeActivityTag (int? billingCodeActivityId, string billingCodeActivityTag)
        {
             DeleteBillingCodeActivityTagWithHttpInfo(billingCodeActivityId, billingCodeActivityTag);
        }

        /// <summary>
        /// Delete a tag for a billingCodeActivity. Deletes an existing billingCodeActivity tag using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="billingCodeActivityId">Id of the billingCodeActivity to remove tag from</param>
        /// <param name="billingCodeActivityTag">The tag to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteBillingCodeActivityTagWithHttpInfo (int? billingCodeActivityId, string billingCodeActivityTag)
        {
            // verify the required parameter 'billingCodeActivityId' is set
            if (billingCodeActivityId == null)
                throw new ApiException(400, "Missing required parameter 'billingCodeActivityId' when calling BillingCodeActivityApi->DeleteBillingCodeActivityTag");
            // verify the required parameter 'billingCodeActivityTag' is set
            if (billingCodeActivityTag == null)
                throw new ApiException(400, "Missing required parameter 'billingCodeActivityTag' when calling BillingCodeActivityApi->DeleteBillingCodeActivityTag");

            var localVarPath = "/beta/billingCodeActivity/{billingCodeActivityId}/tag/{billingCodeActivityTag}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (billingCodeActivityId != null) localVarPathParams.Add("billingCodeActivityId", Configuration.ApiClient.ParameterToString(billingCodeActivityId)); // path parameter
            if (billingCodeActivityTag != null) localVarPathParams.Add("billingCodeActivityTag", Configuration.ApiClient.ParameterToString(billingCodeActivityTag)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteBillingCodeActivityTag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a tag for a billingCodeActivity. Deletes an existing billingCodeActivity tag using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="billingCodeActivityId">Id of the billingCodeActivity to remove tag from</param>
        /// <param name="billingCodeActivityTag">The tag to delete</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteBillingCodeActivityTagAsync (int? billingCodeActivityId, string billingCodeActivityTag)
        {
             await DeleteBillingCodeActivityTagAsyncWithHttpInfo(billingCodeActivityId, billingCodeActivityTag);

        }

        /// <summary>
        /// Delete a tag for a billingCodeActivity. Deletes an existing billingCodeActivity tag using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="billingCodeActivityId">Id of the billingCodeActivity to remove tag from</param>
        /// <param name="billingCodeActivityTag">The tag to delete</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteBillingCodeActivityTagAsyncWithHttpInfo (int? billingCodeActivityId, string billingCodeActivityTag)
        {
            // verify the required parameter 'billingCodeActivityId' is set
            if (billingCodeActivityId == null)
                throw new ApiException(400, "Missing required parameter 'billingCodeActivityId' when calling BillingCodeActivityApi->DeleteBillingCodeActivityTag");
            // verify the required parameter 'billingCodeActivityTag' is set
            if (billingCodeActivityTag == null)
                throw new ApiException(400, "Missing required parameter 'billingCodeActivityTag' when calling BillingCodeActivityApi->DeleteBillingCodeActivityTag");

            var localVarPath = "/beta/billingCodeActivity/{billingCodeActivityId}/tag/{billingCodeActivityTag}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (billingCodeActivityId != null) localVarPathParams.Add("billingCodeActivityId", Configuration.ApiClient.ParameterToString(billingCodeActivityId)); // path parameter
            if (billingCodeActivityTag != null) localVarPathParams.Add("billingCodeActivityTag", Configuration.ApiClient.ParameterToString(billingCodeActivityTag)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteBillingCodeActivityTag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Search billingCodeActivitys by filter Returns the list of billingCodeActivitys that match the given filter.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>List&lt;BillingCodeActivity&gt;</returns>
        public List<BillingCodeActivity> GetBillingCodeActivityByFilter (string filter = null, int? page = null, int? limit = null, string sort = null)
        {
             ApiResponse<List<BillingCodeActivity>> localVarResponse = GetBillingCodeActivityByFilterWithHttpInfo(filter, page, limit, sort);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Search billingCodeActivitys by filter Returns the list of billingCodeActivitys that match the given filter.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>ApiResponse of List&lt;BillingCodeActivity&gt;</returns>
        public ApiResponse< List<BillingCodeActivity> > GetBillingCodeActivityByFilterWithHttpInfo (string filter = null, int? page = null, int? limit = null, string sort = null)
        {

            var localVarPath = "/beta/billingCodeActivity/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (filter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (page != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBillingCodeActivityByFilter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<BillingCodeActivity>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<BillingCodeActivity>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<BillingCodeActivity>)));
        }

        /// <summary>
        /// Search billingCodeActivitys by filter Returns the list of billingCodeActivitys that match the given filter.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>Task of List&lt;BillingCodeActivity&gt;</returns>
        public async System.Threading.Tasks.Task<List<BillingCodeActivity>> GetBillingCodeActivityByFilterAsync (string filter = null, int? page = null, int? limit = null, string sort = null)
        {
             ApiResponse<List<BillingCodeActivity>> localVarResponse = await GetBillingCodeActivityByFilterAsyncWithHttpInfo(filter, page, limit, sort);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Search billingCodeActivitys by filter Returns the list of billingCodeActivitys that match the given filter.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;BillingCodeActivity&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<BillingCodeActivity>>> GetBillingCodeActivityByFilterAsyncWithHttpInfo (string filter = null, int? page = null, int? limit = null, string sort = null)
        {

            var localVarPath = "/beta/billingCodeActivity/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (filter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (page != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBillingCodeActivityByFilter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<BillingCodeActivity>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<BillingCodeActivity>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<BillingCodeActivity>)));
        }

        /// <summary>
        /// Get a billingCodeActivity by id Returns the billingCodeActivity identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="billingCodeActivityId">Id of the billingCodeActivity to be returned.</param>
        /// <returns>BillingCodeActivity</returns>
        public BillingCodeActivity GetBillingCodeActivityById (int? billingCodeActivityId)
        {
             ApiResponse<BillingCodeActivity> localVarResponse = GetBillingCodeActivityByIdWithHttpInfo(billingCodeActivityId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a billingCodeActivity by id Returns the billingCodeActivity identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="billingCodeActivityId">Id of the billingCodeActivity to be returned.</param>
        /// <returns>ApiResponse of BillingCodeActivity</returns>
        public ApiResponse< BillingCodeActivity > GetBillingCodeActivityByIdWithHttpInfo (int? billingCodeActivityId)
        {
            // verify the required parameter 'billingCodeActivityId' is set
            if (billingCodeActivityId == null)
                throw new ApiException(400, "Missing required parameter 'billingCodeActivityId' when calling BillingCodeActivityApi->GetBillingCodeActivityById");

            var localVarPath = "/beta/billingCodeActivity/{billingCodeActivityId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (billingCodeActivityId != null) localVarPathParams.Add("billingCodeActivityId", Configuration.ApiClient.ParameterToString(billingCodeActivityId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBillingCodeActivityById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BillingCodeActivity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BillingCodeActivity) Configuration.ApiClient.Deserialize(localVarResponse, typeof(BillingCodeActivity)));
        }

        /// <summary>
        /// Get a billingCodeActivity by id Returns the billingCodeActivity identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="billingCodeActivityId">Id of the billingCodeActivity to be returned.</param>
        /// <returns>Task of BillingCodeActivity</returns>
        public async System.Threading.Tasks.Task<BillingCodeActivity> GetBillingCodeActivityByIdAsync (int? billingCodeActivityId)
        {
             ApiResponse<BillingCodeActivity> localVarResponse = await GetBillingCodeActivityByIdAsyncWithHttpInfo(billingCodeActivityId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a billingCodeActivity by id Returns the billingCodeActivity identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="billingCodeActivityId">Id of the billingCodeActivity to be returned.</param>
        /// <returns>Task of ApiResponse (BillingCodeActivity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BillingCodeActivity>> GetBillingCodeActivityByIdAsyncWithHttpInfo (int? billingCodeActivityId)
        {
            // verify the required parameter 'billingCodeActivityId' is set
            if (billingCodeActivityId == null)
                throw new ApiException(400, "Missing required parameter 'billingCodeActivityId' when calling BillingCodeActivityApi->GetBillingCodeActivityById");

            var localVarPath = "/beta/billingCodeActivity/{billingCodeActivityId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (billingCodeActivityId != null) localVarPathParams.Add("billingCodeActivityId", Configuration.ApiClient.ParameterToString(billingCodeActivityId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBillingCodeActivityById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BillingCodeActivity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BillingCodeActivity) Configuration.ApiClient.Deserialize(localVarResponse, typeof(BillingCodeActivity)));
        }

        /// <summary>
        /// Get the files for a billingCodeActivity. Get all existing billingCodeActivity files.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="billingCodeActivityId">Id of the billingCodeActivity to get files for</param>
        /// <returns></returns>
        public void GetBillingCodeActivityFiles (int? billingCodeActivityId)
        {
             GetBillingCodeActivityFilesWithHttpInfo(billingCodeActivityId);
        }

        /// <summary>
        /// Get the files for a billingCodeActivity. Get all existing billingCodeActivity files.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="billingCodeActivityId">Id of the billingCodeActivity to get files for</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GetBillingCodeActivityFilesWithHttpInfo (int? billingCodeActivityId)
        {
            // verify the required parameter 'billingCodeActivityId' is set
            if (billingCodeActivityId == null)
                throw new ApiException(400, "Missing required parameter 'billingCodeActivityId' when calling BillingCodeActivityApi->GetBillingCodeActivityFiles");

            var localVarPath = "/beta/billingCodeActivity/{billingCodeActivityId}/file";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (billingCodeActivityId != null) localVarPathParams.Add("billingCodeActivityId", Configuration.ApiClient.ParameterToString(billingCodeActivityId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBillingCodeActivityFiles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get the files for a billingCodeActivity. Get all existing billingCodeActivity files.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="billingCodeActivityId">Id of the billingCodeActivity to get files for</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetBillingCodeActivityFilesAsync (int? billingCodeActivityId)
        {
             await GetBillingCodeActivityFilesAsyncWithHttpInfo(billingCodeActivityId);

        }

        /// <summary>
        /// Get the files for a billingCodeActivity. Get all existing billingCodeActivity files.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="billingCodeActivityId">Id of the billingCodeActivity to get files for</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetBillingCodeActivityFilesAsyncWithHttpInfo (int? billingCodeActivityId)
        {
            // verify the required parameter 'billingCodeActivityId' is set
            if (billingCodeActivityId == null)
                throw new ApiException(400, "Missing required parameter 'billingCodeActivityId' when calling BillingCodeActivityApi->GetBillingCodeActivityFiles");

            var localVarPath = "/beta/billingCodeActivity/{billingCodeActivityId}/file";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (billingCodeActivityId != null) localVarPathParams.Add("billingCodeActivityId", Configuration.ApiClient.ParameterToString(billingCodeActivityId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBillingCodeActivityFiles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get the tags for a billingCodeActivity. Get all existing billingCodeActivity tags.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="billingCodeActivityId">Id of the billingCodeActivity to get tags for</param>
        /// <returns></returns>
        public void GetBillingCodeActivityTags (int? billingCodeActivityId)
        {
             GetBillingCodeActivityTagsWithHttpInfo(billingCodeActivityId);
        }

        /// <summary>
        /// Get the tags for a billingCodeActivity. Get all existing billingCodeActivity tags.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="billingCodeActivityId">Id of the billingCodeActivity to get tags for</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GetBillingCodeActivityTagsWithHttpInfo (int? billingCodeActivityId)
        {
            // verify the required parameter 'billingCodeActivityId' is set
            if (billingCodeActivityId == null)
                throw new ApiException(400, "Missing required parameter 'billingCodeActivityId' when calling BillingCodeActivityApi->GetBillingCodeActivityTags");

            var localVarPath = "/beta/billingCodeActivity/{billingCodeActivityId}/tag";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (billingCodeActivityId != null) localVarPathParams.Add("billingCodeActivityId", Configuration.ApiClient.ParameterToString(billingCodeActivityId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBillingCodeActivityTags", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get the tags for a billingCodeActivity. Get all existing billingCodeActivity tags.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="billingCodeActivityId">Id of the billingCodeActivity to get tags for</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetBillingCodeActivityTagsAsync (int? billingCodeActivityId)
        {
             await GetBillingCodeActivityTagsAsyncWithHttpInfo(billingCodeActivityId);

        }

        /// <summary>
        /// Get the tags for a billingCodeActivity. Get all existing billingCodeActivity tags.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="billingCodeActivityId">Id of the billingCodeActivity to get tags for</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetBillingCodeActivityTagsAsyncWithHttpInfo (int? billingCodeActivityId)
        {
            // verify the required parameter 'billingCodeActivityId' is set
            if (billingCodeActivityId == null)
                throw new ApiException(400, "Missing required parameter 'billingCodeActivityId' when calling BillingCodeActivityApi->GetBillingCodeActivityTags");

            var localVarPath = "/beta/billingCodeActivity/{billingCodeActivityId}/tag";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (billingCodeActivityId != null) localVarPathParams.Add("billingCodeActivityId", Configuration.ApiClient.ParameterToString(billingCodeActivityId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBillingCodeActivityTags", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get a duplicated a billingCodeActivity by id Returns a duplicated billingCodeActivity identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="billingCodeActivityId">Id of the billingCodeActivity to be duplicated.</param>
        /// <returns>BillingCodeActivity</returns>
        public BillingCodeActivity GetDuplicateBillingCodeActivityById (int? billingCodeActivityId)
        {
             ApiResponse<BillingCodeActivity> localVarResponse = GetDuplicateBillingCodeActivityByIdWithHttpInfo(billingCodeActivityId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a duplicated a billingCodeActivity by id Returns a duplicated billingCodeActivity identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="billingCodeActivityId">Id of the billingCodeActivity to be duplicated.</param>
        /// <returns>ApiResponse of BillingCodeActivity</returns>
        public ApiResponse< BillingCodeActivity > GetDuplicateBillingCodeActivityByIdWithHttpInfo (int? billingCodeActivityId)
        {
            // verify the required parameter 'billingCodeActivityId' is set
            if (billingCodeActivityId == null)
                throw new ApiException(400, "Missing required parameter 'billingCodeActivityId' when calling BillingCodeActivityApi->GetDuplicateBillingCodeActivityById");

            var localVarPath = "/beta/billingCodeActivity/duplicate/{billingCodeActivityId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (billingCodeActivityId != null) localVarPathParams.Add("billingCodeActivityId", Configuration.ApiClient.ParameterToString(billingCodeActivityId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDuplicateBillingCodeActivityById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BillingCodeActivity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BillingCodeActivity) Configuration.ApiClient.Deserialize(localVarResponse, typeof(BillingCodeActivity)));
        }

        /// <summary>
        /// Get a duplicated a billingCodeActivity by id Returns a duplicated billingCodeActivity identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="billingCodeActivityId">Id of the billingCodeActivity to be duplicated.</param>
        /// <returns>Task of BillingCodeActivity</returns>
        public async System.Threading.Tasks.Task<BillingCodeActivity> GetDuplicateBillingCodeActivityByIdAsync (int? billingCodeActivityId)
        {
             ApiResponse<BillingCodeActivity> localVarResponse = await GetDuplicateBillingCodeActivityByIdAsyncWithHttpInfo(billingCodeActivityId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a duplicated a billingCodeActivity by id Returns a duplicated billingCodeActivity identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="billingCodeActivityId">Id of the billingCodeActivity to be duplicated.</param>
        /// <returns>Task of ApiResponse (BillingCodeActivity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BillingCodeActivity>> GetDuplicateBillingCodeActivityByIdAsyncWithHttpInfo (int? billingCodeActivityId)
        {
            // verify the required parameter 'billingCodeActivityId' is set
            if (billingCodeActivityId == null)
                throw new ApiException(400, "Missing required parameter 'billingCodeActivityId' when calling BillingCodeActivityApi->GetDuplicateBillingCodeActivityById");

            var localVarPath = "/beta/billingCodeActivity/duplicate/{billingCodeActivityId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (billingCodeActivityId != null) localVarPathParams.Add("billingCodeActivityId", Configuration.ApiClient.ParameterToString(billingCodeActivityId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDuplicateBillingCodeActivityById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BillingCodeActivity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BillingCodeActivity) Configuration.ApiClient.Deserialize(localVarResponse, typeof(BillingCodeActivity)));
        }

        /// <summary>
        /// Update a billingCodeActivity Updates an existing billingCodeActivity using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">BillingCodeActivity to be updated.</param>
        /// <returns></returns>
        public void UpdateBillingCodeActivity (BillingCodeActivity body)
        {
             UpdateBillingCodeActivityWithHttpInfo(body);
        }

        /// <summary>
        /// Update a billingCodeActivity Updates an existing billingCodeActivity using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">BillingCodeActivity to be updated.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateBillingCodeActivityWithHttpInfo (BillingCodeActivity body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling BillingCodeActivityApi->UpdateBillingCodeActivity");

            var localVarPath = "/beta/billingCodeActivity";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateBillingCodeActivity", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update a billingCodeActivity Updates an existing billingCodeActivity using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">BillingCodeActivity to be updated.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateBillingCodeActivityAsync (BillingCodeActivity body)
        {
             await UpdateBillingCodeActivityAsyncWithHttpInfo(body);

        }

        /// <summary>
        /// Update a billingCodeActivity Updates an existing billingCodeActivity using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">BillingCodeActivity to be updated.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateBillingCodeActivityAsyncWithHttpInfo (BillingCodeActivity body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling BillingCodeActivityApi->UpdateBillingCodeActivity");

            var localVarPath = "/beta/billingCodeActivity";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateBillingCodeActivity", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

    }
}
