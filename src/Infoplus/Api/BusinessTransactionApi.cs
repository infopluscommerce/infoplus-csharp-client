/* 
 * Infoplus API
 *
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Infoplus.Client;
using Infoplus.Model;

namespace Infoplus.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IBusinessTransactionApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create a businessTransaction
        /// </summary>
        /// <remarks>
        /// Inserts a new businessTransaction using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">BusinessTransaction to be inserted.</param>
        /// <returns>BusinessTransaction</returns>
        BusinessTransaction AddBusinessTransaction (BusinessTransaction body);

        /// <summary>
        /// Create a businessTransaction
        /// </summary>
        /// <remarks>
        /// Inserts a new businessTransaction using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">BusinessTransaction to be inserted.</param>
        /// <returns>ApiResponse of BusinessTransaction</returns>
        ApiResponse<BusinessTransaction> AddBusinessTransactionWithHttpInfo (BusinessTransaction body);
        /// <summary>
        /// Add new audit for a businessTransaction
        /// </summary>
        /// <remarks>
        /// Adds an audit to an existing businessTransaction.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessTransactionId">Id of the businessTransaction to add an audit to</param>
        /// <param name="businessTransactionAudit">The audit to add</param>
        /// <returns></returns>
        void AddBusinessTransactionAudit (int? businessTransactionId, string businessTransactionAudit);

        /// <summary>
        /// Add new audit for a businessTransaction
        /// </summary>
        /// <remarks>
        /// Adds an audit to an existing businessTransaction.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessTransactionId">Id of the businessTransaction to add an audit to</param>
        /// <param name="businessTransactionAudit">The audit to add</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddBusinessTransactionAuditWithHttpInfo (int? businessTransactionId, string businessTransactionAudit);
        /// <summary>
        /// Attach a file to a businessTransaction
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing businessTransaction.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessTransactionId">Id of the businessTransaction to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns></returns>
        void AddBusinessTransactionFile (int? businessTransactionId, string fileName);

        /// <summary>
        /// Attach a file to a businessTransaction
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing businessTransaction.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessTransactionId">Id of the businessTransaction to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddBusinessTransactionFileWithHttpInfo (int? businessTransactionId, string fileName);
        /// <summary>
        /// Attach a file to a businessTransaction by URL.
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing businessTransaction by URL.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="businessTransactionId">Id of the businessTransaction to add an file to</param>
        /// <returns></returns>
        void AddBusinessTransactionFileByURL (RecordFile body, int? businessTransactionId);

        /// <summary>
        /// Attach a file to a businessTransaction by URL.
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing businessTransaction by URL.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="businessTransactionId">Id of the businessTransaction to add an file to</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddBusinessTransactionFileByURLWithHttpInfo (RecordFile body, int? businessTransactionId);
        /// <summary>
        /// Add new tags for a businessTransaction.
        /// </summary>
        /// <remarks>
        /// Adds a tag to an existing businessTransaction.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessTransactionId">Id of the businessTransaction to add a tag to</param>
        /// <param name="businessTransactionTag">The tag to add</param>
        /// <returns></returns>
        void AddBusinessTransactionTag (int? businessTransactionId, string businessTransactionTag);

        /// <summary>
        /// Add new tags for a businessTransaction.
        /// </summary>
        /// <remarks>
        /// Adds a tag to an existing businessTransaction.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessTransactionId">Id of the businessTransaction to add a tag to</param>
        /// <param name="businessTransactionTag">The tag to add</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddBusinessTransactionTagWithHttpInfo (int? businessTransactionId, string businessTransactionTag);
        /// <summary>
        /// Delete a file for a businessTransaction.
        /// </summary>
        /// <remarks>
        /// Deletes an existing businessTransaction file using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessTransactionId">Id of the businessTransaction to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns></returns>
        void DeleteBusinessTransactionFile (int? businessTransactionId, int? fileId);

        /// <summary>
        /// Delete a file for a businessTransaction.
        /// </summary>
        /// <remarks>
        /// Deletes an existing businessTransaction file using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessTransactionId">Id of the businessTransaction to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteBusinessTransactionFileWithHttpInfo (int? businessTransactionId, int? fileId);
        /// <summary>
        /// Delete a tag for a businessTransaction.
        /// </summary>
        /// <remarks>
        /// Deletes an existing businessTransaction tag using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessTransactionId">Id of the businessTransaction to remove tag from</param>
        /// <param name="businessTransactionTag">The tag to delete</param>
        /// <returns></returns>
        void DeleteBusinessTransactionTag (int? businessTransactionId, string businessTransactionTag);

        /// <summary>
        /// Delete a tag for a businessTransaction.
        /// </summary>
        /// <remarks>
        /// Deletes an existing businessTransaction tag using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessTransactionId">Id of the businessTransaction to remove tag from</param>
        /// <param name="businessTransactionTag">The tag to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteBusinessTransactionTagWithHttpInfo (int? businessTransactionId, string businessTransactionTag);
        /// <summary>
        /// Search businessTransactions by filter
        /// </summary>
        /// <remarks>
        /// Returns the list of businessTransactions that match the given filter.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>List&lt;BusinessTransaction&gt;</returns>
        List<BusinessTransaction> GetBusinessTransactionByFilter (string filter = null, int? page = null, int? limit = null, string sort = null);

        /// <summary>
        /// Search businessTransactions by filter
        /// </summary>
        /// <remarks>
        /// Returns the list of businessTransactions that match the given filter.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>ApiResponse of List&lt;BusinessTransaction&gt;</returns>
        ApiResponse<List<BusinessTransaction>> GetBusinessTransactionByFilterWithHttpInfo (string filter = null, int? page = null, int? limit = null, string sort = null);
        /// <summary>
        /// Get a businessTransaction by id
        /// </summary>
        /// <remarks>
        /// Returns the businessTransaction identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessTransactionId">Id of the businessTransaction to be returned.</param>
        /// <returns>BusinessTransaction</returns>
        BusinessTransaction GetBusinessTransactionById (int? businessTransactionId);

        /// <summary>
        /// Get a businessTransaction by id
        /// </summary>
        /// <remarks>
        /// Returns the businessTransaction identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessTransactionId">Id of the businessTransaction to be returned.</param>
        /// <returns>ApiResponse of BusinessTransaction</returns>
        ApiResponse<BusinessTransaction> GetBusinessTransactionByIdWithHttpInfo (int? businessTransactionId);
        /// <summary>
        /// Get the files for a businessTransaction.
        /// </summary>
        /// <remarks>
        /// Get all existing businessTransaction files.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessTransactionId">Id of the businessTransaction to get files for</param>
        /// <returns></returns>
        void GetBusinessTransactionFiles (int? businessTransactionId);

        /// <summary>
        /// Get the files for a businessTransaction.
        /// </summary>
        /// <remarks>
        /// Get all existing businessTransaction files.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessTransactionId">Id of the businessTransaction to get files for</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetBusinessTransactionFilesWithHttpInfo (int? businessTransactionId);
        /// <summary>
        /// Get the tags for a businessTransaction.
        /// </summary>
        /// <remarks>
        /// Get all existing businessTransaction tags.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessTransactionId">Id of the businessTransaction to get tags for</param>
        /// <returns></returns>
        void GetBusinessTransactionTags (int? businessTransactionId);

        /// <summary>
        /// Get the tags for a businessTransaction.
        /// </summary>
        /// <remarks>
        /// Get all existing businessTransaction tags.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessTransactionId">Id of the businessTransaction to get tags for</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetBusinessTransactionTagsWithHttpInfo (int? businessTransactionId);
        /// <summary>
        /// Get a duplicated a businessTransaction by id
        /// </summary>
        /// <remarks>
        /// Returns a duplicated businessTransaction identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessTransactionId">Id of the businessTransaction to be duplicated.</param>
        /// <returns>BusinessTransaction</returns>
        BusinessTransaction GetDuplicateBusinessTransactionById (int? businessTransactionId);

        /// <summary>
        /// Get a duplicated a businessTransaction by id
        /// </summary>
        /// <remarks>
        /// Returns a duplicated businessTransaction identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessTransactionId">Id of the businessTransaction to be duplicated.</param>
        /// <returns>ApiResponse of BusinessTransaction</returns>
        ApiResponse<BusinessTransaction> GetDuplicateBusinessTransactionByIdWithHttpInfo (int? businessTransactionId);
        /// <summary>
        /// Update a businessTransaction
        /// </summary>
        /// <remarks>
        /// Updates an existing businessTransaction using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">BusinessTransaction to be updated.</param>
        /// <returns></returns>
        void UpdateBusinessTransaction (BusinessTransaction body);

        /// <summary>
        /// Update a businessTransaction
        /// </summary>
        /// <remarks>
        /// Updates an existing businessTransaction using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">BusinessTransaction to be updated.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateBusinessTransactionWithHttpInfo (BusinessTransaction body);
        /// <summary>
        /// Update a businessTransaction custom fields
        /// </summary>
        /// <remarks>
        /// Updates an existing businessTransaction custom fields using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">BusinessTransaction to be updated.</param>
        /// <returns></returns>
        void UpdateBusinessTransactionCustomFields (BusinessTransaction body);

        /// <summary>
        /// Update a businessTransaction custom fields
        /// </summary>
        /// <remarks>
        /// Updates an existing businessTransaction custom fields using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">BusinessTransaction to be updated.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateBusinessTransactionCustomFieldsWithHttpInfo (BusinessTransaction body);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create a businessTransaction
        /// </summary>
        /// <remarks>
        /// Inserts a new businessTransaction using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">BusinessTransaction to be inserted.</param>
        /// <returns>Task of BusinessTransaction</returns>
        System.Threading.Tasks.Task<BusinessTransaction> AddBusinessTransactionAsync (BusinessTransaction body);

        /// <summary>
        /// Create a businessTransaction
        /// </summary>
        /// <remarks>
        /// Inserts a new businessTransaction using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">BusinessTransaction to be inserted.</param>
        /// <returns>Task of ApiResponse (BusinessTransaction)</returns>
        System.Threading.Tasks.Task<ApiResponse<BusinessTransaction>> AddBusinessTransactionAsyncWithHttpInfo (BusinessTransaction body);
        /// <summary>
        /// Add new audit for a businessTransaction
        /// </summary>
        /// <remarks>
        /// Adds an audit to an existing businessTransaction.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessTransactionId">Id of the businessTransaction to add an audit to</param>
        /// <param name="businessTransactionAudit">The audit to add</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddBusinessTransactionAuditAsync (int? businessTransactionId, string businessTransactionAudit);

        /// <summary>
        /// Add new audit for a businessTransaction
        /// </summary>
        /// <remarks>
        /// Adds an audit to an existing businessTransaction.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessTransactionId">Id of the businessTransaction to add an audit to</param>
        /// <param name="businessTransactionAudit">The audit to add</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddBusinessTransactionAuditAsyncWithHttpInfo (int? businessTransactionId, string businessTransactionAudit);
        /// <summary>
        /// Attach a file to a businessTransaction
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing businessTransaction.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessTransactionId">Id of the businessTransaction to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddBusinessTransactionFileAsync (int? businessTransactionId, string fileName);

        /// <summary>
        /// Attach a file to a businessTransaction
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing businessTransaction.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessTransactionId">Id of the businessTransaction to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddBusinessTransactionFileAsyncWithHttpInfo (int? businessTransactionId, string fileName);
        /// <summary>
        /// Attach a file to a businessTransaction by URL.
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing businessTransaction by URL.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="businessTransactionId">Id of the businessTransaction to add an file to</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddBusinessTransactionFileByURLAsync (RecordFile body, int? businessTransactionId);

        /// <summary>
        /// Attach a file to a businessTransaction by URL.
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing businessTransaction by URL.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="businessTransactionId">Id of the businessTransaction to add an file to</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddBusinessTransactionFileByURLAsyncWithHttpInfo (RecordFile body, int? businessTransactionId);
        /// <summary>
        /// Add new tags for a businessTransaction.
        /// </summary>
        /// <remarks>
        /// Adds a tag to an existing businessTransaction.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessTransactionId">Id of the businessTransaction to add a tag to</param>
        /// <param name="businessTransactionTag">The tag to add</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddBusinessTransactionTagAsync (int? businessTransactionId, string businessTransactionTag);

        /// <summary>
        /// Add new tags for a businessTransaction.
        /// </summary>
        /// <remarks>
        /// Adds a tag to an existing businessTransaction.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessTransactionId">Id of the businessTransaction to add a tag to</param>
        /// <param name="businessTransactionTag">The tag to add</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddBusinessTransactionTagAsyncWithHttpInfo (int? businessTransactionId, string businessTransactionTag);
        /// <summary>
        /// Delete a file for a businessTransaction.
        /// </summary>
        /// <remarks>
        /// Deletes an existing businessTransaction file using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessTransactionId">Id of the businessTransaction to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteBusinessTransactionFileAsync (int? businessTransactionId, int? fileId);

        /// <summary>
        /// Delete a file for a businessTransaction.
        /// </summary>
        /// <remarks>
        /// Deletes an existing businessTransaction file using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessTransactionId">Id of the businessTransaction to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteBusinessTransactionFileAsyncWithHttpInfo (int? businessTransactionId, int? fileId);
        /// <summary>
        /// Delete a tag for a businessTransaction.
        /// </summary>
        /// <remarks>
        /// Deletes an existing businessTransaction tag using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessTransactionId">Id of the businessTransaction to remove tag from</param>
        /// <param name="businessTransactionTag">The tag to delete</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteBusinessTransactionTagAsync (int? businessTransactionId, string businessTransactionTag);

        /// <summary>
        /// Delete a tag for a businessTransaction.
        /// </summary>
        /// <remarks>
        /// Deletes an existing businessTransaction tag using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessTransactionId">Id of the businessTransaction to remove tag from</param>
        /// <param name="businessTransactionTag">The tag to delete</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteBusinessTransactionTagAsyncWithHttpInfo (int? businessTransactionId, string businessTransactionTag);
        /// <summary>
        /// Search businessTransactions by filter
        /// </summary>
        /// <remarks>
        /// Returns the list of businessTransactions that match the given filter.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>Task of List&lt;BusinessTransaction&gt;</returns>
        System.Threading.Tasks.Task<List<BusinessTransaction>> GetBusinessTransactionByFilterAsync (string filter = null, int? page = null, int? limit = null, string sort = null);

        /// <summary>
        /// Search businessTransactions by filter
        /// </summary>
        /// <remarks>
        /// Returns the list of businessTransactions that match the given filter.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;BusinessTransaction&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<BusinessTransaction>>> GetBusinessTransactionByFilterAsyncWithHttpInfo (string filter = null, int? page = null, int? limit = null, string sort = null);
        /// <summary>
        /// Get a businessTransaction by id
        /// </summary>
        /// <remarks>
        /// Returns the businessTransaction identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessTransactionId">Id of the businessTransaction to be returned.</param>
        /// <returns>Task of BusinessTransaction</returns>
        System.Threading.Tasks.Task<BusinessTransaction> GetBusinessTransactionByIdAsync (int? businessTransactionId);

        /// <summary>
        /// Get a businessTransaction by id
        /// </summary>
        /// <remarks>
        /// Returns the businessTransaction identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessTransactionId">Id of the businessTransaction to be returned.</param>
        /// <returns>Task of ApiResponse (BusinessTransaction)</returns>
        System.Threading.Tasks.Task<ApiResponse<BusinessTransaction>> GetBusinessTransactionByIdAsyncWithHttpInfo (int? businessTransactionId);
        /// <summary>
        /// Get the files for a businessTransaction.
        /// </summary>
        /// <remarks>
        /// Get all existing businessTransaction files.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessTransactionId">Id of the businessTransaction to get files for</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetBusinessTransactionFilesAsync (int? businessTransactionId);

        /// <summary>
        /// Get the files for a businessTransaction.
        /// </summary>
        /// <remarks>
        /// Get all existing businessTransaction files.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessTransactionId">Id of the businessTransaction to get files for</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetBusinessTransactionFilesAsyncWithHttpInfo (int? businessTransactionId);
        /// <summary>
        /// Get the tags for a businessTransaction.
        /// </summary>
        /// <remarks>
        /// Get all existing businessTransaction tags.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessTransactionId">Id of the businessTransaction to get tags for</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetBusinessTransactionTagsAsync (int? businessTransactionId);

        /// <summary>
        /// Get the tags for a businessTransaction.
        /// </summary>
        /// <remarks>
        /// Get all existing businessTransaction tags.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessTransactionId">Id of the businessTransaction to get tags for</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetBusinessTransactionTagsAsyncWithHttpInfo (int? businessTransactionId);
        /// <summary>
        /// Get a duplicated a businessTransaction by id
        /// </summary>
        /// <remarks>
        /// Returns a duplicated businessTransaction identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessTransactionId">Id of the businessTransaction to be duplicated.</param>
        /// <returns>Task of BusinessTransaction</returns>
        System.Threading.Tasks.Task<BusinessTransaction> GetDuplicateBusinessTransactionByIdAsync (int? businessTransactionId);

        /// <summary>
        /// Get a duplicated a businessTransaction by id
        /// </summary>
        /// <remarks>
        /// Returns a duplicated businessTransaction identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessTransactionId">Id of the businessTransaction to be duplicated.</param>
        /// <returns>Task of ApiResponse (BusinessTransaction)</returns>
        System.Threading.Tasks.Task<ApiResponse<BusinessTransaction>> GetDuplicateBusinessTransactionByIdAsyncWithHttpInfo (int? businessTransactionId);
        /// <summary>
        /// Update a businessTransaction
        /// </summary>
        /// <remarks>
        /// Updates an existing businessTransaction using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">BusinessTransaction to be updated.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateBusinessTransactionAsync (BusinessTransaction body);

        /// <summary>
        /// Update a businessTransaction
        /// </summary>
        /// <remarks>
        /// Updates an existing businessTransaction using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">BusinessTransaction to be updated.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateBusinessTransactionAsyncWithHttpInfo (BusinessTransaction body);
        /// <summary>
        /// Update a businessTransaction custom fields
        /// </summary>
        /// <remarks>
        /// Updates an existing businessTransaction custom fields using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">BusinessTransaction to be updated.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateBusinessTransactionCustomFieldsAsync (BusinessTransaction body);

        /// <summary>
        /// Update a businessTransaction custom fields
        /// </summary>
        /// <remarks>
        /// Updates an existing businessTransaction custom fields using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">BusinessTransaction to be updated.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateBusinessTransactionCustomFieldsAsyncWithHttpInfo (BusinessTransaction body);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class BusinessTransactionApi : IBusinessTransactionApi
    {
        private Infoplus.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="BusinessTransactionApi"/> class.
        /// </summary>
        /// <returns></returns>
        public BusinessTransactionApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = Infoplus.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BusinessTransactionApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public BusinessTransactionApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Infoplus.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Infoplus.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create a businessTransaction Inserts a new businessTransaction using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">BusinessTransaction to be inserted.</param>
        /// <returns>BusinessTransaction</returns>
        public BusinessTransaction AddBusinessTransaction (BusinessTransaction body)
        {
             ApiResponse<BusinessTransaction> localVarResponse = AddBusinessTransactionWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a businessTransaction Inserts a new businessTransaction using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">BusinessTransaction to be inserted.</param>
        /// <returns>ApiResponse of BusinessTransaction</returns>
        public ApiResponse< BusinessTransaction > AddBusinessTransactionWithHttpInfo (BusinessTransaction body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling BusinessTransactionApi->AddBusinessTransaction");

            var localVarPath = "/beta/businessTransaction";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddBusinessTransaction", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BusinessTransaction>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BusinessTransaction) Configuration.ApiClient.Deserialize(localVarResponse, typeof(BusinessTransaction)));
        }

        /// <summary>
        /// Create a businessTransaction Inserts a new businessTransaction using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">BusinessTransaction to be inserted.</param>
        /// <returns>Task of BusinessTransaction</returns>
        public async System.Threading.Tasks.Task<BusinessTransaction> AddBusinessTransactionAsync (BusinessTransaction body)
        {
             ApiResponse<BusinessTransaction> localVarResponse = await AddBusinessTransactionAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a businessTransaction Inserts a new businessTransaction using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">BusinessTransaction to be inserted.</param>
        /// <returns>Task of ApiResponse (BusinessTransaction)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BusinessTransaction>> AddBusinessTransactionAsyncWithHttpInfo (BusinessTransaction body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling BusinessTransactionApi->AddBusinessTransaction");

            var localVarPath = "/beta/businessTransaction";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddBusinessTransaction", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BusinessTransaction>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BusinessTransaction) Configuration.ApiClient.Deserialize(localVarResponse, typeof(BusinessTransaction)));
        }

        /// <summary>
        /// Add new audit for a businessTransaction Adds an audit to an existing businessTransaction.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessTransactionId">Id of the businessTransaction to add an audit to</param>
        /// <param name="businessTransactionAudit">The audit to add</param>
        /// <returns></returns>
        public void AddBusinessTransactionAudit (int? businessTransactionId, string businessTransactionAudit)
        {
             AddBusinessTransactionAuditWithHttpInfo(businessTransactionId, businessTransactionAudit);
        }

        /// <summary>
        /// Add new audit for a businessTransaction Adds an audit to an existing businessTransaction.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessTransactionId">Id of the businessTransaction to add an audit to</param>
        /// <param name="businessTransactionAudit">The audit to add</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AddBusinessTransactionAuditWithHttpInfo (int? businessTransactionId, string businessTransactionAudit)
        {
            // verify the required parameter 'businessTransactionId' is set
            if (businessTransactionId == null)
                throw new ApiException(400, "Missing required parameter 'businessTransactionId' when calling BusinessTransactionApi->AddBusinessTransactionAudit");
            // verify the required parameter 'businessTransactionAudit' is set
            if (businessTransactionAudit == null)
                throw new ApiException(400, "Missing required parameter 'businessTransactionAudit' when calling BusinessTransactionApi->AddBusinessTransactionAudit");

            var localVarPath = "/beta/businessTransaction/{businessTransactionId}/audit/{businessTransactionAudit}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (businessTransactionId != null) localVarPathParams.Add("businessTransactionId", Configuration.ApiClient.ParameterToString(businessTransactionId)); // path parameter
            if (businessTransactionAudit != null) localVarPathParams.Add("businessTransactionAudit", Configuration.ApiClient.ParameterToString(businessTransactionAudit)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddBusinessTransactionAudit", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Add new audit for a businessTransaction Adds an audit to an existing businessTransaction.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessTransactionId">Id of the businessTransaction to add an audit to</param>
        /// <param name="businessTransactionAudit">The audit to add</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddBusinessTransactionAuditAsync (int? businessTransactionId, string businessTransactionAudit)
        {
             await AddBusinessTransactionAuditAsyncWithHttpInfo(businessTransactionId, businessTransactionAudit);

        }

        /// <summary>
        /// Add new audit for a businessTransaction Adds an audit to an existing businessTransaction.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessTransactionId">Id of the businessTransaction to add an audit to</param>
        /// <param name="businessTransactionAudit">The audit to add</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddBusinessTransactionAuditAsyncWithHttpInfo (int? businessTransactionId, string businessTransactionAudit)
        {
            // verify the required parameter 'businessTransactionId' is set
            if (businessTransactionId == null)
                throw new ApiException(400, "Missing required parameter 'businessTransactionId' when calling BusinessTransactionApi->AddBusinessTransactionAudit");
            // verify the required parameter 'businessTransactionAudit' is set
            if (businessTransactionAudit == null)
                throw new ApiException(400, "Missing required parameter 'businessTransactionAudit' when calling BusinessTransactionApi->AddBusinessTransactionAudit");

            var localVarPath = "/beta/businessTransaction/{businessTransactionId}/audit/{businessTransactionAudit}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (businessTransactionId != null) localVarPathParams.Add("businessTransactionId", Configuration.ApiClient.ParameterToString(businessTransactionId)); // path parameter
            if (businessTransactionAudit != null) localVarPathParams.Add("businessTransactionAudit", Configuration.ApiClient.ParameterToString(businessTransactionAudit)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddBusinessTransactionAudit", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Attach a file to a businessTransaction Adds a file to an existing businessTransaction.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessTransactionId">Id of the businessTransaction to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns></returns>
        public void AddBusinessTransactionFile (int? businessTransactionId, string fileName)
        {
             AddBusinessTransactionFileWithHttpInfo(businessTransactionId, fileName);
        }

        /// <summary>
        /// Attach a file to a businessTransaction Adds a file to an existing businessTransaction.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessTransactionId">Id of the businessTransaction to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AddBusinessTransactionFileWithHttpInfo (int? businessTransactionId, string fileName)
        {
            // verify the required parameter 'businessTransactionId' is set
            if (businessTransactionId == null)
                throw new ApiException(400, "Missing required parameter 'businessTransactionId' when calling BusinessTransactionApi->AddBusinessTransactionFile");
            // verify the required parameter 'fileName' is set
            if (fileName == null)
                throw new ApiException(400, "Missing required parameter 'fileName' when calling BusinessTransactionApi->AddBusinessTransactionFile");

            var localVarPath = "/beta/businessTransaction/{businessTransactionId}/file/{fileName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (businessTransactionId != null) localVarPathParams.Add("businessTransactionId", Configuration.ApiClient.ParameterToString(businessTransactionId)); // path parameter
            if (fileName != null) localVarPathParams.Add("fileName", Configuration.ApiClient.ParameterToString(fileName)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddBusinessTransactionFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Attach a file to a businessTransaction Adds a file to an existing businessTransaction.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessTransactionId">Id of the businessTransaction to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddBusinessTransactionFileAsync (int? businessTransactionId, string fileName)
        {
             await AddBusinessTransactionFileAsyncWithHttpInfo(businessTransactionId, fileName);

        }

        /// <summary>
        /// Attach a file to a businessTransaction Adds a file to an existing businessTransaction.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessTransactionId">Id of the businessTransaction to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddBusinessTransactionFileAsyncWithHttpInfo (int? businessTransactionId, string fileName)
        {
            // verify the required parameter 'businessTransactionId' is set
            if (businessTransactionId == null)
                throw new ApiException(400, "Missing required parameter 'businessTransactionId' when calling BusinessTransactionApi->AddBusinessTransactionFile");
            // verify the required parameter 'fileName' is set
            if (fileName == null)
                throw new ApiException(400, "Missing required parameter 'fileName' when calling BusinessTransactionApi->AddBusinessTransactionFile");

            var localVarPath = "/beta/businessTransaction/{businessTransactionId}/file/{fileName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (businessTransactionId != null) localVarPathParams.Add("businessTransactionId", Configuration.ApiClient.ParameterToString(businessTransactionId)); // path parameter
            if (fileName != null) localVarPathParams.Add("fileName", Configuration.ApiClient.ParameterToString(fileName)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddBusinessTransactionFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Attach a file to a businessTransaction by URL. Adds a file to an existing businessTransaction by URL.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="businessTransactionId">Id of the businessTransaction to add an file to</param>
        /// <returns></returns>
        public void AddBusinessTransactionFileByURL (RecordFile body, int? businessTransactionId)
        {
             AddBusinessTransactionFileByURLWithHttpInfo(body, businessTransactionId);
        }

        /// <summary>
        /// Attach a file to a businessTransaction by URL. Adds a file to an existing businessTransaction by URL.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="businessTransactionId">Id of the businessTransaction to add an file to</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AddBusinessTransactionFileByURLWithHttpInfo (RecordFile body, int? businessTransactionId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling BusinessTransactionApi->AddBusinessTransactionFileByURL");
            // verify the required parameter 'businessTransactionId' is set
            if (businessTransactionId == null)
                throw new ApiException(400, "Missing required parameter 'businessTransactionId' when calling BusinessTransactionApi->AddBusinessTransactionFileByURL");

            var localVarPath = "/beta/businessTransaction/{businessTransactionId}/file";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (businessTransactionId != null) localVarPathParams.Add("businessTransactionId", Configuration.ApiClient.ParameterToString(businessTransactionId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddBusinessTransactionFileByURL", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Attach a file to a businessTransaction by URL. Adds a file to an existing businessTransaction by URL.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="businessTransactionId">Id of the businessTransaction to add an file to</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddBusinessTransactionFileByURLAsync (RecordFile body, int? businessTransactionId)
        {
             await AddBusinessTransactionFileByURLAsyncWithHttpInfo(body, businessTransactionId);

        }

        /// <summary>
        /// Attach a file to a businessTransaction by URL. Adds a file to an existing businessTransaction by URL.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="businessTransactionId">Id of the businessTransaction to add an file to</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddBusinessTransactionFileByURLAsyncWithHttpInfo (RecordFile body, int? businessTransactionId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling BusinessTransactionApi->AddBusinessTransactionFileByURL");
            // verify the required parameter 'businessTransactionId' is set
            if (businessTransactionId == null)
                throw new ApiException(400, "Missing required parameter 'businessTransactionId' when calling BusinessTransactionApi->AddBusinessTransactionFileByURL");

            var localVarPath = "/beta/businessTransaction/{businessTransactionId}/file";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (businessTransactionId != null) localVarPathParams.Add("businessTransactionId", Configuration.ApiClient.ParameterToString(businessTransactionId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddBusinessTransactionFileByURL", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Add new tags for a businessTransaction. Adds a tag to an existing businessTransaction.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessTransactionId">Id of the businessTransaction to add a tag to</param>
        /// <param name="businessTransactionTag">The tag to add</param>
        /// <returns></returns>
        public void AddBusinessTransactionTag (int? businessTransactionId, string businessTransactionTag)
        {
             AddBusinessTransactionTagWithHttpInfo(businessTransactionId, businessTransactionTag);
        }

        /// <summary>
        /// Add new tags for a businessTransaction. Adds a tag to an existing businessTransaction.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessTransactionId">Id of the businessTransaction to add a tag to</param>
        /// <param name="businessTransactionTag">The tag to add</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AddBusinessTransactionTagWithHttpInfo (int? businessTransactionId, string businessTransactionTag)
        {
            // verify the required parameter 'businessTransactionId' is set
            if (businessTransactionId == null)
                throw new ApiException(400, "Missing required parameter 'businessTransactionId' when calling BusinessTransactionApi->AddBusinessTransactionTag");
            // verify the required parameter 'businessTransactionTag' is set
            if (businessTransactionTag == null)
                throw new ApiException(400, "Missing required parameter 'businessTransactionTag' when calling BusinessTransactionApi->AddBusinessTransactionTag");

            var localVarPath = "/beta/businessTransaction/{businessTransactionId}/tag/{businessTransactionTag}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (businessTransactionId != null) localVarPathParams.Add("businessTransactionId", Configuration.ApiClient.ParameterToString(businessTransactionId)); // path parameter
            if (businessTransactionTag != null) localVarPathParams.Add("businessTransactionTag", Configuration.ApiClient.ParameterToString(businessTransactionTag)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddBusinessTransactionTag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Add new tags for a businessTransaction. Adds a tag to an existing businessTransaction.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessTransactionId">Id of the businessTransaction to add a tag to</param>
        /// <param name="businessTransactionTag">The tag to add</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddBusinessTransactionTagAsync (int? businessTransactionId, string businessTransactionTag)
        {
             await AddBusinessTransactionTagAsyncWithHttpInfo(businessTransactionId, businessTransactionTag);

        }

        /// <summary>
        /// Add new tags for a businessTransaction. Adds a tag to an existing businessTransaction.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessTransactionId">Id of the businessTransaction to add a tag to</param>
        /// <param name="businessTransactionTag">The tag to add</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddBusinessTransactionTagAsyncWithHttpInfo (int? businessTransactionId, string businessTransactionTag)
        {
            // verify the required parameter 'businessTransactionId' is set
            if (businessTransactionId == null)
                throw new ApiException(400, "Missing required parameter 'businessTransactionId' when calling BusinessTransactionApi->AddBusinessTransactionTag");
            // verify the required parameter 'businessTransactionTag' is set
            if (businessTransactionTag == null)
                throw new ApiException(400, "Missing required parameter 'businessTransactionTag' when calling BusinessTransactionApi->AddBusinessTransactionTag");

            var localVarPath = "/beta/businessTransaction/{businessTransactionId}/tag/{businessTransactionTag}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (businessTransactionId != null) localVarPathParams.Add("businessTransactionId", Configuration.ApiClient.ParameterToString(businessTransactionId)); // path parameter
            if (businessTransactionTag != null) localVarPathParams.Add("businessTransactionTag", Configuration.ApiClient.ParameterToString(businessTransactionTag)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddBusinessTransactionTag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a file for a businessTransaction. Deletes an existing businessTransaction file using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessTransactionId">Id of the businessTransaction to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns></returns>
        public void DeleteBusinessTransactionFile (int? businessTransactionId, int? fileId)
        {
             DeleteBusinessTransactionFileWithHttpInfo(businessTransactionId, fileId);
        }

        /// <summary>
        /// Delete a file for a businessTransaction. Deletes an existing businessTransaction file using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessTransactionId">Id of the businessTransaction to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteBusinessTransactionFileWithHttpInfo (int? businessTransactionId, int? fileId)
        {
            // verify the required parameter 'businessTransactionId' is set
            if (businessTransactionId == null)
                throw new ApiException(400, "Missing required parameter 'businessTransactionId' when calling BusinessTransactionApi->DeleteBusinessTransactionFile");
            // verify the required parameter 'fileId' is set
            if (fileId == null)
                throw new ApiException(400, "Missing required parameter 'fileId' when calling BusinessTransactionApi->DeleteBusinessTransactionFile");

            var localVarPath = "/beta/businessTransaction/{businessTransactionId}/file/{fileId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (businessTransactionId != null) localVarPathParams.Add("businessTransactionId", Configuration.ApiClient.ParameterToString(businessTransactionId)); // path parameter
            if (fileId != null) localVarPathParams.Add("fileId", Configuration.ApiClient.ParameterToString(fileId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteBusinessTransactionFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a file for a businessTransaction. Deletes an existing businessTransaction file using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessTransactionId">Id of the businessTransaction to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteBusinessTransactionFileAsync (int? businessTransactionId, int? fileId)
        {
             await DeleteBusinessTransactionFileAsyncWithHttpInfo(businessTransactionId, fileId);

        }

        /// <summary>
        /// Delete a file for a businessTransaction. Deletes an existing businessTransaction file using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessTransactionId">Id of the businessTransaction to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteBusinessTransactionFileAsyncWithHttpInfo (int? businessTransactionId, int? fileId)
        {
            // verify the required parameter 'businessTransactionId' is set
            if (businessTransactionId == null)
                throw new ApiException(400, "Missing required parameter 'businessTransactionId' when calling BusinessTransactionApi->DeleteBusinessTransactionFile");
            // verify the required parameter 'fileId' is set
            if (fileId == null)
                throw new ApiException(400, "Missing required parameter 'fileId' when calling BusinessTransactionApi->DeleteBusinessTransactionFile");

            var localVarPath = "/beta/businessTransaction/{businessTransactionId}/file/{fileId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (businessTransactionId != null) localVarPathParams.Add("businessTransactionId", Configuration.ApiClient.ParameterToString(businessTransactionId)); // path parameter
            if (fileId != null) localVarPathParams.Add("fileId", Configuration.ApiClient.ParameterToString(fileId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteBusinessTransactionFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a tag for a businessTransaction. Deletes an existing businessTransaction tag using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessTransactionId">Id of the businessTransaction to remove tag from</param>
        /// <param name="businessTransactionTag">The tag to delete</param>
        /// <returns></returns>
        public void DeleteBusinessTransactionTag (int? businessTransactionId, string businessTransactionTag)
        {
             DeleteBusinessTransactionTagWithHttpInfo(businessTransactionId, businessTransactionTag);
        }

        /// <summary>
        /// Delete a tag for a businessTransaction. Deletes an existing businessTransaction tag using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessTransactionId">Id of the businessTransaction to remove tag from</param>
        /// <param name="businessTransactionTag">The tag to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteBusinessTransactionTagWithHttpInfo (int? businessTransactionId, string businessTransactionTag)
        {
            // verify the required parameter 'businessTransactionId' is set
            if (businessTransactionId == null)
                throw new ApiException(400, "Missing required parameter 'businessTransactionId' when calling BusinessTransactionApi->DeleteBusinessTransactionTag");
            // verify the required parameter 'businessTransactionTag' is set
            if (businessTransactionTag == null)
                throw new ApiException(400, "Missing required parameter 'businessTransactionTag' when calling BusinessTransactionApi->DeleteBusinessTransactionTag");

            var localVarPath = "/beta/businessTransaction/{businessTransactionId}/tag/{businessTransactionTag}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (businessTransactionId != null) localVarPathParams.Add("businessTransactionId", Configuration.ApiClient.ParameterToString(businessTransactionId)); // path parameter
            if (businessTransactionTag != null) localVarPathParams.Add("businessTransactionTag", Configuration.ApiClient.ParameterToString(businessTransactionTag)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteBusinessTransactionTag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a tag for a businessTransaction. Deletes an existing businessTransaction tag using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessTransactionId">Id of the businessTransaction to remove tag from</param>
        /// <param name="businessTransactionTag">The tag to delete</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteBusinessTransactionTagAsync (int? businessTransactionId, string businessTransactionTag)
        {
             await DeleteBusinessTransactionTagAsyncWithHttpInfo(businessTransactionId, businessTransactionTag);

        }

        /// <summary>
        /// Delete a tag for a businessTransaction. Deletes an existing businessTransaction tag using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessTransactionId">Id of the businessTransaction to remove tag from</param>
        /// <param name="businessTransactionTag">The tag to delete</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteBusinessTransactionTagAsyncWithHttpInfo (int? businessTransactionId, string businessTransactionTag)
        {
            // verify the required parameter 'businessTransactionId' is set
            if (businessTransactionId == null)
                throw new ApiException(400, "Missing required parameter 'businessTransactionId' when calling BusinessTransactionApi->DeleteBusinessTransactionTag");
            // verify the required parameter 'businessTransactionTag' is set
            if (businessTransactionTag == null)
                throw new ApiException(400, "Missing required parameter 'businessTransactionTag' when calling BusinessTransactionApi->DeleteBusinessTransactionTag");

            var localVarPath = "/beta/businessTransaction/{businessTransactionId}/tag/{businessTransactionTag}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (businessTransactionId != null) localVarPathParams.Add("businessTransactionId", Configuration.ApiClient.ParameterToString(businessTransactionId)); // path parameter
            if (businessTransactionTag != null) localVarPathParams.Add("businessTransactionTag", Configuration.ApiClient.ParameterToString(businessTransactionTag)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteBusinessTransactionTag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Search businessTransactions by filter Returns the list of businessTransactions that match the given filter.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>List&lt;BusinessTransaction&gt;</returns>
        public List<BusinessTransaction> GetBusinessTransactionByFilter (string filter = null, int? page = null, int? limit = null, string sort = null)
        {
             ApiResponse<List<BusinessTransaction>> localVarResponse = GetBusinessTransactionByFilterWithHttpInfo(filter, page, limit, sort);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Search businessTransactions by filter Returns the list of businessTransactions that match the given filter.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>ApiResponse of List&lt;BusinessTransaction&gt;</returns>
        public ApiResponse< List<BusinessTransaction> > GetBusinessTransactionByFilterWithHttpInfo (string filter = null, int? page = null, int? limit = null, string sort = null)
        {

            var localVarPath = "/beta/businessTransaction/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (filter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (page != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBusinessTransactionByFilter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<BusinessTransaction>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<BusinessTransaction>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<BusinessTransaction>)));
        }

        /// <summary>
        /// Search businessTransactions by filter Returns the list of businessTransactions that match the given filter.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>Task of List&lt;BusinessTransaction&gt;</returns>
        public async System.Threading.Tasks.Task<List<BusinessTransaction>> GetBusinessTransactionByFilterAsync (string filter = null, int? page = null, int? limit = null, string sort = null)
        {
             ApiResponse<List<BusinessTransaction>> localVarResponse = await GetBusinessTransactionByFilterAsyncWithHttpInfo(filter, page, limit, sort);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Search businessTransactions by filter Returns the list of businessTransactions that match the given filter.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;BusinessTransaction&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<BusinessTransaction>>> GetBusinessTransactionByFilterAsyncWithHttpInfo (string filter = null, int? page = null, int? limit = null, string sort = null)
        {

            var localVarPath = "/beta/businessTransaction/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (filter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (page != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBusinessTransactionByFilter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<BusinessTransaction>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<BusinessTransaction>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<BusinessTransaction>)));
        }

        /// <summary>
        /// Get a businessTransaction by id Returns the businessTransaction identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessTransactionId">Id of the businessTransaction to be returned.</param>
        /// <returns>BusinessTransaction</returns>
        public BusinessTransaction GetBusinessTransactionById (int? businessTransactionId)
        {
             ApiResponse<BusinessTransaction> localVarResponse = GetBusinessTransactionByIdWithHttpInfo(businessTransactionId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a businessTransaction by id Returns the businessTransaction identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessTransactionId">Id of the businessTransaction to be returned.</param>
        /// <returns>ApiResponse of BusinessTransaction</returns>
        public ApiResponse< BusinessTransaction > GetBusinessTransactionByIdWithHttpInfo (int? businessTransactionId)
        {
            // verify the required parameter 'businessTransactionId' is set
            if (businessTransactionId == null)
                throw new ApiException(400, "Missing required parameter 'businessTransactionId' when calling BusinessTransactionApi->GetBusinessTransactionById");

            var localVarPath = "/beta/businessTransaction/{businessTransactionId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (businessTransactionId != null) localVarPathParams.Add("businessTransactionId", Configuration.ApiClient.ParameterToString(businessTransactionId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBusinessTransactionById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BusinessTransaction>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BusinessTransaction) Configuration.ApiClient.Deserialize(localVarResponse, typeof(BusinessTransaction)));
        }

        /// <summary>
        /// Get a businessTransaction by id Returns the businessTransaction identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessTransactionId">Id of the businessTransaction to be returned.</param>
        /// <returns>Task of BusinessTransaction</returns>
        public async System.Threading.Tasks.Task<BusinessTransaction> GetBusinessTransactionByIdAsync (int? businessTransactionId)
        {
             ApiResponse<BusinessTransaction> localVarResponse = await GetBusinessTransactionByIdAsyncWithHttpInfo(businessTransactionId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a businessTransaction by id Returns the businessTransaction identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessTransactionId">Id of the businessTransaction to be returned.</param>
        /// <returns>Task of ApiResponse (BusinessTransaction)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BusinessTransaction>> GetBusinessTransactionByIdAsyncWithHttpInfo (int? businessTransactionId)
        {
            // verify the required parameter 'businessTransactionId' is set
            if (businessTransactionId == null)
                throw new ApiException(400, "Missing required parameter 'businessTransactionId' when calling BusinessTransactionApi->GetBusinessTransactionById");

            var localVarPath = "/beta/businessTransaction/{businessTransactionId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (businessTransactionId != null) localVarPathParams.Add("businessTransactionId", Configuration.ApiClient.ParameterToString(businessTransactionId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBusinessTransactionById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BusinessTransaction>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BusinessTransaction) Configuration.ApiClient.Deserialize(localVarResponse, typeof(BusinessTransaction)));
        }

        /// <summary>
        /// Get the files for a businessTransaction. Get all existing businessTransaction files.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessTransactionId">Id of the businessTransaction to get files for</param>
        /// <returns></returns>
        public void GetBusinessTransactionFiles (int? businessTransactionId)
        {
             GetBusinessTransactionFilesWithHttpInfo(businessTransactionId);
        }

        /// <summary>
        /// Get the files for a businessTransaction. Get all existing businessTransaction files.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessTransactionId">Id of the businessTransaction to get files for</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GetBusinessTransactionFilesWithHttpInfo (int? businessTransactionId)
        {
            // verify the required parameter 'businessTransactionId' is set
            if (businessTransactionId == null)
                throw new ApiException(400, "Missing required parameter 'businessTransactionId' when calling BusinessTransactionApi->GetBusinessTransactionFiles");

            var localVarPath = "/beta/businessTransaction/{businessTransactionId}/file";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (businessTransactionId != null) localVarPathParams.Add("businessTransactionId", Configuration.ApiClient.ParameterToString(businessTransactionId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBusinessTransactionFiles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get the files for a businessTransaction. Get all existing businessTransaction files.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessTransactionId">Id of the businessTransaction to get files for</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetBusinessTransactionFilesAsync (int? businessTransactionId)
        {
             await GetBusinessTransactionFilesAsyncWithHttpInfo(businessTransactionId);

        }

        /// <summary>
        /// Get the files for a businessTransaction. Get all existing businessTransaction files.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessTransactionId">Id of the businessTransaction to get files for</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetBusinessTransactionFilesAsyncWithHttpInfo (int? businessTransactionId)
        {
            // verify the required parameter 'businessTransactionId' is set
            if (businessTransactionId == null)
                throw new ApiException(400, "Missing required parameter 'businessTransactionId' when calling BusinessTransactionApi->GetBusinessTransactionFiles");

            var localVarPath = "/beta/businessTransaction/{businessTransactionId}/file";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (businessTransactionId != null) localVarPathParams.Add("businessTransactionId", Configuration.ApiClient.ParameterToString(businessTransactionId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBusinessTransactionFiles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get the tags for a businessTransaction. Get all existing businessTransaction tags.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessTransactionId">Id of the businessTransaction to get tags for</param>
        /// <returns></returns>
        public void GetBusinessTransactionTags (int? businessTransactionId)
        {
             GetBusinessTransactionTagsWithHttpInfo(businessTransactionId);
        }

        /// <summary>
        /// Get the tags for a businessTransaction. Get all existing businessTransaction tags.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessTransactionId">Id of the businessTransaction to get tags for</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GetBusinessTransactionTagsWithHttpInfo (int? businessTransactionId)
        {
            // verify the required parameter 'businessTransactionId' is set
            if (businessTransactionId == null)
                throw new ApiException(400, "Missing required parameter 'businessTransactionId' when calling BusinessTransactionApi->GetBusinessTransactionTags");

            var localVarPath = "/beta/businessTransaction/{businessTransactionId}/tag";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (businessTransactionId != null) localVarPathParams.Add("businessTransactionId", Configuration.ApiClient.ParameterToString(businessTransactionId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBusinessTransactionTags", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get the tags for a businessTransaction. Get all existing businessTransaction tags.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessTransactionId">Id of the businessTransaction to get tags for</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetBusinessTransactionTagsAsync (int? businessTransactionId)
        {
             await GetBusinessTransactionTagsAsyncWithHttpInfo(businessTransactionId);

        }

        /// <summary>
        /// Get the tags for a businessTransaction. Get all existing businessTransaction tags.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessTransactionId">Id of the businessTransaction to get tags for</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetBusinessTransactionTagsAsyncWithHttpInfo (int? businessTransactionId)
        {
            // verify the required parameter 'businessTransactionId' is set
            if (businessTransactionId == null)
                throw new ApiException(400, "Missing required parameter 'businessTransactionId' when calling BusinessTransactionApi->GetBusinessTransactionTags");

            var localVarPath = "/beta/businessTransaction/{businessTransactionId}/tag";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (businessTransactionId != null) localVarPathParams.Add("businessTransactionId", Configuration.ApiClient.ParameterToString(businessTransactionId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBusinessTransactionTags", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get a duplicated a businessTransaction by id Returns a duplicated businessTransaction identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessTransactionId">Id of the businessTransaction to be duplicated.</param>
        /// <returns>BusinessTransaction</returns>
        public BusinessTransaction GetDuplicateBusinessTransactionById (int? businessTransactionId)
        {
             ApiResponse<BusinessTransaction> localVarResponse = GetDuplicateBusinessTransactionByIdWithHttpInfo(businessTransactionId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a duplicated a businessTransaction by id Returns a duplicated businessTransaction identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessTransactionId">Id of the businessTransaction to be duplicated.</param>
        /// <returns>ApiResponse of BusinessTransaction</returns>
        public ApiResponse< BusinessTransaction > GetDuplicateBusinessTransactionByIdWithHttpInfo (int? businessTransactionId)
        {
            // verify the required parameter 'businessTransactionId' is set
            if (businessTransactionId == null)
                throw new ApiException(400, "Missing required parameter 'businessTransactionId' when calling BusinessTransactionApi->GetDuplicateBusinessTransactionById");

            var localVarPath = "/beta/businessTransaction/duplicate/{businessTransactionId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (businessTransactionId != null) localVarPathParams.Add("businessTransactionId", Configuration.ApiClient.ParameterToString(businessTransactionId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDuplicateBusinessTransactionById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BusinessTransaction>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BusinessTransaction) Configuration.ApiClient.Deserialize(localVarResponse, typeof(BusinessTransaction)));
        }

        /// <summary>
        /// Get a duplicated a businessTransaction by id Returns a duplicated businessTransaction identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessTransactionId">Id of the businessTransaction to be duplicated.</param>
        /// <returns>Task of BusinessTransaction</returns>
        public async System.Threading.Tasks.Task<BusinessTransaction> GetDuplicateBusinessTransactionByIdAsync (int? businessTransactionId)
        {
             ApiResponse<BusinessTransaction> localVarResponse = await GetDuplicateBusinessTransactionByIdAsyncWithHttpInfo(businessTransactionId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a duplicated a businessTransaction by id Returns a duplicated businessTransaction identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessTransactionId">Id of the businessTransaction to be duplicated.</param>
        /// <returns>Task of ApiResponse (BusinessTransaction)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BusinessTransaction>> GetDuplicateBusinessTransactionByIdAsyncWithHttpInfo (int? businessTransactionId)
        {
            // verify the required parameter 'businessTransactionId' is set
            if (businessTransactionId == null)
                throw new ApiException(400, "Missing required parameter 'businessTransactionId' when calling BusinessTransactionApi->GetDuplicateBusinessTransactionById");

            var localVarPath = "/beta/businessTransaction/duplicate/{businessTransactionId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (businessTransactionId != null) localVarPathParams.Add("businessTransactionId", Configuration.ApiClient.ParameterToString(businessTransactionId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDuplicateBusinessTransactionById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BusinessTransaction>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BusinessTransaction) Configuration.ApiClient.Deserialize(localVarResponse, typeof(BusinessTransaction)));
        }

        /// <summary>
        /// Update a businessTransaction Updates an existing businessTransaction using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">BusinessTransaction to be updated.</param>
        /// <returns></returns>
        public void UpdateBusinessTransaction (BusinessTransaction body)
        {
             UpdateBusinessTransactionWithHttpInfo(body);
        }

        /// <summary>
        /// Update a businessTransaction Updates an existing businessTransaction using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">BusinessTransaction to be updated.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateBusinessTransactionWithHttpInfo (BusinessTransaction body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling BusinessTransactionApi->UpdateBusinessTransaction");

            var localVarPath = "/beta/businessTransaction";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateBusinessTransaction", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update a businessTransaction Updates an existing businessTransaction using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">BusinessTransaction to be updated.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateBusinessTransactionAsync (BusinessTransaction body)
        {
             await UpdateBusinessTransactionAsyncWithHttpInfo(body);

        }

        /// <summary>
        /// Update a businessTransaction Updates an existing businessTransaction using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">BusinessTransaction to be updated.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateBusinessTransactionAsyncWithHttpInfo (BusinessTransaction body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling BusinessTransactionApi->UpdateBusinessTransaction");

            var localVarPath = "/beta/businessTransaction";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateBusinessTransaction", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update a businessTransaction custom fields Updates an existing businessTransaction custom fields using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">BusinessTransaction to be updated.</param>
        /// <returns></returns>
        public void UpdateBusinessTransactionCustomFields (BusinessTransaction body)
        {
             UpdateBusinessTransactionCustomFieldsWithHttpInfo(body);
        }

        /// <summary>
        /// Update a businessTransaction custom fields Updates an existing businessTransaction custom fields using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">BusinessTransaction to be updated.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateBusinessTransactionCustomFieldsWithHttpInfo (BusinessTransaction body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling BusinessTransactionApi->UpdateBusinessTransactionCustomFields");

            var localVarPath = "/beta/businessTransaction/customFields";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateBusinessTransactionCustomFields", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update a businessTransaction custom fields Updates an existing businessTransaction custom fields using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">BusinessTransaction to be updated.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateBusinessTransactionCustomFieldsAsync (BusinessTransaction body)
        {
             await UpdateBusinessTransactionCustomFieldsAsyncWithHttpInfo(body);

        }

        /// <summary>
        /// Update a businessTransaction custom fields Updates an existing businessTransaction custom fields using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">BusinessTransaction to be updated.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateBusinessTransactionCustomFieldsAsyncWithHttpInfo (BusinessTransaction body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling BusinessTransactionApi->UpdateBusinessTransactionCustomFields");

            var localVarPath = "/beta/businessTransaction/customFields";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateBusinessTransactionCustomFields", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

    }
}
