/* 
 * Infoplus API
 *
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Infoplus.Client;
using Infoplus.Model;

namespace Infoplus.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICartLocationApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Add new audit for a cartLocation
        /// </summary>
        /// <remarks>
        /// Adds an audit to an existing cartLocation.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cartLocationId">Id of the cartLocation to add an audit to</param>
        /// <param name="cartLocationAudit">The audit to add</param>
        /// <returns></returns>
        void AddCartLocationAudit (int? cartLocationId, string cartLocationAudit);

        /// <summary>
        /// Add new audit for a cartLocation
        /// </summary>
        /// <remarks>
        /// Adds an audit to an existing cartLocation.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cartLocationId">Id of the cartLocation to add an audit to</param>
        /// <param name="cartLocationAudit">The audit to add</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddCartLocationAuditWithHttpInfo (int? cartLocationId, string cartLocationAudit);
        /// <summary>
        /// Attach a file to a cartLocation
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing cartLocation.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cartLocationId">Id of the cartLocation to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns></returns>
        void AddCartLocationFile (int? cartLocationId, string fileName);

        /// <summary>
        /// Attach a file to a cartLocation
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing cartLocation.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cartLocationId">Id of the cartLocation to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddCartLocationFileWithHttpInfo (int? cartLocationId, string fileName);
        /// <summary>
        /// Attach a file to a cartLocation by URL.
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing cartLocation by URL.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="cartLocationId">Id of the cartLocation to add an file to</param>
        /// <returns></returns>
        void AddCartLocationFileByURL (RecordFile body, int? cartLocationId);

        /// <summary>
        /// Attach a file to a cartLocation by URL.
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing cartLocation by URL.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="cartLocationId">Id of the cartLocation to add an file to</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddCartLocationFileByURLWithHttpInfo (RecordFile body, int? cartLocationId);
        /// <summary>
        /// Add new tags for a cartLocation.
        /// </summary>
        /// <remarks>
        /// Adds a tag to an existing cartLocation.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cartLocationId">Id of the cartLocation to add a tag to</param>
        /// <param name="cartLocationTag">The tag to add</param>
        /// <returns></returns>
        void AddCartLocationTag (int? cartLocationId, string cartLocationTag);

        /// <summary>
        /// Add new tags for a cartLocation.
        /// </summary>
        /// <remarks>
        /// Adds a tag to an existing cartLocation.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cartLocationId">Id of the cartLocation to add a tag to</param>
        /// <param name="cartLocationTag">The tag to add</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddCartLocationTagWithHttpInfo (int? cartLocationId, string cartLocationTag);
        /// <summary>
        /// Delete a file for a cartLocation.
        /// </summary>
        /// <remarks>
        /// Deletes an existing cartLocation file using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cartLocationId">Id of the cartLocation to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns></returns>
        void DeleteCartLocationFile (int? cartLocationId, int? fileId);

        /// <summary>
        /// Delete a file for a cartLocation.
        /// </summary>
        /// <remarks>
        /// Deletes an existing cartLocation file using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cartLocationId">Id of the cartLocation to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteCartLocationFileWithHttpInfo (int? cartLocationId, int? fileId);
        /// <summary>
        /// Delete a tag for a cartLocation.
        /// </summary>
        /// <remarks>
        /// Deletes an existing cartLocation tag using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cartLocationId">Id of the cartLocation to remove tag from</param>
        /// <param name="cartLocationTag">The tag to delete</param>
        /// <returns></returns>
        void DeleteCartLocationTag (int? cartLocationId, string cartLocationTag);

        /// <summary>
        /// Delete a tag for a cartLocation.
        /// </summary>
        /// <remarks>
        /// Deletes an existing cartLocation tag using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cartLocationId">Id of the cartLocation to remove tag from</param>
        /// <param name="cartLocationTag">The tag to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteCartLocationTagWithHttpInfo (int? cartLocationId, string cartLocationTag);
        /// <summary>
        /// Search cartLocations by filter
        /// </summary>
        /// <remarks>
        /// Returns the list of cartLocations that match the given filter.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>List&lt;CartLocation&gt;</returns>
        List<CartLocation> GetCartLocationByFilter (string filter = null, int? page = null, int? limit = null, string sort = null);

        /// <summary>
        /// Search cartLocations by filter
        /// </summary>
        /// <remarks>
        /// Returns the list of cartLocations that match the given filter.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>ApiResponse of List&lt;CartLocation&gt;</returns>
        ApiResponse<List<CartLocation>> GetCartLocationByFilterWithHttpInfo (string filter = null, int? page = null, int? limit = null, string sort = null);
        /// <summary>
        /// Get a cartLocation by id
        /// </summary>
        /// <remarks>
        /// Returns the cartLocation identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cartLocationId">Id of the cartLocation to be returned.</param>
        /// <returns>CartLocation</returns>
        CartLocation GetCartLocationById (int? cartLocationId);

        /// <summary>
        /// Get a cartLocation by id
        /// </summary>
        /// <remarks>
        /// Returns the cartLocation identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cartLocationId">Id of the cartLocation to be returned.</param>
        /// <returns>ApiResponse of CartLocation</returns>
        ApiResponse<CartLocation> GetCartLocationByIdWithHttpInfo (int? cartLocationId);
        /// <summary>
        /// Get the files for a cartLocation.
        /// </summary>
        /// <remarks>
        /// Get all existing cartLocation files.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cartLocationId">Id of the cartLocation to get files for</param>
        /// <returns></returns>
        void GetCartLocationFiles (int? cartLocationId);

        /// <summary>
        /// Get the files for a cartLocation.
        /// </summary>
        /// <remarks>
        /// Get all existing cartLocation files.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cartLocationId">Id of the cartLocation to get files for</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetCartLocationFilesWithHttpInfo (int? cartLocationId);
        /// <summary>
        /// Get the tags for a cartLocation.
        /// </summary>
        /// <remarks>
        /// Get all existing cartLocation tags.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cartLocationId">Id of the cartLocation to get tags for</param>
        /// <returns></returns>
        void GetCartLocationTags (int? cartLocationId);

        /// <summary>
        /// Get the tags for a cartLocation.
        /// </summary>
        /// <remarks>
        /// Get all existing cartLocation tags.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cartLocationId">Id of the cartLocation to get tags for</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetCartLocationTagsWithHttpInfo (int? cartLocationId);
        /// <summary>
        /// Get a duplicated a cartLocation by id
        /// </summary>
        /// <remarks>
        /// Returns a duplicated cartLocation identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cartLocationId">Id of the cartLocation to be duplicated.</param>
        /// <returns>CartLocation</returns>
        CartLocation GetDuplicateCartLocationById (int? cartLocationId);

        /// <summary>
        /// Get a duplicated a cartLocation by id
        /// </summary>
        /// <remarks>
        /// Returns a duplicated cartLocation identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cartLocationId">Id of the cartLocation to be duplicated.</param>
        /// <returns>ApiResponse of CartLocation</returns>
        ApiResponse<CartLocation> GetDuplicateCartLocationByIdWithHttpInfo (int? cartLocationId);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Add new audit for a cartLocation
        /// </summary>
        /// <remarks>
        /// Adds an audit to an existing cartLocation.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cartLocationId">Id of the cartLocation to add an audit to</param>
        /// <param name="cartLocationAudit">The audit to add</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddCartLocationAuditAsync (int? cartLocationId, string cartLocationAudit);

        /// <summary>
        /// Add new audit for a cartLocation
        /// </summary>
        /// <remarks>
        /// Adds an audit to an existing cartLocation.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cartLocationId">Id of the cartLocation to add an audit to</param>
        /// <param name="cartLocationAudit">The audit to add</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddCartLocationAuditAsyncWithHttpInfo (int? cartLocationId, string cartLocationAudit);
        /// <summary>
        /// Attach a file to a cartLocation
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing cartLocation.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cartLocationId">Id of the cartLocation to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddCartLocationFileAsync (int? cartLocationId, string fileName);

        /// <summary>
        /// Attach a file to a cartLocation
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing cartLocation.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cartLocationId">Id of the cartLocation to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddCartLocationFileAsyncWithHttpInfo (int? cartLocationId, string fileName);
        /// <summary>
        /// Attach a file to a cartLocation by URL.
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing cartLocation by URL.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="cartLocationId">Id of the cartLocation to add an file to</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddCartLocationFileByURLAsync (RecordFile body, int? cartLocationId);

        /// <summary>
        /// Attach a file to a cartLocation by URL.
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing cartLocation by URL.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="cartLocationId">Id of the cartLocation to add an file to</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddCartLocationFileByURLAsyncWithHttpInfo (RecordFile body, int? cartLocationId);
        /// <summary>
        /// Add new tags for a cartLocation.
        /// </summary>
        /// <remarks>
        /// Adds a tag to an existing cartLocation.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cartLocationId">Id of the cartLocation to add a tag to</param>
        /// <param name="cartLocationTag">The tag to add</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddCartLocationTagAsync (int? cartLocationId, string cartLocationTag);

        /// <summary>
        /// Add new tags for a cartLocation.
        /// </summary>
        /// <remarks>
        /// Adds a tag to an existing cartLocation.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cartLocationId">Id of the cartLocation to add a tag to</param>
        /// <param name="cartLocationTag">The tag to add</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddCartLocationTagAsyncWithHttpInfo (int? cartLocationId, string cartLocationTag);
        /// <summary>
        /// Delete a file for a cartLocation.
        /// </summary>
        /// <remarks>
        /// Deletes an existing cartLocation file using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cartLocationId">Id of the cartLocation to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteCartLocationFileAsync (int? cartLocationId, int? fileId);

        /// <summary>
        /// Delete a file for a cartLocation.
        /// </summary>
        /// <remarks>
        /// Deletes an existing cartLocation file using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cartLocationId">Id of the cartLocation to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteCartLocationFileAsyncWithHttpInfo (int? cartLocationId, int? fileId);
        /// <summary>
        /// Delete a tag for a cartLocation.
        /// </summary>
        /// <remarks>
        /// Deletes an existing cartLocation tag using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cartLocationId">Id of the cartLocation to remove tag from</param>
        /// <param name="cartLocationTag">The tag to delete</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteCartLocationTagAsync (int? cartLocationId, string cartLocationTag);

        /// <summary>
        /// Delete a tag for a cartLocation.
        /// </summary>
        /// <remarks>
        /// Deletes an existing cartLocation tag using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cartLocationId">Id of the cartLocation to remove tag from</param>
        /// <param name="cartLocationTag">The tag to delete</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteCartLocationTagAsyncWithHttpInfo (int? cartLocationId, string cartLocationTag);
        /// <summary>
        /// Search cartLocations by filter
        /// </summary>
        /// <remarks>
        /// Returns the list of cartLocations that match the given filter.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>Task of List&lt;CartLocation&gt;</returns>
        System.Threading.Tasks.Task<List<CartLocation>> GetCartLocationByFilterAsync (string filter = null, int? page = null, int? limit = null, string sort = null);

        /// <summary>
        /// Search cartLocations by filter
        /// </summary>
        /// <remarks>
        /// Returns the list of cartLocations that match the given filter.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;CartLocation&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<CartLocation>>> GetCartLocationByFilterAsyncWithHttpInfo (string filter = null, int? page = null, int? limit = null, string sort = null);
        /// <summary>
        /// Get a cartLocation by id
        /// </summary>
        /// <remarks>
        /// Returns the cartLocation identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cartLocationId">Id of the cartLocation to be returned.</param>
        /// <returns>Task of CartLocation</returns>
        System.Threading.Tasks.Task<CartLocation> GetCartLocationByIdAsync (int? cartLocationId);

        /// <summary>
        /// Get a cartLocation by id
        /// </summary>
        /// <remarks>
        /// Returns the cartLocation identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cartLocationId">Id of the cartLocation to be returned.</param>
        /// <returns>Task of ApiResponse (CartLocation)</returns>
        System.Threading.Tasks.Task<ApiResponse<CartLocation>> GetCartLocationByIdAsyncWithHttpInfo (int? cartLocationId);
        /// <summary>
        /// Get the files for a cartLocation.
        /// </summary>
        /// <remarks>
        /// Get all existing cartLocation files.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cartLocationId">Id of the cartLocation to get files for</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetCartLocationFilesAsync (int? cartLocationId);

        /// <summary>
        /// Get the files for a cartLocation.
        /// </summary>
        /// <remarks>
        /// Get all existing cartLocation files.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cartLocationId">Id of the cartLocation to get files for</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetCartLocationFilesAsyncWithHttpInfo (int? cartLocationId);
        /// <summary>
        /// Get the tags for a cartLocation.
        /// </summary>
        /// <remarks>
        /// Get all existing cartLocation tags.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cartLocationId">Id of the cartLocation to get tags for</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetCartLocationTagsAsync (int? cartLocationId);

        /// <summary>
        /// Get the tags for a cartLocation.
        /// </summary>
        /// <remarks>
        /// Get all existing cartLocation tags.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cartLocationId">Id of the cartLocation to get tags for</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetCartLocationTagsAsyncWithHttpInfo (int? cartLocationId);
        /// <summary>
        /// Get a duplicated a cartLocation by id
        /// </summary>
        /// <remarks>
        /// Returns a duplicated cartLocation identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cartLocationId">Id of the cartLocation to be duplicated.</param>
        /// <returns>Task of CartLocation</returns>
        System.Threading.Tasks.Task<CartLocation> GetDuplicateCartLocationByIdAsync (int? cartLocationId);

        /// <summary>
        /// Get a duplicated a cartLocation by id
        /// </summary>
        /// <remarks>
        /// Returns a duplicated cartLocation identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cartLocationId">Id of the cartLocation to be duplicated.</param>
        /// <returns>Task of ApiResponse (CartLocation)</returns>
        System.Threading.Tasks.Task<ApiResponse<CartLocation>> GetDuplicateCartLocationByIdAsyncWithHttpInfo (int? cartLocationId);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class CartLocationApi : ICartLocationApi
    {
        private Infoplus.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="CartLocationApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CartLocationApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = Infoplus.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CartLocationApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public CartLocationApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Infoplus.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Infoplus.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Add new audit for a cartLocation Adds an audit to an existing cartLocation.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cartLocationId">Id of the cartLocation to add an audit to</param>
        /// <param name="cartLocationAudit">The audit to add</param>
        /// <returns></returns>
        public void AddCartLocationAudit (int? cartLocationId, string cartLocationAudit)
        {
             AddCartLocationAuditWithHttpInfo(cartLocationId, cartLocationAudit);
        }

        /// <summary>
        /// Add new audit for a cartLocation Adds an audit to an existing cartLocation.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cartLocationId">Id of the cartLocation to add an audit to</param>
        /// <param name="cartLocationAudit">The audit to add</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AddCartLocationAuditWithHttpInfo (int? cartLocationId, string cartLocationAudit)
        {
            // verify the required parameter 'cartLocationId' is set
            if (cartLocationId == null)
                throw new ApiException(400, "Missing required parameter 'cartLocationId' when calling CartLocationApi->AddCartLocationAudit");
            // verify the required parameter 'cartLocationAudit' is set
            if (cartLocationAudit == null)
                throw new ApiException(400, "Missing required parameter 'cartLocationAudit' when calling CartLocationApi->AddCartLocationAudit");

            var localVarPath = "/beta/cartLocation/{cartLocationId}/audit/{cartLocationAudit}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (cartLocationId != null) localVarPathParams.Add("cartLocationId", Configuration.ApiClient.ParameterToString(cartLocationId)); // path parameter
            if (cartLocationAudit != null) localVarPathParams.Add("cartLocationAudit", Configuration.ApiClient.ParameterToString(cartLocationAudit)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddCartLocationAudit", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Add new audit for a cartLocation Adds an audit to an existing cartLocation.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cartLocationId">Id of the cartLocation to add an audit to</param>
        /// <param name="cartLocationAudit">The audit to add</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddCartLocationAuditAsync (int? cartLocationId, string cartLocationAudit)
        {
             await AddCartLocationAuditAsyncWithHttpInfo(cartLocationId, cartLocationAudit);

        }

        /// <summary>
        /// Add new audit for a cartLocation Adds an audit to an existing cartLocation.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cartLocationId">Id of the cartLocation to add an audit to</param>
        /// <param name="cartLocationAudit">The audit to add</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddCartLocationAuditAsyncWithHttpInfo (int? cartLocationId, string cartLocationAudit)
        {
            // verify the required parameter 'cartLocationId' is set
            if (cartLocationId == null)
                throw new ApiException(400, "Missing required parameter 'cartLocationId' when calling CartLocationApi->AddCartLocationAudit");
            // verify the required parameter 'cartLocationAudit' is set
            if (cartLocationAudit == null)
                throw new ApiException(400, "Missing required parameter 'cartLocationAudit' when calling CartLocationApi->AddCartLocationAudit");

            var localVarPath = "/beta/cartLocation/{cartLocationId}/audit/{cartLocationAudit}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (cartLocationId != null) localVarPathParams.Add("cartLocationId", Configuration.ApiClient.ParameterToString(cartLocationId)); // path parameter
            if (cartLocationAudit != null) localVarPathParams.Add("cartLocationAudit", Configuration.ApiClient.ParameterToString(cartLocationAudit)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddCartLocationAudit", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Attach a file to a cartLocation Adds a file to an existing cartLocation.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cartLocationId">Id of the cartLocation to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns></returns>
        public void AddCartLocationFile (int? cartLocationId, string fileName)
        {
             AddCartLocationFileWithHttpInfo(cartLocationId, fileName);
        }

        /// <summary>
        /// Attach a file to a cartLocation Adds a file to an existing cartLocation.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cartLocationId">Id of the cartLocation to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AddCartLocationFileWithHttpInfo (int? cartLocationId, string fileName)
        {
            // verify the required parameter 'cartLocationId' is set
            if (cartLocationId == null)
                throw new ApiException(400, "Missing required parameter 'cartLocationId' when calling CartLocationApi->AddCartLocationFile");
            // verify the required parameter 'fileName' is set
            if (fileName == null)
                throw new ApiException(400, "Missing required parameter 'fileName' when calling CartLocationApi->AddCartLocationFile");

            var localVarPath = "/beta/cartLocation/{cartLocationId}/file/{fileName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (cartLocationId != null) localVarPathParams.Add("cartLocationId", Configuration.ApiClient.ParameterToString(cartLocationId)); // path parameter
            if (fileName != null) localVarPathParams.Add("fileName", Configuration.ApiClient.ParameterToString(fileName)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddCartLocationFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Attach a file to a cartLocation Adds a file to an existing cartLocation.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cartLocationId">Id of the cartLocation to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddCartLocationFileAsync (int? cartLocationId, string fileName)
        {
             await AddCartLocationFileAsyncWithHttpInfo(cartLocationId, fileName);

        }

        /// <summary>
        /// Attach a file to a cartLocation Adds a file to an existing cartLocation.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cartLocationId">Id of the cartLocation to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddCartLocationFileAsyncWithHttpInfo (int? cartLocationId, string fileName)
        {
            // verify the required parameter 'cartLocationId' is set
            if (cartLocationId == null)
                throw new ApiException(400, "Missing required parameter 'cartLocationId' when calling CartLocationApi->AddCartLocationFile");
            // verify the required parameter 'fileName' is set
            if (fileName == null)
                throw new ApiException(400, "Missing required parameter 'fileName' when calling CartLocationApi->AddCartLocationFile");

            var localVarPath = "/beta/cartLocation/{cartLocationId}/file/{fileName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (cartLocationId != null) localVarPathParams.Add("cartLocationId", Configuration.ApiClient.ParameterToString(cartLocationId)); // path parameter
            if (fileName != null) localVarPathParams.Add("fileName", Configuration.ApiClient.ParameterToString(fileName)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddCartLocationFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Attach a file to a cartLocation by URL. Adds a file to an existing cartLocation by URL.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="cartLocationId">Id of the cartLocation to add an file to</param>
        /// <returns></returns>
        public void AddCartLocationFileByURL (RecordFile body, int? cartLocationId)
        {
             AddCartLocationFileByURLWithHttpInfo(body, cartLocationId);
        }

        /// <summary>
        /// Attach a file to a cartLocation by URL. Adds a file to an existing cartLocation by URL.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="cartLocationId">Id of the cartLocation to add an file to</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AddCartLocationFileByURLWithHttpInfo (RecordFile body, int? cartLocationId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling CartLocationApi->AddCartLocationFileByURL");
            // verify the required parameter 'cartLocationId' is set
            if (cartLocationId == null)
                throw new ApiException(400, "Missing required parameter 'cartLocationId' when calling CartLocationApi->AddCartLocationFileByURL");

            var localVarPath = "/beta/cartLocation/{cartLocationId}/file";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (cartLocationId != null) localVarPathParams.Add("cartLocationId", Configuration.ApiClient.ParameterToString(cartLocationId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddCartLocationFileByURL", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Attach a file to a cartLocation by URL. Adds a file to an existing cartLocation by URL.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="cartLocationId">Id of the cartLocation to add an file to</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddCartLocationFileByURLAsync (RecordFile body, int? cartLocationId)
        {
             await AddCartLocationFileByURLAsyncWithHttpInfo(body, cartLocationId);

        }

        /// <summary>
        /// Attach a file to a cartLocation by URL. Adds a file to an existing cartLocation by URL.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="cartLocationId">Id of the cartLocation to add an file to</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddCartLocationFileByURLAsyncWithHttpInfo (RecordFile body, int? cartLocationId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling CartLocationApi->AddCartLocationFileByURL");
            // verify the required parameter 'cartLocationId' is set
            if (cartLocationId == null)
                throw new ApiException(400, "Missing required parameter 'cartLocationId' when calling CartLocationApi->AddCartLocationFileByURL");

            var localVarPath = "/beta/cartLocation/{cartLocationId}/file";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (cartLocationId != null) localVarPathParams.Add("cartLocationId", Configuration.ApiClient.ParameterToString(cartLocationId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddCartLocationFileByURL", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Add new tags for a cartLocation. Adds a tag to an existing cartLocation.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cartLocationId">Id of the cartLocation to add a tag to</param>
        /// <param name="cartLocationTag">The tag to add</param>
        /// <returns></returns>
        public void AddCartLocationTag (int? cartLocationId, string cartLocationTag)
        {
             AddCartLocationTagWithHttpInfo(cartLocationId, cartLocationTag);
        }

        /// <summary>
        /// Add new tags for a cartLocation. Adds a tag to an existing cartLocation.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cartLocationId">Id of the cartLocation to add a tag to</param>
        /// <param name="cartLocationTag">The tag to add</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AddCartLocationTagWithHttpInfo (int? cartLocationId, string cartLocationTag)
        {
            // verify the required parameter 'cartLocationId' is set
            if (cartLocationId == null)
                throw new ApiException(400, "Missing required parameter 'cartLocationId' when calling CartLocationApi->AddCartLocationTag");
            // verify the required parameter 'cartLocationTag' is set
            if (cartLocationTag == null)
                throw new ApiException(400, "Missing required parameter 'cartLocationTag' when calling CartLocationApi->AddCartLocationTag");

            var localVarPath = "/beta/cartLocation/{cartLocationId}/tag/{cartLocationTag}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (cartLocationId != null) localVarPathParams.Add("cartLocationId", Configuration.ApiClient.ParameterToString(cartLocationId)); // path parameter
            if (cartLocationTag != null) localVarPathParams.Add("cartLocationTag", Configuration.ApiClient.ParameterToString(cartLocationTag)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddCartLocationTag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Add new tags for a cartLocation. Adds a tag to an existing cartLocation.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cartLocationId">Id of the cartLocation to add a tag to</param>
        /// <param name="cartLocationTag">The tag to add</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddCartLocationTagAsync (int? cartLocationId, string cartLocationTag)
        {
             await AddCartLocationTagAsyncWithHttpInfo(cartLocationId, cartLocationTag);

        }

        /// <summary>
        /// Add new tags for a cartLocation. Adds a tag to an existing cartLocation.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cartLocationId">Id of the cartLocation to add a tag to</param>
        /// <param name="cartLocationTag">The tag to add</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddCartLocationTagAsyncWithHttpInfo (int? cartLocationId, string cartLocationTag)
        {
            // verify the required parameter 'cartLocationId' is set
            if (cartLocationId == null)
                throw new ApiException(400, "Missing required parameter 'cartLocationId' when calling CartLocationApi->AddCartLocationTag");
            // verify the required parameter 'cartLocationTag' is set
            if (cartLocationTag == null)
                throw new ApiException(400, "Missing required parameter 'cartLocationTag' when calling CartLocationApi->AddCartLocationTag");

            var localVarPath = "/beta/cartLocation/{cartLocationId}/tag/{cartLocationTag}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (cartLocationId != null) localVarPathParams.Add("cartLocationId", Configuration.ApiClient.ParameterToString(cartLocationId)); // path parameter
            if (cartLocationTag != null) localVarPathParams.Add("cartLocationTag", Configuration.ApiClient.ParameterToString(cartLocationTag)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddCartLocationTag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a file for a cartLocation. Deletes an existing cartLocation file using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cartLocationId">Id of the cartLocation to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns></returns>
        public void DeleteCartLocationFile (int? cartLocationId, int? fileId)
        {
             DeleteCartLocationFileWithHttpInfo(cartLocationId, fileId);
        }

        /// <summary>
        /// Delete a file for a cartLocation. Deletes an existing cartLocation file using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cartLocationId">Id of the cartLocation to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteCartLocationFileWithHttpInfo (int? cartLocationId, int? fileId)
        {
            // verify the required parameter 'cartLocationId' is set
            if (cartLocationId == null)
                throw new ApiException(400, "Missing required parameter 'cartLocationId' when calling CartLocationApi->DeleteCartLocationFile");
            // verify the required parameter 'fileId' is set
            if (fileId == null)
                throw new ApiException(400, "Missing required parameter 'fileId' when calling CartLocationApi->DeleteCartLocationFile");

            var localVarPath = "/beta/cartLocation/{cartLocationId}/file/{fileId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (cartLocationId != null) localVarPathParams.Add("cartLocationId", Configuration.ApiClient.ParameterToString(cartLocationId)); // path parameter
            if (fileId != null) localVarPathParams.Add("fileId", Configuration.ApiClient.ParameterToString(fileId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteCartLocationFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a file for a cartLocation. Deletes an existing cartLocation file using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cartLocationId">Id of the cartLocation to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteCartLocationFileAsync (int? cartLocationId, int? fileId)
        {
             await DeleteCartLocationFileAsyncWithHttpInfo(cartLocationId, fileId);

        }

        /// <summary>
        /// Delete a file for a cartLocation. Deletes an existing cartLocation file using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cartLocationId">Id of the cartLocation to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteCartLocationFileAsyncWithHttpInfo (int? cartLocationId, int? fileId)
        {
            // verify the required parameter 'cartLocationId' is set
            if (cartLocationId == null)
                throw new ApiException(400, "Missing required parameter 'cartLocationId' when calling CartLocationApi->DeleteCartLocationFile");
            // verify the required parameter 'fileId' is set
            if (fileId == null)
                throw new ApiException(400, "Missing required parameter 'fileId' when calling CartLocationApi->DeleteCartLocationFile");

            var localVarPath = "/beta/cartLocation/{cartLocationId}/file/{fileId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (cartLocationId != null) localVarPathParams.Add("cartLocationId", Configuration.ApiClient.ParameterToString(cartLocationId)); // path parameter
            if (fileId != null) localVarPathParams.Add("fileId", Configuration.ApiClient.ParameterToString(fileId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteCartLocationFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a tag for a cartLocation. Deletes an existing cartLocation tag using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cartLocationId">Id of the cartLocation to remove tag from</param>
        /// <param name="cartLocationTag">The tag to delete</param>
        /// <returns></returns>
        public void DeleteCartLocationTag (int? cartLocationId, string cartLocationTag)
        {
             DeleteCartLocationTagWithHttpInfo(cartLocationId, cartLocationTag);
        }

        /// <summary>
        /// Delete a tag for a cartLocation. Deletes an existing cartLocation tag using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cartLocationId">Id of the cartLocation to remove tag from</param>
        /// <param name="cartLocationTag">The tag to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteCartLocationTagWithHttpInfo (int? cartLocationId, string cartLocationTag)
        {
            // verify the required parameter 'cartLocationId' is set
            if (cartLocationId == null)
                throw new ApiException(400, "Missing required parameter 'cartLocationId' when calling CartLocationApi->DeleteCartLocationTag");
            // verify the required parameter 'cartLocationTag' is set
            if (cartLocationTag == null)
                throw new ApiException(400, "Missing required parameter 'cartLocationTag' when calling CartLocationApi->DeleteCartLocationTag");

            var localVarPath = "/beta/cartLocation/{cartLocationId}/tag/{cartLocationTag}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (cartLocationId != null) localVarPathParams.Add("cartLocationId", Configuration.ApiClient.ParameterToString(cartLocationId)); // path parameter
            if (cartLocationTag != null) localVarPathParams.Add("cartLocationTag", Configuration.ApiClient.ParameterToString(cartLocationTag)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteCartLocationTag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a tag for a cartLocation. Deletes an existing cartLocation tag using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cartLocationId">Id of the cartLocation to remove tag from</param>
        /// <param name="cartLocationTag">The tag to delete</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteCartLocationTagAsync (int? cartLocationId, string cartLocationTag)
        {
             await DeleteCartLocationTagAsyncWithHttpInfo(cartLocationId, cartLocationTag);

        }

        /// <summary>
        /// Delete a tag for a cartLocation. Deletes an existing cartLocation tag using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cartLocationId">Id of the cartLocation to remove tag from</param>
        /// <param name="cartLocationTag">The tag to delete</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteCartLocationTagAsyncWithHttpInfo (int? cartLocationId, string cartLocationTag)
        {
            // verify the required parameter 'cartLocationId' is set
            if (cartLocationId == null)
                throw new ApiException(400, "Missing required parameter 'cartLocationId' when calling CartLocationApi->DeleteCartLocationTag");
            // verify the required parameter 'cartLocationTag' is set
            if (cartLocationTag == null)
                throw new ApiException(400, "Missing required parameter 'cartLocationTag' when calling CartLocationApi->DeleteCartLocationTag");

            var localVarPath = "/beta/cartLocation/{cartLocationId}/tag/{cartLocationTag}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (cartLocationId != null) localVarPathParams.Add("cartLocationId", Configuration.ApiClient.ParameterToString(cartLocationId)); // path parameter
            if (cartLocationTag != null) localVarPathParams.Add("cartLocationTag", Configuration.ApiClient.ParameterToString(cartLocationTag)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteCartLocationTag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Search cartLocations by filter Returns the list of cartLocations that match the given filter.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>List&lt;CartLocation&gt;</returns>
        public List<CartLocation> GetCartLocationByFilter (string filter = null, int? page = null, int? limit = null, string sort = null)
        {
             ApiResponse<List<CartLocation>> localVarResponse = GetCartLocationByFilterWithHttpInfo(filter, page, limit, sort);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Search cartLocations by filter Returns the list of cartLocations that match the given filter.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>ApiResponse of List&lt;CartLocation&gt;</returns>
        public ApiResponse< List<CartLocation> > GetCartLocationByFilterWithHttpInfo (string filter = null, int? page = null, int? limit = null, string sort = null)
        {

            var localVarPath = "/beta/cartLocation/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (filter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (page != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCartLocationByFilter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<CartLocation>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<CartLocation>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<CartLocation>)));
        }

        /// <summary>
        /// Search cartLocations by filter Returns the list of cartLocations that match the given filter.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>Task of List&lt;CartLocation&gt;</returns>
        public async System.Threading.Tasks.Task<List<CartLocation>> GetCartLocationByFilterAsync (string filter = null, int? page = null, int? limit = null, string sort = null)
        {
             ApiResponse<List<CartLocation>> localVarResponse = await GetCartLocationByFilterAsyncWithHttpInfo(filter, page, limit, sort);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Search cartLocations by filter Returns the list of cartLocations that match the given filter.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;CartLocation&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<CartLocation>>> GetCartLocationByFilterAsyncWithHttpInfo (string filter = null, int? page = null, int? limit = null, string sort = null)
        {

            var localVarPath = "/beta/cartLocation/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (filter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (page != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCartLocationByFilter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<CartLocation>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<CartLocation>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<CartLocation>)));
        }

        /// <summary>
        /// Get a cartLocation by id Returns the cartLocation identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cartLocationId">Id of the cartLocation to be returned.</param>
        /// <returns>CartLocation</returns>
        public CartLocation GetCartLocationById (int? cartLocationId)
        {
             ApiResponse<CartLocation> localVarResponse = GetCartLocationByIdWithHttpInfo(cartLocationId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a cartLocation by id Returns the cartLocation identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cartLocationId">Id of the cartLocation to be returned.</param>
        /// <returns>ApiResponse of CartLocation</returns>
        public ApiResponse< CartLocation > GetCartLocationByIdWithHttpInfo (int? cartLocationId)
        {
            // verify the required parameter 'cartLocationId' is set
            if (cartLocationId == null)
                throw new ApiException(400, "Missing required parameter 'cartLocationId' when calling CartLocationApi->GetCartLocationById");

            var localVarPath = "/beta/cartLocation/{cartLocationId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (cartLocationId != null) localVarPathParams.Add("cartLocationId", Configuration.ApiClient.ParameterToString(cartLocationId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCartLocationById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CartLocation>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CartLocation) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CartLocation)));
        }

        /// <summary>
        /// Get a cartLocation by id Returns the cartLocation identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cartLocationId">Id of the cartLocation to be returned.</param>
        /// <returns>Task of CartLocation</returns>
        public async System.Threading.Tasks.Task<CartLocation> GetCartLocationByIdAsync (int? cartLocationId)
        {
             ApiResponse<CartLocation> localVarResponse = await GetCartLocationByIdAsyncWithHttpInfo(cartLocationId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a cartLocation by id Returns the cartLocation identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cartLocationId">Id of the cartLocation to be returned.</param>
        /// <returns>Task of ApiResponse (CartLocation)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CartLocation>> GetCartLocationByIdAsyncWithHttpInfo (int? cartLocationId)
        {
            // verify the required parameter 'cartLocationId' is set
            if (cartLocationId == null)
                throw new ApiException(400, "Missing required parameter 'cartLocationId' when calling CartLocationApi->GetCartLocationById");

            var localVarPath = "/beta/cartLocation/{cartLocationId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (cartLocationId != null) localVarPathParams.Add("cartLocationId", Configuration.ApiClient.ParameterToString(cartLocationId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCartLocationById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CartLocation>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CartLocation) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CartLocation)));
        }

        /// <summary>
        /// Get the files for a cartLocation. Get all existing cartLocation files.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cartLocationId">Id of the cartLocation to get files for</param>
        /// <returns></returns>
        public void GetCartLocationFiles (int? cartLocationId)
        {
             GetCartLocationFilesWithHttpInfo(cartLocationId);
        }

        /// <summary>
        /// Get the files for a cartLocation. Get all existing cartLocation files.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cartLocationId">Id of the cartLocation to get files for</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GetCartLocationFilesWithHttpInfo (int? cartLocationId)
        {
            // verify the required parameter 'cartLocationId' is set
            if (cartLocationId == null)
                throw new ApiException(400, "Missing required parameter 'cartLocationId' when calling CartLocationApi->GetCartLocationFiles");

            var localVarPath = "/beta/cartLocation/{cartLocationId}/file";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (cartLocationId != null) localVarPathParams.Add("cartLocationId", Configuration.ApiClient.ParameterToString(cartLocationId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCartLocationFiles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get the files for a cartLocation. Get all existing cartLocation files.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cartLocationId">Id of the cartLocation to get files for</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetCartLocationFilesAsync (int? cartLocationId)
        {
             await GetCartLocationFilesAsyncWithHttpInfo(cartLocationId);

        }

        /// <summary>
        /// Get the files for a cartLocation. Get all existing cartLocation files.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cartLocationId">Id of the cartLocation to get files for</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetCartLocationFilesAsyncWithHttpInfo (int? cartLocationId)
        {
            // verify the required parameter 'cartLocationId' is set
            if (cartLocationId == null)
                throw new ApiException(400, "Missing required parameter 'cartLocationId' when calling CartLocationApi->GetCartLocationFiles");

            var localVarPath = "/beta/cartLocation/{cartLocationId}/file";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (cartLocationId != null) localVarPathParams.Add("cartLocationId", Configuration.ApiClient.ParameterToString(cartLocationId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCartLocationFiles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get the tags for a cartLocation. Get all existing cartLocation tags.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cartLocationId">Id of the cartLocation to get tags for</param>
        /// <returns></returns>
        public void GetCartLocationTags (int? cartLocationId)
        {
             GetCartLocationTagsWithHttpInfo(cartLocationId);
        }

        /// <summary>
        /// Get the tags for a cartLocation. Get all existing cartLocation tags.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cartLocationId">Id of the cartLocation to get tags for</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GetCartLocationTagsWithHttpInfo (int? cartLocationId)
        {
            // verify the required parameter 'cartLocationId' is set
            if (cartLocationId == null)
                throw new ApiException(400, "Missing required parameter 'cartLocationId' when calling CartLocationApi->GetCartLocationTags");

            var localVarPath = "/beta/cartLocation/{cartLocationId}/tag";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (cartLocationId != null) localVarPathParams.Add("cartLocationId", Configuration.ApiClient.ParameterToString(cartLocationId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCartLocationTags", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get the tags for a cartLocation. Get all existing cartLocation tags.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cartLocationId">Id of the cartLocation to get tags for</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetCartLocationTagsAsync (int? cartLocationId)
        {
             await GetCartLocationTagsAsyncWithHttpInfo(cartLocationId);

        }

        /// <summary>
        /// Get the tags for a cartLocation. Get all existing cartLocation tags.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cartLocationId">Id of the cartLocation to get tags for</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetCartLocationTagsAsyncWithHttpInfo (int? cartLocationId)
        {
            // verify the required parameter 'cartLocationId' is set
            if (cartLocationId == null)
                throw new ApiException(400, "Missing required parameter 'cartLocationId' when calling CartLocationApi->GetCartLocationTags");

            var localVarPath = "/beta/cartLocation/{cartLocationId}/tag";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (cartLocationId != null) localVarPathParams.Add("cartLocationId", Configuration.ApiClient.ParameterToString(cartLocationId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCartLocationTags", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get a duplicated a cartLocation by id Returns a duplicated cartLocation identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cartLocationId">Id of the cartLocation to be duplicated.</param>
        /// <returns>CartLocation</returns>
        public CartLocation GetDuplicateCartLocationById (int? cartLocationId)
        {
             ApiResponse<CartLocation> localVarResponse = GetDuplicateCartLocationByIdWithHttpInfo(cartLocationId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a duplicated a cartLocation by id Returns a duplicated cartLocation identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cartLocationId">Id of the cartLocation to be duplicated.</param>
        /// <returns>ApiResponse of CartLocation</returns>
        public ApiResponse< CartLocation > GetDuplicateCartLocationByIdWithHttpInfo (int? cartLocationId)
        {
            // verify the required parameter 'cartLocationId' is set
            if (cartLocationId == null)
                throw new ApiException(400, "Missing required parameter 'cartLocationId' when calling CartLocationApi->GetDuplicateCartLocationById");

            var localVarPath = "/beta/cartLocation/duplicate/{cartLocationId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (cartLocationId != null) localVarPathParams.Add("cartLocationId", Configuration.ApiClient.ParameterToString(cartLocationId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDuplicateCartLocationById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CartLocation>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CartLocation) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CartLocation)));
        }

        /// <summary>
        /// Get a duplicated a cartLocation by id Returns a duplicated cartLocation identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cartLocationId">Id of the cartLocation to be duplicated.</param>
        /// <returns>Task of CartLocation</returns>
        public async System.Threading.Tasks.Task<CartLocation> GetDuplicateCartLocationByIdAsync (int? cartLocationId)
        {
             ApiResponse<CartLocation> localVarResponse = await GetDuplicateCartLocationByIdAsyncWithHttpInfo(cartLocationId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a duplicated a cartLocation by id Returns a duplicated cartLocation identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cartLocationId">Id of the cartLocation to be duplicated.</param>
        /// <returns>Task of ApiResponse (CartLocation)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CartLocation>> GetDuplicateCartLocationByIdAsyncWithHttpInfo (int? cartLocationId)
        {
            // verify the required parameter 'cartLocationId' is set
            if (cartLocationId == null)
                throw new ApiException(400, "Missing required parameter 'cartLocationId' when calling CartLocationApi->GetDuplicateCartLocationById");

            var localVarPath = "/beta/cartLocation/duplicate/{cartLocationId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (cartLocationId != null) localVarPathParams.Add("cartLocationId", Configuration.ApiClient.ParameterToString(cartLocationId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDuplicateCartLocationById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CartLocation>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CartLocation) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CartLocation)));
        }

    }
}
