/* 
 * Infoplus API
 *
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Infoplus.Client;
using Infoplus.Model;

namespace Infoplus.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICartonActivityApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create a cartonActivity
        /// </summary>
        /// <remarks>
        /// Inserts a new cartonActivity using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">CartonActivity to be inserted.</param>
        /// <returns>CartonActivity</returns>
        CartonActivity AddCartonActivity (CartonActivity body);

        /// <summary>
        /// Create a cartonActivity
        /// </summary>
        /// <remarks>
        /// Inserts a new cartonActivity using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">CartonActivity to be inserted.</param>
        /// <returns>ApiResponse of CartonActivity</returns>
        ApiResponse<CartonActivity> AddCartonActivityWithHttpInfo (CartonActivity body);
        /// <summary>
        /// Add new audit for a cartonActivity
        /// </summary>
        /// <remarks>
        /// Adds an audit to an existing cartonActivity.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cartonActivityId">Id of the cartonActivity to add an audit to</param>
        /// <param name="cartonActivityAudit">The audit to add</param>
        /// <returns></returns>
        void AddCartonActivityAudit (int? cartonActivityId, string cartonActivityAudit);

        /// <summary>
        /// Add new audit for a cartonActivity
        /// </summary>
        /// <remarks>
        /// Adds an audit to an existing cartonActivity.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cartonActivityId">Id of the cartonActivity to add an audit to</param>
        /// <param name="cartonActivityAudit">The audit to add</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddCartonActivityAuditWithHttpInfo (int? cartonActivityId, string cartonActivityAudit);
        /// <summary>
        /// Attach a file to a cartonActivity
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing cartonActivity.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cartonActivityId">Id of the cartonActivity to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns></returns>
        void AddCartonActivityFile (int? cartonActivityId, string fileName);

        /// <summary>
        /// Attach a file to a cartonActivity
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing cartonActivity.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cartonActivityId">Id of the cartonActivity to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddCartonActivityFileWithHttpInfo (int? cartonActivityId, string fileName);
        /// <summary>
        /// Attach a file to a cartonActivity by URL.
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing cartonActivity by URL.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="cartonActivityId">Id of the cartonActivity to add an file to</param>
        /// <returns></returns>
        void AddCartonActivityFileByURL (RecordFile body, int? cartonActivityId);

        /// <summary>
        /// Attach a file to a cartonActivity by URL.
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing cartonActivity by URL.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="cartonActivityId">Id of the cartonActivity to add an file to</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddCartonActivityFileByURLWithHttpInfo (RecordFile body, int? cartonActivityId);
        /// <summary>
        /// Add new tags for a cartonActivity.
        /// </summary>
        /// <remarks>
        /// Adds a tag to an existing cartonActivity.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cartonActivityId">Id of the cartonActivity to add a tag to</param>
        /// <param name="cartonActivityTag">The tag to add</param>
        /// <returns></returns>
        void AddCartonActivityTag (int? cartonActivityId, string cartonActivityTag);

        /// <summary>
        /// Add new tags for a cartonActivity.
        /// </summary>
        /// <remarks>
        /// Adds a tag to an existing cartonActivity.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cartonActivityId">Id of the cartonActivity to add a tag to</param>
        /// <param name="cartonActivityTag">The tag to add</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddCartonActivityTagWithHttpInfo (int? cartonActivityId, string cartonActivityTag);
        /// <summary>
        /// Delete a cartonActivity
        /// </summary>
        /// <remarks>
        /// Deletes the cartonActivity identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cartonActivityId">Id of the cartonActivity to be deleted.</param>
        /// <returns></returns>
        void DeleteCartonActivity (int? cartonActivityId);

        /// <summary>
        /// Delete a cartonActivity
        /// </summary>
        /// <remarks>
        /// Deletes the cartonActivity identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cartonActivityId">Id of the cartonActivity to be deleted.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteCartonActivityWithHttpInfo (int? cartonActivityId);
        /// <summary>
        /// Delete a file for a cartonActivity.
        /// </summary>
        /// <remarks>
        /// Deletes an existing cartonActivity file using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cartonActivityId">Id of the cartonActivity to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns></returns>
        void DeleteCartonActivityFile (int? cartonActivityId, int? fileId);

        /// <summary>
        /// Delete a file for a cartonActivity.
        /// </summary>
        /// <remarks>
        /// Deletes an existing cartonActivity file using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cartonActivityId">Id of the cartonActivity to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteCartonActivityFileWithHttpInfo (int? cartonActivityId, int? fileId);
        /// <summary>
        /// Delete a tag for a cartonActivity.
        /// </summary>
        /// <remarks>
        /// Deletes an existing cartonActivity tag using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cartonActivityId">Id of the cartonActivity to remove tag from</param>
        /// <param name="cartonActivityTag">The tag to delete</param>
        /// <returns></returns>
        void DeleteCartonActivityTag (int? cartonActivityId, string cartonActivityTag);

        /// <summary>
        /// Delete a tag for a cartonActivity.
        /// </summary>
        /// <remarks>
        /// Deletes an existing cartonActivity tag using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cartonActivityId">Id of the cartonActivity to remove tag from</param>
        /// <param name="cartonActivityTag">The tag to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteCartonActivityTagWithHttpInfo (int? cartonActivityId, string cartonActivityTag);
        /// <summary>
        /// Search cartonActivitys by filter
        /// </summary>
        /// <remarks>
        /// Returns the list of cartonActivitys that match the given filter.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>List&lt;CartonActivity&gt;</returns>
        List<CartonActivity> GetCartonActivityByFilter (string filter = null, int? page = null, int? limit = null, string sort = null);

        /// <summary>
        /// Search cartonActivitys by filter
        /// </summary>
        /// <remarks>
        /// Returns the list of cartonActivitys that match the given filter.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>ApiResponse of List&lt;CartonActivity&gt;</returns>
        ApiResponse<List<CartonActivity>> GetCartonActivityByFilterWithHttpInfo (string filter = null, int? page = null, int? limit = null, string sort = null);
        /// <summary>
        /// Get a cartonActivity by id
        /// </summary>
        /// <remarks>
        /// Returns the cartonActivity identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cartonActivityId">Id of the cartonActivity to be returned.</param>
        /// <returns>CartonActivity</returns>
        CartonActivity GetCartonActivityById (int? cartonActivityId);

        /// <summary>
        /// Get a cartonActivity by id
        /// </summary>
        /// <remarks>
        /// Returns the cartonActivity identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cartonActivityId">Id of the cartonActivity to be returned.</param>
        /// <returns>ApiResponse of CartonActivity</returns>
        ApiResponse<CartonActivity> GetCartonActivityByIdWithHttpInfo (int? cartonActivityId);
        /// <summary>
        /// Get the files for a cartonActivity.
        /// </summary>
        /// <remarks>
        /// Get all existing cartonActivity files.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cartonActivityId">Id of the cartonActivity to get files for</param>
        /// <returns></returns>
        void GetCartonActivityFiles (int? cartonActivityId);

        /// <summary>
        /// Get the files for a cartonActivity.
        /// </summary>
        /// <remarks>
        /// Get all existing cartonActivity files.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cartonActivityId">Id of the cartonActivity to get files for</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetCartonActivityFilesWithHttpInfo (int? cartonActivityId);
        /// <summary>
        /// Get the tags for a cartonActivity.
        /// </summary>
        /// <remarks>
        /// Get all existing cartonActivity tags.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cartonActivityId">Id of the cartonActivity to get tags for</param>
        /// <returns></returns>
        void GetCartonActivityTags (int? cartonActivityId);

        /// <summary>
        /// Get the tags for a cartonActivity.
        /// </summary>
        /// <remarks>
        /// Get all existing cartonActivity tags.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cartonActivityId">Id of the cartonActivity to get tags for</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetCartonActivityTagsWithHttpInfo (int? cartonActivityId);
        /// <summary>
        /// Get a duplicated a cartonActivity by id
        /// </summary>
        /// <remarks>
        /// Returns a duplicated cartonActivity identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cartonActivityId">Id of the cartonActivity to be duplicated.</param>
        /// <returns>CartonActivity</returns>
        CartonActivity GetDuplicateCartonActivityById (int? cartonActivityId);

        /// <summary>
        /// Get a duplicated a cartonActivity by id
        /// </summary>
        /// <remarks>
        /// Returns a duplicated cartonActivity identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cartonActivityId">Id of the cartonActivity to be duplicated.</param>
        /// <returns>ApiResponse of CartonActivity</returns>
        ApiResponse<CartonActivity> GetDuplicateCartonActivityByIdWithHttpInfo (int? cartonActivityId);
        /// <summary>
        /// Update a cartonActivity
        /// </summary>
        /// <remarks>
        /// Updates an existing cartonActivity using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">CartonActivity to be updated.</param>
        /// <returns></returns>
        void UpdateCartonActivity (CartonActivity body);

        /// <summary>
        /// Update a cartonActivity
        /// </summary>
        /// <remarks>
        /// Updates an existing cartonActivity using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">CartonActivity to be updated.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateCartonActivityWithHttpInfo (CartonActivity body);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create a cartonActivity
        /// </summary>
        /// <remarks>
        /// Inserts a new cartonActivity using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">CartonActivity to be inserted.</param>
        /// <returns>Task of CartonActivity</returns>
        System.Threading.Tasks.Task<CartonActivity> AddCartonActivityAsync (CartonActivity body);

        /// <summary>
        /// Create a cartonActivity
        /// </summary>
        /// <remarks>
        /// Inserts a new cartonActivity using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">CartonActivity to be inserted.</param>
        /// <returns>Task of ApiResponse (CartonActivity)</returns>
        System.Threading.Tasks.Task<ApiResponse<CartonActivity>> AddCartonActivityAsyncWithHttpInfo (CartonActivity body);
        /// <summary>
        /// Add new audit for a cartonActivity
        /// </summary>
        /// <remarks>
        /// Adds an audit to an existing cartonActivity.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cartonActivityId">Id of the cartonActivity to add an audit to</param>
        /// <param name="cartonActivityAudit">The audit to add</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddCartonActivityAuditAsync (int? cartonActivityId, string cartonActivityAudit);

        /// <summary>
        /// Add new audit for a cartonActivity
        /// </summary>
        /// <remarks>
        /// Adds an audit to an existing cartonActivity.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cartonActivityId">Id of the cartonActivity to add an audit to</param>
        /// <param name="cartonActivityAudit">The audit to add</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddCartonActivityAuditAsyncWithHttpInfo (int? cartonActivityId, string cartonActivityAudit);
        /// <summary>
        /// Attach a file to a cartonActivity
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing cartonActivity.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cartonActivityId">Id of the cartonActivity to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddCartonActivityFileAsync (int? cartonActivityId, string fileName);

        /// <summary>
        /// Attach a file to a cartonActivity
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing cartonActivity.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cartonActivityId">Id of the cartonActivity to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddCartonActivityFileAsyncWithHttpInfo (int? cartonActivityId, string fileName);
        /// <summary>
        /// Attach a file to a cartonActivity by URL.
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing cartonActivity by URL.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="cartonActivityId">Id of the cartonActivity to add an file to</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddCartonActivityFileByURLAsync (RecordFile body, int? cartonActivityId);

        /// <summary>
        /// Attach a file to a cartonActivity by URL.
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing cartonActivity by URL.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="cartonActivityId">Id of the cartonActivity to add an file to</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddCartonActivityFileByURLAsyncWithHttpInfo (RecordFile body, int? cartonActivityId);
        /// <summary>
        /// Add new tags for a cartonActivity.
        /// </summary>
        /// <remarks>
        /// Adds a tag to an existing cartonActivity.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cartonActivityId">Id of the cartonActivity to add a tag to</param>
        /// <param name="cartonActivityTag">The tag to add</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddCartonActivityTagAsync (int? cartonActivityId, string cartonActivityTag);

        /// <summary>
        /// Add new tags for a cartonActivity.
        /// </summary>
        /// <remarks>
        /// Adds a tag to an existing cartonActivity.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cartonActivityId">Id of the cartonActivity to add a tag to</param>
        /// <param name="cartonActivityTag">The tag to add</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddCartonActivityTagAsyncWithHttpInfo (int? cartonActivityId, string cartonActivityTag);
        /// <summary>
        /// Delete a cartonActivity
        /// </summary>
        /// <remarks>
        /// Deletes the cartonActivity identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cartonActivityId">Id of the cartonActivity to be deleted.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteCartonActivityAsync (int? cartonActivityId);

        /// <summary>
        /// Delete a cartonActivity
        /// </summary>
        /// <remarks>
        /// Deletes the cartonActivity identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cartonActivityId">Id of the cartonActivity to be deleted.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteCartonActivityAsyncWithHttpInfo (int? cartonActivityId);
        /// <summary>
        /// Delete a file for a cartonActivity.
        /// </summary>
        /// <remarks>
        /// Deletes an existing cartonActivity file using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cartonActivityId">Id of the cartonActivity to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteCartonActivityFileAsync (int? cartonActivityId, int? fileId);

        /// <summary>
        /// Delete a file for a cartonActivity.
        /// </summary>
        /// <remarks>
        /// Deletes an existing cartonActivity file using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cartonActivityId">Id of the cartonActivity to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteCartonActivityFileAsyncWithHttpInfo (int? cartonActivityId, int? fileId);
        /// <summary>
        /// Delete a tag for a cartonActivity.
        /// </summary>
        /// <remarks>
        /// Deletes an existing cartonActivity tag using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cartonActivityId">Id of the cartonActivity to remove tag from</param>
        /// <param name="cartonActivityTag">The tag to delete</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteCartonActivityTagAsync (int? cartonActivityId, string cartonActivityTag);

        /// <summary>
        /// Delete a tag for a cartonActivity.
        /// </summary>
        /// <remarks>
        /// Deletes an existing cartonActivity tag using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cartonActivityId">Id of the cartonActivity to remove tag from</param>
        /// <param name="cartonActivityTag">The tag to delete</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteCartonActivityTagAsyncWithHttpInfo (int? cartonActivityId, string cartonActivityTag);
        /// <summary>
        /// Search cartonActivitys by filter
        /// </summary>
        /// <remarks>
        /// Returns the list of cartonActivitys that match the given filter.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>Task of List&lt;CartonActivity&gt;</returns>
        System.Threading.Tasks.Task<List<CartonActivity>> GetCartonActivityByFilterAsync (string filter = null, int? page = null, int? limit = null, string sort = null);

        /// <summary>
        /// Search cartonActivitys by filter
        /// </summary>
        /// <remarks>
        /// Returns the list of cartonActivitys that match the given filter.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;CartonActivity&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<CartonActivity>>> GetCartonActivityByFilterAsyncWithHttpInfo (string filter = null, int? page = null, int? limit = null, string sort = null);
        /// <summary>
        /// Get a cartonActivity by id
        /// </summary>
        /// <remarks>
        /// Returns the cartonActivity identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cartonActivityId">Id of the cartonActivity to be returned.</param>
        /// <returns>Task of CartonActivity</returns>
        System.Threading.Tasks.Task<CartonActivity> GetCartonActivityByIdAsync (int? cartonActivityId);

        /// <summary>
        /// Get a cartonActivity by id
        /// </summary>
        /// <remarks>
        /// Returns the cartonActivity identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cartonActivityId">Id of the cartonActivity to be returned.</param>
        /// <returns>Task of ApiResponse (CartonActivity)</returns>
        System.Threading.Tasks.Task<ApiResponse<CartonActivity>> GetCartonActivityByIdAsyncWithHttpInfo (int? cartonActivityId);
        /// <summary>
        /// Get the files for a cartonActivity.
        /// </summary>
        /// <remarks>
        /// Get all existing cartonActivity files.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cartonActivityId">Id of the cartonActivity to get files for</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetCartonActivityFilesAsync (int? cartonActivityId);

        /// <summary>
        /// Get the files for a cartonActivity.
        /// </summary>
        /// <remarks>
        /// Get all existing cartonActivity files.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cartonActivityId">Id of the cartonActivity to get files for</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetCartonActivityFilesAsyncWithHttpInfo (int? cartonActivityId);
        /// <summary>
        /// Get the tags for a cartonActivity.
        /// </summary>
        /// <remarks>
        /// Get all existing cartonActivity tags.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cartonActivityId">Id of the cartonActivity to get tags for</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetCartonActivityTagsAsync (int? cartonActivityId);

        /// <summary>
        /// Get the tags for a cartonActivity.
        /// </summary>
        /// <remarks>
        /// Get all existing cartonActivity tags.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cartonActivityId">Id of the cartonActivity to get tags for</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetCartonActivityTagsAsyncWithHttpInfo (int? cartonActivityId);
        /// <summary>
        /// Get a duplicated a cartonActivity by id
        /// </summary>
        /// <remarks>
        /// Returns a duplicated cartonActivity identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cartonActivityId">Id of the cartonActivity to be duplicated.</param>
        /// <returns>Task of CartonActivity</returns>
        System.Threading.Tasks.Task<CartonActivity> GetDuplicateCartonActivityByIdAsync (int? cartonActivityId);

        /// <summary>
        /// Get a duplicated a cartonActivity by id
        /// </summary>
        /// <remarks>
        /// Returns a duplicated cartonActivity identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cartonActivityId">Id of the cartonActivity to be duplicated.</param>
        /// <returns>Task of ApiResponse (CartonActivity)</returns>
        System.Threading.Tasks.Task<ApiResponse<CartonActivity>> GetDuplicateCartonActivityByIdAsyncWithHttpInfo (int? cartonActivityId);
        /// <summary>
        /// Update a cartonActivity
        /// </summary>
        /// <remarks>
        /// Updates an existing cartonActivity using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">CartonActivity to be updated.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateCartonActivityAsync (CartonActivity body);

        /// <summary>
        /// Update a cartonActivity
        /// </summary>
        /// <remarks>
        /// Updates an existing cartonActivity using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">CartonActivity to be updated.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateCartonActivityAsyncWithHttpInfo (CartonActivity body);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class CartonActivityApi : ICartonActivityApi
    {
        private Infoplus.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="CartonActivityApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CartonActivityApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = Infoplus.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CartonActivityApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public CartonActivityApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Infoplus.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Infoplus.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create a cartonActivity Inserts a new cartonActivity using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">CartonActivity to be inserted.</param>
        /// <returns>CartonActivity</returns>
        public CartonActivity AddCartonActivity (CartonActivity body)
        {
             ApiResponse<CartonActivity> localVarResponse = AddCartonActivityWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a cartonActivity Inserts a new cartonActivity using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">CartonActivity to be inserted.</param>
        /// <returns>ApiResponse of CartonActivity</returns>
        public ApiResponse< CartonActivity > AddCartonActivityWithHttpInfo (CartonActivity body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling CartonActivityApi->AddCartonActivity");

            var localVarPath = "/beta/cartonActivity";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddCartonActivity", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CartonActivity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CartonActivity) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CartonActivity)));
        }

        /// <summary>
        /// Create a cartonActivity Inserts a new cartonActivity using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">CartonActivity to be inserted.</param>
        /// <returns>Task of CartonActivity</returns>
        public async System.Threading.Tasks.Task<CartonActivity> AddCartonActivityAsync (CartonActivity body)
        {
             ApiResponse<CartonActivity> localVarResponse = await AddCartonActivityAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a cartonActivity Inserts a new cartonActivity using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">CartonActivity to be inserted.</param>
        /// <returns>Task of ApiResponse (CartonActivity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CartonActivity>> AddCartonActivityAsyncWithHttpInfo (CartonActivity body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling CartonActivityApi->AddCartonActivity");

            var localVarPath = "/beta/cartonActivity";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddCartonActivity", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CartonActivity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CartonActivity) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CartonActivity)));
        }

        /// <summary>
        /// Add new audit for a cartonActivity Adds an audit to an existing cartonActivity.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cartonActivityId">Id of the cartonActivity to add an audit to</param>
        /// <param name="cartonActivityAudit">The audit to add</param>
        /// <returns></returns>
        public void AddCartonActivityAudit (int? cartonActivityId, string cartonActivityAudit)
        {
             AddCartonActivityAuditWithHttpInfo(cartonActivityId, cartonActivityAudit);
        }

        /// <summary>
        /// Add new audit for a cartonActivity Adds an audit to an existing cartonActivity.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cartonActivityId">Id of the cartonActivity to add an audit to</param>
        /// <param name="cartonActivityAudit">The audit to add</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AddCartonActivityAuditWithHttpInfo (int? cartonActivityId, string cartonActivityAudit)
        {
            // verify the required parameter 'cartonActivityId' is set
            if (cartonActivityId == null)
                throw new ApiException(400, "Missing required parameter 'cartonActivityId' when calling CartonActivityApi->AddCartonActivityAudit");
            // verify the required parameter 'cartonActivityAudit' is set
            if (cartonActivityAudit == null)
                throw new ApiException(400, "Missing required parameter 'cartonActivityAudit' when calling CartonActivityApi->AddCartonActivityAudit");

            var localVarPath = "/beta/cartonActivity/{cartonActivityId}/audit/{cartonActivityAudit}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (cartonActivityId != null) localVarPathParams.Add("cartonActivityId", Configuration.ApiClient.ParameterToString(cartonActivityId)); // path parameter
            if (cartonActivityAudit != null) localVarPathParams.Add("cartonActivityAudit", Configuration.ApiClient.ParameterToString(cartonActivityAudit)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddCartonActivityAudit", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Add new audit for a cartonActivity Adds an audit to an existing cartonActivity.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cartonActivityId">Id of the cartonActivity to add an audit to</param>
        /// <param name="cartonActivityAudit">The audit to add</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddCartonActivityAuditAsync (int? cartonActivityId, string cartonActivityAudit)
        {
             await AddCartonActivityAuditAsyncWithHttpInfo(cartonActivityId, cartonActivityAudit);

        }

        /// <summary>
        /// Add new audit for a cartonActivity Adds an audit to an existing cartonActivity.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cartonActivityId">Id of the cartonActivity to add an audit to</param>
        /// <param name="cartonActivityAudit">The audit to add</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddCartonActivityAuditAsyncWithHttpInfo (int? cartonActivityId, string cartonActivityAudit)
        {
            // verify the required parameter 'cartonActivityId' is set
            if (cartonActivityId == null)
                throw new ApiException(400, "Missing required parameter 'cartonActivityId' when calling CartonActivityApi->AddCartonActivityAudit");
            // verify the required parameter 'cartonActivityAudit' is set
            if (cartonActivityAudit == null)
                throw new ApiException(400, "Missing required parameter 'cartonActivityAudit' when calling CartonActivityApi->AddCartonActivityAudit");

            var localVarPath = "/beta/cartonActivity/{cartonActivityId}/audit/{cartonActivityAudit}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (cartonActivityId != null) localVarPathParams.Add("cartonActivityId", Configuration.ApiClient.ParameterToString(cartonActivityId)); // path parameter
            if (cartonActivityAudit != null) localVarPathParams.Add("cartonActivityAudit", Configuration.ApiClient.ParameterToString(cartonActivityAudit)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddCartonActivityAudit", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Attach a file to a cartonActivity Adds a file to an existing cartonActivity.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cartonActivityId">Id of the cartonActivity to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns></returns>
        public void AddCartonActivityFile (int? cartonActivityId, string fileName)
        {
             AddCartonActivityFileWithHttpInfo(cartonActivityId, fileName);
        }

        /// <summary>
        /// Attach a file to a cartonActivity Adds a file to an existing cartonActivity.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cartonActivityId">Id of the cartonActivity to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AddCartonActivityFileWithHttpInfo (int? cartonActivityId, string fileName)
        {
            // verify the required parameter 'cartonActivityId' is set
            if (cartonActivityId == null)
                throw new ApiException(400, "Missing required parameter 'cartonActivityId' when calling CartonActivityApi->AddCartonActivityFile");
            // verify the required parameter 'fileName' is set
            if (fileName == null)
                throw new ApiException(400, "Missing required parameter 'fileName' when calling CartonActivityApi->AddCartonActivityFile");

            var localVarPath = "/beta/cartonActivity/{cartonActivityId}/file/{fileName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (cartonActivityId != null) localVarPathParams.Add("cartonActivityId", Configuration.ApiClient.ParameterToString(cartonActivityId)); // path parameter
            if (fileName != null) localVarPathParams.Add("fileName", Configuration.ApiClient.ParameterToString(fileName)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddCartonActivityFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Attach a file to a cartonActivity Adds a file to an existing cartonActivity.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cartonActivityId">Id of the cartonActivity to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddCartonActivityFileAsync (int? cartonActivityId, string fileName)
        {
             await AddCartonActivityFileAsyncWithHttpInfo(cartonActivityId, fileName);

        }

        /// <summary>
        /// Attach a file to a cartonActivity Adds a file to an existing cartonActivity.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cartonActivityId">Id of the cartonActivity to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddCartonActivityFileAsyncWithHttpInfo (int? cartonActivityId, string fileName)
        {
            // verify the required parameter 'cartonActivityId' is set
            if (cartonActivityId == null)
                throw new ApiException(400, "Missing required parameter 'cartonActivityId' when calling CartonActivityApi->AddCartonActivityFile");
            // verify the required parameter 'fileName' is set
            if (fileName == null)
                throw new ApiException(400, "Missing required parameter 'fileName' when calling CartonActivityApi->AddCartonActivityFile");

            var localVarPath = "/beta/cartonActivity/{cartonActivityId}/file/{fileName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (cartonActivityId != null) localVarPathParams.Add("cartonActivityId", Configuration.ApiClient.ParameterToString(cartonActivityId)); // path parameter
            if (fileName != null) localVarPathParams.Add("fileName", Configuration.ApiClient.ParameterToString(fileName)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddCartonActivityFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Attach a file to a cartonActivity by URL. Adds a file to an existing cartonActivity by URL.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="cartonActivityId">Id of the cartonActivity to add an file to</param>
        /// <returns></returns>
        public void AddCartonActivityFileByURL (RecordFile body, int? cartonActivityId)
        {
             AddCartonActivityFileByURLWithHttpInfo(body, cartonActivityId);
        }

        /// <summary>
        /// Attach a file to a cartonActivity by URL. Adds a file to an existing cartonActivity by URL.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="cartonActivityId">Id of the cartonActivity to add an file to</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AddCartonActivityFileByURLWithHttpInfo (RecordFile body, int? cartonActivityId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling CartonActivityApi->AddCartonActivityFileByURL");
            // verify the required parameter 'cartonActivityId' is set
            if (cartonActivityId == null)
                throw new ApiException(400, "Missing required parameter 'cartonActivityId' when calling CartonActivityApi->AddCartonActivityFileByURL");

            var localVarPath = "/beta/cartonActivity/{cartonActivityId}/file";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (cartonActivityId != null) localVarPathParams.Add("cartonActivityId", Configuration.ApiClient.ParameterToString(cartonActivityId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddCartonActivityFileByURL", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Attach a file to a cartonActivity by URL. Adds a file to an existing cartonActivity by URL.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="cartonActivityId">Id of the cartonActivity to add an file to</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddCartonActivityFileByURLAsync (RecordFile body, int? cartonActivityId)
        {
             await AddCartonActivityFileByURLAsyncWithHttpInfo(body, cartonActivityId);

        }

        /// <summary>
        /// Attach a file to a cartonActivity by URL. Adds a file to an existing cartonActivity by URL.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="cartonActivityId">Id of the cartonActivity to add an file to</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddCartonActivityFileByURLAsyncWithHttpInfo (RecordFile body, int? cartonActivityId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling CartonActivityApi->AddCartonActivityFileByURL");
            // verify the required parameter 'cartonActivityId' is set
            if (cartonActivityId == null)
                throw new ApiException(400, "Missing required parameter 'cartonActivityId' when calling CartonActivityApi->AddCartonActivityFileByURL");

            var localVarPath = "/beta/cartonActivity/{cartonActivityId}/file";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (cartonActivityId != null) localVarPathParams.Add("cartonActivityId", Configuration.ApiClient.ParameterToString(cartonActivityId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddCartonActivityFileByURL", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Add new tags for a cartonActivity. Adds a tag to an existing cartonActivity.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cartonActivityId">Id of the cartonActivity to add a tag to</param>
        /// <param name="cartonActivityTag">The tag to add</param>
        /// <returns></returns>
        public void AddCartonActivityTag (int? cartonActivityId, string cartonActivityTag)
        {
             AddCartonActivityTagWithHttpInfo(cartonActivityId, cartonActivityTag);
        }

        /// <summary>
        /// Add new tags for a cartonActivity. Adds a tag to an existing cartonActivity.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cartonActivityId">Id of the cartonActivity to add a tag to</param>
        /// <param name="cartonActivityTag">The tag to add</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AddCartonActivityTagWithHttpInfo (int? cartonActivityId, string cartonActivityTag)
        {
            // verify the required parameter 'cartonActivityId' is set
            if (cartonActivityId == null)
                throw new ApiException(400, "Missing required parameter 'cartonActivityId' when calling CartonActivityApi->AddCartonActivityTag");
            // verify the required parameter 'cartonActivityTag' is set
            if (cartonActivityTag == null)
                throw new ApiException(400, "Missing required parameter 'cartonActivityTag' when calling CartonActivityApi->AddCartonActivityTag");

            var localVarPath = "/beta/cartonActivity/{cartonActivityId}/tag/{cartonActivityTag}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (cartonActivityId != null) localVarPathParams.Add("cartonActivityId", Configuration.ApiClient.ParameterToString(cartonActivityId)); // path parameter
            if (cartonActivityTag != null) localVarPathParams.Add("cartonActivityTag", Configuration.ApiClient.ParameterToString(cartonActivityTag)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddCartonActivityTag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Add new tags for a cartonActivity. Adds a tag to an existing cartonActivity.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cartonActivityId">Id of the cartonActivity to add a tag to</param>
        /// <param name="cartonActivityTag">The tag to add</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddCartonActivityTagAsync (int? cartonActivityId, string cartonActivityTag)
        {
             await AddCartonActivityTagAsyncWithHttpInfo(cartonActivityId, cartonActivityTag);

        }

        /// <summary>
        /// Add new tags for a cartonActivity. Adds a tag to an existing cartonActivity.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cartonActivityId">Id of the cartonActivity to add a tag to</param>
        /// <param name="cartonActivityTag">The tag to add</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddCartonActivityTagAsyncWithHttpInfo (int? cartonActivityId, string cartonActivityTag)
        {
            // verify the required parameter 'cartonActivityId' is set
            if (cartonActivityId == null)
                throw new ApiException(400, "Missing required parameter 'cartonActivityId' when calling CartonActivityApi->AddCartonActivityTag");
            // verify the required parameter 'cartonActivityTag' is set
            if (cartonActivityTag == null)
                throw new ApiException(400, "Missing required parameter 'cartonActivityTag' when calling CartonActivityApi->AddCartonActivityTag");

            var localVarPath = "/beta/cartonActivity/{cartonActivityId}/tag/{cartonActivityTag}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (cartonActivityId != null) localVarPathParams.Add("cartonActivityId", Configuration.ApiClient.ParameterToString(cartonActivityId)); // path parameter
            if (cartonActivityTag != null) localVarPathParams.Add("cartonActivityTag", Configuration.ApiClient.ParameterToString(cartonActivityTag)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddCartonActivityTag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a cartonActivity Deletes the cartonActivity identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cartonActivityId">Id of the cartonActivity to be deleted.</param>
        /// <returns></returns>
        public void DeleteCartonActivity (int? cartonActivityId)
        {
             DeleteCartonActivityWithHttpInfo(cartonActivityId);
        }

        /// <summary>
        /// Delete a cartonActivity Deletes the cartonActivity identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cartonActivityId">Id of the cartonActivity to be deleted.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteCartonActivityWithHttpInfo (int? cartonActivityId)
        {
            // verify the required parameter 'cartonActivityId' is set
            if (cartonActivityId == null)
                throw new ApiException(400, "Missing required parameter 'cartonActivityId' when calling CartonActivityApi->DeleteCartonActivity");

            var localVarPath = "/beta/cartonActivity/{cartonActivityId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (cartonActivityId != null) localVarPathParams.Add("cartonActivityId", Configuration.ApiClient.ParameterToString(cartonActivityId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteCartonActivity", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a cartonActivity Deletes the cartonActivity identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cartonActivityId">Id of the cartonActivity to be deleted.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteCartonActivityAsync (int? cartonActivityId)
        {
             await DeleteCartonActivityAsyncWithHttpInfo(cartonActivityId);

        }

        /// <summary>
        /// Delete a cartonActivity Deletes the cartonActivity identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cartonActivityId">Id of the cartonActivity to be deleted.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteCartonActivityAsyncWithHttpInfo (int? cartonActivityId)
        {
            // verify the required parameter 'cartonActivityId' is set
            if (cartonActivityId == null)
                throw new ApiException(400, "Missing required parameter 'cartonActivityId' when calling CartonActivityApi->DeleteCartonActivity");

            var localVarPath = "/beta/cartonActivity/{cartonActivityId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (cartonActivityId != null) localVarPathParams.Add("cartonActivityId", Configuration.ApiClient.ParameterToString(cartonActivityId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteCartonActivity", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a file for a cartonActivity. Deletes an existing cartonActivity file using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cartonActivityId">Id of the cartonActivity to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns></returns>
        public void DeleteCartonActivityFile (int? cartonActivityId, int? fileId)
        {
             DeleteCartonActivityFileWithHttpInfo(cartonActivityId, fileId);
        }

        /// <summary>
        /// Delete a file for a cartonActivity. Deletes an existing cartonActivity file using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cartonActivityId">Id of the cartonActivity to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteCartonActivityFileWithHttpInfo (int? cartonActivityId, int? fileId)
        {
            // verify the required parameter 'cartonActivityId' is set
            if (cartonActivityId == null)
                throw new ApiException(400, "Missing required parameter 'cartonActivityId' when calling CartonActivityApi->DeleteCartonActivityFile");
            // verify the required parameter 'fileId' is set
            if (fileId == null)
                throw new ApiException(400, "Missing required parameter 'fileId' when calling CartonActivityApi->DeleteCartonActivityFile");

            var localVarPath = "/beta/cartonActivity/{cartonActivityId}/file/{fileId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (cartonActivityId != null) localVarPathParams.Add("cartonActivityId", Configuration.ApiClient.ParameterToString(cartonActivityId)); // path parameter
            if (fileId != null) localVarPathParams.Add("fileId", Configuration.ApiClient.ParameterToString(fileId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteCartonActivityFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a file for a cartonActivity. Deletes an existing cartonActivity file using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cartonActivityId">Id of the cartonActivity to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteCartonActivityFileAsync (int? cartonActivityId, int? fileId)
        {
             await DeleteCartonActivityFileAsyncWithHttpInfo(cartonActivityId, fileId);

        }

        /// <summary>
        /// Delete a file for a cartonActivity. Deletes an existing cartonActivity file using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cartonActivityId">Id of the cartonActivity to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteCartonActivityFileAsyncWithHttpInfo (int? cartonActivityId, int? fileId)
        {
            // verify the required parameter 'cartonActivityId' is set
            if (cartonActivityId == null)
                throw new ApiException(400, "Missing required parameter 'cartonActivityId' when calling CartonActivityApi->DeleteCartonActivityFile");
            // verify the required parameter 'fileId' is set
            if (fileId == null)
                throw new ApiException(400, "Missing required parameter 'fileId' when calling CartonActivityApi->DeleteCartonActivityFile");

            var localVarPath = "/beta/cartonActivity/{cartonActivityId}/file/{fileId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (cartonActivityId != null) localVarPathParams.Add("cartonActivityId", Configuration.ApiClient.ParameterToString(cartonActivityId)); // path parameter
            if (fileId != null) localVarPathParams.Add("fileId", Configuration.ApiClient.ParameterToString(fileId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteCartonActivityFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a tag for a cartonActivity. Deletes an existing cartonActivity tag using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cartonActivityId">Id of the cartonActivity to remove tag from</param>
        /// <param name="cartonActivityTag">The tag to delete</param>
        /// <returns></returns>
        public void DeleteCartonActivityTag (int? cartonActivityId, string cartonActivityTag)
        {
             DeleteCartonActivityTagWithHttpInfo(cartonActivityId, cartonActivityTag);
        }

        /// <summary>
        /// Delete a tag for a cartonActivity. Deletes an existing cartonActivity tag using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cartonActivityId">Id of the cartonActivity to remove tag from</param>
        /// <param name="cartonActivityTag">The tag to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteCartonActivityTagWithHttpInfo (int? cartonActivityId, string cartonActivityTag)
        {
            // verify the required parameter 'cartonActivityId' is set
            if (cartonActivityId == null)
                throw new ApiException(400, "Missing required parameter 'cartonActivityId' when calling CartonActivityApi->DeleteCartonActivityTag");
            // verify the required parameter 'cartonActivityTag' is set
            if (cartonActivityTag == null)
                throw new ApiException(400, "Missing required parameter 'cartonActivityTag' when calling CartonActivityApi->DeleteCartonActivityTag");

            var localVarPath = "/beta/cartonActivity/{cartonActivityId}/tag/{cartonActivityTag}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (cartonActivityId != null) localVarPathParams.Add("cartonActivityId", Configuration.ApiClient.ParameterToString(cartonActivityId)); // path parameter
            if (cartonActivityTag != null) localVarPathParams.Add("cartonActivityTag", Configuration.ApiClient.ParameterToString(cartonActivityTag)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteCartonActivityTag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a tag for a cartonActivity. Deletes an existing cartonActivity tag using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cartonActivityId">Id of the cartonActivity to remove tag from</param>
        /// <param name="cartonActivityTag">The tag to delete</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteCartonActivityTagAsync (int? cartonActivityId, string cartonActivityTag)
        {
             await DeleteCartonActivityTagAsyncWithHttpInfo(cartonActivityId, cartonActivityTag);

        }

        /// <summary>
        /// Delete a tag for a cartonActivity. Deletes an existing cartonActivity tag using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cartonActivityId">Id of the cartonActivity to remove tag from</param>
        /// <param name="cartonActivityTag">The tag to delete</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteCartonActivityTagAsyncWithHttpInfo (int? cartonActivityId, string cartonActivityTag)
        {
            // verify the required parameter 'cartonActivityId' is set
            if (cartonActivityId == null)
                throw new ApiException(400, "Missing required parameter 'cartonActivityId' when calling CartonActivityApi->DeleteCartonActivityTag");
            // verify the required parameter 'cartonActivityTag' is set
            if (cartonActivityTag == null)
                throw new ApiException(400, "Missing required parameter 'cartonActivityTag' when calling CartonActivityApi->DeleteCartonActivityTag");

            var localVarPath = "/beta/cartonActivity/{cartonActivityId}/tag/{cartonActivityTag}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (cartonActivityId != null) localVarPathParams.Add("cartonActivityId", Configuration.ApiClient.ParameterToString(cartonActivityId)); // path parameter
            if (cartonActivityTag != null) localVarPathParams.Add("cartonActivityTag", Configuration.ApiClient.ParameterToString(cartonActivityTag)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteCartonActivityTag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Search cartonActivitys by filter Returns the list of cartonActivitys that match the given filter.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>List&lt;CartonActivity&gt;</returns>
        public List<CartonActivity> GetCartonActivityByFilter (string filter = null, int? page = null, int? limit = null, string sort = null)
        {
             ApiResponse<List<CartonActivity>> localVarResponse = GetCartonActivityByFilterWithHttpInfo(filter, page, limit, sort);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Search cartonActivitys by filter Returns the list of cartonActivitys that match the given filter.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>ApiResponse of List&lt;CartonActivity&gt;</returns>
        public ApiResponse< List<CartonActivity> > GetCartonActivityByFilterWithHttpInfo (string filter = null, int? page = null, int? limit = null, string sort = null)
        {

            var localVarPath = "/beta/cartonActivity/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (filter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (page != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCartonActivityByFilter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<CartonActivity>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<CartonActivity>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<CartonActivity>)));
        }

        /// <summary>
        /// Search cartonActivitys by filter Returns the list of cartonActivitys that match the given filter.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>Task of List&lt;CartonActivity&gt;</returns>
        public async System.Threading.Tasks.Task<List<CartonActivity>> GetCartonActivityByFilterAsync (string filter = null, int? page = null, int? limit = null, string sort = null)
        {
             ApiResponse<List<CartonActivity>> localVarResponse = await GetCartonActivityByFilterAsyncWithHttpInfo(filter, page, limit, sort);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Search cartonActivitys by filter Returns the list of cartonActivitys that match the given filter.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;CartonActivity&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<CartonActivity>>> GetCartonActivityByFilterAsyncWithHttpInfo (string filter = null, int? page = null, int? limit = null, string sort = null)
        {

            var localVarPath = "/beta/cartonActivity/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (filter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (page != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCartonActivityByFilter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<CartonActivity>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<CartonActivity>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<CartonActivity>)));
        }

        /// <summary>
        /// Get a cartonActivity by id Returns the cartonActivity identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cartonActivityId">Id of the cartonActivity to be returned.</param>
        /// <returns>CartonActivity</returns>
        public CartonActivity GetCartonActivityById (int? cartonActivityId)
        {
             ApiResponse<CartonActivity> localVarResponse = GetCartonActivityByIdWithHttpInfo(cartonActivityId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a cartonActivity by id Returns the cartonActivity identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cartonActivityId">Id of the cartonActivity to be returned.</param>
        /// <returns>ApiResponse of CartonActivity</returns>
        public ApiResponse< CartonActivity > GetCartonActivityByIdWithHttpInfo (int? cartonActivityId)
        {
            // verify the required parameter 'cartonActivityId' is set
            if (cartonActivityId == null)
                throw new ApiException(400, "Missing required parameter 'cartonActivityId' when calling CartonActivityApi->GetCartonActivityById");

            var localVarPath = "/beta/cartonActivity/{cartonActivityId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (cartonActivityId != null) localVarPathParams.Add("cartonActivityId", Configuration.ApiClient.ParameterToString(cartonActivityId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCartonActivityById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CartonActivity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CartonActivity) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CartonActivity)));
        }

        /// <summary>
        /// Get a cartonActivity by id Returns the cartonActivity identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cartonActivityId">Id of the cartonActivity to be returned.</param>
        /// <returns>Task of CartonActivity</returns>
        public async System.Threading.Tasks.Task<CartonActivity> GetCartonActivityByIdAsync (int? cartonActivityId)
        {
             ApiResponse<CartonActivity> localVarResponse = await GetCartonActivityByIdAsyncWithHttpInfo(cartonActivityId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a cartonActivity by id Returns the cartonActivity identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cartonActivityId">Id of the cartonActivity to be returned.</param>
        /// <returns>Task of ApiResponse (CartonActivity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CartonActivity>> GetCartonActivityByIdAsyncWithHttpInfo (int? cartonActivityId)
        {
            // verify the required parameter 'cartonActivityId' is set
            if (cartonActivityId == null)
                throw new ApiException(400, "Missing required parameter 'cartonActivityId' when calling CartonActivityApi->GetCartonActivityById");

            var localVarPath = "/beta/cartonActivity/{cartonActivityId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (cartonActivityId != null) localVarPathParams.Add("cartonActivityId", Configuration.ApiClient.ParameterToString(cartonActivityId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCartonActivityById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CartonActivity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CartonActivity) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CartonActivity)));
        }

        /// <summary>
        /// Get the files for a cartonActivity. Get all existing cartonActivity files.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cartonActivityId">Id of the cartonActivity to get files for</param>
        /// <returns></returns>
        public void GetCartonActivityFiles (int? cartonActivityId)
        {
             GetCartonActivityFilesWithHttpInfo(cartonActivityId);
        }

        /// <summary>
        /// Get the files for a cartonActivity. Get all existing cartonActivity files.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cartonActivityId">Id of the cartonActivity to get files for</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GetCartonActivityFilesWithHttpInfo (int? cartonActivityId)
        {
            // verify the required parameter 'cartonActivityId' is set
            if (cartonActivityId == null)
                throw new ApiException(400, "Missing required parameter 'cartonActivityId' when calling CartonActivityApi->GetCartonActivityFiles");

            var localVarPath = "/beta/cartonActivity/{cartonActivityId}/file";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (cartonActivityId != null) localVarPathParams.Add("cartonActivityId", Configuration.ApiClient.ParameterToString(cartonActivityId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCartonActivityFiles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get the files for a cartonActivity. Get all existing cartonActivity files.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cartonActivityId">Id of the cartonActivity to get files for</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetCartonActivityFilesAsync (int? cartonActivityId)
        {
             await GetCartonActivityFilesAsyncWithHttpInfo(cartonActivityId);

        }

        /// <summary>
        /// Get the files for a cartonActivity. Get all existing cartonActivity files.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cartonActivityId">Id of the cartonActivity to get files for</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetCartonActivityFilesAsyncWithHttpInfo (int? cartonActivityId)
        {
            // verify the required parameter 'cartonActivityId' is set
            if (cartonActivityId == null)
                throw new ApiException(400, "Missing required parameter 'cartonActivityId' when calling CartonActivityApi->GetCartonActivityFiles");

            var localVarPath = "/beta/cartonActivity/{cartonActivityId}/file";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (cartonActivityId != null) localVarPathParams.Add("cartonActivityId", Configuration.ApiClient.ParameterToString(cartonActivityId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCartonActivityFiles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get the tags for a cartonActivity. Get all existing cartonActivity tags.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cartonActivityId">Id of the cartonActivity to get tags for</param>
        /// <returns></returns>
        public void GetCartonActivityTags (int? cartonActivityId)
        {
             GetCartonActivityTagsWithHttpInfo(cartonActivityId);
        }

        /// <summary>
        /// Get the tags for a cartonActivity. Get all existing cartonActivity tags.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cartonActivityId">Id of the cartonActivity to get tags for</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GetCartonActivityTagsWithHttpInfo (int? cartonActivityId)
        {
            // verify the required parameter 'cartonActivityId' is set
            if (cartonActivityId == null)
                throw new ApiException(400, "Missing required parameter 'cartonActivityId' when calling CartonActivityApi->GetCartonActivityTags");

            var localVarPath = "/beta/cartonActivity/{cartonActivityId}/tag";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (cartonActivityId != null) localVarPathParams.Add("cartonActivityId", Configuration.ApiClient.ParameterToString(cartonActivityId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCartonActivityTags", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get the tags for a cartonActivity. Get all existing cartonActivity tags.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cartonActivityId">Id of the cartonActivity to get tags for</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetCartonActivityTagsAsync (int? cartonActivityId)
        {
             await GetCartonActivityTagsAsyncWithHttpInfo(cartonActivityId);

        }

        /// <summary>
        /// Get the tags for a cartonActivity. Get all existing cartonActivity tags.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cartonActivityId">Id of the cartonActivity to get tags for</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetCartonActivityTagsAsyncWithHttpInfo (int? cartonActivityId)
        {
            // verify the required parameter 'cartonActivityId' is set
            if (cartonActivityId == null)
                throw new ApiException(400, "Missing required parameter 'cartonActivityId' when calling CartonActivityApi->GetCartonActivityTags");

            var localVarPath = "/beta/cartonActivity/{cartonActivityId}/tag";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (cartonActivityId != null) localVarPathParams.Add("cartonActivityId", Configuration.ApiClient.ParameterToString(cartonActivityId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCartonActivityTags", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get a duplicated a cartonActivity by id Returns a duplicated cartonActivity identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cartonActivityId">Id of the cartonActivity to be duplicated.</param>
        /// <returns>CartonActivity</returns>
        public CartonActivity GetDuplicateCartonActivityById (int? cartonActivityId)
        {
             ApiResponse<CartonActivity> localVarResponse = GetDuplicateCartonActivityByIdWithHttpInfo(cartonActivityId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a duplicated a cartonActivity by id Returns a duplicated cartonActivity identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cartonActivityId">Id of the cartonActivity to be duplicated.</param>
        /// <returns>ApiResponse of CartonActivity</returns>
        public ApiResponse< CartonActivity > GetDuplicateCartonActivityByIdWithHttpInfo (int? cartonActivityId)
        {
            // verify the required parameter 'cartonActivityId' is set
            if (cartonActivityId == null)
                throw new ApiException(400, "Missing required parameter 'cartonActivityId' when calling CartonActivityApi->GetDuplicateCartonActivityById");

            var localVarPath = "/beta/cartonActivity/duplicate/{cartonActivityId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (cartonActivityId != null) localVarPathParams.Add("cartonActivityId", Configuration.ApiClient.ParameterToString(cartonActivityId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDuplicateCartonActivityById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CartonActivity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CartonActivity) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CartonActivity)));
        }

        /// <summary>
        /// Get a duplicated a cartonActivity by id Returns a duplicated cartonActivity identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cartonActivityId">Id of the cartonActivity to be duplicated.</param>
        /// <returns>Task of CartonActivity</returns>
        public async System.Threading.Tasks.Task<CartonActivity> GetDuplicateCartonActivityByIdAsync (int? cartonActivityId)
        {
             ApiResponse<CartonActivity> localVarResponse = await GetDuplicateCartonActivityByIdAsyncWithHttpInfo(cartonActivityId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a duplicated a cartonActivity by id Returns a duplicated cartonActivity identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cartonActivityId">Id of the cartonActivity to be duplicated.</param>
        /// <returns>Task of ApiResponse (CartonActivity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CartonActivity>> GetDuplicateCartonActivityByIdAsyncWithHttpInfo (int? cartonActivityId)
        {
            // verify the required parameter 'cartonActivityId' is set
            if (cartonActivityId == null)
                throw new ApiException(400, "Missing required parameter 'cartonActivityId' when calling CartonActivityApi->GetDuplicateCartonActivityById");

            var localVarPath = "/beta/cartonActivity/duplicate/{cartonActivityId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (cartonActivityId != null) localVarPathParams.Add("cartonActivityId", Configuration.ApiClient.ParameterToString(cartonActivityId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDuplicateCartonActivityById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CartonActivity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CartonActivity) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CartonActivity)));
        }

        /// <summary>
        /// Update a cartonActivity Updates an existing cartonActivity using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">CartonActivity to be updated.</param>
        /// <returns></returns>
        public void UpdateCartonActivity (CartonActivity body)
        {
             UpdateCartonActivityWithHttpInfo(body);
        }

        /// <summary>
        /// Update a cartonActivity Updates an existing cartonActivity using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">CartonActivity to be updated.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateCartonActivityWithHttpInfo (CartonActivity body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling CartonActivityApi->UpdateCartonActivity");

            var localVarPath = "/beta/cartonActivity";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateCartonActivity", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update a cartonActivity Updates an existing cartonActivity using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">CartonActivity to be updated.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateCartonActivityAsync (CartonActivity body)
        {
             await UpdateCartonActivityAsyncWithHttpInfo(body);

        }

        /// <summary>
        /// Update a cartonActivity Updates an existing cartonActivity using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">CartonActivity to be updated.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateCartonActivityAsyncWithHttpInfo (CartonActivity body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling CartonActivityApi->UpdateCartonActivity");

            var localVarPath = "/beta/cartonActivity";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateCartonActivity", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

    }
}
