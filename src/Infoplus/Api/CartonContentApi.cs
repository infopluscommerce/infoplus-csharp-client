/* 
 * Infoplus API
 *
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Infoplus.Client;
using Infoplus.Model;

namespace Infoplus.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICartonContentApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create a cartonContent
        /// </summary>
        /// <remarks>
        /// Inserts a new cartonContent using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">CartonContent to be inserted.</param>
        /// <returns>CartonContent</returns>
        CartonContent AddCartonContent (CartonContent body);

        /// <summary>
        /// Create a cartonContent
        /// </summary>
        /// <remarks>
        /// Inserts a new cartonContent using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">CartonContent to be inserted.</param>
        /// <returns>ApiResponse of CartonContent</returns>
        ApiResponse<CartonContent> AddCartonContentWithHttpInfo (CartonContent body);
        /// <summary>
        /// Add new audit for a cartonContent
        /// </summary>
        /// <remarks>
        /// Adds an audit to an existing cartonContent.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cartonContentId">Id of the cartonContent to add an audit to</param>
        /// <param name="cartonContentAudit">The audit to add</param>
        /// <returns></returns>
        void AddCartonContentAudit (int? cartonContentId, string cartonContentAudit);

        /// <summary>
        /// Add new audit for a cartonContent
        /// </summary>
        /// <remarks>
        /// Adds an audit to an existing cartonContent.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cartonContentId">Id of the cartonContent to add an audit to</param>
        /// <param name="cartonContentAudit">The audit to add</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddCartonContentAuditWithHttpInfo (int? cartonContentId, string cartonContentAudit);
        /// <summary>
        /// Attach a file to a cartonContent
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing cartonContent.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cartonContentId">Id of the cartonContent to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns></returns>
        void AddCartonContentFile (int? cartonContentId, string fileName);

        /// <summary>
        /// Attach a file to a cartonContent
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing cartonContent.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cartonContentId">Id of the cartonContent to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddCartonContentFileWithHttpInfo (int? cartonContentId, string fileName);
        /// <summary>
        /// Attach a file to a cartonContent by URL.
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing cartonContent by URL.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="cartonContentId">Id of the cartonContent to add an file to</param>
        /// <returns></returns>
        void AddCartonContentFileByURL (RecordFile body, int? cartonContentId);

        /// <summary>
        /// Attach a file to a cartonContent by URL.
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing cartonContent by URL.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="cartonContentId">Id of the cartonContent to add an file to</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddCartonContentFileByURLWithHttpInfo (RecordFile body, int? cartonContentId);
        /// <summary>
        /// Add new tags for a cartonContent.
        /// </summary>
        /// <remarks>
        /// Adds a tag to an existing cartonContent.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cartonContentId">Id of the cartonContent to add a tag to</param>
        /// <param name="cartonContentTag">The tag to add</param>
        /// <returns></returns>
        void AddCartonContentTag (int? cartonContentId, string cartonContentTag);

        /// <summary>
        /// Add new tags for a cartonContent.
        /// </summary>
        /// <remarks>
        /// Adds a tag to an existing cartonContent.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cartonContentId">Id of the cartonContent to add a tag to</param>
        /// <param name="cartonContentTag">The tag to add</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddCartonContentTagWithHttpInfo (int? cartonContentId, string cartonContentTag);
        /// <summary>
        /// Delete a cartonContent
        /// </summary>
        /// <remarks>
        /// Deletes the cartonContent identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cartonContentId">Id of the cartonContent to be deleted.</param>
        /// <returns></returns>
        void DeleteCartonContent (int? cartonContentId);

        /// <summary>
        /// Delete a cartonContent
        /// </summary>
        /// <remarks>
        /// Deletes the cartonContent identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cartonContentId">Id of the cartonContent to be deleted.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteCartonContentWithHttpInfo (int? cartonContentId);
        /// <summary>
        /// Delete a file for a cartonContent.
        /// </summary>
        /// <remarks>
        /// Deletes an existing cartonContent file using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cartonContentId">Id of the cartonContent to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns></returns>
        void DeleteCartonContentFile (int? cartonContentId, int? fileId);

        /// <summary>
        /// Delete a file for a cartonContent.
        /// </summary>
        /// <remarks>
        /// Deletes an existing cartonContent file using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cartonContentId">Id of the cartonContent to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteCartonContentFileWithHttpInfo (int? cartonContentId, int? fileId);
        /// <summary>
        /// Delete a tag for a cartonContent.
        /// </summary>
        /// <remarks>
        /// Deletes an existing cartonContent tag using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cartonContentId">Id of the cartonContent to remove tag from</param>
        /// <param name="cartonContentTag">The tag to delete</param>
        /// <returns></returns>
        void DeleteCartonContentTag (int? cartonContentId, string cartonContentTag);

        /// <summary>
        /// Delete a tag for a cartonContent.
        /// </summary>
        /// <remarks>
        /// Deletes an existing cartonContent tag using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cartonContentId">Id of the cartonContent to remove tag from</param>
        /// <param name="cartonContentTag">The tag to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteCartonContentTagWithHttpInfo (int? cartonContentId, string cartonContentTag);
        /// <summary>
        /// Search cartonContents by filter
        /// </summary>
        /// <remarks>
        /// Returns the list of cartonContents that match the given filter.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>List&lt;CartonContent&gt;</returns>
        List<CartonContent> GetCartonContentByFilter (string filter = null, int? page = null, int? limit = null, string sort = null);

        /// <summary>
        /// Search cartonContents by filter
        /// </summary>
        /// <remarks>
        /// Returns the list of cartonContents that match the given filter.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>ApiResponse of List&lt;CartonContent&gt;</returns>
        ApiResponse<List<CartonContent>> GetCartonContentByFilterWithHttpInfo (string filter = null, int? page = null, int? limit = null, string sort = null);
        /// <summary>
        /// Get a cartonContent by id
        /// </summary>
        /// <remarks>
        /// Returns the cartonContent identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cartonContentId">Id of the cartonContent to be returned.</param>
        /// <returns>CartonContent</returns>
        CartonContent GetCartonContentById (int? cartonContentId);

        /// <summary>
        /// Get a cartonContent by id
        /// </summary>
        /// <remarks>
        /// Returns the cartonContent identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cartonContentId">Id of the cartonContent to be returned.</param>
        /// <returns>ApiResponse of CartonContent</returns>
        ApiResponse<CartonContent> GetCartonContentByIdWithHttpInfo (int? cartonContentId);
        /// <summary>
        /// Get the files for a cartonContent.
        /// </summary>
        /// <remarks>
        /// Get all existing cartonContent files.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cartonContentId">Id of the cartonContent to get files for</param>
        /// <returns></returns>
        void GetCartonContentFiles (int? cartonContentId);

        /// <summary>
        /// Get the files for a cartonContent.
        /// </summary>
        /// <remarks>
        /// Get all existing cartonContent files.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cartonContentId">Id of the cartonContent to get files for</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetCartonContentFilesWithHttpInfo (int? cartonContentId);
        /// <summary>
        /// Get the tags for a cartonContent.
        /// </summary>
        /// <remarks>
        /// Get all existing cartonContent tags.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cartonContentId">Id of the cartonContent to get tags for</param>
        /// <returns></returns>
        void GetCartonContentTags (int? cartonContentId);

        /// <summary>
        /// Get the tags for a cartonContent.
        /// </summary>
        /// <remarks>
        /// Get all existing cartonContent tags.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cartonContentId">Id of the cartonContent to get tags for</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetCartonContentTagsWithHttpInfo (int? cartonContentId);
        /// <summary>
        /// Get a duplicated a cartonContent by id
        /// </summary>
        /// <remarks>
        /// Returns a duplicated cartonContent identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cartonContentId">Id of the cartonContent to be duplicated.</param>
        /// <returns>CartonContent</returns>
        CartonContent GetDuplicateCartonContentById (int? cartonContentId);

        /// <summary>
        /// Get a duplicated a cartonContent by id
        /// </summary>
        /// <remarks>
        /// Returns a duplicated cartonContent identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cartonContentId">Id of the cartonContent to be duplicated.</param>
        /// <returns>ApiResponse of CartonContent</returns>
        ApiResponse<CartonContent> GetDuplicateCartonContentByIdWithHttpInfo (int? cartonContentId);
        /// <summary>
        /// Update a cartonContent
        /// </summary>
        /// <remarks>
        /// Updates an existing cartonContent using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">CartonContent to be updated.</param>
        /// <returns></returns>
        void UpdateCartonContent (CartonContent body);

        /// <summary>
        /// Update a cartonContent
        /// </summary>
        /// <remarks>
        /// Updates an existing cartonContent using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">CartonContent to be updated.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateCartonContentWithHttpInfo (CartonContent body);
        /// <summary>
        /// Update a cartonContent custom fields
        /// </summary>
        /// <remarks>
        /// Updates an existing cartonContent custom fields using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">CartonContent to be updated.</param>
        /// <returns></returns>
        void UpdateCartonContentCustomFields (CartonContent body);

        /// <summary>
        /// Update a cartonContent custom fields
        /// </summary>
        /// <remarks>
        /// Updates an existing cartonContent custom fields using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">CartonContent to be updated.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateCartonContentCustomFieldsWithHttpInfo (CartonContent body);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create a cartonContent
        /// </summary>
        /// <remarks>
        /// Inserts a new cartonContent using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">CartonContent to be inserted.</param>
        /// <returns>Task of CartonContent</returns>
        System.Threading.Tasks.Task<CartonContent> AddCartonContentAsync (CartonContent body);

        /// <summary>
        /// Create a cartonContent
        /// </summary>
        /// <remarks>
        /// Inserts a new cartonContent using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">CartonContent to be inserted.</param>
        /// <returns>Task of ApiResponse (CartonContent)</returns>
        System.Threading.Tasks.Task<ApiResponse<CartonContent>> AddCartonContentAsyncWithHttpInfo (CartonContent body);
        /// <summary>
        /// Add new audit for a cartonContent
        /// </summary>
        /// <remarks>
        /// Adds an audit to an existing cartonContent.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cartonContentId">Id of the cartonContent to add an audit to</param>
        /// <param name="cartonContentAudit">The audit to add</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddCartonContentAuditAsync (int? cartonContentId, string cartonContentAudit);

        /// <summary>
        /// Add new audit for a cartonContent
        /// </summary>
        /// <remarks>
        /// Adds an audit to an existing cartonContent.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cartonContentId">Id of the cartonContent to add an audit to</param>
        /// <param name="cartonContentAudit">The audit to add</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddCartonContentAuditAsyncWithHttpInfo (int? cartonContentId, string cartonContentAudit);
        /// <summary>
        /// Attach a file to a cartonContent
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing cartonContent.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cartonContentId">Id of the cartonContent to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddCartonContentFileAsync (int? cartonContentId, string fileName);

        /// <summary>
        /// Attach a file to a cartonContent
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing cartonContent.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cartonContentId">Id of the cartonContent to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddCartonContentFileAsyncWithHttpInfo (int? cartonContentId, string fileName);
        /// <summary>
        /// Attach a file to a cartonContent by URL.
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing cartonContent by URL.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="cartonContentId">Id of the cartonContent to add an file to</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddCartonContentFileByURLAsync (RecordFile body, int? cartonContentId);

        /// <summary>
        /// Attach a file to a cartonContent by URL.
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing cartonContent by URL.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="cartonContentId">Id of the cartonContent to add an file to</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddCartonContentFileByURLAsyncWithHttpInfo (RecordFile body, int? cartonContentId);
        /// <summary>
        /// Add new tags for a cartonContent.
        /// </summary>
        /// <remarks>
        /// Adds a tag to an existing cartonContent.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cartonContentId">Id of the cartonContent to add a tag to</param>
        /// <param name="cartonContentTag">The tag to add</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddCartonContentTagAsync (int? cartonContentId, string cartonContentTag);

        /// <summary>
        /// Add new tags for a cartonContent.
        /// </summary>
        /// <remarks>
        /// Adds a tag to an existing cartonContent.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cartonContentId">Id of the cartonContent to add a tag to</param>
        /// <param name="cartonContentTag">The tag to add</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddCartonContentTagAsyncWithHttpInfo (int? cartonContentId, string cartonContentTag);
        /// <summary>
        /// Delete a cartonContent
        /// </summary>
        /// <remarks>
        /// Deletes the cartonContent identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cartonContentId">Id of the cartonContent to be deleted.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteCartonContentAsync (int? cartonContentId);

        /// <summary>
        /// Delete a cartonContent
        /// </summary>
        /// <remarks>
        /// Deletes the cartonContent identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cartonContentId">Id of the cartonContent to be deleted.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteCartonContentAsyncWithHttpInfo (int? cartonContentId);
        /// <summary>
        /// Delete a file for a cartonContent.
        /// </summary>
        /// <remarks>
        /// Deletes an existing cartonContent file using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cartonContentId">Id of the cartonContent to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteCartonContentFileAsync (int? cartonContentId, int? fileId);

        /// <summary>
        /// Delete a file for a cartonContent.
        /// </summary>
        /// <remarks>
        /// Deletes an existing cartonContent file using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cartonContentId">Id of the cartonContent to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteCartonContentFileAsyncWithHttpInfo (int? cartonContentId, int? fileId);
        /// <summary>
        /// Delete a tag for a cartonContent.
        /// </summary>
        /// <remarks>
        /// Deletes an existing cartonContent tag using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cartonContentId">Id of the cartonContent to remove tag from</param>
        /// <param name="cartonContentTag">The tag to delete</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteCartonContentTagAsync (int? cartonContentId, string cartonContentTag);

        /// <summary>
        /// Delete a tag for a cartonContent.
        /// </summary>
        /// <remarks>
        /// Deletes an existing cartonContent tag using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cartonContentId">Id of the cartonContent to remove tag from</param>
        /// <param name="cartonContentTag">The tag to delete</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteCartonContentTagAsyncWithHttpInfo (int? cartonContentId, string cartonContentTag);
        /// <summary>
        /// Search cartonContents by filter
        /// </summary>
        /// <remarks>
        /// Returns the list of cartonContents that match the given filter.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>Task of List&lt;CartonContent&gt;</returns>
        System.Threading.Tasks.Task<List<CartonContent>> GetCartonContentByFilterAsync (string filter = null, int? page = null, int? limit = null, string sort = null);

        /// <summary>
        /// Search cartonContents by filter
        /// </summary>
        /// <remarks>
        /// Returns the list of cartonContents that match the given filter.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;CartonContent&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<CartonContent>>> GetCartonContentByFilterAsyncWithHttpInfo (string filter = null, int? page = null, int? limit = null, string sort = null);
        /// <summary>
        /// Get a cartonContent by id
        /// </summary>
        /// <remarks>
        /// Returns the cartonContent identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cartonContentId">Id of the cartonContent to be returned.</param>
        /// <returns>Task of CartonContent</returns>
        System.Threading.Tasks.Task<CartonContent> GetCartonContentByIdAsync (int? cartonContentId);

        /// <summary>
        /// Get a cartonContent by id
        /// </summary>
        /// <remarks>
        /// Returns the cartonContent identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cartonContentId">Id of the cartonContent to be returned.</param>
        /// <returns>Task of ApiResponse (CartonContent)</returns>
        System.Threading.Tasks.Task<ApiResponse<CartonContent>> GetCartonContentByIdAsyncWithHttpInfo (int? cartonContentId);
        /// <summary>
        /// Get the files for a cartonContent.
        /// </summary>
        /// <remarks>
        /// Get all existing cartonContent files.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cartonContentId">Id of the cartonContent to get files for</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetCartonContentFilesAsync (int? cartonContentId);

        /// <summary>
        /// Get the files for a cartonContent.
        /// </summary>
        /// <remarks>
        /// Get all existing cartonContent files.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cartonContentId">Id of the cartonContent to get files for</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetCartonContentFilesAsyncWithHttpInfo (int? cartonContentId);
        /// <summary>
        /// Get the tags for a cartonContent.
        /// </summary>
        /// <remarks>
        /// Get all existing cartonContent tags.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cartonContentId">Id of the cartonContent to get tags for</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetCartonContentTagsAsync (int? cartonContentId);

        /// <summary>
        /// Get the tags for a cartonContent.
        /// </summary>
        /// <remarks>
        /// Get all existing cartonContent tags.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cartonContentId">Id of the cartonContent to get tags for</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetCartonContentTagsAsyncWithHttpInfo (int? cartonContentId);
        /// <summary>
        /// Get a duplicated a cartonContent by id
        /// </summary>
        /// <remarks>
        /// Returns a duplicated cartonContent identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cartonContentId">Id of the cartonContent to be duplicated.</param>
        /// <returns>Task of CartonContent</returns>
        System.Threading.Tasks.Task<CartonContent> GetDuplicateCartonContentByIdAsync (int? cartonContentId);

        /// <summary>
        /// Get a duplicated a cartonContent by id
        /// </summary>
        /// <remarks>
        /// Returns a duplicated cartonContent identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cartonContentId">Id of the cartonContent to be duplicated.</param>
        /// <returns>Task of ApiResponse (CartonContent)</returns>
        System.Threading.Tasks.Task<ApiResponse<CartonContent>> GetDuplicateCartonContentByIdAsyncWithHttpInfo (int? cartonContentId);
        /// <summary>
        /// Update a cartonContent
        /// </summary>
        /// <remarks>
        /// Updates an existing cartonContent using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">CartonContent to be updated.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateCartonContentAsync (CartonContent body);

        /// <summary>
        /// Update a cartonContent
        /// </summary>
        /// <remarks>
        /// Updates an existing cartonContent using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">CartonContent to be updated.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateCartonContentAsyncWithHttpInfo (CartonContent body);
        /// <summary>
        /// Update a cartonContent custom fields
        /// </summary>
        /// <remarks>
        /// Updates an existing cartonContent custom fields using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">CartonContent to be updated.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateCartonContentCustomFieldsAsync (CartonContent body);

        /// <summary>
        /// Update a cartonContent custom fields
        /// </summary>
        /// <remarks>
        /// Updates an existing cartonContent custom fields using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">CartonContent to be updated.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateCartonContentCustomFieldsAsyncWithHttpInfo (CartonContent body);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class CartonContentApi : ICartonContentApi
    {
        private Infoplus.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="CartonContentApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CartonContentApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = Infoplus.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CartonContentApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public CartonContentApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Infoplus.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Infoplus.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create a cartonContent Inserts a new cartonContent using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">CartonContent to be inserted.</param>
        /// <returns>CartonContent</returns>
        public CartonContent AddCartonContent (CartonContent body)
        {
             ApiResponse<CartonContent> localVarResponse = AddCartonContentWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a cartonContent Inserts a new cartonContent using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">CartonContent to be inserted.</param>
        /// <returns>ApiResponse of CartonContent</returns>
        public ApiResponse< CartonContent > AddCartonContentWithHttpInfo (CartonContent body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling CartonContentApi->AddCartonContent");

            var localVarPath = "/beta/cartonContent";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddCartonContent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CartonContent>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CartonContent) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CartonContent)));
        }

        /// <summary>
        /// Create a cartonContent Inserts a new cartonContent using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">CartonContent to be inserted.</param>
        /// <returns>Task of CartonContent</returns>
        public async System.Threading.Tasks.Task<CartonContent> AddCartonContentAsync (CartonContent body)
        {
             ApiResponse<CartonContent> localVarResponse = await AddCartonContentAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a cartonContent Inserts a new cartonContent using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">CartonContent to be inserted.</param>
        /// <returns>Task of ApiResponse (CartonContent)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CartonContent>> AddCartonContentAsyncWithHttpInfo (CartonContent body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling CartonContentApi->AddCartonContent");

            var localVarPath = "/beta/cartonContent";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddCartonContent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CartonContent>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CartonContent) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CartonContent)));
        }

        /// <summary>
        /// Add new audit for a cartonContent Adds an audit to an existing cartonContent.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cartonContentId">Id of the cartonContent to add an audit to</param>
        /// <param name="cartonContentAudit">The audit to add</param>
        /// <returns></returns>
        public void AddCartonContentAudit (int? cartonContentId, string cartonContentAudit)
        {
             AddCartonContentAuditWithHttpInfo(cartonContentId, cartonContentAudit);
        }

        /// <summary>
        /// Add new audit for a cartonContent Adds an audit to an existing cartonContent.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cartonContentId">Id of the cartonContent to add an audit to</param>
        /// <param name="cartonContentAudit">The audit to add</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AddCartonContentAuditWithHttpInfo (int? cartonContentId, string cartonContentAudit)
        {
            // verify the required parameter 'cartonContentId' is set
            if (cartonContentId == null)
                throw new ApiException(400, "Missing required parameter 'cartonContentId' when calling CartonContentApi->AddCartonContentAudit");
            // verify the required parameter 'cartonContentAudit' is set
            if (cartonContentAudit == null)
                throw new ApiException(400, "Missing required parameter 'cartonContentAudit' when calling CartonContentApi->AddCartonContentAudit");

            var localVarPath = "/beta/cartonContent/{cartonContentId}/audit/{cartonContentAudit}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (cartonContentId != null) localVarPathParams.Add("cartonContentId", Configuration.ApiClient.ParameterToString(cartonContentId)); // path parameter
            if (cartonContentAudit != null) localVarPathParams.Add("cartonContentAudit", Configuration.ApiClient.ParameterToString(cartonContentAudit)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddCartonContentAudit", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Add new audit for a cartonContent Adds an audit to an existing cartonContent.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cartonContentId">Id of the cartonContent to add an audit to</param>
        /// <param name="cartonContentAudit">The audit to add</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddCartonContentAuditAsync (int? cartonContentId, string cartonContentAudit)
        {
             await AddCartonContentAuditAsyncWithHttpInfo(cartonContentId, cartonContentAudit);

        }

        /// <summary>
        /// Add new audit for a cartonContent Adds an audit to an existing cartonContent.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cartonContentId">Id of the cartonContent to add an audit to</param>
        /// <param name="cartonContentAudit">The audit to add</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddCartonContentAuditAsyncWithHttpInfo (int? cartonContentId, string cartonContentAudit)
        {
            // verify the required parameter 'cartonContentId' is set
            if (cartonContentId == null)
                throw new ApiException(400, "Missing required parameter 'cartonContentId' when calling CartonContentApi->AddCartonContentAudit");
            // verify the required parameter 'cartonContentAudit' is set
            if (cartonContentAudit == null)
                throw new ApiException(400, "Missing required parameter 'cartonContentAudit' when calling CartonContentApi->AddCartonContentAudit");

            var localVarPath = "/beta/cartonContent/{cartonContentId}/audit/{cartonContentAudit}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (cartonContentId != null) localVarPathParams.Add("cartonContentId", Configuration.ApiClient.ParameterToString(cartonContentId)); // path parameter
            if (cartonContentAudit != null) localVarPathParams.Add("cartonContentAudit", Configuration.ApiClient.ParameterToString(cartonContentAudit)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddCartonContentAudit", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Attach a file to a cartonContent Adds a file to an existing cartonContent.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cartonContentId">Id of the cartonContent to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns></returns>
        public void AddCartonContentFile (int? cartonContentId, string fileName)
        {
             AddCartonContentFileWithHttpInfo(cartonContentId, fileName);
        }

        /// <summary>
        /// Attach a file to a cartonContent Adds a file to an existing cartonContent.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cartonContentId">Id of the cartonContent to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AddCartonContentFileWithHttpInfo (int? cartonContentId, string fileName)
        {
            // verify the required parameter 'cartonContentId' is set
            if (cartonContentId == null)
                throw new ApiException(400, "Missing required parameter 'cartonContentId' when calling CartonContentApi->AddCartonContentFile");
            // verify the required parameter 'fileName' is set
            if (fileName == null)
                throw new ApiException(400, "Missing required parameter 'fileName' when calling CartonContentApi->AddCartonContentFile");

            var localVarPath = "/beta/cartonContent/{cartonContentId}/file/{fileName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (cartonContentId != null) localVarPathParams.Add("cartonContentId", Configuration.ApiClient.ParameterToString(cartonContentId)); // path parameter
            if (fileName != null) localVarPathParams.Add("fileName", Configuration.ApiClient.ParameterToString(fileName)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddCartonContentFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Attach a file to a cartonContent Adds a file to an existing cartonContent.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cartonContentId">Id of the cartonContent to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddCartonContentFileAsync (int? cartonContentId, string fileName)
        {
             await AddCartonContentFileAsyncWithHttpInfo(cartonContentId, fileName);

        }

        /// <summary>
        /// Attach a file to a cartonContent Adds a file to an existing cartonContent.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cartonContentId">Id of the cartonContent to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddCartonContentFileAsyncWithHttpInfo (int? cartonContentId, string fileName)
        {
            // verify the required parameter 'cartonContentId' is set
            if (cartonContentId == null)
                throw new ApiException(400, "Missing required parameter 'cartonContentId' when calling CartonContentApi->AddCartonContentFile");
            // verify the required parameter 'fileName' is set
            if (fileName == null)
                throw new ApiException(400, "Missing required parameter 'fileName' when calling CartonContentApi->AddCartonContentFile");

            var localVarPath = "/beta/cartonContent/{cartonContentId}/file/{fileName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (cartonContentId != null) localVarPathParams.Add("cartonContentId", Configuration.ApiClient.ParameterToString(cartonContentId)); // path parameter
            if (fileName != null) localVarPathParams.Add("fileName", Configuration.ApiClient.ParameterToString(fileName)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddCartonContentFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Attach a file to a cartonContent by URL. Adds a file to an existing cartonContent by URL.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="cartonContentId">Id of the cartonContent to add an file to</param>
        /// <returns></returns>
        public void AddCartonContentFileByURL (RecordFile body, int? cartonContentId)
        {
             AddCartonContentFileByURLWithHttpInfo(body, cartonContentId);
        }

        /// <summary>
        /// Attach a file to a cartonContent by URL. Adds a file to an existing cartonContent by URL.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="cartonContentId">Id of the cartonContent to add an file to</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AddCartonContentFileByURLWithHttpInfo (RecordFile body, int? cartonContentId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling CartonContentApi->AddCartonContentFileByURL");
            // verify the required parameter 'cartonContentId' is set
            if (cartonContentId == null)
                throw new ApiException(400, "Missing required parameter 'cartonContentId' when calling CartonContentApi->AddCartonContentFileByURL");

            var localVarPath = "/beta/cartonContent/{cartonContentId}/file";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (cartonContentId != null) localVarPathParams.Add("cartonContentId", Configuration.ApiClient.ParameterToString(cartonContentId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddCartonContentFileByURL", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Attach a file to a cartonContent by URL. Adds a file to an existing cartonContent by URL.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="cartonContentId">Id of the cartonContent to add an file to</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddCartonContentFileByURLAsync (RecordFile body, int? cartonContentId)
        {
             await AddCartonContentFileByURLAsyncWithHttpInfo(body, cartonContentId);

        }

        /// <summary>
        /// Attach a file to a cartonContent by URL. Adds a file to an existing cartonContent by URL.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="cartonContentId">Id of the cartonContent to add an file to</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddCartonContentFileByURLAsyncWithHttpInfo (RecordFile body, int? cartonContentId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling CartonContentApi->AddCartonContentFileByURL");
            // verify the required parameter 'cartonContentId' is set
            if (cartonContentId == null)
                throw new ApiException(400, "Missing required parameter 'cartonContentId' when calling CartonContentApi->AddCartonContentFileByURL");

            var localVarPath = "/beta/cartonContent/{cartonContentId}/file";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (cartonContentId != null) localVarPathParams.Add("cartonContentId", Configuration.ApiClient.ParameterToString(cartonContentId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddCartonContentFileByURL", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Add new tags for a cartonContent. Adds a tag to an existing cartonContent.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cartonContentId">Id of the cartonContent to add a tag to</param>
        /// <param name="cartonContentTag">The tag to add</param>
        /// <returns></returns>
        public void AddCartonContentTag (int? cartonContentId, string cartonContentTag)
        {
             AddCartonContentTagWithHttpInfo(cartonContentId, cartonContentTag);
        }

        /// <summary>
        /// Add new tags for a cartonContent. Adds a tag to an existing cartonContent.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cartonContentId">Id of the cartonContent to add a tag to</param>
        /// <param name="cartonContentTag">The tag to add</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AddCartonContentTagWithHttpInfo (int? cartonContentId, string cartonContentTag)
        {
            // verify the required parameter 'cartonContentId' is set
            if (cartonContentId == null)
                throw new ApiException(400, "Missing required parameter 'cartonContentId' when calling CartonContentApi->AddCartonContentTag");
            // verify the required parameter 'cartonContentTag' is set
            if (cartonContentTag == null)
                throw new ApiException(400, "Missing required parameter 'cartonContentTag' when calling CartonContentApi->AddCartonContentTag");

            var localVarPath = "/beta/cartonContent/{cartonContentId}/tag/{cartonContentTag}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (cartonContentId != null) localVarPathParams.Add("cartonContentId", Configuration.ApiClient.ParameterToString(cartonContentId)); // path parameter
            if (cartonContentTag != null) localVarPathParams.Add("cartonContentTag", Configuration.ApiClient.ParameterToString(cartonContentTag)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddCartonContentTag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Add new tags for a cartonContent. Adds a tag to an existing cartonContent.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cartonContentId">Id of the cartonContent to add a tag to</param>
        /// <param name="cartonContentTag">The tag to add</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddCartonContentTagAsync (int? cartonContentId, string cartonContentTag)
        {
             await AddCartonContentTagAsyncWithHttpInfo(cartonContentId, cartonContentTag);

        }

        /// <summary>
        /// Add new tags for a cartonContent. Adds a tag to an existing cartonContent.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cartonContentId">Id of the cartonContent to add a tag to</param>
        /// <param name="cartonContentTag">The tag to add</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddCartonContentTagAsyncWithHttpInfo (int? cartonContentId, string cartonContentTag)
        {
            // verify the required parameter 'cartonContentId' is set
            if (cartonContentId == null)
                throw new ApiException(400, "Missing required parameter 'cartonContentId' when calling CartonContentApi->AddCartonContentTag");
            // verify the required parameter 'cartonContentTag' is set
            if (cartonContentTag == null)
                throw new ApiException(400, "Missing required parameter 'cartonContentTag' when calling CartonContentApi->AddCartonContentTag");

            var localVarPath = "/beta/cartonContent/{cartonContentId}/tag/{cartonContentTag}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (cartonContentId != null) localVarPathParams.Add("cartonContentId", Configuration.ApiClient.ParameterToString(cartonContentId)); // path parameter
            if (cartonContentTag != null) localVarPathParams.Add("cartonContentTag", Configuration.ApiClient.ParameterToString(cartonContentTag)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddCartonContentTag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a cartonContent Deletes the cartonContent identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cartonContentId">Id of the cartonContent to be deleted.</param>
        /// <returns></returns>
        public void DeleteCartonContent (int? cartonContentId)
        {
             DeleteCartonContentWithHttpInfo(cartonContentId);
        }

        /// <summary>
        /// Delete a cartonContent Deletes the cartonContent identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cartonContentId">Id of the cartonContent to be deleted.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteCartonContentWithHttpInfo (int? cartonContentId)
        {
            // verify the required parameter 'cartonContentId' is set
            if (cartonContentId == null)
                throw new ApiException(400, "Missing required parameter 'cartonContentId' when calling CartonContentApi->DeleteCartonContent");

            var localVarPath = "/beta/cartonContent/{cartonContentId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (cartonContentId != null) localVarPathParams.Add("cartonContentId", Configuration.ApiClient.ParameterToString(cartonContentId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteCartonContent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a cartonContent Deletes the cartonContent identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cartonContentId">Id of the cartonContent to be deleted.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteCartonContentAsync (int? cartonContentId)
        {
             await DeleteCartonContentAsyncWithHttpInfo(cartonContentId);

        }

        /// <summary>
        /// Delete a cartonContent Deletes the cartonContent identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cartonContentId">Id of the cartonContent to be deleted.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteCartonContentAsyncWithHttpInfo (int? cartonContentId)
        {
            // verify the required parameter 'cartonContentId' is set
            if (cartonContentId == null)
                throw new ApiException(400, "Missing required parameter 'cartonContentId' when calling CartonContentApi->DeleteCartonContent");

            var localVarPath = "/beta/cartonContent/{cartonContentId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (cartonContentId != null) localVarPathParams.Add("cartonContentId", Configuration.ApiClient.ParameterToString(cartonContentId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteCartonContent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a file for a cartonContent. Deletes an existing cartonContent file using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cartonContentId">Id of the cartonContent to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns></returns>
        public void DeleteCartonContentFile (int? cartonContentId, int? fileId)
        {
             DeleteCartonContentFileWithHttpInfo(cartonContentId, fileId);
        }

        /// <summary>
        /// Delete a file for a cartonContent. Deletes an existing cartonContent file using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cartonContentId">Id of the cartonContent to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteCartonContentFileWithHttpInfo (int? cartonContentId, int? fileId)
        {
            // verify the required parameter 'cartonContentId' is set
            if (cartonContentId == null)
                throw new ApiException(400, "Missing required parameter 'cartonContentId' when calling CartonContentApi->DeleteCartonContentFile");
            // verify the required parameter 'fileId' is set
            if (fileId == null)
                throw new ApiException(400, "Missing required parameter 'fileId' when calling CartonContentApi->DeleteCartonContentFile");

            var localVarPath = "/beta/cartonContent/{cartonContentId}/file/{fileId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (cartonContentId != null) localVarPathParams.Add("cartonContentId", Configuration.ApiClient.ParameterToString(cartonContentId)); // path parameter
            if (fileId != null) localVarPathParams.Add("fileId", Configuration.ApiClient.ParameterToString(fileId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteCartonContentFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a file for a cartonContent. Deletes an existing cartonContent file using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cartonContentId">Id of the cartonContent to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteCartonContentFileAsync (int? cartonContentId, int? fileId)
        {
             await DeleteCartonContentFileAsyncWithHttpInfo(cartonContentId, fileId);

        }

        /// <summary>
        /// Delete a file for a cartonContent. Deletes an existing cartonContent file using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cartonContentId">Id of the cartonContent to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteCartonContentFileAsyncWithHttpInfo (int? cartonContentId, int? fileId)
        {
            // verify the required parameter 'cartonContentId' is set
            if (cartonContentId == null)
                throw new ApiException(400, "Missing required parameter 'cartonContentId' when calling CartonContentApi->DeleteCartonContentFile");
            // verify the required parameter 'fileId' is set
            if (fileId == null)
                throw new ApiException(400, "Missing required parameter 'fileId' when calling CartonContentApi->DeleteCartonContentFile");

            var localVarPath = "/beta/cartonContent/{cartonContentId}/file/{fileId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (cartonContentId != null) localVarPathParams.Add("cartonContentId", Configuration.ApiClient.ParameterToString(cartonContentId)); // path parameter
            if (fileId != null) localVarPathParams.Add("fileId", Configuration.ApiClient.ParameterToString(fileId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteCartonContentFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a tag for a cartonContent. Deletes an existing cartonContent tag using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cartonContentId">Id of the cartonContent to remove tag from</param>
        /// <param name="cartonContentTag">The tag to delete</param>
        /// <returns></returns>
        public void DeleteCartonContentTag (int? cartonContentId, string cartonContentTag)
        {
             DeleteCartonContentTagWithHttpInfo(cartonContentId, cartonContentTag);
        }

        /// <summary>
        /// Delete a tag for a cartonContent. Deletes an existing cartonContent tag using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cartonContentId">Id of the cartonContent to remove tag from</param>
        /// <param name="cartonContentTag">The tag to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteCartonContentTagWithHttpInfo (int? cartonContentId, string cartonContentTag)
        {
            // verify the required parameter 'cartonContentId' is set
            if (cartonContentId == null)
                throw new ApiException(400, "Missing required parameter 'cartonContentId' when calling CartonContentApi->DeleteCartonContentTag");
            // verify the required parameter 'cartonContentTag' is set
            if (cartonContentTag == null)
                throw new ApiException(400, "Missing required parameter 'cartonContentTag' when calling CartonContentApi->DeleteCartonContentTag");

            var localVarPath = "/beta/cartonContent/{cartonContentId}/tag/{cartonContentTag}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (cartonContentId != null) localVarPathParams.Add("cartonContentId", Configuration.ApiClient.ParameterToString(cartonContentId)); // path parameter
            if (cartonContentTag != null) localVarPathParams.Add("cartonContentTag", Configuration.ApiClient.ParameterToString(cartonContentTag)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteCartonContentTag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a tag for a cartonContent. Deletes an existing cartonContent tag using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cartonContentId">Id of the cartonContent to remove tag from</param>
        /// <param name="cartonContentTag">The tag to delete</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteCartonContentTagAsync (int? cartonContentId, string cartonContentTag)
        {
             await DeleteCartonContentTagAsyncWithHttpInfo(cartonContentId, cartonContentTag);

        }

        /// <summary>
        /// Delete a tag for a cartonContent. Deletes an existing cartonContent tag using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cartonContentId">Id of the cartonContent to remove tag from</param>
        /// <param name="cartonContentTag">The tag to delete</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteCartonContentTagAsyncWithHttpInfo (int? cartonContentId, string cartonContentTag)
        {
            // verify the required parameter 'cartonContentId' is set
            if (cartonContentId == null)
                throw new ApiException(400, "Missing required parameter 'cartonContentId' when calling CartonContentApi->DeleteCartonContentTag");
            // verify the required parameter 'cartonContentTag' is set
            if (cartonContentTag == null)
                throw new ApiException(400, "Missing required parameter 'cartonContentTag' when calling CartonContentApi->DeleteCartonContentTag");

            var localVarPath = "/beta/cartonContent/{cartonContentId}/tag/{cartonContentTag}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (cartonContentId != null) localVarPathParams.Add("cartonContentId", Configuration.ApiClient.ParameterToString(cartonContentId)); // path parameter
            if (cartonContentTag != null) localVarPathParams.Add("cartonContentTag", Configuration.ApiClient.ParameterToString(cartonContentTag)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteCartonContentTag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Search cartonContents by filter Returns the list of cartonContents that match the given filter.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>List&lt;CartonContent&gt;</returns>
        public List<CartonContent> GetCartonContentByFilter (string filter = null, int? page = null, int? limit = null, string sort = null)
        {
             ApiResponse<List<CartonContent>> localVarResponse = GetCartonContentByFilterWithHttpInfo(filter, page, limit, sort);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Search cartonContents by filter Returns the list of cartonContents that match the given filter.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>ApiResponse of List&lt;CartonContent&gt;</returns>
        public ApiResponse< List<CartonContent> > GetCartonContentByFilterWithHttpInfo (string filter = null, int? page = null, int? limit = null, string sort = null)
        {

            var localVarPath = "/beta/cartonContent/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (filter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (page != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCartonContentByFilter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<CartonContent>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<CartonContent>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<CartonContent>)));
        }

        /// <summary>
        /// Search cartonContents by filter Returns the list of cartonContents that match the given filter.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>Task of List&lt;CartonContent&gt;</returns>
        public async System.Threading.Tasks.Task<List<CartonContent>> GetCartonContentByFilterAsync (string filter = null, int? page = null, int? limit = null, string sort = null)
        {
             ApiResponse<List<CartonContent>> localVarResponse = await GetCartonContentByFilterAsyncWithHttpInfo(filter, page, limit, sort);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Search cartonContents by filter Returns the list of cartonContents that match the given filter.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;CartonContent&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<CartonContent>>> GetCartonContentByFilterAsyncWithHttpInfo (string filter = null, int? page = null, int? limit = null, string sort = null)
        {

            var localVarPath = "/beta/cartonContent/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (filter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (page != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCartonContentByFilter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<CartonContent>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<CartonContent>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<CartonContent>)));
        }

        /// <summary>
        /// Get a cartonContent by id Returns the cartonContent identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cartonContentId">Id of the cartonContent to be returned.</param>
        /// <returns>CartonContent</returns>
        public CartonContent GetCartonContentById (int? cartonContentId)
        {
             ApiResponse<CartonContent> localVarResponse = GetCartonContentByIdWithHttpInfo(cartonContentId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a cartonContent by id Returns the cartonContent identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cartonContentId">Id of the cartonContent to be returned.</param>
        /// <returns>ApiResponse of CartonContent</returns>
        public ApiResponse< CartonContent > GetCartonContentByIdWithHttpInfo (int? cartonContentId)
        {
            // verify the required parameter 'cartonContentId' is set
            if (cartonContentId == null)
                throw new ApiException(400, "Missing required parameter 'cartonContentId' when calling CartonContentApi->GetCartonContentById");

            var localVarPath = "/beta/cartonContent/{cartonContentId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (cartonContentId != null) localVarPathParams.Add("cartonContentId", Configuration.ApiClient.ParameterToString(cartonContentId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCartonContentById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CartonContent>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CartonContent) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CartonContent)));
        }

        /// <summary>
        /// Get a cartonContent by id Returns the cartonContent identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cartonContentId">Id of the cartonContent to be returned.</param>
        /// <returns>Task of CartonContent</returns>
        public async System.Threading.Tasks.Task<CartonContent> GetCartonContentByIdAsync (int? cartonContentId)
        {
             ApiResponse<CartonContent> localVarResponse = await GetCartonContentByIdAsyncWithHttpInfo(cartonContentId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a cartonContent by id Returns the cartonContent identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cartonContentId">Id of the cartonContent to be returned.</param>
        /// <returns>Task of ApiResponse (CartonContent)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CartonContent>> GetCartonContentByIdAsyncWithHttpInfo (int? cartonContentId)
        {
            // verify the required parameter 'cartonContentId' is set
            if (cartonContentId == null)
                throw new ApiException(400, "Missing required parameter 'cartonContentId' when calling CartonContentApi->GetCartonContentById");

            var localVarPath = "/beta/cartonContent/{cartonContentId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (cartonContentId != null) localVarPathParams.Add("cartonContentId", Configuration.ApiClient.ParameterToString(cartonContentId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCartonContentById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CartonContent>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CartonContent) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CartonContent)));
        }

        /// <summary>
        /// Get the files for a cartonContent. Get all existing cartonContent files.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cartonContentId">Id of the cartonContent to get files for</param>
        /// <returns></returns>
        public void GetCartonContentFiles (int? cartonContentId)
        {
             GetCartonContentFilesWithHttpInfo(cartonContentId);
        }

        /// <summary>
        /// Get the files for a cartonContent. Get all existing cartonContent files.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cartonContentId">Id of the cartonContent to get files for</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GetCartonContentFilesWithHttpInfo (int? cartonContentId)
        {
            // verify the required parameter 'cartonContentId' is set
            if (cartonContentId == null)
                throw new ApiException(400, "Missing required parameter 'cartonContentId' when calling CartonContentApi->GetCartonContentFiles");

            var localVarPath = "/beta/cartonContent/{cartonContentId}/file";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (cartonContentId != null) localVarPathParams.Add("cartonContentId", Configuration.ApiClient.ParameterToString(cartonContentId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCartonContentFiles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get the files for a cartonContent. Get all existing cartonContent files.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cartonContentId">Id of the cartonContent to get files for</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetCartonContentFilesAsync (int? cartonContentId)
        {
             await GetCartonContentFilesAsyncWithHttpInfo(cartonContentId);

        }

        /// <summary>
        /// Get the files for a cartonContent. Get all existing cartonContent files.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cartonContentId">Id of the cartonContent to get files for</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetCartonContentFilesAsyncWithHttpInfo (int? cartonContentId)
        {
            // verify the required parameter 'cartonContentId' is set
            if (cartonContentId == null)
                throw new ApiException(400, "Missing required parameter 'cartonContentId' when calling CartonContentApi->GetCartonContentFiles");

            var localVarPath = "/beta/cartonContent/{cartonContentId}/file";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (cartonContentId != null) localVarPathParams.Add("cartonContentId", Configuration.ApiClient.ParameterToString(cartonContentId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCartonContentFiles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get the tags for a cartonContent. Get all existing cartonContent tags.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cartonContentId">Id of the cartonContent to get tags for</param>
        /// <returns></returns>
        public void GetCartonContentTags (int? cartonContentId)
        {
             GetCartonContentTagsWithHttpInfo(cartonContentId);
        }

        /// <summary>
        /// Get the tags for a cartonContent. Get all existing cartonContent tags.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cartonContentId">Id of the cartonContent to get tags for</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GetCartonContentTagsWithHttpInfo (int? cartonContentId)
        {
            // verify the required parameter 'cartonContentId' is set
            if (cartonContentId == null)
                throw new ApiException(400, "Missing required parameter 'cartonContentId' when calling CartonContentApi->GetCartonContentTags");

            var localVarPath = "/beta/cartonContent/{cartonContentId}/tag";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (cartonContentId != null) localVarPathParams.Add("cartonContentId", Configuration.ApiClient.ParameterToString(cartonContentId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCartonContentTags", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get the tags for a cartonContent. Get all existing cartonContent tags.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cartonContentId">Id of the cartonContent to get tags for</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetCartonContentTagsAsync (int? cartonContentId)
        {
             await GetCartonContentTagsAsyncWithHttpInfo(cartonContentId);

        }

        /// <summary>
        /// Get the tags for a cartonContent. Get all existing cartonContent tags.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cartonContentId">Id of the cartonContent to get tags for</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetCartonContentTagsAsyncWithHttpInfo (int? cartonContentId)
        {
            // verify the required parameter 'cartonContentId' is set
            if (cartonContentId == null)
                throw new ApiException(400, "Missing required parameter 'cartonContentId' when calling CartonContentApi->GetCartonContentTags");

            var localVarPath = "/beta/cartonContent/{cartonContentId}/tag";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (cartonContentId != null) localVarPathParams.Add("cartonContentId", Configuration.ApiClient.ParameterToString(cartonContentId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCartonContentTags", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get a duplicated a cartonContent by id Returns a duplicated cartonContent identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cartonContentId">Id of the cartonContent to be duplicated.</param>
        /// <returns>CartonContent</returns>
        public CartonContent GetDuplicateCartonContentById (int? cartonContentId)
        {
             ApiResponse<CartonContent> localVarResponse = GetDuplicateCartonContentByIdWithHttpInfo(cartonContentId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a duplicated a cartonContent by id Returns a duplicated cartonContent identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cartonContentId">Id of the cartonContent to be duplicated.</param>
        /// <returns>ApiResponse of CartonContent</returns>
        public ApiResponse< CartonContent > GetDuplicateCartonContentByIdWithHttpInfo (int? cartonContentId)
        {
            // verify the required parameter 'cartonContentId' is set
            if (cartonContentId == null)
                throw new ApiException(400, "Missing required parameter 'cartonContentId' when calling CartonContentApi->GetDuplicateCartonContentById");

            var localVarPath = "/beta/cartonContent/duplicate/{cartonContentId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (cartonContentId != null) localVarPathParams.Add("cartonContentId", Configuration.ApiClient.ParameterToString(cartonContentId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDuplicateCartonContentById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CartonContent>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CartonContent) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CartonContent)));
        }

        /// <summary>
        /// Get a duplicated a cartonContent by id Returns a duplicated cartonContent identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cartonContentId">Id of the cartonContent to be duplicated.</param>
        /// <returns>Task of CartonContent</returns>
        public async System.Threading.Tasks.Task<CartonContent> GetDuplicateCartonContentByIdAsync (int? cartonContentId)
        {
             ApiResponse<CartonContent> localVarResponse = await GetDuplicateCartonContentByIdAsyncWithHttpInfo(cartonContentId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a duplicated a cartonContent by id Returns a duplicated cartonContent identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cartonContentId">Id of the cartonContent to be duplicated.</param>
        /// <returns>Task of ApiResponse (CartonContent)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CartonContent>> GetDuplicateCartonContentByIdAsyncWithHttpInfo (int? cartonContentId)
        {
            // verify the required parameter 'cartonContentId' is set
            if (cartonContentId == null)
                throw new ApiException(400, "Missing required parameter 'cartonContentId' when calling CartonContentApi->GetDuplicateCartonContentById");

            var localVarPath = "/beta/cartonContent/duplicate/{cartonContentId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (cartonContentId != null) localVarPathParams.Add("cartonContentId", Configuration.ApiClient.ParameterToString(cartonContentId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDuplicateCartonContentById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CartonContent>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CartonContent) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CartonContent)));
        }

        /// <summary>
        /// Update a cartonContent Updates an existing cartonContent using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">CartonContent to be updated.</param>
        /// <returns></returns>
        public void UpdateCartonContent (CartonContent body)
        {
             UpdateCartonContentWithHttpInfo(body);
        }

        /// <summary>
        /// Update a cartonContent Updates an existing cartonContent using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">CartonContent to be updated.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateCartonContentWithHttpInfo (CartonContent body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling CartonContentApi->UpdateCartonContent");

            var localVarPath = "/beta/cartonContent";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateCartonContent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update a cartonContent Updates an existing cartonContent using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">CartonContent to be updated.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateCartonContentAsync (CartonContent body)
        {
             await UpdateCartonContentAsyncWithHttpInfo(body);

        }

        /// <summary>
        /// Update a cartonContent Updates an existing cartonContent using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">CartonContent to be updated.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateCartonContentAsyncWithHttpInfo (CartonContent body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling CartonContentApi->UpdateCartonContent");

            var localVarPath = "/beta/cartonContent";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateCartonContent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update a cartonContent custom fields Updates an existing cartonContent custom fields using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">CartonContent to be updated.</param>
        /// <returns></returns>
        public void UpdateCartonContentCustomFields (CartonContent body)
        {
             UpdateCartonContentCustomFieldsWithHttpInfo(body);
        }

        /// <summary>
        /// Update a cartonContent custom fields Updates an existing cartonContent custom fields using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">CartonContent to be updated.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateCartonContentCustomFieldsWithHttpInfo (CartonContent body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling CartonContentApi->UpdateCartonContentCustomFields");

            var localVarPath = "/beta/cartonContent/customFields";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateCartonContentCustomFields", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update a cartonContent custom fields Updates an existing cartonContent custom fields using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">CartonContent to be updated.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateCartonContentCustomFieldsAsync (CartonContent body)
        {
             await UpdateCartonContentCustomFieldsAsyncWithHttpInfo(body);

        }

        /// <summary>
        /// Update a cartonContent custom fields Updates an existing cartonContent custom fields using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">CartonContent to be updated.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateCartonContentCustomFieldsAsyncWithHttpInfo (CartonContent body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling CartonContentApi->UpdateCartonContentCustomFields");

            var localVarPath = "/beta/cartonContent/customFields";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateCartonContentCustomFields", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

    }
}
