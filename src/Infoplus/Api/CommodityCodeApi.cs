/* 
 * Infoplus API
 *
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Infoplus.Client;
using Infoplus.Model;

namespace Infoplus.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICommodityCodeApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Add new audit for a commodityCode
        /// </summary>
        /// <remarks>
        /// Adds an audit to an existing commodityCode.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commodityCodeId">Id of the commodityCode to add an audit to</param>
        /// <param name="commodityCodeAudit">The audit to add</param>
        /// <returns></returns>
        void AddCommodityCodeAudit (int? commodityCodeId, string commodityCodeAudit);

        /// <summary>
        /// Add new audit for a commodityCode
        /// </summary>
        /// <remarks>
        /// Adds an audit to an existing commodityCode.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commodityCodeId">Id of the commodityCode to add an audit to</param>
        /// <param name="commodityCodeAudit">The audit to add</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddCommodityCodeAuditWithHttpInfo (int? commodityCodeId, string commodityCodeAudit);
        /// <summary>
        /// Attach a file to a commodityCode
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing commodityCode.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commodityCodeId">Id of the commodityCode to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns></returns>
        void AddCommodityCodeFile (int? commodityCodeId, string fileName);

        /// <summary>
        /// Attach a file to a commodityCode
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing commodityCode.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commodityCodeId">Id of the commodityCode to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddCommodityCodeFileWithHttpInfo (int? commodityCodeId, string fileName);
        /// <summary>
        /// Attach a file to a commodityCode by URL.
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing commodityCode by URL.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="commodityCodeId">Id of the commodityCode to add an file to</param>
        /// <returns></returns>
        void AddCommodityCodeFileByURL (RecordFile body, int? commodityCodeId);

        /// <summary>
        /// Attach a file to a commodityCode by URL.
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing commodityCode by URL.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="commodityCodeId">Id of the commodityCode to add an file to</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddCommodityCodeFileByURLWithHttpInfo (RecordFile body, int? commodityCodeId);
        /// <summary>
        /// Add new tags for a commodityCode.
        /// </summary>
        /// <remarks>
        /// Adds a tag to an existing commodityCode.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commodityCodeId">Id of the commodityCode to add a tag to</param>
        /// <param name="commodityCodeTag">The tag to add</param>
        /// <returns></returns>
        void AddCommodityCodeTag (int? commodityCodeId, string commodityCodeTag);

        /// <summary>
        /// Add new tags for a commodityCode.
        /// </summary>
        /// <remarks>
        /// Adds a tag to an existing commodityCode.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commodityCodeId">Id of the commodityCode to add a tag to</param>
        /// <param name="commodityCodeTag">The tag to add</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddCommodityCodeTagWithHttpInfo (int? commodityCodeId, string commodityCodeTag);
        /// <summary>
        /// Delete a file for a commodityCode.
        /// </summary>
        /// <remarks>
        /// Deletes an existing commodityCode file using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commodityCodeId">Id of the commodityCode to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns></returns>
        void DeleteCommodityCodeFile (int? commodityCodeId, int? fileId);

        /// <summary>
        /// Delete a file for a commodityCode.
        /// </summary>
        /// <remarks>
        /// Deletes an existing commodityCode file using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commodityCodeId">Id of the commodityCode to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteCommodityCodeFileWithHttpInfo (int? commodityCodeId, int? fileId);
        /// <summary>
        /// Delete a tag for a commodityCode.
        /// </summary>
        /// <remarks>
        /// Deletes an existing commodityCode tag using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commodityCodeId">Id of the commodityCode to remove tag from</param>
        /// <param name="commodityCodeTag">The tag to delete</param>
        /// <returns></returns>
        void DeleteCommodityCodeTag (int? commodityCodeId, string commodityCodeTag);

        /// <summary>
        /// Delete a tag for a commodityCode.
        /// </summary>
        /// <remarks>
        /// Deletes an existing commodityCode tag using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commodityCodeId">Id of the commodityCode to remove tag from</param>
        /// <param name="commodityCodeTag">The tag to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteCommodityCodeTagWithHttpInfo (int? commodityCodeId, string commodityCodeTag);
        /// <summary>
        /// Search commodityCodes by filter
        /// </summary>
        /// <remarks>
        /// Returns the list of commodityCodes that match the given filter.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>List&lt;CommodityCode&gt;</returns>
        List<CommodityCode> GetCommodityCodeByFilter (string filter = null, int? page = null, int? limit = null, string sort = null);

        /// <summary>
        /// Search commodityCodes by filter
        /// </summary>
        /// <remarks>
        /// Returns the list of commodityCodes that match the given filter.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>ApiResponse of List&lt;CommodityCode&gt;</returns>
        ApiResponse<List<CommodityCode>> GetCommodityCodeByFilterWithHttpInfo (string filter = null, int? page = null, int? limit = null, string sort = null);
        /// <summary>
        /// Get a commodityCode by id
        /// </summary>
        /// <remarks>
        /// Returns the commodityCode identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commodityCodeId">Id of the commodityCode to be returned.</param>
        /// <returns>CommodityCode</returns>
        CommodityCode GetCommodityCodeById (int? commodityCodeId);

        /// <summary>
        /// Get a commodityCode by id
        /// </summary>
        /// <remarks>
        /// Returns the commodityCode identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commodityCodeId">Id of the commodityCode to be returned.</param>
        /// <returns>ApiResponse of CommodityCode</returns>
        ApiResponse<CommodityCode> GetCommodityCodeByIdWithHttpInfo (int? commodityCodeId);
        /// <summary>
        /// Get the files for a commodityCode.
        /// </summary>
        /// <remarks>
        /// Get all existing commodityCode files.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commodityCodeId">Id of the commodityCode to get files for</param>
        /// <returns></returns>
        void GetCommodityCodeFiles (int? commodityCodeId);

        /// <summary>
        /// Get the files for a commodityCode.
        /// </summary>
        /// <remarks>
        /// Get all existing commodityCode files.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commodityCodeId">Id of the commodityCode to get files for</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetCommodityCodeFilesWithHttpInfo (int? commodityCodeId);
        /// <summary>
        /// Get the tags for a commodityCode.
        /// </summary>
        /// <remarks>
        /// Get all existing commodityCode tags.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commodityCodeId">Id of the commodityCode to get tags for</param>
        /// <returns></returns>
        void GetCommodityCodeTags (int? commodityCodeId);

        /// <summary>
        /// Get the tags for a commodityCode.
        /// </summary>
        /// <remarks>
        /// Get all existing commodityCode tags.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commodityCodeId">Id of the commodityCode to get tags for</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetCommodityCodeTagsWithHttpInfo (int? commodityCodeId);
        /// <summary>
        /// Get a duplicated a commodityCode by id
        /// </summary>
        /// <remarks>
        /// Returns a duplicated commodityCode identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commodityCodeId">Id of the commodityCode to be duplicated.</param>
        /// <returns>CommodityCode</returns>
        CommodityCode GetDuplicateCommodityCodeById (int? commodityCodeId);

        /// <summary>
        /// Get a duplicated a commodityCode by id
        /// </summary>
        /// <remarks>
        /// Returns a duplicated commodityCode identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commodityCodeId">Id of the commodityCode to be duplicated.</param>
        /// <returns>ApiResponse of CommodityCode</returns>
        ApiResponse<CommodityCode> GetDuplicateCommodityCodeByIdWithHttpInfo (int? commodityCodeId);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Add new audit for a commodityCode
        /// </summary>
        /// <remarks>
        /// Adds an audit to an existing commodityCode.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commodityCodeId">Id of the commodityCode to add an audit to</param>
        /// <param name="commodityCodeAudit">The audit to add</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddCommodityCodeAuditAsync (int? commodityCodeId, string commodityCodeAudit);

        /// <summary>
        /// Add new audit for a commodityCode
        /// </summary>
        /// <remarks>
        /// Adds an audit to an existing commodityCode.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commodityCodeId">Id of the commodityCode to add an audit to</param>
        /// <param name="commodityCodeAudit">The audit to add</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddCommodityCodeAuditAsyncWithHttpInfo (int? commodityCodeId, string commodityCodeAudit);
        /// <summary>
        /// Attach a file to a commodityCode
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing commodityCode.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commodityCodeId">Id of the commodityCode to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddCommodityCodeFileAsync (int? commodityCodeId, string fileName);

        /// <summary>
        /// Attach a file to a commodityCode
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing commodityCode.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commodityCodeId">Id of the commodityCode to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddCommodityCodeFileAsyncWithHttpInfo (int? commodityCodeId, string fileName);
        /// <summary>
        /// Attach a file to a commodityCode by URL.
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing commodityCode by URL.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="commodityCodeId">Id of the commodityCode to add an file to</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddCommodityCodeFileByURLAsync (RecordFile body, int? commodityCodeId);

        /// <summary>
        /// Attach a file to a commodityCode by URL.
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing commodityCode by URL.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="commodityCodeId">Id of the commodityCode to add an file to</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddCommodityCodeFileByURLAsyncWithHttpInfo (RecordFile body, int? commodityCodeId);
        /// <summary>
        /// Add new tags for a commodityCode.
        /// </summary>
        /// <remarks>
        /// Adds a tag to an existing commodityCode.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commodityCodeId">Id of the commodityCode to add a tag to</param>
        /// <param name="commodityCodeTag">The tag to add</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddCommodityCodeTagAsync (int? commodityCodeId, string commodityCodeTag);

        /// <summary>
        /// Add new tags for a commodityCode.
        /// </summary>
        /// <remarks>
        /// Adds a tag to an existing commodityCode.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commodityCodeId">Id of the commodityCode to add a tag to</param>
        /// <param name="commodityCodeTag">The tag to add</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddCommodityCodeTagAsyncWithHttpInfo (int? commodityCodeId, string commodityCodeTag);
        /// <summary>
        /// Delete a file for a commodityCode.
        /// </summary>
        /// <remarks>
        /// Deletes an existing commodityCode file using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commodityCodeId">Id of the commodityCode to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteCommodityCodeFileAsync (int? commodityCodeId, int? fileId);

        /// <summary>
        /// Delete a file for a commodityCode.
        /// </summary>
        /// <remarks>
        /// Deletes an existing commodityCode file using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commodityCodeId">Id of the commodityCode to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteCommodityCodeFileAsyncWithHttpInfo (int? commodityCodeId, int? fileId);
        /// <summary>
        /// Delete a tag for a commodityCode.
        /// </summary>
        /// <remarks>
        /// Deletes an existing commodityCode tag using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commodityCodeId">Id of the commodityCode to remove tag from</param>
        /// <param name="commodityCodeTag">The tag to delete</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteCommodityCodeTagAsync (int? commodityCodeId, string commodityCodeTag);

        /// <summary>
        /// Delete a tag for a commodityCode.
        /// </summary>
        /// <remarks>
        /// Deletes an existing commodityCode tag using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commodityCodeId">Id of the commodityCode to remove tag from</param>
        /// <param name="commodityCodeTag">The tag to delete</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteCommodityCodeTagAsyncWithHttpInfo (int? commodityCodeId, string commodityCodeTag);
        /// <summary>
        /// Search commodityCodes by filter
        /// </summary>
        /// <remarks>
        /// Returns the list of commodityCodes that match the given filter.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>Task of List&lt;CommodityCode&gt;</returns>
        System.Threading.Tasks.Task<List<CommodityCode>> GetCommodityCodeByFilterAsync (string filter = null, int? page = null, int? limit = null, string sort = null);

        /// <summary>
        /// Search commodityCodes by filter
        /// </summary>
        /// <remarks>
        /// Returns the list of commodityCodes that match the given filter.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;CommodityCode&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<CommodityCode>>> GetCommodityCodeByFilterAsyncWithHttpInfo (string filter = null, int? page = null, int? limit = null, string sort = null);
        /// <summary>
        /// Get a commodityCode by id
        /// </summary>
        /// <remarks>
        /// Returns the commodityCode identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commodityCodeId">Id of the commodityCode to be returned.</param>
        /// <returns>Task of CommodityCode</returns>
        System.Threading.Tasks.Task<CommodityCode> GetCommodityCodeByIdAsync (int? commodityCodeId);

        /// <summary>
        /// Get a commodityCode by id
        /// </summary>
        /// <remarks>
        /// Returns the commodityCode identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commodityCodeId">Id of the commodityCode to be returned.</param>
        /// <returns>Task of ApiResponse (CommodityCode)</returns>
        System.Threading.Tasks.Task<ApiResponse<CommodityCode>> GetCommodityCodeByIdAsyncWithHttpInfo (int? commodityCodeId);
        /// <summary>
        /// Get the files for a commodityCode.
        /// </summary>
        /// <remarks>
        /// Get all existing commodityCode files.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commodityCodeId">Id of the commodityCode to get files for</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetCommodityCodeFilesAsync (int? commodityCodeId);

        /// <summary>
        /// Get the files for a commodityCode.
        /// </summary>
        /// <remarks>
        /// Get all existing commodityCode files.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commodityCodeId">Id of the commodityCode to get files for</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetCommodityCodeFilesAsyncWithHttpInfo (int? commodityCodeId);
        /// <summary>
        /// Get the tags for a commodityCode.
        /// </summary>
        /// <remarks>
        /// Get all existing commodityCode tags.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commodityCodeId">Id of the commodityCode to get tags for</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetCommodityCodeTagsAsync (int? commodityCodeId);

        /// <summary>
        /// Get the tags for a commodityCode.
        /// </summary>
        /// <remarks>
        /// Get all existing commodityCode tags.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commodityCodeId">Id of the commodityCode to get tags for</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetCommodityCodeTagsAsyncWithHttpInfo (int? commodityCodeId);
        /// <summary>
        /// Get a duplicated a commodityCode by id
        /// </summary>
        /// <remarks>
        /// Returns a duplicated commodityCode identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commodityCodeId">Id of the commodityCode to be duplicated.</param>
        /// <returns>Task of CommodityCode</returns>
        System.Threading.Tasks.Task<CommodityCode> GetDuplicateCommodityCodeByIdAsync (int? commodityCodeId);

        /// <summary>
        /// Get a duplicated a commodityCode by id
        /// </summary>
        /// <remarks>
        /// Returns a duplicated commodityCode identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commodityCodeId">Id of the commodityCode to be duplicated.</param>
        /// <returns>Task of ApiResponse (CommodityCode)</returns>
        System.Threading.Tasks.Task<ApiResponse<CommodityCode>> GetDuplicateCommodityCodeByIdAsyncWithHttpInfo (int? commodityCodeId);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class CommodityCodeApi : ICommodityCodeApi
    {
        private Infoplus.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="CommodityCodeApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CommodityCodeApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = Infoplus.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CommodityCodeApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public CommodityCodeApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Infoplus.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Infoplus.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Add new audit for a commodityCode Adds an audit to an existing commodityCode.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commodityCodeId">Id of the commodityCode to add an audit to</param>
        /// <param name="commodityCodeAudit">The audit to add</param>
        /// <returns></returns>
        public void AddCommodityCodeAudit (int? commodityCodeId, string commodityCodeAudit)
        {
             AddCommodityCodeAuditWithHttpInfo(commodityCodeId, commodityCodeAudit);
        }

        /// <summary>
        /// Add new audit for a commodityCode Adds an audit to an existing commodityCode.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commodityCodeId">Id of the commodityCode to add an audit to</param>
        /// <param name="commodityCodeAudit">The audit to add</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AddCommodityCodeAuditWithHttpInfo (int? commodityCodeId, string commodityCodeAudit)
        {
            // verify the required parameter 'commodityCodeId' is set
            if (commodityCodeId == null)
                throw new ApiException(400, "Missing required parameter 'commodityCodeId' when calling CommodityCodeApi->AddCommodityCodeAudit");
            // verify the required parameter 'commodityCodeAudit' is set
            if (commodityCodeAudit == null)
                throw new ApiException(400, "Missing required parameter 'commodityCodeAudit' when calling CommodityCodeApi->AddCommodityCodeAudit");

            var localVarPath = "/beta/commodityCode/{commodityCodeId}/audit/{commodityCodeAudit}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (commodityCodeId != null) localVarPathParams.Add("commodityCodeId", Configuration.ApiClient.ParameterToString(commodityCodeId)); // path parameter
            if (commodityCodeAudit != null) localVarPathParams.Add("commodityCodeAudit", Configuration.ApiClient.ParameterToString(commodityCodeAudit)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddCommodityCodeAudit", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Add new audit for a commodityCode Adds an audit to an existing commodityCode.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commodityCodeId">Id of the commodityCode to add an audit to</param>
        /// <param name="commodityCodeAudit">The audit to add</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddCommodityCodeAuditAsync (int? commodityCodeId, string commodityCodeAudit)
        {
             await AddCommodityCodeAuditAsyncWithHttpInfo(commodityCodeId, commodityCodeAudit);

        }

        /// <summary>
        /// Add new audit for a commodityCode Adds an audit to an existing commodityCode.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commodityCodeId">Id of the commodityCode to add an audit to</param>
        /// <param name="commodityCodeAudit">The audit to add</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddCommodityCodeAuditAsyncWithHttpInfo (int? commodityCodeId, string commodityCodeAudit)
        {
            // verify the required parameter 'commodityCodeId' is set
            if (commodityCodeId == null)
                throw new ApiException(400, "Missing required parameter 'commodityCodeId' when calling CommodityCodeApi->AddCommodityCodeAudit");
            // verify the required parameter 'commodityCodeAudit' is set
            if (commodityCodeAudit == null)
                throw new ApiException(400, "Missing required parameter 'commodityCodeAudit' when calling CommodityCodeApi->AddCommodityCodeAudit");

            var localVarPath = "/beta/commodityCode/{commodityCodeId}/audit/{commodityCodeAudit}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (commodityCodeId != null) localVarPathParams.Add("commodityCodeId", Configuration.ApiClient.ParameterToString(commodityCodeId)); // path parameter
            if (commodityCodeAudit != null) localVarPathParams.Add("commodityCodeAudit", Configuration.ApiClient.ParameterToString(commodityCodeAudit)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddCommodityCodeAudit", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Attach a file to a commodityCode Adds a file to an existing commodityCode.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commodityCodeId">Id of the commodityCode to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns></returns>
        public void AddCommodityCodeFile (int? commodityCodeId, string fileName)
        {
             AddCommodityCodeFileWithHttpInfo(commodityCodeId, fileName);
        }

        /// <summary>
        /// Attach a file to a commodityCode Adds a file to an existing commodityCode.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commodityCodeId">Id of the commodityCode to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AddCommodityCodeFileWithHttpInfo (int? commodityCodeId, string fileName)
        {
            // verify the required parameter 'commodityCodeId' is set
            if (commodityCodeId == null)
                throw new ApiException(400, "Missing required parameter 'commodityCodeId' when calling CommodityCodeApi->AddCommodityCodeFile");
            // verify the required parameter 'fileName' is set
            if (fileName == null)
                throw new ApiException(400, "Missing required parameter 'fileName' when calling CommodityCodeApi->AddCommodityCodeFile");

            var localVarPath = "/beta/commodityCode/{commodityCodeId}/file/{fileName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (commodityCodeId != null) localVarPathParams.Add("commodityCodeId", Configuration.ApiClient.ParameterToString(commodityCodeId)); // path parameter
            if (fileName != null) localVarPathParams.Add("fileName", Configuration.ApiClient.ParameterToString(fileName)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddCommodityCodeFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Attach a file to a commodityCode Adds a file to an existing commodityCode.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commodityCodeId">Id of the commodityCode to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddCommodityCodeFileAsync (int? commodityCodeId, string fileName)
        {
             await AddCommodityCodeFileAsyncWithHttpInfo(commodityCodeId, fileName);

        }

        /// <summary>
        /// Attach a file to a commodityCode Adds a file to an existing commodityCode.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commodityCodeId">Id of the commodityCode to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddCommodityCodeFileAsyncWithHttpInfo (int? commodityCodeId, string fileName)
        {
            // verify the required parameter 'commodityCodeId' is set
            if (commodityCodeId == null)
                throw new ApiException(400, "Missing required parameter 'commodityCodeId' when calling CommodityCodeApi->AddCommodityCodeFile");
            // verify the required parameter 'fileName' is set
            if (fileName == null)
                throw new ApiException(400, "Missing required parameter 'fileName' when calling CommodityCodeApi->AddCommodityCodeFile");

            var localVarPath = "/beta/commodityCode/{commodityCodeId}/file/{fileName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (commodityCodeId != null) localVarPathParams.Add("commodityCodeId", Configuration.ApiClient.ParameterToString(commodityCodeId)); // path parameter
            if (fileName != null) localVarPathParams.Add("fileName", Configuration.ApiClient.ParameterToString(fileName)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddCommodityCodeFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Attach a file to a commodityCode by URL. Adds a file to an existing commodityCode by URL.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="commodityCodeId">Id of the commodityCode to add an file to</param>
        /// <returns></returns>
        public void AddCommodityCodeFileByURL (RecordFile body, int? commodityCodeId)
        {
             AddCommodityCodeFileByURLWithHttpInfo(body, commodityCodeId);
        }

        /// <summary>
        /// Attach a file to a commodityCode by URL. Adds a file to an existing commodityCode by URL.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="commodityCodeId">Id of the commodityCode to add an file to</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AddCommodityCodeFileByURLWithHttpInfo (RecordFile body, int? commodityCodeId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling CommodityCodeApi->AddCommodityCodeFileByURL");
            // verify the required parameter 'commodityCodeId' is set
            if (commodityCodeId == null)
                throw new ApiException(400, "Missing required parameter 'commodityCodeId' when calling CommodityCodeApi->AddCommodityCodeFileByURL");

            var localVarPath = "/beta/commodityCode/{commodityCodeId}/file";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (commodityCodeId != null) localVarPathParams.Add("commodityCodeId", Configuration.ApiClient.ParameterToString(commodityCodeId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddCommodityCodeFileByURL", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Attach a file to a commodityCode by URL. Adds a file to an existing commodityCode by URL.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="commodityCodeId">Id of the commodityCode to add an file to</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddCommodityCodeFileByURLAsync (RecordFile body, int? commodityCodeId)
        {
             await AddCommodityCodeFileByURLAsyncWithHttpInfo(body, commodityCodeId);

        }

        /// <summary>
        /// Attach a file to a commodityCode by URL. Adds a file to an existing commodityCode by URL.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="commodityCodeId">Id of the commodityCode to add an file to</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddCommodityCodeFileByURLAsyncWithHttpInfo (RecordFile body, int? commodityCodeId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling CommodityCodeApi->AddCommodityCodeFileByURL");
            // verify the required parameter 'commodityCodeId' is set
            if (commodityCodeId == null)
                throw new ApiException(400, "Missing required parameter 'commodityCodeId' when calling CommodityCodeApi->AddCommodityCodeFileByURL");

            var localVarPath = "/beta/commodityCode/{commodityCodeId}/file";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (commodityCodeId != null) localVarPathParams.Add("commodityCodeId", Configuration.ApiClient.ParameterToString(commodityCodeId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddCommodityCodeFileByURL", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Add new tags for a commodityCode. Adds a tag to an existing commodityCode.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commodityCodeId">Id of the commodityCode to add a tag to</param>
        /// <param name="commodityCodeTag">The tag to add</param>
        /// <returns></returns>
        public void AddCommodityCodeTag (int? commodityCodeId, string commodityCodeTag)
        {
             AddCommodityCodeTagWithHttpInfo(commodityCodeId, commodityCodeTag);
        }

        /// <summary>
        /// Add new tags for a commodityCode. Adds a tag to an existing commodityCode.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commodityCodeId">Id of the commodityCode to add a tag to</param>
        /// <param name="commodityCodeTag">The tag to add</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AddCommodityCodeTagWithHttpInfo (int? commodityCodeId, string commodityCodeTag)
        {
            // verify the required parameter 'commodityCodeId' is set
            if (commodityCodeId == null)
                throw new ApiException(400, "Missing required parameter 'commodityCodeId' when calling CommodityCodeApi->AddCommodityCodeTag");
            // verify the required parameter 'commodityCodeTag' is set
            if (commodityCodeTag == null)
                throw new ApiException(400, "Missing required parameter 'commodityCodeTag' when calling CommodityCodeApi->AddCommodityCodeTag");

            var localVarPath = "/beta/commodityCode/{commodityCodeId}/tag/{commodityCodeTag}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (commodityCodeId != null) localVarPathParams.Add("commodityCodeId", Configuration.ApiClient.ParameterToString(commodityCodeId)); // path parameter
            if (commodityCodeTag != null) localVarPathParams.Add("commodityCodeTag", Configuration.ApiClient.ParameterToString(commodityCodeTag)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddCommodityCodeTag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Add new tags for a commodityCode. Adds a tag to an existing commodityCode.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commodityCodeId">Id of the commodityCode to add a tag to</param>
        /// <param name="commodityCodeTag">The tag to add</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddCommodityCodeTagAsync (int? commodityCodeId, string commodityCodeTag)
        {
             await AddCommodityCodeTagAsyncWithHttpInfo(commodityCodeId, commodityCodeTag);

        }

        /// <summary>
        /// Add new tags for a commodityCode. Adds a tag to an existing commodityCode.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commodityCodeId">Id of the commodityCode to add a tag to</param>
        /// <param name="commodityCodeTag">The tag to add</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddCommodityCodeTagAsyncWithHttpInfo (int? commodityCodeId, string commodityCodeTag)
        {
            // verify the required parameter 'commodityCodeId' is set
            if (commodityCodeId == null)
                throw new ApiException(400, "Missing required parameter 'commodityCodeId' when calling CommodityCodeApi->AddCommodityCodeTag");
            // verify the required parameter 'commodityCodeTag' is set
            if (commodityCodeTag == null)
                throw new ApiException(400, "Missing required parameter 'commodityCodeTag' when calling CommodityCodeApi->AddCommodityCodeTag");

            var localVarPath = "/beta/commodityCode/{commodityCodeId}/tag/{commodityCodeTag}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (commodityCodeId != null) localVarPathParams.Add("commodityCodeId", Configuration.ApiClient.ParameterToString(commodityCodeId)); // path parameter
            if (commodityCodeTag != null) localVarPathParams.Add("commodityCodeTag", Configuration.ApiClient.ParameterToString(commodityCodeTag)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddCommodityCodeTag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a file for a commodityCode. Deletes an existing commodityCode file using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commodityCodeId">Id of the commodityCode to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns></returns>
        public void DeleteCommodityCodeFile (int? commodityCodeId, int? fileId)
        {
             DeleteCommodityCodeFileWithHttpInfo(commodityCodeId, fileId);
        }

        /// <summary>
        /// Delete a file for a commodityCode. Deletes an existing commodityCode file using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commodityCodeId">Id of the commodityCode to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteCommodityCodeFileWithHttpInfo (int? commodityCodeId, int? fileId)
        {
            // verify the required parameter 'commodityCodeId' is set
            if (commodityCodeId == null)
                throw new ApiException(400, "Missing required parameter 'commodityCodeId' when calling CommodityCodeApi->DeleteCommodityCodeFile");
            // verify the required parameter 'fileId' is set
            if (fileId == null)
                throw new ApiException(400, "Missing required parameter 'fileId' when calling CommodityCodeApi->DeleteCommodityCodeFile");

            var localVarPath = "/beta/commodityCode/{commodityCodeId}/file/{fileId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (commodityCodeId != null) localVarPathParams.Add("commodityCodeId", Configuration.ApiClient.ParameterToString(commodityCodeId)); // path parameter
            if (fileId != null) localVarPathParams.Add("fileId", Configuration.ApiClient.ParameterToString(fileId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteCommodityCodeFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a file for a commodityCode. Deletes an existing commodityCode file using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commodityCodeId">Id of the commodityCode to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteCommodityCodeFileAsync (int? commodityCodeId, int? fileId)
        {
             await DeleteCommodityCodeFileAsyncWithHttpInfo(commodityCodeId, fileId);

        }

        /// <summary>
        /// Delete a file for a commodityCode. Deletes an existing commodityCode file using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commodityCodeId">Id of the commodityCode to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteCommodityCodeFileAsyncWithHttpInfo (int? commodityCodeId, int? fileId)
        {
            // verify the required parameter 'commodityCodeId' is set
            if (commodityCodeId == null)
                throw new ApiException(400, "Missing required parameter 'commodityCodeId' when calling CommodityCodeApi->DeleteCommodityCodeFile");
            // verify the required parameter 'fileId' is set
            if (fileId == null)
                throw new ApiException(400, "Missing required parameter 'fileId' when calling CommodityCodeApi->DeleteCommodityCodeFile");

            var localVarPath = "/beta/commodityCode/{commodityCodeId}/file/{fileId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (commodityCodeId != null) localVarPathParams.Add("commodityCodeId", Configuration.ApiClient.ParameterToString(commodityCodeId)); // path parameter
            if (fileId != null) localVarPathParams.Add("fileId", Configuration.ApiClient.ParameterToString(fileId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteCommodityCodeFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a tag for a commodityCode. Deletes an existing commodityCode tag using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commodityCodeId">Id of the commodityCode to remove tag from</param>
        /// <param name="commodityCodeTag">The tag to delete</param>
        /// <returns></returns>
        public void DeleteCommodityCodeTag (int? commodityCodeId, string commodityCodeTag)
        {
             DeleteCommodityCodeTagWithHttpInfo(commodityCodeId, commodityCodeTag);
        }

        /// <summary>
        /// Delete a tag for a commodityCode. Deletes an existing commodityCode tag using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commodityCodeId">Id of the commodityCode to remove tag from</param>
        /// <param name="commodityCodeTag">The tag to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteCommodityCodeTagWithHttpInfo (int? commodityCodeId, string commodityCodeTag)
        {
            // verify the required parameter 'commodityCodeId' is set
            if (commodityCodeId == null)
                throw new ApiException(400, "Missing required parameter 'commodityCodeId' when calling CommodityCodeApi->DeleteCommodityCodeTag");
            // verify the required parameter 'commodityCodeTag' is set
            if (commodityCodeTag == null)
                throw new ApiException(400, "Missing required parameter 'commodityCodeTag' when calling CommodityCodeApi->DeleteCommodityCodeTag");

            var localVarPath = "/beta/commodityCode/{commodityCodeId}/tag/{commodityCodeTag}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (commodityCodeId != null) localVarPathParams.Add("commodityCodeId", Configuration.ApiClient.ParameterToString(commodityCodeId)); // path parameter
            if (commodityCodeTag != null) localVarPathParams.Add("commodityCodeTag", Configuration.ApiClient.ParameterToString(commodityCodeTag)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteCommodityCodeTag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a tag for a commodityCode. Deletes an existing commodityCode tag using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commodityCodeId">Id of the commodityCode to remove tag from</param>
        /// <param name="commodityCodeTag">The tag to delete</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteCommodityCodeTagAsync (int? commodityCodeId, string commodityCodeTag)
        {
             await DeleteCommodityCodeTagAsyncWithHttpInfo(commodityCodeId, commodityCodeTag);

        }

        /// <summary>
        /// Delete a tag for a commodityCode. Deletes an existing commodityCode tag using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commodityCodeId">Id of the commodityCode to remove tag from</param>
        /// <param name="commodityCodeTag">The tag to delete</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteCommodityCodeTagAsyncWithHttpInfo (int? commodityCodeId, string commodityCodeTag)
        {
            // verify the required parameter 'commodityCodeId' is set
            if (commodityCodeId == null)
                throw new ApiException(400, "Missing required parameter 'commodityCodeId' when calling CommodityCodeApi->DeleteCommodityCodeTag");
            // verify the required parameter 'commodityCodeTag' is set
            if (commodityCodeTag == null)
                throw new ApiException(400, "Missing required parameter 'commodityCodeTag' when calling CommodityCodeApi->DeleteCommodityCodeTag");

            var localVarPath = "/beta/commodityCode/{commodityCodeId}/tag/{commodityCodeTag}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (commodityCodeId != null) localVarPathParams.Add("commodityCodeId", Configuration.ApiClient.ParameterToString(commodityCodeId)); // path parameter
            if (commodityCodeTag != null) localVarPathParams.Add("commodityCodeTag", Configuration.ApiClient.ParameterToString(commodityCodeTag)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteCommodityCodeTag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Search commodityCodes by filter Returns the list of commodityCodes that match the given filter.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>List&lt;CommodityCode&gt;</returns>
        public List<CommodityCode> GetCommodityCodeByFilter (string filter = null, int? page = null, int? limit = null, string sort = null)
        {
             ApiResponse<List<CommodityCode>> localVarResponse = GetCommodityCodeByFilterWithHttpInfo(filter, page, limit, sort);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Search commodityCodes by filter Returns the list of commodityCodes that match the given filter.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>ApiResponse of List&lt;CommodityCode&gt;</returns>
        public ApiResponse< List<CommodityCode> > GetCommodityCodeByFilterWithHttpInfo (string filter = null, int? page = null, int? limit = null, string sort = null)
        {

            var localVarPath = "/beta/commodityCode/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (filter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (page != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCommodityCodeByFilter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<CommodityCode>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<CommodityCode>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<CommodityCode>)));
        }

        /// <summary>
        /// Search commodityCodes by filter Returns the list of commodityCodes that match the given filter.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>Task of List&lt;CommodityCode&gt;</returns>
        public async System.Threading.Tasks.Task<List<CommodityCode>> GetCommodityCodeByFilterAsync (string filter = null, int? page = null, int? limit = null, string sort = null)
        {
             ApiResponse<List<CommodityCode>> localVarResponse = await GetCommodityCodeByFilterAsyncWithHttpInfo(filter, page, limit, sort);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Search commodityCodes by filter Returns the list of commodityCodes that match the given filter.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;CommodityCode&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<CommodityCode>>> GetCommodityCodeByFilterAsyncWithHttpInfo (string filter = null, int? page = null, int? limit = null, string sort = null)
        {

            var localVarPath = "/beta/commodityCode/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (filter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (page != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCommodityCodeByFilter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<CommodityCode>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<CommodityCode>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<CommodityCode>)));
        }

        /// <summary>
        /// Get a commodityCode by id Returns the commodityCode identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commodityCodeId">Id of the commodityCode to be returned.</param>
        /// <returns>CommodityCode</returns>
        public CommodityCode GetCommodityCodeById (int? commodityCodeId)
        {
             ApiResponse<CommodityCode> localVarResponse = GetCommodityCodeByIdWithHttpInfo(commodityCodeId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a commodityCode by id Returns the commodityCode identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commodityCodeId">Id of the commodityCode to be returned.</param>
        /// <returns>ApiResponse of CommodityCode</returns>
        public ApiResponse< CommodityCode > GetCommodityCodeByIdWithHttpInfo (int? commodityCodeId)
        {
            // verify the required parameter 'commodityCodeId' is set
            if (commodityCodeId == null)
                throw new ApiException(400, "Missing required parameter 'commodityCodeId' when calling CommodityCodeApi->GetCommodityCodeById");

            var localVarPath = "/beta/commodityCode/{commodityCodeId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (commodityCodeId != null) localVarPathParams.Add("commodityCodeId", Configuration.ApiClient.ParameterToString(commodityCodeId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCommodityCodeById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CommodityCode>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CommodityCode) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CommodityCode)));
        }

        /// <summary>
        /// Get a commodityCode by id Returns the commodityCode identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commodityCodeId">Id of the commodityCode to be returned.</param>
        /// <returns>Task of CommodityCode</returns>
        public async System.Threading.Tasks.Task<CommodityCode> GetCommodityCodeByIdAsync (int? commodityCodeId)
        {
             ApiResponse<CommodityCode> localVarResponse = await GetCommodityCodeByIdAsyncWithHttpInfo(commodityCodeId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a commodityCode by id Returns the commodityCode identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commodityCodeId">Id of the commodityCode to be returned.</param>
        /// <returns>Task of ApiResponse (CommodityCode)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CommodityCode>> GetCommodityCodeByIdAsyncWithHttpInfo (int? commodityCodeId)
        {
            // verify the required parameter 'commodityCodeId' is set
            if (commodityCodeId == null)
                throw new ApiException(400, "Missing required parameter 'commodityCodeId' when calling CommodityCodeApi->GetCommodityCodeById");

            var localVarPath = "/beta/commodityCode/{commodityCodeId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (commodityCodeId != null) localVarPathParams.Add("commodityCodeId", Configuration.ApiClient.ParameterToString(commodityCodeId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCommodityCodeById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CommodityCode>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CommodityCode) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CommodityCode)));
        }

        /// <summary>
        /// Get the files for a commodityCode. Get all existing commodityCode files.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commodityCodeId">Id of the commodityCode to get files for</param>
        /// <returns></returns>
        public void GetCommodityCodeFiles (int? commodityCodeId)
        {
             GetCommodityCodeFilesWithHttpInfo(commodityCodeId);
        }

        /// <summary>
        /// Get the files for a commodityCode. Get all existing commodityCode files.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commodityCodeId">Id of the commodityCode to get files for</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GetCommodityCodeFilesWithHttpInfo (int? commodityCodeId)
        {
            // verify the required parameter 'commodityCodeId' is set
            if (commodityCodeId == null)
                throw new ApiException(400, "Missing required parameter 'commodityCodeId' when calling CommodityCodeApi->GetCommodityCodeFiles");

            var localVarPath = "/beta/commodityCode/{commodityCodeId}/file";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (commodityCodeId != null) localVarPathParams.Add("commodityCodeId", Configuration.ApiClient.ParameterToString(commodityCodeId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCommodityCodeFiles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get the files for a commodityCode. Get all existing commodityCode files.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commodityCodeId">Id of the commodityCode to get files for</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetCommodityCodeFilesAsync (int? commodityCodeId)
        {
             await GetCommodityCodeFilesAsyncWithHttpInfo(commodityCodeId);

        }

        /// <summary>
        /// Get the files for a commodityCode. Get all existing commodityCode files.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commodityCodeId">Id of the commodityCode to get files for</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetCommodityCodeFilesAsyncWithHttpInfo (int? commodityCodeId)
        {
            // verify the required parameter 'commodityCodeId' is set
            if (commodityCodeId == null)
                throw new ApiException(400, "Missing required parameter 'commodityCodeId' when calling CommodityCodeApi->GetCommodityCodeFiles");

            var localVarPath = "/beta/commodityCode/{commodityCodeId}/file";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (commodityCodeId != null) localVarPathParams.Add("commodityCodeId", Configuration.ApiClient.ParameterToString(commodityCodeId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCommodityCodeFiles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get the tags for a commodityCode. Get all existing commodityCode tags.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commodityCodeId">Id of the commodityCode to get tags for</param>
        /// <returns></returns>
        public void GetCommodityCodeTags (int? commodityCodeId)
        {
             GetCommodityCodeTagsWithHttpInfo(commodityCodeId);
        }

        /// <summary>
        /// Get the tags for a commodityCode. Get all existing commodityCode tags.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commodityCodeId">Id of the commodityCode to get tags for</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GetCommodityCodeTagsWithHttpInfo (int? commodityCodeId)
        {
            // verify the required parameter 'commodityCodeId' is set
            if (commodityCodeId == null)
                throw new ApiException(400, "Missing required parameter 'commodityCodeId' when calling CommodityCodeApi->GetCommodityCodeTags");

            var localVarPath = "/beta/commodityCode/{commodityCodeId}/tag";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (commodityCodeId != null) localVarPathParams.Add("commodityCodeId", Configuration.ApiClient.ParameterToString(commodityCodeId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCommodityCodeTags", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get the tags for a commodityCode. Get all existing commodityCode tags.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commodityCodeId">Id of the commodityCode to get tags for</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetCommodityCodeTagsAsync (int? commodityCodeId)
        {
             await GetCommodityCodeTagsAsyncWithHttpInfo(commodityCodeId);

        }

        /// <summary>
        /// Get the tags for a commodityCode. Get all existing commodityCode tags.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commodityCodeId">Id of the commodityCode to get tags for</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetCommodityCodeTagsAsyncWithHttpInfo (int? commodityCodeId)
        {
            // verify the required parameter 'commodityCodeId' is set
            if (commodityCodeId == null)
                throw new ApiException(400, "Missing required parameter 'commodityCodeId' when calling CommodityCodeApi->GetCommodityCodeTags");

            var localVarPath = "/beta/commodityCode/{commodityCodeId}/tag";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (commodityCodeId != null) localVarPathParams.Add("commodityCodeId", Configuration.ApiClient.ParameterToString(commodityCodeId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCommodityCodeTags", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get a duplicated a commodityCode by id Returns a duplicated commodityCode identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commodityCodeId">Id of the commodityCode to be duplicated.</param>
        /// <returns>CommodityCode</returns>
        public CommodityCode GetDuplicateCommodityCodeById (int? commodityCodeId)
        {
             ApiResponse<CommodityCode> localVarResponse = GetDuplicateCommodityCodeByIdWithHttpInfo(commodityCodeId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a duplicated a commodityCode by id Returns a duplicated commodityCode identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commodityCodeId">Id of the commodityCode to be duplicated.</param>
        /// <returns>ApiResponse of CommodityCode</returns>
        public ApiResponse< CommodityCode > GetDuplicateCommodityCodeByIdWithHttpInfo (int? commodityCodeId)
        {
            // verify the required parameter 'commodityCodeId' is set
            if (commodityCodeId == null)
                throw new ApiException(400, "Missing required parameter 'commodityCodeId' when calling CommodityCodeApi->GetDuplicateCommodityCodeById");

            var localVarPath = "/beta/commodityCode/duplicate/{commodityCodeId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (commodityCodeId != null) localVarPathParams.Add("commodityCodeId", Configuration.ApiClient.ParameterToString(commodityCodeId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDuplicateCommodityCodeById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CommodityCode>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CommodityCode) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CommodityCode)));
        }

        /// <summary>
        /// Get a duplicated a commodityCode by id Returns a duplicated commodityCode identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commodityCodeId">Id of the commodityCode to be duplicated.</param>
        /// <returns>Task of CommodityCode</returns>
        public async System.Threading.Tasks.Task<CommodityCode> GetDuplicateCommodityCodeByIdAsync (int? commodityCodeId)
        {
             ApiResponse<CommodityCode> localVarResponse = await GetDuplicateCommodityCodeByIdAsyncWithHttpInfo(commodityCodeId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a duplicated a commodityCode by id Returns a duplicated commodityCode identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commodityCodeId">Id of the commodityCode to be duplicated.</param>
        /// <returns>Task of ApiResponse (CommodityCode)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CommodityCode>> GetDuplicateCommodityCodeByIdAsyncWithHttpInfo (int? commodityCodeId)
        {
            // verify the required parameter 'commodityCodeId' is set
            if (commodityCodeId == null)
                throw new ApiException(400, "Missing required parameter 'commodityCodeId' when calling CommodityCodeApi->GetDuplicateCommodityCodeById");

            var localVarPath = "/beta/commodityCode/duplicate/{commodityCodeId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (commodityCodeId != null) localVarPathParams.Add("commodityCodeId", Configuration.ApiClient.ParameterToString(commodityCodeId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDuplicateCommodityCodeById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CommodityCode>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CommodityCode) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CommodityCode)));
        }

    }
}
