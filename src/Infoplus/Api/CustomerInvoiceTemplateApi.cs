/* 
 * Infoplus API
 *
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Infoplus.Client;
using Infoplus.Model;

namespace Infoplus.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICustomerInvoiceTemplateApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create a customerInvoiceTemplate
        /// </summary>
        /// <remarks>
        /// Inserts a new customerInvoiceTemplate using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">CustomerInvoiceTemplate to be inserted.</param>
        /// <returns>CustomerInvoiceTemplate</returns>
        CustomerInvoiceTemplate AddCustomerInvoiceTemplate (CustomerInvoiceTemplate body);

        /// <summary>
        /// Create a customerInvoiceTemplate
        /// </summary>
        /// <remarks>
        /// Inserts a new customerInvoiceTemplate using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">CustomerInvoiceTemplate to be inserted.</param>
        /// <returns>ApiResponse of CustomerInvoiceTemplate</returns>
        ApiResponse<CustomerInvoiceTemplate> AddCustomerInvoiceTemplateWithHttpInfo (CustomerInvoiceTemplate body);
        /// <summary>
        /// Add new audit for a customerInvoiceTemplate
        /// </summary>
        /// <remarks>
        /// Adds an audit to an existing customerInvoiceTemplate.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerInvoiceTemplateId">Id of the customerInvoiceTemplate to add an audit to</param>
        /// <param name="customerInvoiceTemplateAudit">The audit to add</param>
        /// <returns></returns>
        void AddCustomerInvoiceTemplateAudit (int? customerInvoiceTemplateId, string customerInvoiceTemplateAudit);

        /// <summary>
        /// Add new audit for a customerInvoiceTemplate
        /// </summary>
        /// <remarks>
        /// Adds an audit to an existing customerInvoiceTemplate.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerInvoiceTemplateId">Id of the customerInvoiceTemplate to add an audit to</param>
        /// <param name="customerInvoiceTemplateAudit">The audit to add</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddCustomerInvoiceTemplateAuditWithHttpInfo (int? customerInvoiceTemplateId, string customerInvoiceTemplateAudit);
        /// <summary>
        /// Attach a file to a customerInvoiceTemplate
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing customerInvoiceTemplate.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerInvoiceTemplateId">Id of the customerInvoiceTemplate to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns></returns>
        void AddCustomerInvoiceTemplateFile (int? customerInvoiceTemplateId, string fileName);

        /// <summary>
        /// Attach a file to a customerInvoiceTemplate
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing customerInvoiceTemplate.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerInvoiceTemplateId">Id of the customerInvoiceTemplate to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddCustomerInvoiceTemplateFileWithHttpInfo (int? customerInvoiceTemplateId, string fileName);
        /// <summary>
        /// Attach a file to a customerInvoiceTemplate by URL.
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing customerInvoiceTemplate by URL.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="customerInvoiceTemplateId">Id of the customerInvoiceTemplate to add an file to</param>
        /// <returns></returns>
        void AddCustomerInvoiceTemplateFileByURL (RecordFile body, int? customerInvoiceTemplateId);

        /// <summary>
        /// Attach a file to a customerInvoiceTemplate by URL.
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing customerInvoiceTemplate by URL.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="customerInvoiceTemplateId">Id of the customerInvoiceTemplate to add an file to</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddCustomerInvoiceTemplateFileByURLWithHttpInfo (RecordFile body, int? customerInvoiceTemplateId);
        /// <summary>
        /// Add new tags for a customerInvoiceTemplate.
        /// </summary>
        /// <remarks>
        /// Adds a tag to an existing customerInvoiceTemplate.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerInvoiceTemplateId">Id of the customerInvoiceTemplate to add a tag to</param>
        /// <param name="customerInvoiceTemplateTag">The tag to add</param>
        /// <returns></returns>
        void AddCustomerInvoiceTemplateTag (int? customerInvoiceTemplateId, string customerInvoiceTemplateTag);

        /// <summary>
        /// Add new tags for a customerInvoiceTemplate.
        /// </summary>
        /// <remarks>
        /// Adds a tag to an existing customerInvoiceTemplate.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerInvoiceTemplateId">Id of the customerInvoiceTemplate to add a tag to</param>
        /// <param name="customerInvoiceTemplateTag">The tag to add</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddCustomerInvoiceTemplateTagWithHttpInfo (int? customerInvoiceTemplateId, string customerInvoiceTemplateTag);
        /// <summary>
        /// Delete a customerInvoiceTemplate
        /// </summary>
        /// <remarks>
        /// Deletes the customerInvoiceTemplate identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerInvoiceTemplateId">Id of the customerInvoiceTemplate to be deleted.</param>
        /// <returns></returns>
        void DeleteCustomerInvoiceTemplate (int? customerInvoiceTemplateId);

        /// <summary>
        /// Delete a customerInvoiceTemplate
        /// </summary>
        /// <remarks>
        /// Deletes the customerInvoiceTemplate identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerInvoiceTemplateId">Id of the customerInvoiceTemplate to be deleted.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteCustomerInvoiceTemplateWithHttpInfo (int? customerInvoiceTemplateId);
        /// <summary>
        /// Delete a file for a customerInvoiceTemplate.
        /// </summary>
        /// <remarks>
        /// Deletes an existing customerInvoiceTemplate file using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerInvoiceTemplateId">Id of the customerInvoiceTemplate to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns></returns>
        void DeleteCustomerInvoiceTemplateFile (int? customerInvoiceTemplateId, int? fileId);

        /// <summary>
        /// Delete a file for a customerInvoiceTemplate.
        /// </summary>
        /// <remarks>
        /// Deletes an existing customerInvoiceTemplate file using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerInvoiceTemplateId">Id of the customerInvoiceTemplate to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteCustomerInvoiceTemplateFileWithHttpInfo (int? customerInvoiceTemplateId, int? fileId);
        /// <summary>
        /// Delete a tag for a customerInvoiceTemplate.
        /// </summary>
        /// <remarks>
        /// Deletes an existing customerInvoiceTemplate tag using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerInvoiceTemplateId">Id of the customerInvoiceTemplate to remove tag from</param>
        /// <param name="customerInvoiceTemplateTag">The tag to delete</param>
        /// <returns></returns>
        void DeleteCustomerInvoiceTemplateTag (int? customerInvoiceTemplateId, string customerInvoiceTemplateTag);

        /// <summary>
        /// Delete a tag for a customerInvoiceTemplate.
        /// </summary>
        /// <remarks>
        /// Deletes an existing customerInvoiceTemplate tag using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerInvoiceTemplateId">Id of the customerInvoiceTemplate to remove tag from</param>
        /// <param name="customerInvoiceTemplateTag">The tag to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteCustomerInvoiceTemplateTagWithHttpInfo (int? customerInvoiceTemplateId, string customerInvoiceTemplateTag);
        /// <summary>
        /// Search customerInvoiceTemplates by filter
        /// </summary>
        /// <remarks>
        /// Returns the list of customerInvoiceTemplates that match the given filter.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>List&lt;CustomerInvoiceTemplate&gt;</returns>
        List<CustomerInvoiceTemplate> GetCustomerInvoiceTemplateByFilter (string filter = null, int? page = null, int? limit = null, string sort = null);

        /// <summary>
        /// Search customerInvoiceTemplates by filter
        /// </summary>
        /// <remarks>
        /// Returns the list of customerInvoiceTemplates that match the given filter.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>ApiResponse of List&lt;CustomerInvoiceTemplate&gt;</returns>
        ApiResponse<List<CustomerInvoiceTemplate>> GetCustomerInvoiceTemplateByFilterWithHttpInfo (string filter = null, int? page = null, int? limit = null, string sort = null);
        /// <summary>
        /// Get a customerInvoiceTemplate by id
        /// </summary>
        /// <remarks>
        /// Returns the customerInvoiceTemplate identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerInvoiceTemplateId">Id of the customerInvoiceTemplate to be returned.</param>
        /// <returns>CustomerInvoiceTemplate</returns>
        CustomerInvoiceTemplate GetCustomerInvoiceTemplateById (int? customerInvoiceTemplateId);

        /// <summary>
        /// Get a customerInvoiceTemplate by id
        /// </summary>
        /// <remarks>
        /// Returns the customerInvoiceTemplate identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerInvoiceTemplateId">Id of the customerInvoiceTemplate to be returned.</param>
        /// <returns>ApiResponse of CustomerInvoiceTemplate</returns>
        ApiResponse<CustomerInvoiceTemplate> GetCustomerInvoiceTemplateByIdWithHttpInfo (int? customerInvoiceTemplateId);
        /// <summary>
        /// Get the files for a customerInvoiceTemplate.
        /// </summary>
        /// <remarks>
        /// Get all existing customerInvoiceTemplate files.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerInvoiceTemplateId">Id of the customerInvoiceTemplate to get files for</param>
        /// <returns></returns>
        void GetCustomerInvoiceTemplateFiles (int? customerInvoiceTemplateId);

        /// <summary>
        /// Get the files for a customerInvoiceTemplate.
        /// </summary>
        /// <remarks>
        /// Get all existing customerInvoiceTemplate files.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerInvoiceTemplateId">Id of the customerInvoiceTemplate to get files for</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetCustomerInvoiceTemplateFilesWithHttpInfo (int? customerInvoiceTemplateId);
        /// <summary>
        /// Get the tags for a customerInvoiceTemplate.
        /// </summary>
        /// <remarks>
        /// Get all existing customerInvoiceTemplate tags.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerInvoiceTemplateId">Id of the customerInvoiceTemplate to get tags for</param>
        /// <returns></returns>
        void GetCustomerInvoiceTemplateTags (int? customerInvoiceTemplateId);

        /// <summary>
        /// Get the tags for a customerInvoiceTemplate.
        /// </summary>
        /// <remarks>
        /// Get all existing customerInvoiceTemplate tags.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerInvoiceTemplateId">Id of the customerInvoiceTemplate to get tags for</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetCustomerInvoiceTemplateTagsWithHttpInfo (int? customerInvoiceTemplateId);
        /// <summary>
        /// Get a duplicated a customerInvoiceTemplate by id
        /// </summary>
        /// <remarks>
        /// Returns a duplicated customerInvoiceTemplate identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerInvoiceTemplateId">Id of the customerInvoiceTemplate to be duplicated.</param>
        /// <returns>CustomerInvoiceTemplate</returns>
        CustomerInvoiceTemplate GetDuplicateCustomerInvoiceTemplateById (int? customerInvoiceTemplateId);

        /// <summary>
        /// Get a duplicated a customerInvoiceTemplate by id
        /// </summary>
        /// <remarks>
        /// Returns a duplicated customerInvoiceTemplate identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerInvoiceTemplateId">Id of the customerInvoiceTemplate to be duplicated.</param>
        /// <returns>ApiResponse of CustomerInvoiceTemplate</returns>
        ApiResponse<CustomerInvoiceTemplate> GetDuplicateCustomerInvoiceTemplateByIdWithHttpInfo (int? customerInvoiceTemplateId);
        /// <summary>
        /// Update a customerInvoiceTemplate
        /// </summary>
        /// <remarks>
        /// Updates an existing customerInvoiceTemplate using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">CustomerInvoiceTemplate to be updated.</param>
        /// <returns></returns>
        void UpdateCustomerInvoiceTemplate (CustomerInvoiceTemplate body);

        /// <summary>
        /// Update a customerInvoiceTemplate
        /// </summary>
        /// <remarks>
        /// Updates an existing customerInvoiceTemplate using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">CustomerInvoiceTemplate to be updated.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateCustomerInvoiceTemplateWithHttpInfo (CustomerInvoiceTemplate body);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create a customerInvoiceTemplate
        /// </summary>
        /// <remarks>
        /// Inserts a new customerInvoiceTemplate using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">CustomerInvoiceTemplate to be inserted.</param>
        /// <returns>Task of CustomerInvoiceTemplate</returns>
        System.Threading.Tasks.Task<CustomerInvoiceTemplate> AddCustomerInvoiceTemplateAsync (CustomerInvoiceTemplate body);

        /// <summary>
        /// Create a customerInvoiceTemplate
        /// </summary>
        /// <remarks>
        /// Inserts a new customerInvoiceTemplate using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">CustomerInvoiceTemplate to be inserted.</param>
        /// <returns>Task of ApiResponse (CustomerInvoiceTemplate)</returns>
        System.Threading.Tasks.Task<ApiResponse<CustomerInvoiceTemplate>> AddCustomerInvoiceTemplateAsyncWithHttpInfo (CustomerInvoiceTemplate body);
        /// <summary>
        /// Add new audit for a customerInvoiceTemplate
        /// </summary>
        /// <remarks>
        /// Adds an audit to an existing customerInvoiceTemplate.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerInvoiceTemplateId">Id of the customerInvoiceTemplate to add an audit to</param>
        /// <param name="customerInvoiceTemplateAudit">The audit to add</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddCustomerInvoiceTemplateAuditAsync (int? customerInvoiceTemplateId, string customerInvoiceTemplateAudit);

        /// <summary>
        /// Add new audit for a customerInvoiceTemplate
        /// </summary>
        /// <remarks>
        /// Adds an audit to an existing customerInvoiceTemplate.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerInvoiceTemplateId">Id of the customerInvoiceTemplate to add an audit to</param>
        /// <param name="customerInvoiceTemplateAudit">The audit to add</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddCustomerInvoiceTemplateAuditAsyncWithHttpInfo (int? customerInvoiceTemplateId, string customerInvoiceTemplateAudit);
        /// <summary>
        /// Attach a file to a customerInvoiceTemplate
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing customerInvoiceTemplate.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerInvoiceTemplateId">Id of the customerInvoiceTemplate to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddCustomerInvoiceTemplateFileAsync (int? customerInvoiceTemplateId, string fileName);

        /// <summary>
        /// Attach a file to a customerInvoiceTemplate
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing customerInvoiceTemplate.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerInvoiceTemplateId">Id of the customerInvoiceTemplate to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddCustomerInvoiceTemplateFileAsyncWithHttpInfo (int? customerInvoiceTemplateId, string fileName);
        /// <summary>
        /// Attach a file to a customerInvoiceTemplate by URL.
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing customerInvoiceTemplate by URL.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="customerInvoiceTemplateId">Id of the customerInvoiceTemplate to add an file to</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddCustomerInvoiceTemplateFileByURLAsync (RecordFile body, int? customerInvoiceTemplateId);

        /// <summary>
        /// Attach a file to a customerInvoiceTemplate by URL.
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing customerInvoiceTemplate by URL.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="customerInvoiceTemplateId">Id of the customerInvoiceTemplate to add an file to</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddCustomerInvoiceTemplateFileByURLAsyncWithHttpInfo (RecordFile body, int? customerInvoiceTemplateId);
        /// <summary>
        /// Add new tags for a customerInvoiceTemplate.
        /// </summary>
        /// <remarks>
        /// Adds a tag to an existing customerInvoiceTemplate.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerInvoiceTemplateId">Id of the customerInvoiceTemplate to add a tag to</param>
        /// <param name="customerInvoiceTemplateTag">The tag to add</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddCustomerInvoiceTemplateTagAsync (int? customerInvoiceTemplateId, string customerInvoiceTemplateTag);

        /// <summary>
        /// Add new tags for a customerInvoiceTemplate.
        /// </summary>
        /// <remarks>
        /// Adds a tag to an existing customerInvoiceTemplate.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerInvoiceTemplateId">Id of the customerInvoiceTemplate to add a tag to</param>
        /// <param name="customerInvoiceTemplateTag">The tag to add</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddCustomerInvoiceTemplateTagAsyncWithHttpInfo (int? customerInvoiceTemplateId, string customerInvoiceTemplateTag);
        /// <summary>
        /// Delete a customerInvoiceTemplate
        /// </summary>
        /// <remarks>
        /// Deletes the customerInvoiceTemplate identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerInvoiceTemplateId">Id of the customerInvoiceTemplate to be deleted.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteCustomerInvoiceTemplateAsync (int? customerInvoiceTemplateId);

        /// <summary>
        /// Delete a customerInvoiceTemplate
        /// </summary>
        /// <remarks>
        /// Deletes the customerInvoiceTemplate identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerInvoiceTemplateId">Id of the customerInvoiceTemplate to be deleted.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteCustomerInvoiceTemplateAsyncWithHttpInfo (int? customerInvoiceTemplateId);
        /// <summary>
        /// Delete a file for a customerInvoiceTemplate.
        /// </summary>
        /// <remarks>
        /// Deletes an existing customerInvoiceTemplate file using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerInvoiceTemplateId">Id of the customerInvoiceTemplate to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteCustomerInvoiceTemplateFileAsync (int? customerInvoiceTemplateId, int? fileId);

        /// <summary>
        /// Delete a file for a customerInvoiceTemplate.
        /// </summary>
        /// <remarks>
        /// Deletes an existing customerInvoiceTemplate file using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerInvoiceTemplateId">Id of the customerInvoiceTemplate to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteCustomerInvoiceTemplateFileAsyncWithHttpInfo (int? customerInvoiceTemplateId, int? fileId);
        /// <summary>
        /// Delete a tag for a customerInvoiceTemplate.
        /// </summary>
        /// <remarks>
        /// Deletes an existing customerInvoiceTemplate tag using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerInvoiceTemplateId">Id of the customerInvoiceTemplate to remove tag from</param>
        /// <param name="customerInvoiceTemplateTag">The tag to delete</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteCustomerInvoiceTemplateTagAsync (int? customerInvoiceTemplateId, string customerInvoiceTemplateTag);

        /// <summary>
        /// Delete a tag for a customerInvoiceTemplate.
        /// </summary>
        /// <remarks>
        /// Deletes an existing customerInvoiceTemplate tag using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerInvoiceTemplateId">Id of the customerInvoiceTemplate to remove tag from</param>
        /// <param name="customerInvoiceTemplateTag">The tag to delete</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteCustomerInvoiceTemplateTagAsyncWithHttpInfo (int? customerInvoiceTemplateId, string customerInvoiceTemplateTag);
        /// <summary>
        /// Search customerInvoiceTemplates by filter
        /// </summary>
        /// <remarks>
        /// Returns the list of customerInvoiceTemplates that match the given filter.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>Task of List&lt;CustomerInvoiceTemplate&gt;</returns>
        System.Threading.Tasks.Task<List<CustomerInvoiceTemplate>> GetCustomerInvoiceTemplateByFilterAsync (string filter = null, int? page = null, int? limit = null, string sort = null);

        /// <summary>
        /// Search customerInvoiceTemplates by filter
        /// </summary>
        /// <remarks>
        /// Returns the list of customerInvoiceTemplates that match the given filter.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;CustomerInvoiceTemplate&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<CustomerInvoiceTemplate>>> GetCustomerInvoiceTemplateByFilterAsyncWithHttpInfo (string filter = null, int? page = null, int? limit = null, string sort = null);
        /// <summary>
        /// Get a customerInvoiceTemplate by id
        /// </summary>
        /// <remarks>
        /// Returns the customerInvoiceTemplate identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerInvoiceTemplateId">Id of the customerInvoiceTemplate to be returned.</param>
        /// <returns>Task of CustomerInvoiceTemplate</returns>
        System.Threading.Tasks.Task<CustomerInvoiceTemplate> GetCustomerInvoiceTemplateByIdAsync (int? customerInvoiceTemplateId);

        /// <summary>
        /// Get a customerInvoiceTemplate by id
        /// </summary>
        /// <remarks>
        /// Returns the customerInvoiceTemplate identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerInvoiceTemplateId">Id of the customerInvoiceTemplate to be returned.</param>
        /// <returns>Task of ApiResponse (CustomerInvoiceTemplate)</returns>
        System.Threading.Tasks.Task<ApiResponse<CustomerInvoiceTemplate>> GetCustomerInvoiceTemplateByIdAsyncWithHttpInfo (int? customerInvoiceTemplateId);
        /// <summary>
        /// Get the files for a customerInvoiceTemplate.
        /// </summary>
        /// <remarks>
        /// Get all existing customerInvoiceTemplate files.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerInvoiceTemplateId">Id of the customerInvoiceTemplate to get files for</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetCustomerInvoiceTemplateFilesAsync (int? customerInvoiceTemplateId);

        /// <summary>
        /// Get the files for a customerInvoiceTemplate.
        /// </summary>
        /// <remarks>
        /// Get all existing customerInvoiceTemplate files.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerInvoiceTemplateId">Id of the customerInvoiceTemplate to get files for</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetCustomerInvoiceTemplateFilesAsyncWithHttpInfo (int? customerInvoiceTemplateId);
        /// <summary>
        /// Get the tags for a customerInvoiceTemplate.
        /// </summary>
        /// <remarks>
        /// Get all existing customerInvoiceTemplate tags.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerInvoiceTemplateId">Id of the customerInvoiceTemplate to get tags for</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetCustomerInvoiceTemplateTagsAsync (int? customerInvoiceTemplateId);

        /// <summary>
        /// Get the tags for a customerInvoiceTemplate.
        /// </summary>
        /// <remarks>
        /// Get all existing customerInvoiceTemplate tags.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerInvoiceTemplateId">Id of the customerInvoiceTemplate to get tags for</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetCustomerInvoiceTemplateTagsAsyncWithHttpInfo (int? customerInvoiceTemplateId);
        /// <summary>
        /// Get a duplicated a customerInvoiceTemplate by id
        /// </summary>
        /// <remarks>
        /// Returns a duplicated customerInvoiceTemplate identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerInvoiceTemplateId">Id of the customerInvoiceTemplate to be duplicated.</param>
        /// <returns>Task of CustomerInvoiceTemplate</returns>
        System.Threading.Tasks.Task<CustomerInvoiceTemplate> GetDuplicateCustomerInvoiceTemplateByIdAsync (int? customerInvoiceTemplateId);

        /// <summary>
        /// Get a duplicated a customerInvoiceTemplate by id
        /// </summary>
        /// <remarks>
        /// Returns a duplicated customerInvoiceTemplate identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerInvoiceTemplateId">Id of the customerInvoiceTemplate to be duplicated.</param>
        /// <returns>Task of ApiResponse (CustomerInvoiceTemplate)</returns>
        System.Threading.Tasks.Task<ApiResponse<CustomerInvoiceTemplate>> GetDuplicateCustomerInvoiceTemplateByIdAsyncWithHttpInfo (int? customerInvoiceTemplateId);
        /// <summary>
        /// Update a customerInvoiceTemplate
        /// </summary>
        /// <remarks>
        /// Updates an existing customerInvoiceTemplate using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">CustomerInvoiceTemplate to be updated.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateCustomerInvoiceTemplateAsync (CustomerInvoiceTemplate body);

        /// <summary>
        /// Update a customerInvoiceTemplate
        /// </summary>
        /// <remarks>
        /// Updates an existing customerInvoiceTemplate using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">CustomerInvoiceTemplate to be updated.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateCustomerInvoiceTemplateAsyncWithHttpInfo (CustomerInvoiceTemplate body);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class CustomerInvoiceTemplateApi : ICustomerInvoiceTemplateApi
    {
        private Infoplus.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="CustomerInvoiceTemplateApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CustomerInvoiceTemplateApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = Infoplus.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CustomerInvoiceTemplateApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public CustomerInvoiceTemplateApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Infoplus.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Infoplus.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create a customerInvoiceTemplate Inserts a new customerInvoiceTemplate using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">CustomerInvoiceTemplate to be inserted.</param>
        /// <returns>CustomerInvoiceTemplate</returns>
        public CustomerInvoiceTemplate AddCustomerInvoiceTemplate (CustomerInvoiceTemplate body)
        {
             ApiResponse<CustomerInvoiceTemplate> localVarResponse = AddCustomerInvoiceTemplateWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a customerInvoiceTemplate Inserts a new customerInvoiceTemplate using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">CustomerInvoiceTemplate to be inserted.</param>
        /// <returns>ApiResponse of CustomerInvoiceTemplate</returns>
        public ApiResponse< CustomerInvoiceTemplate > AddCustomerInvoiceTemplateWithHttpInfo (CustomerInvoiceTemplate body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling CustomerInvoiceTemplateApi->AddCustomerInvoiceTemplate");

            var localVarPath = "/beta/customerInvoiceTemplate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddCustomerInvoiceTemplate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CustomerInvoiceTemplate>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CustomerInvoiceTemplate) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CustomerInvoiceTemplate)));
        }

        /// <summary>
        /// Create a customerInvoiceTemplate Inserts a new customerInvoiceTemplate using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">CustomerInvoiceTemplate to be inserted.</param>
        /// <returns>Task of CustomerInvoiceTemplate</returns>
        public async System.Threading.Tasks.Task<CustomerInvoiceTemplate> AddCustomerInvoiceTemplateAsync (CustomerInvoiceTemplate body)
        {
             ApiResponse<CustomerInvoiceTemplate> localVarResponse = await AddCustomerInvoiceTemplateAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a customerInvoiceTemplate Inserts a new customerInvoiceTemplate using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">CustomerInvoiceTemplate to be inserted.</param>
        /// <returns>Task of ApiResponse (CustomerInvoiceTemplate)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CustomerInvoiceTemplate>> AddCustomerInvoiceTemplateAsyncWithHttpInfo (CustomerInvoiceTemplate body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling CustomerInvoiceTemplateApi->AddCustomerInvoiceTemplate");

            var localVarPath = "/beta/customerInvoiceTemplate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddCustomerInvoiceTemplate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CustomerInvoiceTemplate>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CustomerInvoiceTemplate) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CustomerInvoiceTemplate)));
        }

        /// <summary>
        /// Add new audit for a customerInvoiceTemplate Adds an audit to an existing customerInvoiceTemplate.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerInvoiceTemplateId">Id of the customerInvoiceTemplate to add an audit to</param>
        /// <param name="customerInvoiceTemplateAudit">The audit to add</param>
        /// <returns></returns>
        public void AddCustomerInvoiceTemplateAudit (int? customerInvoiceTemplateId, string customerInvoiceTemplateAudit)
        {
             AddCustomerInvoiceTemplateAuditWithHttpInfo(customerInvoiceTemplateId, customerInvoiceTemplateAudit);
        }

        /// <summary>
        /// Add new audit for a customerInvoiceTemplate Adds an audit to an existing customerInvoiceTemplate.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerInvoiceTemplateId">Id of the customerInvoiceTemplate to add an audit to</param>
        /// <param name="customerInvoiceTemplateAudit">The audit to add</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AddCustomerInvoiceTemplateAuditWithHttpInfo (int? customerInvoiceTemplateId, string customerInvoiceTemplateAudit)
        {
            // verify the required parameter 'customerInvoiceTemplateId' is set
            if (customerInvoiceTemplateId == null)
                throw new ApiException(400, "Missing required parameter 'customerInvoiceTemplateId' when calling CustomerInvoiceTemplateApi->AddCustomerInvoiceTemplateAudit");
            // verify the required parameter 'customerInvoiceTemplateAudit' is set
            if (customerInvoiceTemplateAudit == null)
                throw new ApiException(400, "Missing required parameter 'customerInvoiceTemplateAudit' when calling CustomerInvoiceTemplateApi->AddCustomerInvoiceTemplateAudit");

            var localVarPath = "/beta/customerInvoiceTemplate/{customerInvoiceTemplateId}/audit/{customerInvoiceTemplateAudit}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (customerInvoiceTemplateId != null) localVarPathParams.Add("customerInvoiceTemplateId", Configuration.ApiClient.ParameterToString(customerInvoiceTemplateId)); // path parameter
            if (customerInvoiceTemplateAudit != null) localVarPathParams.Add("customerInvoiceTemplateAudit", Configuration.ApiClient.ParameterToString(customerInvoiceTemplateAudit)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddCustomerInvoiceTemplateAudit", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Add new audit for a customerInvoiceTemplate Adds an audit to an existing customerInvoiceTemplate.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerInvoiceTemplateId">Id of the customerInvoiceTemplate to add an audit to</param>
        /// <param name="customerInvoiceTemplateAudit">The audit to add</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddCustomerInvoiceTemplateAuditAsync (int? customerInvoiceTemplateId, string customerInvoiceTemplateAudit)
        {
             await AddCustomerInvoiceTemplateAuditAsyncWithHttpInfo(customerInvoiceTemplateId, customerInvoiceTemplateAudit);

        }

        /// <summary>
        /// Add new audit for a customerInvoiceTemplate Adds an audit to an existing customerInvoiceTemplate.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerInvoiceTemplateId">Id of the customerInvoiceTemplate to add an audit to</param>
        /// <param name="customerInvoiceTemplateAudit">The audit to add</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddCustomerInvoiceTemplateAuditAsyncWithHttpInfo (int? customerInvoiceTemplateId, string customerInvoiceTemplateAudit)
        {
            // verify the required parameter 'customerInvoiceTemplateId' is set
            if (customerInvoiceTemplateId == null)
                throw new ApiException(400, "Missing required parameter 'customerInvoiceTemplateId' when calling CustomerInvoiceTemplateApi->AddCustomerInvoiceTemplateAudit");
            // verify the required parameter 'customerInvoiceTemplateAudit' is set
            if (customerInvoiceTemplateAudit == null)
                throw new ApiException(400, "Missing required parameter 'customerInvoiceTemplateAudit' when calling CustomerInvoiceTemplateApi->AddCustomerInvoiceTemplateAudit");

            var localVarPath = "/beta/customerInvoiceTemplate/{customerInvoiceTemplateId}/audit/{customerInvoiceTemplateAudit}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (customerInvoiceTemplateId != null) localVarPathParams.Add("customerInvoiceTemplateId", Configuration.ApiClient.ParameterToString(customerInvoiceTemplateId)); // path parameter
            if (customerInvoiceTemplateAudit != null) localVarPathParams.Add("customerInvoiceTemplateAudit", Configuration.ApiClient.ParameterToString(customerInvoiceTemplateAudit)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddCustomerInvoiceTemplateAudit", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Attach a file to a customerInvoiceTemplate Adds a file to an existing customerInvoiceTemplate.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerInvoiceTemplateId">Id of the customerInvoiceTemplate to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns></returns>
        public void AddCustomerInvoiceTemplateFile (int? customerInvoiceTemplateId, string fileName)
        {
             AddCustomerInvoiceTemplateFileWithHttpInfo(customerInvoiceTemplateId, fileName);
        }

        /// <summary>
        /// Attach a file to a customerInvoiceTemplate Adds a file to an existing customerInvoiceTemplate.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerInvoiceTemplateId">Id of the customerInvoiceTemplate to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AddCustomerInvoiceTemplateFileWithHttpInfo (int? customerInvoiceTemplateId, string fileName)
        {
            // verify the required parameter 'customerInvoiceTemplateId' is set
            if (customerInvoiceTemplateId == null)
                throw new ApiException(400, "Missing required parameter 'customerInvoiceTemplateId' when calling CustomerInvoiceTemplateApi->AddCustomerInvoiceTemplateFile");
            // verify the required parameter 'fileName' is set
            if (fileName == null)
                throw new ApiException(400, "Missing required parameter 'fileName' when calling CustomerInvoiceTemplateApi->AddCustomerInvoiceTemplateFile");

            var localVarPath = "/beta/customerInvoiceTemplate/{customerInvoiceTemplateId}/file/{fileName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (customerInvoiceTemplateId != null) localVarPathParams.Add("customerInvoiceTemplateId", Configuration.ApiClient.ParameterToString(customerInvoiceTemplateId)); // path parameter
            if (fileName != null) localVarPathParams.Add("fileName", Configuration.ApiClient.ParameterToString(fileName)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddCustomerInvoiceTemplateFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Attach a file to a customerInvoiceTemplate Adds a file to an existing customerInvoiceTemplate.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerInvoiceTemplateId">Id of the customerInvoiceTemplate to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddCustomerInvoiceTemplateFileAsync (int? customerInvoiceTemplateId, string fileName)
        {
             await AddCustomerInvoiceTemplateFileAsyncWithHttpInfo(customerInvoiceTemplateId, fileName);

        }

        /// <summary>
        /// Attach a file to a customerInvoiceTemplate Adds a file to an existing customerInvoiceTemplate.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerInvoiceTemplateId">Id of the customerInvoiceTemplate to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddCustomerInvoiceTemplateFileAsyncWithHttpInfo (int? customerInvoiceTemplateId, string fileName)
        {
            // verify the required parameter 'customerInvoiceTemplateId' is set
            if (customerInvoiceTemplateId == null)
                throw new ApiException(400, "Missing required parameter 'customerInvoiceTemplateId' when calling CustomerInvoiceTemplateApi->AddCustomerInvoiceTemplateFile");
            // verify the required parameter 'fileName' is set
            if (fileName == null)
                throw new ApiException(400, "Missing required parameter 'fileName' when calling CustomerInvoiceTemplateApi->AddCustomerInvoiceTemplateFile");

            var localVarPath = "/beta/customerInvoiceTemplate/{customerInvoiceTemplateId}/file/{fileName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (customerInvoiceTemplateId != null) localVarPathParams.Add("customerInvoiceTemplateId", Configuration.ApiClient.ParameterToString(customerInvoiceTemplateId)); // path parameter
            if (fileName != null) localVarPathParams.Add("fileName", Configuration.ApiClient.ParameterToString(fileName)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddCustomerInvoiceTemplateFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Attach a file to a customerInvoiceTemplate by URL. Adds a file to an existing customerInvoiceTemplate by URL.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="customerInvoiceTemplateId">Id of the customerInvoiceTemplate to add an file to</param>
        /// <returns></returns>
        public void AddCustomerInvoiceTemplateFileByURL (RecordFile body, int? customerInvoiceTemplateId)
        {
             AddCustomerInvoiceTemplateFileByURLWithHttpInfo(body, customerInvoiceTemplateId);
        }

        /// <summary>
        /// Attach a file to a customerInvoiceTemplate by URL. Adds a file to an existing customerInvoiceTemplate by URL.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="customerInvoiceTemplateId">Id of the customerInvoiceTemplate to add an file to</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AddCustomerInvoiceTemplateFileByURLWithHttpInfo (RecordFile body, int? customerInvoiceTemplateId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling CustomerInvoiceTemplateApi->AddCustomerInvoiceTemplateFileByURL");
            // verify the required parameter 'customerInvoiceTemplateId' is set
            if (customerInvoiceTemplateId == null)
                throw new ApiException(400, "Missing required parameter 'customerInvoiceTemplateId' when calling CustomerInvoiceTemplateApi->AddCustomerInvoiceTemplateFileByURL");

            var localVarPath = "/beta/customerInvoiceTemplate/{customerInvoiceTemplateId}/file";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (customerInvoiceTemplateId != null) localVarPathParams.Add("customerInvoiceTemplateId", Configuration.ApiClient.ParameterToString(customerInvoiceTemplateId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddCustomerInvoiceTemplateFileByURL", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Attach a file to a customerInvoiceTemplate by URL. Adds a file to an existing customerInvoiceTemplate by URL.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="customerInvoiceTemplateId">Id of the customerInvoiceTemplate to add an file to</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddCustomerInvoiceTemplateFileByURLAsync (RecordFile body, int? customerInvoiceTemplateId)
        {
             await AddCustomerInvoiceTemplateFileByURLAsyncWithHttpInfo(body, customerInvoiceTemplateId);

        }

        /// <summary>
        /// Attach a file to a customerInvoiceTemplate by URL. Adds a file to an existing customerInvoiceTemplate by URL.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="customerInvoiceTemplateId">Id of the customerInvoiceTemplate to add an file to</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddCustomerInvoiceTemplateFileByURLAsyncWithHttpInfo (RecordFile body, int? customerInvoiceTemplateId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling CustomerInvoiceTemplateApi->AddCustomerInvoiceTemplateFileByURL");
            // verify the required parameter 'customerInvoiceTemplateId' is set
            if (customerInvoiceTemplateId == null)
                throw new ApiException(400, "Missing required parameter 'customerInvoiceTemplateId' when calling CustomerInvoiceTemplateApi->AddCustomerInvoiceTemplateFileByURL");

            var localVarPath = "/beta/customerInvoiceTemplate/{customerInvoiceTemplateId}/file";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (customerInvoiceTemplateId != null) localVarPathParams.Add("customerInvoiceTemplateId", Configuration.ApiClient.ParameterToString(customerInvoiceTemplateId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddCustomerInvoiceTemplateFileByURL", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Add new tags for a customerInvoiceTemplate. Adds a tag to an existing customerInvoiceTemplate.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerInvoiceTemplateId">Id of the customerInvoiceTemplate to add a tag to</param>
        /// <param name="customerInvoiceTemplateTag">The tag to add</param>
        /// <returns></returns>
        public void AddCustomerInvoiceTemplateTag (int? customerInvoiceTemplateId, string customerInvoiceTemplateTag)
        {
             AddCustomerInvoiceTemplateTagWithHttpInfo(customerInvoiceTemplateId, customerInvoiceTemplateTag);
        }

        /// <summary>
        /// Add new tags for a customerInvoiceTemplate. Adds a tag to an existing customerInvoiceTemplate.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerInvoiceTemplateId">Id of the customerInvoiceTemplate to add a tag to</param>
        /// <param name="customerInvoiceTemplateTag">The tag to add</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AddCustomerInvoiceTemplateTagWithHttpInfo (int? customerInvoiceTemplateId, string customerInvoiceTemplateTag)
        {
            // verify the required parameter 'customerInvoiceTemplateId' is set
            if (customerInvoiceTemplateId == null)
                throw new ApiException(400, "Missing required parameter 'customerInvoiceTemplateId' when calling CustomerInvoiceTemplateApi->AddCustomerInvoiceTemplateTag");
            // verify the required parameter 'customerInvoiceTemplateTag' is set
            if (customerInvoiceTemplateTag == null)
                throw new ApiException(400, "Missing required parameter 'customerInvoiceTemplateTag' when calling CustomerInvoiceTemplateApi->AddCustomerInvoiceTemplateTag");

            var localVarPath = "/beta/customerInvoiceTemplate/{customerInvoiceTemplateId}/tag/{customerInvoiceTemplateTag}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (customerInvoiceTemplateId != null) localVarPathParams.Add("customerInvoiceTemplateId", Configuration.ApiClient.ParameterToString(customerInvoiceTemplateId)); // path parameter
            if (customerInvoiceTemplateTag != null) localVarPathParams.Add("customerInvoiceTemplateTag", Configuration.ApiClient.ParameterToString(customerInvoiceTemplateTag)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddCustomerInvoiceTemplateTag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Add new tags for a customerInvoiceTemplate. Adds a tag to an existing customerInvoiceTemplate.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerInvoiceTemplateId">Id of the customerInvoiceTemplate to add a tag to</param>
        /// <param name="customerInvoiceTemplateTag">The tag to add</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddCustomerInvoiceTemplateTagAsync (int? customerInvoiceTemplateId, string customerInvoiceTemplateTag)
        {
             await AddCustomerInvoiceTemplateTagAsyncWithHttpInfo(customerInvoiceTemplateId, customerInvoiceTemplateTag);

        }

        /// <summary>
        /// Add new tags for a customerInvoiceTemplate. Adds a tag to an existing customerInvoiceTemplate.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerInvoiceTemplateId">Id of the customerInvoiceTemplate to add a tag to</param>
        /// <param name="customerInvoiceTemplateTag">The tag to add</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddCustomerInvoiceTemplateTagAsyncWithHttpInfo (int? customerInvoiceTemplateId, string customerInvoiceTemplateTag)
        {
            // verify the required parameter 'customerInvoiceTemplateId' is set
            if (customerInvoiceTemplateId == null)
                throw new ApiException(400, "Missing required parameter 'customerInvoiceTemplateId' when calling CustomerInvoiceTemplateApi->AddCustomerInvoiceTemplateTag");
            // verify the required parameter 'customerInvoiceTemplateTag' is set
            if (customerInvoiceTemplateTag == null)
                throw new ApiException(400, "Missing required parameter 'customerInvoiceTemplateTag' when calling CustomerInvoiceTemplateApi->AddCustomerInvoiceTemplateTag");

            var localVarPath = "/beta/customerInvoiceTemplate/{customerInvoiceTemplateId}/tag/{customerInvoiceTemplateTag}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (customerInvoiceTemplateId != null) localVarPathParams.Add("customerInvoiceTemplateId", Configuration.ApiClient.ParameterToString(customerInvoiceTemplateId)); // path parameter
            if (customerInvoiceTemplateTag != null) localVarPathParams.Add("customerInvoiceTemplateTag", Configuration.ApiClient.ParameterToString(customerInvoiceTemplateTag)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddCustomerInvoiceTemplateTag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a customerInvoiceTemplate Deletes the customerInvoiceTemplate identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerInvoiceTemplateId">Id of the customerInvoiceTemplate to be deleted.</param>
        /// <returns></returns>
        public void DeleteCustomerInvoiceTemplate (int? customerInvoiceTemplateId)
        {
             DeleteCustomerInvoiceTemplateWithHttpInfo(customerInvoiceTemplateId);
        }

        /// <summary>
        /// Delete a customerInvoiceTemplate Deletes the customerInvoiceTemplate identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerInvoiceTemplateId">Id of the customerInvoiceTemplate to be deleted.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteCustomerInvoiceTemplateWithHttpInfo (int? customerInvoiceTemplateId)
        {
            // verify the required parameter 'customerInvoiceTemplateId' is set
            if (customerInvoiceTemplateId == null)
                throw new ApiException(400, "Missing required parameter 'customerInvoiceTemplateId' when calling CustomerInvoiceTemplateApi->DeleteCustomerInvoiceTemplate");

            var localVarPath = "/beta/customerInvoiceTemplate/{customerInvoiceTemplateId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (customerInvoiceTemplateId != null) localVarPathParams.Add("customerInvoiceTemplateId", Configuration.ApiClient.ParameterToString(customerInvoiceTemplateId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteCustomerInvoiceTemplate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a customerInvoiceTemplate Deletes the customerInvoiceTemplate identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerInvoiceTemplateId">Id of the customerInvoiceTemplate to be deleted.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteCustomerInvoiceTemplateAsync (int? customerInvoiceTemplateId)
        {
             await DeleteCustomerInvoiceTemplateAsyncWithHttpInfo(customerInvoiceTemplateId);

        }

        /// <summary>
        /// Delete a customerInvoiceTemplate Deletes the customerInvoiceTemplate identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerInvoiceTemplateId">Id of the customerInvoiceTemplate to be deleted.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteCustomerInvoiceTemplateAsyncWithHttpInfo (int? customerInvoiceTemplateId)
        {
            // verify the required parameter 'customerInvoiceTemplateId' is set
            if (customerInvoiceTemplateId == null)
                throw new ApiException(400, "Missing required parameter 'customerInvoiceTemplateId' when calling CustomerInvoiceTemplateApi->DeleteCustomerInvoiceTemplate");

            var localVarPath = "/beta/customerInvoiceTemplate/{customerInvoiceTemplateId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (customerInvoiceTemplateId != null) localVarPathParams.Add("customerInvoiceTemplateId", Configuration.ApiClient.ParameterToString(customerInvoiceTemplateId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteCustomerInvoiceTemplate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a file for a customerInvoiceTemplate. Deletes an existing customerInvoiceTemplate file using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerInvoiceTemplateId">Id of the customerInvoiceTemplate to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns></returns>
        public void DeleteCustomerInvoiceTemplateFile (int? customerInvoiceTemplateId, int? fileId)
        {
             DeleteCustomerInvoiceTemplateFileWithHttpInfo(customerInvoiceTemplateId, fileId);
        }

        /// <summary>
        /// Delete a file for a customerInvoiceTemplate. Deletes an existing customerInvoiceTemplate file using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerInvoiceTemplateId">Id of the customerInvoiceTemplate to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteCustomerInvoiceTemplateFileWithHttpInfo (int? customerInvoiceTemplateId, int? fileId)
        {
            // verify the required parameter 'customerInvoiceTemplateId' is set
            if (customerInvoiceTemplateId == null)
                throw new ApiException(400, "Missing required parameter 'customerInvoiceTemplateId' when calling CustomerInvoiceTemplateApi->DeleteCustomerInvoiceTemplateFile");
            // verify the required parameter 'fileId' is set
            if (fileId == null)
                throw new ApiException(400, "Missing required parameter 'fileId' when calling CustomerInvoiceTemplateApi->DeleteCustomerInvoiceTemplateFile");

            var localVarPath = "/beta/customerInvoiceTemplate/{customerInvoiceTemplateId}/file/{fileId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (customerInvoiceTemplateId != null) localVarPathParams.Add("customerInvoiceTemplateId", Configuration.ApiClient.ParameterToString(customerInvoiceTemplateId)); // path parameter
            if (fileId != null) localVarPathParams.Add("fileId", Configuration.ApiClient.ParameterToString(fileId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteCustomerInvoiceTemplateFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a file for a customerInvoiceTemplate. Deletes an existing customerInvoiceTemplate file using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerInvoiceTemplateId">Id of the customerInvoiceTemplate to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteCustomerInvoiceTemplateFileAsync (int? customerInvoiceTemplateId, int? fileId)
        {
             await DeleteCustomerInvoiceTemplateFileAsyncWithHttpInfo(customerInvoiceTemplateId, fileId);

        }

        /// <summary>
        /// Delete a file for a customerInvoiceTemplate. Deletes an existing customerInvoiceTemplate file using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerInvoiceTemplateId">Id of the customerInvoiceTemplate to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteCustomerInvoiceTemplateFileAsyncWithHttpInfo (int? customerInvoiceTemplateId, int? fileId)
        {
            // verify the required parameter 'customerInvoiceTemplateId' is set
            if (customerInvoiceTemplateId == null)
                throw new ApiException(400, "Missing required parameter 'customerInvoiceTemplateId' when calling CustomerInvoiceTemplateApi->DeleteCustomerInvoiceTemplateFile");
            // verify the required parameter 'fileId' is set
            if (fileId == null)
                throw new ApiException(400, "Missing required parameter 'fileId' when calling CustomerInvoiceTemplateApi->DeleteCustomerInvoiceTemplateFile");

            var localVarPath = "/beta/customerInvoiceTemplate/{customerInvoiceTemplateId}/file/{fileId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (customerInvoiceTemplateId != null) localVarPathParams.Add("customerInvoiceTemplateId", Configuration.ApiClient.ParameterToString(customerInvoiceTemplateId)); // path parameter
            if (fileId != null) localVarPathParams.Add("fileId", Configuration.ApiClient.ParameterToString(fileId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteCustomerInvoiceTemplateFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a tag for a customerInvoiceTemplate. Deletes an existing customerInvoiceTemplate tag using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerInvoiceTemplateId">Id of the customerInvoiceTemplate to remove tag from</param>
        /// <param name="customerInvoiceTemplateTag">The tag to delete</param>
        /// <returns></returns>
        public void DeleteCustomerInvoiceTemplateTag (int? customerInvoiceTemplateId, string customerInvoiceTemplateTag)
        {
             DeleteCustomerInvoiceTemplateTagWithHttpInfo(customerInvoiceTemplateId, customerInvoiceTemplateTag);
        }

        /// <summary>
        /// Delete a tag for a customerInvoiceTemplate. Deletes an existing customerInvoiceTemplate tag using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerInvoiceTemplateId">Id of the customerInvoiceTemplate to remove tag from</param>
        /// <param name="customerInvoiceTemplateTag">The tag to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteCustomerInvoiceTemplateTagWithHttpInfo (int? customerInvoiceTemplateId, string customerInvoiceTemplateTag)
        {
            // verify the required parameter 'customerInvoiceTemplateId' is set
            if (customerInvoiceTemplateId == null)
                throw new ApiException(400, "Missing required parameter 'customerInvoiceTemplateId' when calling CustomerInvoiceTemplateApi->DeleteCustomerInvoiceTemplateTag");
            // verify the required parameter 'customerInvoiceTemplateTag' is set
            if (customerInvoiceTemplateTag == null)
                throw new ApiException(400, "Missing required parameter 'customerInvoiceTemplateTag' when calling CustomerInvoiceTemplateApi->DeleteCustomerInvoiceTemplateTag");

            var localVarPath = "/beta/customerInvoiceTemplate/{customerInvoiceTemplateId}/tag/{customerInvoiceTemplateTag}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (customerInvoiceTemplateId != null) localVarPathParams.Add("customerInvoiceTemplateId", Configuration.ApiClient.ParameterToString(customerInvoiceTemplateId)); // path parameter
            if (customerInvoiceTemplateTag != null) localVarPathParams.Add("customerInvoiceTemplateTag", Configuration.ApiClient.ParameterToString(customerInvoiceTemplateTag)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteCustomerInvoiceTemplateTag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a tag for a customerInvoiceTemplate. Deletes an existing customerInvoiceTemplate tag using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerInvoiceTemplateId">Id of the customerInvoiceTemplate to remove tag from</param>
        /// <param name="customerInvoiceTemplateTag">The tag to delete</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteCustomerInvoiceTemplateTagAsync (int? customerInvoiceTemplateId, string customerInvoiceTemplateTag)
        {
             await DeleteCustomerInvoiceTemplateTagAsyncWithHttpInfo(customerInvoiceTemplateId, customerInvoiceTemplateTag);

        }

        /// <summary>
        /// Delete a tag for a customerInvoiceTemplate. Deletes an existing customerInvoiceTemplate tag using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerInvoiceTemplateId">Id of the customerInvoiceTemplate to remove tag from</param>
        /// <param name="customerInvoiceTemplateTag">The tag to delete</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteCustomerInvoiceTemplateTagAsyncWithHttpInfo (int? customerInvoiceTemplateId, string customerInvoiceTemplateTag)
        {
            // verify the required parameter 'customerInvoiceTemplateId' is set
            if (customerInvoiceTemplateId == null)
                throw new ApiException(400, "Missing required parameter 'customerInvoiceTemplateId' when calling CustomerInvoiceTemplateApi->DeleteCustomerInvoiceTemplateTag");
            // verify the required parameter 'customerInvoiceTemplateTag' is set
            if (customerInvoiceTemplateTag == null)
                throw new ApiException(400, "Missing required parameter 'customerInvoiceTemplateTag' when calling CustomerInvoiceTemplateApi->DeleteCustomerInvoiceTemplateTag");

            var localVarPath = "/beta/customerInvoiceTemplate/{customerInvoiceTemplateId}/tag/{customerInvoiceTemplateTag}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (customerInvoiceTemplateId != null) localVarPathParams.Add("customerInvoiceTemplateId", Configuration.ApiClient.ParameterToString(customerInvoiceTemplateId)); // path parameter
            if (customerInvoiceTemplateTag != null) localVarPathParams.Add("customerInvoiceTemplateTag", Configuration.ApiClient.ParameterToString(customerInvoiceTemplateTag)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteCustomerInvoiceTemplateTag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Search customerInvoiceTemplates by filter Returns the list of customerInvoiceTemplates that match the given filter.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>List&lt;CustomerInvoiceTemplate&gt;</returns>
        public List<CustomerInvoiceTemplate> GetCustomerInvoiceTemplateByFilter (string filter = null, int? page = null, int? limit = null, string sort = null)
        {
             ApiResponse<List<CustomerInvoiceTemplate>> localVarResponse = GetCustomerInvoiceTemplateByFilterWithHttpInfo(filter, page, limit, sort);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Search customerInvoiceTemplates by filter Returns the list of customerInvoiceTemplates that match the given filter.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>ApiResponse of List&lt;CustomerInvoiceTemplate&gt;</returns>
        public ApiResponse< List<CustomerInvoiceTemplate> > GetCustomerInvoiceTemplateByFilterWithHttpInfo (string filter = null, int? page = null, int? limit = null, string sort = null)
        {

            var localVarPath = "/beta/customerInvoiceTemplate/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (filter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (page != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCustomerInvoiceTemplateByFilter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<CustomerInvoiceTemplate>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<CustomerInvoiceTemplate>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<CustomerInvoiceTemplate>)));
        }

        /// <summary>
        /// Search customerInvoiceTemplates by filter Returns the list of customerInvoiceTemplates that match the given filter.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>Task of List&lt;CustomerInvoiceTemplate&gt;</returns>
        public async System.Threading.Tasks.Task<List<CustomerInvoiceTemplate>> GetCustomerInvoiceTemplateByFilterAsync (string filter = null, int? page = null, int? limit = null, string sort = null)
        {
             ApiResponse<List<CustomerInvoiceTemplate>> localVarResponse = await GetCustomerInvoiceTemplateByFilterAsyncWithHttpInfo(filter, page, limit, sort);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Search customerInvoiceTemplates by filter Returns the list of customerInvoiceTemplates that match the given filter.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;CustomerInvoiceTemplate&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<CustomerInvoiceTemplate>>> GetCustomerInvoiceTemplateByFilterAsyncWithHttpInfo (string filter = null, int? page = null, int? limit = null, string sort = null)
        {

            var localVarPath = "/beta/customerInvoiceTemplate/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (filter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (page != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCustomerInvoiceTemplateByFilter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<CustomerInvoiceTemplate>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<CustomerInvoiceTemplate>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<CustomerInvoiceTemplate>)));
        }

        /// <summary>
        /// Get a customerInvoiceTemplate by id Returns the customerInvoiceTemplate identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerInvoiceTemplateId">Id of the customerInvoiceTemplate to be returned.</param>
        /// <returns>CustomerInvoiceTemplate</returns>
        public CustomerInvoiceTemplate GetCustomerInvoiceTemplateById (int? customerInvoiceTemplateId)
        {
             ApiResponse<CustomerInvoiceTemplate> localVarResponse = GetCustomerInvoiceTemplateByIdWithHttpInfo(customerInvoiceTemplateId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a customerInvoiceTemplate by id Returns the customerInvoiceTemplate identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerInvoiceTemplateId">Id of the customerInvoiceTemplate to be returned.</param>
        /// <returns>ApiResponse of CustomerInvoiceTemplate</returns>
        public ApiResponse< CustomerInvoiceTemplate > GetCustomerInvoiceTemplateByIdWithHttpInfo (int? customerInvoiceTemplateId)
        {
            // verify the required parameter 'customerInvoiceTemplateId' is set
            if (customerInvoiceTemplateId == null)
                throw new ApiException(400, "Missing required parameter 'customerInvoiceTemplateId' when calling CustomerInvoiceTemplateApi->GetCustomerInvoiceTemplateById");

            var localVarPath = "/beta/customerInvoiceTemplate/{customerInvoiceTemplateId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (customerInvoiceTemplateId != null) localVarPathParams.Add("customerInvoiceTemplateId", Configuration.ApiClient.ParameterToString(customerInvoiceTemplateId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCustomerInvoiceTemplateById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CustomerInvoiceTemplate>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CustomerInvoiceTemplate) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CustomerInvoiceTemplate)));
        }

        /// <summary>
        /// Get a customerInvoiceTemplate by id Returns the customerInvoiceTemplate identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerInvoiceTemplateId">Id of the customerInvoiceTemplate to be returned.</param>
        /// <returns>Task of CustomerInvoiceTemplate</returns>
        public async System.Threading.Tasks.Task<CustomerInvoiceTemplate> GetCustomerInvoiceTemplateByIdAsync (int? customerInvoiceTemplateId)
        {
             ApiResponse<CustomerInvoiceTemplate> localVarResponse = await GetCustomerInvoiceTemplateByIdAsyncWithHttpInfo(customerInvoiceTemplateId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a customerInvoiceTemplate by id Returns the customerInvoiceTemplate identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerInvoiceTemplateId">Id of the customerInvoiceTemplate to be returned.</param>
        /// <returns>Task of ApiResponse (CustomerInvoiceTemplate)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CustomerInvoiceTemplate>> GetCustomerInvoiceTemplateByIdAsyncWithHttpInfo (int? customerInvoiceTemplateId)
        {
            // verify the required parameter 'customerInvoiceTemplateId' is set
            if (customerInvoiceTemplateId == null)
                throw new ApiException(400, "Missing required parameter 'customerInvoiceTemplateId' when calling CustomerInvoiceTemplateApi->GetCustomerInvoiceTemplateById");

            var localVarPath = "/beta/customerInvoiceTemplate/{customerInvoiceTemplateId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (customerInvoiceTemplateId != null) localVarPathParams.Add("customerInvoiceTemplateId", Configuration.ApiClient.ParameterToString(customerInvoiceTemplateId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCustomerInvoiceTemplateById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CustomerInvoiceTemplate>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CustomerInvoiceTemplate) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CustomerInvoiceTemplate)));
        }

        /// <summary>
        /// Get the files for a customerInvoiceTemplate. Get all existing customerInvoiceTemplate files.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerInvoiceTemplateId">Id of the customerInvoiceTemplate to get files for</param>
        /// <returns></returns>
        public void GetCustomerInvoiceTemplateFiles (int? customerInvoiceTemplateId)
        {
             GetCustomerInvoiceTemplateFilesWithHttpInfo(customerInvoiceTemplateId);
        }

        /// <summary>
        /// Get the files for a customerInvoiceTemplate. Get all existing customerInvoiceTemplate files.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerInvoiceTemplateId">Id of the customerInvoiceTemplate to get files for</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GetCustomerInvoiceTemplateFilesWithHttpInfo (int? customerInvoiceTemplateId)
        {
            // verify the required parameter 'customerInvoiceTemplateId' is set
            if (customerInvoiceTemplateId == null)
                throw new ApiException(400, "Missing required parameter 'customerInvoiceTemplateId' when calling CustomerInvoiceTemplateApi->GetCustomerInvoiceTemplateFiles");

            var localVarPath = "/beta/customerInvoiceTemplate/{customerInvoiceTemplateId}/file";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (customerInvoiceTemplateId != null) localVarPathParams.Add("customerInvoiceTemplateId", Configuration.ApiClient.ParameterToString(customerInvoiceTemplateId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCustomerInvoiceTemplateFiles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get the files for a customerInvoiceTemplate. Get all existing customerInvoiceTemplate files.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerInvoiceTemplateId">Id of the customerInvoiceTemplate to get files for</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetCustomerInvoiceTemplateFilesAsync (int? customerInvoiceTemplateId)
        {
             await GetCustomerInvoiceTemplateFilesAsyncWithHttpInfo(customerInvoiceTemplateId);

        }

        /// <summary>
        /// Get the files for a customerInvoiceTemplate. Get all existing customerInvoiceTemplate files.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerInvoiceTemplateId">Id of the customerInvoiceTemplate to get files for</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetCustomerInvoiceTemplateFilesAsyncWithHttpInfo (int? customerInvoiceTemplateId)
        {
            // verify the required parameter 'customerInvoiceTemplateId' is set
            if (customerInvoiceTemplateId == null)
                throw new ApiException(400, "Missing required parameter 'customerInvoiceTemplateId' when calling CustomerInvoiceTemplateApi->GetCustomerInvoiceTemplateFiles");

            var localVarPath = "/beta/customerInvoiceTemplate/{customerInvoiceTemplateId}/file";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (customerInvoiceTemplateId != null) localVarPathParams.Add("customerInvoiceTemplateId", Configuration.ApiClient.ParameterToString(customerInvoiceTemplateId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCustomerInvoiceTemplateFiles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get the tags for a customerInvoiceTemplate. Get all existing customerInvoiceTemplate tags.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerInvoiceTemplateId">Id of the customerInvoiceTemplate to get tags for</param>
        /// <returns></returns>
        public void GetCustomerInvoiceTemplateTags (int? customerInvoiceTemplateId)
        {
             GetCustomerInvoiceTemplateTagsWithHttpInfo(customerInvoiceTemplateId);
        }

        /// <summary>
        /// Get the tags for a customerInvoiceTemplate. Get all existing customerInvoiceTemplate tags.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerInvoiceTemplateId">Id of the customerInvoiceTemplate to get tags for</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GetCustomerInvoiceTemplateTagsWithHttpInfo (int? customerInvoiceTemplateId)
        {
            // verify the required parameter 'customerInvoiceTemplateId' is set
            if (customerInvoiceTemplateId == null)
                throw new ApiException(400, "Missing required parameter 'customerInvoiceTemplateId' when calling CustomerInvoiceTemplateApi->GetCustomerInvoiceTemplateTags");

            var localVarPath = "/beta/customerInvoiceTemplate/{customerInvoiceTemplateId}/tag";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (customerInvoiceTemplateId != null) localVarPathParams.Add("customerInvoiceTemplateId", Configuration.ApiClient.ParameterToString(customerInvoiceTemplateId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCustomerInvoiceTemplateTags", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get the tags for a customerInvoiceTemplate. Get all existing customerInvoiceTemplate tags.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerInvoiceTemplateId">Id of the customerInvoiceTemplate to get tags for</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetCustomerInvoiceTemplateTagsAsync (int? customerInvoiceTemplateId)
        {
             await GetCustomerInvoiceTemplateTagsAsyncWithHttpInfo(customerInvoiceTemplateId);

        }

        /// <summary>
        /// Get the tags for a customerInvoiceTemplate. Get all existing customerInvoiceTemplate tags.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerInvoiceTemplateId">Id of the customerInvoiceTemplate to get tags for</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetCustomerInvoiceTemplateTagsAsyncWithHttpInfo (int? customerInvoiceTemplateId)
        {
            // verify the required parameter 'customerInvoiceTemplateId' is set
            if (customerInvoiceTemplateId == null)
                throw new ApiException(400, "Missing required parameter 'customerInvoiceTemplateId' when calling CustomerInvoiceTemplateApi->GetCustomerInvoiceTemplateTags");

            var localVarPath = "/beta/customerInvoiceTemplate/{customerInvoiceTemplateId}/tag";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (customerInvoiceTemplateId != null) localVarPathParams.Add("customerInvoiceTemplateId", Configuration.ApiClient.ParameterToString(customerInvoiceTemplateId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCustomerInvoiceTemplateTags", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get a duplicated a customerInvoiceTemplate by id Returns a duplicated customerInvoiceTemplate identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerInvoiceTemplateId">Id of the customerInvoiceTemplate to be duplicated.</param>
        /// <returns>CustomerInvoiceTemplate</returns>
        public CustomerInvoiceTemplate GetDuplicateCustomerInvoiceTemplateById (int? customerInvoiceTemplateId)
        {
             ApiResponse<CustomerInvoiceTemplate> localVarResponse = GetDuplicateCustomerInvoiceTemplateByIdWithHttpInfo(customerInvoiceTemplateId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a duplicated a customerInvoiceTemplate by id Returns a duplicated customerInvoiceTemplate identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerInvoiceTemplateId">Id of the customerInvoiceTemplate to be duplicated.</param>
        /// <returns>ApiResponse of CustomerInvoiceTemplate</returns>
        public ApiResponse< CustomerInvoiceTemplate > GetDuplicateCustomerInvoiceTemplateByIdWithHttpInfo (int? customerInvoiceTemplateId)
        {
            // verify the required parameter 'customerInvoiceTemplateId' is set
            if (customerInvoiceTemplateId == null)
                throw new ApiException(400, "Missing required parameter 'customerInvoiceTemplateId' when calling CustomerInvoiceTemplateApi->GetDuplicateCustomerInvoiceTemplateById");

            var localVarPath = "/beta/customerInvoiceTemplate/duplicate/{customerInvoiceTemplateId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (customerInvoiceTemplateId != null) localVarPathParams.Add("customerInvoiceTemplateId", Configuration.ApiClient.ParameterToString(customerInvoiceTemplateId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDuplicateCustomerInvoiceTemplateById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CustomerInvoiceTemplate>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CustomerInvoiceTemplate) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CustomerInvoiceTemplate)));
        }

        /// <summary>
        /// Get a duplicated a customerInvoiceTemplate by id Returns a duplicated customerInvoiceTemplate identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerInvoiceTemplateId">Id of the customerInvoiceTemplate to be duplicated.</param>
        /// <returns>Task of CustomerInvoiceTemplate</returns>
        public async System.Threading.Tasks.Task<CustomerInvoiceTemplate> GetDuplicateCustomerInvoiceTemplateByIdAsync (int? customerInvoiceTemplateId)
        {
             ApiResponse<CustomerInvoiceTemplate> localVarResponse = await GetDuplicateCustomerInvoiceTemplateByIdAsyncWithHttpInfo(customerInvoiceTemplateId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a duplicated a customerInvoiceTemplate by id Returns a duplicated customerInvoiceTemplate identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerInvoiceTemplateId">Id of the customerInvoiceTemplate to be duplicated.</param>
        /// <returns>Task of ApiResponse (CustomerInvoiceTemplate)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CustomerInvoiceTemplate>> GetDuplicateCustomerInvoiceTemplateByIdAsyncWithHttpInfo (int? customerInvoiceTemplateId)
        {
            // verify the required parameter 'customerInvoiceTemplateId' is set
            if (customerInvoiceTemplateId == null)
                throw new ApiException(400, "Missing required parameter 'customerInvoiceTemplateId' when calling CustomerInvoiceTemplateApi->GetDuplicateCustomerInvoiceTemplateById");

            var localVarPath = "/beta/customerInvoiceTemplate/duplicate/{customerInvoiceTemplateId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (customerInvoiceTemplateId != null) localVarPathParams.Add("customerInvoiceTemplateId", Configuration.ApiClient.ParameterToString(customerInvoiceTemplateId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDuplicateCustomerInvoiceTemplateById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CustomerInvoiceTemplate>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CustomerInvoiceTemplate) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CustomerInvoiceTemplate)));
        }

        /// <summary>
        /// Update a customerInvoiceTemplate Updates an existing customerInvoiceTemplate using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">CustomerInvoiceTemplate to be updated.</param>
        /// <returns></returns>
        public void UpdateCustomerInvoiceTemplate (CustomerInvoiceTemplate body)
        {
             UpdateCustomerInvoiceTemplateWithHttpInfo(body);
        }

        /// <summary>
        /// Update a customerInvoiceTemplate Updates an existing customerInvoiceTemplate using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">CustomerInvoiceTemplate to be updated.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateCustomerInvoiceTemplateWithHttpInfo (CustomerInvoiceTemplate body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling CustomerInvoiceTemplateApi->UpdateCustomerInvoiceTemplate");

            var localVarPath = "/beta/customerInvoiceTemplate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateCustomerInvoiceTemplate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update a customerInvoiceTemplate Updates an existing customerInvoiceTemplate using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">CustomerInvoiceTemplate to be updated.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateCustomerInvoiceTemplateAsync (CustomerInvoiceTemplate body)
        {
             await UpdateCustomerInvoiceTemplateAsyncWithHttpInfo(body);

        }

        /// <summary>
        /// Update a customerInvoiceTemplate Updates an existing customerInvoiceTemplate using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">CustomerInvoiceTemplate to be updated.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateCustomerInvoiceTemplateAsyncWithHttpInfo (CustomerInvoiceTemplate body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling CustomerInvoiceTemplateApi->UpdateCustomerInvoiceTemplate");

            var localVarPath = "/beta/customerInvoiceTemplate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateCustomerInvoiceTemplate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

    }
}
