/* 
 * Infoplus API
 *
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Infoplus.Client;
using Infoplus.Model;

namespace Infoplus.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IEdiDocumentApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create an ediDocument
        /// </summary>
        /// <remarks>
        /// Inserts a new ediDocument using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">EdiDocument to be inserted.</param>
        /// <returns>EdiDocument</returns>
        EdiDocument AddEdiDocument (EdiDocument body);

        /// <summary>
        /// Create an ediDocument
        /// </summary>
        /// <remarks>
        /// Inserts a new ediDocument using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">EdiDocument to be inserted.</param>
        /// <returns>ApiResponse of EdiDocument</returns>
        ApiResponse<EdiDocument> AddEdiDocumentWithHttpInfo (EdiDocument body);
        /// <summary>
        /// Add new audit for an ediDocument
        /// </summary>
        /// <remarks>
        /// Adds an audit to an existing ediDocument.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ediDocumentId">Id of the ediDocument to add an audit to</param>
        /// <param name="ediDocumentAudit">The audit to add</param>
        /// <returns></returns>
        void AddEdiDocumentAudit (int? ediDocumentId, string ediDocumentAudit);

        /// <summary>
        /// Add new audit for an ediDocument
        /// </summary>
        /// <remarks>
        /// Adds an audit to an existing ediDocument.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ediDocumentId">Id of the ediDocument to add an audit to</param>
        /// <param name="ediDocumentAudit">The audit to add</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddEdiDocumentAuditWithHttpInfo (int? ediDocumentId, string ediDocumentAudit);
        /// <summary>
        /// Attach a file to an ediDocument
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing ediDocument.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ediDocumentId">Id of the ediDocument to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns></returns>
        void AddEdiDocumentFile (int? ediDocumentId, string fileName);

        /// <summary>
        /// Attach a file to an ediDocument
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing ediDocument.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ediDocumentId">Id of the ediDocument to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddEdiDocumentFileWithHttpInfo (int? ediDocumentId, string fileName);
        /// <summary>
        /// Attach a file to an ediDocument by URL.
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing ediDocument by URL.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="ediDocumentId">Id of the ediDocument to add an file to</param>
        /// <returns></returns>
        void AddEdiDocumentFileByURL (RecordFile body, int? ediDocumentId);

        /// <summary>
        /// Attach a file to an ediDocument by URL.
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing ediDocument by URL.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="ediDocumentId">Id of the ediDocument to add an file to</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddEdiDocumentFileByURLWithHttpInfo (RecordFile body, int? ediDocumentId);
        /// <summary>
        /// Add new tags for an ediDocument.
        /// </summary>
        /// <remarks>
        /// Adds a tag to an existing ediDocument.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ediDocumentId">Id of the ediDocument to add a tag to</param>
        /// <param name="ediDocumentTag">The tag to add</param>
        /// <returns></returns>
        void AddEdiDocumentTag (int? ediDocumentId, string ediDocumentTag);

        /// <summary>
        /// Add new tags for an ediDocument.
        /// </summary>
        /// <remarks>
        /// Adds a tag to an existing ediDocument.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ediDocumentId">Id of the ediDocument to add a tag to</param>
        /// <param name="ediDocumentTag">The tag to add</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddEdiDocumentTagWithHttpInfo (int? ediDocumentId, string ediDocumentTag);
        /// <summary>
        /// Delete a file for an ediDocument.
        /// </summary>
        /// <remarks>
        /// Deletes an existing ediDocument file using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ediDocumentId">Id of the ediDocument to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns></returns>
        void DeleteEdiDocumentFile (int? ediDocumentId, int? fileId);

        /// <summary>
        /// Delete a file for an ediDocument.
        /// </summary>
        /// <remarks>
        /// Deletes an existing ediDocument file using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ediDocumentId">Id of the ediDocument to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteEdiDocumentFileWithHttpInfo (int? ediDocumentId, int? fileId);
        /// <summary>
        /// Delete a tag for an ediDocument.
        /// </summary>
        /// <remarks>
        /// Deletes an existing ediDocument tag using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ediDocumentId">Id of the ediDocument to remove tag from</param>
        /// <param name="ediDocumentTag">The tag to delete</param>
        /// <returns></returns>
        void DeleteEdiDocumentTag (int? ediDocumentId, string ediDocumentTag);

        /// <summary>
        /// Delete a tag for an ediDocument.
        /// </summary>
        /// <remarks>
        /// Deletes an existing ediDocument tag using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ediDocumentId">Id of the ediDocument to remove tag from</param>
        /// <param name="ediDocumentTag">The tag to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteEdiDocumentTagWithHttpInfo (int? ediDocumentId, string ediDocumentTag);
        /// <summary>
        /// Get a duplicated an ediDocument by id
        /// </summary>
        /// <remarks>
        /// Returns a duplicated ediDocument identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ediDocumentId">Id of the ediDocument to be duplicated.</param>
        /// <returns>EdiDocument</returns>
        EdiDocument GetDuplicateEdiDocumentById (int? ediDocumentId);

        /// <summary>
        /// Get a duplicated an ediDocument by id
        /// </summary>
        /// <remarks>
        /// Returns a duplicated ediDocument identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ediDocumentId">Id of the ediDocument to be duplicated.</param>
        /// <returns>ApiResponse of EdiDocument</returns>
        ApiResponse<EdiDocument> GetDuplicateEdiDocumentByIdWithHttpInfo (int? ediDocumentId);
        /// <summary>
        /// Search ediDocuments by filter
        /// </summary>
        /// <remarks>
        /// Returns the list of ediDocuments that match the given filter.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>List&lt;EdiDocument&gt;</returns>
        List<EdiDocument> GetEdiDocumentByFilter (string filter = null, int? page = null, int? limit = null, string sort = null);

        /// <summary>
        /// Search ediDocuments by filter
        /// </summary>
        /// <remarks>
        /// Returns the list of ediDocuments that match the given filter.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>ApiResponse of List&lt;EdiDocument&gt;</returns>
        ApiResponse<List<EdiDocument>> GetEdiDocumentByFilterWithHttpInfo (string filter = null, int? page = null, int? limit = null, string sort = null);
        /// <summary>
        /// Get an ediDocument by id
        /// </summary>
        /// <remarks>
        /// Returns the ediDocument identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ediDocumentId">Id of the ediDocument to be returned.</param>
        /// <returns>EdiDocument</returns>
        EdiDocument GetEdiDocumentById (int? ediDocumentId);

        /// <summary>
        /// Get an ediDocument by id
        /// </summary>
        /// <remarks>
        /// Returns the ediDocument identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ediDocumentId">Id of the ediDocument to be returned.</param>
        /// <returns>ApiResponse of EdiDocument</returns>
        ApiResponse<EdiDocument> GetEdiDocumentByIdWithHttpInfo (int? ediDocumentId);
        /// <summary>
        /// Get the files for an ediDocument.
        /// </summary>
        /// <remarks>
        /// Get all existing ediDocument files.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ediDocumentId">Id of the ediDocument to get files for</param>
        /// <returns></returns>
        void GetEdiDocumentFiles (int? ediDocumentId);

        /// <summary>
        /// Get the files for an ediDocument.
        /// </summary>
        /// <remarks>
        /// Get all existing ediDocument files.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ediDocumentId">Id of the ediDocument to get files for</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetEdiDocumentFilesWithHttpInfo (int? ediDocumentId);
        /// <summary>
        /// Get the tags for an ediDocument.
        /// </summary>
        /// <remarks>
        /// Get all existing ediDocument tags.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ediDocumentId">Id of the ediDocument to get tags for</param>
        /// <returns></returns>
        void GetEdiDocumentTags (int? ediDocumentId);

        /// <summary>
        /// Get the tags for an ediDocument.
        /// </summary>
        /// <remarks>
        /// Get all existing ediDocument tags.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ediDocumentId">Id of the ediDocument to get tags for</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetEdiDocumentTagsWithHttpInfo (int? ediDocumentId);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create an ediDocument
        /// </summary>
        /// <remarks>
        /// Inserts a new ediDocument using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">EdiDocument to be inserted.</param>
        /// <returns>Task of EdiDocument</returns>
        System.Threading.Tasks.Task<EdiDocument> AddEdiDocumentAsync (EdiDocument body);

        /// <summary>
        /// Create an ediDocument
        /// </summary>
        /// <remarks>
        /// Inserts a new ediDocument using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">EdiDocument to be inserted.</param>
        /// <returns>Task of ApiResponse (EdiDocument)</returns>
        System.Threading.Tasks.Task<ApiResponse<EdiDocument>> AddEdiDocumentAsyncWithHttpInfo (EdiDocument body);
        /// <summary>
        /// Add new audit for an ediDocument
        /// </summary>
        /// <remarks>
        /// Adds an audit to an existing ediDocument.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ediDocumentId">Id of the ediDocument to add an audit to</param>
        /// <param name="ediDocumentAudit">The audit to add</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddEdiDocumentAuditAsync (int? ediDocumentId, string ediDocumentAudit);

        /// <summary>
        /// Add new audit for an ediDocument
        /// </summary>
        /// <remarks>
        /// Adds an audit to an existing ediDocument.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ediDocumentId">Id of the ediDocument to add an audit to</param>
        /// <param name="ediDocumentAudit">The audit to add</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddEdiDocumentAuditAsyncWithHttpInfo (int? ediDocumentId, string ediDocumentAudit);
        /// <summary>
        /// Attach a file to an ediDocument
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing ediDocument.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ediDocumentId">Id of the ediDocument to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddEdiDocumentFileAsync (int? ediDocumentId, string fileName);

        /// <summary>
        /// Attach a file to an ediDocument
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing ediDocument.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ediDocumentId">Id of the ediDocument to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddEdiDocumentFileAsyncWithHttpInfo (int? ediDocumentId, string fileName);
        /// <summary>
        /// Attach a file to an ediDocument by URL.
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing ediDocument by URL.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="ediDocumentId">Id of the ediDocument to add an file to</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddEdiDocumentFileByURLAsync (RecordFile body, int? ediDocumentId);

        /// <summary>
        /// Attach a file to an ediDocument by URL.
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing ediDocument by URL.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="ediDocumentId">Id of the ediDocument to add an file to</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddEdiDocumentFileByURLAsyncWithHttpInfo (RecordFile body, int? ediDocumentId);
        /// <summary>
        /// Add new tags for an ediDocument.
        /// </summary>
        /// <remarks>
        /// Adds a tag to an existing ediDocument.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ediDocumentId">Id of the ediDocument to add a tag to</param>
        /// <param name="ediDocumentTag">The tag to add</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddEdiDocumentTagAsync (int? ediDocumentId, string ediDocumentTag);

        /// <summary>
        /// Add new tags for an ediDocument.
        /// </summary>
        /// <remarks>
        /// Adds a tag to an existing ediDocument.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ediDocumentId">Id of the ediDocument to add a tag to</param>
        /// <param name="ediDocumentTag">The tag to add</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddEdiDocumentTagAsyncWithHttpInfo (int? ediDocumentId, string ediDocumentTag);
        /// <summary>
        /// Delete a file for an ediDocument.
        /// </summary>
        /// <remarks>
        /// Deletes an existing ediDocument file using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ediDocumentId">Id of the ediDocument to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteEdiDocumentFileAsync (int? ediDocumentId, int? fileId);

        /// <summary>
        /// Delete a file for an ediDocument.
        /// </summary>
        /// <remarks>
        /// Deletes an existing ediDocument file using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ediDocumentId">Id of the ediDocument to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteEdiDocumentFileAsyncWithHttpInfo (int? ediDocumentId, int? fileId);
        /// <summary>
        /// Delete a tag for an ediDocument.
        /// </summary>
        /// <remarks>
        /// Deletes an existing ediDocument tag using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ediDocumentId">Id of the ediDocument to remove tag from</param>
        /// <param name="ediDocumentTag">The tag to delete</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteEdiDocumentTagAsync (int? ediDocumentId, string ediDocumentTag);

        /// <summary>
        /// Delete a tag for an ediDocument.
        /// </summary>
        /// <remarks>
        /// Deletes an existing ediDocument tag using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ediDocumentId">Id of the ediDocument to remove tag from</param>
        /// <param name="ediDocumentTag">The tag to delete</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteEdiDocumentTagAsyncWithHttpInfo (int? ediDocumentId, string ediDocumentTag);
        /// <summary>
        /// Get a duplicated an ediDocument by id
        /// </summary>
        /// <remarks>
        /// Returns a duplicated ediDocument identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ediDocumentId">Id of the ediDocument to be duplicated.</param>
        /// <returns>Task of EdiDocument</returns>
        System.Threading.Tasks.Task<EdiDocument> GetDuplicateEdiDocumentByIdAsync (int? ediDocumentId);

        /// <summary>
        /// Get a duplicated an ediDocument by id
        /// </summary>
        /// <remarks>
        /// Returns a duplicated ediDocument identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ediDocumentId">Id of the ediDocument to be duplicated.</param>
        /// <returns>Task of ApiResponse (EdiDocument)</returns>
        System.Threading.Tasks.Task<ApiResponse<EdiDocument>> GetDuplicateEdiDocumentByIdAsyncWithHttpInfo (int? ediDocumentId);
        /// <summary>
        /// Search ediDocuments by filter
        /// </summary>
        /// <remarks>
        /// Returns the list of ediDocuments that match the given filter.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>Task of List&lt;EdiDocument&gt;</returns>
        System.Threading.Tasks.Task<List<EdiDocument>> GetEdiDocumentByFilterAsync (string filter = null, int? page = null, int? limit = null, string sort = null);

        /// <summary>
        /// Search ediDocuments by filter
        /// </summary>
        /// <remarks>
        /// Returns the list of ediDocuments that match the given filter.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;EdiDocument&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<EdiDocument>>> GetEdiDocumentByFilterAsyncWithHttpInfo (string filter = null, int? page = null, int? limit = null, string sort = null);
        /// <summary>
        /// Get an ediDocument by id
        /// </summary>
        /// <remarks>
        /// Returns the ediDocument identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ediDocumentId">Id of the ediDocument to be returned.</param>
        /// <returns>Task of EdiDocument</returns>
        System.Threading.Tasks.Task<EdiDocument> GetEdiDocumentByIdAsync (int? ediDocumentId);

        /// <summary>
        /// Get an ediDocument by id
        /// </summary>
        /// <remarks>
        /// Returns the ediDocument identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ediDocumentId">Id of the ediDocument to be returned.</param>
        /// <returns>Task of ApiResponse (EdiDocument)</returns>
        System.Threading.Tasks.Task<ApiResponse<EdiDocument>> GetEdiDocumentByIdAsyncWithHttpInfo (int? ediDocumentId);
        /// <summary>
        /// Get the files for an ediDocument.
        /// </summary>
        /// <remarks>
        /// Get all existing ediDocument files.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ediDocumentId">Id of the ediDocument to get files for</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetEdiDocumentFilesAsync (int? ediDocumentId);

        /// <summary>
        /// Get the files for an ediDocument.
        /// </summary>
        /// <remarks>
        /// Get all existing ediDocument files.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ediDocumentId">Id of the ediDocument to get files for</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetEdiDocumentFilesAsyncWithHttpInfo (int? ediDocumentId);
        /// <summary>
        /// Get the tags for an ediDocument.
        /// </summary>
        /// <remarks>
        /// Get all existing ediDocument tags.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ediDocumentId">Id of the ediDocument to get tags for</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetEdiDocumentTagsAsync (int? ediDocumentId);

        /// <summary>
        /// Get the tags for an ediDocument.
        /// </summary>
        /// <remarks>
        /// Get all existing ediDocument tags.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ediDocumentId">Id of the ediDocument to get tags for</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetEdiDocumentTagsAsyncWithHttpInfo (int? ediDocumentId);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class EdiDocumentApi : IEdiDocumentApi
    {
        private Infoplus.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="EdiDocumentApi"/> class.
        /// </summary>
        /// <returns></returns>
        public EdiDocumentApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = Infoplus.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EdiDocumentApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public EdiDocumentApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Infoplus.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Infoplus.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create an ediDocument Inserts a new ediDocument using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">EdiDocument to be inserted.</param>
        /// <returns>EdiDocument</returns>
        public EdiDocument AddEdiDocument (EdiDocument body)
        {
             ApiResponse<EdiDocument> localVarResponse = AddEdiDocumentWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create an ediDocument Inserts a new ediDocument using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">EdiDocument to be inserted.</param>
        /// <returns>ApiResponse of EdiDocument</returns>
        public ApiResponse< EdiDocument > AddEdiDocumentWithHttpInfo (EdiDocument body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling EdiDocumentApi->AddEdiDocument");

            var localVarPath = "/beta/ediDocument";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddEdiDocument", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EdiDocument>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EdiDocument) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EdiDocument)));
        }

        /// <summary>
        /// Create an ediDocument Inserts a new ediDocument using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">EdiDocument to be inserted.</param>
        /// <returns>Task of EdiDocument</returns>
        public async System.Threading.Tasks.Task<EdiDocument> AddEdiDocumentAsync (EdiDocument body)
        {
             ApiResponse<EdiDocument> localVarResponse = await AddEdiDocumentAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create an ediDocument Inserts a new ediDocument using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">EdiDocument to be inserted.</param>
        /// <returns>Task of ApiResponse (EdiDocument)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EdiDocument>> AddEdiDocumentAsyncWithHttpInfo (EdiDocument body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling EdiDocumentApi->AddEdiDocument");

            var localVarPath = "/beta/ediDocument";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddEdiDocument", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EdiDocument>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EdiDocument) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EdiDocument)));
        }

        /// <summary>
        /// Add new audit for an ediDocument Adds an audit to an existing ediDocument.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ediDocumentId">Id of the ediDocument to add an audit to</param>
        /// <param name="ediDocumentAudit">The audit to add</param>
        /// <returns></returns>
        public void AddEdiDocumentAudit (int? ediDocumentId, string ediDocumentAudit)
        {
             AddEdiDocumentAuditWithHttpInfo(ediDocumentId, ediDocumentAudit);
        }

        /// <summary>
        /// Add new audit for an ediDocument Adds an audit to an existing ediDocument.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ediDocumentId">Id of the ediDocument to add an audit to</param>
        /// <param name="ediDocumentAudit">The audit to add</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AddEdiDocumentAuditWithHttpInfo (int? ediDocumentId, string ediDocumentAudit)
        {
            // verify the required parameter 'ediDocumentId' is set
            if (ediDocumentId == null)
                throw new ApiException(400, "Missing required parameter 'ediDocumentId' when calling EdiDocumentApi->AddEdiDocumentAudit");
            // verify the required parameter 'ediDocumentAudit' is set
            if (ediDocumentAudit == null)
                throw new ApiException(400, "Missing required parameter 'ediDocumentAudit' when calling EdiDocumentApi->AddEdiDocumentAudit");

            var localVarPath = "/beta/ediDocument/{ediDocumentId}/audit/{ediDocumentAudit}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ediDocumentId != null) localVarPathParams.Add("ediDocumentId", Configuration.ApiClient.ParameterToString(ediDocumentId)); // path parameter
            if (ediDocumentAudit != null) localVarPathParams.Add("ediDocumentAudit", Configuration.ApiClient.ParameterToString(ediDocumentAudit)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddEdiDocumentAudit", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Add new audit for an ediDocument Adds an audit to an existing ediDocument.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ediDocumentId">Id of the ediDocument to add an audit to</param>
        /// <param name="ediDocumentAudit">The audit to add</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddEdiDocumentAuditAsync (int? ediDocumentId, string ediDocumentAudit)
        {
             await AddEdiDocumentAuditAsyncWithHttpInfo(ediDocumentId, ediDocumentAudit);

        }

        /// <summary>
        /// Add new audit for an ediDocument Adds an audit to an existing ediDocument.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ediDocumentId">Id of the ediDocument to add an audit to</param>
        /// <param name="ediDocumentAudit">The audit to add</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddEdiDocumentAuditAsyncWithHttpInfo (int? ediDocumentId, string ediDocumentAudit)
        {
            // verify the required parameter 'ediDocumentId' is set
            if (ediDocumentId == null)
                throw new ApiException(400, "Missing required parameter 'ediDocumentId' when calling EdiDocumentApi->AddEdiDocumentAudit");
            // verify the required parameter 'ediDocumentAudit' is set
            if (ediDocumentAudit == null)
                throw new ApiException(400, "Missing required parameter 'ediDocumentAudit' when calling EdiDocumentApi->AddEdiDocumentAudit");

            var localVarPath = "/beta/ediDocument/{ediDocumentId}/audit/{ediDocumentAudit}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ediDocumentId != null) localVarPathParams.Add("ediDocumentId", Configuration.ApiClient.ParameterToString(ediDocumentId)); // path parameter
            if (ediDocumentAudit != null) localVarPathParams.Add("ediDocumentAudit", Configuration.ApiClient.ParameterToString(ediDocumentAudit)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddEdiDocumentAudit", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Attach a file to an ediDocument Adds a file to an existing ediDocument.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ediDocumentId">Id of the ediDocument to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns></returns>
        public void AddEdiDocumentFile (int? ediDocumentId, string fileName)
        {
             AddEdiDocumentFileWithHttpInfo(ediDocumentId, fileName);
        }

        /// <summary>
        /// Attach a file to an ediDocument Adds a file to an existing ediDocument.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ediDocumentId">Id of the ediDocument to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AddEdiDocumentFileWithHttpInfo (int? ediDocumentId, string fileName)
        {
            // verify the required parameter 'ediDocumentId' is set
            if (ediDocumentId == null)
                throw new ApiException(400, "Missing required parameter 'ediDocumentId' when calling EdiDocumentApi->AddEdiDocumentFile");
            // verify the required parameter 'fileName' is set
            if (fileName == null)
                throw new ApiException(400, "Missing required parameter 'fileName' when calling EdiDocumentApi->AddEdiDocumentFile");

            var localVarPath = "/beta/ediDocument/{ediDocumentId}/file/{fileName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ediDocumentId != null) localVarPathParams.Add("ediDocumentId", Configuration.ApiClient.ParameterToString(ediDocumentId)); // path parameter
            if (fileName != null) localVarPathParams.Add("fileName", Configuration.ApiClient.ParameterToString(fileName)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddEdiDocumentFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Attach a file to an ediDocument Adds a file to an existing ediDocument.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ediDocumentId">Id of the ediDocument to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddEdiDocumentFileAsync (int? ediDocumentId, string fileName)
        {
             await AddEdiDocumentFileAsyncWithHttpInfo(ediDocumentId, fileName);

        }

        /// <summary>
        /// Attach a file to an ediDocument Adds a file to an existing ediDocument.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ediDocumentId">Id of the ediDocument to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddEdiDocumentFileAsyncWithHttpInfo (int? ediDocumentId, string fileName)
        {
            // verify the required parameter 'ediDocumentId' is set
            if (ediDocumentId == null)
                throw new ApiException(400, "Missing required parameter 'ediDocumentId' when calling EdiDocumentApi->AddEdiDocumentFile");
            // verify the required parameter 'fileName' is set
            if (fileName == null)
                throw new ApiException(400, "Missing required parameter 'fileName' when calling EdiDocumentApi->AddEdiDocumentFile");

            var localVarPath = "/beta/ediDocument/{ediDocumentId}/file/{fileName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ediDocumentId != null) localVarPathParams.Add("ediDocumentId", Configuration.ApiClient.ParameterToString(ediDocumentId)); // path parameter
            if (fileName != null) localVarPathParams.Add("fileName", Configuration.ApiClient.ParameterToString(fileName)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddEdiDocumentFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Attach a file to an ediDocument by URL. Adds a file to an existing ediDocument by URL.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="ediDocumentId">Id of the ediDocument to add an file to</param>
        /// <returns></returns>
        public void AddEdiDocumentFileByURL (RecordFile body, int? ediDocumentId)
        {
             AddEdiDocumentFileByURLWithHttpInfo(body, ediDocumentId);
        }

        /// <summary>
        /// Attach a file to an ediDocument by URL. Adds a file to an existing ediDocument by URL.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="ediDocumentId">Id of the ediDocument to add an file to</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AddEdiDocumentFileByURLWithHttpInfo (RecordFile body, int? ediDocumentId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling EdiDocumentApi->AddEdiDocumentFileByURL");
            // verify the required parameter 'ediDocumentId' is set
            if (ediDocumentId == null)
                throw new ApiException(400, "Missing required parameter 'ediDocumentId' when calling EdiDocumentApi->AddEdiDocumentFileByURL");

            var localVarPath = "/beta/ediDocument/{ediDocumentId}/file";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ediDocumentId != null) localVarPathParams.Add("ediDocumentId", Configuration.ApiClient.ParameterToString(ediDocumentId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddEdiDocumentFileByURL", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Attach a file to an ediDocument by URL. Adds a file to an existing ediDocument by URL.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="ediDocumentId">Id of the ediDocument to add an file to</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddEdiDocumentFileByURLAsync (RecordFile body, int? ediDocumentId)
        {
             await AddEdiDocumentFileByURLAsyncWithHttpInfo(body, ediDocumentId);

        }

        /// <summary>
        /// Attach a file to an ediDocument by URL. Adds a file to an existing ediDocument by URL.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="ediDocumentId">Id of the ediDocument to add an file to</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddEdiDocumentFileByURLAsyncWithHttpInfo (RecordFile body, int? ediDocumentId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling EdiDocumentApi->AddEdiDocumentFileByURL");
            // verify the required parameter 'ediDocumentId' is set
            if (ediDocumentId == null)
                throw new ApiException(400, "Missing required parameter 'ediDocumentId' when calling EdiDocumentApi->AddEdiDocumentFileByURL");

            var localVarPath = "/beta/ediDocument/{ediDocumentId}/file";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ediDocumentId != null) localVarPathParams.Add("ediDocumentId", Configuration.ApiClient.ParameterToString(ediDocumentId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddEdiDocumentFileByURL", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Add new tags for an ediDocument. Adds a tag to an existing ediDocument.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ediDocumentId">Id of the ediDocument to add a tag to</param>
        /// <param name="ediDocumentTag">The tag to add</param>
        /// <returns></returns>
        public void AddEdiDocumentTag (int? ediDocumentId, string ediDocumentTag)
        {
             AddEdiDocumentTagWithHttpInfo(ediDocumentId, ediDocumentTag);
        }

        /// <summary>
        /// Add new tags for an ediDocument. Adds a tag to an existing ediDocument.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ediDocumentId">Id of the ediDocument to add a tag to</param>
        /// <param name="ediDocumentTag">The tag to add</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AddEdiDocumentTagWithHttpInfo (int? ediDocumentId, string ediDocumentTag)
        {
            // verify the required parameter 'ediDocumentId' is set
            if (ediDocumentId == null)
                throw new ApiException(400, "Missing required parameter 'ediDocumentId' when calling EdiDocumentApi->AddEdiDocumentTag");
            // verify the required parameter 'ediDocumentTag' is set
            if (ediDocumentTag == null)
                throw new ApiException(400, "Missing required parameter 'ediDocumentTag' when calling EdiDocumentApi->AddEdiDocumentTag");

            var localVarPath = "/beta/ediDocument/{ediDocumentId}/tag/{ediDocumentTag}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ediDocumentId != null) localVarPathParams.Add("ediDocumentId", Configuration.ApiClient.ParameterToString(ediDocumentId)); // path parameter
            if (ediDocumentTag != null) localVarPathParams.Add("ediDocumentTag", Configuration.ApiClient.ParameterToString(ediDocumentTag)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddEdiDocumentTag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Add new tags for an ediDocument. Adds a tag to an existing ediDocument.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ediDocumentId">Id of the ediDocument to add a tag to</param>
        /// <param name="ediDocumentTag">The tag to add</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddEdiDocumentTagAsync (int? ediDocumentId, string ediDocumentTag)
        {
             await AddEdiDocumentTagAsyncWithHttpInfo(ediDocumentId, ediDocumentTag);

        }

        /// <summary>
        /// Add new tags for an ediDocument. Adds a tag to an existing ediDocument.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ediDocumentId">Id of the ediDocument to add a tag to</param>
        /// <param name="ediDocumentTag">The tag to add</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddEdiDocumentTagAsyncWithHttpInfo (int? ediDocumentId, string ediDocumentTag)
        {
            // verify the required parameter 'ediDocumentId' is set
            if (ediDocumentId == null)
                throw new ApiException(400, "Missing required parameter 'ediDocumentId' when calling EdiDocumentApi->AddEdiDocumentTag");
            // verify the required parameter 'ediDocumentTag' is set
            if (ediDocumentTag == null)
                throw new ApiException(400, "Missing required parameter 'ediDocumentTag' when calling EdiDocumentApi->AddEdiDocumentTag");

            var localVarPath = "/beta/ediDocument/{ediDocumentId}/tag/{ediDocumentTag}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ediDocumentId != null) localVarPathParams.Add("ediDocumentId", Configuration.ApiClient.ParameterToString(ediDocumentId)); // path parameter
            if (ediDocumentTag != null) localVarPathParams.Add("ediDocumentTag", Configuration.ApiClient.ParameterToString(ediDocumentTag)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddEdiDocumentTag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a file for an ediDocument. Deletes an existing ediDocument file using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ediDocumentId">Id of the ediDocument to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns></returns>
        public void DeleteEdiDocumentFile (int? ediDocumentId, int? fileId)
        {
             DeleteEdiDocumentFileWithHttpInfo(ediDocumentId, fileId);
        }

        /// <summary>
        /// Delete a file for an ediDocument. Deletes an existing ediDocument file using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ediDocumentId">Id of the ediDocument to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteEdiDocumentFileWithHttpInfo (int? ediDocumentId, int? fileId)
        {
            // verify the required parameter 'ediDocumentId' is set
            if (ediDocumentId == null)
                throw new ApiException(400, "Missing required parameter 'ediDocumentId' when calling EdiDocumentApi->DeleteEdiDocumentFile");
            // verify the required parameter 'fileId' is set
            if (fileId == null)
                throw new ApiException(400, "Missing required parameter 'fileId' when calling EdiDocumentApi->DeleteEdiDocumentFile");

            var localVarPath = "/beta/ediDocument/{ediDocumentId}/file/{fileId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ediDocumentId != null) localVarPathParams.Add("ediDocumentId", Configuration.ApiClient.ParameterToString(ediDocumentId)); // path parameter
            if (fileId != null) localVarPathParams.Add("fileId", Configuration.ApiClient.ParameterToString(fileId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteEdiDocumentFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a file for an ediDocument. Deletes an existing ediDocument file using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ediDocumentId">Id of the ediDocument to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteEdiDocumentFileAsync (int? ediDocumentId, int? fileId)
        {
             await DeleteEdiDocumentFileAsyncWithHttpInfo(ediDocumentId, fileId);

        }

        /// <summary>
        /// Delete a file for an ediDocument. Deletes an existing ediDocument file using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ediDocumentId">Id of the ediDocument to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteEdiDocumentFileAsyncWithHttpInfo (int? ediDocumentId, int? fileId)
        {
            // verify the required parameter 'ediDocumentId' is set
            if (ediDocumentId == null)
                throw new ApiException(400, "Missing required parameter 'ediDocumentId' when calling EdiDocumentApi->DeleteEdiDocumentFile");
            // verify the required parameter 'fileId' is set
            if (fileId == null)
                throw new ApiException(400, "Missing required parameter 'fileId' when calling EdiDocumentApi->DeleteEdiDocumentFile");

            var localVarPath = "/beta/ediDocument/{ediDocumentId}/file/{fileId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ediDocumentId != null) localVarPathParams.Add("ediDocumentId", Configuration.ApiClient.ParameterToString(ediDocumentId)); // path parameter
            if (fileId != null) localVarPathParams.Add("fileId", Configuration.ApiClient.ParameterToString(fileId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteEdiDocumentFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a tag for an ediDocument. Deletes an existing ediDocument tag using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ediDocumentId">Id of the ediDocument to remove tag from</param>
        /// <param name="ediDocumentTag">The tag to delete</param>
        /// <returns></returns>
        public void DeleteEdiDocumentTag (int? ediDocumentId, string ediDocumentTag)
        {
             DeleteEdiDocumentTagWithHttpInfo(ediDocumentId, ediDocumentTag);
        }

        /// <summary>
        /// Delete a tag for an ediDocument. Deletes an existing ediDocument tag using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ediDocumentId">Id of the ediDocument to remove tag from</param>
        /// <param name="ediDocumentTag">The tag to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteEdiDocumentTagWithHttpInfo (int? ediDocumentId, string ediDocumentTag)
        {
            // verify the required parameter 'ediDocumentId' is set
            if (ediDocumentId == null)
                throw new ApiException(400, "Missing required parameter 'ediDocumentId' when calling EdiDocumentApi->DeleteEdiDocumentTag");
            // verify the required parameter 'ediDocumentTag' is set
            if (ediDocumentTag == null)
                throw new ApiException(400, "Missing required parameter 'ediDocumentTag' when calling EdiDocumentApi->DeleteEdiDocumentTag");

            var localVarPath = "/beta/ediDocument/{ediDocumentId}/tag/{ediDocumentTag}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ediDocumentId != null) localVarPathParams.Add("ediDocumentId", Configuration.ApiClient.ParameterToString(ediDocumentId)); // path parameter
            if (ediDocumentTag != null) localVarPathParams.Add("ediDocumentTag", Configuration.ApiClient.ParameterToString(ediDocumentTag)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteEdiDocumentTag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a tag for an ediDocument. Deletes an existing ediDocument tag using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ediDocumentId">Id of the ediDocument to remove tag from</param>
        /// <param name="ediDocumentTag">The tag to delete</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteEdiDocumentTagAsync (int? ediDocumentId, string ediDocumentTag)
        {
             await DeleteEdiDocumentTagAsyncWithHttpInfo(ediDocumentId, ediDocumentTag);

        }

        /// <summary>
        /// Delete a tag for an ediDocument. Deletes an existing ediDocument tag using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ediDocumentId">Id of the ediDocument to remove tag from</param>
        /// <param name="ediDocumentTag">The tag to delete</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteEdiDocumentTagAsyncWithHttpInfo (int? ediDocumentId, string ediDocumentTag)
        {
            // verify the required parameter 'ediDocumentId' is set
            if (ediDocumentId == null)
                throw new ApiException(400, "Missing required parameter 'ediDocumentId' when calling EdiDocumentApi->DeleteEdiDocumentTag");
            // verify the required parameter 'ediDocumentTag' is set
            if (ediDocumentTag == null)
                throw new ApiException(400, "Missing required parameter 'ediDocumentTag' when calling EdiDocumentApi->DeleteEdiDocumentTag");

            var localVarPath = "/beta/ediDocument/{ediDocumentId}/tag/{ediDocumentTag}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ediDocumentId != null) localVarPathParams.Add("ediDocumentId", Configuration.ApiClient.ParameterToString(ediDocumentId)); // path parameter
            if (ediDocumentTag != null) localVarPathParams.Add("ediDocumentTag", Configuration.ApiClient.ParameterToString(ediDocumentTag)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteEdiDocumentTag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get a duplicated an ediDocument by id Returns a duplicated ediDocument identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ediDocumentId">Id of the ediDocument to be duplicated.</param>
        /// <returns>EdiDocument</returns>
        public EdiDocument GetDuplicateEdiDocumentById (int? ediDocumentId)
        {
             ApiResponse<EdiDocument> localVarResponse = GetDuplicateEdiDocumentByIdWithHttpInfo(ediDocumentId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a duplicated an ediDocument by id Returns a duplicated ediDocument identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ediDocumentId">Id of the ediDocument to be duplicated.</param>
        /// <returns>ApiResponse of EdiDocument</returns>
        public ApiResponse< EdiDocument > GetDuplicateEdiDocumentByIdWithHttpInfo (int? ediDocumentId)
        {
            // verify the required parameter 'ediDocumentId' is set
            if (ediDocumentId == null)
                throw new ApiException(400, "Missing required parameter 'ediDocumentId' when calling EdiDocumentApi->GetDuplicateEdiDocumentById");

            var localVarPath = "/beta/ediDocument/duplicate/{ediDocumentId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ediDocumentId != null) localVarPathParams.Add("ediDocumentId", Configuration.ApiClient.ParameterToString(ediDocumentId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDuplicateEdiDocumentById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EdiDocument>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EdiDocument) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EdiDocument)));
        }

        /// <summary>
        /// Get a duplicated an ediDocument by id Returns a duplicated ediDocument identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ediDocumentId">Id of the ediDocument to be duplicated.</param>
        /// <returns>Task of EdiDocument</returns>
        public async System.Threading.Tasks.Task<EdiDocument> GetDuplicateEdiDocumentByIdAsync (int? ediDocumentId)
        {
             ApiResponse<EdiDocument> localVarResponse = await GetDuplicateEdiDocumentByIdAsyncWithHttpInfo(ediDocumentId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a duplicated an ediDocument by id Returns a duplicated ediDocument identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ediDocumentId">Id of the ediDocument to be duplicated.</param>
        /// <returns>Task of ApiResponse (EdiDocument)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EdiDocument>> GetDuplicateEdiDocumentByIdAsyncWithHttpInfo (int? ediDocumentId)
        {
            // verify the required parameter 'ediDocumentId' is set
            if (ediDocumentId == null)
                throw new ApiException(400, "Missing required parameter 'ediDocumentId' when calling EdiDocumentApi->GetDuplicateEdiDocumentById");

            var localVarPath = "/beta/ediDocument/duplicate/{ediDocumentId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ediDocumentId != null) localVarPathParams.Add("ediDocumentId", Configuration.ApiClient.ParameterToString(ediDocumentId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDuplicateEdiDocumentById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EdiDocument>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EdiDocument) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EdiDocument)));
        }

        /// <summary>
        /// Search ediDocuments by filter Returns the list of ediDocuments that match the given filter.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>List&lt;EdiDocument&gt;</returns>
        public List<EdiDocument> GetEdiDocumentByFilter (string filter = null, int? page = null, int? limit = null, string sort = null)
        {
             ApiResponse<List<EdiDocument>> localVarResponse = GetEdiDocumentByFilterWithHttpInfo(filter, page, limit, sort);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Search ediDocuments by filter Returns the list of ediDocuments that match the given filter.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>ApiResponse of List&lt;EdiDocument&gt;</returns>
        public ApiResponse< List<EdiDocument> > GetEdiDocumentByFilterWithHttpInfo (string filter = null, int? page = null, int? limit = null, string sort = null)
        {

            var localVarPath = "/beta/ediDocument/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (filter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (page != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEdiDocumentByFilter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<EdiDocument>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<EdiDocument>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<EdiDocument>)));
        }

        /// <summary>
        /// Search ediDocuments by filter Returns the list of ediDocuments that match the given filter.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>Task of List&lt;EdiDocument&gt;</returns>
        public async System.Threading.Tasks.Task<List<EdiDocument>> GetEdiDocumentByFilterAsync (string filter = null, int? page = null, int? limit = null, string sort = null)
        {
             ApiResponse<List<EdiDocument>> localVarResponse = await GetEdiDocumentByFilterAsyncWithHttpInfo(filter, page, limit, sort);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Search ediDocuments by filter Returns the list of ediDocuments that match the given filter.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;EdiDocument&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<EdiDocument>>> GetEdiDocumentByFilterAsyncWithHttpInfo (string filter = null, int? page = null, int? limit = null, string sort = null)
        {

            var localVarPath = "/beta/ediDocument/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (filter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (page != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEdiDocumentByFilter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<EdiDocument>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<EdiDocument>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<EdiDocument>)));
        }

        /// <summary>
        /// Get an ediDocument by id Returns the ediDocument identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ediDocumentId">Id of the ediDocument to be returned.</param>
        /// <returns>EdiDocument</returns>
        public EdiDocument GetEdiDocumentById (int? ediDocumentId)
        {
             ApiResponse<EdiDocument> localVarResponse = GetEdiDocumentByIdWithHttpInfo(ediDocumentId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get an ediDocument by id Returns the ediDocument identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ediDocumentId">Id of the ediDocument to be returned.</param>
        /// <returns>ApiResponse of EdiDocument</returns>
        public ApiResponse< EdiDocument > GetEdiDocumentByIdWithHttpInfo (int? ediDocumentId)
        {
            // verify the required parameter 'ediDocumentId' is set
            if (ediDocumentId == null)
                throw new ApiException(400, "Missing required parameter 'ediDocumentId' when calling EdiDocumentApi->GetEdiDocumentById");

            var localVarPath = "/beta/ediDocument/{ediDocumentId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ediDocumentId != null) localVarPathParams.Add("ediDocumentId", Configuration.ApiClient.ParameterToString(ediDocumentId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEdiDocumentById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EdiDocument>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EdiDocument) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EdiDocument)));
        }

        /// <summary>
        /// Get an ediDocument by id Returns the ediDocument identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ediDocumentId">Id of the ediDocument to be returned.</param>
        /// <returns>Task of EdiDocument</returns>
        public async System.Threading.Tasks.Task<EdiDocument> GetEdiDocumentByIdAsync (int? ediDocumentId)
        {
             ApiResponse<EdiDocument> localVarResponse = await GetEdiDocumentByIdAsyncWithHttpInfo(ediDocumentId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get an ediDocument by id Returns the ediDocument identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ediDocumentId">Id of the ediDocument to be returned.</param>
        /// <returns>Task of ApiResponse (EdiDocument)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EdiDocument>> GetEdiDocumentByIdAsyncWithHttpInfo (int? ediDocumentId)
        {
            // verify the required parameter 'ediDocumentId' is set
            if (ediDocumentId == null)
                throw new ApiException(400, "Missing required parameter 'ediDocumentId' when calling EdiDocumentApi->GetEdiDocumentById");

            var localVarPath = "/beta/ediDocument/{ediDocumentId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ediDocumentId != null) localVarPathParams.Add("ediDocumentId", Configuration.ApiClient.ParameterToString(ediDocumentId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEdiDocumentById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EdiDocument>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EdiDocument) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EdiDocument)));
        }

        /// <summary>
        /// Get the files for an ediDocument. Get all existing ediDocument files.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ediDocumentId">Id of the ediDocument to get files for</param>
        /// <returns></returns>
        public void GetEdiDocumentFiles (int? ediDocumentId)
        {
             GetEdiDocumentFilesWithHttpInfo(ediDocumentId);
        }

        /// <summary>
        /// Get the files for an ediDocument. Get all existing ediDocument files.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ediDocumentId">Id of the ediDocument to get files for</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GetEdiDocumentFilesWithHttpInfo (int? ediDocumentId)
        {
            // verify the required parameter 'ediDocumentId' is set
            if (ediDocumentId == null)
                throw new ApiException(400, "Missing required parameter 'ediDocumentId' when calling EdiDocumentApi->GetEdiDocumentFiles");

            var localVarPath = "/beta/ediDocument/{ediDocumentId}/file";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ediDocumentId != null) localVarPathParams.Add("ediDocumentId", Configuration.ApiClient.ParameterToString(ediDocumentId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEdiDocumentFiles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get the files for an ediDocument. Get all existing ediDocument files.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ediDocumentId">Id of the ediDocument to get files for</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetEdiDocumentFilesAsync (int? ediDocumentId)
        {
             await GetEdiDocumentFilesAsyncWithHttpInfo(ediDocumentId);

        }

        /// <summary>
        /// Get the files for an ediDocument. Get all existing ediDocument files.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ediDocumentId">Id of the ediDocument to get files for</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetEdiDocumentFilesAsyncWithHttpInfo (int? ediDocumentId)
        {
            // verify the required parameter 'ediDocumentId' is set
            if (ediDocumentId == null)
                throw new ApiException(400, "Missing required parameter 'ediDocumentId' when calling EdiDocumentApi->GetEdiDocumentFiles");

            var localVarPath = "/beta/ediDocument/{ediDocumentId}/file";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ediDocumentId != null) localVarPathParams.Add("ediDocumentId", Configuration.ApiClient.ParameterToString(ediDocumentId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEdiDocumentFiles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get the tags for an ediDocument. Get all existing ediDocument tags.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ediDocumentId">Id of the ediDocument to get tags for</param>
        /// <returns></returns>
        public void GetEdiDocumentTags (int? ediDocumentId)
        {
             GetEdiDocumentTagsWithHttpInfo(ediDocumentId);
        }

        /// <summary>
        /// Get the tags for an ediDocument. Get all existing ediDocument tags.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ediDocumentId">Id of the ediDocument to get tags for</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GetEdiDocumentTagsWithHttpInfo (int? ediDocumentId)
        {
            // verify the required parameter 'ediDocumentId' is set
            if (ediDocumentId == null)
                throw new ApiException(400, "Missing required parameter 'ediDocumentId' when calling EdiDocumentApi->GetEdiDocumentTags");

            var localVarPath = "/beta/ediDocument/{ediDocumentId}/tag";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ediDocumentId != null) localVarPathParams.Add("ediDocumentId", Configuration.ApiClient.ParameterToString(ediDocumentId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEdiDocumentTags", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get the tags for an ediDocument. Get all existing ediDocument tags.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ediDocumentId">Id of the ediDocument to get tags for</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetEdiDocumentTagsAsync (int? ediDocumentId)
        {
             await GetEdiDocumentTagsAsyncWithHttpInfo(ediDocumentId);

        }

        /// <summary>
        /// Get the tags for an ediDocument. Get all existing ediDocument tags.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ediDocumentId">Id of the ediDocument to get tags for</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetEdiDocumentTagsAsyncWithHttpInfo (int? ediDocumentId)
        {
            // verify the required parameter 'ediDocumentId' is set
            if (ediDocumentId == null)
                throw new ApiException(400, "Missing required parameter 'ediDocumentId' when calling EdiDocumentApi->GetEdiDocumentTags");

            var localVarPath = "/beta/ediDocument/{ediDocumentId}/tag";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ediDocumentId != null) localVarPathParams.Add("ediDocumentId", Configuration.ApiClient.ParameterToString(ediDocumentId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEdiDocumentTags", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

    }
}
