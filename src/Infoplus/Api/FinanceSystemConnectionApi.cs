/* 
 * Infoplus API
 *
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Infoplus.Client;
using Infoplus.Model;

namespace Infoplus.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFinanceSystemConnectionApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create a financeSystemConnection
        /// </summary>
        /// <remarks>
        /// Inserts a new financeSystemConnection using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">FinanceSystemConnection to be inserted.</param>
        /// <returns>FinanceSystemConnection</returns>
        FinanceSystemConnection AddFinanceSystemConnection (FinanceSystemConnection body);

        /// <summary>
        /// Create a financeSystemConnection
        /// </summary>
        /// <remarks>
        /// Inserts a new financeSystemConnection using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">FinanceSystemConnection to be inserted.</param>
        /// <returns>ApiResponse of FinanceSystemConnection</returns>
        ApiResponse<FinanceSystemConnection> AddFinanceSystemConnectionWithHttpInfo (FinanceSystemConnection body);
        /// <summary>
        /// Add new audit for a financeSystemConnection
        /// </summary>
        /// <remarks>
        /// Adds an audit to an existing financeSystemConnection.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="financeSystemConnectionId">Id of the financeSystemConnection to add an audit to</param>
        /// <param name="financeSystemConnectionAudit">The audit to add</param>
        /// <returns></returns>
        void AddFinanceSystemConnectionAudit (int? financeSystemConnectionId, string financeSystemConnectionAudit);

        /// <summary>
        /// Add new audit for a financeSystemConnection
        /// </summary>
        /// <remarks>
        /// Adds an audit to an existing financeSystemConnection.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="financeSystemConnectionId">Id of the financeSystemConnection to add an audit to</param>
        /// <param name="financeSystemConnectionAudit">The audit to add</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddFinanceSystemConnectionAuditWithHttpInfo (int? financeSystemConnectionId, string financeSystemConnectionAudit);
        /// <summary>
        /// Attach a file to a financeSystemConnection
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing financeSystemConnection.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="financeSystemConnectionId">Id of the financeSystemConnection to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns></returns>
        void AddFinanceSystemConnectionFile (int? financeSystemConnectionId, string fileName);

        /// <summary>
        /// Attach a file to a financeSystemConnection
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing financeSystemConnection.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="financeSystemConnectionId">Id of the financeSystemConnection to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddFinanceSystemConnectionFileWithHttpInfo (int? financeSystemConnectionId, string fileName);
        /// <summary>
        /// Attach a file to a financeSystemConnection by URL.
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing financeSystemConnection by URL.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="financeSystemConnectionId">Id of the financeSystemConnection to add an file to</param>
        /// <returns></returns>
        void AddFinanceSystemConnectionFileByURL (RecordFile body, int? financeSystemConnectionId);

        /// <summary>
        /// Attach a file to a financeSystemConnection by URL.
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing financeSystemConnection by URL.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="financeSystemConnectionId">Id of the financeSystemConnection to add an file to</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddFinanceSystemConnectionFileByURLWithHttpInfo (RecordFile body, int? financeSystemConnectionId);
        /// <summary>
        /// Add new tags for a financeSystemConnection.
        /// </summary>
        /// <remarks>
        /// Adds a tag to an existing financeSystemConnection.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="financeSystemConnectionId">Id of the financeSystemConnection to add a tag to</param>
        /// <param name="financeSystemConnectionTag">The tag to add</param>
        /// <returns></returns>
        void AddFinanceSystemConnectionTag (int? financeSystemConnectionId, string financeSystemConnectionTag);

        /// <summary>
        /// Add new tags for a financeSystemConnection.
        /// </summary>
        /// <remarks>
        /// Adds a tag to an existing financeSystemConnection.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="financeSystemConnectionId">Id of the financeSystemConnection to add a tag to</param>
        /// <param name="financeSystemConnectionTag">The tag to add</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddFinanceSystemConnectionTagWithHttpInfo (int? financeSystemConnectionId, string financeSystemConnectionTag);
        /// <summary>
        /// Delete a financeSystemConnection
        /// </summary>
        /// <remarks>
        /// Deletes the financeSystemConnection identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="financeSystemConnectionId">Id of the financeSystemConnection to be deleted.</param>
        /// <returns></returns>
        void DeleteFinanceSystemConnection (int? financeSystemConnectionId);

        /// <summary>
        /// Delete a financeSystemConnection
        /// </summary>
        /// <remarks>
        /// Deletes the financeSystemConnection identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="financeSystemConnectionId">Id of the financeSystemConnection to be deleted.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteFinanceSystemConnectionWithHttpInfo (int? financeSystemConnectionId);
        /// <summary>
        /// Delete a file for a financeSystemConnection.
        /// </summary>
        /// <remarks>
        /// Deletes an existing financeSystemConnection file using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="financeSystemConnectionId">Id of the financeSystemConnection to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns></returns>
        void DeleteFinanceSystemConnectionFile (int? financeSystemConnectionId, int? fileId);

        /// <summary>
        /// Delete a file for a financeSystemConnection.
        /// </summary>
        /// <remarks>
        /// Deletes an existing financeSystemConnection file using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="financeSystemConnectionId">Id of the financeSystemConnection to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteFinanceSystemConnectionFileWithHttpInfo (int? financeSystemConnectionId, int? fileId);
        /// <summary>
        /// Delete a tag for a financeSystemConnection.
        /// </summary>
        /// <remarks>
        /// Deletes an existing financeSystemConnection tag using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="financeSystemConnectionId">Id of the financeSystemConnection to remove tag from</param>
        /// <param name="financeSystemConnectionTag">The tag to delete</param>
        /// <returns></returns>
        void DeleteFinanceSystemConnectionTag (int? financeSystemConnectionId, string financeSystemConnectionTag);

        /// <summary>
        /// Delete a tag for a financeSystemConnection.
        /// </summary>
        /// <remarks>
        /// Deletes an existing financeSystemConnection tag using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="financeSystemConnectionId">Id of the financeSystemConnection to remove tag from</param>
        /// <param name="financeSystemConnectionTag">The tag to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteFinanceSystemConnectionTagWithHttpInfo (int? financeSystemConnectionId, string financeSystemConnectionTag);
        /// <summary>
        /// Get a duplicated a financeSystemConnection by id
        /// </summary>
        /// <remarks>
        /// Returns a duplicated financeSystemConnection identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="financeSystemConnectionId">Id of the financeSystemConnection to be duplicated.</param>
        /// <returns>FinanceSystemConnection</returns>
        FinanceSystemConnection GetDuplicateFinanceSystemConnectionById (int? financeSystemConnectionId);

        /// <summary>
        /// Get a duplicated a financeSystemConnection by id
        /// </summary>
        /// <remarks>
        /// Returns a duplicated financeSystemConnection identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="financeSystemConnectionId">Id of the financeSystemConnection to be duplicated.</param>
        /// <returns>ApiResponse of FinanceSystemConnection</returns>
        ApiResponse<FinanceSystemConnection> GetDuplicateFinanceSystemConnectionByIdWithHttpInfo (int? financeSystemConnectionId);
        /// <summary>
        /// Search financeSystemConnections by filter
        /// </summary>
        /// <remarks>
        /// Returns the list of financeSystemConnections that match the given filter.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>List&lt;FinanceSystemConnection&gt;</returns>
        List<FinanceSystemConnection> GetFinanceSystemConnectionByFilter (string filter = null, int? page = null, int? limit = null, string sort = null);

        /// <summary>
        /// Search financeSystemConnections by filter
        /// </summary>
        /// <remarks>
        /// Returns the list of financeSystemConnections that match the given filter.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>ApiResponse of List&lt;FinanceSystemConnection&gt;</returns>
        ApiResponse<List<FinanceSystemConnection>> GetFinanceSystemConnectionByFilterWithHttpInfo (string filter = null, int? page = null, int? limit = null, string sort = null);
        /// <summary>
        /// Get a financeSystemConnection by id
        /// </summary>
        /// <remarks>
        /// Returns the financeSystemConnection identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="financeSystemConnectionId">Id of the financeSystemConnection to be returned.</param>
        /// <returns>FinanceSystemConnection</returns>
        FinanceSystemConnection GetFinanceSystemConnectionById (int? financeSystemConnectionId);

        /// <summary>
        /// Get a financeSystemConnection by id
        /// </summary>
        /// <remarks>
        /// Returns the financeSystemConnection identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="financeSystemConnectionId">Id of the financeSystemConnection to be returned.</param>
        /// <returns>ApiResponse of FinanceSystemConnection</returns>
        ApiResponse<FinanceSystemConnection> GetFinanceSystemConnectionByIdWithHttpInfo (int? financeSystemConnectionId);
        /// <summary>
        /// Get the files for a financeSystemConnection.
        /// </summary>
        /// <remarks>
        /// Get all existing financeSystemConnection files.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="financeSystemConnectionId">Id of the financeSystemConnection to get files for</param>
        /// <returns></returns>
        void GetFinanceSystemConnectionFiles (int? financeSystemConnectionId);

        /// <summary>
        /// Get the files for a financeSystemConnection.
        /// </summary>
        /// <remarks>
        /// Get all existing financeSystemConnection files.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="financeSystemConnectionId">Id of the financeSystemConnection to get files for</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetFinanceSystemConnectionFilesWithHttpInfo (int? financeSystemConnectionId);
        /// <summary>
        /// Get the tags for a financeSystemConnection.
        /// </summary>
        /// <remarks>
        /// Get all existing financeSystemConnection tags.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="financeSystemConnectionId">Id of the financeSystemConnection to get tags for</param>
        /// <returns></returns>
        void GetFinanceSystemConnectionTags (int? financeSystemConnectionId);

        /// <summary>
        /// Get the tags for a financeSystemConnection.
        /// </summary>
        /// <remarks>
        /// Get all existing financeSystemConnection tags.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="financeSystemConnectionId">Id of the financeSystemConnection to get tags for</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetFinanceSystemConnectionTagsWithHttpInfo (int? financeSystemConnectionId);
        /// <summary>
        /// Update a financeSystemConnection
        /// </summary>
        /// <remarks>
        /// Updates an existing financeSystemConnection using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">FinanceSystemConnection to be updated.</param>
        /// <returns></returns>
        void UpdateFinanceSystemConnection (FinanceSystemConnection body);

        /// <summary>
        /// Update a financeSystemConnection
        /// </summary>
        /// <remarks>
        /// Updates an existing financeSystemConnection using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">FinanceSystemConnection to be updated.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateFinanceSystemConnectionWithHttpInfo (FinanceSystemConnection body);
        /// <summary>
        /// Update a financeSystemConnection custom fields
        /// </summary>
        /// <remarks>
        /// Updates an existing financeSystemConnection custom fields using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">FinanceSystemConnection to be updated.</param>
        /// <returns></returns>
        void UpdateFinanceSystemConnectionCustomFields (FinanceSystemConnection body);

        /// <summary>
        /// Update a financeSystemConnection custom fields
        /// </summary>
        /// <remarks>
        /// Updates an existing financeSystemConnection custom fields using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">FinanceSystemConnection to be updated.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateFinanceSystemConnectionCustomFieldsWithHttpInfo (FinanceSystemConnection body);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create a financeSystemConnection
        /// </summary>
        /// <remarks>
        /// Inserts a new financeSystemConnection using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">FinanceSystemConnection to be inserted.</param>
        /// <returns>Task of FinanceSystemConnection</returns>
        System.Threading.Tasks.Task<FinanceSystemConnection> AddFinanceSystemConnectionAsync (FinanceSystemConnection body);

        /// <summary>
        /// Create a financeSystemConnection
        /// </summary>
        /// <remarks>
        /// Inserts a new financeSystemConnection using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">FinanceSystemConnection to be inserted.</param>
        /// <returns>Task of ApiResponse (FinanceSystemConnection)</returns>
        System.Threading.Tasks.Task<ApiResponse<FinanceSystemConnection>> AddFinanceSystemConnectionAsyncWithHttpInfo (FinanceSystemConnection body);
        /// <summary>
        /// Add new audit for a financeSystemConnection
        /// </summary>
        /// <remarks>
        /// Adds an audit to an existing financeSystemConnection.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="financeSystemConnectionId">Id of the financeSystemConnection to add an audit to</param>
        /// <param name="financeSystemConnectionAudit">The audit to add</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddFinanceSystemConnectionAuditAsync (int? financeSystemConnectionId, string financeSystemConnectionAudit);

        /// <summary>
        /// Add new audit for a financeSystemConnection
        /// </summary>
        /// <remarks>
        /// Adds an audit to an existing financeSystemConnection.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="financeSystemConnectionId">Id of the financeSystemConnection to add an audit to</param>
        /// <param name="financeSystemConnectionAudit">The audit to add</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddFinanceSystemConnectionAuditAsyncWithHttpInfo (int? financeSystemConnectionId, string financeSystemConnectionAudit);
        /// <summary>
        /// Attach a file to a financeSystemConnection
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing financeSystemConnection.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="financeSystemConnectionId">Id of the financeSystemConnection to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddFinanceSystemConnectionFileAsync (int? financeSystemConnectionId, string fileName);

        /// <summary>
        /// Attach a file to a financeSystemConnection
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing financeSystemConnection.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="financeSystemConnectionId">Id of the financeSystemConnection to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddFinanceSystemConnectionFileAsyncWithHttpInfo (int? financeSystemConnectionId, string fileName);
        /// <summary>
        /// Attach a file to a financeSystemConnection by URL.
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing financeSystemConnection by URL.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="financeSystemConnectionId">Id of the financeSystemConnection to add an file to</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddFinanceSystemConnectionFileByURLAsync (RecordFile body, int? financeSystemConnectionId);

        /// <summary>
        /// Attach a file to a financeSystemConnection by URL.
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing financeSystemConnection by URL.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="financeSystemConnectionId">Id of the financeSystemConnection to add an file to</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddFinanceSystemConnectionFileByURLAsyncWithHttpInfo (RecordFile body, int? financeSystemConnectionId);
        /// <summary>
        /// Add new tags for a financeSystemConnection.
        /// </summary>
        /// <remarks>
        /// Adds a tag to an existing financeSystemConnection.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="financeSystemConnectionId">Id of the financeSystemConnection to add a tag to</param>
        /// <param name="financeSystemConnectionTag">The tag to add</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddFinanceSystemConnectionTagAsync (int? financeSystemConnectionId, string financeSystemConnectionTag);

        /// <summary>
        /// Add new tags for a financeSystemConnection.
        /// </summary>
        /// <remarks>
        /// Adds a tag to an existing financeSystemConnection.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="financeSystemConnectionId">Id of the financeSystemConnection to add a tag to</param>
        /// <param name="financeSystemConnectionTag">The tag to add</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddFinanceSystemConnectionTagAsyncWithHttpInfo (int? financeSystemConnectionId, string financeSystemConnectionTag);
        /// <summary>
        /// Delete a financeSystemConnection
        /// </summary>
        /// <remarks>
        /// Deletes the financeSystemConnection identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="financeSystemConnectionId">Id of the financeSystemConnection to be deleted.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteFinanceSystemConnectionAsync (int? financeSystemConnectionId);

        /// <summary>
        /// Delete a financeSystemConnection
        /// </summary>
        /// <remarks>
        /// Deletes the financeSystemConnection identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="financeSystemConnectionId">Id of the financeSystemConnection to be deleted.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteFinanceSystemConnectionAsyncWithHttpInfo (int? financeSystemConnectionId);
        /// <summary>
        /// Delete a file for a financeSystemConnection.
        /// </summary>
        /// <remarks>
        /// Deletes an existing financeSystemConnection file using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="financeSystemConnectionId">Id of the financeSystemConnection to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteFinanceSystemConnectionFileAsync (int? financeSystemConnectionId, int? fileId);

        /// <summary>
        /// Delete a file for a financeSystemConnection.
        /// </summary>
        /// <remarks>
        /// Deletes an existing financeSystemConnection file using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="financeSystemConnectionId">Id of the financeSystemConnection to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteFinanceSystemConnectionFileAsyncWithHttpInfo (int? financeSystemConnectionId, int? fileId);
        /// <summary>
        /// Delete a tag for a financeSystemConnection.
        /// </summary>
        /// <remarks>
        /// Deletes an existing financeSystemConnection tag using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="financeSystemConnectionId">Id of the financeSystemConnection to remove tag from</param>
        /// <param name="financeSystemConnectionTag">The tag to delete</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteFinanceSystemConnectionTagAsync (int? financeSystemConnectionId, string financeSystemConnectionTag);

        /// <summary>
        /// Delete a tag for a financeSystemConnection.
        /// </summary>
        /// <remarks>
        /// Deletes an existing financeSystemConnection tag using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="financeSystemConnectionId">Id of the financeSystemConnection to remove tag from</param>
        /// <param name="financeSystemConnectionTag">The tag to delete</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteFinanceSystemConnectionTagAsyncWithHttpInfo (int? financeSystemConnectionId, string financeSystemConnectionTag);
        /// <summary>
        /// Get a duplicated a financeSystemConnection by id
        /// </summary>
        /// <remarks>
        /// Returns a duplicated financeSystemConnection identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="financeSystemConnectionId">Id of the financeSystemConnection to be duplicated.</param>
        /// <returns>Task of FinanceSystemConnection</returns>
        System.Threading.Tasks.Task<FinanceSystemConnection> GetDuplicateFinanceSystemConnectionByIdAsync (int? financeSystemConnectionId);

        /// <summary>
        /// Get a duplicated a financeSystemConnection by id
        /// </summary>
        /// <remarks>
        /// Returns a duplicated financeSystemConnection identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="financeSystemConnectionId">Id of the financeSystemConnection to be duplicated.</param>
        /// <returns>Task of ApiResponse (FinanceSystemConnection)</returns>
        System.Threading.Tasks.Task<ApiResponse<FinanceSystemConnection>> GetDuplicateFinanceSystemConnectionByIdAsyncWithHttpInfo (int? financeSystemConnectionId);
        /// <summary>
        /// Search financeSystemConnections by filter
        /// </summary>
        /// <remarks>
        /// Returns the list of financeSystemConnections that match the given filter.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>Task of List&lt;FinanceSystemConnection&gt;</returns>
        System.Threading.Tasks.Task<List<FinanceSystemConnection>> GetFinanceSystemConnectionByFilterAsync (string filter = null, int? page = null, int? limit = null, string sort = null);

        /// <summary>
        /// Search financeSystemConnections by filter
        /// </summary>
        /// <remarks>
        /// Returns the list of financeSystemConnections that match the given filter.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;FinanceSystemConnection&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<FinanceSystemConnection>>> GetFinanceSystemConnectionByFilterAsyncWithHttpInfo (string filter = null, int? page = null, int? limit = null, string sort = null);
        /// <summary>
        /// Get a financeSystemConnection by id
        /// </summary>
        /// <remarks>
        /// Returns the financeSystemConnection identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="financeSystemConnectionId">Id of the financeSystemConnection to be returned.</param>
        /// <returns>Task of FinanceSystemConnection</returns>
        System.Threading.Tasks.Task<FinanceSystemConnection> GetFinanceSystemConnectionByIdAsync (int? financeSystemConnectionId);

        /// <summary>
        /// Get a financeSystemConnection by id
        /// </summary>
        /// <remarks>
        /// Returns the financeSystemConnection identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="financeSystemConnectionId">Id of the financeSystemConnection to be returned.</param>
        /// <returns>Task of ApiResponse (FinanceSystemConnection)</returns>
        System.Threading.Tasks.Task<ApiResponse<FinanceSystemConnection>> GetFinanceSystemConnectionByIdAsyncWithHttpInfo (int? financeSystemConnectionId);
        /// <summary>
        /// Get the files for a financeSystemConnection.
        /// </summary>
        /// <remarks>
        /// Get all existing financeSystemConnection files.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="financeSystemConnectionId">Id of the financeSystemConnection to get files for</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetFinanceSystemConnectionFilesAsync (int? financeSystemConnectionId);

        /// <summary>
        /// Get the files for a financeSystemConnection.
        /// </summary>
        /// <remarks>
        /// Get all existing financeSystemConnection files.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="financeSystemConnectionId">Id of the financeSystemConnection to get files for</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetFinanceSystemConnectionFilesAsyncWithHttpInfo (int? financeSystemConnectionId);
        /// <summary>
        /// Get the tags for a financeSystemConnection.
        /// </summary>
        /// <remarks>
        /// Get all existing financeSystemConnection tags.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="financeSystemConnectionId">Id of the financeSystemConnection to get tags for</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetFinanceSystemConnectionTagsAsync (int? financeSystemConnectionId);

        /// <summary>
        /// Get the tags for a financeSystemConnection.
        /// </summary>
        /// <remarks>
        /// Get all existing financeSystemConnection tags.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="financeSystemConnectionId">Id of the financeSystemConnection to get tags for</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetFinanceSystemConnectionTagsAsyncWithHttpInfo (int? financeSystemConnectionId);
        /// <summary>
        /// Update a financeSystemConnection
        /// </summary>
        /// <remarks>
        /// Updates an existing financeSystemConnection using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">FinanceSystemConnection to be updated.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateFinanceSystemConnectionAsync (FinanceSystemConnection body);

        /// <summary>
        /// Update a financeSystemConnection
        /// </summary>
        /// <remarks>
        /// Updates an existing financeSystemConnection using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">FinanceSystemConnection to be updated.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateFinanceSystemConnectionAsyncWithHttpInfo (FinanceSystemConnection body);
        /// <summary>
        /// Update a financeSystemConnection custom fields
        /// </summary>
        /// <remarks>
        /// Updates an existing financeSystemConnection custom fields using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">FinanceSystemConnection to be updated.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateFinanceSystemConnectionCustomFieldsAsync (FinanceSystemConnection body);

        /// <summary>
        /// Update a financeSystemConnection custom fields
        /// </summary>
        /// <remarks>
        /// Updates an existing financeSystemConnection custom fields using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">FinanceSystemConnection to be updated.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateFinanceSystemConnectionCustomFieldsAsyncWithHttpInfo (FinanceSystemConnection body);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class FinanceSystemConnectionApi : IFinanceSystemConnectionApi
    {
        private Infoplus.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="FinanceSystemConnectionApi"/> class.
        /// </summary>
        /// <returns></returns>
        public FinanceSystemConnectionApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = Infoplus.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FinanceSystemConnectionApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public FinanceSystemConnectionApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Infoplus.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Infoplus.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create a financeSystemConnection Inserts a new financeSystemConnection using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">FinanceSystemConnection to be inserted.</param>
        /// <returns>FinanceSystemConnection</returns>
        public FinanceSystemConnection AddFinanceSystemConnection (FinanceSystemConnection body)
        {
             ApiResponse<FinanceSystemConnection> localVarResponse = AddFinanceSystemConnectionWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a financeSystemConnection Inserts a new financeSystemConnection using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">FinanceSystemConnection to be inserted.</param>
        /// <returns>ApiResponse of FinanceSystemConnection</returns>
        public ApiResponse< FinanceSystemConnection > AddFinanceSystemConnectionWithHttpInfo (FinanceSystemConnection body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling FinanceSystemConnectionApi->AddFinanceSystemConnection");

            var localVarPath = "/beta/financeSystemConnection";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddFinanceSystemConnection", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FinanceSystemConnection>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FinanceSystemConnection) Configuration.ApiClient.Deserialize(localVarResponse, typeof(FinanceSystemConnection)));
        }

        /// <summary>
        /// Create a financeSystemConnection Inserts a new financeSystemConnection using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">FinanceSystemConnection to be inserted.</param>
        /// <returns>Task of FinanceSystemConnection</returns>
        public async System.Threading.Tasks.Task<FinanceSystemConnection> AddFinanceSystemConnectionAsync (FinanceSystemConnection body)
        {
             ApiResponse<FinanceSystemConnection> localVarResponse = await AddFinanceSystemConnectionAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a financeSystemConnection Inserts a new financeSystemConnection using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">FinanceSystemConnection to be inserted.</param>
        /// <returns>Task of ApiResponse (FinanceSystemConnection)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FinanceSystemConnection>> AddFinanceSystemConnectionAsyncWithHttpInfo (FinanceSystemConnection body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling FinanceSystemConnectionApi->AddFinanceSystemConnection");

            var localVarPath = "/beta/financeSystemConnection";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddFinanceSystemConnection", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FinanceSystemConnection>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FinanceSystemConnection) Configuration.ApiClient.Deserialize(localVarResponse, typeof(FinanceSystemConnection)));
        }

        /// <summary>
        /// Add new audit for a financeSystemConnection Adds an audit to an existing financeSystemConnection.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="financeSystemConnectionId">Id of the financeSystemConnection to add an audit to</param>
        /// <param name="financeSystemConnectionAudit">The audit to add</param>
        /// <returns></returns>
        public void AddFinanceSystemConnectionAudit (int? financeSystemConnectionId, string financeSystemConnectionAudit)
        {
             AddFinanceSystemConnectionAuditWithHttpInfo(financeSystemConnectionId, financeSystemConnectionAudit);
        }

        /// <summary>
        /// Add new audit for a financeSystemConnection Adds an audit to an existing financeSystemConnection.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="financeSystemConnectionId">Id of the financeSystemConnection to add an audit to</param>
        /// <param name="financeSystemConnectionAudit">The audit to add</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AddFinanceSystemConnectionAuditWithHttpInfo (int? financeSystemConnectionId, string financeSystemConnectionAudit)
        {
            // verify the required parameter 'financeSystemConnectionId' is set
            if (financeSystemConnectionId == null)
                throw new ApiException(400, "Missing required parameter 'financeSystemConnectionId' when calling FinanceSystemConnectionApi->AddFinanceSystemConnectionAudit");
            // verify the required parameter 'financeSystemConnectionAudit' is set
            if (financeSystemConnectionAudit == null)
                throw new ApiException(400, "Missing required parameter 'financeSystemConnectionAudit' when calling FinanceSystemConnectionApi->AddFinanceSystemConnectionAudit");

            var localVarPath = "/beta/financeSystemConnection/{financeSystemConnectionId}/audit/{financeSystemConnectionAudit}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (financeSystemConnectionId != null) localVarPathParams.Add("financeSystemConnectionId", Configuration.ApiClient.ParameterToString(financeSystemConnectionId)); // path parameter
            if (financeSystemConnectionAudit != null) localVarPathParams.Add("financeSystemConnectionAudit", Configuration.ApiClient.ParameterToString(financeSystemConnectionAudit)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddFinanceSystemConnectionAudit", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Add new audit for a financeSystemConnection Adds an audit to an existing financeSystemConnection.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="financeSystemConnectionId">Id of the financeSystemConnection to add an audit to</param>
        /// <param name="financeSystemConnectionAudit">The audit to add</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddFinanceSystemConnectionAuditAsync (int? financeSystemConnectionId, string financeSystemConnectionAudit)
        {
             await AddFinanceSystemConnectionAuditAsyncWithHttpInfo(financeSystemConnectionId, financeSystemConnectionAudit);

        }

        /// <summary>
        /// Add new audit for a financeSystemConnection Adds an audit to an existing financeSystemConnection.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="financeSystemConnectionId">Id of the financeSystemConnection to add an audit to</param>
        /// <param name="financeSystemConnectionAudit">The audit to add</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddFinanceSystemConnectionAuditAsyncWithHttpInfo (int? financeSystemConnectionId, string financeSystemConnectionAudit)
        {
            // verify the required parameter 'financeSystemConnectionId' is set
            if (financeSystemConnectionId == null)
                throw new ApiException(400, "Missing required parameter 'financeSystemConnectionId' when calling FinanceSystemConnectionApi->AddFinanceSystemConnectionAudit");
            // verify the required parameter 'financeSystemConnectionAudit' is set
            if (financeSystemConnectionAudit == null)
                throw new ApiException(400, "Missing required parameter 'financeSystemConnectionAudit' when calling FinanceSystemConnectionApi->AddFinanceSystemConnectionAudit");

            var localVarPath = "/beta/financeSystemConnection/{financeSystemConnectionId}/audit/{financeSystemConnectionAudit}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (financeSystemConnectionId != null) localVarPathParams.Add("financeSystemConnectionId", Configuration.ApiClient.ParameterToString(financeSystemConnectionId)); // path parameter
            if (financeSystemConnectionAudit != null) localVarPathParams.Add("financeSystemConnectionAudit", Configuration.ApiClient.ParameterToString(financeSystemConnectionAudit)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddFinanceSystemConnectionAudit", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Attach a file to a financeSystemConnection Adds a file to an existing financeSystemConnection.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="financeSystemConnectionId">Id of the financeSystemConnection to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns></returns>
        public void AddFinanceSystemConnectionFile (int? financeSystemConnectionId, string fileName)
        {
             AddFinanceSystemConnectionFileWithHttpInfo(financeSystemConnectionId, fileName);
        }

        /// <summary>
        /// Attach a file to a financeSystemConnection Adds a file to an existing financeSystemConnection.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="financeSystemConnectionId">Id of the financeSystemConnection to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AddFinanceSystemConnectionFileWithHttpInfo (int? financeSystemConnectionId, string fileName)
        {
            // verify the required parameter 'financeSystemConnectionId' is set
            if (financeSystemConnectionId == null)
                throw new ApiException(400, "Missing required parameter 'financeSystemConnectionId' when calling FinanceSystemConnectionApi->AddFinanceSystemConnectionFile");
            // verify the required parameter 'fileName' is set
            if (fileName == null)
                throw new ApiException(400, "Missing required parameter 'fileName' when calling FinanceSystemConnectionApi->AddFinanceSystemConnectionFile");

            var localVarPath = "/beta/financeSystemConnection/{financeSystemConnectionId}/file/{fileName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (financeSystemConnectionId != null) localVarPathParams.Add("financeSystemConnectionId", Configuration.ApiClient.ParameterToString(financeSystemConnectionId)); // path parameter
            if (fileName != null) localVarPathParams.Add("fileName", Configuration.ApiClient.ParameterToString(fileName)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddFinanceSystemConnectionFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Attach a file to a financeSystemConnection Adds a file to an existing financeSystemConnection.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="financeSystemConnectionId">Id of the financeSystemConnection to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddFinanceSystemConnectionFileAsync (int? financeSystemConnectionId, string fileName)
        {
             await AddFinanceSystemConnectionFileAsyncWithHttpInfo(financeSystemConnectionId, fileName);

        }

        /// <summary>
        /// Attach a file to a financeSystemConnection Adds a file to an existing financeSystemConnection.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="financeSystemConnectionId">Id of the financeSystemConnection to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddFinanceSystemConnectionFileAsyncWithHttpInfo (int? financeSystemConnectionId, string fileName)
        {
            // verify the required parameter 'financeSystemConnectionId' is set
            if (financeSystemConnectionId == null)
                throw new ApiException(400, "Missing required parameter 'financeSystemConnectionId' when calling FinanceSystemConnectionApi->AddFinanceSystemConnectionFile");
            // verify the required parameter 'fileName' is set
            if (fileName == null)
                throw new ApiException(400, "Missing required parameter 'fileName' when calling FinanceSystemConnectionApi->AddFinanceSystemConnectionFile");

            var localVarPath = "/beta/financeSystemConnection/{financeSystemConnectionId}/file/{fileName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (financeSystemConnectionId != null) localVarPathParams.Add("financeSystemConnectionId", Configuration.ApiClient.ParameterToString(financeSystemConnectionId)); // path parameter
            if (fileName != null) localVarPathParams.Add("fileName", Configuration.ApiClient.ParameterToString(fileName)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddFinanceSystemConnectionFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Attach a file to a financeSystemConnection by URL. Adds a file to an existing financeSystemConnection by URL.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="financeSystemConnectionId">Id of the financeSystemConnection to add an file to</param>
        /// <returns></returns>
        public void AddFinanceSystemConnectionFileByURL (RecordFile body, int? financeSystemConnectionId)
        {
             AddFinanceSystemConnectionFileByURLWithHttpInfo(body, financeSystemConnectionId);
        }

        /// <summary>
        /// Attach a file to a financeSystemConnection by URL. Adds a file to an existing financeSystemConnection by URL.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="financeSystemConnectionId">Id of the financeSystemConnection to add an file to</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AddFinanceSystemConnectionFileByURLWithHttpInfo (RecordFile body, int? financeSystemConnectionId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling FinanceSystemConnectionApi->AddFinanceSystemConnectionFileByURL");
            // verify the required parameter 'financeSystemConnectionId' is set
            if (financeSystemConnectionId == null)
                throw new ApiException(400, "Missing required parameter 'financeSystemConnectionId' when calling FinanceSystemConnectionApi->AddFinanceSystemConnectionFileByURL");

            var localVarPath = "/beta/financeSystemConnection/{financeSystemConnectionId}/file";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (financeSystemConnectionId != null) localVarPathParams.Add("financeSystemConnectionId", Configuration.ApiClient.ParameterToString(financeSystemConnectionId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddFinanceSystemConnectionFileByURL", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Attach a file to a financeSystemConnection by URL. Adds a file to an existing financeSystemConnection by URL.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="financeSystemConnectionId">Id of the financeSystemConnection to add an file to</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddFinanceSystemConnectionFileByURLAsync (RecordFile body, int? financeSystemConnectionId)
        {
             await AddFinanceSystemConnectionFileByURLAsyncWithHttpInfo(body, financeSystemConnectionId);

        }

        /// <summary>
        /// Attach a file to a financeSystemConnection by URL. Adds a file to an existing financeSystemConnection by URL.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="financeSystemConnectionId">Id of the financeSystemConnection to add an file to</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddFinanceSystemConnectionFileByURLAsyncWithHttpInfo (RecordFile body, int? financeSystemConnectionId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling FinanceSystemConnectionApi->AddFinanceSystemConnectionFileByURL");
            // verify the required parameter 'financeSystemConnectionId' is set
            if (financeSystemConnectionId == null)
                throw new ApiException(400, "Missing required parameter 'financeSystemConnectionId' when calling FinanceSystemConnectionApi->AddFinanceSystemConnectionFileByURL");

            var localVarPath = "/beta/financeSystemConnection/{financeSystemConnectionId}/file";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (financeSystemConnectionId != null) localVarPathParams.Add("financeSystemConnectionId", Configuration.ApiClient.ParameterToString(financeSystemConnectionId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddFinanceSystemConnectionFileByURL", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Add new tags for a financeSystemConnection. Adds a tag to an existing financeSystemConnection.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="financeSystemConnectionId">Id of the financeSystemConnection to add a tag to</param>
        /// <param name="financeSystemConnectionTag">The tag to add</param>
        /// <returns></returns>
        public void AddFinanceSystemConnectionTag (int? financeSystemConnectionId, string financeSystemConnectionTag)
        {
             AddFinanceSystemConnectionTagWithHttpInfo(financeSystemConnectionId, financeSystemConnectionTag);
        }

        /// <summary>
        /// Add new tags for a financeSystemConnection. Adds a tag to an existing financeSystemConnection.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="financeSystemConnectionId">Id of the financeSystemConnection to add a tag to</param>
        /// <param name="financeSystemConnectionTag">The tag to add</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AddFinanceSystemConnectionTagWithHttpInfo (int? financeSystemConnectionId, string financeSystemConnectionTag)
        {
            // verify the required parameter 'financeSystemConnectionId' is set
            if (financeSystemConnectionId == null)
                throw new ApiException(400, "Missing required parameter 'financeSystemConnectionId' when calling FinanceSystemConnectionApi->AddFinanceSystemConnectionTag");
            // verify the required parameter 'financeSystemConnectionTag' is set
            if (financeSystemConnectionTag == null)
                throw new ApiException(400, "Missing required parameter 'financeSystemConnectionTag' when calling FinanceSystemConnectionApi->AddFinanceSystemConnectionTag");

            var localVarPath = "/beta/financeSystemConnection/{financeSystemConnectionId}/tag/{financeSystemConnectionTag}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (financeSystemConnectionId != null) localVarPathParams.Add("financeSystemConnectionId", Configuration.ApiClient.ParameterToString(financeSystemConnectionId)); // path parameter
            if (financeSystemConnectionTag != null) localVarPathParams.Add("financeSystemConnectionTag", Configuration.ApiClient.ParameterToString(financeSystemConnectionTag)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddFinanceSystemConnectionTag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Add new tags for a financeSystemConnection. Adds a tag to an existing financeSystemConnection.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="financeSystemConnectionId">Id of the financeSystemConnection to add a tag to</param>
        /// <param name="financeSystemConnectionTag">The tag to add</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddFinanceSystemConnectionTagAsync (int? financeSystemConnectionId, string financeSystemConnectionTag)
        {
             await AddFinanceSystemConnectionTagAsyncWithHttpInfo(financeSystemConnectionId, financeSystemConnectionTag);

        }

        /// <summary>
        /// Add new tags for a financeSystemConnection. Adds a tag to an existing financeSystemConnection.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="financeSystemConnectionId">Id of the financeSystemConnection to add a tag to</param>
        /// <param name="financeSystemConnectionTag">The tag to add</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddFinanceSystemConnectionTagAsyncWithHttpInfo (int? financeSystemConnectionId, string financeSystemConnectionTag)
        {
            // verify the required parameter 'financeSystemConnectionId' is set
            if (financeSystemConnectionId == null)
                throw new ApiException(400, "Missing required parameter 'financeSystemConnectionId' when calling FinanceSystemConnectionApi->AddFinanceSystemConnectionTag");
            // verify the required parameter 'financeSystemConnectionTag' is set
            if (financeSystemConnectionTag == null)
                throw new ApiException(400, "Missing required parameter 'financeSystemConnectionTag' when calling FinanceSystemConnectionApi->AddFinanceSystemConnectionTag");

            var localVarPath = "/beta/financeSystemConnection/{financeSystemConnectionId}/tag/{financeSystemConnectionTag}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (financeSystemConnectionId != null) localVarPathParams.Add("financeSystemConnectionId", Configuration.ApiClient.ParameterToString(financeSystemConnectionId)); // path parameter
            if (financeSystemConnectionTag != null) localVarPathParams.Add("financeSystemConnectionTag", Configuration.ApiClient.ParameterToString(financeSystemConnectionTag)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddFinanceSystemConnectionTag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a financeSystemConnection Deletes the financeSystemConnection identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="financeSystemConnectionId">Id of the financeSystemConnection to be deleted.</param>
        /// <returns></returns>
        public void DeleteFinanceSystemConnection (int? financeSystemConnectionId)
        {
             DeleteFinanceSystemConnectionWithHttpInfo(financeSystemConnectionId);
        }

        /// <summary>
        /// Delete a financeSystemConnection Deletes the financeSystemConnection identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="financeSystemConnectionId">Id of the financeSystemConnection to be deleted.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteFinanceSystemConnectionWithHttpInfo (int? financeSystemConnectionId)
        {
            // verify the required parameter 'financeSystemConnectionId' is set
            if (financeSystemConnectionId == null)
                throw new ApiException(400, "Missing required parameter 'financeSystemConnectionId' when calling FinanceSystemConnectionApi->DeleteFinanceSystemConnection");

            var localVarPath = "/beta/financeSystemConnection/{financeSystemConnectionId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (financeSystemConnectionId != null) localVarPathParams.Add("financeSystemConnectionId", Configuration.ApiClient.ParameterToString(financeSystemConnectionId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteFinanceSystemConnection", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a financeSystemConnection Deletes the financeSystemConnection identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="financeSystemConnectionId">Id of the financeSystemConnection to be deleted.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteFinanceSystemConnectionAsync (int? financeSystemConnectionId)
        {
             await DeleteFinanceSystemConnectionAsyncWithHttpInfo(financeSystemConnectionId);

        }

        /// <summary>
        /// Delete a financeSystemConnection Deletes the financeSystemConnection identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="financeSystemConnectionId">Id of the financeSystemConnection to be deleted.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteFinanceSystemConnectionAsyncWithHttpInfo (int? financeSystemConnectionId)
        {
            // verify the required parameter 'financeSystemConnectionId' is set
            if (financeSystemConnectionId == null)
                throw new ApiException(400, "Missing required parameter 'financeSystemConnectionId' when calling FinanceSystemConnectionApi->DeleteFinanceSystemConnection");

            var localVarPath = "/beta/financeSystemConnection/{financeSystemConnectionId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (financeSystemConnectionId != null) localVarPathParams.Add("financeSystemConnectionId", Configuration.ApiClient.ParameterToString(financeSystemConnectionId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteFinanceSystemConnection", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a file for a financeSystemConnection. Deletes an existing financeSystemConnection file using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="financeSystemConnectionId">Id of the financeSystemConnection to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns></returns>
        public void DeleteFinanceSystemConnectionFile (int? financeSystemConnectionId, int? fileId)
        {
             DeleteFinanceSystemConnectionFileWithHttpInfo(financeSystemConnectionId, fileId);
        }

        /// <summary>
        /// Delete a file for a financeSystemConnection. Deletes an existing financeSystemConnection file using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="financeSystemConnectionId">Id of the financeSystemConnection to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteFinanceSystemConnectionFileWithHttpInfo (int? financeSystemConnectionId, int? fileId)
        {
            // verify the required parameter 'financeSystemConnectionId' is set
            if (financeSystemConnectionId == null)
                throw new ApiException(400, "Missing required parameter 'financeSystemConnectionId' when calling FinanceSystemConnectionApi->DeleteFinanceSystemConnectionFile");
            // verify the required parameter 'fileId' is set
            if (fileId == null)
                throw new ApiException(400, "Missing required parameter 'fileId' when calling FinanceSystemConnectionApi->DeleteFinanceSystemConnectionFile");

            var localVarPath = "/beta/financeSystemConnection/{financeSystemConnectionId}/file/{fileId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (financeSystemConnectionId != null) localVarPathParams.Add("financeSystemConnectionId", Configuration.ApiClient.ParameterToString(financeSystemConnectionId)); // path parameter
            if (fileId != null) localVarPathParams.Add("fileId", Configuration.ApiClient.ParameterToString(fileId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteFinanceSystemConnectionFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a file for a financeSystemConnection. Deletes an existing financeSystemConnection file using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="financeSystemConnectionId">Id of the financeSystemConnection to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteFinanceSystemConnectionFileAsync (int? financeSystemConnectionId, int? fileId)
        {
             await DeleteFinanceSystemConnectionFileAsyncWithHttpInfo(financeSystemConnectionId, fileId);

        }

        /// <summary>
        /// Delete a file for a financeSystemConnection. Deletes an existing financeSystemConnection file using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="financeSystemConnectionId">Id of the financeSystemConnection to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteFinanceSystemConnectionFileAsyncWithHttpInfo (int? financeSystemConnectionId, int? fileId)
        {
            // verify the required parameter 'financeSystemConnectionId' is set
            if (financeSystemConnectionId == null)
                throw new ApiException(400, "Missing required parameter 'financeSystemConnectionId' when calling FinanceSystemConnectionApi->DeleteFinanceSystemConnectionFile");
            // verify the required parameter 'fileId' is set
            if (fileId == null)
                throw new ApiException(400, "Missing required parameter 'fileId' when calling FinanceSystemConnectionApi->DeleteFinanceSystemConnectionFile");

            var localVarPath = "/beta/financeSystemConnection/{financeSystemConnectionId}/file/{fileId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (financeSystemConnectionId != null) localVarPathParams.Add("financeSystemConnectionId", Configuration.ApiClient.ParameterToString(financeSystemConnectionId)); // path parameter
            if (fileId != null) localVarPathParams.Add("fileId", Configuration.ApiClient.ParameterToString(fileId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteFinanceSystemConnectionFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a tag for a financeSystemConnection. Deletes an existing financeSystemConnection tag using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="financeSystemConnectionId">Id of the financeSystemConnection to remove tag from</param>
        /// <param name="financeSystemConnectionTag">The tag to delete</param>
        /// <returns></returns>
        public void DeleteFinanceSystemConnectionTag (int? financeSystemConnectionId, string financeSystemConnectionTag)
        {
             DeleteFinanceSystemConnectionTagWithHttpInfo(financeSystemConnectionId, financeSystemConnectionTag);
        }

        /// <summary>
        /// Delete a tag for a financeSystemConnection. Deletes an existing financeSystemConnection tag using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="financeSystemConnectionId">Id of the financeSystemConnection to remove tag from</param>
        /// <param name="financeSystemConnectionTag">The tag to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteFinanceSystemConnectionTagWithHttpInfo (int? financeSystemConnectionId, string financeSystemConnectionTag)
        {
            // verify the required parameter 'financeSystemConnectionId' is set
            if (financeSystemConnectionId == null)
                throw new ApiException(400, "Missing required parameter 'financeSystemConnectionId' when calling FinanceSystemConnectionApi->DeleteFinanceSystemConnectionTag");
            // verify the required parameter 'financeSystemConnectionTag' is set
            if (financeSystemConnectionTag == null)
                throw new ApiException(400, "Missing required parameter 'financeSystemConnectionTag' when calling FinanceSystemConnectionApi->DeleteFinanceSystemConnectionTag");

            var localVarPath = "/beta/financeSystemConnection/{financeSystemConnectionId}/tag/{financeSystemConnectionTag}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (financeSystemConnectionId != null) localVarPathParams.Add("financeSystemConnectionId", Configuration.ApiClient.ParameterToString(financeSystemConnectionId)); // path parameter
            if (financeSystemConnectionTag != null) localVarPathParams.Add("financeSystemConnectionTag", Configuration.ApiClient.ParameterToString(financeSystemConnectionTag)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteFinanceSystemConnectionTag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a tag for a financeSystemConnection. Deletes an existing financeSystemConnection tag using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="financeSystemConnectionId">Id of the financeSystemConnection to remove tag from</param>
        /// <param name="financeSystemConnectionTag">The tag to delete</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteFinanceSystemConnectionTagAsync (int? financeSystemConnectionId, string financeSystemConnectionTag)
        {
             await DeleteFinanceSystemConnectionTagAsyncWithHttpInfo(financeSystemConnectionId, financeSystemConnectionTag);

        }

        /// <summary>
        /// Delete a tag for a financeSystemConnection. Deletes an existing financeSystemConnection tag using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="financeSystemConnectionId">Id of the financeSystemConnection to remove tag from</param>
        /// <param name="financeSystemConnectionTag">The tag to delete</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteFinanceSystemConnectionTagAsyncWithHttpInfo (int? financeSystemConnectionId, string financeSystemConnectionTag)
        {
            // verify the required parameter 'financeSystemConnectionId' is set
            if (financeSystemConnectionId == null)
                throw new ApiException(400, "Missing required parameter 'financeSystemConnectionId' when calling FinanceSystemConnectionApi->DeleteFinanceSystemConnectionTag");
            // verify the required parameter 'financeSystemConnectionTag' is set
            if (financeSystemConnectionTag == null)
                throw new ApiException(400, "Missing required parameter 'financeSystemConnectionTag' when calling FinanceSystemConnectionApi->DeleteFinanceSystemConnectionTag");

            var localVarPath = "/beta/financeSystemConnection/{financeSystemConnectionId}/tag/{financeSystemConnectionTag}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (financeSystemConnectionId != null) localVarPathParams.Add("financeSystemConnectionId", Configuration.ApiClient.ParameterToString(financeSystemConnectionId)); // path parameter
            if (financeSystemConnectionTag != null) localVarPathParams.Add("financeSystemConnectionTag", Configuration.ApiClient.ParameterToString(financeSystemConnectionTag)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteFinanceSystemConnectionTag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get a duplicated a financeSystemConnection by id Returns a duplicated financeSystemConnection identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="financeSystemConnectionId">Id of the financeSystemConnection to be duplicated.</param>
        /// <returns>FinanceSystemConnection</returns>
        public FinanceSystemConnection GetDuplicateFinanceSystemConnectionById (int? financeSystemConnectionId)
        {
             ApiResponse<FinanceSystemConnection> localVarResponse = GetDuplicateFinanceSystemConnectionByIdWithHttpInfo(financeSystemConnectionId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a duplicated a financeSystemConnection by id Returns a duplicated financeSystemConnection identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="financeSystemConnectionId">Id of the financeSystemConnection to be duplicated.</param>
        /// <returns>ApiResponse of FinanceSystemConnection</returns>
        public ApiResponse< FinanceSystemConnection > GetDuplicateFinanceSystemConnectionByIdWithHttpInfo (int? financeSystemConnectionId)
        {
            // verify the required parameter 'financeSystemConnectionId' is set
            if (financeSystemConnectionId == null)
                throw new ApiException(400, "Missing required parameter 'financeSystemConnectionId' when calling FinanceSystemConnectionApi->GetDuplicateFinanceSystemConnectionById");

            var localVarPath = "/beta/financeSystemConnection/duplicate/{financeSystemConnectionId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (financeSystemConnectionId != null) localVarPathParams.Add("financeSystemConnectionId", Configuration.ApiClient.ParameterToString(financeSystemConnectionId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDuplicateFinanceSystemConnectionById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FinanceSystemConnection>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FinanceSystemConnection) Configuration.ApiClient.Deserialize(localVarResponse, typeof(FinanceSystemConnection)));
        }

        /// <summary>
        /// Get a duplicated a financeSystemConnection by id Returns a duplicated financeSystemConnection identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="financeSystemConnectionId">Id of the financeSystemConnection to be duplicated.</param>
        /// <returns>Task of FinanceSystemConnection</returns>
        public async System.Threading.Tasks.Task<FinanceSystemConnection> GetDuplicateFinanceSystemConnectionByIdAsync (int? financeSystemConnectionId)
        {
             ApiResponse<FinanceSystemConnection> localVarResponse = await GetDuplicateFinanceSystemConnectionByIdAsyncWithHttpInfo(financeSystemConnectionId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a duplicated a financeSystemConnection by id Returns a duplicated financeSystemConnection identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="financeSystemConnectionId">Id of the financeSystemConnection to be duplicated.</param>
        /// <returns>Task of ApiResponse (FinanceSystemConnection)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FinanceSystemConnection>> GetDuplicateFinanceSystemConnectionByIdAsyncWithHttpInfo (int? financeSystemConnectionId)
        {
            // verify the required parameter 'financeSystemConnectionId' is set
            if (financeSystemConnectionId == null)
                throw new ApiException(400, "Missing required parameter 'financeSystemConnectionId' when calling FinanceSystemConnectionApi->GetDuplicateFinanceSystemConnectionById");

            var localVarPath = "/beta/financeSystemConnection/duplicate/{financeSystemConnectionId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (financeSystemConnectionId != null) localVarPathParams.Add("financeSystemConnectionId", Configuration.ApiClient.ParameterToString(financeSystemConnectionId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDuplicateFinanceSystemConnectionById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FinanceSystemConnection>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FinanceSystemConnection) Configuration.ApiClient.Deserialize(localVarResponse, typeof(FinanceSystemConnection)));
        }

        /// <summary>
        /// Search financeSystemConnections by filter Returns the list of financeSystemConnections that match the given filter.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>List&lt;FinanceSystemConnection&gt;</returns>
        public List<FinanceSystemConnection> GetFinanceSystemConnectionByFilter (string filter = null, int? page = null, int? limit = null, string sort = null)
        {
             ApiResponse<List<FinanceSystemConnection>> localVarResponse = GetFinanceSystemConnectionByFilterWithHttpInfo(filter, page, limit, sort);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Search financeSystemConnections by filter Returns the list of financeSystemConnections that match the given filter.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>ApiResponse of List&lt;FinanceSystemConnection&gt;</returns>
        public ApiResponse< List<FinanceSystemConnection> > GetFinanceSystemConnectionByFilterWithHttpInfo (string filter = null, int? page = null, int? limit = null, string sort = null)
        {

            var localVarPath = "/beta/financeSystemConnection/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (filter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (page != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFinanceSystemConnectionByFilter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<FinanceSystemConnection>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<FinanceSystemConnection>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<FinanceSystemConnection>)));
        }

        /// <summary>
        /// Search financeSystemConnections by filter Returns the list of financeSystemConnections that match the given filter.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>Task of List&lt;FinanceSystemConnection&gt;</returns>
        public async System.Threading.Tasks.Task<List<FinanceSystemConnection>> GetFinanceSystemConnectionByFilterAsync (string filter = null, int? page = null, int? limit = null, string sort = null)
        {
             ApiResponse<List<FinanceSystemConnection>> localVarResponse = await GetFinanceSystemConnectionByFilterAsyncWithHttpInfo(filter, page, limit, sort);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Search financeSystemConnections by filter Returns the list of financeSystemConnections that match the given filter.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;FinanceSystemConnection&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<FinanceSystemConnection>>> GetFinanceSystemConnectionByFilterAsyncWithHttpInfo (string filter = null, int? page = null, int? limit = null, string sort = null)
        {

            var localVarPath = "/beta/financeSystemConnection/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (filter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (page != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFinanceSystemConnectionByFilter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<FinanceSystemConnection>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<FinanceSystemConnection>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<FinanceSystemConnection>)));
        }

        /// <summary>
        /// Get a financeSystemConnection by id Returns the financeSystemConnection identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="financeSystemConnectionId">Id of the financeSystemConnection to be returned.</param>
        /// <returns>FinanceSystemConnection</returns>
        public FinanceSystemConnection GetFinanceSystemConnectionById (int? financeSystemConnectionId)
        {
             ApiResponse<FinanceSystemConnection> localVarResponse = GetFinanceSystemConnectionByIdWithHttpInfo(financeSystemConnectionId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a financeSystemConnection by id Returns the financeSystemConnection identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="financeSystemConnectionId">Id of the financeSystemConnection to be returned.</param>
        /// <returns>ApiResponse of FinanceSystemConnection</returns>
        public ApiResponse< FinanceSystemConnection > GetFinanceSystemConnectionByIdWithHttpInfo (int? financeSystemConnectionId)
        {
            // verify the required parameter 'financeSystemConnectionId' is set
            if (financeSystemConnectionId == null)
                throw new ApiException(400, "Missing required parameter 'financeSystemConnectionId' when calling FinanceSystemConnectionApi->GetFinanceSystemConnectionById");

            var localVarPath = "/beta/financeSystemConnection/{financeSystemConnectionId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (financeSystemConnectionId != null) localVarPathParams.Add("financeSystemConnectionId", Configuration.ApiClient.ParameterToString(financeSystemConnectionId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFinanceSystemConnectionById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FinanceSystemConnection>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FinanceSystemConnection) Configuration.ApiClient.Deserialize(localVarResponse, typeof(FinanceSystemConnection)));
        }

        /// <summary>
        /// Get a financeSystemConnection by id Returns the financeSystemConnection identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="financeSystemConnectionId">Id of the financeSystemConnection to be returned.</param>
        /// <returns>Task of FinanceSystemConnection</returns>
        public async System.Threading.Tasks.Task<FinanceSystemConnection> GetFinanceSystemConnectionByIdAsync (int? financeSystemConnectionId)
        {
             ApiResponse<FinanceSystemConnection> localVarResponse = await GetFinanceSystemConnectionByIdAsyncWithHttpInfo(financeSystemConnectionId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a financeSystemConnection by id Returns the financeSystemConnection identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="financeSystemConnectionId">Id of the financeSystemConnection to be returned.</param>
        /// <returns>Task of ApiResponse (FinanceSystemConnection)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FinanceSystemConnection>> GetFinanceSystemConnectionByIdAsyncWithHttpInfo (int? financeSystemConnectionId)
        {
            // verify the required parameter 'financeSystemConnectionId' is set
            if (financeSystemConnectionId == null)
                throw new ApiException(400, "Missing required parameter 'financeSystemConnectionId' when calling FinanceSystemConnectionApi->GetFinanceSystemConnectionById");

            var localVarPath = "/beta/financeSystemConnection/{financeSystemConnectionId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (financeSystemConnectionId != null) localVarPathParams.Add("financeSystemConnectionId", Configuration.ApiClient.ParameterToString(financeSystemConnectionId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFinanceSystemConnectionById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FinanceSystemConnection>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FinanceSystemConnection) Configuration.ApiClient.Deserialize(localVarResponse, typeof(FinanceSystemConnection)));
        }

        /// <summary>
        /// Get the files for a financeSystemConnection. Get all existing financeSystemConnection files.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="financeSystemConnectionId">Id of the financeSystemConnection to get files for</param>
        /// <returns></returns>
        public void GetFinanceSystemConnectionFiles (int? financeSystemConnectionId)
        {
             GetFinanceSystemConnectionFilesWithHttpInfo(financeSystemConnectionId);
        }

        /// <summary>
        /// Get the files for a financeSystemConnection. Get all existing financeSystemConnection files.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="financeSystemConnectionId">Id of the financeSystemConnection to get files for</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GetFinanceSystemConnectionFilesWithHttpInfo (int? financeSystemConnectionId)
        {
            // verify the required parameter 'financeSystemConnectionId' is set
            if (financeSystemConnectionId == null)
                throw new ApiException(400, "Missing required parameter 'financeSystemConnectionId' when calling FinanceSystemConnectionApi->GetFinanceSystemConnectionFiles");

            var localVarPath = "/beta/financeSystemConnection/{financeSystemConnectionId}/file";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (financeSystemConnectionId != null) localVarPathParams.Add("financeSystemConnectionId", Configuration.ApiClient.ParameterToString(financeSystemConnectionId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFinanceSystemConnectionFiles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get the files for a financeSystemConnection. Get all existing financeSystemConnection files.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="financeSystemConnectionId">Id of the financeSystemConnection to get files for</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetFinanceSystemConnectionFilesAsync (int? financeSystemConnectionId)
        {
             await GetFinanceSystemConnectionFilesAsyncWithHttpInfo(financeSystemConnectionId);

        }

        /// <summary>
        /// Get the files for a financeSystemConnection. Get all existing financeSystemConnection files.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="financeSystemConnectionId">Id of the financeSystemConnection to get files for</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetFinanceSystemConnectionFilesAsyncWithHttpInfo (int? financeSystemConnectionId)
        {
            // verify the required parameter 'financeSystemConnectionId' is set
            if (financeSystemConnectionId == null)
                throw new ApiException(400, "Missing required parameter 'financeSystemConnectionId' when calling FinanceSystemConnectionApi->GetFinanceSystemConnectionFiles");

            var localVarPath = "/beta/financeSystemConnection/{financeSystemConnectionId}/file";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (financeSystemConnectionId != null) localVarPathParams.Add("financeSystemConnectionId", Configuration.ApiClient.ParameterToString(financeSystemConnectionId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFinanceSystemConnectionFiles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get the tags for a financeSystemConnection. Get all existing financeSystemConnection tags.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="financeSystemConnectionId">Id of the financeSystemConnection to get tags for</param>
        /// <returns></returns>
        public void GetFinanceSystemConnectionTags (int? financeSystemConnectionId)
        {
             GetFinanceSystemConnectionTagsWithHttpInfo(financeSystemConnectionId);
        }

        /// <summary>
        /// Get the tags for a financeSystemConnection. Get all existing financeSystemConnection tags.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="financeSystemConnectionId">Id of the financeSystemConnection to get tags for</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GetFinanceSystemConnectionTagsWithHttpInfo (int? financeSystemConnectionId)
        {
            // verify the required parameter 'financeSystemConnectionId' is set
            if (financeSystemConnectionId == null)
                throw new ApiException(400, "Missing required parameter 'financeSystemConnectionId' when calling FinanceSystemConnectionApi->GetFinanceSystemConnectionTags");

            var localVarPath = "/beta/financeSystemConnection/{financeSystemConnectionId}/tag";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (financeSystemConnectionId != null) localVarPathParams.Add("financeSystemConnectionId", Configuration.ApiClient.ParameterToString(financeSystemConnectionId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFinanceSystemConnectionTags", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get the tags for a financeSystemConnection. Get all existing financeSystemConnection tags.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="financeSystemConnectionId">Id of the financeSystemConnection to get tags for</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetFinanceSystemConnectionTagsAsync (int? financeSystemConnectionId)
        {
             await GetFinanceSystemConnectionTagsAsyncWithHttpInfo(financeSystemConnectionId);

        }

        /// <summary>
        /// Get the tags for a financeSystemConnection. Get all existing financeSystemConnection tags.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="financeSystemConnectionId">Id of the financeSystemConnection to get tags for</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetFinanceSystemConnectionTagsAsyncWithHttpInfo (int? financeSystemConnectionId)
        {
            // verify the required parameter 'financeSystemConnectionId' is set
            if (financeSystemConnectionId == null)
                throw new ApiException(400, "Missing required parameter 'financeSystemConnectionId' when calling FinanceSystemConnectionApi->GetFinanceSystemConnectionTags");

            var localVarPath = "/beta/financeSystemConnection/{financeSystemConnectionId}/tag";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (financeSystemConnectionId != null) localVarPathParams.Add("financeSystemConnectionId", Configuration.ApiClient.ParameterToString(financeSystemConnectionId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFinanceSystemConnectionTags", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update a financeSystemConnection Updates an existing financeSystemConnection using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">FinanceSystemConnection to be updated.</param>
        /// <returns></returns>
        public void UpdateFinanceSystemConnection (FinanceSystemConnection body)
        {
             UpdateFinanceSystemConnectionWithHttpInfo(body);
        }

        /// <summary>
        /// Update a financeSystemConnection Updates an existing financeSystemConnection using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">FinanceSystemConnection to be updated.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateFinanceSystemConnectionWithHttpInfo (FinanceSystemConnection body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling FinanceSystemConnectionApi->UpdateFinanceSystemConnection");

            var localVarPath = "/beta/financeSystemConnection";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateFinanceSystemConnection", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update a financeSystemConnection Updates an existing financeSystemConnection using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">FinanceSystemConnection to be updated.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateFinanceSystemConnectionAsync (FinanceSystemConnection body)
        {
             await UpdateFinanceSystemConnectionAsyncWithHttpInfo(body);

        }

        /// <summary>
        /// Update a financeSystemConnection Updates an existing financeSystemConnection using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">FinanceSystemConnection to be updated.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateFinanceSystemConnectionAsyncWithHttpInfo (FinanceSystemConnection body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling FinanceSystemConnectionApi->UpdateFinanceSystemConnection");

            var localVarPath = "/beta/financeSystemConnection";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateFinanceSystemConnection", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update a financeSystemConnection custom fields Updates an existing financeSystemConnection custom fields using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">FinanceSystemConnection to be updated.</param>
        /// <returns></returns>
        public void UpdateFinanceSystemConnectionCustomFields (FinanceSystemConnection body)
        {
             UpdateFinanceSystemConnectionCustomFieldsWithHttpInfo(body);
        }

        /// <summary>
        /// Update a financeSystemConnection custom fields Updates an existing financeSystemConnection custom fields using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">FinanceSystemConnection to be updated.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateFinanceSystemConnectionCustomFieldsWithHttpInfo (FinanceSystemConnection body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling FinanceSystemConnectionApi->UpdateFinanceSystemConnectionCustomFields");

            var localVarPath = "/beta/financeSystemConnection/customFields";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateFinanceSystemConnectionCustomFields", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update a financeSystemConnection custom fields Updates an existing financeSystemConnection custom fields using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">FinanceSystemConnection to be updated.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateFinanceSystemConnectionCustomFieldsAsync (FinanceSystemConnection body)
        {
             await UpdateFinanceSystemConnectionCustomFieldsAsyncWithHttpInfo(body);

        }

        /// <summary>
        /// Update a financeSystemConnection custom fields Updates an existing financeSystemConnection custom fields using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">FinanceSystemConnection to be updated.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateFinanceSystemConnectionCustomFieldsAsyncWithHttpInfo (FinanceSystemConnection body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling FinanceSystemConnectionApi->UpdateFinanceSystemConnectionCustomFields");

            var localVarPath = "/beta/financeSystemConnection/customFields";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateFinanceSystemConnectionCustomFields", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

    }
}
