/* 
 * Infoplus API
 *
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Infoplus.Client;
using Infoplus.Model;

namespace Infoplus.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFinanceSystemConnectionLogApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Add new audit for a financeSystemConnectionLog
        /// </summary>
        /// <remarks>
        /// Adds an audit to an existing financeSystemConnectionLog.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="financeSystemConnectionLogId">Id of the financeSystemConnectionLog to add an audit to</param>
        /// <param name="financeSystemConnectionLogAudit">The audit to add</param>
        /// <returns></returns>
        void AddFinanceSystemConnectionLogAudit (int? financeSystemConnectionLogId, string financeSystemConnectionLogAudit);

        /// <summary>
        /// Add new audit for a financeSystemConnectionLog
        /// </summary>
        /// <remarks>
        /// Adds an audit to an existing financeSystemConnectionLog.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="financeSystemConnectionLogId">Id of the financeSystemConnectionLog to add an audit to</param>
        /// <param name="financeSystemConnectionLogAudit">The audit to add</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddFinanceSystemConnectionLogAuditWithHttpInfo (int? financeSystemConnectionLogId, string financeSystemConnectionLogAudit);
        /// <summary>
        /// Attach a file to a financeSystemConnectionLog
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing financeSystemConnectionLog.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="financeSystemConnectionLogId">Id of the financeSystemConnectionLog to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns></returns>
        void AddFinanceSystemConnectionLogFile (int? financeSystemConnectionLogId, string fileName);

        /// <summary>
        /// Attach a file to a financeSystemConnectionLog
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing financeSystemConnectionLog.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="financeSystemConnectionLogId">Id of the financeSystemConnectionLog to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddFinanceSystemConnectionLogFileWithHttpInfo (int? financeSystemConnectionLogId, string fileName);
        /// <summary>
        /// Attach a file to a financeSystemConnectionLog by URL.
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing financeSystemConnectionLog by URL.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="financeSystemConnectionLogId">Id of the financeSystemConnectionLog to add an file to</param>
        /// <returns></returns>
        void AddFinanceSystemConnectionLogFileByURL (RecordFile body, int? financeSystemConnectionLogId);

        /// <summary>
        /// Attach a file to a financeSystemConnectionLog by URL.
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing financeSystemConnectionLog by URL.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="financeSystemConnectionLogId">Id of the financeSystemConnectionLog to add an file to</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddFinanceSystemConnectionLogFileByURLWithHttpInfo (RecordFile body, int? financeSystemConnectionLogId);
        /// <summary>
        /// Add new tags for a financeSystemConnectionLog.
        /// </summary>
        /// <remarks>
        /// Adds a tag to an existing financeSystemConnectionLog.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="financeSystemConnectionLogId">Id of the financeSystemConnectionLog to add a tag to</param>
        /// <param name="financeSystemConnectionLogTag">The tag to add</param>
        /// <returns></returns>
        void AddFinanceSystemConnectionLogTag (int? financeSystemConnectionLogId, string financeSystemConnectionLogTag);

        /// <summary>
        /// Add new tags for a financeSystemConnectionLog.
        /// </summary>
        /// <remarks>
        /// Adds a tag to an existing financeSystemConnectionLog.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="financeSystemConnectionLogId">Id of the financeSystemConnectionLog to add a tag to</param>
        /// <param name="financeSystemConnectionLogTag">The tag to add</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddFinanceSystemConnectionLogTagWithHttpInfo (int? financeSystemConnectionLogId, string financeSystemConnectionLogTag);
        /// <summary>
        /// Delete a file for a financeSystemConnectionLog.
        /// </summary>
        /// <remarks>
        /// Deletes an existing financeSystemConnectionLog file using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="financeSystemConnectionLogId">Id of the financeSystemConnectionLog to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns></returns>
        void DeleteFinanceSystemConnectionLogFile (int? financeSystemConnectionLogId, int? fileId);

        /// <summary>
        /// Delete a file for a financeSystemConnectionLog.
        /// </summary>
        /// <remarks>
        /// Deletes an existing financeSystemConnectionLog file using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="financeSystemConnectionLogId">Id of the financeSystemConnectionLog to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteFinanceSystemConnectionLogFileWithHttpInfo (int? financeSystemConnectionLogId, int? fileId);
        /// <summary>
        /// Delete a tag for a financeSystemConnectionLog.
        /// </summary>
        /// <remarks>
        /// Deletes an existing financeSystemConnectionLog tag using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="financeSystemConnectionLogId">Id of the financeSystemConnectionLog to remove tag from</param>
        /// <param name="financeSystemConnectionLogTag">The tag to delete</param>
        /// <returns></returns>
        void DeleteFinanceSystemConnectionLogTag (int? financeSystemConnectionLogId, string financeSystemConnectionLogTag);

        /// <summary>
        /// Delete a tag for a financeSystemConnectionLog.
        /// </summary>
        /// <remarks>
        /// Deletes an existing financeSystemConnectionLog tag using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="financeSystemConnectionLogId">Id of the financeSystemConnectionLog to remove tag from</param>
        /// <param name="financeSystemConnectionLogTag">The tag to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteFinanceSystemConnectionLogTagWithHttpInfo (int? financeSystemConnectionLogId, string financeSystemConnectionLogTag);
        /// <summary>
        /// Get a duplicated a financeSystemConnectionLog by id
        /// </summary>
        /// <remarks>
        /// Returns a duplicated financeSystemConnectionLog identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="financeSystemConnectionLogId">Id of the financeSystemConnectionLog to be duplicated.</param>
        /// <returns>FinanceSystemConnectionLog</returns>
        FinanceSystemConnectionLog GetDuplicateFinanceSystemConnectionLogById (int? financeSystemConnectionLogId);

        /// <summary>
        /// Get a duplicated a financeSystemConnectionLog by id
        /// </summary>
        /// <remarks>
        /// Returns a duplicated financeSystemConnectionLog identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="financeSystemConnectionLogId">Id of the financeSystemConnectionLog to be duplicated.</param>
        /// <returns>ApiResponse of FinanceSystemConnectionLog</returns>
        ApiResponse<FinanceSystemConnectionLog> GetDuplicateFinanceSystemConnectionLogByIdWithHttpInfo (int? financeSystemConnectionLogId);
        /// <summary>
        /// Search financeSystemConnectionLogs by filter
        /// </summary>
        /// <remarks>
        /// Returns the list of financeSystemConnectionLogs that match the given filter.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>List&lt;FinanceSystemConnectionLog&gt;</returns>
        List<FinanceSystemConnectionLog> GetFinanceSystemConnectionLogByFilter (string filter = null, int? page = null, int? limit = null, string sort = null);

        /// <summary>
        /// Search financeSystemConnectionLogs by filter
        /// </summary>
        /// <remarks>
        /// Returns the list of financeSystemConnectionLogs that match the given filter.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>ApiResponse of List&lt;FinanceSystemConnectionLog&gt;</returns>
        ApiResponse<List<FinanceSystemConnectionLog>> GetFinanceSystemConnectionLogByFilterWithHttpInfo (string filter = null, int? page = null, int? limit = null, string sort = null);
        /// <summary>
        /// Get a financeSystemConnectionLog by id
        /// </summary>
        /// <remarks>
        /// Returns the financeSystemConnectionLog identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="financeSystemConnectionLogId">Id of the financeSystemConnectionLog to be returned.</param>
        /// <returns>FinanceSystemConnectionLog</returns>
        FinanceSystemConnectionLog GetFinanceSystemConnectionLogById (int? financeSystemConnectionLogId);

        /// <summary>
        /// Get a financeSystemConnectionLog by id
        /// </summary>
        /// <remarks>
        /// Returns the financeSystemConnectionLog identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="financeSystemConnectionLogId">Id of the financeSystemConnectionLog to be returned.</param>
        /// <returns>ApiResponse of FinanceSystemConnectionLog</returns>
        ApiResponse<FinanceSystemConnectionLog> GetFinanceSystemConnectionLogByIdWithHttpInfo (int? financeSystemConnectionLogId);
        /// <summary>
        /// Get the files for a financeSystemConnectionLog.
        /// </summary>
        /// <remarks>
        /// Get all existing financeSystemConnectionLog files.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="financeSystemConnectionLogId">Id of the financeSystemConnectionLog to get files for</param>
        /// <returns></returns>
        void GetFinanceSystemConnectionLogFiles (int? financeSystemConnectionLogId);

        /// <summary>
        /// Get the files for a financeSystemConnectionLog.
        /// </summary>
        /// <remarks>
        /// Get all existing financeSystemConnectionLog files.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="financeSystemConnectionLogId">Id of the financeSystemConnectionLog to get files for</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetFinanceSystemConnectionLogFilesWithHttpInfo (int? financeSystemConnectionLogId);
        /// <summary>
        /// Get the tags for a financeSystemConnectionLog.
        /// </summary>
        /// <remarks>
        /// Get all existing financeSystemConnectionLog tags.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="financeSystemConnectionLogId">Id of the financeSystemConnectionLog to get tags for</param>
        /// <returns></returns>
        void GetFinanceSystemConnectionLogTags (int? financeSystemConnectionLogId);

        /// <summary>
        /// Get the tags for a financeSystemConnectionLog.
        /// </summary>
        /// <remarks>
        /// Get all existing financeSystemConnectionLog tags.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="financeSystemConnectionLogId">Id of the financeSystemConnectionLog to get tags for</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetFinanceSystemConnectionLogTagsWithHttpInfo (int? financeSystemConnectionLogId);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Add new audit for a financeSystemConnectionLog
        /// </summary>
        /// <remarks>
        /// Adds an audit to an existing financeSystemConnectionLog.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="financeSystemConnectionLogId">Id of the financeSystemConnectionLog to add an audit to</param>
        /// <param name="financeSystemConnectionLogAudit">The audit to add</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddFinanceSystemConnectionLogAuditAsync (int? financeSystemConnectionLogId, string financeSystemConnectionLogAudit);

        /// <summary>
        /// Add new audit for a financeSystemConnectionLog
        /// </summary>
        /// <remarks>
        /// Adds an audit to an existing financeSystemConnectionLog.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="financeSystemConnectionLogId">Id of the financeSystemConnectionLog to add an audit to</param>
        /// <param name="financeSystemConnectionLogAudit">The audit to add</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddFinanceSystemConnectionLogAuditAsyncWithHttpInfo (int? financeSystemConnectionLogId, string financeSystemConnectionLogAudit);
        /// <summary>
        /// Attach a file to a financeSystemConnectionLog
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing financeSystemConnectionLog.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="financeSystemConnectionLogId">Id of the financeSystemConnectionLog to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddFinanceSystemConnectionLogFileAsync (int? financeSystemConnectionLogId, string fileName);

        /// <summary>
        /// Attach a file to a financeSystemConnectionLog
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing financeSystemConnectionLog.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="financeSystemConnectionLogId">Id of the financeSystemConnectionLog to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddFinanceSystemConnectionLogFileAsyncWithHttpInfo (int? financeSystemConnectionLogId, string fileName);
        /// <summary>
        /// Attach a file to a financeSystemConnectionLog by URL.
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing financeSystemConnectionLog by URL.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="financeSystemConnectionLogId">Id of the financeSystemConnectionLog to add an file to</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddFinanceSystemConnectionLogFileByURLAsync (RecordFile body, int? financeSystemConnectionLogId);

        /// <summary>
        /// Attach a file to a financeSystemConnectionLog by URL.
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing financeSystemConnectionLog by URL.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="financeSystemConnectionLogId">Id of the financeSystemConnectionLog to add an file to</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddFinanceSystemConnectionLogFileByURLAsyncWithHttpInfo (RecordFile body, int? financeSystemConnectionLogId);
        /// <summary>
        /// Add new tags for a financeSystemConnectionLog.
        /// </summary>
        /// <remarks>
        /// Adds a tag to an existing financeSystemConnectionLog.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="financeSystemConnectionLogId">Id of the financeSystemConnectionLog to add a tag to</param>
        /// <param name="financeSystemConnectionLogTag">The tag to add</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddFinanceSystemConnectionLogTagAsync (int? financeSystemConnectionLogId, string financeSystemConnectionLogTag);

        /// <summary>
        /// Add new tags for a financeSystemConnectionLog.
        /// </summary>
        /// <remarks>
        /// Adds a tag to an existing financeSystemConnectionLog.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="financeSystemConnectionLogId">Id of the financeSystemConnectionLog to add a tag to</param>
        /// <param name="financeSystemConnectionLogTag">The tag to add</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddFinanceSystemConnectionLogTagAsyncWithHttpInfo (int? financeSystemConnectionLogId, string financeSystemConnectionLogTag);
        /// <summary>
        /// Delete a file for a financeSystemConnectionLog.
        /// </summary>
        /// <remarks>
        /// Deletes an existing financeSystemConnectionLog file using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="financeSystemConnectionLogId">Id of the financeSystemConnectionLog to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteFinanceSystemConnectionLogFileAsync (int? financeSystemConnectionLogId, int? fileId);

        /// <summary>
        /// Delete a file for a financeSystemConnectionLog.
        /// </summary>
        /// <remarks>
        /// Deletes an existing financeSystemConnectionLog file using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="financeSystemConnectionLogId">Id of the financeSystemConnectionLog to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteFinanceSystemConnectionLogFileAsyncWithHttpInfo (int? financeSystemConnectionLogId, int? fileId);
        /// <summary>
        /// Delete a tag for a financeSystemConnectionLog.
        /// </summary>
        /// <remarks>
        /// Deletes an existing financeSystemConnectionLog tag using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="financeSystemConnectionLogId">Id of the financeSystemConnectionLog to remove tag from</param>
        /// <param name="financeSystemConnectionLogTag">The tag to delete</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteFinanceSystemConnectionLogTagAsync (int? financeSystemConnectionLogId, string financeSystemConnectionLogTag);

        /// <summary>
        /// Delete a tag for a financeSystemConnectionLog.
        /// </summary>
        /// <remarks>
        /// Deletes an existing financeSystemConnectionLog tag using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="financeSystemConnectionLogId">Id of the financeSystemConnectionLog to remove tag from</param>
        /// <param name="financeSystemConnectionLogTag">The tag to delete</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteFinanceSystemConnectionLogTagAsyncWithHttpInfo (int? financeSystemConnectionLogId, string financeSystemConnectionLogTag);
        /// <summary>
        /// Get a duplicated a financeSystemConnectionLog by id
        /// </summary>
        /// <remarks>
        /// Returns a duplicated financeSystemConnectionLog identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="financeSystemConnectionLogId">Id of the financeSystemConnectionLog to be duplicated.</param>
        /// <returns>Task of FinanceSystemConnectionLog</returns>
        System.Threading.Tasks.Task<FinanceSystemConnectionLog> GetDuplicateFinanceSystemConnectionLogByIdAsync (int? financeSystemConnectionLogId);

        /// <summary>
        /// Get a duplicated a financeSystemConnectionLog by id
        /// </summary>
        /// <remarks>
        /// Returns a duplicated financeSystemConnectionLog identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="financeSystemConnectionLogId">Id of the financeSystemConnectionLog to be duplicated.</param>
        /// <returns>Task of ApiResponse (FinanceSystemConnectionLog)</returns>
        System.Threading.Tasks.Task<ApiResponse<FinanceSystemConnectionLog>> GetDuplicateFinanceSystemConnectionLogByIdAsyncWithHttpInfo (int? financeSystemConnectionLogId);
        /// <summary>
        /// Search financeSystemConnectionLogs by filter
        /// </summary>
        /// <remarks>
        /// Returns the list of financeSystemConnectionLogs that match the given filter.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>Task of List&lt;FinanceSystemConnectionLog&gt;</returns>
        System.Threading.Tasks.Task<List<FinanceSystemConnectionLog>> GetFinanceSystemConnectionLogByFilterAsync (string filter = null, int? page = null, int? limit = null, string sort = null);

        /// <summary>
        /// Search financeSystemConnectionLogs by filter
        /// </summary>
        /// <remarks>
        /// Returns the list of financeSystemConnectionLogs that match the given filter.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;FinanceSystemConnectionLog&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<FinanceSystemConnectionLog>>> GetFinanceSystemConnectionLogByFilterAsyncWithHttpInfo (string filter = null, int? page = null, int? limit = null, string sort = null);
        /// <summary>
        /// Get a financeSystemConnectionLog by id
        /// </summary>
        /// <remarks>
        /// Returns the financeSystemConnectionLog identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="financeSystemConnectionLogId">Id of the financeSystemConnectionLog to be returned.</param>
        /// <returns>Task of FinanceSystemConnectionLog</returns>
        System.Threading.Tasks.Task<FinanceSystemConnectionLog> GetFinanceSystemConnectionLogByIdAsync (int? financeSystemConnectionLogId);

        /// <summary>
        /// Get a financeSystemConnectionLog by id
        /// </summary>
        /// <remarks>
        /// Returns the financeSystemConnectionLog identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="financeSystemConnectionLogId">Id of the financeSystemConnectionLog to be returned.</param>
        /// <returns>Task of ApiResponse (FinanceSystemConnectionLog)</returns>
        System.Threading.Tasks.Task<ApiResponse<FinanceSystemConnectionLog>> GetFinanceSystemConnectionLogByIdAsyncWithHttpInfo (int? financeSystemConnectionLogId);
        /// <summary>
        /// Get the files for a financeSystemConnectionLog.
        /// </summary>
        /// <remarks>
        /// Get all existing financeSystemConnectionLog files.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="financeSystemConnectionLogId">Id of the financeSystemConnectionLog to get files for</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetFinanceSystemConnectionLogFilesAsync (int? financeSystemConnectionLogId);

        /// <summary>
        /// Get the files for a financeSystemConnectionLog.
        /// </summary>
        /// <remarks>
        /// Get all existing financeSystemConnectionLog files.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="financeSystemConnectionLogId">Id of the financeSystemConnectionLog to get files for</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetFinanceSystemConnectionLogFilesAsyncWithHttpInfo (int? financeSystemConnectionLogId);
        /// <summary>
        /// Get the tags for a financeSystemConnectionLog.
        /// </summary>
        /// <remarks>
        /// Get all existing financeSystemConnectionLog tags.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="financeSystemConnectionLogId">Id of the financeSystemConnectionLog to get tags for</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetFinanceSystemConnectionLogTagsAsync (int? financeSystemConnectionLogId);

        /// <summary>
        /// Get the tags for a financeSystemConnectionLog.
        /// </summary>
        /// <remarks>
        /// Get all existing financeSystemConnectionLog tags.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="financeSystemConnectionLogId">Id of the financeSystemConnectionLog to get tags for</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetFinanceSystemConnectionLogTagsAsyncWithHttpInfo (int? financeSystemConnectionLogId);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class FinanceSystemConnectionLogApi : IFinanceSystemConnectionLogApi
    {
        private Infoplus.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="FinanceSystemConnectionLogApi"/> class.
        /// </summary>
        /// <returns></returns>
        public FinanceSystemConnectionLogApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = Infoplus.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FinanceSystemConnectionLogApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public FinanceSystemConnectionLogApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Infoplus.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Infoplus.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Add new audit for a financeSystemConnectionLog Adds an audit to an existing financeSystemConnectionLog.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="financeSystemConnectionLogId">Id of the financeSystemConnectionLog to add an audit to</param>
        /// <param name="financeSystemConnectionLogAudit">The audit to add</param>
        /// <returns></returns>
        public void AddFinanceSystemConnectionLogAudit (int? financeSystemConnectionLogId, string financeSystemConnectionLogAudit)
        {
             AddFinanceSystemConnectionLogAuditWithHttpInfo(financeSystemConnectionLogId, financeSystemConnectionLogAudit);
        }

        /// <summary>
        /// Add new audit for a financeSystemConnectionLog Adds an audit to an existing financeSystemConnectionLog.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="financeSystemConnectionLogId">Id of the financeSystemConnectionLog to add an audit to</param>
        /// <param name="financeSystemConnectionLogAudit">The audit to add</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AddFinanceSystemConnectionLogAuditWithHttpInfo (int? financeSystemConnectionLogId, string financeSystemConnectionLogAudit)
        {
            // verify the required parameter 'financeSystemConnectionLogId' is set
            if (financeSystemConnectionLogId == null)
                throw new ApiException(400, "Missing required parameter 'financeSystemConnectionLogId' when calling FinanceSystemConnectionLogApi->AddFinanceSystemConnectionLogAudit");
            // verify the required parameter 'financeSystemConnectionLogAudit' is set
            if (financeSystemConnectionLogAudit == null)
                throw new ApiException(400, "Missing required parameter 'financeSystemConnectionLogAudit' when calling FinanceSystemConnectionLogApi->AddFinanceSystemConnectionLogAudit");

            var localVarPath = "/beta/financeSystemConnectionLog/{financeSystemConnectionLogId}/audit/{financeSystemConnectionLogAudit}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (financeSystemConnectionLogId != null) localVarPathParams.Add("financeSystemConnectionLogId", Configuration.ApiClient.ParameterToString(financeSystemConnectionLogId)); // path parameter
            if (financeSystemConnectionLogAudit != null) localVarPathParams.Add("financeSystemConnectionLogAudit", Configuration.ApiClient.ParameterToString(financeSystemConnectionLogAudit)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddFinanceSystemConnectionLogAudit", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Add new audit for a financeSystemConnectionLog Adds an audit to an existing financeSystemConnectionLog.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="financeSystemConnectionLogId">Id of the financeSystemConnectionLog to add an audit to</param>
        /// <param name="financeSystemConnectionLogAudit">The audit to add</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddFinanceSystemConnectionLogAuditAsync (int? financeSystemConnectionLogId, string financeSystemConnectionLogAudit)
        {
             await AddFinanceSystemConnectionLogAuditAsyncWithHttpInfo(financeSystemConnectionLogId, financeSystemConnectionLogAudit);

        }

        /// <summary>
        /// Add new audit for a financeSystemConnectionLog Adds an audit to an existing financeSystemConnectionLog.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="financeSystemConnectionLogId">Id of the financeSystemConnectionLog to add an audit to</param>
        /// <param name="financeSystemConnectionLogAudit">The audit to add</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddFinanceSystemConnectionLogAuditAsyncWithHttpInfo (int? financeSystemConnectionLogId, string financeSystemConnectionLogAudit)
        {
            // verify the required parameter 'financeSystemConnectionLogId' is set
            if (financeSystemConnectionLogId == null)
                throw new ApiException(400, "Missing required parameter 'financeSystemConnectionLogId' when calling FinanceSystemConnectionLogApi->AddFinanceSystemConnectionLogAudit");
            // verify the required parameter 'financeSystemConnectionLogAudit' is set
            if (financeSystemConnectionLogAudit == null)
                throw new ApiException(400, "Missing required parameter 'financeSystemConnectionLogAudit' when calling FinanceSystemConnectionLogApi->AddFinanceSystemConnectionLogAudit");

            var localVarPath = "/beta/financeSystemConnectionLog/{financeSystemConnectionLogId}/audit/{financeSystemConnectionLogAudit}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (financeSystemConnectionLogId != null) localVarPathParams.Add("financeSystemConnectionLogId", Configuration.ApiClient.ParameterToString(financeSystemConnectionLogId)); // path parameter
            if (financeSystemConnectionLogAudit != null) localVarPathParams.Add("financeSystemConnectionLogAudit", Configuration.ApiClient.ParameterToString(financeSystemConnectionLogAudit)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddFinanceSystemConnectionLogAudit", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Attach a file to a financeSystemConnectionLog Adds a file to an existing financeSystemConnectionLog.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="financeSystemConnectionLogId">Id of the financeSystemConnectionLog to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns></returns>
        public void AddFinanceSystemConnectionLogFile (int? financeSystemConnectionLogId, string fileName)
        {
             AddFinanceSystemConnectionLogFileWithHttpInfo(financeSystemConnectionLogId, fileName);
        }

        /// <summary>
        /// Attach a file to a financeSystemConnectionLog Adds a file to an existing financeSystemConnectionLog.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="financeSystemConnectionLogId">Id of the financeSystemConnectionLog to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AddFinanceSystemConnectionLogFileWithHttpInfo (int? financeSystemConnectionLogId, string fileName)
        {
            // verify the required parameter 'financeSystemConnectionLogId' is set
            if (financeSystemConnectionLogId == null)
                throw new ApiException(400, "Missing required parameter 'financeSystemConnectionLogId' when calling FinanceSystemConnectionLogApi->AddFinanceSystemConnectionLogFile");
            // verify the required parameter 'fileName' is set
            if (fileName == null)
                throw new ApiException(400, "Missing required parameter 'fileName' when calling FinanceSystemConnectionLogApi->AddFinanceSystemConnectionLogFile");

            var localVarPath = "/beta/financeSystemConnectionLog/{financeSystemConnectionLogId}/file/{fileName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (financeSystemConnectionLogId != null) localVarPathParams.Add("financeSystemConnectionLogId", Configuration.ApiClient.ParameterToString(financeSystemConnectionLogId)); // path parameter
            if (fileName != null) localVarPathParams.Add("fileName", Configuration.ApiClient.ParameterToString(fileName)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddFinanceSystemConnectionLogFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Attach a file to a financeSystemConnectionLog Adds a file to an existing financeSystemConnectionLog.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="financeSystemConnectionLogId">Id of the financeSystemConnectionLog to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddFinanceSystemConnectionLogFileAsync (int? financeSystemConnectionLogId, string fileName)
        {
             await AddFinanceSystemConnectionLogFileAsyncWithHttpInfo(financeSystemConnectionLogId, fileName);

        }

        /// <summary>
        /// Attach a file to a financeSystemConnectionLog Adds a file to an existing financeSystemConnectionLog.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="financeSystemConnectionLogId">Id of the financeSystemConnectionLog to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddFinanceSystemConnectionLogFileAsyncWithHttpInfo (int? financeSystemConnectionLogId, string fileName)
        {
            // verify the required parameter 'financeSystemConnectionLogId' is set
            if (financeSystemConnectionLogId == null)
                throw new ApiException(400, "Missing required parameter 'financeSystemConnectionLogId' when calling FinanceSystemConnectionLogApi->AddFinanceSystemConnectionLogFile");
            // verify the required parameter 'fileName' is set
            if (fileName == null)
                throw new ApiException(400, "Missing required parameter 'fileName' when calling FinanceSystemConnectionLogApi->AddFinanceSystemConnectionLogFile");

            var localVarPath = "/beta/financeSystemConnectionLog/{financeSystemConnectionLogId}/file/{fileName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (financeSystemConnectionLogId != null) localVarPathParams.Add("financeSystemConnectionLogId", Configuration.ApiClient.ParameterToString(financeSystemConnectionLogId)); // path parameter
            if (fileName != null) localVarPathParams.Add("fileName", Configuration.ApiClient.ParameterToString(fileName)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddFinanceSystemConnectionLogFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Attach a file to a financeSystemConnectionLog by URL. Adds a file to an existing financeSystemConnectionLog by URL.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="financeSystemConnectionLogId">Id of the financeSystemConnectionLog to add an file to</param>
        /// <returns></returns>
        public void AddFinanceSystemConnectionLogFileByURL (RecordFile body, int? financeSystemConnectionLogId)
        {
             AddFinanceSystemConnectionLogFileByURLWithHttpInfo(body, financeSystemConnectionLogId);
        }

        /// <summary>
        /// Attach a file to a financeSystemConnectionLog by URL. Adds a file to an existing financeSystemConnectionLog by URL.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="financeSystemConnectionLogId">Id of the financeSystemConnectionLog to add an file to</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AddFinanceSystemConnectionLogFileByURLWithHttpInfo (RecordFile body, int? financeSystemConnectionLogId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling FinanceSystemConnectionLogApi->AddFinanceSystemConnectionLogFileByURL");
            // verify the required parameter 'financeSystemConnectionLogId' is set
            if (financeSystemConnectionLogId == null)
                throw new ApiException(400, "Missing required parameter 'financeSystemConnectionLogId' when calling FinanceSystemConnectionLogApi->AddFinanceSystemConnectionLogFileByURL");

            var localVarPath = "/beta/financeSystemConnectionLog/{financeSystemConnectionLogId}/file";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (financeSystemConnectionLogId != null) localVarPathParams.Add("financeSystemConnectionLogId", Configuration.ApiClient.ParameterToString(financeSystemConnectionLogId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddFinanceSystemConnectionLogFileByURL", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Attach a file to a financeSystemConnectionLog by URL. Adds a file to an existing financeSystemConnectionLog by URL.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="financeSystemConnectionLogId">Id of the financeSystemConnectionLog to add an file to</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddFinanceSystemConnectionLogFileByURLAsync (RecordFile body, int? financeSystemConnectionLogId)
        {
             await AddFinanceSystemConnectionLogFileByURLAsyncWithHttpInfo(body, financeSystemConnectionLogId);

        }

        /// <summary>
        /// Attach a file to a financeSystemConnectionLog by URL. Adds a file to an existing financeSystemConnectionLog by URL.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="financeSystemConnectionLogId">Id of the financeSystemConnectionLog to add an file to</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddFinanceSystemConnectionLogFileByURLAsyncWithHttpInfo (RecordFile body, int? financeSystemConnectionLogId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling FinanceSystemConnectionLogApi->AddFinanceSystemConnectionLogFileByURL");
            // verify the required parameter 'financeSystemConnectionLogId' is set
            if (financeSystemConnectionLogId == null)
                throw new ApiException(400, "Missing required parameter 'financeSystemConnectionLogId' when calling FinanceSystemConnectionLogApi->AddFinanceSystemConnectionLogFileByURL");

            var localVarPath = "/beta/financeSystemConnectionLog/{financeSystemConnectionLogId}/file";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (financeSystemConnectionLogId != null) localVarPathParams.Add("financeSystemConnectionLogId", Configuration.ApiClient.ParameterToString(financeSystemConnectionLogId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddFinanceSystemConnectionLogFileByURL", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Add new tags for a financeSystemConnectionLog. Adds a tag to an existing financeSystemConnectionLog.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="financeSystemConnectionLogId">Id of the financeSystemConnectionLog to add a tag to</param>
        /// <param name="financeSystemConnectionLogTag">The tag to add</param>
        /// <returns></returns>
        public void AddFinanceSystemConnectionLogTag (int? financeSystemConnectionLogId, string financeSystemConnectionLogTag)
        {
             AddFinanceSystemConnectionLogTagWithHttpInfo(financeSystemConnectionLogId, financeSystemConnectionLogTag);
        }

        /// <summary>
        /// Add new tags for a financeSystemConnectionLog. Adds a tag to an existing financeSystemConnectionLog.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="financeSystemConnectionLogId">Id of the financeSystemConnectionLog to add a tag to</param>
        /// <param name="financeSystemConnectionLogTag">The tag to add</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AddFinanceSystemConnectionLogTagWithHttpInfo (int? financeSystemConnectionLogId, string financeSystemConnectionLogTag)
        {
            // verify the required parameter 'financeSystemConnectionLogId' is set
            if (financeSystemConnectionLogId == null)
                throw new ApiException(400, "Missing required parameter 'financeSystemConnectionLogId' when calling FinanceSystemConnectionLogApi->AddFinanceSystemConnectionLogTag");
            // verify the required parameter 'financeSystemConnectionLogTag' is set
            if (financeSystemConnectionLogTag == null)
                throw new ApiException(400, "Missing required parameter 'financeSystemConnectionLogTag' when calling FinanceSystemConnectionLogApi->AddFinanceSystemConnectionLogTag");

            var localVarPath = "/beta/financeSystemConnectionLog/{financeSystemConnectionLogId}/tag/{financeSystemConnectionLogTag}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (financeSystemConnectionLogId != null) localVarPathParams.Add("financeSystemConnectionLogId", Configuration.ApiClient.ParameterToString(financeSystemConnectionLogId)); // path parameter
            if (financeSystemConnectionLogTag != null) localVarPathParams.Add("financeSystemConnectionLogTag", Configuration.ApiClient.ParameterToString(financeSystemConnectionLogTag)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddFinanceSystemConnectionLogTag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Add new tags for a financeSystemConnectionLog. Adds a tag to an existing financeSystemConnectionLog.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="financeSystemConnectionLogId">Id of the financeSystemConnectionLog to add a tag to</param>
        /// <param name="financeSystemConnectionLogTag">The tag to add</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddFinanceSystemConnectionLogTagAsync (int? financeSystemConnectionLogId, string financeSystemConnectionLogTag)
        {
             await AddFinanceSystemConnectionLogTagAsyncWithHttpInfo(financeSystemConnectionLogId, financeSystemConnectionLogTag);

        }

        /// <summary>
        /// Add new tags for a financeSystemConnectionLog. Adds a tag to an existing financeSystemConnectionLog.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="financeSystemConnectionLogId">Id of the financeSystemConnectionLog to add a tag to</param>
        /// <param name="financeSystemConnectionLogTag">The tag to add</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddFinanceSystemConnectionLogTagAsyncWithHttpInfo (int? financeSystemConnectionLogId, string financeSystemConnectionLogTag)
        {
            // verify the required parameter 'financeSystemConnectionLogId' is set
            if (financeSystemConnectionLogId == null)
                throw new ApiException(400, "Missing required parameter 'financeSystemConnectionLogId' when calling FinanceSystemConnectionLogApi->AddFinanceSystemConnectionLogTag");
            // verify the required parameter 'financeSystemConnectionLogTag' is set
            if (financeSystemConnectionLogTag == null)
                throw new ApiException(400, "Missing required parameter 'financeSystemConnectionLogTag' when calling FinanceSystemConnectionLogApi->AddFinanceSystemConnectionLogTag");

            var localVarPath = "/beta/financeSystemConnectionLog/{financeSystemConnectionLogId}/tag/{financeSystemConnectionLogTag}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (financeSystemConnectionLogId != null) localVarPathParams.Add("financeSystemConnectionLogId", Configuration.ApiClient.ParameterToString(financeSystemConnectionLogId)); // path parameter
            if (financeSystemConnectionLogTag != null) localVarPathParams.Add("financeSystemConnectionLogTag", Configuration.ApiClient.ParameterToString(financeSystemConnectionLogTag)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddFinanceSystemConnectionLogTag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a file for a financeSystemConnectionLog. Deletes an existing financeSystemConnectionLog file using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="financeSystemConnectionLogId">Id of the financeSystemConnectionLog to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns></returns>
        public void DeleteFinanceSystemConnectionLogFile (int? financeSystemConnectionLogId, int? fileId)
        {
             DeleteFinanceSystemConnectionLogFileWithHttpInfo(financeSystemConnectionLogId, fileId);
        }

        /// <summary>
        /// Delete a file for a financeSystemConnectionLog. Deletes an existing financeSystemConnectionLog file using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="financeSystemConnectionLogId">Id of the financeSystemConnectionLog to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteFinanceSystemConnectionLogFileWithHttpInfo (int? financeSystemConnectionLogId, int? fileId)
        {
            // verify the required parameter 'financeSystemConnectionLogId' is set
            if (financeSystemConnectionLogId == null)
                throw new ApiException(400, "Missing required parameter 'financeSystemConnectionLogId' when calling FinanceSystemConnectionLogApi->DeleteFinanceSystemConnectionLogFile");
            // verify the required parameter 'fileId' is set
            if (fileId == null)
                throw new ApiException(400, "Missing required parameter 'fileId' when calling FinanceSystemConnectionLogApi->DeleteFinanceSystemConnectionLogFile");

            var localVarPath = "/beta/financeSystemConnectionLog/{financeSystemConnectionLogId}/file/{fileId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (financeSystemConnectionLogId != null) localVarPathParams.Add("financeSystemConnectionLogId", Configuration.ApiClient.ParameterToString(financeSystemConnectionLogId)); // path parameter
            if (fileId != null) localVarPathParams.Add("fileId", Configuration.ApiClient.ParameterToString(fileId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteFinanceSystemConnectionLogFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a file for a financeSystemConnectionLog. Deletes an existing financeSystemConnectionLog file using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="financeSystemConnectionLogId">Id of the financeSystemConnectionLog to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteFinanceSystemConnectionLogFileAsync (int? financeSystemConnectionLogId, int? fileId)
        {
             await DeleteFinanceSystemConnectionLogFileAsyncWithHttpInfo(financeSystemConnectionLogId, fileId);

        }

        /// <summary>
        /// Delete a file for a financeSystemConnectionLog. Deletes an existing financeSystemConnectionLog file using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="financeSystemConnectionLogId">Id of the financeSystemConnectionLog to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteFinanceSystemConnectionLogFileAsyncWithHttpInfo (int? financeSystemConnectionLogId, int? fileId)
        {
            // verify the required parameter 'financeSystemConnectionLogId' is set
            if (financeSystemConnectionLogId == null)
                throw new ApiException(400, "Missing required parameter 'financeSystemConnectionLogId' when calling FinanceSystemConnectionLogApi->DeleteFinanceSystemConnectionLogFile");
            // verify the required parameter 'fileId' is set
            if (fileId == null)
                throw new ApiException(400, "Missing required parameter 'fileId' when calling FinanceSystemConnectionLogApi->DeleteFinanceSystemConnectionLogFile");

            var localVarPath = "/beta/financeSystemConnectionLog/{financeSystemConnectionLogId}/file/{fileId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (financeSystemConnectionLogId != null) localVarPathParams.Add("financeSystemConnectionLogId", Configuration.ApiClient.ParameterToString(financeSystemConnectionLogId)); // path parameter
            if (fileId != null) localVarPathParams.Add("fileId", Configuration.ApiClient.ParameterToString(fileId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteFinanceSystemConnectionLogFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a tag for a financeSystemConnectionLog. Deletes an existing financeSystemConnectionLog tag using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="financeSystemConnectionLogId">Id of the financeSystemConnectionLog to remove tag from</param>
        /// <param name="financeSystemConnectionLogTag">The tag to delete</param>
        /// <returns></returns>
        public void DeleteFinanceSystemConnectionLogTag (int? financeSystemConnectionLogId, string financeSystemConnectionLogTag)
        {
             DeleteFinanceSystemConnectionLogTagWithHttpInfo(financeSystemConnectionLogId, financeSystemConnectionLogTag);
        }

        /// <summary>
        /// Delete a tag for a financeSystemConnectionLog. Deletes an existing financeSystemConnectionLog tag using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="financeSystemConnectionLogId">Id of the financeSystemConnectionLog to remove tag from</param>
        /// <param name="financeSystemConnectionLogTag">The tag to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteFinanceSystemConnectionLogTagWithHttpInfo (int? financeSystemConnectionLogId, string financeSystemConnectionLogTag)
        {
            // verify the required parameter 'financeSystemConnectionLogId' is set
            if (financeSystemConnectionLogId == null)
                throw new ApiException(400, "Missing required parameter 'financeSystemConnectionLogId' when calling FinanceSystemConnectionLogApi->DeleteFinanceSystemConnectionLogTag");
            // verify the required parameter 'financeSystemConnectionLogTag' is set
            if (financeSystemConnectionLogTag == null)
                throw new ApiException(400, "Missing required parameter 'financeSystemConnectionLogTag' when calling FinanceSystemConnectionLogApi->DeleteFinanceSystemConnectionLogTag");

            var localVarPath = "/beta/financeSystemConnectionLog/{financeSystemConnectionLogId}/tag/{financeSystemConnectionLogTag}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (financeSystemConnectionLogId != null) localVarPathParams.Add("financeSystemConnectionLogId", Configuration.ApiClient.ParameterToString(financeSystemConnectionLogId)); // path parameter
            if (financeSystemConnectionLogTag != null) localVarPathParams.Add("financeSystemConnectionLogTag", Configuration.ApiClient.ParameterToString(financeSystemConnectionLogTag)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteFinanceSystemConnectionLogTag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a tag for a financeSystemConnectionLog. Deletes an existing financeSystemConnectionLog tag using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="financeSystemConnectionLogId">Id of the financeSystemConnectionLog to remove tag from</param>
        /// <param name="financeSystemConnectionLogTag">The tag to delete</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteFinanceSystemConnectionLogTagAsync (int? financeSystemConnectionLogId, string financeSystemConnectionLogTag)
        {
             await DeleteFinanceSystemConnectionLogTagAsyncWithHttpInfo(financeSystemConnectionLogId, financeSystemConnectionLogTag);

        }

        /// <summary>
        /// Delete a tag for a financeSystemConnectionLog. Deletes an existing financeSystemConnectionLog tag using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="financeSystemConnectionLogId">Id of the financeSystemConnectionLog to remove tag from</param>
        /// <param name="financeSystemConnectionLogTag">The tag to delete</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteFinanceSystemConnectionLogTagAsyncWithHttpInfo (int? financeSystemConnectionLogId, string financeSystemConnectionLogTag)
        {
            // verify the required parameter 'financeSystemConnectionLogId' is set
            if (financeSystemConnectionLogId == null)
                throw new ApiException(400, "Missing required parameter 'financeSystemConnectionLogId' when calling FinanceSystemConnectionLogApi->DeleteFinanceSystemConnectionLogTag");
            // verify the required parameter 'financeSystemConnectionLogTag' is set
            if (financeSystemConnectionLogTag == null)
                throw new ApiException(400, "Missing required parameter 'financeSystemConnectionLogTag' when calling FinanceSystemConnectionLogApi->DeleteFinanceSystemConnectionLogTag");

            var localVarPath = "/beta/financeSystemConnectionLog/{financeSystemConnectionLogId}/tag/{financeSystemConnectionLogTag}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (financeSystemConnectionLogId != null) localVarPathParams.Add("financeSystemConnectionLogId", Configuration.ApiClient.ParameterToString(financeSystemConnectionLogId)); // path parameter
            if (financeSystemConnectionLogTag != null) localVarPathParams.Add("financeSystemConnectionLogTag", Configuration.ApiClient.ParameterToString(financeSystemConnectionLogTag)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteFinanceSystemConnectionLogTag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get a duplicated a financeSystemConnectionLog by id Returns a duplicated financeSystemConnectionLog identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="financeSystemConnectionLogId">Id of the financeSystemConnectionLog to be duplicated.</param>
        /// <returns>FinanceSystemConnectionLog</returns>
        public FinanceSystemConnectionLog GetDuplicateFinanceSystemConnectionLogById (int? financeSystemConnectionLogId)
        {
             ApiResponse<FinanceSystemConnectionLog> localVarResponse = GetDuplicateFinanceSystemConnectionLogByIdWithHttpInfo(financeSystemConnectionLogId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a duplicated a financeSystemConnectionLog by id Returns a duplicated financeSystemConnectionLog identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="financeSystemConnectionLogId">Id of the financeSystemConnectionLog to be duplicated.</param>
        /// <returns>ApiResponse of FinanceSystemConnectionLog</returns>
        public ApiResponse< FinanceSystemConnectionLog > GetDuplicateFinanceSystemConnectionLogByIdWithHttpInfo (int? financeSystemConnectionLogId)
        {
            // verify the required parameter 'financeSystemConnectionLogId' is set
            if (financeSystemConnectionLogId == null)
                throw new ApiException(400, "Missing required parameter 'financeSystemConnectionLogId' when calling FinanceSystemConnectionLogApi->GetDuplicateFinanceSystemConnectionLogById");

            var localVarPath = "/beta/financeSystemConnectionLog/duplicate/{financeSystemConnectionLogId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (financeSystemConnectionLogId != null) localVarPathParams.Add("financeSystemConnectionLogId", Configuration.ApiClient.ParameterToString(financeSystemConnectionLogId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDuplicateFinanceSystemConnectionLogById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FinanceSystemConnectionLog>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FinanceSystemConnectionLog) Configuration.ApiClient.Deserialize(localVarResponse, typeof(FinanceSystemConnectionLog)));
        }

        /// <summary>
        /// Get a duplicated a financeSystemConnectionLog by id Returns a duplicated financeSystemConnectionLog identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="financeSystemConnectionLogId">Id of the financeSystemConnectionLog to be duplicated.</param>
        /// <returns>Task of FinanceSystemConnectionLog</returns>
        public async System.Threading.Tasks.Task<FinanceSystemConnectionLog> GetDuplicateFinanceSystemConnectionLogByIdAsync (int? financeSystemConnectionLogId)
        {
             ApiResponse<FinanceSystemConnectionLog> localVarResponse = await GetDuplicateFinanceSystemConnectionLogByIdAsyncWithHttpInfo(financeSystemConnectionLogId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a duplicated a financeSystemConnectionLog by id Returns a duplicated financeSystemConnectionLog identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="financeSystemConnectionLogId">Id of the financeSystemConnectionLog to be duplicated.</param>
        /// <returns>Task of ApiResponse (FinanceSystemConnectionLog)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FinanceSystemConnectionLog>> GetDuplicateFinanceSystemConnectionLogByIdAsyncWithHttpInfo (int? financeSystemConnectionLogId)
        {
            // verify the required parameter 'financeSystemConnectionLogId' is set
            if (financeSystemConnectionLogId == null)
                throw new ApiException(400, "Missing required parameter 'financeSystemConnectionLogId' when calling FinanceSystemConnectionLogApi->GetDuplicateFinanceSystemConnectionLogById");

            var localVarPath = "/beta/financeSystemConnectionLog/duplicate/{financeSystemConnectionLogId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (financeSystemConnectionLogId != null) localVarPathParams.Add("financeSystemConnectionLogId", Configuration.ApiClient.ParameterToString(financeSystemConnectionLogId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDuplicateFinanceSystemConnectionLogById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FinanceSystemConnectionLog>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FinanceSystemConnectionLog) Configuration.ApiClient.Deserialize(localVarResponse, typeof(FinanceSystemConnectionLog)));
        }

        /// <summary>
        /// Search financeSystemConnectionLogs by filter Returns the list of financeSystemConnectionLogs that match the given filter.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>List&lt;FinanceSystemConnectionLog&gt;</returns>
        public List<FinanceSystemConnectionLog> GetFinanceSystemConnectionLogByFilter (string filter = null, int? page = null, int? limit = null, string sort = null)
        {
             ApiResponse<List<FinanceSystemConnectionLog>> localVarResponse = GetFinanceSystemConnectionLogByFilterWithHttpInfo(filter, page, limit, sort);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Search financeSystemConnectionLogs by filter Returns the list of financeSystemConnectionLogs that match the given filter.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>ApiResponse of List&lt;FinanceSystemConnectionLog&gt;</returns>
        public ApiResponse< List<FinanceSystemConnectionLog> > GetFinanceSystemConnectionLogByFilterWithHttpInfo (string filter = null, int? page = null, int? limit = null, string sort = null)
        {

            var localVarPath = "/beta/financeSystemConnectionLog/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (filter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (page != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFinanceSystemConnectionLogByFilter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<FinanceSystemConnectionLog>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<FinanceSystemConnectionLog>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<FinanceSystemConnectionLog>)));
        }

        /// <summary>
        /// Search financeSystemConnectionLogs by filter Returns the list of financeSystemConnectionLogs that match the given filter.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>Task of List&lt;FinanceSystemConnectionLog&gt;</returns>
        public async System.Threading.Tasks.Task<List<FinanceSystemConnectionLog>> GetFinanceSystemConnectionLogByFilterAsync (string filter = null, int? page = null, int? limit = null, string sort = null)
        {
             ApiResponse<List<FinanceSystemConnectionLog>> localVarResponse = await GetFinanceSystemConnectionLogByFilterAsyncWithHttpInfo(filter, page, limit, sort);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Search financeSystemConnectionLogs by filter Returns the list of financeSystemConnectionLogs that match the given filter.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;FinanceSystemConnectionLog&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<FinanceSystemConnectionLog>>> GetFinanceSystemConnectionLogByFilterAsyncWithHttpInfo (string filter = null, int? page = null, int? limit = null, string sort = null)
        {

            var localVarPath = "/beta/financeSystemConnectionLog/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (filter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (page != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFinanceSystemConnectionLogByFilter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<FinanceSystemConnectionLog>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<FinanceSystemConnectionLog>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<FinanceSystemConnectionLog>)));
        }

        /// <summary>
        /// Get a financeSystemConnectionLog by id Returns the financeSystemConnectionLog identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="financeSystemConnectionLogId">Id of the financeSystemConnectionLog to be returned.</param>
        /// <returns>FinanceSystemConnectionLog</returns>
        public FinanceSystemConnectionLog GetFinanceSystemConnectionLogById (int? financeSystemConnectionLogId)
        {
             ApiResponse<FinanceSystemConnectionLog> localVarResponse = GetFinanceSystemConnectionLogByIdWithHttpInfo(financeSystemConnectionLogId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a financeSystemConnectionLog by id Returns the financeSystemConnectionLog identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="financeSystemConnectionLogId">Id of the financeSystemConnectionLog to be returned.</param>
        /// <returns>ApiResponse of FinanceSystemConnectionLog</returns>
        public ApiResponse< FinanceSystemConnectionLog > GetFinanceSystemConnectionLogByIdWithHttpInfo (int? financeSystemConnectionLogId)
        {
            // verify the required parameter 'financeSystemConnectionLogId' is set
            if (financeSystemConnectionLogId == null)
                throw new ApiException(400, "Missing required parameter 'financeSystemConnectionLogId' when calling FinanceSystemConnectionLogApi->GetFinanceSystemConnectionLogById");

            var localVarPath = "/beta/financeSystemConnectionLog/{financeSystemConnectionLogId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (financeSystemConnectionLogId != null) localVarPathParams.Add("financeSystemConnectionLogId", Configuration.ApiClient.ParameterToString(financeSystemConnectionLogId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFinanceSystemConnectionLogById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FinanceSystemConnectionLog>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FinanceSystemConnectionLog) Configuration.ApiClient.Deserialize(localVarResponse, typeof(FinanceSystemConnectionLog)));
        }

        /// <summary>
        /// Get a financeSystemConnectionLog by id Returns the financeSystemConnectionLog identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="financeSystemConnectionLogId">Id of the financeSystemConnectionLog to be returned.</param>
        /// <returns>Task of FinanceSystemConnectionLog</returns>
        public async System.Threading.Tasks.Task<FinanceSystemConnectionLog> GetFinanceSystemConnectionLogByIdAsync (int? financeSystemConnectionLogId)
        {
             ApiResponse<FinanceSystemConnectionLog> localVarResponse = await GetFinanceSystemConnectionLogByIdAsyncWithHttpInfo(financeSystemConnectionLogId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a financeSystemConnectionLog by id Returns the financeSystemConnectionLog identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="financeSystemConnectionLogId">Id of the financeSystemConnectionLog to be returned.</param>
        /// <returns>Task of ApiResponse (FinanceSystemConnectionLog)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FinanceSystemConnectionLog>> GetFinanceSystemConnectionLogByIdAsyncWithHttpInfo (int? financeSystemConnectionLogId)
        {
            // verify the required parameter 'financeSystemConnectionLogId' is set
            if (financeSystemConnectionLogId == null)
                throw new ApiException(400, "Missing required parameter 'financeSystemConnectionLogId' when calling FinanceSystemConnectionLogApi->GetFinanceSystemConnectionLogById");

            var localVarPath = "/beta/financeSystemConnectionLog/{financeSystemConnectionLogId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (financeSystemConnectionLogId != null) localVarPathParams.Add("financeSystemConnectionLogId", Configuration.ApiClient.ParameterToString(financeSystemConnectionLogId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFinanceSystemConnectionLogById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FinanceSystemConnectionLog>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FinanceSystemConnectionLog) Configuration.ApiClient.Deserialize(localVarResponse, typeof(FinanceSystemConnectionLog)));
        }

        /// <summary>
        /// Get the files for a financeSystemConnectionLog. Get all existing financeSystemConnectionLog files.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="financeSystemConnectionLogId">Id of the financeSystemConnectionLog to get files for</param>
        /// <returns></returns>
        public void GetFinanceSystemConnectionLogFiles (int? financeSystemConnectionLogId)
        {
             GetFinanceSystemConnectionLogFilesWithHttpInfo(financeSystemConnectionLogId);
        }

        /// <summary>
        /// Get the files for a financeSystemConnectionLog. Get all existing financeSystemConnectionLog files.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="financeSystemConnectionLogId">Id of the financeSystemConnectionLog to get files for</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GetFinanceSystemConnectionLogFilesWithHttpInfo (int? financeSystemConnectionLogId)
        {
            // verify the required parameter 'financeSystemConnectionLogId' is set
            if (financeSystemConnectionLogId == null)
                throw new ApiException(400, "Missing required parameter 'financeSystemConnectionLogId' when calling FinanceSystemConnectionLogApi->GetFinanceSystemConnectionLogFiles");

            var localVarPath = "/beta/financeSystemConnectionLog/{financeSystemConnectionLogId}/file";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (financeSystemConnectionLogId != null) localVarPathParams.Add("financeSystemConnectionLogId", Configuration.ApiClient.ParameterToString(financeSystemConnectionLogId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFinanceSystemConnectionLogFiles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get the files for a financeSystemConnectionLog. Get all existing financeSystemConnectionLog files.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="financeSystemConnectionLogId">Id of the financeSystemConnectionLog to get files for</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetFinanceSystemConnectionLogFilesAsync (int? financeSystemConnectionLogId)
        {
             await GetFinanceSystemConnectionLogFilesAsyncWithHttpInfo(financeSystemConnectionLogId);

        }

        /// <summary>
        /// Get the files for a financeSystemConnectionLog. Get all existing financeSystemConnectionLog files.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="financeSystemConnectionLogId">Id of the financeSystemConnectionLog to get files for</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetFinanceSystemConnectionLogFilesAsyncWithHttpInfo (int? financeSystemConnectionLogId)
        {
            // verify the required parameter 'financeSystemConnectionLogId' is set
            if (financeSystemConnectionLogId == null)
                throw new ApiException(400, "Missing required parameter 'financeSystemConnectionLogId' when calling FinanceSystemConnectionLogApi->GetFinanceSystemConnectionLogFiles");

            var localVarPath = "/beta/financeSystemConnectionLog/{financeSystemConnectionLogId}/file";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (financeSystemConnectionLogId != null) localVarPathParams.Add("financeSystemConnectionLogId", Configuration.ApiClient.ParameterToString(financeSystemConnectionLogId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFinanceSystemConnectionLogFiles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get the tags for a financeSystemConnectionLog. Get all existing financeSystemConnectionLog tags.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="financeSystemConnectionLogId">Id of the financeSystemConnectionLog to get tags for</param>
        /// <returns></returns>
        public void GetFinanceSystemConnectionLogTags (int? financeSystemConnectionLogId)
        {
             GetFinanceSystemConnectionLogTagsWithHttpInfo(financeSystemConnectionLogId);
        }

        /// <summary>
        /// Get the tags for a financeSystemConnectionLog. Get all existing financeSystemConnectionLog tags.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="financeSystemConnectionLogId">Id of the financeSystemConnectionLog to get tags for</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GetFinanceSystemConnectionLogTagsWithHttpInfo (int? financeSystemConnectionLogId)
        {
            // verify the required parameter 'financeSystemConnectionLogId' is set
            if (financeSystemConnectionLogId == null)
                throw new ApiException(400, "Missing required parameter 'financeSystemConnectionLogId' when calling FinanceSystemConnectionLogApi->GetFinanceSystemConnectionLogTags");

            var localVarPath = "/beta/financeSystemConnectionLog/{financeSystemConnectionLogId}/tag";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (financeSystemConnectionLogId != null) localVarPathParams.Add("financeSystemConnectionLogId", Configuration.ApiClient.ParameterToString(financeSystemConnectionLogId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFinanceSystemConnectionLogTags", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get the tags for a financeSystemConnectionLog. Get all existing financeSystemConnectionLog tags.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="financeSystemConnectionLogId">Id of the financeSystemConnectionLog to get tags for</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetFinanceSystemConnectionLogTagsAsync (int? financeSystemConnectionLogId)
        {
             await GetFinanceSystemConnectionLogTagsAsyncWithHttpInfo(financeSystemConnectionLogId);

        }

        /// <summary>
        /// Get the tags for a financeSystemConnectionLog. Get all existing financeSystemConnectionLog tags.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="financeSystemConnectionLogId">Id of the financeSystemConnectionLog to get tags for</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetFinanceSystemConnectionLogTagsAsyncWithHttpInfo (int? financeSystemConnectionLogId)
        {
            // verify the required parameter 'financeSystemConnectionLogId' is set
            if (financeSystemConnectionLogId == null)
                throw new ApiException(400, "Missing required parameter 'financeSystemConnectionLogId' when calling FinanceSystemConnectionLogApi->GetFinanceSystemConnectionLogTags");

            var localVarPath = "/beta/financeSystemConnectionLog/{financeSystemConnectionLogId}/tag";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (financeSystemConnectionLogId != null) localVarPathParams.Add("financeSystemConnectionLogId", Configuration.ApiClient.ParameterToString(financeSystemConnectionLogId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFinanceSystemConnectionLogTags", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

    }
}
