/* 
 * Infoplus API
 *
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Infoplus.Client;
using Infoplus.Model;

namespace Infoplus.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFulfillmentLayoutPositionApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Add new audit for a fulfillmentLayoutPosition
        /// </summary>
        /// <remarks>
        /// Adds an audit to an existing fulfillmentLayoutPosition.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fulfillmentLayoutPositionId">Id of the fulfillmentLayoutPosition to add an audit to</param>
        /// <param name="fulfillmentLayoutPositionAudit">The audit to add</param>
        /// <returns></returns>
        void AddFulfillmentLayoutPositionAudit (int? fulfillmentLayoutPositionId, string fulfillmentLayoutPositionAudit);

        /// <summary>
        /// Add new audit for a fulfillmentLayoutPosition
        /// </summary>
        /// <remarks>
        /// Adds an audit to an existing fulfillmentLayoutPosition.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fulfillmentLayoutPositionId">Id of the fulfillmentLayoutPosition to add an audit to</param>
        /// <param name="fulfillmentLayoutPositionAudit">The audit to add</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddFulfillmentLayoutPositionAuditWithHttpInfo (int? fulfillmentLayoutPositionId, string fulfillmentLayoutPositionAudit);
        /// <summary>
        /// Attach a file to a fulfillmentLayoutPosition
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing fulfillmentLayoutPosition.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fulfillmentLayoutPositionId">Id of the fulfillmentLayoutPosition to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns></returns>
        void AddFulfillmentLayoutPositionFile (int? fulfillmentLayoutPositionId, string fileName);

        /// <summary>
        /// Attach a file to a fulfillmentLayoutPosition
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing fulfillmentLayoutPosition.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fulfillmentLayoutPositionId">Id of the fulfillmentLayoutPosition to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddFulfillmentLayoutPositionFileWithHttpInfo (int? fulfillmentLayoutPositionId, string fileName);
        /// <summary>
        /// Attach a file to a fulfillmentLayoutPosition by URL.
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing fulfillmentLayoutPosition by URL.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="fulfillmentLayoutPositionId">Id of the fulfillmentLayoutPosition to add an file to</param>
        /// <returns></returns>
        void AddFulfillmentLayoutPositionFileByURL (RecordFile body, int? fulfillmentLayoutPositionId);

        /// <summary>
        /// Attach a file to a fulfillmentLayoutPosition by URL.
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing fulfillmentLayoutPosition by URL.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="fulfillmentLayoutPositionId">Id of the fulfillmentLayoutPosition to add an file to</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddFulfillmentLayoutPositionFileByURLWithHttpInfo (RecordFile body, int? fulfillmentLayoutPositionId);
        /// <summary>
        /// Add new tags for a fulfillmentLayoutPosition.
        /// </summary>
        /// <remarks>
        /// Adds a tag to an existing fulfillmentLayoutPosition.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fulfillmentLayoutPositionId">Id of the fulfillmentLayoutPosition to add a tag to</param>
        /// <param name="fulfillmentLayoutPositionTag">The tag to add</param>
        /// <returns></returns>
        void AddFulfillmentLayoutPositionTag (int? fulfillmentLayoutPositionId, string fulfillmentLayoutPositionTag);

        /// <summary>
        /// Add new tags for a fulfillmentLayoutPosition.
        /// </summary>
        /// <remarks>
        /// Adds a tag to an existing fulfillmentLayoutPosition.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fulfillmentLayoutPositionId">Id of the fulfillmentLayoutPosition to add a tag to</param>
        /// <param name="fulfillmentLayoutPositionTag">The tag to add</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddFulfillmentLayoutPositionTagWithHttpInfo (int? fulfillmentLayoutPositionId, string fulfillmentLayoutPositionTag);
        /// <summary>
        /// Delete a file for a fulfillmentLayoutPosition.
        /// </summary>
        /// <remarks>
        /// Deletes an existing fulfillmentLayoutPosition file using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fulfillmentLayoutPositionId">Id of the fulfillmentLayoutPosition to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns></returns>
        void DeleteFulfillmentLayoutPositionFile (int? fulfillmentLayoutPositionId, int? fileId);

        /// <summary>
        /// Delete a file for a fulfillmentLayoutPosition.
        /// </summary>
        /// <remarks>
        /// Deletes an existing fulfillmentLayoutPosition file using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fulfillmentLayoutPositionId">Id of the fulfillmentLayoutPosition to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteFulfillmentLayoutPositionFileWithHttpInfo (int? fulfillmentLayoutPositionId, int? fileId);
        /// <summary>
        /// Delete a tag for a fulfillmentLayoutPosition.
        /// </summary>
        /// <remarks>
        /// Deletes an existing fulfillmentLayoutPosition tag using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fulfillmentLayoutPositionId">Id of the fulfillmentLayoutPosition to remove tag from</param>
        /// <param name="fulfillmentLayoutPositionTag">The tag to delete</param>
        /// <returns></returns>
        void DeleteFulfillmentLayoutPositionTag (int? fulfillmentLayoutPositionId, string fulfillmentLayoutPositionTag);

        /// <summary>
        /// Delete a tag for a fulfillmentLayoutPosition.
        /// </summary>
        /// <remarks>
        /// Deletes an existing fulfillmentLayoutPosition tag using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fulfillmentLayoutPositionId">Id of the fulfillmentLayoutPosition to remove tag from</param>
        /// <param name="fulfillmentLayoutPositionTag">The tag to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteFulfillmentLayoutPositionTagWithHttpInfo (int? fulfillmentLayoutPositionId, string fulfillmentLayoutPositionTag);
        /// <summary>
        /// Get a duplicated a fulfillmentLayoutPosition by id
        /// </summary>
        /// <remarks>
        /// Returns a duplicated fulfillmentLayoutPosition identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fulfillmentLayoutPositionId">Id of the fulfillmentLayoutPosition to be duplicated.</param>
        /// <returns>FulfillmentLayoutPosition</returns>
        FulfillmentLayoutPosition GetDuplicateFulfillmentLayoutPositionById (int? fulfillmentLayoutPositionId);

        /// <summary>
        /// Get a duplicated a fulfillmentLayoutPosition by id
        /// </summary>
        /// <remarks>
        /// Returns a duplicated fulfillmentLayoutPosition identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fulfillmentLayoutPositionId">Id of the fulfillmentLayoutPosition to be duplicated.</param>
        /// <returns>ApiResponse of FulfillmentLayoutPosition</returns>
        ApiResponse<FulfillmentLayoutPosition> GetDuplicateFulfillmentLayoutPositionByIdWithHttpInfo (int? fulfillmentLayoutPositionId);
        /// <summary>
        /// Search fulfillmentLayoutPositions by filter
        /// </summary>
        /// <remarks>
        /// Returns the list of fulfillmentLayoutPositions that match the given filter.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>List&lt;FulfillmentLayoutPosition&gt;</returns>
        List<FulfillmentLayoutPosition> GetFulfillmentLayoutPositionByFilter (string filter = null, int? page = null, int? limit = null, string sort = null);

        /// <summary>
        /// Search fulfillmentLayoutPositions by filter
        /// </summary>
        /// <remarks>
        /// Returns the list of fulfillmentLayoutPositions that match the given filter.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>ApiResponse of List&lt;FulfillmentLayoutPosition&gt;</returns>
        ApiResponse<List<FulfillmentLayoutPosition>> GetFulfillmentLayoutPositionByFilterWithHttpInfo (string filter = null, int? page = null, int? limit = null, string sort = null);
        /// <summary>
        /// Get a fulfillmentLayoutPosition by id
        /// </summary>
        /// <remarks>
        /// Returns the fulfillmentLayoutPosition identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fulfillmentLayoutPositionId">Id of the fulfillmentLayoutPosition to be returned.</param>
        /// <returns>FulfillmentLayoutPosition</returns>
        FulfillmentLayoutPosition GetFulfillmentLayoutPositionById (int? fulfillmentLayoutPositionId);

        /// <summary>
        /// Get a fulfillmentLayoutPosition by id
        /// </summary>
        /// <remarks>
        /// Returns the fulfillmentLayoutPosition identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fulfillmentLayoutPositionId">Id of the fulfillmentLayoutPosition to be returned.</param>
        /// <returns>ApiResponse of FulfillmentLayoutPosition</returns>
        ApiResponse<FulfillmentLayoutPosition> GetFulfillmentLayoutPositionByIdWithHttpInfo (int? fulfillmentLayoutPositionId);
        /// <summary>
        /// Get the files for a fulfillmentLayoutPosition.
        /// </summary>
        /// <remarks>
        /// Get all existing fulfillmentLayoutPosition files.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fulfillmentLayoutPositionId">Id of the fulfillmentLayoutPosition to get files for</param>
        /// <returns></returns>
        void GetFulfillmentLayoutPositionFiles (int? fulfillmentLayoutPositionId);

        /// <summary>
        /// Get the files for a fulfillmentLayoutPosition.
        /// </summary>
        /// <remarks>
        /// Get all existing fulfillmentLayoutPosition files.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fulfillmentLayoutPositionId">Id of the fulfillmentLayoutPosition to get files for</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetFulfillmentLayoutPositionFilesWithHttpInfo (int? fulfillmentLayoutPositionId);
        /// <summary>
        /// Get the tags for a fulfillmentLayoutPosition.
        /// </summary>
        /// <remarks>
        /// Get all existing fulfillmentLayoutPosition tags.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fulfillmentLayoutPositionId">Id of the fulfillmentLayoutPosition to get tags for</param>
        /// <returns></returns>
        void GetFulfillmentLayoutPositionTags (int? fulfillmentLayoutPositionId);

        /// <summary>
        /// Get the tags for a fulfillmentLayoutPosition.
        /// </summary>
        /// <remarks>
        /// Get all existing fulfillmentLayoutPosition tags.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fulfillmentLayoutPositionId">Id of the fulfillmentLayoutPosition to get tags for</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetFulfillmentLayoutPositionTagsWithHttpInfo (int? fulfillmentLayoutPositionId);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Add new audit for a fulfillmentLayoutPosition
        /// </summary>
        /// <remarks>
        /// Adds an audit to an existing fulfillmentLayoutPosition.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fulfillmentLayoutPositionId">Id of the fulfillmentLayoutPosition to add an audit to</param>
        /// <param name="fulfillmentLayoutPositionAudit">The audit to add</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddFulfillmentLayoutPositionAuditAsync (int? fulfillmentLayoutPositionId, string fulfillmentLayoutPositionAudit);

        /// <summary>
        /// Add new audit for a fulfillmentLayoutPosition
        /// </summary>
        /// <remarks>
        /// Adds an audit to an existing fulfillmentLayoutPosition.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fulfillmentLayoutPositionId">Id of the fulfillmentLayoutPosition to add an audit to</param>
        /// <param name="fulfillmentLayoutPositionAudit">The audit to add</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddFulfillmentLayoutPositionAuditAsyncWithHttpInfo (int? fulfillmentLayoutPositionId, string fulfillmentLayoutPositionAudit);
        /// <summary>
        /// Attach a file to a fulfillmentLayoutPosition
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing fulfillmentLayoutPosition.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fulfillmentLayoutPositionId">Id of the fulfillmentLayoutPosition to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddFulfillmentLayoutPositionFileAsync (int? fulfillmentLayoutPositionId, string fileName);

        /// <summary>
        /// Attach a file to a fulfillmentLayoutPosition
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing fulfillmentLayoutPosition.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fulfillmentLayoutPositionId">Id of the fulfillmentLayoutPosition to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddFulfillmentLayoutPositionFileAsyncWithHttpInfo (int? fulfillmentLayoutPositionId, string fileName);
        /// <summary>
        /// Attach a file to a fulfillmentLayoutPosition by URL.
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing fulfillmentLayoutPosition by URL.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="fulfillmentLayoutPositionId">Id of the fulfillmentLayoutPosition to add an file to</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddFulfillmentLayoutPositionFileByURLAsync (RecordFile body, int? fulfillmentLayoutPositionId);

        /// <summary>
        /// Attach a file to a fulfillmentLayoutPosition by URL.
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing fulfillmentLayoutPosition by URL.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="fulfillmentLayoutPositionId">Id of the fulfillmentLayoutPosition to add an file to</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddFulfillmentLayoutPositionFileByURLAsyncWithHttpInfo (RecordFile body, int? fulfillmentLayoutPositionId);
        /// <summary>
        /// Add new tags for a fulfillmentLayoutPosition.
        /// </summary>
        /// <remarks>
        /// Adds a tag to an existing fulfillmentLayoutPosition.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fulfillmentLayoutPositionId">Id of the fulfillmentLayoutPosition to add a tag to</param>
        /// <param name="fulfillmentLayoutPositionTag">The tag to add</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddFulfillmentLayoutPositionTagAsync (int? fulfillmentLayoutPositionId, string fulfillmentLayoutPositionTag);

        /// <summary>
        /// Add new tags for a fulfillmentLayoutPosition.
        /// </summary>
        /// <remarks>
        /// Adds a tag to an existing fulfillmentLayoutPosition.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fulfillmentLayoutPositionId">Id of the fulfillmentLayoutPosition to add a tag to</param>
        /// <param name="fulfillmentLayoutPositionTag">The tag to add</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddFulfillmentLayoutPositionTagAsyncWithHttpInfo (int? fulfillmentLayoutPositionId, string fulfillmentLayoutPositionTag);
        /// <summary>
        /// Delete a file for a fulfillmentLayoutPosition.
        /// </summary>
        /// <remarks>
        /// Deletes an existing fulfillmentLayoutPosition file using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fulfillmentLayoutPositionId">Id of the fulfillmentLayoutPosition to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteFulfillmentLayoutPositionFileAsync (int? fulfillmentLayoutPositionId, int? fileId);

        /// <summary>
        /// Delete a file for a fulfillmentLayoutPosition.
        /// </summary>
        /// <remarks>
        /// Deletes an existing fulfillmentLayoutPosition file using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fulfillmentLayoutPositionId">Id of the fulfillmentLayoutPosition to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteFulfillmentLayoutPositionFileAsyncWithHttpInfo (int? fulfillmentLayoutPositionId, int? fileId);
        /// <summary>
        /// Delete a tag for a fulfillmentLayoutPosition.
        /// </summary>
        /// <remarks>
        /// Deletes an existing fulfillmentLayoutPosition tag using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fulfillmentLayoutPositionId">Id of the fulfillmentLayoutPosition to remove tag from</param>
        /// <param name="fulfillmentLayoutPositionTag">The tag to delete</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteFulfillmentLayoutPositionTagAsync (int? fulfillmentLayoutPositionId, string fulfillmentLayoutPositionTag);

        /// <summary>
        /// Delete a tag for a fulfillmentLayoutPosition.
        /// </summary>
        /// <remarks>
        /// Deletes an existing fulfillmentLayoutPosition tag using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fulfillmentLayoutPositionId">Id of the fulfillmentLayoutPosition to remove tag from</param>
        /// <param name="fulfillmentLayoutPositionTag">The tag to delete</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteFulfillmentLayoutPositionTagAsyncWithHttpInfo (int? fulfillmentLayoutPositionId, string fulfillmentLayoutPositionTag);
        /// <summary>
        /// Get a duplicated a fulfillmentLayoutPosition by id
        /// </summary>
        /// <remarks>
        /// Returns a duplicated fulfillmentLayoutPosition identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fulfillmentLayoutPositionId">Id of the fulfillmentLayoutPosition to be duplicated.</param>
        /// <returns>Task of FulfillmentLayoutPosition</returns>
        System.Threading.Tasks.Task<FulfillmentLayoutPosition> GetDuplicateFulfillmentLayoutPositionByIdAsync (int? fulfillmentLayoutPositionId);

        /// <summary>
        /// Get a duplicated a fulfillmentLayoutPosition by id
        /// </summary>
        /// <remarks>
        /// Returns a duplicated fulfillmentLayoutPosition identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fulfillmentLayoutPositionId">Id of the fulfillmentLayoutPosition to be duplicated.</param>
        /// <returns>Task of ApiResponse (FulfillmentLayoutPosition)</returns>
        System.Threading.Tasks.Task<ApiResponse<FulfillmentLayoutPosition>> GetDuplicateFulfillmentLayoutPositionByIdAsyncWithHttpInfo (int? fulfillmentLayoutPositionId);
        /// <summary>
        /// Search fulfillmentLayoutPositions by filter
        /// </summary>
        /// <remarks>
        /// Returns the list of fulfillmentLayoutPositions that match the given filter.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>Task of List&lt;FulfillmentLayoutPosition&gt;</returns>
        System.Threading.Tasks.Task<List<FulfillmentLayoutPosition>> GetFulfillmentLayoutPositionByFilterAsync (string filter = null, int? page = null, int? limit = null, string sort = null);

        /// <summary>
        /// Search fulfillmentLayoutPositions by filter
        /// </summary>
        /// <remarks>
        /// Returns the list of fulfillmentLayoutPositions that match the given filter.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;FulfillmentLayoutPosition&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<FulfillmentLayoutPosition>>> GetFulfillmentLayoutPositionByFilterAsyncWithHttpInfo (string filter = null, int? page = null, int? limit = null, string sort = null);
        /// <summary>
        /// Get a fulfillmentLayoutPosition by id
        /// </summary>
        /// <remarks>
        /// Returns the fulfillmentLayoutPosition identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fulfillmentLayoutPositionId">Id of the fulfillmentLayoutPosition to be returned.</param>
        /// <returns>Task of FulfillmentLayoutPosition</returns>
        System.Threading.Tasks.Task<FulfillmentLayoutPosition> GetFulfillmentLayoutPositionByIdAsync (int? fulfillmentLayoutPositionId);

        /// <summary>
        /// Get a fulfillmentLayoutPosition by id
        /// </summary>
        /// <remarks>
        /// Returns the fulfillmentLayoutPosition identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fulfillmentLayoutPositionId">Id of the fulfillmentLayoutPosition to be returned.</param>
        /// <returns>Task of ApiResponse (FulfillmentLayoutPosition)</returns>
        System.Threading.Tasks.Task<ApiResponse<FulfillmentLayoutPosition>> GetFulfillmentLayoutPositionByIdAsyncWithHttpInfo (int? fulfillmentLayoutPositionId);
        /// <summary>
        /// Get the files for a fulfillmentLayoutPosition.
        /// </summary>
        /// <remarks>
        /// Get all existing fulfillmentLayoutPosition files.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fulfillmentLayoutPositionId">Id of the fulfillmentLayoutPosition to get files for</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetFulfillmentLayoutPositionFilesAsync (int? fulfillmentLayoutPositionId);

        /// <summary>
        /// Get the files for a fulfillmentLayoutPosition.
        /// </summary>
        /// <remarks>
        /// Get all existing fulfillmentLayoutPosition files.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fulfillmentLayoutPositionId">Id of the fulfillmentLayoutPosition to get files for</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetFulfillmentLayoutPositionFilesAsyncWithHttpInfo (int? fulfillmentLayoutPositionId);
        /// <summary>
        /// Get the tags for a fulfillmentLayoutPosition.
        /// </summary>
        /// <remarks>
        /// Get all existing fulfillmentLayoutPosition tags.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fulfillmentLayoutPositionId">Id of the fulfillmentLayoutPosition to get tags for</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetFulfillmentLayoutPositionTagsAsync (int? fulfillmentLayoutPositionId);

        /// <summary>
        /// Get the tags for a fulfillmentLayoutPosition.
        /// </summary>
        /// <remarks>
        /// Get all existing fulfillmentLayoutPosition tags.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fulfillmentLayoutPositionId">Id of the fulfillmentLayoutPosition to get tags for</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetFulfillmentLayoutPositionTagsAsyncWithHttpInfo (int? fulfillmentLayoutPositionId);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class FulfillmentLayoutPositionApi : IFulfillmentLayoutPositionApi
    {
        private Infoplus.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="FulfillmentLayoutPositionApi"/> class.
        /// </summary>
        /// <returns></returns>
        public FulfillmentLayoutPositionApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = Infoplus.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FulfillmentLayoutPositionApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public FulfillmentLayoutPositionApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Infoplus.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Infoplus.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Add new audit for a fulfillmentLayoutPosition Adds an audit to an existing fulfillmentLayoutPosition.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fulfillmentLayoutPositionId">Id of the fulfillmentLayoutPosition to add an audit to</param>
        /// <param name="fulfillmentLayoutPositionAudit">The audit to add</param>
        /// <returns></returns>
        public void AddFulfillmentLayoutPositionAudit (int? fulfillmentLayoutPositionId, string fulfillmentLayoutPositionAudit)
        {
             AddFulfillmentLayoutPositionAuditWithHttpInfo(fulfillmentLayoutPositionId, fulfillmentLayoutPositionAudit);
        }

        /// <summary>
        /// Add new audit for a fulfillmentLayoutPosition Adds an audit to an existing fulfillmentLayoutPosition.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fulfillmentLayoutPositionId">Id of the fulfillmentLayoutPosition to add an audit to</param>
        /// <param name="fulfillmentLayoutPositionAudit">The audit to add</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AddFulfillmentLayoutPositionAuditWithHttpInfo (int? fulfillmentLayoutPositionId, string fulfillmentLayoutPositionAudit)
        {
            // verify the required parameter 'fulfillmentLayoutPositionId' is set
            if (fulfillmentLayoutPositionId == null)
                throw new ApiException(400, "Missing required parameter 'fulfillmentLayoutPositionId' when calling FulfillmentLayoutPositionApi->AddFulfillmentLayoutPositionAudit");
            // verify the required parameter 'fulfillmentLayoutPositionAudit' is set
            if (fulfillmentLayoutPositionAudit == null)
                throw new ApiException(400, "Missing required parameter 'fulfillmentLayoutPositionAudit' when calling FulfillmentLayoutPositionApi->AddFulfillmentLayoutPositionAudit");

            var localVarPath = "/beta/fulfillmentLayoutPosition/{fulfillmentLayoutPositionId}/audit/{fulfillmentLayoutPositionAudit}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fulfillmentLayoutPositionId != null) localVarPathParams.Add("fulfillmentLayoutPositionId", Configuration.ApiClient.ParameterToString(fulfillmentLayoutPositionId)); // path parameter
            if (fulfillmentLayoutPositionAudit != null) localVarPathParams.Add("fulfillmentLayoutPositionAudit", Configuration.ApiClient.ParameterToString(fulfillmentLayoutPositionAudit)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddFulfillmentLayoutPositionAudit", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Add new audit for a fulfillmentLayoutPosition Adds an audit to an existing fulfillmentLayoutPosition.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fulfillmentLayoutPositionId">Id of the fulfillmentLayoutPosition to add an audit to</param>
        /// <param name="fulfillmentLayoutPositionAudit">The audit to add</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddFulfillmentLayoutPositionAuditAsync (int? fulfillmentLayoutPositionId, string fulfillmentLayoutPositionAudit)
        {
             await AddFulfillmentLayoutPositionAuditAsyncWithHttpInfo(fulfillmentLayoutPositionId, fulfillmentLayoutPositionAudit);

        }

        /// <summary>
        /// Add new audit for a fulfillmentLayoutPosition Adds an audit to an existing fulfillmentLayoutPosition.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fulfillmentLayoutPositionId">Id of the fulfillmentLayoutPosition to add an audit to</param>
        /// <param name="fulfillmentLayoutPositionAudit">The audit to add</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddFulfillmentLayoutPositionAuditAsyncWithHttpInfo (int? fulfillmentLayoutPositionId, string fulfillmentLayoutPositionAudit)
        {
            // verify the required parameter 'fulfillmentLayoutPositionId' is set
            if (fulfillmentLayoutPositionId == null)
                throw new ApiException(400, "Missing required parameter 'fulfillmentLayoutPositionId' when calling FulfillmentLayoutPositionApi->AddFulfillmentLayoutPositionAudit");
            // verify the required parameter 'fulfillmentLayoutPositionAudit' is set
            if (fulfillmentLayoutPositionAudit == null)
                throw new ApiException(400, "Missing required parameter 'fulfillmentLayoutPositionAudit' when calling FulfillmentLayoutPositionApi->AddFulfillmentLayoutPositionAudit");

            var localVarPath = "/beta/fulfillmentLayoutPosition/{fulfillmentLayoutPositionId}/audit/{fulfillmentLayoutPositionAudit}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fulfillmentLayoutPositionId != null) localVarPathParams.Add("fulfillmentLayoutPositionId", Configuration.ApiClient.ParameterToString(fulfillmentLayoutPositionId)); // path parameter
            if (fulfillmentLayoutPositionAudit != null) localVarPathParams.Add("fulfillmentLayoutPositionAudit", Configuration.ApiClient.ParameterToString(fulfillmentLayoutPositionAudit)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddFulfillmentLayoutPositionAudit", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Attach a file to a fulfillmentLayoutPosition Adds a file to an existing fulfillmentLayoutPosition.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fulfillmentLayoutPositionId">Id of the fulfillmentLayoutPosition to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns></returns>
        public void AddFulfillmentLayoutPositionFile (int? fulfillmentLayoutPositionId, string fileName)
        {
             AddFulfillmentLayoutPositionFileWithHttpInfo(fulfillmentLayoutPositionId, fileName);
        }

        /// <summary>
        /// Attach a file to a fulfillmentLayoutPosition Adds a file to an existing fulfillmentLayoutPosition.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fulfillmentLayoutPositionId">Id of the fulfillmentLayoutPosition to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AddFulfillmentLayoutPositionFileWithHttpInfo (int? fulfillmentLayoutPositionId, string fileName)
        {
            // verify the required parameter 'fulfillmentLayoutPositionId' is set
            if (fulfillmentLayoutPositionId == null)
                throw new ApiException(400, "Missing required parameter 'fulfillmentLayoutPositionId' when calling FulfillmentLayoutPositionApi->AddFulfillmentLayoutPositionFile");
            // verify the required parameter 'fileName' is set
            if (fileName == null)
                throw new ApiException(400, "Missing required parameter 'fileName' when calling FulfillmentLayoutPositionApi->AddFulfillmentLayoutPositionFile");

            var localVarPath = "/beta/fulfillmentLayoutPosition/{fulfillmentLayoutPositionId}/file/{fileName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fulfillmentLayoutPositionId != null) localVarPathParams.Add("fulfillmentLayoutPositionId", Configuration.ApiClient.ParameterToString(fulfillmentLayoutPositionId)); // path parameter
            if (fileName != null) localVarPathParams.Add("fileName", Configuration.ApiClient.ParameterToString(fileName)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddFulfillmentLayoutPositionFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Attach a file to a fulfillmentLayoutPosition Adds a file to an existing fulfillmentLayoutPosition.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fulfillmentLayoutPositionId">Id of the fulfillmentLayoutPosition to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddFulfillmentLayoutPositionFileAsync (int? fulfillmentLayoutPositionId, string fileName)
        {
             await AddFulfillmentLayoutPositionFileAsyncWithHttpInfo(fulfillmentLayoutPositionId, fileName);

        }

        /// <summary>
        /// Attach a file to a fulfillmentLayoutPosition Adds a file to an existing fulfillmentLayoutPosition.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fulfillmentLayoutPositionId">Id of the fulfillmentLayoutPosition to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddFulfillmentLayoutPositionFileAsyncWithHttpInfo (int? fulfillmentLayoutPositionId, string fileName)
        {
            // verify the required parameter 'fulfillmentLayoutPositionId' is set
            if (fulfillmentLayoutPositionId == null)
                throw new ApiException(400, "Missing required parameter 'fulfillmentLayoutPositionId' when calling FulfillmentLayoutPositionApi->AddFulfillmentLayoutPositionFile");
            // verify the required parameter 'fileName' is set
            if (fileName == null)
                throw new ApiException(400, "Missing required parameter 'fileName' when calling FulfillmentLayoutPositionApi->AddFulfillmentLayoutPositionFile");

            var localVarPath = "/beta/fulfillmentLayoutPosition/{fulfillmentLayoutPositionId}/file/{fileName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fulfillmentLayoutPositionId != null) localVarPathParams.Add("fulfillmentLayoutPositionId", Configuration.ApiClient.ParameterToString(fulfillmentLayoutPositionId)); // path parameter
            if (fileName != null) localVarPathParams.Add("fileName", Configuration.ApiClient.ParameterToString(fileName)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddFulfillmentLayoutPositionFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Attach a file to a fulfillmentLayoutPosition by URL. Adds a file to an existing fulfillmentLayoutPosition by URL.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="fulfillmentLayoutPositionId">Id of the fulfillmentLayoutPosition to add an file to</param>
        /// <returns></returns>
        public void AddFulfillmentLayoutPositionFileByURL (RecordFile body, int? fulfillmentLayoutPositionId)
        {
             AddFulfillmentLayoutPositionFileByURLWithHttpInfo(body, fulfillmentLayoutPositionId);
        }

        /// <summary>
        /// Attach a file to a fulfillmentLayoutPosition by URL. Adds a file to an existing fulfillmentLayoutPosition by URL.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="fulfillmentLayoutPositionId">Id of the fulfillmentLayoutPosition to add an file to</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AddFulfillmentLayoutPositionFileByURLWithHttpInfo (RecordFile body, int? fulfillmentLayoutPositionId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling FulfillmentLayoutPositionApi->AddFulfillmentLayoutPositionFileByURL");
            // verify the required parameter 'fulfillmentLayoutPositionId' is set
            if (fulfillmentLayoutPositionId == null)
                throw new ApiException(400, "Missing required parameter 'fulfillmentLayoutPositionId' when calling FulfillmentLayoutPositionApi->AddFulfillmentLayoutPositionFileByURL");

            var localVarPath = "/beta/fulfillmentLayoutPosition/{fulfillmentLayoutPositionId}/file";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fulfillmentLayoutPositionId != null) localVarPathParams.Add("fulfillmentLayoutPositionId", Configuration.ApiClient.ParameterToString(fulfillmentLayoutPositionId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddFulfillmentLayoutPositionFileByURL", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Attach a file to a fulfillmentLayoutPosition by URL. Adds a file to an existing fulfillmentLayoutPosition by URL.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="fulfillmentLayoutPositionId">Id of the fulfillmentLayoutPosition to add an file to</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddFulfillmentLayoutPositionFileByURLAsync (RecordFile body, int? fulfillmentLayoutPositionId)
        {
             await AddFulfillmentLayoutPositionFileByURLAsyncWithHttpInfo(body, fulfillmentLayoutPositionId);

        }

        /// <summary>
        /// Attach a file to a fulfillmentLayoutPosition by URL. Adds a file to an existing fulfillmentLayoutPosition by URL.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="fulfillmentLayoutPositionId">Id of the fulfillmentLayoutPosition to add an file to</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddFulfillmentLayoutPositionFileByURLAsyncWithHttpInfo (RecordFile body, int? fulfillmentLayoutPositionId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling FulfillmentLayoutPositionApi->AddFulfillmentLayoutPositionFileByURL");
            // verify the required parameter 'fulfillmentLayoutPositionId' is set
            if (fulfillmentLayoutPositionId == null)
                throw new ApiException(400, "Missing required parameter 'fulfillmentLayoutPositionId' when calling FulfillmentLayoutPositionApi->AddFulfillmentLayoutPositionFileByURL");

            var localVarPath = "/beta/fulfillmentLayoutPosition/{fulfillmentLayoutPositionId}/file";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fulfillmentLayoutPositionId != null) localVarPathParams.Add("fulfillmentLayoutPositionId", Configuration.ApiClient.ParameterToString(fulfillmentLayoutPositionId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddFulfillmentLayoutPositionFileByURL", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Add new tags for a fulfillmentLayoutPosition. Adds a tag to an existing fulfillmentLayoutPosition.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fulfillmentLayoutPositionId">Id of the fulfillmentLayoutPosition to add a tag to</param>
        /// <param name="fulfillmentLayoutPositionTag">The tag to add</param>
        /// <returns></returns>
        public void AddFulfillmentLayoutPositionTag (int? fulfillmentLayoutPositionId, string fulfillmentLayoutPositionTag)
        {
             AddFulfillmentLayoutPositionTagWithHttpInfo(fulfillmentLayoutPositionId, fulfillmentLayoutPositionTag);
        }

        /// <summary>
        /// Add new tags for a fulfillmentLayoutPosition. Adds a tag to an existing fulfillmentLayoutPosition.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fulfillmentLayoutPositionId">Id of the fulfillmentLayoutPosition to add a tag to</param>
        /// <param name="fulfillmentLayoutPositionTag">The tag to add</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AddFulfillmentLayoutPositionTagWithHttpInfo (int? fulfillmentLayoutPositionId, string fulfillmentLayoutPositionTag)
        {
            // verify the required parameter 'fulfillmentLayoutPositionId' is set
            if (fulfillmentLayoutPositionId == null)
                throw new ApiException(400, "Missing required parameter 'fulfillmentLayoutPositionId' when calling FulfillmentLayoutPositionApi->AddFulfillmentLayoutPositionTag");
            // verify the required parameter 'fulfillmentLayoutPositionTag' is set
            if (fulfillmentLayoutPositionTag == null)
                throw new ApiException(400, "Missing required parameter 'fulfillmentLayoutPositionTag' when calling FulfillmentLayoutPositionApi->AddFulfillmentLayoutPositionTag");

            var localVarPath = "/beta/fulfillmentLayoutPosition/{fulfillmentLayoutPositionId}/tag/{fulfillmentLayoutPositionTag}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fulfillmentLayoutPositionId != null) localVarPathParams.Add("fulfillmentLayoutPositionId", Configuration.ApiClient.ParameterToString(fulfillmentLayoutPositionId)); // path parameter
            if (fulfillmentLayoutPositionTag != null) localVarPathParams.Add("fulfillmentLayoutPositionTag", Configuration.ApiClient.ParameterToString(fulfillmentLayoutPositionTag)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddFulfillmentLayoutPositionTag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Add new tags for a fulfillmentLayoutPosition. Adds a tag to an existing fulfillmentLayoutPosition.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fulfillmentLayoutPositionId">Id of the fulfillmentLayoutPosition to add a tag to</param>
        /// <param name="fulfillmentLayoutPositionTag">The tag to add</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddFulfillmentLayoutPositionTagAsync (int? fulfillmentLayoutPositionId, string fulfillmentLayoutPositionTag)
        {
             await AddFulfillmentLayoutPositionTagAsyncWithHttpInfo(fulfillmentLayoutPositionId, fulfillmentLayoutPositionTag);

        }

        /// <summary>
        /// Add new tags for a fulfillmentLayoutPosition. Adds a tag to an existing fulfillmentLayoutPosition.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fulfillmentLayoutPositionId">Id of the fulfillmentLayoutPosition to add a tag to</param>
        /// <param name="fulfillmentLayoutPositionTag">The tag to add</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddFulfillmentLayoutPositionTagAsyncWithHttpInfo (int? fulfillmentLayoutPositionId, string fulfillmentLayoutPositionTag)
        {
            // verify the required parameter 'fulfillmentLayoutPositionId' is set
            if (fulfillmentLayoutPositionId == null)
                throw new ApiException(400, "Missing required parameter 'fulfillmentLayoutPositionId' when calling FulfillmentLayoutPositionApi->AddFulfillmentLayoutPositionTag");
            // verify the required parameter 'fulfillmentLayoutPositionTag' is set
            if (fulfillmentLayoutPositionTag == null)
                throw new ApiException(400, "Missing required parameter 'fulfillmentLayoutPositionTag' when calling FulfillmentLayoutPositionApi->AddFulfillmentLayoutPositionTag");

            var localVarPath = "/beta/fulfillmentLayoutPosition/{fulfillmentLayoutPositionId}/tag/{fulfillmentLayoutPositionTag}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fulfillmentLayoutPositionId != null) localVarPathParams.Add("fulfillmentLayoutPositionId", Configuration.ApiClient.ParameterToString(fulfillmentLayoutPositionId)); // path parameter
            if (fulfillmentLayoutPositionTag != null) localVarPathParams.Add("fulfillmentLayoutPositionTag", Configuration.ApiClient.ParameterToString(fulfillmentLayoutPositionTag)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddFulfillmentLayoutPositionTag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a file for a fulfillmentLayoutPosition. Deletes an existing fulfillmentLayoutPosition file using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fulfillmentLayoutPositionId">Id of the fulfillmentLayoutPosition to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns></returns>
        public void DeleteFulfillmentLayoutPositionFile (int? fulfillmentLayoutPositionId, int? fileId)
        {
             DeleteFulfillmentLayoutPositionFileWithHttpInfo(fulfillmentLayoutPositionId, fileId);
        }

        /// <summary>
        /// Delete a file for a fulfillmentLayoutPosition. Deletes an existing fulfillmentLayoutPosition file using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fulfillmentLayoutPositionId">Id of the fulfillmentLayoutPosition to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteFulfillmentLayoutPositionFileWithHttpInfo (int? fulfillmentLayoutPositionId, int? fileId)
        {
            // verify the required parameter 'fulfillmentLayoutPositionId' is set
            if (fulfillmentLayoutPositionId == null)
                throw new ApiException(400, "Missing required parameter 'fulfillmentLayoutPositionId' when calling FulfillmentLayoutPositionApi->DeleteFulfillmentLayoutPositionFile");
            // verify the required parameter 'fileId' is set
            if (fileId == null)
                throw new ApiException(400, "Missing required parameter 'fileId' when calling FulfillmentLayoutPositionApi->DeleteFulfillmentLayoutPositionFile");

            var localVarPath = "/beta/fulfillmentLayoutPosition/{fulfillmentLayoutPositionId}/file/{fileId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fulfillmentLayoutPositionId != null) localVarPathParams.Add("fulfillmentLayoutPositionId", Configuration.ApiClient.ParameterToString(fulfillmentLayoutPositionId)); // path parameter
            if (fileId != null) localVarPathParams.Add("fileId", Configuration.ApiClient.ParameterToString(fileId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteFulfillmentLayoutPositionFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a file for a fulfillmentLayoutPosition. Deletes an existing fulfillmentLayoutPosition file using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fulfillmentLayoutPositionId">Id of the fulfillmentLayoutPosition to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteFulfillmentLayoutPositionFileAsync (int? fulfillmentLayoutPositionId, int? fileId)
        {
             await DeleteFulfillmentLayoutPositionFileAsyncWithHttpInfo(fulfillmentLayoutPositionId, fileId);

        }

        /// <summary>
        /// Delete a file for a fulfillmentLayoutPosition. Deletes an existing fulfillmentLayoutPosition file using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fulfillmentLayoutPositionId">Id of the fulfillmentLayoutPosition to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteFulfillmentLayoutPositionFileAsyncWithHttpInfo (int? fulfillmentLayoutPositionId, int? fileId)
        {
            // verify the required parameter 'fulfillmentLayoutPositionId' is set
            if (fulfillmentLayoutPositionId == null)
                throw new ApiException(400, "Missing required parameter 'fulfillmentLayoutPositionId' when calling FulfillmentLayoutPositionApi->DeleteFulfillmentLayoutPositionFile");
            // verify the required parameter 'fileId' is set
            if (fileId == null)
                throw new ApiException(400, "Missing required parameter 'fileId' when calling FulfillmentLayoutPositionApi->DeleteFulfillmentLayoutPositionFile");

            var localVarPath = "/beta/fulfillmentLayoutPosition/{fulfillmentLayoutPositionId}/file/{fileId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fulfillmentLayoutPositionId != null) localVarPathParams.Add("fulfillmentLayoutPositionId", Configuration.ApiClient.ParameterToString(fulfillmentLayoutPositionId)); // path parameter
            if (fileId != null) localVarPathParams.Add("fileId", Configuration.ApiClient.ParameterToString(fileId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteFulfillmentLayoutPositionFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a tag for a fulfillmentLayoutPosition. Deletes an existing fulfillmentLayoutPosition tag using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fulfillmentLayoutPositionId">Id of the fulfillmentLayoutPosition to remove tag from</param>
        /// <param name="fulfillmentLayoutPositionTag">The tag to delete</param>
        /// <returns></returns>
        public void DeleteFulfillmentLayoutPositionTag (int? fulfillmentLayoutPositionId, string fulfillmentLayoutPositionTag)
        {
             DeleteFulfillmentLayoutPositionTagWithHttpInfo(fulfillmentLayoutPositionId, fulfillmentLayoutPositionTag);
        }

        /// <summary>
        /// Delete a tag for a fulfillmentLayoutPosition. Deletes an existing fulfillmentLayoutPosition tag using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fulfillmentLayoutPositionId">Id of the fulfillmentLayoutPosition to remove tag from</param>
        /// <param name="fulfillmentLayoutPositionTag">The tag to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteFulfillmentLayoutPositionTagWithHttpInfo (int? fulfillmentLayoutPositionId, string fulfillmentLayoutPositionTag)
        {
            // verify the required parameter 'fulfillmentLayoutPositionId' is set
            if (fulfillmentLayoutPositionId == null)
                throw new ApiException(400, "Missing required parameter 'fulfillmentLayoutPositionId' when calling FulfillmentLayoutPositionApi->DeleteFulfillmentLayoutPositionTag");
            // verify the required parameter 'fulfillmentLayoutPositionTag' is set
            if (fulfillmentLayoutPositionTag == null)
                throw new ApiException(400, "Missing required parameter 'fulfillmentLayoutPositionTag' when calling FulfillmentLayoutPositionApi->DeleteFulfillmentLayoutPositionTag");

            var localVarPath = "/beta/fulfillmentLayoutPosition/{fulfillmentLayoutPositionId}/tag/{fulfillmentLayoutPositionTag}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fulfillmentLayoutPositionId != null) localVarPathParams.Add("fulfillmentLayoutPositionId", Configuration.ApiClient.ParameterToString(fulfillmentLayoutPositionId)); // path parameter
            if (fulfillmentLayoutPositionTag != null) localVarPathParams.Add("fulfillmentLayoutPositionTag", Configuration.ApiClient.ParameterToString(fulfillmentLayoutPositionTag)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteFulfillmentLayoutPositionTag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a tag for a fulfillmentLayoutPosition. Deletes an existing fulfillmentLayoutPosition tag using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fulfillmentLayoutPositionId">Id of the fulfillmentLayoutPosition to remove tag from</param>
        /// <param name="fulfillmentLayoutPositionTag">The tag to delete</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteFulfillmentLayoutPositionTagAsync (int? fulfillmentLayoutPositionId, string fulfillmentLayoutPositionTag)
        {
             await DeleteFulfillmentLayoutPositionTagAsyncWithHttpInfo(fulfillmentLayoutPositionId, fulfillmentLayoutPositionTag);

        }

        /// <summary>
        /// Delete a tag for a fulfillmentLayoutPosition. Deletes an existing fulfillmentLayoutPosition tag using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fulfillmentLayoutPositionId">Id of the fulfillmentLayoutPosition to remove tag from</param>
        /// <param name="fulfillmentLayoutPositionTag">The tag to delete</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteFulfillmentLayoutPositionTagAsyncWithHttpInfo (int? fulfillmentLayoutPositionId, string fulfillmentLayoutPositionTag)
        {
            // verify the required parameter 'fulfillmentLayoutPositionId' is set
            if (fulfillmentLayoutPositionId == null)
                throw new ApiException(400, "Missing required parameter 'fulfillmentLayoutPositionId' when calling FulfillmentLayoutPositionApi->DeleteFulfillmentLayoutPositionTag");
            // verify the required parameter 'fulfillmentLayoutPositionTag' is set
            if (fulfillmentLayoutPositionTag == null)
                throw new ApiException(400, "Missing required parameter 'fulfillmentLayoutPositionTag' when calling FulfillmentLayoutPositionApi->DeleteFulfillmentLayoutPositionTag");

            var localVarPath = "/beta/fulfillmentLayoutPosition/{fulfillmentLayoutPositionId}/tag/{fulfillmentLayoutPositionTag}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fulfillmentLayoutPositionId != null) localVarPathParams.Add("fulfillmentLayoutPositionId", Configuration.ApiClient.ParameterToString(fulfillmentLayoutPositionId)); // path parameter
            if (fulfillmentLayoutPositionTag != null) localVarPathParams.Add("fulfillmentLayoutPositionTag", Configuration.ApiClient.ParameterToString(fulfillmentLayoutPositionTag)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteFulfillmentLayoutPositionTag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get a duplicated a fulfillmentLayoutPosition by id Returns a duplicated fulfillmentLayoutPosition identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fulfillmentLayoutPositionId">Id of the fulfillmentLayoutPosition to be duplicated.</param>
        /// <returns>FulfillmentLayoutPosition</returns>
        public FulfillmentLayoutPosition GetDuplicateFulfillmentLayoutPositionById (int? fulfillmentLayoutPositionId)
        {
             ApiResponse<FulfillmentLayoutPosition> localVarResponse = GetDuplicateFulfillmentLayoutPositionByIdWithHttpInfo(fulfillmentLayoutPositionId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a duplicated a fulfillmentLayoutPosition by id Returns a duplicated fulfillmentLayoutPosition identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fulfillmentLayoutPositionId">Id of the fulfillmentLayoutPosition to be duplicated.</param>
        /// <returns>ApiResponse of FulfillmentLayoutPosition</returns>
        public ApiResponse< FulfillmentLayoutPosition > GetDuplicateFulfillmentLayoutPositionByIdWithHttpInfo (int? fulfillmentLayoutPositionId)
        {
            // verify the required parameter 'fulfillmentLayoutPositionId' is set
            if (fulfillmentLayoutPositionId == null)
                throw new ApiException(400, "Missing required parameter 'fulfillmentLayoutPositionId' when calling FulfillmentLayoutPositionApi->GetDuplicateFulfillmentLayoutPositionById");

            var localVarPath = "/beta/fulfillmentLayoutPosition/duplicate/{fulfillmentLayoutPositionId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fulfillmentLayoutPositionId != null) localVarPathParams.Add("fulfillmentLayoutPositionId", Configuration.ApiClient.ParameterToString(fulfillmentLayoutPositionId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDuplicateFulfillmentLayoutPositionById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FulfillmentLayoutPosition>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FulfillmentLayoutPosition) Configuration.ApiClient.Deserialize(localVarResponse, typeof(FulfillmentLayoutPosition)));
        }

        /// <summary>
        /// Get a duplicated a fulfillmentLayoutPosition by id Returns a duplicated fulfillmentLayoutPosition identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fulfillmentLayoutPositionId">Id of the fulfillmentLayoutPosition to be duplicated.</param>
        /// <returns>Task of FulfillmentLayoutPosition</returns>
        public async System.Threading.Tasks.Task<FulfillmentLayoutPosition> GetDuplicateFulfillmentLayoutPositionByIdAsync (int? fulfillmentLayoutPositionId)
        {
             ApiResponse<FulfillmentLayoutPosition> localVarResponse = await GetDuplicateFulfillmentLayoutPositionByIdAsyncWithHttpInfo(fulfillmentLayoutPositionId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a duplicated a fulfillmentLayoutPosition by id Returns a duplicated fulfillmentLayoutPosition identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fulfillmentLayoutPositionId">Id of the fulfillmentLayoutPosition to be duplicated.</param>
        /// <returns>Task of ApiResponse (FulfillmentLayoutPosition)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FulfillmentLayoutPosition>> GetDuplicateFulfillmentLayoutPositionByIdAsyncWithHttpInfo (int? fulfillmentLayoutPositionId)
        {
            // verify the required parameter 'fulfillmentLayoutPositionId' is set
            if (fulfillmentLayoutPositionId == null)
                throw new ApiException(400, "Missing required parameter 'fulfillmentLayoutPositionId' when calling FulfillmentLayoutPositionApi->GetDuplicateFulfillmentLayoutPositionById");

            var localVarPath = "/beta/fulfillmentLayoutPosition/duplicate/{fulfillmentLayoutPositionId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fulfillmentLayoutPositionId != null) localVarPathParams.Add("fulfillmentLayoutPositionId", Configuration.ApiClient.ParameterToString(fulfillmentLayoutPositionId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDuplicateFulfillmentLayoutPositionById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FulfillmentLayoutPosition>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FulfillmentLayoutPosition) Configuration.ApiClient.Deserialize(localVarResponse, typeof(FulfillmentLayoutPosition)));
        }

        /// <summary>
        /// Search fulfillmentLayoutPositions by filter Returns the list of fulfillmentLayoutPositions that match the given filter.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>List&lt;FulfillmentLayoutPosition&gt;</returns>
        public List<FulfillmentLayoutPosition> GetFulfillmentLayoutPositionByFilter (string filter = null, int? page = null, int? limit = null, string sort = null)
        {
             ApiResponse<List<FulfillmentLayoutPosition>> localVarResponse = GetFulfillmentLayoutPositionByFilterWithHttpInfo(filter, page, limit, sort);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Search fulfillmentLayoutPositions by filter Returns the list of fulfillmentLayoutPositions that match the given filter.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>ApiResponse of List&lt;FulfillmentLayoutPosition&gt;</returns>
        public ApiResponse< List<FulfillmentLayoutPosition> > GetFulfillmentLayoutPositionByFilterWithHttpInfo (string filter = null, int? page = null, int? limit = null, string sort = null)
        {

            var localVarPath = "/beta/fulfillmentLayoutPosition/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (filter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (page != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFulfillmentLayoutPositionByFilter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<FulfillmentLayoutPosition>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<FulfillmentLayoutPosition>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<FulfillmentLayoutPosition>)));
        }

        /// <summary>
        /// Search fulfillmentLayoutPositions by filter Returns the list of fulfillmentLayoutPositions that match the given filter.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>Task of List&lt;FulfillmentLayoutPosition&gt;</returns>
        public async System.Threading.Tasks.Task<List<FulfillmentLayoutPosition>> GetFulfillmentLayoutPositionByFilterAsync (string filter = null, int? page = null, int? limit = null, string sort = null)
        {
             ApiResponse<List<FulfillmentLayoutPosition>> localVarResponse = await GetFulfillmentLayoutPositionByFilterAsyncWithHttpInfo(filter, page, limit, sort);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Search fulfillmentLayoutPositions by filter Returns the list of fulfillmentLayoutPositions that match the given filter.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;FulfillmentLayoutPosition&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<FulfillmentLayoutPosition>>> GetFulfillmentLayoutPositionByFilterAsyncWithHttpInfo (string filter = null, int? page = null, int? limit = null, string sort = null)
        {

            var localVarPath = "/beta/fulfillmentLayoutPosition/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (filter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (page != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFulfillmentLayoutPositionByFilter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<FulfillmentLayoutPosition>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<FulfillmentLayoutPosition>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<FulfillmentLayoutPosition>)));
        }

        /// <summary>
        /// Get a fulfillmentLayoutPosition by id Returns the fulfillmentLayoutPosition identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fulfillmentLayoutPositionId">Id of the fulfillmentLayoutPosition to be returned.</param>
        /// <returns>FulfillmentLayoutPosition</returns>
        public FulfillmentLayoutPosition GetFulfillmentLayoutPositionById (int? fulfillmentLayoutPositionId)
        {
             ApiResponse<FulfillmentLayoutPosition> localVarResponse = GetFulfillmentLayoutPositionByIdWithHttpInfo(fulfillmentLayoutPositionId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a fulfillmentLayoutPosition by id Returns the fulfillmentLayoutPosition identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fulfillmentLayoutPositionId">Id of the fulfillmentLayoutPosition to be returned.</param>
        /// <returns>ApiResponse of FulfillmentLayoutPosition</returns>
        public ApiResponse< FulfillmentLayoutPosition > GetFulfillmentLayoutPositionByIdWithHttpInfo (int? fulfillmentLayoutPositionId)
        {
            // verify the required parameter 'fulfillmentLayoutPositionId' is set
            if (fulfillmentLayoutPositionId == null)
                throw new ApiException(400, "Missing required parameter 'fulfillmentLayoutPositionId' when calling FulfillmentLayoutPositionApi->GetFulfillmentLayoutPositionById");

            var localVarPath = "/beta/fulfillmentLayoutPosition/{fulfillmentLayoutPositionId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fulfillmentLayoutPositionId != null) localVarPathParams.Add("fulfillmentLayoutPositionId", Configuration.ApiClient.ParameterToString(fulfillmentLayoutPositionId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFulfillmentLayoutPositionById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FulfillmentLayoutPosition>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FulfillmentLayoutPosition) Configuration.ApiClient.Deserialize(localVarResponse, typeof(FulfillmentLayoutPosition)));
        }

        /// <summary>
        /// Get a fulfillmentLayoutPosition by id Returns the fulfillmentLayoutPosition identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fulfillmentLayoutPositionId">Id of the fulfillmentLayoutPosition to be returned.</param>
        /// <returns>Task of FulfillmentLayoutPosition</returns>
        public async System.Threading.Tasks.Task<FulfillmentLayoutPosition> GetFulfillmentLayoutPositionByIdAsync (int? fulfillmentLayoutPositionId)
        {
             ApiResponse<FulfillmentLayoutPosition> localVarResponse = await GetFulfillmentLayoutPositionByIdAsyncWithHttpInfo(fulfillmentLayoutPositionId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a fulfillmentLayoutPosition by id Returns the fulfillmentLayoutPosition identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fulfillmentLayoutPositionId">Id of the fulfillmentLayoutPosition to be returned.</param>
        /// <returns>Task of ApiResponse (FulfillmentLayoutPosition)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FulfillmentLayoutPosition>> GetFulfillmentLayoutPositionByIdAsyncWithHttpInfo (int? fulfillmentLayoutPositionId)
        {
            // verify the required parameter 'fulfillmentLayoutPositionId' is set
            if (fulfillmentLayoutPositionId == null)
                throw new ApiException(400, "Missing required parameter 'fulfillmentLayoutPositionId' when calling FulfillmentLayoutPositionApi->GetFulfillmentLayoutPositionById");

            var localVarPath = "/beta/fulfillmentLayoutPosition/{fulfillmentLayoutPositionId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fulfillmentLayoutPositionId != null) localVarPathParams.Add("fulfillmentLayoutPositionId", Configuration.ApiClient.ParameterToString(fulfillmentLayoutPositionId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFulfillmentLayoutPositionById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FulfillmentLayoutPosition>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FulfillmentLayoutPosition) Configuration.ApiClient.Deserialize(localVarResponse, typeof(FulfillmentLayoutPosition)));
        }

        /// <summary>
        /// Get the files for a fulfillmentLayoutPosition. Get all existing fulfillmentLayoutPosition files.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fulfillmentLayoutPositionId">Id of the fulfillmentLayoutPosition to get files for</param>
        /// <returns></returns>
        public void GetFulfillmentLayoutPositionFiles (int? fulfillmentLayoutPositionId)
        {
             GetFulfillmentLayoutPositionFilesWithHttpInfo(fulfillmentLayoutPositionId);
        }

        /// <summary>
        /// Get the files for a fulfillmentLayoutPosition. Get all existing fulfillmentLayoutPosition files.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fulfillmentLayoutPositionId">Id of the fulfillmentLayoutPosition to get files for</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GetFulfillmentLayoutPositionFilesWithHttpInfo (int? fulfillmentLayoutPositionId)
        {
            // verify the required parameter 'fulfillmentLayoutPositionId' is set
            if (fulfillmentLayoutPositionId == null)
                throw new ApiException(400, "Missing required parameter 'fulfillmentLayoutPositionId' when calling FulfillmentLayoutPositionApi->GetFulfillmentLayoutPositionFiles");

            var localVarPath = "/beta/fulfillmentLayoutPosition/{fulfillmentLayoutPositionId}/file";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fulfillmentLayoutPositionId != null) localVarPathParams.Add("fulfillmentLayoutPositionId", Configuration.ApiClient.ParameterToString(fulfillmentLayoutPositionId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFulfillmentLayoutPositionFiles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get the files for a fulfillmentLayoutPosition. Get all existing fulfillmentLayoutPosition files.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fulfillmentLayoutPositionId">Id of the fulfillmentLayoutPosition to get files for</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetFulfillmentLayoutPositionFilesAsync (int? fulfillmentLayoutPositionId)
        {
             await GetFulfillmentLayoutPositionFilesAsyncWithHttpInfo(fulfillmentLayoutPositionId);

        }

        /// <summary>
        /// Get the files for a fulfillmentLayoutPosition. Get all existing fulfillmentLayoutPosition files.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fulfillmentLayoutPositionId">Id of the fulfillmentLayoutPosition to get files for</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetFulfillmentLayoutPositionFilesAsyncWithHttpInfo (int? fulfillmentLayoutPositionId)
        {
            // verify the required parameter 'fulfillmentLayoutPositionId' is set
            if (fulfillmentLayoutPositionId == null)
                throw new ApiException(400, "Missing required parameter 'fulfillmentLayoutPositionId' when calling FulfillmentLayoutPositionApi->GetFulfillmentLayoutPositionFiles");

            var localVarPath = "/beta/fulfillmentLayoutPosition/{fulfillmentLayoutPositionId}/file";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fulfillmentLayoutPositionId != null) localVarPathParams.Add("fulfillmentLayoutPositionId", Configuration.ApiClient.ParameterToString(fulfillmentLayoutPositionId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFulfillmentLayoutPositionFiles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get the tags for a fulfillmentLayoutPosition. Get all existing fulfillmentLayoutPosition tags.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fulfillmentLayoutPositionId">Id of the fulfillmentLayoutPosition to get tags for</param>
        /// <returns></returns>
        public void GetFulfillmentLayoutPositionTags (int? fulfillmentLayoutPositionId)
        {
             GetFulfillmentLayoutPositionTagsWithHttpInfo(fulfillmentLayoutPositionId);
        }

        /// <summary>
        /// Get the tags for a fulfillmentLayoutPosition. Get all existing fulfillmentLayoutPosition tags.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fulfillmentLayoutPositionId">Id of the fulfillmentLayoutPosition to get tags for</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GetFulfillmentLayoutPositionTagsWithHttpInfo (int? fulfillmentLayoutPositionId)
        {
            // verify the required parameter 'fulfillmentLayoutPositionId' is set
            if (fulfillmentLayoutPositionId == null)
                throw new ApiException(400, "Missing required parameter 'fulfillmentLayoutPositionId' when calling FulfillmentLayoutPositionApi->GetFulfillmentLayoutPositionTags");

            var localVarPath = "/beta/fulfillmentLayoutPosition/{fulfillmentLayoutPositionId}/tag";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fulfillmentLayoutPositionId != null) localVarPathParams.Add("fulfillmentLayoutPositionId", Configuration.ApiClient.ParameterToString(fulfillmentLayoutPositionId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFulfillmentLayoutPositionTags", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get the tags for a fulfillmentLayoutPosition. Get all existing fulfillmentLayoutPosition tags.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fulfillmentLayoutPositionId">Id of the fulfillmentLayoutPosition to get tags for</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetFulfillmentLayoutPositionTagsAsync (int? fulfillmentLayoutPositionId)
        {
             await GetFulfillmentLayoutPositionTagsAsyncWithHttpInfo(fulfillmentLayoutPositionId);

        }

        /// <summary>
        /// Get the tags for a fulfillmentLayoutPosition. Get all existing fulfillmentLayoutPosition tags.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fulfillmentLayoutPositionId">Id of the fulfillmentLayoutPosition to get tags for</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetFulfillmentLayoutPositionTagsAsyncWithHttpInfo (int? fulfillmentLayoutPositionId)
        {
            // verify the required parameter 'fulfillmentLayoutPositionId' is set
            if (fulfillmentLayoutPositionId == null)
                throw new ApiException(400, "Missing required parameter 'fulfillmentLayoutPositionId' when calling FulfillmentLayoutPositionApi->GetFulfillmentLayoutPositionTags");

            var localVarPath = "/beta/fulfillmentLayoutPosition/{fulfillmentLayoutPositionId}/tag";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fulfillmentLayoutPositionId != null) localVarPathParams.Add("fulfillmentLayoutPositionId", Configuration.ApiClient.ParameterToString(fulfillmentLayoutPositionId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFulfillmentLayoutPositionTags", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

    }
}
