/* 
 * Infoplus API
 *
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Infoplus.Client;
using Infoplus.Model;

namespace Infoplus.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFulfillmentProcessLogApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Add new audit for a fulfillmentProcessLog
        /// </summary>
        /// <remarks>
        /// Adds an audit to an existing fulfillmentProcessLog.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fulfillmentProcessLogId">Id of the fulfillmentProcessLog to add an audit to</param>
        /// <param name="fulfillmentProcessLogAudit">The audit to add</param>
        /// <returns></returns>
        void AddFulfillmentProcessLogAudit (int? fulfillmentProcessLogId, string fulfillmentProcessLogAudit);

        /// <summary>
        /// Add new audit for a fulfillmentProcessLog
        /// </summary>
        /// <remarks>
        /// Adds an audit to an existing fulfillmentProcessLog.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fulfillmentProcessLogId">Id of the fulfillmentProcessLog to add an audit to</param>
        /// <param name="fulfillmentProcessLogAudit">The audit to add</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddFulfillmentProcessLogAuditWithHttpInfo (int? fulfillmentProcessLogId, string fulfillmentProcessLogAudit);
        /// <summary>
        /// Attach a file to a fulfillmentProcessLog
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing fulfillmentProcessLog.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fulfillmentProcessLogId">Id of the fulfillmentProcessLog to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns></returns>
        void AddFulfillmentProcessLogFile (int? fulfillmentProcessLogId, string fileName);

        /// <summary>
        /// Attach a file to a fulfillmentProcessLog
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing fulfillmentProcessLog.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fulfillmentProcessLogId">Id of the fulfillmentProcessLog to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddFulfillmentProcessLogFileWithHttpInfo (int? fulfillmentProcessLogId, string fileName);
        /// <summary>
        /// Attach a file to a fulfillmentProcessLog by URL.
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing fulfillmentProcessLog by URL.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="fulfillmentProcessLogId">Id of the fulfillmentProcessLog to add an file to</param>
        /// <returns></returns>
        void AddFulfillmentProcessLogFileByURL (RecordFile body, int? fulfillmentProcessLogId);

        /// <summary>
        /// Attach a file to a fulfillmentProcessLog by URL.
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing fulfillmentProcessLog by URL.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="fulfillmentProcessLogId">Id of the fulfillmentProcessLog to add an file to</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddFulfillmentProcessLogFileByURLWithHttpInfo (RecordFile body, int? fulfillmentProcessLogId);
        /// <summary>
        /// Add new tags for a fulfillmentProcessLog.
        /// </summary>
        /// <remarks>
        /// Adds a tag to an existing fulfillmentProcessLog.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fulfillmentProcessLogId">Id of the fulfillmentProcessLog to add a tag to</param>
        /// <param name="fulfillmentProcessLogTag">The tag to add</param>
        /// <returns></returns>
        void AddFulfillmentProcessLogTag (int? fulfillmentProcessLogId, string fulfillmentProcessLogTag);

        /// <summary>
        /// Add new tags for a fulfillmentProcessLog.
        /// </summary>
        /// <remarks>
        /// Adds a tag to an existing fulfillmentProcessLog.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fulfillmentProcessLogId">Id of the fulfillmentProcessLog to add a tag to</param>
        /// <param name="fulfillmentProcessLogTag">The tag to add</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddFulfillmentProcessLogTagWithHttpInfo (int? fulfillmentProcessLogId, string fulfillmentProcessLogTag);
        /// <summary>
        /// Delete a file for a fulfillmentProcessLog.
        /// </summary>
        /// <remarks>
        /// Deletes an existing fulfillmentProcessLog file using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fulfillmentProcessLogId">Id of the fulfillmentProcessLog to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns></returns>
        void DeleteFulfillmentProcessLogFile (int? fulfillmentProcessLogId, int? fileId);

        /// <summary>
        /// Delete a file for a fulfillmentProcessLog.
        /// </summary>
        /// <remarks>
        /// Deletes an existing fulfillmentProcessLog file using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fulfillmentProcessLogId">Id of the fulfillmentProcessLog to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteFulfillmentProcessLogFileWithHttpInfo (int? fulfillmentProcessLogId, int? fileId);
        /// <summary>
        /// Delete a tag for a fulfillmentProcessLog.
        /// </summary>
        /// <remarks>
        /// Deletes an existing fulfillmentProcessLog tag using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fulfillmentProcessLogId">Id of the fulfillmentProcessLog to remove tag from</param>
        /// <param name="fulfillmentProcessLogTag">The tag to delete</param>
        /// <returns></returns>
        void DeleteFulfillmentProcessLogTag (int? fulfillmentProcessLogId, string fulfillmentProcessLogTag);

        /// <summary>
        /// Delete a tag for a fulfillmentProcessLog.
        /// </summary>
        /// <remarks>
        /// Deletes an existing fulfillmentProcessLog tag using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fulfillmentProcessLogId">Id of the fulfillmentProcessLog to remove tag from</param>
        /// <param name="fulfillmentProcessLogTag">The tag to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteFulfillmentProcessLogTagWithHttpInfo (int? fulfillmentProcessLogId, string fulfillmentProcessLogTag);
        /// <summary>
        /// Get a duplicated a fulfillmentProcessLog by id
        /// </summary>
        /// <remarks>
        /// Returns a duplicated fulfillmentProcessLog identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fulfillmentProcessLogId">Id of the fulfillmentProcessLog to be duplicated.</param>
        /// <returns>FulfillmentProcessLog</returns>
        FulfillmentProcessLog GetDuplicateFulfillmentProcessLogById (int? fulfillmentProcessLogId);

        /// <summary>
        /// Get a duplicated a fulfillmentProcessLog by id
        /// </summary>
        /// <remarks>
        /// Returns a duplicated fulfillmentProcessLog identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fulfillmentProcessLogId">Id of the fulfillmentProcessLog to be duplicated.</param>
        /// <returns>ApiResponse of FulfillmentProcessLog</returns>
        ApiResponse<FulfillmentProcessLog> GetDuplicateFulfillmentProcessLogByIdWithHttpInfo (int? fulfillmentProcessLogId);
        /// <summary>
        /// Search fulfillmentProcessLogs by filter
        /// </summary>
        /// <remarks>
        /// Returns the list of fulfillmentProcessLogs that match the given filter.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>List&lt;FulfillmentProcessLog&gt;</returns>
        List<FulfillmentProcessLog> GetFulfillmentProcessLogByFilter (string filter = null, int? page = null, int? limit = null, string sort = null);

        /// <summary>
        /// Search fulfillmentProcessLogs by filter
        /// </summary>
        /// <remarks>
        /// Returns the list of fulfillmentProcessLogs that match the given filter.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>ApiResponse of List&lt;FulfillmentProcessLog&gt;</returns>
        ApiResponse<List<FulfillmentProcessLog>> GetFulfillmentProcessLogByFilterWithHttpInfo (string filter = null, int? page = null, int? limit = null, string sort = null);
        /// <summary>
        /// Get a fulfillmentProcessLog by id
        /// </summary>
        /// <remarks>
        /// Returns the fulfillmentProcessLog identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fulfillmentProcessLogId">Id of the fulfillmentProcessLog to be returned.</param>
        /// <returns>FulfillmentProcessLog</returns>
        FulfillmentProcessLog GetFulfillmentProcessLogById (int? fulfillmentProcessLogId);

        /// <summary>
        /// Get a fulfillmentProcessLog by id
        /// </summary>
        /// <remarks>
        /// Returns the fulfillmentProcessLog identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fulfillmentProcessLogId">Id of the fulfillmentProcessLog to be returned.</param>
        /// <returns>ApiResponse of FulfillmentProcessLog</returns>
        ApiResponse<FulfillmentProcessLog> GetFulfillmentProcessLogByIdWithHttpInfo (int? fulfillmentProcessLogId);
        /// <summary>
        /// Get the files for a fulfillmentProcessLog.
        /// </summary>
        /// <remarks>
        /// Get all existing fulfillmentProcessLog files.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fulfillmentProcessLogId">Id of the fulfillmentProcessLog to get files for</param>
        /// <returns></returns>
        void GetFulfillmentProcessLogFiles (int? fulfillmentProcessLogId);

        /// <summary>
        /// Get the files for a fulfillmentProcessLog.
        /// </summary>
        /// <remarks>
        /// Get all existing fulfillmentProcessLog files.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fulfillmentProcessLogId">Id of the fulfillmentProcessLog to get files for</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetFulfillmentProcessLogFilesWithHttpInfo (int? fulfillmentProcessLogId);
        /// <summary>
        /// Get the tags for a fulfillmentProcessLog.
        /// </summary>
        /// <remarks>
        /// Get all existing fulfillmentProcessLog tags.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fulfillmentProcessLogId">Id of the fulfillmentProcessLog to get tags for</param>
        /// <returns></returns>
        void GetFulfillmentProcessLogTags (int? fulfillmentProcessLogId);

        /// <summary>
        /// Get the tags for a fulfillmentProcessLog.
        /// </summary>
        /// <remarks>
        /// Get all existing fulfillmentProcessLog tags.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fulfillmentProcessLogId">Id of the fulfillmentProcessLog to get tags for</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetFulfillmentProcessLogTagsWithHttpInfo (int? fulfillmentProcessLogId);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Add new audit for a fulfillmentProcessLog
        /// </summary>
        /// <remarks>
        /// Adds an audit to an existing fulfillmentProcessLog.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fulfillmentProcessLogId">Id of the fulfillmentProcessLog to add an audit to</param>
        /// <param name="fulfillmentProcessLogAudit">The audit to add</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddFulfillmentProcessLogAuditAsync (int? fulfillmentProcessLogId, string fulfillmentProcessLogAudit);

        /// <summary>
        /// Add new audit for a fulfillmentProcessLog
        /// </summary>
        /// <remarks>
        /// Adds an audit to an existing fulfillmentProcessLog.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fulfillmentProcessLogId">Id of the fulfillmentProcessLog to add an audit to</param>
        /// <param name="fulfillmentProcessLogAudit">The audit to add</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddFulfillmentProcessLogAuditAsyncWithHttpInfo (int? fulfillmentProcessLogId, string fulfillmentProcessLogAudit);
        /// <summary>
        /// Attach a file to a fulfillmentProcessLog
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing fulfillmentProcessLog.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fulfillmentProcessLogId">Id of the fulfillmentProcessLog to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddFulfillmentProcessLogFileAsync (int? fulfillmentProcessLogId, string fileName);

        /// <summary>
        /// Attach a file to a fulfillmentProcessLog
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing fulfillmentProcessLog.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fulfillmentProcessLogId">Id of the fulfillmentProcessLog to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddFulfillmentProcessLogFileAsyncWithHttpInfo (int? fulfillmentProcessLogId, string fileName);
        /// <summary>
        /// Attach a file to a fulfillmentProcessLog by URL.
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing fulfillmentProcessLog by URL.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="fulfillmentProcessLogId">Id of the fulfillmentProcessLog to add an file to</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddFulfillmentProcessLogFileByURLAsync (RecordFile body, int? fulfillmentProcessLogId);

        /// <summary>
        /// Attach a file to a fulfillmentProcessLog by URL.
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing fulfillmentProcessLog by URL.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="fulfillmentProcessLogId">Id of the fulfillmentProcessLog to add an file to</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddFulfillmentProcessLogFileByURLAsyncWithHttpInfo (RecordFile body, int? fulfillmentProcessLogId);
        /// <summary>
        /// Add new tags for a fulfillmentProcessLog.
        /// </summary>
        /// <remarks>
        /// Adds a tag to an existing fulfillmentProcessLog.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fulfillmentProcessLogId">Id of the fulfillmentProcessLog to add a tag to</param>
        /// <param name="fulfillmentProcessLogTag">The tag to add</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddFulfillmentProcessLogTagAsync (int? fulfillmentProcessLogId, string fulfillmentProcessLogTag);

        /// <summary>
        /// Add new tags for a fulfillmentProcessLog.
        /// </summary>
        /// <remarks>
        /// Adds a tag to an existing fulfillmentProcessLog.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fulfillmentProcessLogId">Id of the fulfillmentProcessLog to add a tag to</param>
        /// <param name="fulfillmentProcessLogTag">The tag to add</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddFulfillmentProcessLogTagAsyncWithHttpInfo (int? fulfillmentProcessLogId, string fulfillmentProcessLogTag);
        /// <summary>
        /// Delete a file for a fulfillmentProcessLog.
        /// </summary>
        /// <remarks>
        /// Deletes an existing fulfillmentProcessLog file using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fulfillmentProcessLogId">Id of the fulfillmentProcessLog to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteFulfillmentProcessLogFileAsync (int? fulfillmentProcessLogId, int? fileId);

        /// <summary>
        /// Delete a file for a fulfillmentProcessLog.
        /// </summary>
        /// <remarks>
        /// Deletes an existing fulfillmentProcessLog file using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fulfillmentProcessLogId">Id of the fulfillmentProcessLog to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteFulfillmentProcessLogFileAsyncWithHttpInfo (int? fulfillmentProcessLogId, int? fileId);
        /// <summary>
        /// Delete a tag for a fulfillmentProcessLog.
        /// </summary>
        /// <remarks>
        /// Deletes an existing fulfillmentProcessLog tag using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fulfillmentProcessLogId">Id of the fulfillmentProcessLog to remove tag from</param>
        /// <param name="fulfillmentProcessLogTag">The tag to delete</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteFulfillmentProcessLogTagAsync (int? fulfillmentProcessLogId, string fulfillmentProcessLogTag);

        /// <summary>
        /// Delete a tag for a fulfillmentProcessLog.
        /// </summary>
        /// <remarks>
        /// Deletes an existing fulfillmentProcessLog tag using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fulfillmentProcessLogId">Id of the fulfillmentProcessLog to remove tag from</param>
        /// <param name="fulfillmentProcessLogTag">The tag to delete</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteFulfillmentProcessLogTagAsyncWithHttpInfo (int? fulfillmentProcessLogId, string fulfillmentProcessLogTag);
        /// <summary>
        /// Get a duplicated a fulfillmentProcessLog by id
        /// </summary>
        /// <remarks>
        /// Returns a duplicated fulfillmentProcessLog identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fulfillmentProcessLogId">Id of the fulfillmentProcessLog to be duplicated.</param>
        /// <returns>Task of FulfillmentProcessLog</returns>
        System.Threading.Tasks.Task<FulfillmentProcessLog> GetDuplicateFulfillmentProcessLogByIdAsync (int? fulfillmentProcessLogId);

        /// <summary>
        /// Get a duplicated a fulfillmentProcessLog by id
        /// </summary>
        /// <remarks>
        /// Returns a duplicated fulfillmentProcessLog identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fulfillmentProcessLogId">Id of the fulfillmentProcessLog to be duplicated.</param>
        /// <returns>Task of ApiResponse (FulfillmentProcessLog)</returns>
        System.Threading.Tasks.Task<ApiResponse<FulfillmentProcessLog>> GetDuplicateFulfillmentProcessLogByIdAsyncWithHttpInfo (int? fulfillmentProcessLogId);
        /// <summary>
        /// Search fulfillmentProcessLogs by filter
        /// </summary>
        /// <remarks>
        /// Returns the list of fulfillmentProcessLogs that match the given filter.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>Task of List&lt;FulfillmentProcessLog&gt;</returns>
        System.Threading.Tasks.Task<List<FulfillmentProcessLog>> GetFulfillmentProcessLogByFilterAsync (string filter = null, int? page = null, int? limit = null, string sort = null);

        /// <summary>
        /// Search fulfillmentProcessLogs by filter
        /// </summary>
        /// <remarks>
        /// Returns the list of fulfillmentProcessLogs that match the given filter.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;FulfillmentProcessLog&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<FulfillmentProcessLog>>> GetFulfillmentProcessLogByFilterAsyncWithHttpInfo (string filter = null, int? page = null, int? limit = null, string sort = null);
        /// <summary>
        /// Get a fulfillmentProcessLog by id
        /// </summary>
        /// <remarks>
        /// Returns the fulfillmentProcessLog identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fulfillmentProcessLogId">Id of the fulfillmentProcessLog to be returned.</param>
        /// <returns>Task of FulfillmentProcessLog</returns>
        System.Threading.Tasks.Task<FulfillmentProcessLog> GetFulfillmentProcessLogByIdAsync (int? fulfillmentProcessLogId);

        /// <summary>
        /// Get a fulfillmentProcessLog by id
        /// </summary>
        /// <remarks>
        /// Returns the fulfillmentProcessLog identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fulfillmentProcessLogId">Id of the fulfillmentProcessLog to be returned.</param>
        /// <returns>Task of ApiResponse (FulfillmentProcessLog)</returns>
        System.Threading.Tasks.Task<ApiResponse<FulfillmentProcessLog>> GetFulfillmentProcessLogByIdAsyncWithHttpInfo (int? fulfillmentProcessLogId);
        /// <summary>
        /// Get the files for a fulfillmentProcessLog.
        /// </summary>
        /// <remarks>
        /// Get all existing fulfillmentProcessLog files.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fulfillmentProcessLogId">Id of the fulfillmentProcessLog to get files for</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetFulfillmentProcessLogFilesAsync (int? fulfillmentProcessLogId);

        /// <summary>
        /// Get the files for a fulfillmentProcessLog.
        /// </summary>
        /// <remarks>
        /// Get all existing fulfillmentProcessLog files.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fulfillmentProcessLogId">Id of the fulfillmentProcessLog to get files for</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetFulfillmentProcessLogFilesAsyncWithHttpInfo (int? fulfillmentProcessLogId);
        /// <summary>
        /// Get the tags for a fulfillmentProcessLog.
        /// </summary>
        /// <remarks>
        /// Get all existing fulfillmentProcessLog tags.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fulfillmentProcessLogId">Id of the fulfillmentProcessLog to get tags for</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetFulfillmentProcessLogTagsAsync (int? fulfillmentProcessLogId);

        /// <summary>
        /// Get the tags for a fulfillmentProcessLog.
        /// </summary>
        /// <remarks>
        /// Get all existing fulfillmentProcessLog tags.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fulfillmentProcessLogId">Id of the fulfillmentProcessLog to get tags for</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetFulfillmentProcessLogTagsAsyncWithHttpInfo (int? fulfillmentProcessLogId);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class FulfillmentProcessLogApi : IFulfillmentProcessLogApi
    {
        private Infoplus.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="FulfillmentProcessLogApi"/> class.
        /// </summary>
        /// <returns></returns>
        public FulfillmentProcessLogApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = Infoplus.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FulfillmentProcessLogApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public FulfillmentProcessLogApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Infoplus.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Infoplus.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Add new audit for a fulfillmentProcessLog Adds an audit to an existing fulfillmentProcessLog.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fulfillmentProcessLogId">Id of the fulfillmentProcessLog to add an audit to</param>
        /// <param name="fulfillmentProcessLogAudit">The audit to add</param>
        /// <returns></returns>
        public void AddFulfillmentProcessLogAudit (int? fulfillmentProcessLogId, string fulfillmentProcessLogAudit)
        {
             AddFulfillmentProcessLogAuditWithHttpInfo(fulfillmentProcessLogId, fulfillmentProcessLogAudit);
        }

        /// <summary>
        /// Add new audit for a fulfillmentProcessLog Adds an audit to an existing fulfillmentProcessLog.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fulfillmentProcessLogId">Id of the fulfillmentProcessLog to add an audit to</param>
        /// <param name="fulfillmentProcessLogAudit">The audit to add</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AddFulfillmentProcessLogAuditWithHttpInfo (int? fulfillmentProcessLogId, string fulfillmentProcessLogAudit)
        {
            // verify the required parameter 'fulfillmentProcessLogId' is set
            if (fulfillmentProcessLogId == null)
                throw new ApiException(400, "Missing required parameter 'fulfillmentProcessLogId' when calling FulfillmentProcessLogApi->AddFulfillmentProcessLogAudit");
            // verify the required parameter 'fulfillmentProcessLogAudit' is set
            if (fulfillmentProcessLogAudit == null)
                throw new ApiException(400, "Missing required parameter 'fulfillmentProcessLogAudit' when calling FulfillmentProcessLogApi->AddFulfillmentProcessLogAudit");

            var localVarPath = "/beta/fulfillmentProcessLog/{fulfillmentProcessLogId}/audit/{fulfillmentProcessLogAudit}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fulfillmentProcessLogId != null) localVarPathParams.Add("fulfillmentProcessLogId", Configuration.ApiClient.ParameterToString(fulfillmentProcessLogId)); // path parameter
            if (fulfillmentProcessLogAudit != null) localVarPathParams.Add("fulfillmentProcessLogAudit", Configuration.ApiClient.ParameterToString(fulfillmentProcessLogAudit)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddFulfillmentProcessLogAudit", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Add new audit for a fulfillmentProcessLog Adds an audit to an existing fulfillmentProcessLog.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fulfillmentProcessLogId">Id of the fulfillmentProcessLog to add an audit to</param>
        /// <param name="fulfillmentProcessLogAudit">The audit to add</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddFulfillmentProcessLogAuditAsync (int? fulfillmentProcessLogId, string fulfillmentProcessLogAudit)
        {
             await AddFulfillmentProcessLogAuditAsyncWithHttpInfo(fulfillmentProcessLogId, fulfillmentProcessLogAudit);

        }

        /// <summary>
        /// Add new audit for a fulfillmentProcessLog Adds an audit to an existing fulfillmentProcessLog.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fulfillmentProcessLogId">Id of the fulfillmentProcessLog to add an audit to</param>
        /// <param name="fulfillmentProcessLogAudit">The audit to add</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddFulfillmentProcessLogAuditAsyncWithHttpInfo (int? fulfillmentProcessLogId, string fulfillmentProcessLogAudit)
        {
            // verify the required parameter 'fulfillmentProcessLogId' is set
            if (fulfillmentProcessLogId == null)
                throw new ApiException(400, "Missing required parameter 'fulfillmentProcessLogId' when calling FulfillmentProcessLogApi->AddFulfillmentProcessLogAudit");
            // verify the required parameter 'fulfillmentProcessLogAudit' is set
            if (fulfillmentProcessLogAudit == null)
                throw new ApiException(400, "Missing required parameter 'fulfillmentProcessLogAudit' when calling FulfillmentProcessLogApi->AddFulfillmentProcessLogAudit");

            var localVarPath = "/beta/fulfillmentProcessLog/{fulfillmentProcessLogId}/audit/{fulfillmentProcessLogAudit}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fulfillmentProcessLogId != null) localVarPathParams.Add("fulfillmentProcessLogId", Configuration.ApiClient.ParameterToString(fulfillmentProcessLogId)); // path parameter
            if (fulfillmentProcessLogAudit != null) localVarPathParams.Add("fulfillmentProcessLogAudit", Configuration.ApiClient.ParameterToString(fulfillmentProcessLogAudit)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddFulfillmentProcessLogAudit", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Attach a file to a fulfillmentProcessLog Adds a file to an existing fulfillmentProcessLog.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fulfillmentProcessLogId">Id of the fulfillmentProcessLog to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns></returns>
        public void AddFulfillmentProcessLogFile (int? fulfillmentProcessLogId, string fileName)
        {
             AddFulfillmentProcessLogFileWithHttpInfo(fulfillmentProcessLogId, fileName);
        }

        /// <summary>
        /// Attach a file to a fulfillmentProcessLog Adds a file to an existing fulfillmentProcessLog.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fulfillmentProcessLogId">Id of the fulfillmentProcessLog to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AddFulfillmentProcessLogFileWithHttpInfo (int? fulfillmentProcessLogId, string fileName)
        {
            // verify the required parameter 'fulfillmentProcessLogId' is set
            if (fulfillmentProcessLogId == null)
                throw new ApiException(400, "Missing required parameter 'fulfillmentProcessLogId' when calling FulfillmentProcessLogApi->AddFulfillmentProcessLogFile");
            // verify the required parameter 'fileName' is set
            if (fileName == null)
                throw new ApiException(400, "Missing required parameter 'fileName' when calling FulfillmentProcessLogApi->AddFulfillmentProcessLogFile");

            var localVarPath = "/beta/fulfillmentProcessLog/{fulfillmentProcessLogId}/file/{fileName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fulfillmentProcessLogId != null) localVarPathParams.Add("fulfillmentProcessLogId", Configuration.ApiClient.ParameterToString(fulfillmentProcessLogId)); // path parameter
            if (fileName != null) localVarPathParams.Add("fileName", Configuration.ApiClient.ParameterToString(fileName)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddFulfillmentProcessLogFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Attach a file to a fulfillmentProcessLog Adds a file to an existing fulfillmentProcessLog.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fulfillmentProcessLogId">Id of the fulfillmentProcessLog to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddFulfillmentProcessLogFileAsync (int? fulfillmentProcessLogId, string fileName)
        {
             await AddFulfillmentProcessLogFileAsyncWithHttpInfo(fulfillmentProcessLogId, fileName);

        }

        /// <summary>
        /// Attach a file to a fulfillmentProcessLog Adds a file to an existing fulfillmentProcessLog.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fulfillmentProcessLogId">Id of the fulfillmentProcessLog to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddFulfillmentProcessLogFileAsyncWithHttpInfo (int? fulfillmentProcessLogId, string fileName)
        {
            // verify the required parameter 'fulfillmentProcessLogId' is set
            if (fulfillmentProcessLogId == null)
                throw new ApiException(400, "Missing required parameter 'fulfillmentProcessLogId' when calling FulfillmentProcessLogApi->AddFulfillmentProcessLogFile");
            // verify the required parameter 'fileName' is set
            if (fileName == null)
                throw new ApiException(400, "Missing required parameter 'fileName' when calling FulfillmentProcessLogApi->AddFulfillmentProcessLogFile");

            var localVarPath = "/beta/fulfillmentProcessLog/{fulfillmentProcessLogId}/file/{fileName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fulfillmentProcessLogId != null) localVarPathParams.Add("fulfillmentProcessLogId", Configuration.ApiClient.ParameterToString(fulfillmentProcessLogId)); // path parameter
            if (fileName != null) localVarPathParams.Add("fileName", Configuration.ApiClient.ParameterToString(fileName)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddFulfillmentProcessLogFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Attach a file to a fulfillmentProcessLog by URL. Adds a file to an existing fulfillmentProcessLog by URL.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="fulfillmentProcessLogId">Id of the fulfillmentProcessLog to add an file to</param>
        /// <returns></returns>
        public void AddFulfillmentProcessLogFileByURL (RecordFile body, int? fulfillmentProcessLogId)
        {
             AddFulfillmentProcessLogFileByURLWithHttpInfo(body, fulfillmentProcessLogId);
        }

        /// <summary>
        /// Attach a file to a fulfillmentProcessLog by URL. Adds a file to an existing fulfillmentProcessLog by URL.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="fulfillmentProcessLogId">Id of the fulfillmentProcessLog to add an file to</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AddFulfillmentProcessLogFileByURLWithHttpInfo (RecordFile body, int? fulfillmentProcessLogId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling FulfillmentProcessLogApi->AddFulfillmentProcessLogFileByURL");
            // verify the required parameter 'fulfillmentProcessLogId' is set
            if (fulfillmentProcessLogId == null)
                throw new ApiException(400, "Missing required parameter 'fulfillmentProcessLogId' when calling FulfillmentProcessLogApi->AddFulfillmentProcessLogFileByURL");

            var localVarPath = "/beta/fulfillmentProcessLog/{fulfillmentProcessLogId}/file";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fulfillmentProcessLogId != null) localVarPathParams.Add("fulfillmentProcessLogId", Configuration.ApiClient.ParameterToString(fulfillmentProcessLogId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddFulfillmentProcessLogFileByURL", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Attach a file to a fulfillmentProcessLog by URL. Adds a file to an existing fulfillmentProcessLog by URL.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="fulfillmentProcessLogId">Id of the fulfillmentProcessLog to add an file to</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddFulfillmentProcessLogFileByURLAsync (RecordFile body, int? fulfillmentProcessLogId)
        {
             await AddFulfillmentProcessLogFileByURLAsyncWithHttpInfo(body, fulfillmentProcessLogId);

        }

        /// <summary>
        /// Attach a file to a fulfillmentProcessLog by URL. Adds a file to an existing fulfillmentProcessLog by URL.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="fulfillmentProcessLogId">Id of the fulfillmentProcessLog to add an file to</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddFulfillmentProcessLogFileByURLAsyncWithHttpInfo (RecordFile body, int? fulfillmentProcessLogId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling FulfillmentProcessLogApi->AddFulfillmentProcessLogFileByURL");
            // verify the required parameter 'fulfillmentProcessLogId' is set
            if (fulfillmentProcessLogId == null)
                throw new ApiException(400, "Missing required parameter 'fulfillmentProcessLogId' when calling FulfillmentProcessLogApi->AddFulfillmentProcessLogFileByURL");

            var localVarPath = "/beta/fulfillmentProcessLog/{fulfillmentProcessLogId}/file";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fulfillmentProcessLogId != null) localVarPathParams.Add("fulfillmentProcessLogId", Configuration.ApiClient.ParameterToString(fulfillmentProcessLogId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddFulfillmentProcessLogFileByURL", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Add new tags for a fulfillmentProcessLog. Adds a tag to an existing fulfillmentProcessLog.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fulfillmentProcessLogId">Id of the fulfillmentProcessLog to add a tag to</param>
        /// <param name="fulfillmentProcessLogTag">The tag to add</param>
        /// <returns></returns>
        public void AddFulfillmentProcessLogTag (int? fulfillmentProcessLogId, string fulfillmentProcessLogTag)
        {
             AddFulfillmentProcessLogTagWithHttpInfo(fulfillmentProcessLogId, fulfillmentProcessLogTag);
        }

        /// <summary>
        /// Add new tags for a fulfillmentProcessLog. Adds a tag to an existing fulfillmentProcessLog.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fulfillmentProcessLogId">Id of the fulfillmentProcessLog to add a tag to</param>
        /// <param name="fulfillmentProcessLogTag">The tag to add</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AddFulfillmentProcessLogTagWithHttpInfo (int? fulfillmentProcessLogId, string fulfillmentProcessLogTag)
        {
            // verify the required parameter 'fulfillmentProcessLogId' is set
            if (fulfillmentProcessLogId == null)
                throw new ApiException(400, "Missing required parameter 'fulfillmentProcessLogId' when calling FulfillmentProcessLogApi->AddFulfillmentProcessLogTag");
            // verify the required parameter 'fulfillmentProcessLogTag' is set
            if (fulfillmentProcessLogTag == null)
                throw new ApiException(400, "Missing required parameter 'fulfillmentProcessLogTag' when calling FulfillmentProcessLogApi->AddFulfillmentProcessLogTag");

            var localVarPath = "/beta/fulfillmentProcessLog/{fulfillmentProcessLogId}/tag/{fulfillmentProcessLogTag}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fulfillmentProcessLogId != null) localVarPathParams.Add("fulfillmentProcessLogId", Configuration.ApiClient.ParameterToString(fulfillmentProcessLogId)); // path parameter
            if (fulfillmentProcessLogTag != null) localVarPathParams.Add("fulfillmentProcessLogTag", Configuration.ApiClient.ParameterToString(fulfillmentProcessLogTag)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddFulfillmentProcessLogTag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Add new tags for a fulfillmentProcessLog. Adds a tag to an existing fulfillmentProcessLog.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fulfillmentProcessLogId">Id of the fulfillmentProcessLog to add a tag to</param>
        /// <param name="fulfillmentProcessLogTag">The tag to add</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddFulfillmentProcessLogTagAsync (int? fulfillmentProcessLogId, string fulfillmentProcessLogTag)
        {
             await AddFulfillmentProcessLogTagAsyncWithHttpInfo(fulfillmentProcessLogId, fulfillmentProcessLogTag);

        }

        /// <summary>
        /// Add new tags for a fulfillmentProcessLog. Adds a tag to an existing fulfillmentProcessLog.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fulfillmentProcessLogId">Id of the fulfillmentProcessLog to add a tag to</param>
        /// <param name="fulfillmentProcessLogTag">The tag to add</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddFulfillmentProcessLogTagAsyncWithHttpInfo (int? fulfillmentProcessLogId, string fulfillmentProcessLogTag)
        {
            // verify the required parameter 'fulfillmentProcessLogId' is set
            if (fulfillmentProcessLogId == null)
                throw new ApiException(400, "Missing required parameter 'fulfillmentProcessLogId' when calling FulfillmentProcessLogApi->AddFulfillmentProcessLogTag");
            // verify the required parameter 'fulfillmentProcessLogTag' is set
            if (fulfillmentProcessLogTag == null)
                throw new ApiException(400, "Missing required parameter 'fulfillmentProcessLogTag' when calling FulfillmentProcessLogApi->AddFulfillmentProcessLogTag");

            var localVarPath = "/beta/fulfillmentProcessLog/{fulfillmentProcessLogId}/tag/{fulfillmentProcessLogTag}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fulfillmentProcessLogId != null) localVarPathParams.Add("fulfillmentProcessLogId", Configuration.ApiClient.ParameterToString(fulfillmentProcessLogId)); // path parameter
            if (fulfillmentProcessLogTag != null) localVarPathParams.Add("fulfillmentProcessLogTag", Configuration.ApiClient.ParameterToString(fulfillmentProcessLogTag)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddFulfillmentProcessLogTag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a file for a fulfillmentProcessLog. Deletes an existing fulfillmentProcessLog file using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fulfillmentProcessLogId">Id of the fulfillmentProcessLog to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns></returns>
        public void DeleteFulfillmentProcessLogFile (int? fulfillmentProcessLogId, int? fileId)
        {
             DeleteFulfillmentProcessLogFileWithHttpInfo(fulfillmentProcessLogId, fileId);
        }

        /// <summary>
        /// Delete a file for a fulfillmentProcessLog. Deletes an existing fulfillmentProcessLog file using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fulfillmentProcessLogId">Id of the fulfillmentProcessLog to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteFulfillmentProcessLogFileWithHttpInfo (int? fulfillmentProcessLogId, int? fileId)
        {
            // verify the required parameter 'fulfillmentProcessLogId' is set
            if (fulfillmentProcessLogId == null)
                throw new ApiException(400, "Missing required parameter 'fulfillmentProcessLogId' when calling FulfillmentProcessLogApi->DeleteFulfillmentProcessLogFile");
            // verify the required parameter 'fileId' is set
            if (fileId == null)
                throw new ApiException(400, "Missing required parameter 'fileId' when calling FulfillmentProcessLogApi->DeleteFulfillmentProcessLogFile");

            var localVarPath = "/beta/fulfillmentProcessLog/{fulfillmentProcessLogId}/file/{fileId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fulfillmentProcessLogId != null) localVarPathParams.Add("fulfillmentProcessLogId", Configuration.ApiClient.ParameterToString(fulfillmentProcessLogId)); // path parameter
            if (fileId != null) localVarPathParams.Add("fileId", Configuration.ApiClient.ParameterToString(fileId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteFulfillmentProcessLogFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a file for a fulfillmentProcessLog. Deletes an existing fulfillmentProcessLog file using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fulfillmentProcessLogId">Id of the fulfillmentProcessLog to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteFulfillmentProcessLogFileAsync (int? fulfillmentProcessLogId, int? fileId)
        {
             await DeleteFulfillmentProcessLogFileAsyncWithHttpInfo(fulfillmentProcessLogId, fileId);

        }

        /// <summary>
        /// Delete a file for a fulfillmentProcessLog. Deletes an existing fulfillmentProcessLog file using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fulfillmentProcessLogId">Id of the fulfillmentProcessLog to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteFulfillmentProcessLogFileAsyncWithHttpInfo (int? fulfillmentProcessLogId, int? fileId)
        {
            // verify the required parameter 'fulfillmentProcessLogId' is set
            if (fulfillmentProcessLogId == null)
                throw new ApiException(400, "Missing required parameter 'fulfillmentProcessLogId' when calling FulfillmentProcessLogApi->DeleteFulfillmentProcessLogFile");
            // verify the required parameter 'fileId' is set
            if (fileId == null)
                throw new ApiException(400, "Missing required parameter 'fileId' when calling FulfillmentProcessLogApi->DeleteFulfillmentProcessLogFile");

            var localVarPath = "/beta/fulfillmentProcessLog/{fulfillmentProcessLogId}/file/{fileId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fulfillmentProcessLogId != null) localVarPathParams.Add("fulfillmentProcessLogId", Configuration.ApiClient.ParameterToString(fulfillmentProcessLogId)); // path parameter
            if (fileId != null) localVarPathParams.Add("fileId", Configuration.ApiClient.ParameterToString(fileId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteFulfillmentProcessLogFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a tag for a fulfillmentProcessLog. Deletes an existing fulfillmentProcessLog tag using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fulfillmentProcessLogId">Id of the fulfillmentProcessLog to remove tag from</param>
        /// <param name="fulfillmentProcessLogTag">The tag to delete</param>
        /// <returns></returns>
        public void DeleteFulfillmentProcessLogTag (int? fulfillmentProcessLogId, string fulfillmentProcessLogTag)
        {
             DeleteFulfillmentProcessLogTagWithHttpInfo(fulfillmentProcessLogId, fulfillmentProcessLogTag);
        }

        /// <summary>
        /// Delete a tag for a fulfillmentProcessLog. Deletes an existing fulfillmentProcessLog tag using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fulfillmentProcessLogId">Id of the fulfillmentProcessLog to remove tag from</param>
        /// <param name="fulfillmentProcessLogTag">The tag to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteFulfillmentProcessLogTagWithHttpInfo (int? fulfillmentProcessLogId, string fulfillmentProcessLogTag)
        {
            // verify the required parameter 'fulfillmentProcessLogId' is set
            if (fulfillmentProcessLogId == null)
                throw new ApiException(400, "Missing required parameter 'fulfillmentProcessLogId' when calling FulfillmentProcessLogApi->DeleteFulfillmentProcessLogTag");
            // verify the required parameter 'fulfillmentProcessLogTag' is set
            if (fulfillmentProcessLogTag == null)
                throw new ApiException(400, "Missing required parameter 'fulfillmentProcessLogTag' when calling FulfillmentProcessLogApi->DeleteFulfillmentProcessLogTag");

            var localVarPath = "/beta/fulfillmentProcessLog/{fulfillmentProcessLogId}/tag/{fulfillmentProcessLogTag}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fulfillmentProcessLogId != null) localVarPathParams.Add("fulfillmentProcessLogId", Configuration.ApiClient.ParameterToString(fulfillmentProcessLogId)); // path parameter
            if (fulfillmentProcessLogTag != null) localVarPathParams.Add("fulfillmentProcessLogTag", Configuration.ApiClient.ParameterToString(fulfillmentProcessLogTag)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteFulfillmentProcessLogTag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a tag for a fulfillmentProcessLog. Deletes an existing fulfillmentProcessLog tag using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fulfillmentProcessLogId">Id of the fulfillmentProcessLog to remove tag from</param>
        /// <param name="fulfillmentProcessLogTag">The tag to delete</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteFulfillmentProcessLogTagAsync (int? fulfillmentProcessLogId, string fulfillmentProcessLogTag)
        {
             await DeleteFulfillmentProcessLogTagAsyncWithHttpInfo(fulfillmentProcessLogId, fulfillmentProcessLogTag);

        }

        /// <summary>
        /// Delete a tag for a fulfillmentProcessLog. Deletes an existing fulfillmentProcessLog tag using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fulfillmentProcessLogId">Id of the fulfillmentProcessLog to remove tag from</param>
        /// <param name="fulfillmentProcessLogTag">The tag to delete</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteFulfillmentProcessLogTagAsyncWithHttpInfo (int? fulfillmentProcessLogId, string fulfillmentProcessLogTag)
        {
            // verify the required parameter 'fulfillmentProcessLogId' is set
            if (fulfillmentProcessLogId == null)
                throw new ApiException(400, "Missing required parameter 'fulfillmentProcessLogId' when calling FulfillmentProcessLogApi->DeleteFulfillmentProcessLogTag");
            // verify the required parameter 'fulfillmentProcessLogTag' is set
            if (fulfillmentProcessLogTag == null)
                throw new ApiException(400, "Missing required parameter 'fulfillmentProcessLogTag' when calling FulfillmentProcessLogApi->DeleteFulfillmentProcessLogTag");

            var localVarPath = "/beta/fulfillmentProcessLog/{fulfillmentProcessLogId}/tag/{fulfillmentProcessLogTag}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fulfillmentProcessLogId != null) localVarPathParams.Add("fulfillmentProcessLogId", Configuration.ApiClient.ParameterToString(fulfillmentProcessLogId)); // path parameter
            if (fulfillmentProcessLogTag != null) localVarPathParams.Add("fulfillmentProcessLogTag", Configuration.ApiClient.ParameterToString(fulfillmentProcessLogTag)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteFulfillmentProcessLogTag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get a duplicated a fulfillmentProcessLog by id Returns a duplicated fulfillmentProcessLog identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fulfillmentProcessLogId">Id of the fulfillmentProcessLog to be duplicated.</param>
        /// <returns>FulfillmentProcessLog</returns>
        public FulfillmentProcessLog GetDuplicateFulfillmentProcessLogById (int? fulfillmentProcessLogId)
        {
             ApiResponse<FulfillmentProcessLog> localVarResponse = GetDuplicateFulfillmentProcessLogByIdWithHttpInfo(fulfillmentProcessLogId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a duplicated a fulfillmentProcessLog by id Returns a duplicated fulfillmentProcessLog identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fulfillmentProcessLogId">Id of the fulfillmentProcessLog to be duplicated.</param>
        /// <returns>ApiResponse of FulfillmentProcessLog</returns>
        public ApiResponse< FulfillmentProcessLog > GetDuplicateFulfillmentProcessLogByIdWithHttpInfo (int? fulfillmentProcessLogId)
        {
            // verify the required parameter 'fulfillmentProcessLogId' is set
            if (fulfillmentProcessLogId == null)
                throw new ApiException(400, "Missing required parameter 'fulfillmentProcessLogId' when calling FulfillmentProcessLogApi->GetDuplicateFulfillmentProcessLogById");

            var localVarPath = "/beta/fulfillmentProcessLog/duplicate/{fulfillmentProcessLogId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fulfillmentProcessLogId != null) localVarPathParams.Add("fulfillmentProcessLogId", Configuration.ApiClient.ParameterToString(fulfillmentProcessLogId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDuplicateFulfillmentProcessLogById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FulfillmentProcessLog>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FulfillmentProcessLog) Configuration.ApiClient.Deserialize(localVarResponse, typeof(FulfillmentProcessLog)));
        }

        /// <summary>
        /// Get a duplicated a fulfillmentProcessLog by id Returns a duplicated fulfillmentProcessLog identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fulfillmentProcessLogId">Id of the fulfillmentProcessLog to be duplicated.</param>
        /// <returns>Task of FulfillmentProcessLog</returns>
        public async System.Threading.Tasks.Task<FulfillmentProcessLog> GetDuplicateFulfillmentProcessLogByIdAsync (int? fulfillmentProcessLogId)
        {
             ApiResponse<FulfillmentProcessLog> localVarResponse = await GetDuplicateFulfillmentProcessLogByIdAsyncWithHttpInfo(fulfillmentProcessLogId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a duplicated a fulfillmentProcessLog by id Returns a duplicated fulfillmentProcessLog identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fulfillmentProcessLogId">Id of the fulfillmentProcessLog to be duplicated.</param>
        /// <returns>Task of ApiResponse (FulfillmentProcessLog)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FulfillmentProcessLog>> GetDuplicateFulfillmentProcessLogByIdAsyncWithHttpInfo (int? fulfillmentProcessLogId)
        {
            // verify the required parameter 'fulfillmentProcessLogId' is set
            if (fulfillmentProcessLogId == null)
                throw new ApiException(400, "Missing required parameter 'fulfillmentProcessLogId' when calling FulfillmentProcessLogApi->GetDuplicateFulfillmentProcessLogById");

            var localVarPath = "/beta/fulfillmentProcessLog/duplicate/{fulfillmentProcessLogId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fulfillmentProcessLogId != null) localVarPathParams.Add("fulfillmentProcessLogId", Configuration.ApiClient.ParameterToString(fulfillmentProcessLogId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDuplicateFulfillmentProcessLogById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FulfillmentProcessLog>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FulfillmentProcessLog) Configuration.ApiClient.Deserialize(localVarResponse, typeof(FulfillmentProcessLog)));
        }

        /// <summary>
        /// Search fulfillmentProcessLogs by filter Returns the list of fulfillmentProcessLogs that match the given filter.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>List&lt;FulfillmentProcessLog&gt;</returns>
        public List<FulfillmentProcessLog> GetFulfillmentProcessLogByFilter (string filter = null, int? page = null, int? limit = null, string sort = null)
        {
             ApiResponse<List<FulfillmentProcessLog>> localVarResponse = GetFulfillmentProcessLogByFilterWithHttpInfo(filter, page, limit, sort);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Search fulfillmentProcessLogs by filter Returns the list of fulfillmentProcessLogs that match the given filter.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>ApiResponse of List&lt;FulfillmentProcessLog&gt;</returns>
        public ApiResponse< List<FulfillmentProcessLog> > GetFulfillmentProcessLogByFilterWithHttpInfo (string filter = null, int? page = null, int? limit = null, string sort = null)
        {

            var localVarPath = "/beta/fulfillmentProcessLog/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (filter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (page != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFulfillmentProcessLogByFilter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<FulfillmentProcessLog>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<FulfillmentProcessLog>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<FulfillmentProcessLog>)));
        }

        /// <summary>
        /// Search fulfillmentProcessLogs by filter Returns the list of fulfillmentProcessLogs that match the given filter.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>Task of List&lt;FulfillmentProcessLog&gt;</returns>
        public async System.Threading.Tasks.Task<List<FulfillmentProcessLog>> GetFulfillmentProcessLogByFilterAsync (string filter = null, int? page = null, int? limit = null, string sort = null)
        {
             ApiResponse<List<FulfillmentProcessLog>> localVarResponse = await GetFulfillmentProcessLogByFilterAsyncWithHttpInfo(filter, page, limit, sort);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Search fulfillmentProcessLogs by filter Returns the list of fulfillmentProcessLogs that match the given filter.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;FulfillmentProcessLog&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<FulfillmentProcessLog>>> GetFulfillmentProcessLogByFilterAsyncWithHttpInfo (string filter = null, int? page = null, int? limit = null, string sort = null)
        {

            var localVarPath = "/beta/fulfillmentProcessLog/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (filter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (page != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFulfillmentProcessLogByFilter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<FulfillmentProcessLog>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<FulfillmentProcessLog>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<FulfillmentProcessLog>)));
        }

        /// <summary>
        /// Get a fulfillmentProcessLog by id Returns the fulfillmentProcessLog identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fulfillmentProcessLogId">Id of the fulfillmentProcessLog to be returned.</param>
        /// <returns>FulfillmentProcessLog</returns>
        public FulfillmentProcessLog GetFulfillmentProcessLogById (int? fulfillmentProcessLogId)
        {
             ApiResponse<FulfillmentProcessLog> localVarResponse = GetFulfillmentProcessLogByIdWithHttpInfo(fulfillmentProcessLogId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a fulfillmentProcessLog by id Returns the fulfillmentProcessLog identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fulfillmentProcessLogId">Id of the fulfillmentProcessLog to be returned.</param>
        /// <returns>ApiResponse of FulfillmentProcessLog</returns>
        public ApiResponse< FulfillmentProcessLog > GetFulfillmentProcessLogByIdWithHttpInfo (int? fulfillmentProcessLogId)
        {
            // verify the required parameter 'fulfillmentProcessLogId' is set
            if (fulfillmentProcessLogId == null)
                throw new ApiException(400, "Missing required parameter 'fulfillmentProcessLogId' when calling FulfillmentProcessLogApi->GetFulfillmentProcessLogById");

            var localVarPath = "/beta/fulfillmentProcessLog/{fulfillmentProcessLogId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fulfillmentProcessLogId != null) localVarPathParams.Add("fulfillmentProcessLogId", Configuration.ApiClient.ParameterToString(fulfillmentProcessLogId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFulfillmentProcessLogById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FulfillmentProcessLog>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FulfillmentProcessLog) Configuration.ApiClient.Deserialize(localVarResponse, typeof(FulfillmentProcessLog)));
        }

        /// <summary>
        /// Get a fulfillmentProcessLog by id Returns the fulfillmentProcessLog identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fulfillmentProcessLogId">Id of the fulfillmentProcessLog to be returned.</param>
        /// <returns>Task of FulfillmentProcessLog</returns>
        public async System.Threading.Tasks.Task<FulfillmentProcessLog> GetFulfillmentProcessLogByIdAsync (int? fulfillmentProcessLogId)
        {
             ApiResponse<FulfillmentProcessLog> localVarResponse = await GetFulfillmentProcessLogByIdAsyncWithHttpInfo(fulfillmentProcessLogId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a fulfillmentProcessLog by id Returns the fulfillmentProcessLog identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fulfillmentProcessLogId">Id of the fulfillmentProcessLog to be returned.</param>
        /// <returns>Task of ApiResponse (FulfillmentProcessLog)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FulfillmentProcessLog>> GetFulfillmentProcessLogByIdAsyncWithHttpInfo (int? fulfillmentProcessLogId)
        {
            // verify the required parameter 'fulfillmentProcessLogId' is set
            if (fulfillmentProcessLogId == null)
                throw new ApiException(400, "Missing required parameter 'fulfillmentProcessLogId' when calling FulfillmentProcessLogApi->GetFulfillmentProcessLogById");

            var localVarPath = "/beta/fulfillmentProcessLog/{fulfillmentProcessLogId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fulfillmentProcessLogId != null) localVarPathParams.Add("fulfillmentProcessLogId", Configuration.ApiClient.ParameterToString(fulfillmentProcessLogId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFulfillmentProcessLogById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FulfillmentProcessLog>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FulfillmentProcessLog) Configuration.ApiClient.Deserialize(localVarResponse, typeof(FulfillmentProcessLog)));
        }

        /// <summary>
        /// Get the files for a fulfillmentProcessLog. Get all existing fulfillmentProcessLog files.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fulfillmentProcessLogId">Id of the fulfillmentProcessLog to get files for</param>
        /// <returns></returns>
        public void GetFulfillmentProcessLogFiles (int? fulfillmentProcessLogId)
        {
             GetFulfillmentProcessLogFilesWithHttpInfo(fulfillmentProcessLogId);
        }

        /// <summary>
        /// Get the files for a fulfillmentProcessLog. Get all existing fulfillmentProcessLog files.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fulfillmentProcessLogId">Id of the fulfillmentProcessLog to get files for</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GetFulfillmentProcessLogFilesWithHttpInfo (int? fulfillmentProcessLogId)
        {
            // verify the required parameter 'fulfillmentProcessLogId' is set
            if (fulfillmentProcessLogId == null)
                throw new ApiException(400, "Missing required parameter 'fulfillmentProcessLogId' when calling FulfillmentProcessLogApi->GetFulfillmentProcessLogFiles");

            var localVarPath = "/beta/fulfillmentProcessLog/{fulfillmentProcessLogId}/file";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fulfillmentProcessLogId != null) localVarPathParams.Add("fulfillmentProcessLogId", Configuration.ApiClient.ParameterToString(fulfillmentProcessLogId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFulfillmentProcessLogFiles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get the files for a fulfillmentProcessLog. Get all existing fulfillmentProcessLog files.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fulfillmentProcessLogId">Id of the fulfillmentProcessLog to get files for</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetFulfillmentProcessLogFilesAsync (int? fulfillmentProcessLogId)
        {
             await GetFulfillmentProcessLogFilesAsyncWithHttpInfo(fulfillmentProcessLogId);

        }

        /// <summary>
        /// Get the files for a fulfillmentProcessLog. Get all existing fulfillmentProcessLog files.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fulfillmentProcessLogId">Id of the fulfillmentProcessLog to get files for</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetFulfillmentProcessLogFilesAsyncWithHttpInfo (int? fulfillmentProcessLogId)
        {
            // verify the required parameter 'fulfillmentProcessLogId' is set
            if (fulfillmentProcessLogId == null)
                throw new ApiException(400, "Missing required parameter 'fulfillmentProcessLogId' when calling FulfillmentProcessLogApi->GetFulfillmentProcessLogFiles");

            var localVarPath = "/beta/fulfillmentProcessLog/{fulfillmentProcessLogId}/file";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fulfillmentProcessLogId != null) localVarPathParams.Add("fulfillmentProcessLogId", Configuration.ApiClient.ParameterToString(fulfillmentProcessLogId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFulfillmentProcessLogFiles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get the tags for a fulfillmentProcessLog. Get all existing fulfillmentProcessLog tags.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fulfillmentProcessLogId">Id of the fulfillmentProcessLog to get tags for</param>
        /// <returns></returns>
        public void GetFulfillmentProcessLogTags (int? fulfillmentProcessLogId)
        {
             GetFulfillmentProcessLogTagsWithHttpInfo(fulfillmentProcessLogId);
        }

        /// <summary>
        /// Get the tags for a fulfillmentProcessLog. Get all existing fulfillmentProcessLog tags.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fulfillmentProcessLogId">Id of the fulfillmentProcessLog to get tags for</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GetFulfillmentProcessLogTagsWithHttpInfo (int? fulfillmentProcessLogId)
        {
            // verify the required parameter 'fulfillmentProcessLogId' is set
            if (fulfillmentProcessLogId == null)
                throw new ApiException(400, "Missing required parameter 'fulfillmentProcessLogId' when calling FulfillmentProcessLogApi->GetFulfillmentProcessLogTags");

            var localVarPath = "/beta/fulfillmentProcessLog/{fulfillmentProcessLogId}/tag";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fulfillmentProcessLogId != null) localVarPathParams.Add("fulfillmentProcessLogId", Configuration.ApiClient.ParameterToString(fulfillmentProcessLogId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFulfillmentProcessLogTags", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get the tags for a fulfillmentProcessLog. Get all existing fulfillmentProcessLog tags.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fulfillmentProcessLogId">Id of the fulfillmentProcessLog to get tags for</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetFulfillmentProcessLogTagsAsync (int? fulfillmentProcessLogId)
        {
             await GetFulfillmentProcessLogTagsAsyncWithHttpInfo(fulfillmentProcessLogId);

        }

        /// <summary>
        /// Get the tags for a fulfillmentProcessLog. Get all existing fulfillmentProcessLog tags.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fulfillmentProcessLogId">Id of the fulfillmentProcessLog to get tags for</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetFulfillmentProcessLogTagsAsyncWithHttpInfo (int? fulfillmentProcessLogId)
        {
            // verify the required parameter 'fulfillmentProcessLogId' is set
            if (fulfillmentProcessLogId == null)
                throw new ApiException(400, "Missing required parameter 'fulfillmentProcessLogId' when calling FulfillmentProcessLogApi->GetFulfillmentProcessLogTags");

            var localVarPath = "/beta/fulfillmentProcessLog/{fulfillmentProcessLogId}/tag";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fulfillmentProcessLogId != null) localVarPathParams.Add("fulfillmentProcessLogId", Configuration.ApiClient.ParameterToString(fulfillmentProcessLogId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFulfillmentProcessLogTags", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

    }
}
