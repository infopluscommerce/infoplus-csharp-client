/* 
 * Infoplus API
 *
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Infoplus.Client;
using Infoplus.Model;

namespace Infoplus.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IGs1128LabelApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Add new audit for a gs1128Label
        /// </summary>
        /// <remarks>
        /// Adds an audit to an existing gs1128Label.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gs1128LabelId">Id of the gs1128Label to add an audit to</param>
        /// <param name="gs1128LabelAudit">The audit to add</param>
        /// <returns></returns>
        void AddGs1128LabelAudit (int? gs1128LabelId, string gs1128LabelAudit);

        /// <summary>
        /// Add new audit for a gs1128Label
        /// </summary>
        /// <remarks>
        /// Adds an audit to an existing gs1128Label.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gs1128LabelId">Id of the gs1128Label to add an audit to</param>
        /// <param name="gs1128LabelAudit">The audit to add</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddGs1128LabelAuditWithHttpInfo (int? gs1128LabelId, string gs1128LabelAudit);
        /// <summary>
        /// Attach a file to a gs1128Label
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing gs1128Label.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gs1128LabelId">Id of the gs1128Label to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns></returns>
        void AddGs1128LabelFile (int? gs1128LabelId, string fileName);

        /// <summary>
        /// Attach a file to a gs1128Label
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing gs1128Label.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gs1128LabelId">Id of the gs1128Label to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddGs1128LabelFileWithHttpInfo (int? gs1128LabelId, string fileName);
        /// <summary>
        /// Attach a file to a gs1128Label by URL.
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing gs1128Label by URL.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="gs1128LabelId">Id of the gs1128Label to add an file to</param>
        /// <returns></returns>
        void AddGs1128LabelFileByURL (RecordFile body, int? gs1128LabelId);

        /// <summary>
        /// Attach a file to a gs1128Label by URL.
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing gs1128Label by URL.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="gs1128LabelId">Id of the gs1128Label to add an file to</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddGs1128LabelFileByURLWithHttpInfo (RecordFile body, int? gs1128LabelId);
        /// <summary>
        /// Add new tags for a gs1128Label.
        /// </summary>
        /// <remarks>
        /// Adds a tag to an existing gs1128Label.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gs1128LabelId">Id of the gs1128Label to add a tag to</param>
        /// <param name="gs1128LabelTag">The tag to add</param>
        /// <returns></returns>
        void AddGs1128LabelTag (int? gs1128LabelId, string gs1128LabelTag);

        /// <summary>
        /// Add new tags for a gs1128Label.
        /// </summary>
        /// <remarks>
        /// Adds a tag to an existing gs1128Label.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gs1128LabelId">Id of the gs1128Label to add a tag to</param>
        /// <param name="gs1128LabelTag">The tag to add</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddGs1128LabelTagWithHttpInfo (int? gs1128LabelId, string gs1128LabelTag);
        /// <summary>
        /// Delete a gs1128Label
        /// </summary>
        /// <remarks>
        /// Deletes the gs1128Label identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gs1128LabelId">Id of the gs1128Label to be deleted.</param>
        /// <returns></returns>
        void DeleteGs1128Label (int? gs1128LabelId);

        /// <summary>
        /// Delete a gs1128Label
        /// </summary>
        /// <remarks>
        /// Deletes the gs1128Label identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gs1128LabelId">Id of the gs1128Label to be deleted.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteGs1128LabelWithHttpInfo (int? gs1128LabelId);
        /// <summary>
        /// Delete a file for a gs1128Label.
        /// </summary>
        /// <remarks>
        /// Deletes an existing gs1128Label file using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gs1128LabelId">Id of the gs1128Label to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns></returns>
        void DeleteGs1128LabelFile (int? gs1128LabelId, int? fileId);

        /// <summary>
        /// Delete a file for a gs1128Label.
        /// </summary>
        /// <remarks>
        /// Deletes an existing gs1128Label file using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gs1128LabelId">Id of the gs1128Label to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteGs1128LabelFileWithHttpInfo (int? gs1128LabelId, int? fileId);
        /// <summary>
        /// Delete a tag for a gs1128Label.
        /// </summary>
        /// <remarks>
        /// Deletes an existing gs1128Label tag using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gs1128LabelId">Id of the gs1128Label to remove tag from</param>
        /// <param name="gs1128LabelTag">The tag to delete</param>
        /// <returns></returns>
        void DeleteGs1128LabelTag (int? gs1128LabelId, string gs1128LabelTag);

        /// <summary>
        /// Delete a tag for a gs1128Label.
        /// </summary>
        /// <remarks>
        /// Deletes an existing gs1128Label tag using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gs1128LabelId">Id of the gs1128Label to remove tag from</param>
        /// <param name="gs1128LabelTag">The tag to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteGs1128LabelTagWithHttpInfo (int? gs1128LabelId, string gs1128LabelTag);
        /// <summary>
        /// Get a duplicated a gs1128Label by id
        /// </summary>
        /// <remarks>
        /// Returns a duplicated gs1128Label identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gs1128LabelId">Id of the gs1128Label to be duplicated.</param>
        /// <returns>Gs1128Label</returns>
        Gs1128Label GetDuplicateGs1128LabelById (int? gs1128LabelId);

        /// <summary>
        /// Get a duplicated a gs1128Label by id
        /// </summary>
        /// <remarks>
        /// Returns a duplicated gs1128Label identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gs1128LabelId">Id of the gs1128Label to be duplicated.</param>
        /// <returns>ApiResponse of Gs1128Label</returns>
        ApiResponse<Gs1128Label> GetDuplicateGs1128LabelByIdWithHttpInfo (int? gs1128LabelId);
        /// <summary>
        /// Search gs1128Labels by filter
        /// </summary>
        /// <remarks>
        /// Returns the list of gs1128Labels that match the given filter.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>List&lt;Gs1128Label&gt;</returns>
        List<Gs1128Label> GetGs1128LabelByFilter (string filter = null, int? page = null, int? limit = null, string sort = null);

        /// <summary>
        /// Search gs1128Labels by filter
        /// </summary>
        /// <remarks>
        /// Returns the list of gs1128Labels that match the given filter.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>ApiResponse of List&lt;Gs1128Label&gt;</returns>
        ApiResponse<List<Gs1128Label>> GetGs1128LabelByFilterWithHttpInfo (string filter = null, int? page = null, int? limit = null, string sort = null);
        /// <summary>
        /// Get a gs1128Label by id
        /// </summary>
        /// <remarks>
        /// Returns the gs1128Label identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gs1128LabelId">Id of the gs1128Label to be returned.</param>
        /// <returns>Gs1128Label</returns>
        Gs1128Label GetGs1128LabelById (int? gs1128LabelId);

        /// <summary>
        /// Get a gs1128Label by id
        /// </summary>
        /// <remarks>
        /// Returns the gs1128Label identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gs1128LabelId">Id of the gs1128Label to be returned.</param>
        /// <returns>ApiResponse of Gs1128Label</returns>
        ApiResponse<Gs1128Label> GetGs1128LabelByIdWithHttpInfo (int? gs1128LabelId);
        /// <summary>
        /// Get the files for a gs1128Label.
        /// </summary>
        /// <remarks>
        /// Get all existing gs1128Label files.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gs1128LabelId">Id of the gs1128Label to get files for</param>
        /// <returns></returns>
        void GetGs1128LabelFiles (int? gs1128LabelId);

        /// <summary>
        /// Get the files for a gs1128Label.
        /// </summary>
        /// <remarks>
        /// Get all existing gs1128Label files.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gs1128LabelId">Id of the gs1128Label to get files for</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetGs1128LabelFilesWithHttpInfo (int? gs1128LabelId);
        /// <summary>
        /// Get the tags for a gs1128Label.
        /// </summary>
        /// <remarks>
        /// Get all existing gs1128Label tags.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gs1128LabelId">Id of the gs1128Label to get tags for</param>
        /// <returns></returns>
        void GetGs1128LabelTags (int? gs1128LabelId);

        /// <summary>
        /// Get the tags for a gs1128Label.
        /// </summary>
        /// <remarks>
        /// Get all existing gs1128Label tags.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gs1128LabelId">Id of the gs1128Label to get tags for</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetGs1128LabelTagsWithHttpInfo (int? gs1128LabelId);
        /// <summary>
        /// Update a gs1128Label custom fields
        /// </summary>
        /// <remarks>
        /// Updates an existing gs1128Label custom fields using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Gs1128Label to be updated.</param>
        /// <returns></returns>
        void UpdateGs1128LabelCustomFields (Gs1128Label body);

        /// <summary>
        /// Update a gs1128Label custom fields
        /// </summary>
        /// <remarks>
        /// Updates an existing gs1128Label custom fields using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Gs1128Label to be updated.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateGs1128LabelCustomFieldsWithHttpInfo (Gs1128Label body);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Add new audit for a gs1128Label
        /// </summary>
        /// <remarks>
        /// Adds an audit to an existing gs1128Label.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gs1128LabelId">Id of the gs1128Label to add an audit to</param>
        /// <param name="gs1128LabelAudit">The audit to add</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddGs1128LabelAuditAsync (int? gs1128LabelId, string gs1128LabelAudit);

        /// <summary>
        /// Add new audit for a gs1128Label
        /// </summary>
        /// <remarks>
        /// Adds an audit to an existing gs1128Label.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gs1128LabelId">Id of the gs1128Label to add an audit to</param>
        /// <param name="gs1128LabelAudit">The audit to add</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddGs1128LabelAuditAsyncWithHttpInfo (int? gs1128LabelId, string gs1128LabelAudit);
        /// <summary>
        /// Attach a file to a gs1128Label
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing gs1128Label.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gs1128LabelId">Id of the gs1128Label to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddGs1128LabelFileAsync (int? gs1128LabelId, string fileName);

        /// <summary>
        /// Attach a file to a gs1128Label
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing gs1128Label.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gs1128LabelId">Id of the gs1128Label to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddGs1128LabelFileAsyncWithHttpInfo (int? gs1128LabelId, string fileName);
        /// <summary>
        /// Attach a file to a gs1128Label by URL.
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing gs1128Label by URL.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="gs1128LabelId">Id of the gs1128Label to add an file to</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddGs1128LabelFileByURLAsync (RecordFile body, int? gs1128LabelId);

        /// <summary>
        /// Attach a file to a gs1128Label by URL.
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing gs1128Label by URL.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="gs1128LabelId">Id of the gs1128Label to add an file to</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddGs1128LabelFileByURLAsyncWithHttpInfo (RecordFile body, int? gs1128LabelId);
        /// <summary>
        /// Add new tags for a gs1128Label.
        /// </summary>
        /// <remarks>
        /// Adds a tag to an existing gs1128Label.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gs1128LabelId">Id of the gs1128Label to add a tag to</param>
        /// <param name="gs1128LabelTag">The tag to add</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddGs1128LabelTagAsync (int? gs1128LabelId, string gs1128LabelTag);

        /// <summary>
        /// Add new tags for a gs1128Label.
        /// </summary>
        /// <remarks>
        /// Adds a tag to an existing gs1128Label.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gs1128LabelId">Id of the gs1128Label to add a tag to</param>
        /// <param name="gs1128LabelTag">The tag to add</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddGs1128LabelTagAsyncWithHttpInfo (int? gs1128LabelId, string gs1128LabelTag);
        /// <summary>
        /// Delete a gs1128Label
        /// </summary>
        /// <remarks>
        /// Deletes the gs1128Label identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gs1128LabelId">Id of the gs1128Label to be deleted.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteGs1128LabelAsync (int? gs1128LabelId);

        /// <summary>
        /// Delete a gs1128Label
        /// </summary>
        /// <remarks>
        /// Deletes the gs1128Label identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gs1128LabelId">Id of the gs1128Label to be deleted.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteGs1128LabelAsyncWithHttpInfo (int? gs1128LabelId);
        /// <summary>
        /// Delete a file for a gs1128Label.
        /// </summary>
        /// <remarks>
        /// Deletes an existing gs1128Label file using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gs1128LabelId">Id of the gs1128Label to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteGs1128LabelFileAsync (int? gs1128LabelId, int? fileId);

        /// <summary>
        /// Delete a file for a gs1128Label.
        /// </summary>
        /// <remarks>
        /// Deletes an existing gs1128Label file using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gs1128LabelId">Id of the gs1128Label to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteGs1128LabelFileAsyncWithHttpInfo (int? gs1128LabelId, int? fileId);
        /// <summary>
        /// Delete a tag for a gs1128Label.
        /// </summary>
        /// <remarks>
        /// Deletes an existing gs1128Label tag using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gs1128LabelId">Id of the gs1128Label to remove tag from</param>
        /// <param name="gs1128LabelTag">The tag to delete</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteGs1128LabelTagAsync (int? gs1128LabelId, string gs1128LabelTag);

        /// <summary>
        /// Delete a tag for a gs1128Label.
        /// </summary>
        /// <remarks>
        /// Deletes an existing gs1128Label tag using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gs1128LabelId">Id of the gs1128Label to remove tag from</param>
        /// <param name="gs1128LabelTag">The tag to delete</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteGs1128LabelTagAsyncWithHttpInfo (int? gs1128LabelId, string gs1128LabelTag);
        /// <summary>
        /// Get a duplicated a gs1128Label by id
        /// </summary>
        /// <remarks>
        /// Returns a duplicated gs1128Label identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gs1128LabelId">Id of the gs1128Label to be duplicated.</param>
        /// <returns>Task of Gs1128Label</returns>
        System.Threading.Tasks.Task<Gs1128Label> GetDuplicateGs1128LabelByIdAsync (int? gs1128LabelId);

        /// <summary>
        /// Get a duplicated a gs1128Label by id
        /// </summary>
        /// <remarks>
        /// Returns a duplicated gs1128Label identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gs1128LabelId">Id of the gs1128Label to be duplicated.</param>
        /// <returns>Task of ApiResponse (Gs1128Label)</returns>
        System.Threading.Tasks.Task<ApiResponse<Gs1128Label>> GetDuplicateGs1128LabelByIdAsyncWithHttpInfo (int? gs1128LabelId);
        /// <summary>
        /// Search gs1128Labels by filter
        /// </summary>
        /// <remarks>
        /// Returns the list of gs1128Labels that match the given filter.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>Task of List&lt;Gs1128Label&gt;</returns>
        System.Threading.Tasks.Task<List<Gs1128Label>> GetGs1128LabelByFilterAsync (string filter = null, int? page = null, int? limit = null, string sort = null);

        /// <summary>
        /// Search gs1128Labels by filter
        /// </summary>
        /// <remarks>
        /// Returns the list of gs1128Labels that match the given filter.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Gs1128Label&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Gs1128Label>>> GetGs1128LabelByFilterAsyncWithHttpInfo (string filter = null, int? page = null, int? limit = null, string sort = null);
        /// <summary>
        /// Get a gs1128Label by id
        /// </summary>
        /// <remarks>
        /// Returns the gs1128Label identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gs1128LabelId">Id of the gs1128Label to be returned.</param>
        /// <returns>Task of Gs1128Label</returns>
        System.Threading.Tasks.Task<Gs1128Label> GetGs1128LabelByIdAsync (int? gs1128LabelId);

        /// <summary>
        /// Get a gs1128Label by id
        /// </summary>
        /// <remarks>
        /// Returns the gs1128Label identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gs1128LabelId">Id of the gs1128Label to be returned.</param>
        /// <returns>Task of ApiResponse (Gs1128Label)</returns>
        System.Threading.Tasks.Task<ApiResponse<Gs1128Label>> GetGs1128LabelByIdAsyncWithHttpInfo (int? gs1128LabelId);
        /// <summary>
        /// Get the files for a gs1128Label.
        /// </summary>
        /// <remarks>
        /// Get all existing gs1128Label files.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gs1128LabelId">Id of the gs1128Label to get files for</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetGs1128LabelFilesAsync (int? gs1128LabelId);

        /// <summary>
        /// Get the files for a gs1128Label.
        /// </summary>
        /// <remarks>
        /// Get all existing gs1128Label files.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gs1128LabelId">Id of the gs1128Label to get files for</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetGs1128LabelFilesAsyncWithHttpInfo (int? gs1128LabelId);
        /// <summary>
        /// Get the tags for a gs1128Label.
        /// </summary>
        /// <remarks>
        /// Get all existing gs1128Label tags.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gs1128LabelId">Id of the gs1128Label to get tags for</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetGs1128LabelTagsAsync (int? gs1128LabelId);

        /// <summary>
        /// Get the tags for a gs1128Label.
        /// </summary>
        /// <remarks>
        /// Get all existing gs1128Label tags.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gs1128LabelId">Id of the gs1128Label to get tags for</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetGs1128LabelTagsAsyncWithHttpInfo (int? gs1128LabelId);
        /// <summary>
        /// Update a gs1128Label custom fields
        /// </summary>
        /// <remarks>
        /// Updates an existing gs1128Label custom fields using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Gs1128Label to be updated.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateGs1128LabelCustomFieldsAsync (Gs1128Label body);

        /// <summary>
        /// Update a gs1128Label custom fields
        /// </summary>
        /// <remarks>
        /// Updates an existing gs1128Label custom fields using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Gs1128Label to be updated.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateGs1128LabelCustomFieldsAsyncWithHttpInfo (Gs1128Label body);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class Gs1128LabelApi : IGs1128LabelApi
    {
        private Infoplus.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="Gs1128LabelApi"/> class.
        /// </summary>
        /// <returns></returns>
        public Gs1128LabelApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = Infoplus.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="Gs1128LabelApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public Gs1128LabelApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Infoplus.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Infoplus.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Add new audit for a gs1128Label Adds an audit to an existing gs1128Label.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gs1128LabelId">Id of the gs1128Label to add an audit to</param>
        /// <param name="gs1128LabelAudit">The audit to add</param>
        /// <returns></returns>
        public void AddGs1128LabelAudit (int? gs1128LabelId, string gs1128LabelAudit)
        {
             AddGs1128LabelAuditWithHttpInfo(gs1128LabelId, gs1128LabelAudit);
        }

        /// <summary>
        /// Add new audit for a gs1128Label Adds an audit to an existing gs1128Label.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gs1128LabelId">Id of the gs1128Label to add an audit to</param>
        /// <param name="gs1128LabelAudit">The audit to add</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AddGs1128LabelAuditWithHttpInfo (int? gs1128LabelId, string gs1128LabelAudit)
        {
            // verify the required parameter 'gs1128LabelId' is set
            if (gs1128LabelId == null)
                throw new ApiException(400, "Missing required parameter 'gs1128LabelId' when calling Gs1128LabelApi->AddGs1128LabelAudit");
            // verify the required parameter 'gs1128LabelAudit' is set
            if (gs1128LabelAudit == null)
                throw new ApiException(400, "Missing required parameter 'gs1128LabelAudit' when calling Gs1128LabelApi->AddGs1128LabelAudit");

            var localVarPath = "/beta/gs1128Label/{gs1128LabelId}/audit/{gs1128LabelAudit}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (gs1128LabelId != null) localVarPathParams.Add("gs1128LabelId", Configuration.ApiClient.ParameterToString(gs1128LabelId)); // path parameter
            if (gs1128LabelAudit != null) localVarPathParams.Add("gs1128LabelAudit", Configuration.ApiClient.ParameterToString(gs1128LabelAudit)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddGs1128LabelAudit", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Add new audit for a gs1128Label Adds an audit to an existing gs1128Label.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gs1128LabelId">Id of the gs1128Label to add an audit to</param>
        /// <param name="gs1128LabelAudit">The audit to add</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddGs1128LabelAuditAsync (int? gs1128LabelId, string gs1128LabelAudit)
        {
             await AddGs1128LabelAuditAsyncWithHttpInfo(gs1128LabelId, gs1128LabelAudit);

        }

        /// <summary>
        /// Add new audit for a gs1128Label Adds an audit to an existing gs1128Label.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gs1128LabelId">Id of the gs1128Label to add an audit to</param>
        /// <param name="gs1128LabelAudit">The audit to add</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddGs1128LabelAuditAsyncWithHttpInfo (int? gs1128LabelId, string gs1128LabelAudit)
        {
            // verify the required parameter 'gs1128LabelId' is set
            if (gs1128LabelId == null)
                throw new ApiException(400, "Missing required parameter 'gs1128LabelId' when calling Gs1128LabelApi->AddGs1128LabelAudit");
            // verify the required parameter 'gs1128LabelAudit' is set
            if (gs1128LabelAudit == null)
                throw new ApiException(400, "Missing required parameter 'gs1128LabelAudit' when calling Gs1128LabelApi->AddGs1128LabelAudit");

            var localVarPath = "/beta/gs1128Label/{gs1128LabelId}/audit/{gs1128LabelAudit}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (gs1128LabelId != null) localVarPathParams.Add("gs1128LabelId", Configuration.ApiClient.ParameterToString(gs1128LabelId)); // path parameter
            if (gs1128LabelAudit != null) localVarPathParams.Add("gs1128LabelAudit", Configuration.ApiClient.ParameterToString(gs1128LabelAudit)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddGs1128LabelAudit", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Attach a file to a gs1128Label Adds a file to an existing gs1128Label.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gs1128LabelId">Id of the gs1128Label to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns></returns>
        public void AddGs1128LabelFile (int? gs1128LabelId, string fileName)
        {
             AddGs1128LabelFileWithHttpInfo(gs1128LabelId, fileName);
        }

        /// <summary>
        /// Attach a file to a gs1128Label Adds a file to an existing gs1128Label.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gs1128LabelId">Id of the gs1128Label to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AddGs1128LabelFileWithHttpInfo (int? gs1128LabelId, string fileName)
        {
            // verify the required parameter 'gs1128LabelId' is set
            if (gs1128LabelId == null)
                throw new ApiException(400, "Missing required parameter 'gs1128LabelId' when calling Gs1128LabelApi->AddGs1128LabelFile");
            // verify the required parameter 'fileName' is set
            if (fileName == null)
                throw new ApiException(400, "Missing required parameter 'fileName' when calling Gs1128LabelApi->AddGs1128LabelFile");

            var localVarPath = "/beta/gs1128Label/{gs1128LabelId}/file/{fileName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (gs1128LabelId != null) localVarPathParams.Add("gs1128LabelId", Configuration.ApiClient.ParameterToString(gs1128LabelId)); // path parameter
            if (fileName != null) localVarPathParams.Add("fileName", Configuration.ApiClient.ParameterToString(fileName)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddGs1128LabelFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Attach a file to a gs1128Label Adds a file to an existing gs1128Label.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gs1128LabelId">Id of the gs1128Label to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddGs1128LabelFileAsync (int? gs1128LabelId, string fileName)
        {
             await AddGs1128LabelFileAsyncWithHttpInfo(gs1128LabelId, fileName);

        }

        /// <summary>
        /// Attach a file to a gs1128Label Adds a file to an existing gs1128Label.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gs1128LabelId">Id of the gs1128Label to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddGs1128LabelFileAsyncWithHttpInfo (int? gs1128LabelId, string fileName)
        {
            // verify the required parameter 'gs1128LabelId' is set
            if (gs1128LabelId == null)
                throw new ApiException(400, "Missing required parameter 'gs1128LabelId' when calling Gs1128LabelApi->AddGs1128LabelFile");
            // verify the required parameter 'fileName' is set
            if (fileName == null)
                throw new ApiException(400, "Missing required parameter 'fileName' when calling Gs1128LabelApi->AddGs1128LabelFile");

            var localVarPath = "/beta/gs1128Label/{gs1128LabelId}/file/{fileName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (gs1128LabelId != null) localVarPathParams.Add("gs1128LabelId", Configuration.ApiClient.ParameterToString(gs1128LabelId)); // path parameter
            if (fileName != null) localVarPathParams.Add("fileName", Configuration.ApiClient.ParameterToString(fileName)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddGs1128LabelFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Attach a file to a gs1128Label by URL. Adds a file to an existing gs1128Label by URL.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="gs1128LabelId">Id of the gs1128Label to add an file to</param>
        /// <returns></returns>
        public void AddGs1128LabelFileByURL (RecordFile body, int? gs1128LabelId)
        {
             AddGs1128LabelFileByURLWithHttpInfo(body, gs1128LabelId);
        }

        /// <summary>
        /// Attach a file to a gs1128Label by URL. Adds a file to an existing gs1128Label by URL.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="gs1128LabelId">Id of the gs1128Label to add an file to</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AddGs1128LabelFileByURLWithHttpInfo (RecordFile body, int? gs1128LabelId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling Gs1128LabelApi->AddGs1128LabelFileByURL");
            // verify the required parameter 'gs1128LabelId' is set
            if (gs1128LabelId == null)
                throw new ApiException(400, "Missing required parameter 'gs1128LabelId' when calling Gs1128LabelApi->AddGs1128LabelFileByURL");

            var localVarPath = "/beta/gs1128Label/{gs1128LabelId}/file";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (gs1128LabelId != null) localVarPathParams.Add("gs1128LabelId", Configuration.ApiClient.ParameterToString(gs1128LabelId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddGs1128LabelFileByURL", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Attach a file to a gs1128Label by URL. Adds a file to an existing gs1128Label by URL.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="gs1128LabelId">Id of the gs1128Label to add an file to</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddGs1128LabelFileByURLAsync (RecordFile body, int? gs1128LabelId)
        {
             await AddGs1128LabelFileByURLAsyncWithHttpInfo(body, gs1128LabelId);

        }

        /// <summary>
        /// Attach a file to a gs1128Label by URL. Adds a file to an existing gs1128Label by URL.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="gs1128LabelId">Id of the gs1128Label to add an file to</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddGs1128LabelFileByURLAsyncWithHttpInfo (RecordFile body, int? gs1128LabelId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling Gs1128LabelApi->AddGs1128LabelFileByURL");
            // verify the required parameter 'gs1128LabelId' is set
            if (gs1128LabelId == null)
                throw new ApiException(400, "Missing required parameter 'gs1128LabelId' when calling Gs1128LabelApi->AddGs1128LabelFileByURL");

            var localVarPath = "/beta/gs1128Label/{gs1128LabelId}/file";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (gs1128LabelId != null) localVarPathParams.Add("gs1128LabelId", Configuration.ApiClient.ParameterToString(gs1128LabelId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddGs1128LabelFileByURL", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Add new tags for a gs1128Label. Adds a tag to an existing gs1128Label.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gs1128LabelId">Id of the gs1128Label to add a tag to</param>
        /// <param name="gs1128LabelTag">The tag to add</param>
        /// <returns></returns>
        public void AddGs1128LabelTag (int? gs1128LabelId, string gs1128LabelTag)
        {
             AddGs1128LabelTagWithHttpInfo(gs1128LabelId, gs1128LabelTag);
        }

        /// <summary>
        /// Add new tags for a gs1128Label. Adds a tag to an existing gs1128Label.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gs1128LabelId">Id of the gs1128Label to add a tag to</param>
        /// <param name="gs1128LabelTag">The tag to add</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AddGs1128LabelTagWithHttpInfo (int? gs1128LabelId, string gs1128LabelTag)
        {
            // verify the required parameter 'gs1128LabelId' is set
            if (gs1128LabelId == null)
                throw new ApiException(400, "Missing required parameter 'gs1128LabelId' when calling Gs1128LabelApi->AddGs1128LabelTag");
            // verify the required parameter 'gs1128LabelTag' is set
            if (gs1128LabelTag == null)
                throw new ApiException(400, "Missing required parameter 'gs1128LabelTag' when calling Gs1128LabelApi->AddGs1128LabelTag");

            var localVarPath = "/beta/gs1128Label/{gs1128LabelId}/tag/{gs1128LabelTag}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (gs1128LabelId != null) localVarPathParams.Add("gs1128LabelId", Configuration.ApiClient.ParameterToString(gs1128LabelId)); // path parameter
            if (gs1128LabelTag != null) localVarPathParams.Add("gs1128LabelTag", Configuration.ApiClient.ParameterToString(gs1128LabelTag)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddGs1128LabelTag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Add new tags for a gs1128Label. Adds a tag to an existing gs1128Label.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gs1128LabelId">Id of the gs1128Label to add a tag to</param>
        /// <param name="gs1128LabelTag">The tag to add</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddGs1128LabelTagAsync (int? gs1128LabelId, string gs1128LabelTag)
        {
             await AddGs1128LabelTagAsyncWithHttpInfo(gs1128LabelId, gs1128LabelTag);

        }

        /// <summary>
        /// Add new tags for a gs1128Label. Adds a tag to an existing gs1128Label.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gs1128LabelId">Id of the gs1128Label to add a tag to</param>
        /// <param name="gs1128LabelTag">The tag to add</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddGs1128LabelTagAsyncWithHttpInfo (int? gs1128LabelId, string gs1128LabelTag)
        {
            // verify the required parameter 'gs1128LabelId' is set
            if (gs1128LabelId == null)
                throw new ApiException(400, "Missing required parameter 'gs1128LabelId' when calling Gs1128LabelApi->AddGs1128LabelTag");
            // verify the required parameter 'gs1128LabelTag' is set
            if (gs1128LabelTag == null)
                throw new ApiException(400, "Missing required parameter 'gs1128LabelTag' when calling Gs1128LabelApi->AddGs1128LabelTag");

            var localVarPath = "/beta/gs1128Label/{gs1128LabelId}/tag/{gs1128LabelTag}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (gs1128LabelId != null) localVarPathParams.Add("gs1128LabelId", Configuration.ApiClient.ParameterToString(gs1128LabelId)); // path parameter
            if (gs1128LabelTag != null) localVarPathParams.Add("gs1128LabelTag", Configuration.ApiClient.ParameterToString(gs1128LabelTag)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddGs1128LabelTag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a gs1128Label Deletes the gs1128Label identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gs1128LabelId">Id of the gs1128Label to be deleted.</param>
        /// <returns></returns>
        public void DeleteGs1128Label (int? gs1128LabelId)
        {
             DeleteGs1128LabelWithHttpInfo(gs1128LabelId);
        }

        /// <summary>
        /// Delete a gs1128Label Deletes the gs1128Label identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gs1128LabelId">Id of the gs1128Label to be deleted.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteGs1128LabelWithHttpInfo (int? gs1128LabelId)
        {
            // verify the required parameter 'gs1128LabelId' is set
            if (gs1128LabelId == null)
                throw new ApiException(400, "Missing required parameter 'gs1128LabelId' when calling Gs1128LabelApi->DeleteGs1128Label");

            var localVarPath = "/beta/gs1128Label/{gs1128LabelId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (gs1128LabelId != null) localVarPathParams.Add("gs1128LabelId", Configuration.ApiClient.ParameterToString(gs1128LabelId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteGs1128Label", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a gs1128Label Deletes the gs1128Label identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gs1128LabelId">Id of the gs1128Label to be deleted.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteGs1128LabelAsync (int? gs1128LabelId)
        {
             await DeleteGs1128LabelAsyncWithHttpInfo(gs1128LabelId);

        }

        /// <summary>
        /// Delete a gs1128Label Deletes the gs1128Label identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gs1128LabelId">Id of the gs1128Label to be deleted.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteGs1128LabelAsyncWithHttpInfo (int? gs1128LabelId)
        {
            // verify the required parameter 'gs1128LabelId' is set
            if (gs1128LabelId == null)
                throw new ApiException(400, "Missing required parameter 'gs1128LabelId' when calling Gs1128LabelApi->DeleteGs1128Label");

            var localVarPath = "/beta/gs1128Label/{gs1128LabelId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (gs1128LabelId != null) localVarPathParams.Add("gs1128LabelId", Configuration.ApiClient.ParameterToString(gs1128LabelId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteGs1128Label", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a file for a gs1128Label. Deletes an existing gs1128Label file using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gs1128LabelId">Id of the gs1128Label to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns></returns>
        public void DeleteGs1128LabelFile (int? gs1128LabelId, int? fileId)
        {
             DeleteGs1128LabelFileWithHttpInfo(gs1128LabelId, fileId);
        }

        /// <summary>
        /// Delete a file for a gs1128Label. Deletes an existing gs1128Label file using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gs1128LabelId">Id of the gs1128Label to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteGs1128LabelFileWithHttpInfo (int? gs1128LabelId, int? fileId)
        {
            // verify the required parameter 'gs1128LabelId' is set
            if (gs1128LabelId == null)
                throw new ApiException(400, "Missing required parameter 'gs1128LabelId' when calling Gs1128LabelApi->DeleteGs1128LabelFile");
            // verify the required parameter 'fileId' is set
            if (fileId == null)
                throw new ApiException(400, "Missing required parameter 'fileId' when calling Gs1128LabelApi->DeleteGs1128LabelFile");

            var localVarPath = "/beta/gs1128Label/{gs1128LabelId}/file/{fileId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (gs1128LabelId != null) localVarPathParams.Add("gs1128LabelId", Configuration.ApiClient.ParameterToString(gs1128LabelId)); // path parameter
            if (fileId != null) localVarPathParams.Add("fileId", Configuration.ApiClient.ParameterToString(fileId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteGs1128LabelFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a file for a gs1128Label. Deletes an existing gs1128Label file using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gs1128LabelId">Id of the gs1128Label to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteGs1128LabelFileAsync (int? gs1128LabelId, int? fileId)
        {
             await DeleteGs1128LabelFileAsyncWithHttpInfo(gs1128LabelId, fileId);

        }

        /// <summary>
        /// Delete a file for a gs1128Label. Deletes an existing gs1128Label file using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gs1128LabelId">Id of the gs1128Label to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteGs1128LabelFileAsyncWithHttpInfo (int? gs1128LabelId, int? fileId)
        {
            // verify the required parameter 'gs1128LabelId' is set
            if (gs1128LabelId == null)
                throw new ApiException(400, "Missing required parameter 'gs1128LabelId' when calling Gs1128LabelApi->DeleteGs1128LabelFile");
            // verify the required parameter 'fileId' is set
            if (fileId == null)
                throw new ApiException(400, "Missing required parameter 'fileId' when calling Gs1128LabelApi->DeleteGs1128LabelFile");

            var localVarPath = "/beta/gs1128Label/{gs1128LabelId}/file/{fileId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (gs1128LabelId != null) localVarPathParams.Add("gs1128LabelId", Configuration.ApiClient.ParameterToString(gs1128LabelId)); // path parameter
            if (fileId != null) localVarPathParams.Add("fileId", Configuration.ApiClient.ParameterToString(fileId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteGs1128LabelFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a tag for a gs1128Label. Deletes an existing gs1128Label tag using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gs1128LabelId">Id of the gs1128Label to remove tag from</param>
        /// <param name="gs1128LabelTag">The tag to delete</param>
        /// <returns></returns>
        public void DeleteGs1128LabelTag (int? gs1128LabelId, string gs1128LabelTag)
        {
             DeleteGs1128LabelTagWithHttpInfo(gs1128LabelId, gs1128LabelTag);
        }

        /// <summary>
        /// Delete a tag for a gs1128Label. Deletes an existing gs1128Label tag using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gs1128LabelId">Id of the gs1128Label to remove tag from</param>
        /// <param name="gs1128LabelTag">The tag to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteGs1128LabelTagWithHttpInfo (int? gs1128LabelId, string gs1128LabelTag)
        {
            // verify the required parameter 'gs1128LabelId' is set
            if (gs1128LabelId == null)
                throw new ApiException(400, "Missing required parameter 'gs1128LabelId' when calling Gs1128LabelApi->DeleteGs1128LabelTag");
            // verify the required parameter 'gs1128LabelTag' is set
            if (gs1128LabelTag == null)
                throw new ApiException(400, "Missing required parameter 'gs1128LabelTag' when calling Gs1128LabelApi->DeleteGs1128LabelTag");

            var localVarPath = "/beta/gs1128Label/{gs1128LabelId}/tag/{gs1128LabelTag}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (gs1128LabelId != null) localVarPathParams.Add("gs1128LabelId", Configuration.ApiClient.ParameterToString(gs1128LabelId)); // path parameter
            if (gs1128LabelTag != null) localVarPathParams.Add("gs1128LabelTag", Configuration.ApiClient.ParameterToString(gs1128LabelTag)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteGs1128LabelTag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a tag for a gs1128Label. Deletes an existing gs1128Label tag using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gs1128LabelId">Id of the gs1128Label to remove tag from</param>
        /// <param name="gs1128LabelTag">The tag to delete</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteGs1128LabelTagAsync (int? gs1128LabelId, string gs1128LabelTag)
        {
             await DeleteGs1128LabelTagAsyncWithHttpInfo(gs1128LabelId, gs1128LabelTag);

        }

        /// <summary>
        /// Delete a tag for a gs1128Label. Deletes an existing gs1128Label tag using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gs1128LabelId">Id of the gs1128Label to remove tag from</param>
        /// <param name="gs1128LabelTag">The tag to delete</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteGs1128LabelTagAsyncWithHttpInfo (int? gs1128LabelId, string gs1128LabelTag)
        {
            // verify the required parameter 'gs1128LabelId' is set
            if (gs1128LabelId == null)
                throw new ApiException(400, "Missing required parameter 'gs1128LabelId' when calling Gs1128LabelApi->DeleteGs1128LabelTag");
            // verify the required parameter 'gs1128LabelTag' is set
            if (gs1128LabelTag == null)
                throw new ApiException(400, "Missing required parameter 'gs1128LabelTag' when calling Gs1128LabelApi->DeleteGs1128LabelTag");

            var localVarPath = "/beta/gs1128Label/{gs1128LabelId}/tag/{gs1128LabelTag}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (gs1128LabelId != null) localVarPathParams.Add("gs1128LabelId", Configuration.ApiClient.ParameterToString(gs1128LabelId)); // path parameter
            if (gs1128LabelTag != null) localVarPathParams.Add("gs1128LabelTag", Configuration.ApiClient.ParameterToString(gs1128LabelTag)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteGs1128LabelTag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get a duplicated a gs1128Label by id Returns a duplicated gs1128Label identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gs1128LabelId">Id of the gs1128Label to be duplicated.</param>
        /// <returns>Gs1128Label</returns>
        public Gs1128Label GetDuplicateGs1128LabelById (int? gs1128LabelId)
        {
             ApiResponse<Gs1128Label> localVarResponse = GetDuplicateGs1128LabelByIdWithHttpInfo(gs1128LabelId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a duplicated a gs1128Label by id Returns a duplicated gs1128Label identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gs1128LabelId">Id of the gs1128Label to be duplicated.</param>
        /// <returns>ApiResponse of Gs1128Label</returns>
        public ApiResponse< Gs1128Label > GetDuplicateGs1128LabelByIdWithHttpInfo (int? gs1128LabelId)
        {
            // verify the required parameter 'gs1128LabelId' is set
            if (gs1128LabelId == null)
                throw new ApiException(400, "Missing required parameter 'gs1128LabelId' when calling Gs1128LabelApi->GetDuplicateGs1128LabelById");

            var localVarPath = "/beta/gs1128Label/duplicate/{gs1128LabelId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (gs1128LabelId != null) localVarPathParams.Add("gs1128LabelId", Configuration.ApiClient.ParameterToString(gs1128LabelId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDuplicateGs1128LabelById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Gs1128Label>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Gs1128Label) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Gs1128Label)));
        }

        /// <summary>
        /// Get a duplicated a gs1128Label by id Returns a duplicated gs1128Label identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gs1128LabelId">Id of the gs1128Label to be duplicated.</param>
        /// <returns>Task of Gs1128Label</returns>
        public async System.Threading.Tasks.Task<Gs1128Label> GetDuplicateGs1128LabelByIdAsync (int? gs1128LabelId)
        {
             ApiResponse<Gs1128Label> localVarResponse = await GetDuplicateGs1128LabelByIdAsyncWithHttpInfo(gs1128LabelId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a duplicated a gs1128Label by id Returns a duplicated gs1128Label identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gs1128LabelId">Id of the gs1128Label to be duplicated.</param>
        /// <returns>Task of ApiResponse (Gs1128Label)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Gs1128Label>> GetDuplicateGs1128LabelByIdAsyncWithHttpInfo (int? gs1128LabelId)
        {
            // verify the required parameter 'gs1128LabelId' is set
            if (gs1128LabelId == null)
                throw new ApiException(400, "Missing required parameter 'gs1128LabelId' when calling Gs1128LabelApi->GetDuplicateGs1128LabelById");

            var localVarPath = "/beta/gs1128Label/duplicate/{gs1128LabelId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (gs1128LabelId != null) localVarPathParams.Add("gs1128LabelId", Configuration.ApiClient.ParameterToString(gs1128LabelId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDuplicateGs1128LabelById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Gs1128Label>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Gs1128Label) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Gs1128Label)));
        }

        /// <summary>
        /// Search gs1128Labels by filter Returns the list of gs1128Labels that match the given filter.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>List&lt;Gs1128Label&gt;</returns>
        public List<Gs1128Label> GetGs1128LabelByFilter (string filter = null, int? page = null, int? limit = null, string sort = null)
        {
             ApiResponse<List<Gs1128Label>> localVarResponse = GetGs1128LabelByFilterWithHttpInfo(filter, page, limit, sort);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Search gs1128Labels by filter Returns the list of gs1128Labels that match the given filter.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>ApiResponse of List&lt;Gs1128Label&gt;</returns>
        public ApiResponse< List<Gs1128Label> > GetGs1128LabelByFilterWithHttpInfo (string filter = null, int? page = null, int? limit = null, string sort = null)
        {

            var localVarPath = "/beta/gs1128Label/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (filter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (page != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetGs1128LabelByFilter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Gs1128Label>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Gs1128Label>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Gs1128Label>)));
        }

        /// <summary>
        /// Search gs1128Labels by filter Returns the list of gs1128Labels that match the given filter.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>Task of List&lt;Gs1128Label&gt;</returns>
        public async System.Threading.Tasks.Task<List<Gs1128Label>> GetGs1128LabelByFilterAsync (string filter = null, int? page = null, int? limit = null, string sort = null)
        {
             ApiResponse<List<Gs1128Label>> localVarResponse = await GetGs1128LabelByFilterAsyncWithHttpInfo(filter, page, limit, sort);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Search gs1128Labels by filter Returns the list of gs1128Labels that match the given filter.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Gs1128Label&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Gs1128Label>>> GetGs1128LabelByFilterAsyncWithHttpInfo (string filter = null, int? page = null, int? limit = null, string sort = null)
        {

            var localVarPath = "/beta/gs1128Label/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (filter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (page != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetGs1128LabelByFilter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Gs1128Label>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Gs1128Label>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Gs1128Label>)));
        }

        /// <summary>
        /// Get a gs1128Label by id Returns the gs1128Label identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gs1128LabelId">Id of the gs1128Label to be returned.</param>
        /// <returns>Gs1128Label</returns>
        public Gs1128Label GetGs1128LabelById (int? gs1128LabelId)
        {
             ApiResponse<Gs1128Label> localVarResponse = GetGs1128LabelByIdWithHttpInfo(gs1128LabelId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a gs1128Label by id Returns the gs1128Label identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gs1128LabelId">Id of the gs1128Label to be returned.</param>
        /// <returns>ApiResponse of Gs1128Label</returns>
        public ApiResponse< Gs1128Label > GetGs1128LabelByIdWithHttpInfo (int? gs1128LabelId)
        {
            // verify the required parameter 'gs1128LabelId' is set
            if (gs1128LabelId == null)
                throw new ApiException(400, "Missing required parameter 'gs1128LabelId' when calling Gs1128LabelApi->GetGs1128LabelById");

            var localVarPath = "/beta/gs1128Label/{gs1128LabelId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (gs1128LabelId != null) localVarPathParams.Add("gs1128LabelId", Configuration.ApiClient.ParameterToString(gs1128LabelId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetGs1128LabelById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Gs1128Label>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Gs1128Label) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Gs1128Label)));
        }

        /// <summary>
        /// Get a gs1128Label by id Returns the gs1128Label identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gs1128LabelId">Id of the gs1128Label to be returned.</param>
        /// <returns>Task of Gs1128Label</returns>
        public async System.Threading.Tasks.Task<Gs1128Label> GetGs1128LabelByIdAsync (int? gs1128LabelId)
        {
             ApiResponse<Gs1128Label> localVarResponse = await GetGs1128LabelByIdAsyncWithHttpInfo(gs1128LabelId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a gs1128Label by id Returns the gs1128Label identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gs1128LabelId">Id of the gs1128Label to be returned.</param>
        /// <returns>Task of ApiResponse (Gs1128Label)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Gs1128Label>> GetGs1128LabelByIdAsyncWithHttpInfo (int? gs1128LabelId)
        {
            // verify the required parameter 'gs1128LabelId' is set
            if (gs1128LabelId == null)
                throw new ApiException(400, "Missing required parameter 'gs1128LabelId' when calling Gs1128LabelApi->GetGs1128LabelById");

            var localVarPath = "/beta/gs1128Label/{gs1128LabelId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (gs1128LabelId != null) localVarPathParams.Add("gs1128LabelId", Configuration.ApiClient.ParameterToString(gs1128LabelId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetGs1128LabelById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Gs1128Label>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Gs1128Label) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Gs1128Label)));
        }

        /// <summary>
        /// Get the files for a gs1128Label. Get all existing gs1128Label files.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gs1128LabelId">Id of the gs1128Label to get files for</param>
        /// <returns></returns>
        public void GetGs1128LabelFiles (int? gs1128LabelId)
        {
             GetGs1128LabelFilesWithHttpInfo(gs1128LabelId);
        }

        /// <summary>
        /// Get the files for a gs1128Label. Get all existing gs1128Label files.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gs1128LabelId">Id of the gs1128Label to get files for</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GetGs1128LabelFilesWithHttpInfo (int? gs1128LabelId)
        {
            // verify the required parameter 'gs1128LabelId' is set
            if (gs1128LabelId == null)
                throw new ApiException(400, "Missing required parameter 'gs1128LabelId' when calling Gs1128LabelApi->GetGs1128LabelFiles");

            var localVarPath = "/beta/gs1128Label/{gs1128LabelId}/file";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (gs1128LabelId != null) localVarPathParams.Add("gs1128LabelId", Configuration.ApiClient.ParameterToString(gs1128LabelId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetGs1128LabelFiles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get the files for a gs1128Label. Get all existing gs1128Label files.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gs1128LabelId">Id of the gs1128Label to get files for</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetGs1128LabelFilesAsync (int? gs1128LabelId)
        {
             await GetGs1128LabelFilesAsyncWithHttpInfo(gs1128LabelId);

        }

        /// <summary>
        /// Get the files for a gs1128Label. Get all existing gs1128Label files.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gs1128LabelId">Id of the gs1128Label to get files for</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetGs1128LabelFilesAsyncWithHttpInfo (int? gs1128LabelId)
        {
            // verify the required parameter 'gs1128LabelId' is set
            if (gs1128LabelId == null)
                throw new ApiException(400, "Missing required parameter 'gs1128LabelId' when calling Gs1128LabelApi->GetGs1128LabelFiles");

            var localVarPath = "/beta/gs1128Label/{gs1128LabelId}/file";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (gs1128LabelId != null) localVarPathParams.Add("gs1128LabelId", Configuration.ApiClient.ParameterToString(gs1128LabelId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetGs1128LabelFiles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get the tags for a gs1128Label. Get all existing gs1128Label tags.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gs1128LabelId">Id of the gs1128Label to get tags for</param>
        /// <returns></returns>
        public void GetGs1128LabelTags (int? gs1128LabelId)
        {
             GetGs1128LabelTagsWithHttpInfo(gs1128LabelId);
        }

        /// <summary>
        /// Get the tags for a gs1128Label. Get all existing gs1128Label tags.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gs1128LabelId">Id of the gs1128Label to get tags for</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GetGs1128LabelTagsWithHttpInfo (int? gs1128LabelId)
        {
            // verify the required parameter 'gs1128LabelId' is set
            if (gs1128LabelId == null)
                throw new ApiException(400, "Missing required parameter 'gs1128LabelId' when calling Gs1128LabelApi->GetGs1128LabelTags");

            var localVarPath = "/beta/gs1128Label/{gs1128LabelId}/tag";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (gs1128LabelId != null) localVarPathParams.Add("gs1128LabelId", Configuration.ApiClient.ParameterToString(gs1128LabelId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetGs1128LabelTags", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get the tags for a gs1128Label. Get all existing gs1128Label tags.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gs1128LabelId">Id of the gs1128Label to get tags for</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetGs1128LabelTagsAsync (int? gs1128LabelId)
        {
             await GetGs1128LabelTagsAsyncWithHttpInfo(gs1128LabelId);

        }

        /// <summary>
        /// Get the tags for a gs1128Label. Get all existing gs1128Label tags.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gs1128LabelId">Id of the gs1128Label to get tags for</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetGs1128LabelTagsAsyncWithHttpInfo (int? gs1128LabelId)
        {
            // verify the required parameter 'gs1128LabelId' is set
            if (gs1128LabelId == null)
                throw new ApiException(400, "Missing required parameter 'gs1128LabelId' when calling Gs1128LabelApi->GetGs1128LabelTags");

            var localVarPath = "/beta/gs1128Label/{gs1128LabelId}/tag";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (gs1128LabelId != null) localVarPathParams.Add("gs1128LabelId", Configuration.ApiClient.ParameterToString(gs1128LabelId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetGs1128LabelTags", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update a gs1128Label custom fields Updates an existing gs1128Label custom fields using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Gs1128Label to be updated.</param>
        /// <returns></returns>
        public void UpdateGs1128LabelCustomFields (Gs1128Label body)
        {
             UpdateGs1128LabelCustomFieldsWithHttpInfo(body);
        }

        /// <summary>
        /// Update a gs1128Label custom fields Updates an existing gs1128Label custom fields using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Gs1128Label to be updated.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateGs1128LabelCustomFieldsWithHttpInfo (Gs1128Label body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling Gs1128LabelApi->UpdateGs1128LabelCustomFields");

            var localVarPath = "/beta/gs1128Label/customFields";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateGs1128LabelCustomFields", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update a gs1128Label custom fields Updates an existing gs1128Label custom fields using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Gs1128Label to be updated.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateGs1128LabelCustomFieldsAsync (Gs1128Label body)
        {
             await UpdateGs1128LabelCustomFieldsAsyncWithHttpInfo(body);

        }

        /// <summary>
        /// Update a gs1128Label custom fields Updates an existing gs1128Label custom fields using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Gs1128Label to be updated.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateGs1128LabelCustomFieldsAsyncWithHttpInfo (Gs1128Label body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling Gs1128LabelApi->UpdateGs1128LabelCustomFields");

            var localVarPath = "/beta/gs1128Label/customFields";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateGs1128LabelCustomFields", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

    }
}
