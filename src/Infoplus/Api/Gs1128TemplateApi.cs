/* 
 * Infoplus API
 *
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Infoplus.Client;
using Infoplus.Model;

namespace Infoplus.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IGs1128TemplateApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create a gs1128Template
        /// </summary>
        /// <remarks>
        /// Inserts a new gs1128Template using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Gs1128Template to be inserted.</param>
        /// <returns>Gs1128Template</returns>
        Gs1128Template AddGs1128Template (Gs1128Template body);

        /// <summary>
        /// Create a gs1128Template
        /// </summary>
        /// <remarks>
        /// Inserts a new gs1128Template using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Gs1128Template to be inserted.</param>
        /// <returns>ApiResponse of Gs1128Template</returns>
        ApiResponse<Gs1128Template> AddGs1128TemplateWithHttpInfo (Gs1128Template body);
        /// <summary>
        /// Add new audit for a gs1128Template
        /// </summary>
        /// <remarks>
        /// Adds an audit to an existing gs1128Template.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gs1128TemplateId">Id of the gs1128Template to add an audit to</param>
        /// <param name="gs1128TemplateAudit">The audit to add</param>
        /// <returns></returns>
        void AddGs1128TemplateAudit (int? gs1128TemplateId, string gs1128TemplateAudit);

        /// <summary>
        /// Add new audit for a gs1128Template
        /// </summary>
        /// <remarks>
        /// Adds an audit to an existing gs1128Template.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gs1128TemplateId">Id of the gs1128Template to add an audit to</param>
        /// <param name="gs1128TemplateAudit">The audit to add</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddGs1128TemplateAuditWithHttpInfo (int? gs1128TemplateId, string gs1128TemplateAudit);
        /// <summary>
        /// Attach a file to a gs1128Template
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing gs1128Template.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gs1128TemplateId">Id of the gs1128Template to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns></returns>
        void AddGs1128TemplateFile (int? gs1128TemplateId, string fileName);

        /// <summary>
        /// Attach a file to a gs1128Template
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing gs1128Template.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gs1128TemplateId">Id of the gs1128Template to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddGs1128TemplateFileWithHttpInfo (int? gs1128TemplateId, string fileName);
        /// <summary>
        /// Attach a file to a gs1128Template by URL.
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing gs1128Template by URL.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="gs1128TemplateId">Id of the gs1128Template to add an file to</param>
        /// <returns></returns>
        void AddGs1128TemplateFileByURL (RecordFile body, int? gs1128TemplateId);

        /// <summary>
        /// Attach a file to a gs1128Template by URL.
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing gs1128Template by URL.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="gs1128TemplateId">Id of the gs1128Template to add an file to</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddGs1128TemplateFileByURLWithHttpInfo (RecordFile body, int? gs1128TemplateId);
        /// <summary>
        /// Add new tags for a gs1128Template.
        /// </summary>
        /// <remarks>
        /// Adds a tag to an existing gs1128Template.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gs1128TemplateId">Id of the gs1128Template to add a tag to</param>
        /// <param name="gs1128TemplateTag">The tag to add</param>
        /// <returns></returns>
        void AddGs1128TemplateTag (int? gs1128TemplateId, string gs1128TemplateTag);

        /// <summary>
        /// Add new tags for a gs1128Template.
        /// </summary>
        /// <remarks>
        /// Adds a tag to an existing gs1128Template.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gs1128TemplateId">Id of the gs1128Template to add a tag to</param>
        /// <param name="gs1128TemplateTag">The tag to add</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddGs1128TemplateTagWithHttpInfo (int? gs1128TemplateId, string gs1128TemplateTag);
        /// <summary>
        /// Delete a gs1128Template
        /// </summary>
        /// <remarks>
        /// Deletes the gs1128Template identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gs1128TemplateId">Id of the gs1128Template to be deleted.</param>
        /// <returns></returns>
        void DeleteGs1128Template (int? gs1128TemplateId);

        /// <summary>
        /// Delete a gs1128Template
        /// </summary>
        /// <remarks>
        /// Deletes the gs1128Template identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gs1128TemplateId">Id of the gs1128Template to be deleted.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteGs1128TemplateWithHttpInfo (int? gs1128TemplateId);
        /// <summary>
        /// Delete a file for a gs1128Template.
        /// </summary>
        /// <remarks>
        /// Deletes an existing gs1128Template file using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gs1128TemplateId">Id of the gs1128Template to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns></returns>
        void DeleteGs1128TemplateFile (int? gs1128TemplateId, int? fileId);

        /// <summary>
        /// Delete a file for a gs1128Template.
        /// </summary>
        /// <remarks>
        /// Deletes an existing gs1128Template file using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gs1128TemplateId">Id of the gs1128Template to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteGs1128TemplateFileWithHttpInfo (int? gs1128TemplateId, int? fileId);
        /// <summary>
        /// Delete a tag for a gs1128Template.
        /// </summary>
        /// <remarks>
        /// Deletes an existing gs1128Template tag using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gs1128TemplateId">Id of the gs1128Template to remove tag from</param>
        /// <param name="gs1128TemplateTag">The tag to delete</param>
        /// <returns></returns>
        void DeleteGs1128TemplateTag (int? gs1128TemplateId, string gs1128TemplateTag);

        /// <summary>
        /// Delete a tag for a gs1128Template.
        /// </summary>
        /// <remarks>
        /// Deletes an existing gs1128Template tag using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gs1128TemplateId">Id of the gs1128Template to remove tag from</param>
        /// <param name="gs1128TemplateTag">The tag to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteGs1128TemplateTagWithHttpInfo (int? gs1128TemplateId, string gs1128TemplateTag);
        /// <summary>
        /// Get a duplicated a gs1128Template by id
        /// </summary>
        /// <remarks>
        /// Returns a duplicated gs1128Template identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gs1128TemplateId">Id of the gs1128Template to be duplicated.</param>
        /// <returns>Gs1128Template</returns>
        Gs1128Template GetDuplicateGs1128TemplateById (int? gs1128TemplateId);

        /// <summary>
        /// Get a duplicated a gs1128Template by id
        /// </summary>
        /// <remarks>
        /// Returns a duplicated gs1128Template identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gs1128TemplateId">Id of the gs1128Template to be duplicated.</param>
        /// <returns>ApiResponse of Gs1128Template</returns>
        ApiResponse<Gs1128Template> GetDuplicateGs1128TemplateByIdWithHttpInfo (int? gs1128TemplateId);
        /// <summary>
        /// Search gs1128Templates by filter
        /// </summary>
        /// <remarks>
        /// Returns the list of gs1128Templates that match the given filter.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>List&lt;Gs1128Template&gt;</returns>
        List<Gs1128Template> GetGs1128TemplateByFilter (string filter = null, int? page = null, int? limit = null, string sort = null);

        /// <summary>
        /// Search gs1128Templates by filter
        /// </summary>
        /// <remarks>
        /// Returns the list of gs1128Templates that match the given filter.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>ApiResponse of List&lt;Gs1128Template&gt;</returns>
        ApiResponse<List<Gs1128Template>> GetGs1128TemplateByFilterWithHttpInfo (string filter = null, int? page = null, int? limit = null, string sort = null);
        /// <summary>
        /// Get a gs1128Template by id
        /// </summary>
        /// <remarks>
        /// Returns the gs1128Template identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gs1128TemplateId">Id of the gs1128Template to be returned.</param>
        /// <returns>Gs1128Template</returns>
        Gs1128Template GetGs1128TemplateById (int? gs1128TemplateId);

        /// <summary>
        /// Get a gs1128Template by id
        /// </summary>
        /// <remarks>
        /// Returns the gs1128Template identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gs1128TemplateId">Id of the gs1128Template to be returned.</param>
        /// <returns>ApiResponse of Gs1128Template</returns>
        ApiResponse<Gs1128Template> GetGs1128TemplateByIdWithHttpInfo (int? gs1128TemplateId);
        /// <summary>
        /// Get the files for a gs1128Template.
        /// </summary>
        /// <remarks>
        /// Get all existing gs1128Template files.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gs1128TemplateId">Id of the gs1128Template to get files for</param>
        /// <returns></returns>
        void GetGs1128TemplateFiles (int? gs1128TemplateId);

        /// <summary>
        /// Get the files for a gs1128Template.
        /// </summary>
        /// <remarks>
        /// Get all existing gs1128Template files.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gs1128TemplateId">Id of the gs1128Template to get files for</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetGs1128TemplateFilesWithHttpInfo (int? gs1128TemplateId);
        /// <summary>
        /// Get the tags for a gs1128Template.
        /// </summary>
        /// <remarks>
        /// Get all existing gs1128Template tags.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gs1128TemplateId">Id of the gs1128Template to get tags for</param>
        /// <returns></returns>
        void GetGs1128TemplateTags (int? gs1128TemplateId);

        /// <summary>
        /// Get the tags for a gs1128Template.
        /// </summary>
        /// <remarks>
        /// Get all existing gs1128Template tags.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gs1128TemplateId">Id of the gs1128Template to get tags for</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetGs1128TemplateTagsWithHttpInfo (int? gs1128TemplateId);
        /// <summary>
        /// Update a gs1128Template
        /// </summary>
        /// <remarks>
        /// Updates an existing gs1128Template using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Gs1128Template to be updated.</param>
        /// <returns></returns>
        void UpdateGs1128Template (Gs1128Template body);

        /// <summary>
        /// Update a gs1128Template
        /// </summary>
        /// <remarks>
        /// Updates an existing gs1128Template using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Gs1128Template to be updated.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateGs1128TemplateWithHttpInfo (Gs1128Template body);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create a gs1128Template
        /// </summary>
        /// <remarks>
        /// Inserts a new gs1128Template using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Gs1128Template to be inserted.</param>
        /// <returns>Task of Gs1128Template</returns>
        System.Threading.Tasks.Task<Gs1128Template> AddGs1128TemplateAsync (Gs1128Template body);

        /// <summary>
        /// Create a gs1128Template
        /// </summary>
        /// <remarks>
        /// Inserts a new gs1128Template using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Gs1128Template to be inserted.</param>
        /// <returns>Task of ApiResponse (Gs1128Template)</returns>
        System.Threading.Tasks.Task<ApiResponse<Gs1128Template>> AddGs1128TemplateAsyncWithHttpInfo (Gs1128Template body);
        /// <summary>
        /// Add new audit for a gs1128Template
        /// </summary>
        /// <remarks>
        /// Adds an audit to an existing gs1128Template.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gs1128TemplateId">Id of the gs1128Template to add an audit to</param>
        /// <param name="gs1128TemplateAudit">The audit to add</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddGs1128TemplateAuditAsync (int? gs1128TemplateId, string gs1128TemplateAudit);

        /// <summary>
        /// Add new audit for a gs1128Template
        /// </summary>
        /// <remarks>
        /// Adds an audit to an existing gs1128Template.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gs1128TemplateId">Id of the gs1128Template to add an audit to</param>
        /// <param name="gs1128TemplateAudit">The audit to add</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddGs1128TemplateAuditAsyncWithHttpInfo (int? gs1128TemplateId, string gs1128TemplateAudit);
        /// <summary>
        /// Attach a file to a gs1128Template
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing gs1128Template.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gs1128TemplateId">Id of the gs1128Template to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddGs1128TemplateFileAsync (int? gs1128TemplateId, string fileName);

        /// <summary>
        /// Attach a file to a gs1128Template
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing gs1128Template.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gs1128TemplateId">Id of the gs1128Template to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddGs1128TemplateFileAsyncWithHttpInfo (int? gs1128TemplateId, string fileName);
        /// <summary>
        /// Attach a file to a gs1128Template by URL.
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing gs1128Template by URL.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="gs1128TemplateId">Id of the gs1128Template to add an file to</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddGs1128TemplateFileByURLAsync (RecordFile body, int? gs1128TemplateId);

        /// <summary>
        /// Attach a file to a gs1128Template by URL.
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing gs1128Template by URL.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="gs1128TemplateId">Id of the gs1128Template to add an file to</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddGs1128TemplateFileByURLAsyncWithHttpInfo (RecordFile body, int? gs1128TemplateId);
        /// <summary>
        /// Add new tags for a gs1128Template.
        /// </summary>
        /// <remarks>
        /// Adds a tag to an existing gs1128Template.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gs1128TemplateId">Id of the gs1128Template to add a tag to</param>
        /// <param name="gs1128TemplateTag">The tag to add</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddGs1128TemplateTagAsync (int? gs1128TemplateId, string gs1128TemplateTag);

        /// <summary>
        /// Add new tags for a gs1128Template.
        /// </summary>
        /// <remarks>
        /// Adds a tag to an existing gs1128Template.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gs1128TemplateId">Id of the gs1128Template to add a tag to</param>
        /// <param name="gs1128TemplateTag">The tag to add</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddGs1128TemplateTagAsyncWithHttpInfo (int? gs1128TemplateId, string gs1128TemplateTag);
        /// <summary>
        /// Delete a gs1128Template
        /// </summary>
        /// <remarks>
        /// Deletes the gs1128Template identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gs1128TemplateId">Id of the gs1128Template to be deleted.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteGs1128TemplateAsync (int? gs1128TemplateId);

        /// <summary>
        /// Delete a gs1128Template
        /// </summary>
        /// <remarks>
        /// Deletes the gs1128Template identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gs1128TemplateId">Id of the gs1128Template to be deleted.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteGs1128TemplateAsyncWithHttpInfo (int? gs1128TemplateId);
        /// <summary>
        /// Delete a file for a gs1128Template.
        /// </summary>
        /// <remarks>
        /// Deletes an existing gs1128Template file using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gs1128TemplateId">Id of the gs1128Template to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteGs1128TemplateFileAsync (int? gs1128TemplateId, int? fileId);

        /// <summary>
        /// Delete a file for a gs1128Template.
        /// </summary>
        /// <remarks>
        /// Deletes an existing gs1128Template file using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gs1128TemplateId">Id of the gs1128Template to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteGs1128TemplateFileAsyncWithHttpInfo (int? gs1128TemplateId, int? fileId);
        /// <summary>
        /// Delete a tag for a gs1128Template.
        /// </summary>
        /// <remarks>
        /// Deletes an existing gs1128Template tag using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gs1128TemplateId">Id of the gs1128Template to remove tag from</param>
        /// <param name="gs1128TemplateTag">The tag to delete</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteGs1128TemplateTagAsync (int? gs1128TemplateId, string gs1128TemplateTag);

        /// <summary>
        /// Delete a tag for a gs1128Template.
        /// </summary>
        /// <remarks>
        /// Deletes an existing gs1128Template tag using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gs1128TemplateId">Id of the gs1128Template to remove tag from</param>
        /// <param name="gs1128TemplateTag">The tag to delete</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteGs1128TemplateTagAsyncWithHttpInfo (int? gs1128TemplateId, string gs1128TemplateTag);
        /// <summary>
        /// Get a duplicated a gs1128Template by id
        /// </summary>
        /// <remarks>
        /// Returns a duplicated gs1128Template identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gs1128TemplateId">Id of the gs1128Template to be duplicated.</param>
        /// <returns>Task of Gs1128Template</returns>
        System.Threading.Tasks.Task<Gs1128Template> GetDuplicateGs1128TemplateByIdAsync (int? gs1128TemplateId);

        /// <summary>
        /// Get a duplicated a gs1128Template by id
        /// </summary>
        /// <remarks>
        /// Returns a duplicated gs1128Template identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gs1128TemplateId">Id of the gs1128Template to be duplicated.</param>
        /// <returns>Task of ApiResponse (Gs1128Template)</returns>
        System.Threading.Tasks.Task<ApiResponse<Gs1128Template>> GetDuplicateGs1128TemplateByIdAsyncWithHttpInfo (int? gs1128TemplateId);
        /// <summary>
        /// Search gs1128Templates by filter
        /// </summary>
        /// <remarks>
        /// Returns the list of gs1128Templates that match the given filter.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>Task of List&lt;Gs1128Template&gt;</returns>
        System.Threading.Tasks.Task<List<Gs1128Template>> GetGs1128TemplateByFilterAsync (string filter = null, int? page = null, int? limit = null, string sort = null);

        /// <summary>
        /// Search gs1128Templates by filter
        /// </summary>
        /// <remarks>
        /// Returns the list of gs1128Templates that match the given filter.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Gs1128Template&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Gs1128Template>>> GetGs1128TemplateByFilterAsyncWithHttpInfo (string filter = null, int? page = null, int? limit = null, string sort = null);
        /// <summary>
        /// Get a gs1128Template by id
        /// </summary>
        /// <remarks>
        /// Returns the gs1128Template identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gs1128TemplateId">Id of the gs1128Template to be returned.</param>
        /// <returns>Task of Gs1128Template</returns>
        System.Threading.Tasks.Task<Gs1128Template> GetGs1128TemplateByIdAsync (int? gs1128TemplateId);

        /// <summary>
        /// Get a gs1128Template by id
        /// </summary>
        /// <remarks>
        /// Returns the gs1128Template identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gs1128TemplateId">Id of the gs1128Template to be returned.</param>
        /// <returns>Task of ApiResponse (Gs1128Template)</returns>
        System.Threading.Tasks.Task<ApiResponse<Gs1128Template>> GetGs1128TemplateByIdAsyncWithHttpInfo (int? gs1128TemplateId);
        /// <summary>
        /// Get the files for a gs1128Template.
        /// </summary>
        /// <remarks>
        /// Get all existing gs1128Template files.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gs1128TemplateId">Id of the gs1128Template to get files for</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetGs1128TemplateFilesAsync (int? gs1128TemplateId);

        /// <summary>
        /// Get the files for a gs1128Template.
        /// </summary>
        /// <remarks>
        /// Get all existing gs1128Template files.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gs1128TemplateId">Id of the gs1128Template to get files for</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetGs1128TemplateFilesAsyncWithHttpInfo (int? gs1128TemplateId);
        /// <summary>
        /// Get the tags for a gs1128Template.
        /// </summary>
        /// <remarks>
        /// Get all existing gs1128Template tags.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gs1128TemplateId">Id of the gs1128Template to get tags for</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetGs1128TemplateTagsAsync (int? gs1128TemplateId);

        /// <summary>
        /// Get the tags for a gs1128Template.
        /// </summary>
        /// <remarks>
        /// Get all existing gs1128Template tags.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gs1128TemplateId">Id of the gs1128Template to get tags for</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetGs1128TemplateTagsAsyncWithHttpInfo (int? gs1128TemplateId);
        /// <summary>
        /// Update a gs1128Template
        /// </summary>
        /// <remarks>
        /// Updates an existing gs1128Template using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Gs1128Template to be updated.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateGs1128TemplateAsync (Gs1128Template body);

        /// <summary>
        /// Update a gs1128Template
        /// </summary>
        /// <remarks>
        /// Updates an existing gs1128Template using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Gs1128Template to be updated.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateGs1128TemplateAsyncWithHttpInfo (Gs1128Template body);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class Gs1128TemplateApi : IGs1128TemplateApi
    {
        private Infoplus.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="Gs1128TemplateApi"/> class.
        /// </summary>
        /// <returns></returns>
        public Gs1128TemplateApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = Infoplus.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="Gs1128TemplateApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public Gs1128TemplateApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Infoplus.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Infoplus.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create a gs1128Template Inserts a new gs1128Template using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Gs1128Template to be inserted.</param>
        /// <returns>Gs1128Template</returns>
        public Gs1128Template AddGs1128Template (Gs1128Template body)
        {
             ApiResponse<Gs1128Template> localVarResponse = AddGs1128TemplateWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a gs1128Template Inserts a new gs1128Template using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Gs1128Template to be inserted.</param>
        /// <returns>ApiResponse of Gs1128Template</returns>
        public ApiResponse< Gs1128Template > AddGs1128TemplateWithHttpInfo (Gs1128Template body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling Gs1128TemplateApi->AddGs1128Template");

            var localVarPath = "/beta/gs1128Template";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddGs1128Template", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Gs1128Template>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Gs1128Template) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Gs1128Template)));
        }

        /// <summary>
        /// Create a gs1128Template Inserts a new gs1128Template using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Gs1128Template to be inserted.</param>
        /// <returns>Task of Gs1128Template</returns>
        public async System.Threading.Tasks.Task<Gs1128Template> AddGs1128TemplateAsync (Gs1128Template body)
        {
             ApiResponse<Gs1128Template> localVarResponse = await AddGs1128TemplateAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a gs1128Template Inserts a new gs1128Template using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Gs1128Template to be inserted.</param>
        /// <returns>Task of ApiResponse (Gs1128Template)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Gs1128Template>> AddGs1128TemplateAsyncWithHttpInfo (Gs1128Template body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling Gs1128TemplateApi->AddGs1128Template");

            var localVarPath = "/beta/gs1128Template";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddGs1128Template", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Gs1128Template>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Gs1128Template) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Gs1128Template)));
        }

        /// <summary>
        /// Add new audit for a gs1128Template Adds an audit to an existing gs1128Template.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gs1128TemplateId">Id of the gs1128Template to add an audit to</param>
        /// <param name="gs1128TemplateAudit">The audit to add</param>
        /// <returns></returns>
        public void AddGs1128TemplateAudit (int? gs1128TemplateId, string gs1128TemplateAudit)
        {
             AddGs1128TemplateAuditWithHttpInfo(gs1128TemplateId, gs1128TemplateAudit);
        }

        /// <summary>
        /// Add new audit for a gs1128Template Adds an audit to an existing gs1128Template.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gs1128TemplateId">Id of the gs1128Template to add an audit to</param>
        /// <param name="gs1128TemplateAudit">The audit to add</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AddGs1128TemplateAuditWithHttpInfo (int? gs1128TemplateId, string gs1128TemplateAudit)
        {
            // verify the required parameter 'gs1128TemplateId' is set
            if (gs1128TemplateId == null)
                throw new ApiException(400, "Missing required parameter 'gs1128TemplateId' when calling Gs1128TemplateApi->AddGs1128TemplateAudit");
            // verify the required parameter 'gs1128TemplateAudit' is set
            if (gs1128TemplateAudit == null)
                throw new ApiException(400, "Missing required parameter 'gs1128TemplateAudit' when calling Gs1128TemplateApi->AddGs1128TemplateAudit");

            var localVarPath = "/beta/gs1128Template/{gs1128TemplateId}/audit/{gs1128TemplateAudit}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (gs1128TemplateId != null) localVarPathParams.Add("gs1128TemplateId", Configuration.ApiClient.ParameterToString(gs1128TemplateId)); // path parameter
            if (gs1128TemplateAudit != null) localVarPathParams.Add("gs1128TemplateAudit", Configuration.ApiClient.ParameterToString(gs1128TemplateAudit)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddGs1128TemplateAudit", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Add new audit for a gs1128Template Adds an audit to an existing gs1128Template.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gs1128TemplateId">Id of the gs1128Template to add an audit to</param>
        /// <param name="gs1128TemplateAudit">The audit to add</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddGs1128TemplateAuditAsync (int? gs1128TemplateId, string gs1128TemplateAudit)
        {
             await AddGs1128TemplateAuditAsyncWithHttpInfo(gs1128TemplateId, gs1128TemplateAudit);

        }

        /// <summary>
        /// Add new audit for a gs1128Template Adds an audit to an existing gs1128Template.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gs1128TemplateId">Id of the gs1128Template to add an audit to</param>
        /// <param name="gs1128TemplateAudit">The audit to add</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddGs1128TemplateAuditAsyncWithHttpInfo (int? gs1128TemplateId, string gs1128TemplateAudit)
        {
            // verify the required parameter 'gs1128TemplateId' is set
            if (gs1128TemplateId == null)
                throw new ApiException(400, "Missing required parameter 'gs1128TemplateId' when calling Gs1128TemplateApi->AddGs1128TemplateAudit");
            // verify the required parameter 'gs1128TemplateAudit' is set
            if (gs1128TemplateAudit == null)
                throw new ApiException(400, "Missing required parameter 'gs1128TemplateAudit' when calling Gs1128TemplateApi->AddGs1128TemplateAudit");

            var localVarPath = "/beta/gs1128Template/{gs1128TemplateId}/audit/{gs1128TemplateAudit}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (gs1128TemplateId != null) localVarPathParams.Add("gs1128TemplateId", Configuration.ApiClient.ParameterToString(gs1128TemplateId)); // path parameter
            if (gs1128TemplateAudit != null) localVarPathParams.Add("gs1128TemplateAudit", Configuration.ApiClient.ParameterToString(gs1128TemplateAudit)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddGs1128TemplateAudit", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Attach a file to a gs1128Template Adds a file to an existing gs1128Template.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gs1128TemplateId">Id of the gs1128Template to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns></returns>
        public void AddGs1128TemplateFile (int? gs1128TemplateId, string fileName)
        {
             AddGs1128TemplateFileWithHttpInfo(gs1128TemplateId, fileName);
        }

        /// <summary>
        /// Attach a file to a gs1128Template Adds a file to an existing gs1128Template.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gs1128TemplateId">Id of the gs1128Template to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AddGs1128TemplateFileWithHttpInfo (int? gs1128TemplateId, string fileName)
        {
            // verify the required parameter 'gs1128TemplateId' is set
            if (gs1128TemplateId == null)
                throw new ApiException(400, "Missing required parameter 'gs1128TemplateId' when calling Gs1128TemplateApi->AddGs1128TemplateFile");
            // verify the required parameter 'fileName' is set
            if (fileName == null)
                throw new ApiException(400, "Missing required parameter 'fileName' when calling Gs1128TemplateApi->AddGs1128TemplateFile");

            var localVarPath = "/beta/gs1128Template/{gs1128TemplateId}/file/{fileName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (gs1128TemplateId != null) localVarPathParams.Add("gs1128TemplateId", Configuration.ApiClient.ParameterToString(gs1128TemplateId)); // path parameter
            if (fileName != null) localVarPathParams.Add("fileName", Configuration.ApiClient.ParameterToString(fileName)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddGs1128TemplateFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Attach a file to a gs1128Template Adds a file to an existing gs1128Template.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gs1128TemplateId">Id of the gs1128Template to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddGs1128TemplateFileAsync (int? gs1128TemplateId, string fileName)
        {
             await AddGs1128TemplateFileAsyncWithHttpInfo(gs1128TemplateId, fileName);

        }

        /// <summary>
        /// Attach a file to a gs1128Template Adds a file to an existing gs1128Template.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gs1128TemplateId">Id of the gs1128Template to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddGs1128TemplateFileAsyncWithHttpInfo (int? gs1128TemplateId, string fileName)
        {
            // verify the required parameter 'gs1128TemplateId' is set
            if (gs1128TemplateId == null)
                throw new ApiException(400, "Missing required parameter 'gs1128TemplateId' when calling Gs1128TemplateApi->AddGs1128TemplateFile");
            // verify the required parameter 'fileName' is set
            if (fileName == null)
                throw new ApiException(400, "Missing required parameter 'fileName' when calling Gs1128TemplateApi->AddGs1128TemplateFile");

            var localVarPath = "/beta/gs1128Template/{gs1128TemplateId}/file/{fileName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (gs1128TemplateId != null) localVarPathParams.Add("gs1128TemplateId", Configuration.ApiClient.ParameterToString(gs1128TemplateId)); // path parameter
            if (fileName != null) localVarPathParams.Add("fileName", Configuration.ApiClient.ParameterToString(fileName)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddGs1128TemplateFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Attach a file to a gs1128Template by URL. Adds a file to an existing gs1128Template by URL.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="gs1128TemplateId">Id of the gs1128Template to add an file to</param>
        /// <returns></returns>
        public void AddGs1128TemplateFileByURL (RecordFile body, int? gs1128TemplateId)
        {
             AddGs1128TemplateFileByURLWithHttpInfo(body, gs1128TemplateId);
        }

        /// <summary>
        /// Attach a file to a gs1128Template by URL. Adds a file to an existing gs1128Template by URL.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="gs1128TemplateId">Id of the gs1128Template to add an file to</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AddGs1128TemplateFileByURLWithHttpInfo (RecordFile body, int? gs1128TemplateId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling Gs1128TemplateApi->AddGs1128TemplateFileByURL");
            // verify the required parameter 'gs1128TemplateId' is set
            if (gs1128TemplateId == null)
                throw new ApiException(400, "Missing required parameter 'gs1128TemplateId' when calling Gs1128TemplateApi->AddGs1128TemplateFileByURL");

            var localVarPath = "/beta/gs1128Template/{gs1128TemplateId}/file";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (gs1128TemplateId != null) localVarPathParams.Add("gs1128TemplateId", Configuration.ApiClient.ParameterToString(gs1128TemplateId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddGs1128TemplateFileByURL", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Attach a file to a gs1128Template by URL. Adds a file to an existing gs1128Template by URL.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="gs1128TemplateId">Id of the gs1128Template to add an file to</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddGs1128TemplateFileByURLAsync (RecordFile body, int? gs1128TemplateId)
        {
             await AddGs1128TemplateFileByURLAsyncWithHttpInfo(body, gs1128TemplateId);

        }

        /// <summary>
        /// Attach a file to a gs1128Template by URL. Adds a file to an existing gs1128Template by URL.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="gs1128TemplateId">Id of the gs1128Template to add an file to</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddGs1128TemplateFileByURLAsyncWithHttpInfo (RecordFile body, int? gs1128TemplateId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling Gs1128TemplateApi->AddGs1128TemplateFileByURL");
            // verify the required parameter 'gs1128TemplateId' is set
            if (gs1128TemplateId == null)
                throw new ApiException(400, "Missing required parameter 'gs1128TemplateId' when calling Gs1128TemplateApi->AddGs1128TemplateFileByURL");

            var localVarPath = "/beta/gs1128Template/{gs1128TemplateId}/file";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (gs1128TemplateId != null) localVarPathParams.Add("gs1128TemplateId", Configuration.ApiClient.ParameterToString(gs1128TemplateId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddGs1128TemplateFileByURL", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Add new tags for a gs1128Template. Adds a tag to an existing gs1128Template.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gs1128TemplateId">Id of the gs1128Template to add a tag to</param>
        /// <param name="gs1128TemplateTag">The tag to add</param>
        /// <returns></returns>
        public void AddGs1128TemplateTag (int? gs1128TemplateId, string gs1128TemplateTag)
        {
             AddGs1128TemplateTagWithHttpInfo(gs1128TemplateId, gs1128TemplateTag);
        }

        /// <summary>
        /// Add new tags for a gs1128Template. Adds a tag to an existing gs1128Template.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gs1128TemplateId">Id of the gs1128Template to add a tag to</param>
        /// <param name="gs1128TemplateTag">The tag to add</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AddGs1128TemplateTagWithHttpInfo (int? gs1128TemplateId, string gs1128TemplateTag)
        {
            // verify the required parameter 'gs1128TemplateId' is set
            if (gs1128TemplateId == null)
                throw new ApiException(400, "Missing required parameter 'gs1128TemplateId' when calling Gs1128TemplateApi->AddGs1128TemplateTag");
            // verify the required parameter 'gs1128TemplateTag' is set
            if (gs1128TemplateTag == null)
                throw new ApiException(400, "Missing required parameter 'gs1128TemplateTag' when calling Gs1128TemplateApi->AddGs1128TemplateTag");

            var localVarPath = "/beta/gs1128Template/{gs1128TemplateId}/tag/{gs1128TemplateTag}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (gs1128TemplateId != null) localVarPathParams.Add("gs1128TemplateId", Configuration.ApiClient.ParameterToString(gs1128TemplateId)); // path parameter
            if (gs1128TemplateTag != null) localVarPathParams.Add("gs1128TemplateTag", Configuration.ApiClient.ParameterToString(gs1128TemplateTag)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddGs1128TemplateTag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Add new tags for a gs1128Template. Adds a tag to an existing gs1128Template.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gs1128TemplateId">Id of the gs1128Template to add a tag to</param>
        /// <param name="gs1128TemplateTag">The tag to add</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddGs1128TemplateTagAsync (int? gs1128TemplateId, string gs1128TemplateTag)
        {
             await AddGs1128TemplateTagAsyncWithHttpInfo(gs1128TemplateId, gs1128TemplateTag);

        }

        /// <summary>
        /// Add new tags for a gs1128Template. Adds a tag to an existing gs1128Template.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gs1128TemplateId">Id of the gs1128Template to add a tag to</param>
        /// <param name="gs1128TemplateTag">The tag to add</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddGs1128TemplateTagAsyncWithHttpInfo (int? gs1128TemplateId, string gs1128TemplateTag)
        {
            // verify the required parameter 'gs1128TemplateId' is set
            if (gs1128TemplateId == null)
                throw new ApiException(400, "Missing required parameter 'gs1128TemplateId' when calling Gs1128TemplateApi->AddGs1128TemplateTag");
            // verify the required parameter 'gs1128TemplateTag' is set
            if (gs1128TemplateTag == null)
                throw new ApiException(400, "Missing required parameter 'gs1128TemplateTag' when calling Gs1128TemplateApi->AddGs1128TemplateTag");

            var localVarPath = "/beta/gs1128Template/{gs1128TemplateId}/tag/{gs1128TemplateTag}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (gs1128TemplateId != null) localVarPathParams.Add("gs1128TemplateId", Configuration.ApiClient.ParameterToString(gs1128TemplateId)); // path parameter
            if (gs1128TemplateTag != null) localVarPathParams.Add("gs1128TemplateTag", Configuration.ApiClient.ParameterToString(gs1128TemplateTag)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddGs1128TemplateTag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a gs1128Template Deletes the gs1128Template identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gs1128TemplateId">Id of the gs1128Template to be deleted.</param>
        /// <returns></returns>
        public void DeleteGs1128Template (int? gs1128TemplateId)
        {
             DeleteGs1128TemplateWithHttpInfo(gs1128TemplateId);
        }

        /// <summary>
        /// Delete a gs1128Template Deletes the gs1128Template identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gs1128TemplateId">Id of the gs1128Template to be deleted.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteGs1128TemplateWithHttpInfo (int? gs1128TemplateId)
        {
            // verify the required parameter 'gs1128TemplateId' is set
            if (gs1128TemplateId == null)
                throw new ApiException(400, "Missing required parameter 'gs1128TemplateId' when calling Gs1128TemplateApi->DeleteGs1128Template");

            var localVarPath = "/beta/gs1128Template/{gs1128TemplateId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (gs1128TemplateId != null) localVarPathParams.Add("gs1128TemplateId", Configuration.ApiClient.ParameterToString(gs1128TemplateId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteGs1128Template", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a gs1128Template Deletes the gs1128Template identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gs1128TemplateId">Id of the gs1128Template to be deleted.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteGs1128TemplateAsync (int? gs1128TemplateId)
        {
             await DeleteGs1128TemplateAsyncWithHttpInfo(gs1128TemplateId);

        }

        /// <summary>
        /// Delete a gs1128Template Deletes the gs1128Template identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gs1128TemplateId">Id of the gs1128Template to be deleted.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteGs1128TemplateAsyncWithHttpInfo (int? gs1128TemplateId)
        {
            // verify the required parameter 'gs1128TemplateId' is set
            if (gs1128TemplateId == null)
                throw new ApiException(400, "Missing required parameter 'gs1128TemplateId' when calling Gs1128TemplateApi->DeleteGs1128Template");

            var localVarPath = "/beta/gs1128Template/{gs1128TemplateId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (gs1128TemplateId != null) localVarPathParams.Add("gs1128TemplateId", Configuration.ApiClient.ParameterToString(gs1128TemplateId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteGs1128Template", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a file for a gs1128Template. Deletes an existing gs1128Template file using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gs1128TemplateId">Id of the gs1128Template to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns></returns>
        public void DeleteGs1128TemplateFile (int? gs1128TemplateId, int? fileId)
        {
             DeleteGs1128TemplateFileWithHttpInfo(gs1128TemplateId, fileId);
        }

        /// <summary>
        /// Delete a file for a gs1128Template. Deletes an existing gs1128Template file using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gs1128TemplateId">Id of the gs1128Template to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteGs1128TemplateFileWithHttpInfo (int? gs1128TemplateId, int? fileId)
        {
            // verify the required parameter 'gs1128TemplateId' is set
            if (gs1128TemplateId == null)
                throw new ApiException(400, "Missing required parameter 'gs1128TemplateId' when calling Gs1128TemplateApi->DeleteGs1128TemplateFile");
            // verify the required parameter 'fileId' is set
            if (fileId == null)
                throw new ApiException(400, "Missing required parameter 'fileId' when calling Gs1128TemplateApi->DeleteGs1128TemplateFile");

            var localVarPath = "/beta/gs1128Template/{gs1128TemplateId}/file/{fileId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (gs1128TemplateId != null) localVarPathParams.Add("gs1128TemplateId", Configuration.ApiClient.ParameterToString(gs1128TemplateId)); // path parameter
            if (fileId != null) localVarPathParams.Add("fileId", Configuration.ApiClient.ParameterToString(fileId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteGs1128TemplateFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a file for a gs1128Template. Deletes an existing gs1128Template file using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gs1128TemplateId">Id of the gs1128Template to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteGs1128TemplateFileAsync (int? gs1128TemplateId, int? fileId)
        {
             await DeleteGs1128TemplateFileAsyncWithHttpInfo(gs1128TemplateId, fileId);

        }

        /// <summary>
        /// Delete a file for a gs1128Template. Deletes an existing gs1128Template file using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gs1128TemplateId">Id of the gs1128Template to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteGs1128TemplateFileAsyncWithHttpInfo (int? gs1128TemplateId, int? fileId)
        {
            // verify the required parameter 'gs1128TemplateId' is set
            if (gs1128TemplateId == null)
                throw new ApiException(400, "Missing required parameter 'gs1128TemplateId' when calling Gs1128TemplateApi->DeleteGs1128TemplateFile");
            // verify the required parameter 'fileId' is set
            if (fileId == null)
                throw new ApiException(400, "Missing required parameter 'fileId' when calling Gs1128TemplateApi->DeleteGs1128TemplateFile");

            var localVarPath = "/beta/gs1128Template/{gs1128TemplateId}/file/{fileId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (gs1128TemplateId != null) localVarPathParams.Add("gs1128TemplateId", Configuration.ApiClient.ParameterToString(gs1128TemplateId)); // path parameter
            if (fileId != null) localVarPathParams.Add("fileId", Configuration.ApiClient.ParameterToString(fileId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteGs1128TemplateFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a tag for a gs1128Template. Deletes an existing gs1128Template tag using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gs1128TemplateId">Id of the gs1128Template to remove tag from</param>
        /// <param name="gs1128TemplateTag">The tag to delete</param>
        /// <returns></returns>
        public void DeleteGs1128TemplateTag (int? gs1128TemplateId, string gs1128TemplateTag)
        {
             DeleteGs1128TemplateTagWithHttpInfo(gs1128TemplateId, gs1128TemplateTag);
        }

        /// <summary>
        /// Delete a tag for a gs1128Template. Deletes an existing gs1128Template tag using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gs1128TemplateId">Id of the gs1128Template to remove tag from</param>
        /// <param name="gs1128TemplateTag">The tag to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteGs1128TemplateTagWithHttpInfo (int? gs1128TemplateId, string gs1128TemplateTag)
        {
            // verify the required parameter 'gs1128TemplateId' is set
            if (gs1128TemplateId == null)
                throw new ApiException(400, "Missing required parameter 'gs1128TemplateId' when calling Gs1128TemplateApi->DeleteGs1128TemplateTag");
            // verify the required parameter 'gs1128TemplateTag' is set
            if (gs1128TemplateTag == null)
                throw new ApiException(400, "Missing required parameter 'gs1128TemplateTag' when calling Gs1128TemplateApi->DeleteGs1128TemplateTag");

            var localVarPath = "/beta/gs1128Template/{gs1128TemplateId}/tag/{gs1128TemplateTag}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (gs1128TemplateId != null) localVarPathParams.Add("gs1128TemplateId", Configuration.ApiClient.ParameterToString(gs1128TemplateId)); // path parameter
            if (gs1128TemplateTag != null) localVarPathParams.Add("gs1128TemplateTag", Configuration.ApiClient.ParameterToString(gs1128TemplateTag)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteGs1128TemplateTag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a tag for a gs1128Template. Deletes an existing gs1128Template tag using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gs1128TemplateId">Id of the gs1128Template to remove tag from</param>
        /// <param name="gs1128TemplateTag">The tag to delete</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteGs1128TemplateTagAsync (int? gs1128TemplateId, string gs1128TemplateTag)
        {
             await DeleteGs1128TemplateTagAsyncWithHttpInfo(gs1128TemplateId, gs1128TemplateTag);

        }

        /// <summary>
        /// Delete a tag for a gs1128Template. Deletes an existing gs1128Template tag using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gs1128TemplateId">Id of the gs1128Template to remove tag from</param>
        /// <param name="gs1128TemplateTag">The tag to delete</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteGs1128TemplateTagAsyncWithHttpInfo (int? gs1128TemplateId, string gs1128TemplateTag)
        {
            // verify the required parameter 'gs1128TemplateId' is set
            if (gs1128TemplateId == null)
                throw new ApiException(400, "Missing required parameter 'gs1128TemplateId' when calling Gs1128TemplateApi->DeleteGs1128TemplateTag");
            // verify the required parameter 'gs1128TemplateTag' is set
            if (gs1128TemplateTag == null)
                throw new ApiException(400, "Missing required parameter 'gs1128TemplateTag' when calling Gs1128TemplateApi->DeleteGs1128TemplateTag");

            var localVarPath = "/beta/gs1128Template/{gs1128TemplateId}/tag/{gs1128TemplateTag}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (gs1128TemplateId != null) localVarPathParams.Add("gs1128TemplateId", Configuration.ApiClient.ParameterToString(gs1128TemplateId)); // path parameter
            if (gs1128TemplateTag != null) localVarPathParams.Add("gs1128TemplateTag", Configuration.ApiClient.ParameterToString(gs1128TemplateTag)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteGs1128TemplateTag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get a duplicated a gs1128Template by id Returns a duplicated gs1128Template identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gs1128TemplateId">Id of the gs1128Template to be duplicated.</param>
        /// <returns>Gs1128Template</returns>
        public Gs1128Template GetDuplicateGs1128TemplateById (int? gs1128TemplateId)
        {
             ApiResponse<Gs1128Template> localVarResponse = GetDuplicateGs1128TemplateByIdWithHttpInfo(gs1128TemplateId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a duplicated a gs1128Template by id Returns a duplicated gs1128Template identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gs1128TemplateId">Id of the gs1128Template to be duplicated.</param>
        /// <returns>ApiResponse of Gs1128Template</returns>
        public ApiResponse< Gs1128Template > GetDuplicateGs1128TemplateByIdWithHttpInfo (int? gs1128TemplateId)
        {
            // verify the required parameter 'gs1128TemplateId' is set
            if (gs1128TemplateId == null)
                throw new ApiException(400, "Missing required parameter 'gs1128TemplateId' when calling Gs1128TemplateApi->GetDuplicateGs1128TemplateById");

            var localVarPath = "/beta/gs1128Template/duplicate/{gs1128TemplateId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (gs1128TemplateId != null) localVarPathParams.Add("gs1128TemplateId", Configuration.ApiClient.ParameterToString(gs1128TemplateId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDuplicateGs1128TemplateById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Gs1128Template>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Gs1128Template) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Gs1128Template)));
        }

        /// <summary>
        /// Get a duplicated a gs1128Template by id Returns a duplicated gs1128Template identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gs1128TemplateId">Id of the gs1128Template to be duplicated.</param>
        /// <returns>Task of Gs1128Template</returns>
        public async System.Threading.Tasks.Task<Gs1128Template> GetDuplicateGs1128TemplateByIdAsync (int? gs1128TemplateId)
        {
             ApiResponse<Gs1128Template> localVarResponse = await GetDuplicateGs1128TemplateByIdAsyncWithHttpInfo(gs1128TemplateId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a duplicated a gs1128Template by id Returns a duplicated gs1128Template identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gs1128TemplateId">Id of the gs1128Template to be duplicated.</param>
        /// <returns>Task of ApiResponse (Gs1128Template)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Gs1128Template>> GetDuplicateGs1128TemplateByIdAsyncWithHttpInfo (int? gs1128TemplateId)
        {
            // verify the required parameter 'gs1128TemplateId' is set
            if (gs1128TemplateId == null)
                throw new ApiException(400, "Missing required parameter 'gs1128TemplateId' when calling Gs1128TemplateApi->GetDuplicateGs1128TemplateById");

            var localVarPath = "/beta/gs1128Template/duplicate/{gs1128TemplateId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (gs1128TemplateId != null) localVarPathParams.Add("gs1128TemplateId", Configuration.ApiClient.ParameterToString(gs1128TemplateId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDuplicateGs1128TemplateById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Gs1128Template>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Gs1128Template) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Gs1128Template)));
        }

        /// <summary>
        /// Search gs1128Templates by filter Returns the list of gs1128Templates that match the given filter.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>List&lt;Gs1128Template&gt;</returns>
        public List<Gs1128Template> GetGs1128TemplateByFilter (string filter = null, int? page = null, int? limit = null, string sort = null)
        {
             ApiResponse<List<Gs1128Template>> localVarResponse = GetGs1128TemplateByFilterWithHttpInfo(filter, page, limit, sort);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Search gs1128Templates by filter Returns the list of gs1128Templates that match the given filter.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>ApiResponse of List&lt;Gs1128Template&gt;</returns>
        public ApiResponse< List<Gs1128Template> > GetGs1128TemplateByFilterWithHttpInfo (string filter = null, int? page = null, int? limit = null, string sort = null)
        {

            var localVarPath = "/beta/gs1128Template/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (filter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (page != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetGs1128TemplateByFilter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Gs1128Template>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Gs1128Template>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Gs1128Template>)));
        }

        /// <summary>
        /// Search gs1128Templates by filter Returns the list of gs1128Templates that match the given filter.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>Task of List&lt;Gs1128Template&gt;</returns>
        public async System.Threading.Tasks.Task<List<Gs1128Template>> GetGs1128TemplateByFilterAsync (string filter = null, int? page = null, int? limit = null, string sort = null)
        {
             ApiResponse<List<Gs1128Template>> localVarResponse = await GetGs1128TemplateByFilterAsyncWithHttpInfo(filter, page, limit, sort);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Search gs1128Templates by filter Returns the list of gs1128Templates that match the given filter.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Gs1128Template&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Gs1128Template>>> GetGs1128TemplateByFilterAsyncWithHttpInfo (string filter = null, int? page = null, int? limit = null, string sort = null)
        {

            var localVarPath = "/beta/gs1128Template/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (filter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (page != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetGs1128TemplateByFilter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Gs1128Template>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Gs1128Template>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Gs1128Template>)));
        }

        /// <summary>
        /// Get a gs1128Template by id Returns the gs1128Template identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gs1128TemplateId">Id of the gs1128Template to be returned.</param>
        /// <returns>Gs1128Template</returns>
        public Gs1128Template GetGs1128TemplateById (int? gs1128TemplateId)
        {
             ApiResponse<Gs1128Template> localVarResponse = GetGs1128TemplateByIdWithHttpInfo(gs1128TemplateId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a gs1128Template by id Returns the gs1128Template identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gs1128TemplateId">Id of the gs1128Template to be returned.</param>
        /// <returns>ApiResponse of Gs1128Template</returns>
        public ApiResponse< Gs1128Template > GetGs1128TemplateByIdWithHttpInfo (int? gs1128TemplateId)
        {
            // verify the required parameter 'gs1128TemplateId' is set
            if (gs1128TemplateId == null)
                throw new ApiException(400, "Missing required parameter 'gs1128TemplateId' when calling Gs1128TemplateApi->GetGs1128TemplateById");

            var localVarPath = "/beta/gs1128Template/{gs1128TemplateId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (gs1128TemplateId != null) localVarPathParams.Add("gs1128TemplateId", Configuration.ApiClient.ParameterToString(gs1128TemplateId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetGs1128TemplateById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Gs1128Template>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Gs1128Template) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Gs1128Template)));
        }

        /// <summary>
        /// Get a gs1128Template by id Returns the gs1128Template identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gs1128TemplateId">Id of the gs1128Template to be returned.</param>
        /// <returns>Task of Gs1128Template</returns>
        public async System.Threading.Tasks.Task<Gs1128Template> GetGs1128TemplateByIdAsync (int? gs1128TemplateId)
        {
             ApiResponse<Gs1128Template> localVarResponse = await GetGs1128TemplateByIdAsyncWithHttpInfo(gs1128TemplateId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a gs1128Template by id Returns the gs1128Template identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gs1128TemplateId">Id of the gs1128Template to be returned.</param>
        /// <returns>Task of ApiResponse (Gs1128Template)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Gs1128Template>> GetGs1128TemplateByIdAsyncWithHttpInfo (int? gs1128TemplateId)
        {
            // verify the required parameter 'gs1128TemplateId' is set
            if (gs1128TemplateId == null)
                throw new ApiException(400, "Missing required parameter 'gs1128TemplateId' when calling Gs1128TemplateApi->GetGs1128TemplateById");

            var localVarPath = "/beta/gs1128Template/{gs1128TemplateId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (gs1128TemplateId != null) localVarPathParams.Add("gs1128TemplateId", Configuration.ApiClient.ParameterToString(gs1128TemplateId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetGs1128TemplateById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Gs1128Template>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Gs1128Template) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Gs1128Template)));
        }

        /// <summary>
        /// Get the files for a gs1128Template. Get all existing gs1128Template files.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gs1128TemplateId">Id of the gs1128Template to get files for</param>
        /// <returns></returns>
        public void GetGs1128TemplateFiles (int? gs1128TemplateId)
        {
             GetGs1128TemplateFilesWithHttpInfo(gs1128TemplateId);
        }

        /// <summary>
        /// Get the files for a gs1128Template. Get all existing gs1128Template files.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gs1128TemplateId">Id of the gs1128Template to get files for</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GetGs1128TemplateFilesWithHttpInfo (int? gs1128TemplateId)
        {
            // verify the required parameter 'gs1128TemplateId' is set
            if (gs1128TemplateId == null)
                throw new ApiException(400, "Missing required parameter 'gs1128TemplateId' when calling Gs1128TemplateApi->GetGs1128TemplateFiles");

            var localVarPath = "/beta/gs1128Template/{gs1128TemplateId}/file";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (gs1128TemplateId != null) localVarPathParams.Add("gs1128TemplateId", Configuration.ApiClient.ParameterToString(gs1128TemplateId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetGs1128TemplateFiles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get the files for a gs1128Template. Get all existing gs1128Template files.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gs1128TemplateId">Id of the gs1128Template to get files for</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetGs1128TemplateFilesAsync (int? gs1128TemplateId)
        {
             await GetGs1128TemplateFilesAsyncWithHttpInfo(gs1128TemplateId);

        }

        /// <summary>
        /// Get the files for a gs1128Template. Get all existing gs1128Template files.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gs1128TemplateId">Id of the gs1128Template to get files for</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetGs1128TemplateFilesAsyncWithHttpInfo (int? gs1128TemplateId)
        {
            // verify the required parameter 'gs1128TemplateId' is set
            if (gs1128TemplateId == null)
                throw new ApiException(400, "Missing required parameter 'gs1128TemplateId' when calling Gs1128TemplateApi->GetGs1128TemplateFiles");

            var localVarPath = "/beta/gs1128Template/{gs1128TemplateId}/file";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (gs1128TemplateId != null) localVarPathParams.Add("gs1128TemplateId", Configuration.ApiClient.ParameterToString(gs1128TemplateId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetGs1128TemplateFiles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get the tags for a gs1128Template. Get all existing gs1128Template tags.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gs1128TemplateId">Id of the gs1128Template to get tags for</param>
        /// <returns></returns>
        public void GetGs1128TemplateTags (int? gs1128TemplateId)
        {
             GetGs1128TemplateTagsWithHttpInfo(gs1128TemplateId);
        }

        /// <summary>
        /// Get the tags for a gs1128Template. Get all existing gs1128Template tags.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gs1128TemplateId">Id of the gs1128Template to get tags for</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GetGs1128TemplateTagsWithHttpInfo (int? gs1128TemplateId)
        {
            // verify the required parameter 'gs1128TemplateId' is set
            if (gs1128TemplateId == null)
                throw new ApiException(400, "Missing required parameter 'gs1128TemplateId' when calling Gs1128TemplateApi->GetGs1128TemplateTags");

            var localVarPath = "/beta/gs1128Template/{gs1128TemplateId}/tag";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (gs1128TemplateId != null) localVarPathParams.Add("gs1128TemplateId", Configuration.ApiClient.ParameterToString(gs1128TemplateId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetGs1128TemplateTags", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get the tags for a gs1128Template. Get all existing gs1128Template tags.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gs1128TemplateId">Id of the gs1128Template to get tags for</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetGs1128TemplateTagsAsync (int? gs1128TemplateId)
        {
             await GetGs1128TemplateTagsAsyncWithHttpInfo(gs1128TemplateId);

        }

        /// <summary>
        /// Get the tags for a gs1128Template. Get all existing gs1128Template tags.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gs1128TemplateId">Id of the gs1128Template to get tags for</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetGs1128TemplateTagsAsyncWithHttpInfo (int? gs1128TemplateId)
        {
            // verify the required parameter 'gs1128TemplateId' is set
            if (gs1128TemplateId == null)
                throw new ApiException(400, "Missing required parameter 'gs1128TemplateId' when calling Gs1128TemplateApi->GetGs1128TemplateTags");

            var localVarPath = "/beta/gs1128Template/{gs1128TemplateId}/tag";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (gs1128TemplateId != null) localVarPathParams.Add("gs1128TemplateId", Configuration.ApiClient.ParameterToString(gs1128TemplateId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetGs1128TemplateTags", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update a gs1128Template Updates an existing gs1128Template using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Gs1128Template to be updated.</param>
        /// <returns></returns>
        public void UpdateGs1128Template (Gs1128Template body)
        {
             UpdateGs1128TemplateWithHttpInfo(body);
        }

        /// <summary>
        /// Update a gs1128Template Updates an existing gs1128Template using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Gs1128Template to be updated.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateGs1128TemplateWithHttpInfo (Gs1128Template body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling Gs1128TemplateApi->UpdateGs1128Template");

            var localVarPath = "/beta/gs1128Template";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateGs1128Template", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update a gs1128Template Updates an existing gs1128Template using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Gs1128Template to be updated.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateGs1128TemplateAsync (Gs1128Template body)
        {
             await UpdateGs1128TemplateAsyncWithHttpInfo(body);

        }

        /// <summary>
        /// Update a gs1128Template Updates an existing gs1128Template using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Gs1128Template to be updated.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateGs1128TemplateAsyncWithHttpInfo (Gs1128Template body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling Gs1128TemplateApi->UpdateGs1128Template");

            var localVarPath = "/beta/gs1128Template";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateGs1128Template", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

    }
}
