/* 
 * Infoplus API
 *
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Infoplus.Client;
using Infoplus.Model;

namespace Infoplus.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IInvoiceWorksheetLineDetailApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Add new audit for an invoiceWorksheetLineDetail
        /// </summary>
        /// <remarks>
        /// Adds an audit to an existing invoiceWorksheetLineDetail.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceWorksheetLineDetailId">Id of the invoiceWorksheetLineDetail to add an audit to</param>
        /// <param name="invoiceWorksheetLineDetailAudit">The audit to add</param>
        /// <returns></returns>
        void AddInvoiceWorksheetLineDetailAudit (int? invoiceWorksheetLineDetailId, string invoiceWorksheetLineDetailAudit);

        /// <summary>
        /// Add new audit for an invoiceWorksheetLineDetail
        /// </summary>
        /// <remarks>
        /// Adds an audit to an existing invoiceWorksheetLineDetail.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceWorksheetLineDetailId">Id of the invoiceWorksheetLineDetail to add an audit to</param>
        /// <param name="invoiceWorksheetLineDetailAudit">The audit to add</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddInvoiceWorksheetLineDetailAuditWithHttpInfo (int? invoiceWorksheetLineDetailId, string invoiceWorksheetLineDetailAudit);
        /// <summary>
        /// Attach a file to an invoiceWorksheetLineDetail
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing invoiceWorksheetLineDetail.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceWorksheetLineDetailId">Id of the invoiceWorksheetLineDetail to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns></returns>
        void AddInvoiceWorksheetLineDetailFile (int? invoiceWorksheetLineDetailId, string fileName);

        /// <summary>
        /// Attach a file to an invoiceWorksheetLineDetail
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing invoiceWorksheetLineDetail.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceWorksheetLineDetailId">Id of the invoiceWorksheetLineDetail to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddInvoiceWorksheetLineDetailFileWithHttpInfo (int? invoiceWorksheetLineDetailId, string fileName);
        /// <summary>
        /// Attach a file to an invoiceWorksheetLineDetail by URL.
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing invoiceWorksheetLineDetail by URL.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="invoiceWorksheetLineDetailId">Id of the invoiceWorksheetLineDetail to add an file to</param>
        /// <returns></returns>
        void AddInvoiceWorksheetLineDetailFileByURL (RecordFile body, int? invoiceWorksheetLineDetailId);

        /// <summary>
        /// Attach a file to an invoiceWorksheetLineDetail by URL.
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing invoiceWorksheetLineDetail by URL.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="invoiceWorksheetLineDetailId">Id of the invoiceWorksheetLineDetail to add an file to</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddInvoiceWorksheetLineDetailFileByURLWithHttpInfo (RecordFile body, int? invoiceWorksheetLineDetailId);
        /// <summary>
        /// Add new tags for an invoiceWorksheetLineDetail.
        /// </summary>
        /// <remarks>
        /// Adds a tag to an existing invoiceWorksheetLineDetail.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceWorksheetLineDetailId">Id of the invoiceWorksheetLineDetail to add a tag to</param>
        /// <param name="invoiceWorksheetLineDetailTag">The tag to add</param>
        /// <returns></returns>
        void AddInvoiceWorksheetLineDetailTag (int? invoiceWorksheetLineDetailId, string invoiceWorksheetLineDetailTag);

        /// <summary>
        /// Add new tags for an invoiceWorksheetLineDetail.
        /// </summary>
        /// <remarks>
        /// Adds a tag to an existing invoiceWorksheetLineDetail.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceWorksheetLineDetailId">Id of the invoiceWorksheetLineDetail to add a tag to</param>
        /// <param name="invoiceWorksheetLineDetailTag">The tag to add</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddInvoiceWorksheetLineDetailTagWithHttpInfo (int? invoiceWorksheetLineDetailId, string invoiceWorksheetLineDetailTag);
        /// <summary>
        /// Delete a file for an invoiceWorksheetLineDetail.
        /// </summary>
        /// <remarks>
        /// Deletes an existing invoiceWorksheetLineDetail file using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceWorksheetLineDetailId">Id of the invoiceWorksheetLineDetail to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns></returns>
        void DeleteInvoiceWorksheetLineDetailFile (int? invoiceWorksheetLineDetailId, int? fileId);

        /// <summary>
        /// Delete a file for an invoiceWorksheetLineDetail.
        /// </summary>
        /// <remarks>
        /// Deletes an existing invoiceWorksheetLineDetail file using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceWorksheetLineDetailId">Id of the invoiceWorksheetLineDetail to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteInvoiceWorksheetLineDetailFileWithHttpInfo (int? invoiceWorksheetLineDetailId, int? fileId);
        /// <summary>
        /// Delete a tag for an invoiceWorksheetLineDetail.
        /// </summary>
        /// <remarks>
        /// Deletes an existing invoiceWorksheetLineDetail tag using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceWorksheetLineDetailId">Id of the invoiceWorksheetLineDetail to remove tag from</param>
        /// <param name="invoiceWorksheetLineDetailTag">The tag to delete</param>
        /// <returns></returns>
        void DeleteInvoiceWorksheetLineDetailTag (int? invoiceWorksheetLineDetailId, string invoiceWorksheetLineDetailTag);

        /// <summary>
        /// Delete a tag for an invoiceWorksheetLineDetail.
        /// </summary>
        /// <remarks>
        /// Deletes an existing invoiceWorksheetLineDetail tag using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceWorksheetLineDetailId">Id of the invoiceWorksheetLineDetail to remove tag from</param>
        /// <param name="invoiceWorksheetLineDetailTag">The tag to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteInvoiceWorksheetLineDetailTagWithHttpInfo (int? invoiceWorksheetLineDetailId, string invoiceWorksheetLineDetailTag);
        /// <summary>
        /// Get a duplicated an invoiceWorksheetLineDetail by id
        /// </summary>
        /// <remarks>
        /// Returns a duplicated invoiceWorksheetLineDetail identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceWorksheetLineDetailId">Id of the invoiceWorksheetLineDetail to be duplicated.</param>
        /// <returns>InvoiceWorksheetLineDetail</returns>
        InvoiceWorksheetLineDetail GetDuplicateInvoiceWorksheetLineDetailById (int? invoiceWorksheetLineDetailId);

        /// <summary>
        /// Get a duplicated an invoiceWorksheetLineDetail by id
        /// </summary>
        /// <remarks>
        /// Returns a duplicated invoiceWorksheetLineDetail identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceWorksheetLineDetailId">Id of the invoiceWorksheetLineDetail to be duplicated.</param>
        /// <returns>ApiResponse of InvoiceWorksheetLineDetail</returns>
        ApiResponse<InvoiceWorksheetLineDetail> GetDuplicateInvoiceWorksheetLineDetailByIdWithHttpInfo (int? invoiceWorksheetLineDetailId);
        /// <summary>
        /// Search invoiceWorksheetLineDetails by filter
        /// </summary>
        /// <remarks>
        /// Returns the list of invoiceWorksheetLineDetails that match the given filter.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>List&lt;InvoiceWorksheetLineDetail&gt;</returns>
        List<InvoiceWorksheetLineDetail> GetInvoiceWorksheetLineDetailByFilter (string filter = null, int? page = null, int? limit = null, string sort = null);

        /// <summary>
        /// Search invoiceWorksheetLineDetails by filter
        /// </summary>
        /// <remarks>
        /// Returns the list of invoiceWorksheetLineDetails that match the given filter.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>ApiResponse of List&lt;InvoiceWorksheetLineDetail&gt;</returns>
        ApiResponse<List<InvoiceWorksheetLineDetail>> GetInvoiceWorksheetLineDetailByFilterWithHttpInfo (string filter = null, int? page = null, int? limit = null, string sort = null);
        /// <summary>
        /// Get an invoiceWorksheetLineDetail by id
        /// </summary>
        /// <remarks>
        /// Returns the invoiceWorksheetLineDetail identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceWorksheetLineDetailId">Id of the invoiceWorksheetLineDetail to be returned.</param>
        /// <returns>InvoiceWorksheetLineDetail</returns>
        InvoiceWorksheetLineDetail GetInvoiceWorksheetLineDetailById (int? invoiceWorksheetLineDetailId);

        /// <summary>
        /// Get an invoiceWorksheetLineDetail by id
        /// </summary>
        /// <remarks>
        /// Returns the invoiceWorksheetLineDetail identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceWorksheetLineDetailId">Id of the invoiceWorksheetLineDetail to be returned.</param>
        /// <returns>ApiResponse of InvoiceWorksheetLineDetail</returns>
        ApiResponse<InvoiceWorksheetLineDetail> GetInvoiceWorksheetLineDetailByIdWithHttpInfo (int? invoiceWorksheetLineDetailId);
        /// <summary>
        /// Get the files for an invoiceWorksheetLineDetail.
        /// </summary>
        /// <remarks>
        /// Get all existing invoiceWorksheetLineDetail files.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceWorksheetLineDetailId">Id of the invoiceWorksheetLineDetail to get files for</param>
        /// <returns></returns>
        void GetInvoiceWorksheetLineDetailFiles (int? invoiceWorksheetLineDetailId);

        /// <summary>
        /// Get the files for an invoiceWorksheetLineDetail.
        /// </summary>
        /// <remarks>
        /// Get all existing invoiceWorksheetLineDetail files.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceWorksheetLineDetailId">Id of the invoiceWorksheetLineDetail to get files for</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetInvoiceWorksheetLineDetailFilesWithHttpInfo (int? invoiceWorksheetLineDetailId);
        /// <summary>
        /// Get the tags for an invoiceWorksheetLineDetail.
        /// </summary>
        /// <remarks>
        /// Get all existing invoiceWorksheetLineDetail tags.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceWorksheetLineDetailId">Id of the invoiceWorksheetLineDetail to get tags for</param>
        /// <returns></returns>
        void GetInvoiceWorksheetLineDetailTags (int? invoiceWorksheetLineDetailId);

        /// <summary>
        /// Get the tags for an invoiceWorksheetLineDetail.
        /// </summary>
        /// <remarks>
        /// Get all existing invoiceWorksheetLineDetail tags.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceWorksheetLineDetailId">Id of the invoiceWorksheetLineDetail to get tags for</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetInvoiceWorksheetLineDetailTagsWithHttpInfo (int? invoiceWorksheetLineDetailId);
        /// <summary>
        /// Update an invoiceWorksheetLineDetail custom fields
        /// </summary>
        /// <remarks>
        /// Updates an existing invoiceWorksheetLineDetail custom fields using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">InvoiceWorksheetLineDetail to be updated.</param>
        /// <returns></returns>
        void UpdateInvoiceWorksheetLineDetailCustomFields (InvoiceWorksheetLineDetail body);

        /// <summary>
        /// Update an invoiceWorksheetLineDetail custom fields
        /// </summary>
        /// <remarks>
        /// Updates an existing invoiceWorksheetLineDetail custom fields using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">InvoiceWorksheetLineDetail to be updated.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateInvoiceWorksheetLineDetailCustomFieldsWithHttpInfo (InvoiceWorksheetLineDetail body);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Add new audit for an invoiceWorksheetLineDetail
        /// </summary>
        /// <remarks>
        /// Adds an audit to an existing invoiceWorksheetLineDetail.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceWorksheetLineDetailId">Id of the invoiceWorksheetLineDetail to add an audit to</param>
        /// <param name="invoiceWorksheetLineDetailAudit">The audit to add</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddInvoiceWorksheetLineDetailAuditAsync (int? invoiceWorksheetLineDetailId, string invoiceWorksheetLineDetailAudit);

        /// <summary>
        /// Add new audit for an invoiceWorksheetLineDetail
        /// </summary>
        /// <remarks>
        /// Adds an audit to an existing invoiceWorksheetLineDetail.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceWorksheetLineDetailId">Id of the invoiceWorksheetLineDetail to add an audit to</param>
        /// <param name="invoiceWorksheetLineDetailAudit">The audit to add</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddInvoiceWorksheetLineDetailAuditAsyncWithHttpInfo (int? invoiceWorksheetLineDetailId, string invoiceWorksheetLineDetailAudit);
        /// <summary>
        /// Attach a file to an invoiceWorksheetLineDetail
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing invoiceWorksheetLineDetail.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceWorksheetLineDetailId">Id of the invoiceWorksheetLineDetail to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddInvoiceWorksheetLineDetailFileAsync (int? invoiceWorksheetLineDetailId, string fileName);

        /// <summary>
        /// Attach a file to an invoiceWorksheetLineDetail
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing invoiceWorksheetLineDetail.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceWorksheetLineDetailId">Id of the invoiceWorksheetLineDetail to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddInvoiceWorksheetLineDetailFileAsyncWithHttpInfo (int? invoiceWorksheetLineDetailId, string fileName);
        /// <summary>
        /// Attach a file to an invoiceWorksheetLineDetail by URL.
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing invoiceWorksheetLineDetail by URL.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="invoiceWorksheetLineDetailId">Id of the invoiceWorksheetLineDetail to add an file to</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddInvoiceWorksheetLineDetailFileByURLAsync (RecordFile body, int? invoiceWorksheetLineDetailId);

        /// <summary>
        /// Attach a file to an invoiceWorksheetLineDetail by URL.
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing invoiceWorksheetLineDetail by URL.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="invoiceWorksheetLineDetailId">Id of the invoiceWorksheetLineDetail to add an file to</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddInvoiceWorksheetLineDetailFileByURLAsyncWithHttpInfo (RecordFile body, int? invoiceWorksheetLineDetailId);
        /// <summary>
        /// Add new tags for an invoiceWorksheetLineDetail.
        /// </summary>
        /// <remarks>
        /// Adds a tag to an existing invoiceWorksheetLineDetail.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceWorksheetLineDetailId">Id of the invoiceWorksheetLineDetail to add a tag to</param>
        /// <param name="invoiceWorksheetLineDetailTag">The tag to add</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddInvoiceWorksheetLineDetailTagAsync (int? invoiceWorksheetLineDetailId, string invoiceWorksheetLineDetailTag);

        /// <summary>
        /// Add new tags for an invoiceWorksheetLineDetail.
        /// </summary>
        /// <remarks>
        /// Adds a tag to an existing invoiceWorksheetLineDetail.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceWorksheetLineDetailId">Id of the invoiceWorksheetLineDetail to add a tag to</param>
        /// <param name="invoiceWorksheetLineDetailTag">The tag to add</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddInvoiceWorksheetLineDetailTagAsyncWithHttpInfo (int? invoiceWorksheetLineDetailId, string invoiceWorksheetLineDetailTag);
        /// <summary>
        /// Delete a file for an invoiceWorksheetLineDetail.
        /// </summary>
        /// <remarks>
        /// Deletes an existing invoiceWorksheetLineDetail file using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceWorksheetLineDetailId">Id of the invoiceWorksheetLineDetail to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteInvoiceWorksheetLineDetailFileAsync (int? invoiceWorksheetLineDetailId, int? fileId);

        /// <summary>
        /// Delete a file for an invoiceWorksheetLineDetail.
        /// </summary>
        /// <remarks>
        /// Deletes an existing invoiceWorksheetLineDetail file using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceWorksheetLineDetailId">Id of the invoiceWorksheetLineDetail to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteInvoiceWorksheetLineDetailFileAsyncWithHttpInfo (int? invoiceWorksheetLineDetailId, int? fileId);
        /// <summary>
        /// Delete a tag for an invoiceWorksheetLineDetail.
        /// </summary>
        /// <remarks>
        /// Deletes an existing invoiceWorksheetLineDetail tag using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceWorksheetLineDetailId">Id of the invoiceWorksheetLineDetail to remove tag from</param>
        /// <param name="invoiceWorksheetLineDetailTag">The tag to delete</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteInvoiceWorksheetLineDetailTagAsync (int? invoiceWorksheetLineDetailId, string invoiceWorksheetLineDetailTag);

        /// <summary>
        /// Delete a tag for an invoiceWorksheetLineDetail.
        /// </summary>
        /// <remarks>
        /// Deletes an existing invoiceWorksheetLineDetail tag using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceWorksheetLineDetailId">Id of the invoiceWorksheetLineDetail to remove tag from</param>
        /// <param name="invoiceWorksheetLineDetailTag">The tag to delete</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteInvoiceWorksheetLineDetailTagAsyncWithHttpInfo (int? invoiceWorksheetLineDetailId, string invoiceWorksheetLineDetailTag);
        /// <summary>
        /// Get a duplicated an invoiceWorksheetLineDetail by id
        /// </summary>
        /// <remarks>
        /// Returns a duplicated invoiceWorksheetLineDetail identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceWorksheetLineDetailId">Id of the invoiceWorksheetLineDetail to be duplicated.</param>
        /// <returns>Task of InvoiceWorksheetLineDetail</returns>
        System.Threading.Tasks.Task<InvoiceWorksheetLineDetail> GetDuplicateInvoiceWorksheetLineDetailByIdAsync (int? invoiceWorksheetLineDetailId);

        /// <summary>
        /// Get a duplicated an invoiceWorksheetLineDetail by id
        /// </summary>
        /// <remarks>
        /// Returns a duplicated invoiceWorksheetLineDetail identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceWorksheetLineDetailId">Id of the invoiceWorksheetLineDetail to be duplicated.</param>
        /// <returns>Task of ApiResponse (InvoiceWorksheetLineDetail)</returns>
        System.Threading.Tasks.Task<ApiResponse<InvoiceWorksheetLineDetail>> GetDuplicateInvoiceWorksheetLineDetailByIdAsyncWithHttpInfo (int? invoiceWorksheetLineDetailId);
        /// <summary>
        /// Search invoiceWorksheetLineDetails by filter
        /// </summary>
        /// <remarks>
        /// Returns the list of invoiceWorksheetLineDetails that match the given filter.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>Task of List&lt;InvoiceWorksheetLineDetail&gt;</returns>
        System.Threading.Tasks.Task<List<InvoiceWorksheetLineDetail>> GetInvoiceWorksheetLineDetailByFilterAsync (string filter = null, int? page = null, int? limit = null, string sort = null);

        /// <summary>
        /// Search invoiceWorksheetLineDetails by filter
        /// </summary>
        /// <remarks>
        /// Returns the list of invoiceWorksheetLineDetails that match the given filter.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;InvoiceWorksheetLineDetail&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<InvoiceWorksheetLineDetail>>> GetInvoiceWorksheetLineDetailByFilterAsyncWithHttpInfo (string filter = null, int? page = null, int? limit = null, string sort = null);
        /// <summary>
        /// Get an invoiceWorksheetLineDetail by id
        /// </summary>
        /// <remarks>
        /// Returns the invoiceWorksheetLineDetail identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceWorksheetLineDetailId">Id of the invoiceWorksheetLineDetail to be returned.</param>
        /// <returns>Task of InvoiceWorksheetLineDetail</returns>
        System.Threading.Tasks.Task<InvoiceWorksheetLineDetail> GetInvoiceWorksheetLineDetailByIdAsync (int? invoiceWorksheetLineDetailId);

        /// <summary>
        /// Get an invoiceWorksheetLineDetail by id
        /// </summary>
        /// <remarks>
        /// Returns the invoiceWorksheetLineDetail identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceWorksheetLineDetailId">Id of the invoiceWorksheetLineDetail to be returned.</param>
        /// <returns>Task of ApiResponse (InvoiceWorksheetLineDetail)</returns>
        System.Threading.Tasks.Task<ApiResponse<InvoiceWorksheetLineDetail>> GetInvoiceWorksheetLineDetailByIdAsyncWithHttpInfo (int? invoiceWorksheetLineDetailId);
        /// <summary>
        /// Get the files for an invoiceWorksheetLineDetail.
        /// </summary>
        /// <remarks>
        /// Get all existing invoiceWorksheetLineDetail files.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceWorksheetLineDetailId">Id of the invoiceWorksheetLineDetail to get files for</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetInvoiceWorksheetLineDetailFilesAsync (int? invoiceWorksheetLineDetailId);

        /// <summary>
        /// Get the files for an invoiceWorksheetLineDetail.
        /// </summary>
        /// <remarks>
        /// Get all existing invoiceWorksheetLineDetail files.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceWorksheetLineDetailId">Id of the invoiceWorksheetLineDetail to get files for</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetInvoiceWorksheetLineDetailFilesAsyncWithHttpInfo (int? invoiceWorksheetLineDetailId);
        /// <summary>
        /// Get the tags for an invoiceWorksheetLineDetail.
        /// </summary>
        /// <remarks>
        /// Get all existing invoiceWorksheetLineDetail tags.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceWorksheetLineDetailId">Id of the invoiceWorksheetLineDetail to get tags for</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetInvoiceWorksheetLineDetailTagsAsync (int? invoiceWorksheetLineDetailId);

        /// <summary>
        /// Get the tags for an invoiceWorksheetLineDetail.
        /// </summary>
        /// <remarks>
        /// Get all existing invoiceWorksheetLineDetail tags.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceWorksheetLineDetailId">Id of the invoiceWorksheetLineDetail to get tags for</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetInvoiceWorksheetLineDetailTagsAsyncWithHttpInfo (int? invoiceWorksheetLineDetailId);
        /// <summary>
        /// Update an invoiceWorksheetLineDetail custom fields
        /// </summary>
        /// <remarks>
        /// Updates an existing invoiceWorksheetLineDetail custom fields using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">InvoiceWorksheetLineDetail to be updated.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateInvoiceWorksheetLineDetailCustomFieldsAsync (InvoiceWorksheetLineDetail body);

        /// <summary>
        /// Update an invoiceWorksheetLineDetail custom fields
        /// </summary>
        /// <remarks>
        /// Updates an existing invoiceWorksheetLineDetail custom fields using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">InvoiceWorksheetLineDetail to be updated.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateInvoiceWorksheetLineDetailCustomFieldsAsyncWithHttpInfo (InvoiceWorksheetLineDetail body);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class InvoiceWorksheetLineDetailApi : IInvoiceWorksheetLineDetailApi
    {
        private Infoplus.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="InvoiceWorksheetLineDetailApi"/> class.
        /// </summary>
        /// <returns></returns>
        public InvoiceWorksheetLineDetailApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = Infoplus.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="InvoiceWorksheetLineDetailApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public InvoiceWorksheetLineDetailApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Infoplus.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Infoplus.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Add new audit for an invoiceWorksheetLineDetail Adds an audit to an existing invoiceWorksheetLineDetail.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceWorksheetLineDetailId">Id of the invoiceWorksheetLineDetail to add an audit to</param>
        /// <param name="invoiceWorksheetLineDetailAudit">The audit to add</param>
        /// <returns></returns>
        public void AddInvoiceWorksheetLineDetailAudit (int? invoiceWorksheetLineDetailId, string invoiceWorksheetLineDetailAudit)
        {
             AddInvoiceWorksheetLineDetailAuditWithHttpInfo(invoiceWorksheetLineDetailId, invoiceWorksheetLineDetailAudit);
        }

        /// <summary>
        /// Add new audit for an invoiceWorksheetLineDetail Adds an audit to an existing invoiceWorksheetLineDetail.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceWorksheetLineDetailId">Id of the invoiceWorksheetLineDetail to add an audit to</param>
        /// <param name="invoiceWorksheetLineDetailAudit">The audit to add</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AddInvoiceWorksheetLineDetailAuditWithHttpInfo (int? invoiceWorksheetLineDetailId, string invoiceWorksheetLineDetailAudit)
        {
            // verify the required parameter 'invoiceWorksheetLineDetailId' is set
            if (invoiceWorksheetLineDetailId == null)
                throw new ApiException(400, "Missing required parameter 'invoiceWorksheetLineDetailId' when calling InvoiceWorksheetLineDetailApi->AddInvoiceWorksheetLineDetailAudit");
            // verify the required parameter 'invoiceWorksheetLineDetailAudit' is set
            if (invoiceWorksheetLineDetailAudit == null)
                throw new ApiException(400, "Missing required parameter 'invoiceWorksheetLineDetailAudit' when calling InvoiceWorksheetLineDetailApi->AddInvoiceWorksheetLineDetailAudit");

            var localVarPath = "/beta/invoiceWorksheetLineDetail/{invoiceWorksheetLineDetailId}/audit/{invoiceWorksheetLineDetailAudit}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (invoiceWorksheetLineDetailId != null) localVarPathParams.Add("invoiceWorksheetLineDetailId", Configuration.ApiClient.ParameterToString(invoiceWorksheetLineDetailId)); // path parameter
            if (invoiceWorksheetLineDetailAudit != null) localVarPathParams.Add("invoiceWorksheetLineDetailAudit", Configuration.ApiClient.ParameterToString(invoiceWorksheetLineDetailAudit)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddInvoiceWorksheetLineDetailAudit", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Add new audit for an invoiceWorksheetLineDetail Adds an audit to an existing invoiceWorksheetLineDetail.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceWorksheetLineDetailId">Id of the invoiceWorksheetLineDetail to add an audit to</param>
        /// <param name="invoiceWorksheetLineDetailAudit">The audit to add</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddInvoiceWorksheetLineDetailAuditAsync (int? invoiceWorksheetLineDetailId, string invoiceWorksheetLineDetailAudit)
        {
             await AddInvoiceWorksheetLineDetailAuditAsyncWithHttpInfo(invoiceWorksheetLineDetailId, invoiceWorksheetLineDetailAudit);

        }

        /// <summary>
        /// Add new audit for an invoiceWorksheetLineDetail Adds an audit to an existing invoiceWorksheetLineDetail.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceWorksheetLineDetailId">Id of the invoiceWorksheetLineDetail to add an audit to</param>
        /// <param name="invoiceWorksheetLineDetailAudit">The audit to add</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddInvoiceWorksheetLineDetailAuditAsyncWithHttpInfo (int? invoiceWorksheetLineDetailId, string invoiceWorksheetLineDetailAudit)
        {
            // verify the required parameter 'invoiceWorksheetLineDetailId' is set
            if (invoiceWorksheetLineDetailId == null)
                throw new ApiException(400, "Missing required parameter 'invoiceWorksheetLineDetailId' when calling InvoiceWorksheetLineDetailApi->AddInvoiceWorksheetLineDetailAudit");
            // verify the required parameter 'invoiceWorksheetLineDetailAudit' is set
            if (invoiceWorksheetLineDetailAudit == null)
                throw new ApiException(400, "Missing required parameter 'invoiceWorksheetLineDetailAudit' when calling InvoiceWorksheetLineDetailApi->AddInvoiceWorksheetLineDetailAudit");

            var localVarPath = "/beta/invoiceWorksheetLineDetail/{invoiceWorksheetLineDetailId}/audit/{invoiceWorksheetLineDetailAudit}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (invoiceWorksheetLineDetailId != null) localVarPathParams.Add("invoiceWorksheetLineDetailId", Configuration.ApiClient.ParameterToString(invoiceWorksheetLineDetailId)); // path parameter
            if (invoiceWorksheetLineDetailAudit != null) localVarPathParams.Add("invoiceWorksheetLineDetailAudit", Configuration.ApiClient.ParameterToString(invoiceWorksheetLineDetailAudit)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddInvoiceWorksheetLineDetailAudit", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Attach a file to an invoiceWorksheetLineDetail Adds a file to an existing invoiceWorksheetLineDetail.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceWorksheetLineDetailId">Id of the invoiceWorksheetLineDetail to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns></returns>
        public void AddInvoiceWorksheetLineDetailFile (int? invoiceWorksheetLineDetailId, string fileName)
        {
             AddInvoiceWorksheetLineDetailFileWithHttpInfo(invoiceWorksheetLineDetailId, fileName);
        }

        /// <summary>
        /// Attach a file to an invoiceWorksheetLineDetail Adds a file to an existing invoiceWorksheetLineDetail.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceWorksheetLineDetailId">Id of the invoiceWorksheetLineDetail to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AddInvoiceWorksheetLineDetailFileWithHttpInfo (int? invoiceWorksheetLineDetailId, string fileName)
        {
            // verify the required parameter 'invoiceWorksheetLineDetailId' is set
            if (invoiceWorksheetLineDetailId == null)
                throw new ApiException(400, "Missing required parameter 'invoiceWorksheetLineDetailId' when calling InvoiceWorksheetLineDetailApi->AddInvoiceWorksheetLineDetailFile");
            // verify the required parameter 'fileName' is set
            if (fileName == null)
                throw new ApiException(400, "Missing required parameter 'fileName' when calling InvoiceWorksheetLineDetailApi->AddInvoiceWorksheetLineDetailFile");

            var localVarPath = "/beta/invoiceWorksheetLineDetail/{invoiceWorksheetLineDetailId}/file/{fileName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (invoiceWorksheetLineDetailId != null) localVarPathParams.Add("invoiceWorksheetLineDetailId", Configuration.ApiClient.ParameterToString(invoiceWorksheetLineDetailId)); // path parameter
            if (fileName != null) localVarPathParams.Add("fileName", Configuration.ApiClient.ParameterToString(fileName)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddInvoiceWorksheetLineDetailFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Attach a file to an invoiceWorksheetLineDetail Adds a file to an existing invoiceWorksheetLineDetail.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceWorksheetLineDetailId">Id of the invoiceWorksheetLineDetail to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddInvoiceWorksheetLineDetailFileAsync (int? invoiceWorksheetLineDetailId, string fileName)
        {
             await AddInvoiceWorksheetLineDetailFileAsyncWithHttpInfo(invoiceWorksheetLineDetailId, fileName);

        }

        /// <summary>
        /// Attach a file to an invoiceWorksheetLineDetail Adds a file to an existing invoiceWorksheetLineDetail.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceWorksheetLineDetailId">Id of the invoiceWorksheetLineDetail to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddInvoiceWorksheetLineDetailFileAsyncWithHttpInfo (int? invoiceWorksheetLineDetailId, string fileName)
        {
            // verify the required parameter 'invoiceWorksheetLineDetailId' is set
            if (invoiceWorksheetLineDetailId == null)
                throw new ApiException(400, "Missing required parameter 'invoiceWorksheetLineDetailId' when calling InvoiceWorksheetLineDetailApi->AddInvoiceWorksheetLineDetailFile");
            // verify the required parameter 'fileName' is set
            if (fileName == null)
                throw new ApiException(400, "Missing required parameter 'fileName' when calling InvoiceWorksheetLineDetailApi->AddInvoiceWorksheetLineDetailFile");

            var localVarPath = "/beta/invoiceWorksheetLineDetail/{invoiceWorksheetLineDetailId}/file/{fileName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (invoiceWorksheetLineDetailId != null) localVarPathParams.Add("invoiceWorksheetLineDetailId", Configuration.ApiClient.ParameterToString(invoiceWorksheetLineDetailId)); // path parameter
            if (fileName != null) localVarPathParams.Add("fileName", Configuration.ApiClient.ParameterToString(fileName)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddInvoiceWorksheetLineDetailFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Attach a file to an invoiceWorksheetLineDetail by URL. Adds a file to an existing invoiceWorksheetLineDetail by URL.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="invoiceWorksheetLineDetailId">Id of the invoiceWorksheetLineDetail to add an file to</param>
        /// <returns></returns>
        public void AddInvoiceWorksheetLineDetailFileByURL (RecordFile body, int? invoiceWorksheetLineDetailId)
        {
             AddInvoiceWorksheetLineDetailFileByURLWithHttpInfo(body, invoiceWorksheetLineDetailId);
        }

        /// <summary>
        /// Attach a file to an invoiceWorksheetLineDetail by URL. Adds a file to an existing invoiceWorksheetLineDetail by URL.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="invoiceWorksheetLineDetailId">Id of the invoiceWorksheetLineDetail to add an file to</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AddInvoiceWorksheetLineDetailFileByURLWithHttpInfo (RecordFile body, int? invoiceWorksheetLineDetailId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling InvoiceWorksheetLineDetailApi->AddInvoiceWorksheetLineDetailFileByURL");
            // verify the required parameter 'invoiceWorksheetLineDetailId' is set
            if (invoiceWorksheetLineDetailId == null)
                throw new ApiException(400, "Missing required parameter 'invoiceWorksheetLineDetailId' when calling InvoiceWorksheetLineDetailApi->AddInvoiceWorksheetLineDetailFileByURL");

            var localVarPath = "/beta/invoiceWorksheetLineDetail/{invoiceWorksheetLineDetailId}/file";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (invoiceWorksheetLineDetailId != null) localVarPathParams.Add("invoiceWorksheetLineDetailId", Configuration.ApiClient.ParameterToString(invoiceWorksheetLineDetailId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddInvoiceWorksheetLineDetailFileByURL", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Attach a file to an invoiceWorksheetLineDetail by URL. Adds a file to an existing invoiceWorksheetLineDetail by URL.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="invoiceWorksheetLineDetailId">Id of the invoiceWorksheetLineDetail to add an file to</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddInvoiceWorksheetLineDetailFileByURLAsync (RecordFile body, int? invoiceWorksheetLineDetailId)
        {
             await AddInvoiceWorksheetLineDetailFileByURLAsyncWithHttpInfo(body, invoiceWorksheetLineDetailId);

        }

        /// <summary>
        /// Attach a file to an invoiceWorksheetLineDetail by URL. Adds a file to an existing invoiceWorksheetLineDetail by URL.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="invoiceWorksheetLineDetailId">Id of the invoiceWorksheetLineDetail to add an file to</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddInvoiceWorksheetLineDetailFileByURLAsyncWithHttpInfo (RecordFile body, int? invoiceWorksheetLineDetailId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling InvoiceWorksheetLineDetailApi->AddInvoiceWorksheetLineDetailFileByURL");
            // verify the required parameter 'invoiceWorksheetLineDetailId' is set
            if (invoiceWorksheetLineDetailId == null)
                throw new ApiException(400, "Missing required parameter 'invoiceWorksheetLineDetailId' when calling InvoiceWorksheetLineDetailApi->AddInvoiceWorksheetLineDetailFileByURL");

            var localVarPath = "/beta/invoiceWorksheetLineDetail/{invoiceWorksheetLineDetailId}/file";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (invoiceWorksheetLineDetailId != null) localVarPathParams.Add("invoiceWorksheetLineDetailId", Configuration.ApiClient.ParameterToString(invoiceWorksheetLineDetailId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddInvoiceWorksheetLineDetailFileByURL", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Add new tags for an invoiceWorksheetLineDetail. Adds a tag to an existing invoiceWorksheetLineDetail.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceWorksheetLineDetailId">Id of the invoiceWorksheetLineDetail to add a tag to</param>
        /// <param name="invoiceWorksheetLineDetailTag">The tag to add</param>
        /// <returns></returns>
        public void AddInvoiceWorksheetLineDetailTag (int? invoiceWorksheetLineDetailId, string invoiceWorksheetLineDetailTag)
        {
             AddInvoiceWorksheetLineDetailTagWithHttpInfo(invoiceWorksheetLineDetailId, invoiceWorksheetLineDetailTag);
        }

        /// <summary>
        /// Add new tags for an invoiceWorksheetLineDetail. Adds a tag to an existing invoiceWorksheetLineDetail.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceWorksheetLineDetailId">Id of the invoiceWorksheetLineDetail to add a tag to</param>
        /// <param name="invoiceWorksheetLineDetailTag">The tag to add</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AddInvoiceWorksheetLineDetailTagWithHttpInfo (int? invoiceWorksheetLineDetailId, string invoiceWorksheetLineDetailTag)
        {
            // verify the required parameter 'invoiceWorksheetLineDetailId' is set
            if (invoiceWorksheetLineDetailId == null)
                throw new ApiException(400, "Missing required parameter 'invoiceWorksheetLineDetailId' when calling InvoiceWorksheetLineDetailApi->AddInvoiceWorksheetLineDetailTag");
            // verify the required parameter 'invoiceWorksheetLineDetailTag' is set
            if (invoiceWorksheetLineDetailTag == null)
                throw new ApiException(400, "Missing required parameter 'invoiceWorksheetLineDetailTag' when calling InvoiceWorksheetLineDetailApi->AddInvoiceWorksheetLineDetailTag");

            var localVarPath = "/beta/invoiceWorksheetLineDetail/{invoiceWorksheetLineDetailId}/tag/{invoiceWorksheetLineDetailTag}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (invoiceWorksheetLineDetailId != null) localVarPathParams.Add("invoiceWorksheetLineDetailId", Configuration.ApiClient.ParameterToString(invoiceWorksheetLineDetailId)); // path parameter
            if (invoiceWorksheetLineDetailTag != null) localVarPathParams.Add("invoiceWorksheetLineDetailTag", Configuration.ApiClient.ParameterToString(invoiceWorksheetLineDetailTag)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddInvoiceWorksheetLineDetailTag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Add new tags for an invoiceWorksheetLineDetail. Adds a tag to an existing invoiceWorksheetLineDetail.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceWorksheetLineDetailId">Id of the invoiceWorksheetLineDetail to add a tag to</param>
        /// <param name="invoiceWorksheetLineDetailTag">The tag to add</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddInvoiceWorksheetLineDetailTagAsync (int? invoiceWorksheetLineDetailId, string invoiceWorksheetLineDetailTag)
        {
             await AddInvoiceWorksheetLineDetailTagAsyncWithHttpInfo(invoiceWorksheetLineDetailId, invoiceWorksheetLineDetailTag);

        }

        /// <summary>
        /// Add new tags for an invoiceWorksheetLineDetail. Adds a tag to an existing invoiceWorksheetLineDetail.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceWorksheetLineDetailId">Id of the invoiceWorksheetLineDetail to add a tag to</param>
        /// <param name="invoiceWorksheetLineDetailTag">The tag to add</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddInvoiceWorksheetLineDetailTagAsyncWithHttpInfo (int? invoiceWorksheetLineDetailId, string invoiceWorksheetLineDetailTag)
        {
            // verify the required parameter 'invoiceWorksheetLineDetailId' is set
            if (invoiceWorksheetLineDetailId == null)
                throw new ApiException(400, "Missing required parameter 'invoiceWorksheetLineDetailId' when calling InvoiceWorksheetLineDetailApi->AddInvoiceWorksheetLineDetailTag");
            // verify the required parameter 'invoiceWorksheetLineDetailTag' is set
            if (invoiceWorksheetLineDetailTag == null)
                throw new ApiException(400, "Missing required parameter 'invoiceWorksheetLineDetailTag' when calling InvoiceWorksheetLineDetailApi->AddInvoiceWorksheetLineDetailTag");

            var localVarPath = "/beta/invoiceWorksheetLineDetail/{invoiceWorksheetLineDetailId}/tag/{invoiceWorksheetLineDetailTag}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (invoiceWorksheetLineDetailId != null) localVarPathParams.Add("invoiceWorksheetLineDetailId", Configuration.ApiClient.ParameterToString(invoiceWorksheetLineDetailId)); // path parameter
            if (invoiceWorksheetLineDetailTag != null) localVarPathParams.Add("invoiceWorksheetLineDetailTag", Configuration.ApiClient.ParameterToString(invoiceWorksheetLineDetailTag)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddInvoiceWorksheetLineDetailTag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a file for an invoiceWorksheetLineDetail. Deletes an existing invoiceWorksheetLineDetail file using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceWorksheetLineDetailId">Id of the invoiceWorksheetLineDetail to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns></returns>
        public void DeleteInvoiceWorksheetLineDetailFile (int? invoiceWorksheetLineDetailId, int? fileId)
        {
             DeleteInvoiceWorksheetLineDetailFileWithHttpInfo(invoiceWorksheetLineDetailId, fileId);
        }

        /// <summary>
        /// Delete a file for an invoiceWorksheetLineDetail. Deletes an existing invoiceWorksheetLineDetail file using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceWorksheetLineDetailId">Id of the invoiceWorksheetLineDetail to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteInvoiceWorksheetLineDetailFileWithHttpInfo (int? invoiceWorksheetLineDetailId, int? fileId)
        {
            // verify the required parameter 'invoiceWorksheetLineDetailId' is set
            if (invoiceWorksheetLineDetailId == null)
                throw new ApiException(400, "Missing required parameter 'invoiceWorksheetLineDetailId' when calling InvoiceWorksheetLineDetailApi->DeleteInvoiceWorksheetLineDetailFile");
            // verify the required parameter 'fileId' is set
            if (fileId == null)
                throw new ApiException(400, "Missing required parameter 'fileId' when calling InvoiceWorksheetLineDetailApi->DeleteInvoiceWorksheetLineDetailFile");

            var localVarPath = "/beta/invoiceWorksheetLineDetail/{invoiceWorksheetLineDetailId}/file/{fileId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (invoiceWorksheetLineDetailId != null) localVarPathParams.Add("invoiceWorksheetLineDetailId", Configuration.ApiClient.ParameterToString(invoiceWorksheetLineDetailId)); // path parameter
            if (fileId != null) localVarPathParams.Add("fileId", Configuration.ApiClient.ParameterToString(fileId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteInvoiceWorksheetLineDetailFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a file for an invoiceWorksheetLineDetail. Deletes an existing invoiceWorksheetLineDetail file using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceWorksheetLineDetailId">Id of the invoiceWorksheetLineDetail to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteInvoiceWorksheetLineDetailFileAsync (int? invoiceWorksheetLineDetailId, int? fileId)
        {
             await DeleteInvoiceWorksheetLineDetailFileAsyncWithHttpInfo(invoiceWorksheetLineDetailId, fileId);

        }

        /// <summary>
        /// Delete a file for an invoiceWorksheetLineDetail. Deletes an existing invoiceWorksheetLineDetail file using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceWorksheetLineDetailId">Id of the invoiceWorksheetLineDetail to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteInvoiceWorksheetLineDetailFileAsyncWithHttpInfo (int? invoiceWorksheetLineDetailId, int? fileId)
        {
            // verify the required parameter 'invoiceWorksheetLineDetailId' is set
            if (invoiceWorksheetLineDetailId == null)
                throw new ApiException(400, "Missing required parameter 'invoiceWorksheetLineDetailId' when calling InvoiceWorksheetLineDetailApi->DeleteInvoiceWorksheetLineDetailFile");
            // verify the required parameter 'fileId' is set
            if (fileId == null)
                throw new ApiException(400, "Missing required parameter 'fileId' when calling InvoiceWorksheetLineDetailApi->DeleteInvoiceWorksheetLineDetailFile");

            var localVarPath = "/beta/invoiceWorksheetLineDetail/{invoiceWorksheetLineDetailId}/file/{fileId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (invoiceWorksheetLineDetailId != null) localVarPathParams.Add("invoiceWorksheetLineDetailId", Configuration.ApiClient.ParameterToString(invoiceWorksheetLineDetailId)); // path parameter
            if (fileId != null) localVarPathParams.Add("fileId", Configuration.ApiClient.ParameterToString(fileId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteInvoiceWorksheetLineDetailFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a tag for an invoiceWorksheetLineDetail. Deletes an existing invoiceWorksheetLineDetail tag using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceWorksheetLineDetailId">Id of the invoiceWorksheetLineDetail to remove tag from</param>
        /// <param name="invoiceWorksheetLineDetailTag">The tag to delete</param>
        /// <returns></returns>
        public void DeleteInvoiceWorksheetLineDetailTag (int? invoiceWorksheetLineDetailId, string invoiceWorksheetLineDetailTag)
        {
             DeleteInvoiceWorksheetLineDetailTagWithHttpInfo(invoiceWorksheetLineDetailId, invoiceWorksheetLineDetailTag);
        }

        /// <summary>
        /// Delete a tag for an invoiceWorksheetLineDetail. Deletes an existing invoiceWorksheetLineDetail tag using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceWorksheetLineDetailId">Id of the invoiceWorksheetLineDetail to remove tag from</param>
        /// <param name="invoiceWorksheetLineDetailTag">The tag to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteInvoiceWorksheetLineDetailTagWithHttpInfo (int? invoiceWorksheetLineDetailId, string invoiceWorksheetLineDetailTag)
        {
            // verify the required parameter 'invoiceWorksheetLineDetailId' is set
            if (invoiceWorksheetLineDetailId == null)
                throw new ApiException(400, "Missing required parameter 'invoiceWorksheetLineDetailId' when calling InvoiceWorksheetLineDetailApi->DeleteInvoiceWorksheetLineDetailTag");
            // verify the required parameter 'invoiceWorksheetLineDetailTag' is set
            if (invoiceWorksheetLineDetailTag == null)
                throw new ApiException(400, "Missing required parameter 'invoiceWorksheetLineDetailTag' when calling InvoiceWorksheetLineDetailApi->DeleteInvoiceWorksheetLineDetailTag");

            var localVarPath = "/beta/invoiceWorksheetLineDetail/{invoiceWorksheetLineDetailId}/tag/{invoiceWorksheetLineDetailTag}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (invoiceWorksheetLineDetailId != null) localVarPathParams.Add("invoiceWorksheetLineDetailId", Configuration.ApiClient.ParameterToString(invoiceWorksheetLineDetailId)); // path parameter
            if (invoiceWorksheetLineDetailTag != null) localVarPathParams.Add("invoiceWorksheetLineDetailTag", Configuration.ApiClient.ParameterToString(invoiceWorksheetLineDetailTag)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteInvoiceWorksheetLineDetailTag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a tag for an invoiceWorksheetLineDetail. Deletes an existing invoiceWorksheetLineDetail tag using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceWorksheetLineDetailId">Id of the invoiceWorksheetLineDetail to remove tag from</param>
        /// <param name="invoiceWorksheetLineDetailTag">The tag to delete</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteInvoiceWorksheetLineDetailTagAsync (int? invoiceWorksheetLineDetailId, string invoiceWorksheetLineDetailTag)
        {
             await DeleteInvoiceWorksheetLineDetailTagAsyncWithHttpInfo(invoiceWorksheetLineDetailId, invoiceWorksheetLineDetailTag);

        }

        /// <summary>
        /// Delete a tag for an invoiceWorksheetLineDetail. Deletes an existing invoiceWorksheetLineDetail tag using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceWorksheetLineDetailId">Id of the invoiceWorksheetLineDetail to remove tag from</param>
        /// <param name="invoiceWorksheetLineDetailTag">The tag to delete</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteInvoiceWorksheetLineDetailTagAsyncWithHttpInfo (int? invoiceWorksheetLineDetailId, string invoiceWorksheetLineDetailTag)
        {
            // verify the required parameter 'invoiceWorksheetLineDetailId' is set
            if (invoiceWorksheetLineDetailId == null)
                throw new ApiException(400, "Missing required parameter 'invoiceWorksheetLineDetailId' when calling InvoiceWorksheetLineDetailApi->DeleteInvoiceWorksheetLineDetailTag");
            // verify the required parameter 'invoiceWorksheetLineDetailTag' is set
            if (invoiceWorksheetLineDetailTag == null)
                throw new ApiException(400, "Missing required parameter 'invoiceWorksheetLineDetailTag' when calling InvoiceWorksheetLineDetailApi->DeleteInvoiceWorksheetLineDetailTag");

            var localVarPath = "/beta/invoiceWorksheetLineDetail/{invoiceWorksheetLineDetailId}/tag/{invoiceWorksheetLineDetailTag}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (invoiceWorksheetLineDetailId != null) localVarPathParams.Add("invoiceWorksheetLineDetailId", Configuration.ApiClient.ParameterToString(invoiceWorksheetLineDetailId)); // path parameter
            if (invoiceWorksheetLineDetailTag != null) localVarPathParams.Add("invoiceWorksheetLineDetailTag", Configuration.ApiClient.ParameterToString(invoiceWorksheetLineDetailTag)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteInvoiceWorksheetLineDetailTag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get a duplicated an invoiceWorksheetLineDetail by id Returns a duplicated invoiceWorksheetLineDetail identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceWorksheetLineDetailId">Id of the invoiceWorksheetLineDetail to be duplicated.</param>
        /// <returns>InvoiceWorksheetLineDetail</returns>
        public InvoiceWorksheetLineDetail GetDuplicateInvoiceWorksheetLineDetailById (int? invoiceWorksheetLineDetailId)
        {
             ApiResponse<InvoiceWorksheetLineDetail> localVarResponse = GetDuplicateInvoiceWorksheetLineDetailByIdWithHttpInfo(invoiceWorksheetLineDetailId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a duplicated an invoiceWorksheetLineDetail by id Returns a duplicated invoiceWorksheetLineDetail identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceWorksheetLineDetailId">Id of the invoiceWorksheetLineDetail to be duplicated.</param>
        /// <returns>ApiResponse of InvoiceWorksheetLineDetail</returns>
        public ApiResponse< InvoiceWorksheetLineDetail > GetDuplicateInvoiceWorksheetLineDetailByIdWithHttpInfo (int? invoiceWorksheetLineDetailId)
        {
            // verify the required parameter 'invoiceWorksheetLineDetailId' is set
            if (invoiceWorksheetLineDetailId == null)
                throw new ApiException(400, "Missing required parameter 'invoiceWorksheetLineDetailId' when calling InvoiceWorksheetLineDetailApi->GetDuplicateInvoiceWorksheetLineDetailById");

            var localVarPath = "/beta/invoiceWorksheetLineDetail/duplicate/{invoiceWorksheetLineDetailId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (invoiceWorksheetLineDetailId != null) localVarPathParams.Add("invoiceWorksheetLineDetailId", Configuration.ApiClient.ParameterToString(invoiceWorksheetLineDetailId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDuplicateInvoiceWorksheetLineDetailById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InvoiceWorksheetLineDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InvoiceWorksheetLineDetail) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InvoiceWorksheetLineDetail)));
        }

        /// <summary>
        /// Get a duplicated an invoiceWorksheetLineDetail by id Returns a duplicated invoiceWorksheetLineDetail identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceWorksheetLineDetailId">Id of the invoiceWorksheetLineDetail to be duplicated.</param>
        /// <returns>Task of InvoiceWorksheetLineDetail</returns>
        public async System.Threading.Tasks.Task<InvoiceWorksheetLineDetail> GetDuplicateInvoiceWorksheetLineDetailByIdAsync (int? invoiceWorksheetLineDetailId)
        {
             ApiResponse<InvoiceWorksheetLineDetail> localVarResponse = await GetDuplicateInvoiceWorksheetLineDetailByIdAsyncWithHttpInfo(invoiceWorksheetLineDetailId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a duplicated an invoiceWorksheetLineDetail by id Returns a duplicated invoiceWorksheetLineDetail identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceWorksheetLineDetailId">Id of the invoiceWorksheetLineDetail to be duplicated.</param>
        /// <returns>Task of ApiResponse (InvoiceWorksheetLineDetail)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InvoiceWorksheetLineDetail>> GetDuplicateInvoiceWorksheetLineDetailByIdAsyncWithHttpInfo (int? invoiceWorksheetLineDetailId)
        {
            // verify the required parameter 'invoiceWorksheetLineDetailId' is set
            if (invoiceWorksheetLineDetailId == null)
                throw new ApiException(400, "Missing required parameter 'invoiceWorksheetLineDetailId' when calling InvoiceWorksheetLineDetailApi->GetDuplicateInvoiceWorksheetLineDetailById");

            var localVarPath = "/beta/invoiceWorksheetLineDetail/duplicate/{invoiceWorksheetLineDetailId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (invoiceWorksheetLineDetailId != null) localVarPathParams.Add("invoiceWorksheetLineDetailId", Configuration.ApiClient.ParameterToString(invoiceWorksheetLineDetailId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDuplicateInvoiceWorksheetLineDetailById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InvoiceWorksheetLineDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InvoiceWorksheetLineDetail) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InvoiceWorksheetLineDetail)));
        }

        /// <summary>
        /// Search invoiceWorksheetLineDetails by filter Returns the list of invoiceWorksheetLineDetails that match the given filter.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>List&lt;InvoiceWorksheetLineDetail&gt;</returns>
        public List<InvoiceWorksheetLineDetail> GetInvoiceWorksheetLineDetailByFilter (string filter = null, int? page = null, int? limit = null, string sort = null)
        {
             ApiResponse<List<InvoiceWorksheetLineDetail>> localVarResponse = GetInvoiceWorksheetLineDetailByFilterWithHttpInfo(filter, page, limit, sort);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Search invoiceWorksheetLineDetails by filter Returns the list of invoiceWorksheetLineDetails that match the given filter.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>ApiResponse of List&lt;InvoiceWorksheetLineDetail&gt;</returns>
        public ApiResponse< List<InvoiceWorksheetLineDetail> > GetInvoiceWorksheetLineDetailByFilterWithHttpInfo (string filter = null, int? page = null, int? limit = null, string sort = null)
        {

            var localVarPath = "/beta/invoiceWorksheetLineDetail/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (filter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (page != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetInvoiceWorksheetLineDetailByFilter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<InvoiceWorksheetLineDetail>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<InvoiceWorksheetLineDetail>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<InvoiceWorksheetLineDetail>)));
        }

        /// <summary>
        /// Search invoiceWorksheetLineDetails by filter Returns the list of invoiceWorksheetLineDetails that match the given filter.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>Task of List&lt;InvoiceWorksheetLineDetail&gt;</returns>
        public async System.Threading.Tasks.Task<List<InvoiceWorksheetLineDetail>> GetInvoiceWorksheetLineDetailByFilterAsync (string filter = null, int? page = null, int? limit = null, string sort = null)
        {
             ApiResponse<List<InvoiceWorksheetLineDetail>> localVarResponse = await GetInvoiceWorksheetLineDetailByFilterAsyncWithHttpInfo(filter, page, limit, sort);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Search invoiceWorksheetLineDetails by filter Returns the list of invoiceWorksheetLineDetails that match the given filter.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;InvoiceWorksheetLineDetail&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<InvoiceWorksheetLineDetail>>> GetInvoiceWorksheetLineDetailByFilterAsyncWithHttpInfo (string filter = null, int? page = null, int? limit = null, string sort = null)
        {

            var localVarPath = "/beta/invoiceWorksheetLineDetail/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (filter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (page != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetInvoiceWorksheetLineDetailByFilter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<InvoiceWorksheetLineDetail>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<InvoiceWorksheetLineDetail>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<InvoiceWorksheetLineDetail>)));
        }

        /// <summary>
        /// Get an invoiceWorksheetLineDetail by id Returns the invoiceWorksheetLineDetail identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceWorksheetLineDetailId">Id of the invoiceWorksheetLineDetail to be returned.</param>
        /// <returns>InvoiceWorksheetLineDetail</returns>
        public InvoiceWorksheetLineDetail GetInvoiceWorksheetLineDetailById (int? invoiceWorksheetLineDetailId)
        {
             ApiResponse<InvoiceWorksheetLineDetail> localVarResponse = GetInvoiceWorksheetLineDetailByIdWithHttpInfo(invoiceWorksheetLineDetailId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get an invoiceWorksheetLineDetail by id Returns the invoiceWorksheetLineDetail identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceWorksheetLineDetailId">Id of the invoiceWorksheetLineDetail to be returned.</param>
        /// <returns>ApiResponse of InvoiceWorksheetLineDetail</returns>
        public ApiResponse< InvoiceWorksheetLineDetail > GetInvoiceWorksheetLineDetailByIdWithHttpInfo (int? invoiceWorksheetLineDetailId)
        {
            // verify the required parameter 'invoiceWorksheetLineDetailId' is set
            if (invoiceWorksheetLineDetailId == null)
                throw new ApiException(400, "Missing required parameter 'invoiceWorksheetLineDetailId' when calling InvoiceWorksheetLineDetailApi->GetInvoiceWorksheetLineDetailById");

            var localVarPath = "/beta/invoiceWorksheetLineDetail/{invoiceWorksheetLineDetailId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (invoiceWorksheetLineDetailId != null) localVarPathParams.Add("invoiceWorksheetLineDetailId", Configuration.ApiClient.ParameterToString(invoiceWorksheetLineDetailId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetInvoiceWorksheetLineDetailById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InvoiceWorksheetLineDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InvoiceWorksheetLineDetail) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InvoiceWorksheetLineDetail)));
        }

        /// <summary>
        /// Get an invoiceWorksheetLineDetail by id Returns the invoiceWorksheetLineDetail identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceWorksheetLineDetailId">Id of the invoiceWorksheetLineDetail to be returned.</param>
        /// <returns>Task of InvoiceWorksheetLineDetail</returns>
        public async System.Threading.Tasks.Task<InvoiceWorksheetLineDetail> GetInvoiceWorksheetLineDetailByIdAsync (int? invoiceWorksheetLineDetailId)
        {
             ApiResponse<InvoiceWorksheetLineDetail> localVarResponse = await GetInvoiceWorksheetLineDetailByIdAsyncWithHttpInfo(invoiceWorksheetLineDetailId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get an invoiceWorksheetLineDetail by id Returns the invoiceWorksheetLineDetail identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceWorksheetLineDetailId">Id of the invoiceWorksheetLineDetail to be returned.</param>
        /// <returns>Task of ApiResponse (InvoiceWorksheetLineDetail)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InvoiceWorksheetLineDetail>> GetInvoiceWorksheetLineDetailByIdAsyncWithHttpInfo (int? invoiceWorksheetLineDetailId)
        {
            // verify the required parameter 'invoiceWorksheetLineDetailId' is set
            if (invoiceWorksheetLineDetailId == null)
                throw new ApiException(400, "Missing required parameter 'invoiceWorksheetLineDetailId' when calling InvoiceWorksheetLineDetailApi->GetInvoiceWorksheetLineDetailById");

            var localVarPath = "/beta/invoiceWorksheetLineDetail/{invoiceWorksheetLineDetailId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (invoiceWorksheetLineDetailId != null) localVarPathParams.Add("invoiceWorksheetLineDetailId", Configuration.ApiClient.ParameterToString(invoiceWorksheetLineDetailId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetInvoiceWorksheetLineDetailById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InvoiceWorksheetLineDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InvoiceWorksheetLineDetail) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InvoiceWorksheetLineDetail)));
        }

        /// <summary>
        /// Get the files for an invoiceWorksheetLineDetail. Get all existing invoiceWorksheetLineDetail files.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceWorksheetLineDetailId">Id of the invoiceWorksheetLineDetail to get files for</param>
        /// <returns></returns>
        public void GetInvoiceWorksheetLineDetailFiles (int? invoiceWorksheetLineDetailId)
        {
             GetInvoiceWorksheetLineDetailFilesWithHttpInfo(invoiceWorksheetLineDetailId);
        }

        /// <summary>
        /// Get the files for an invoiceWorksheetLineDetail. Get all existing invoiceWorksheetLineDetail files.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceWorksheetLineDetailId">Id of the invoiceWorksheetLineDetail to get files for</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GetInvoiceWorksheetLineDetailFilesWithHttpInfo (int? invoiceWorksheetLineDetailId)
        {
            // verify the required parameter 'invoiceWorksheetLineDetailId' is set
            if (invoiceWorksheetLineDetailId == null)
                throw new ApiException(400, "Missing required parameter 'invoiceWorksheetLineDetailId' when calling InvoiceWorksheetLineDetailApi->GetInvoiceWorksheetLineDetailFiles");

            var localVarPath = "/beta/invoiceWorksheetLineDetail/{invoiceWorksheetLineDetailId}/file";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (invoiceWorksheetLineDetailId != null) localVarPathParams.Add("invoiceWorksheetLineDetailId", Configuration.ApiClient.ParameterToString(invoiceWorksheetLineDetailId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetInvoiceWorksheetLineDetailFiles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get the files for an invoiceWorksheetLineDetail. Get all existing invoiceWorksheetLineDetail files.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceWorksheetLineDetailId">Id of the invoiceWorksheetLineDetail to get files for</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetInvoiceWorksheetLineDetailFilesAsync (int? invoiceWorksheetLineDetailId)
        {
             await GetInvoiceWorksheetLineDetailFilesAsyncWithHttpInfo(invoiceWorksheetLineDetailId);

        }

        /// <summary>
        /// Get the files for an invoiceWorksheetLineDetail. Get all existing invoiceWorksheetLineDetail files.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceWorksheetLineDetailId">Id of the invoiceWorksheetLineDetail to get files for</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetInvoiceWorksheetLineDetailFilesAsyncWithHttpInfo (int? invoiceWorksheetLineDetailId)
        {
            // verify the required parameter 'invoiceWorksheetLineDetailId' is set
            if (invoiceWorksheetLineDetailId == null)
                throw new ApiException(400, "Missing required parameter 'invoiceWorksheetLineDetailId' when calling InvoiceWorksheetLineDetailApi->GetInvoiceWorksheetLineDetailFiles");

            var localVarPath = "/beta/invoiceWorksheetLineDetail/{invoiceWorksheetLineDetailId}/file";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (invoiceWorksheetLineDetailId != null) localVarPathParams.Add("invoiceWorksheetLineDetailId", Configuration.ApiClient.ParameterToString(invoiceWorksheetLineDetailId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetInvoiceWorksheetLineDetailFiles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get the tags for an invoiceWorksheetLineDetail. Get all existing invoiceWorksheetLineDetail tags.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceWorksheetLineDetailId">Id of the invoiceWorksheetLineDetail to get tags for</param>
        /// <returns></returns>
        public void GetInvoiceWorksheetLineDetailTags (int? invoiceWorksheetLineDetailId)
        {
             GetInvoiceWorksheetLineDetailTagsWithHttpInfo(invoiceWorksheetLineDetailId);
        }

        /// <summary>
        /// Get the tags for an invoiceWorksheetLineDetail. Get all existing invoiceWorksheetLineDetail tags.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceWorksheetLineDetailId">Id of the invoiceWorksheetLineDetail to get tags for</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GetInvoiceWorksheetLineDetailTagsWithHttpInfo (int? invoiceWorksheetLineDetailId)
        {
            // verify the required parameter 'invoiceWorksheetLineDetailId' is set
            if (invoiceWorksheetLineDetailId == null)
                throw new ApiException(400, "Missing required parameter 'invoiceWorksheetLineDetailId' when calling InvoiceWorksheetLineDetailApi->GetInvoiceWorksheetLineDetailTags");

            var localVarPath = "/beta/invoiceWorksheetLineDetail/{invoiceWorksheetLineDetailId}/tag";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (invoiceWorksheetLineDetailId != null) localVarPathParams.Add("invoiceWorksheetLineDetailId", Configuration.ApiClient.ParameterToString(invoiceWorksheetLineDetailId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetInvoiceWorksheetLineDetailTags", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get the tags for an invoiceWorksheetLineDetail. Get all existing invoiceWorksheetLineDetail tags.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceWorksheetLineDetailId">Id of the invoiceWorksheetLineDetail to get tags for</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetInvoiceWorksheetLineDetailTagsAsync (int? invoiceWorksheetLineDetailId)
        {
             await GetInvoiceWorksheetLineDetailTagsAsyncWithHttpInfo(invoiceWorksheetLineDetailId);

        }

        /// <summary>
        /// Get the tags for an invoiceWorksheetLineDetail. Get all existing invoiceWorksheetLineDetail tags.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceWorksheetLineDetailId">Id of the invoiceWorksheetLineDetail to get tags for</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetInvoiceWorksheetLineDetailTagsAsyncWithHttpInfo (int? invoiceWorksheetLineDetailId)
        {
            // verify the required parameter 'invoiceWorksheetLineDetailId' is set
            if (invoiceWorksheetLineDetailId == null)
                throw new ApiException(400, "Missing required parameter 'invoiceWorksheetLineDetailId' when calling InvoiceWorksheetLineDetailApi->GetInvoiceWorksheetLineDetailTags");

            var localVarPath = "/beta/invoiceWorksheetLineDetail/{invoiceWorksheetLineDetailId}/tag";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (invoiceWorksheetLineDetailId != null) localVarPathParams.Add("invoiceWorksheetLineDetailId", Configuration.ApiClient.ParameterToString(invoiceWorksheetLineDetailId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetInvoiceWorksheetLineDetailTags", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update an invoiceWorksheetLineDetail custom fields Updates an existing invoiceWorksheetLineDetail custom fields using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">InvoiceWorksheetLineDetail to be updated.</param>
        /// <returns></returns>
        public void UpdateInvoiceWorksheetLineDetailCustomFields (InvoiceWorksheetLineDetail body)
        {
             UpdateInvoiceWorksheetLineDetailCustomFieldsWithHttpInfo(body);
        }

        /// <summary>
        /// Update an invoiceWorksheetLineDetail custom fields Updates an existing invoiceWorksheetLineDetail custom fields using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">InvoiceWorksheetLineDetail to be updated.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateInvoiceWorksheetLineDetailCustomFieldsWithHttpInfo (InvoiceWorksheetLineDetail body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling InvoiceWorksheetLineDetailApi->UpdateInvoiceWorksheetLineDetailCustomFields");

            var localVarPath = "/beta/invoiceWorksheetLineDetail/customFields";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateInvoiceWorksheetLineDetailCustomFields", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update an invoiceWorksheetLineDetail custom fields Updates an existing invoiceWorksheetLineDetail custom fields using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">InvoiceWorksheetLineDetail to be updated.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateInvoiceWorksheetLineDetailCustomFieldsAsync (InvoiceWorksheetLineDetail body)
        {
             await UpdateInvoiceWorksheetLineDetailCustomFieldsAsyncWithHttpInfo(body);

        }

        /// <summary>
        /// Update an invoiceWorksheetLineDetail custom fields Updates an existing invoiceWorksheetLineDetail custom fields using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">InvoiceWorksheetLineDetail to be updated.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateInvoiceWorksheetLineDetailCustomFieldsAsyncWithHttpInfo (InvoiceWorksheetLineDetail body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling InvoiceWorksheetLineDetailApi->UpdateInvoiceWorksheetLineDetailCustomFields");

            var localVarPath = "/beta/invoiceWorksheetLineDetail/customFields";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateInvoiceWorksheetLineDetailCustomFields", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

    }
}
