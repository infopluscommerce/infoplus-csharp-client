/* 
 * Infoplus API
 *
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Infoplus.Client;
using Infoplus.Model;

namespace Infoplus.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IItemActivityApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Add new audit for an itemActivity
        /// </summary>
        /// <remarks>
        /// Adds an audit to an existing itemActivity.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemActivityId">Id of the itemActivity to add an audit to</param>
        /// <param name="itemActivityAudit">The audit to add</param>
        /// <returns></returns>
        void AddItemActivityAudit (int? itemActivityId, string itemActivityAudit);

        /// <summary>
        /// Add new audit for an itemActivity
        /// </summary>
        /// <remarks>
        /// Adds an audit to an existing itemActivity.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemActivityId">Id of the itemActivity to add an audit to</param>
        /// <param name="itemActivityAudit">The audit to add</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddItemActivityAuditWithHttpInfo (int? itemActivityId, string itemActivityAudit);
        /// <summary>
        /// Attach a file to an itemActivity
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing itemActivity.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemActivityId">Id of the itemActivity to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns></returns>
        void AddItemActivityFile (int? itemActivityId, string fileName);

        /// <summary>
        /// Attach a file to an itemActivity
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing itemActivity.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemActivityId">Id of the itemActivity to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddItemActivityFileWithHttpInfo (int? itemActivityId, string fileName);
        /// <summary>
        /// Attach a file to an itemActivity by URL.
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing itemActivity by URL.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="itemActivityId">Id of the itemActivity to add an file to</param>
        /// <returns></returns>
        void AddItemActivityFileByURL (RecordFile body, int? itemActivityId);

        /// <summary>
        /// Attach a file to an itemActivity by URL.
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing itemActivity by URL.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="itemActivityId">Id of the itemActivity to add an file to</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddItemActivityFileByURLWithHttpInfo (RecordFile body, int? itemActivityId);
        /// <summary>
        /// Add new tags for an itemActivity.
        /// </summary>
        /// <remarks>
        /// Adds a tag to an existing itemActivity.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemActivityId">Id of the itemActivity to add a tag to</param>
        /// <param name="itemActivityTag">The tag to add</param>
        /// <returns></returns>
        void AddItemActivityTag (int? itemActivityId, string itemActivityTag);

        /// <summary>
        /// Add new tags for an itemActivity.
        /// </summary>
        /// <remarks>
        /// Adds a tag to an existing itemActivity.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemActivityId">Id of the itemActivity to add a tag to</param>
        /// <param name="itemActivityTag">The tag to add</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddItemActivityTagWithHttpInfo (int? itemActivityId, string itemActivityTag);
        /// <summary>
        /// Delete a file for an itemActivity.
        /// </summary>
        /// <remarks>
        /// Deletes an existing itemActivity file using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemActivityId">Id of the itemActivity to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns></returns>
        void DeleteItemActivityFile (int? itemActivityId, int? fileId);

        /// <summary>
        /// Delete a file for an itemActivity.
        /// </summary>
        /// <remarks>
        /// Deletes an existing itemActivity file using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemActivityId">Id of the itemActivity to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteItemActivityFileWithHttpInfo (int? itemActivityId, int? fileId);
        /// <summary>
        /// Delete a tag for an itemActivity.
        /// </summary>
        /// <remarks>
        /// Deletes an existing itemActivity tag using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemActivityId">Id of the itemActivity to remove tag from</param>
        /// <param name="itemActivityTag">The tag to delete</param>
        /// <returns></returns>
        void DeleteItemActivityTag (int? itemActivityId, string itemActivityTag);

        /// <summary>
        /// Delete a tag for an itemActivity.
        /// </summary>
        /// <remarks>
        /// Deletes an existing itemActivity tag using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemActivityId">Id of the itemActivity to remove tag from</param>
        /// <param name="itemActivityTag">The tag to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteItemActivityTagWithHttpInfo (int? itemActivityId, string itemActivityTag);
        /// <summary>
        /// Get a duplicated an itemActivity by id
        /// </summary>
        /// <remarks>
        /// Returns a duplicated itemActivity identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemActivityId">Id of the itemActivity to be duplicated.</param>
        /// <returns>ItemActivity</returns>
        ItemActivity GetDuplicateItemActivityById (int? itemActivityId);

        /// <summary>
        /// Get a duplicated an itemActivity by id
        /// </summary>
        /// <remarks>
        /// Returns a duplicated itemActivity identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemActivityId">Id of the itemActivity to be duplicated.</param>
        /// <returns>ApiResponse of ItemActivity</returns>
        ApiResponse<ItemActivity> GetDuplicateItemActivityByIdWithHttpInfo (int? itemActivityId);
        /// <summary>
        /// Search itemActivitys by filter
        /// </summary>
        /// <remarks>
        /// Returns the list of itemActivitys that match the given filter.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>List&lt;ItemActivity&gt;</returns>
        List<ItemActivity> GetItemActivityByFilter (string filter = null, int? page = null, int? limit = null, string sort = null);

        /// <summary>
        /// Search itemActivitys by filter
        /// </summary>
        /// <remarks>
        /// Returns the list of itemActivitys that match the given filter.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>ApiResponse of List&lt;ItemActivity&gt;</returns>
        ApiResponse<List<ItemActivity>> GetItemActivityByFilterWithHttpInfo (string filter = null, int? page = null, int? limit = null, string sort = null);
        /// <summary>
        /// Get an itemActivity by id
        /// </summary>
        /// <remarks>
        /// Returns the itemActivity identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemActivityId">Id of the itemActivity to be returned.</param>
        /// <returns>ItemActivity</returns>
        ItemActivity GetItemActivityById (int? itemActivityId);

        /// <summary>
        /// Get an itemActivity by id
        /// </summary>
        /// <remarks>
        /// Returns the itemActivity identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemActivityId">Id of the itemActivity to be returned.</param>
        /// <returns>ApiResponse of ItemActivity</returns>
        ApiResponse<ItemActivity> GetItemActivityByIdWithHttpInfo (int? itemActivityId);
        /// <summary>
        /// Get the files for an itemActivity.
        /// </summary>
        /// <remarks>
        /// Get all existing itemActivity files.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemActivityId">Id of the itemActivity to get files for</param>
        /// <returns></returns>
        void GetItemActivityFiles (int? itemActivityId);

        /// <summary>
        /// Get the files for an itemActivity.
        /// </summary>
        /// <remarks>
        /// Get all existing itemActivity files.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemActivityId">Id of the itemActivity to get files for</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetItemActivityFilesWithHttpInfo (int? itemActivityId);
        /// <summary>
        /// Get the tags for an itemActivity.
        /// </summary>
        /// <remarks>
        /// Get all existing itemActivity tags.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemActivityId">Id of the itemActivity to get tags for</param>
        /// <returns></returns>
        void GetItemActivityTags (int? itemActivityId);

        /// <summary>
        /// Get the tags for an itemActivity.
        /// </summary>
        /// <remarks>
        /// Get all existing itemActivity tags.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemActivityId">Id of the itemActivity to get tags for</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetItemActivityTagsWithHttpInfo (int? itemActivityId);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Add new audit for an itemActivity
        /// </summary>
        /// <remarks>
        /// Adds an audit to an existing itemActivity.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemActivityId">Id of the itemActivity to add an audit to</param>
        /// <param name="itemActivityAudit">The audit to add</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddItemActivityAuditAsync (int? itemActivityId, string itemActivityAudit);

        /// <summary>
        /// Add new audit for an itemActivity
        /// </summary>
        /// <remarks>
        /// Adds an audit to an existing itemActivity.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemActivityId">Id of the itemActivity to add an audit to</param>
        /// <param name="itemActivityAudit">The audit to add</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddItemActivityAuditAsyncWithHttpInfo (int? itemActivityId, string itemActivityAudit);
        /// <summary>
        /// Attach a file to an itemActivity
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing itemActivity.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemActivityId">Id of the itemActivity to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddItemActivityFileAsync (int? itemActivityId, string fileName);

        /// <summary>
        /// Attach a file to an itemActivity
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing itemActivity.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemActivityId">Id of the itemActivity to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddItemActivityFileAsyncWithHttpInfo (int? itemActivityId, string fileName);
        /// <summary>
        /// Attach a file to an itemActivity by URL.
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing itemActivity by URL.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="itemActivityId">Id of the itemActivity to add an file to</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddItemActivityFileByURLAsync (RecordFile body, int? itemActivityId);

        /// <summary>
        /// Attach a file to an itemActivity by URL.
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing itemActivity by URL.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="itemActivityId">Id of the itemActivity to add an file to</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddItemActivityFileByURLAsyncWithHttpInfo (RecordFile body, int? itemActivityId);
        /// <summary>
        /// Add new tags for an itemActivity.
        /// </summary>
        /// <remarks>
        /// Adds a tag to an existing itemActivity.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemActivityId">Id of the itemActivity to add a tag to</param>
        /// <param name="itemActivityTag">The tag to add</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddItemActivityTagAsync (int? itemActivityId, string itemActivityTag);

        /// <summary>
        /// Add new tags for an itemActivity.
        /// </summary>
        /// <remarks>
        /// Adds a tag to an existing itemActivity.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemActivityId">Id of the itemActivity to add a tag to</param>
        /// <param name="itemActivityTag">The tag to add</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddItemActivityTagAsyncWithHttpInfo (int? itemActivityId, string itemActivityTag);
        /// <summary>
        /// Delete a file for an itemActivity.
        /// </summary>
        /// <remarks>
        /// Deletes an existing itemActivity file using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemActivityId">Id of the itemActivity to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteItemActivityFileAsync (int? itemActivityId, int? fileId);

        /// <summary>
        /// Delete a file for an itemActivity.
        /// </summary>
        /// <remarks>
        /// Deletes an existing itemActivity file using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemActivityId">Id of the itemActivity to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteItemActivityFileAsyncWithHttpInfo (int? itemActivityId, int? fileId);
        /// <summary>
        /// Delete a tag for an itemActivity.
        /// </summary>
        /// <remarks>
        /// Deletes an existing itemActivity tag using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemActivityId">Id of the itemActivity to remove tag from</param>
        /// <param name="itemActivityTag">The tag to delete</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteItemActivityTagAsync (int? itemActivityId, string itemActivityTag);

        /// <summary>
        /// Delete a tag for an itemActivity.
        /// </summary>
        /// <remarks>
        /// Deletes an existing itemActivity tag using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemActivityId">Id of the itemActivity to remove tag from</param>
        /// <param name="itemActivityTag">The tag to delete</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteItemActivityTagAsyncWithHttpInfo (int? itemActivityId, string itemActivityTag);
        /// <summary>
        /// Get a duplicated an itemActivity by id
        /// </summary>
        /// <remarks>
        /// Returns a duplicated itemActivity identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemActivityId">Id of the itemActivity to be duplicated.</param>
        /// <returns>Task of ItemActivity</returns>
        System.Threading.Tasks.Task<ItemActivity> GetDuplicateItemActivityByIdAsync (int? itemActivityId);

        /// <summary>
        /// Get a duplicated an itemActivity by id
        /// </summary>
        /// <remarks>
        /// Returns a duplicated itemActivity identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemActivityId">Id of the itemActivity to be duplicated.</param>
        /// <returns>Task of ApiResponse (ItemActivity)</returns>
        System.Threading.Tasks.Task<ApiResponse<ItemActivity>> GetDuplicateItemActivityByIdAsyncWithHttpInfo (int? itemActivityId);
        /// <summary>
        /// Search itemActivitys by filter
        /// </summary>
        /// <remarks>
        /// Returns the list of itemActivitys that match the given filter.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>Task of List&lt;ItemActivity&gt;</returns>
        System.Threading.Tasks.Task<List<ItemActivity>> GetItemActivityByFilterAsync (string filter = null, int? page = null, int? limit = null, string sort = null);

        /// <summary>
        /// Search itemActivitys by filter
        /// </summary>
        /// <remarks>
        /// Returns the list of itemActivitys that match the given filter.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ItemActivity&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ItemActivity>>> GetItemActivityByFilterAsyncWithHttpInfo (string filter = null, int? page = null, int? limit = null, string sort = null);
        /// <summary>
        /// Get an itemActivity by id
        /// </summary>
        /// <remarks>
        /// Returns the itemActivity identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemActivityId">Id of the itemActivity to be returned.</param>
        /// <returns>Task of ItemActivity</returns>
        System.Threading.Tasks.Task<ItemActivity> GetItemActivityByIdAsync (int? itemActivityId);

        /// <summary>
        /// Get an itemActivity by id
        /// </summary>
        /// <remarks>
        /// Returns the itemActivity identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemActivityId">Id of the itemActivity to be returned.</param>
        /// <returns>Task of ApiResponse (ItemActivity)</returns>
        System.Threading.Tasks.Task<ApiResponse<ItemActivity>> GetItemActivityByIdAsyncWithHttpInfo (int? itemActivityId);
        /// <summary>
        /// Get the files for an itemActivity.
        /// </summary>
        /// <remarks>
        /// Get all existing itemActivity files.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemActivityId">Id of the itemActivity to get files for</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetItemActivityFilesAsync (int? itemActivityId);

        /// <summary>
        /// Get the files for an itemActivity.
        /// </summary>
        /// <remarks>
        /// Get all existing itemActivity files.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemActivityId">Id of the itemActivity to get files for</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetItemActivityFilesAsyncWithHttpInfo (int? itemActivityId);
        /// <summary>
        /// Get the tags for an itemActivity.
        /// </summary>
        /// <remarks>
        /// Get all existing itemActivity tags.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemActivityId">Id of the itemActivity to get tags for</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetItemActivityTagsAsync (int? itemActivityId);

        /// <summary>
        /// Get the tags for an itemActivity.
        /// </summary>
        /// <remarks>
        /// Get all existing itemActivity tags.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemActivityId">Id of the itemActivity to get tags for</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetItemActivityTagsAsyncWithHttpInfo (int? itemActivityId);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ItemActivityApi : IItemActivityApi
    {
        private Infoplus.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ItemActivityApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ItemActivityApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = Infoplus.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ItemActivityApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ItemActivityApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Infoplus.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Infoplus.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Add new audit for an itemActivity Adds an audit to an existing itemActivity.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemActivityId">Id of the itemActivity to add an audit to</param>
        /// <param name="itemActivityAudit">The audit to add</param>
        /// <returns></returns>
        public void AddItemActivityAudit (int? itemActivityId, string itemActivityAudit)
        {
             AddItemActivityAuditWithHttpInfo(itemActivityId, itemActivityAudit);
        }

        /// <summary>
        /// Add new audit for an itemActivity Adds an audit to an existing itemActivity.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemActivityId">Id of the itemActivity to add an audit to</param>
        /// <param name="itemActivityAudit">The audit to add</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AddItemActivityAuditWithHttpInfo (int? itemActivityId, string itemActivityAudit)
        {
            // verify the required parameter 'itemActivityId' is set
            if (itemActivityId == null)
                throw new ApiException(400, "Missing required parameter 'itemActivityId' when calling ItemActivityApi->AddItemActivityAudit");
            // verify the required parameter 'itemActivityAudit' is set
            if (itemActivityAudit == null)
                throw new ApiException(400, "Missing required parameter 'itemActivityAudit' when calling ItemActivityApi->AddItemActivityAudit");

            var localVarPath = "/beta/itemActivity/{itemActivityId}/audit/{itemActivityAudit}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemActivityId != null) localVarPathParams.Add("itemActivityId", Configuration.ApiClient.ParameterToString(itemActivityId)); // path parameter
            if (itemActivityAudit != null) localVarPathParams.Add("itemActivityAudit", Configuration.ApiClient.ParameterToString(itemActivityAudit)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddItemActivityAudit", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Add new audit for an itemActivity Adds an audit to an existing itemActivity.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemActivityId">Id of the itemActivity to add an audit to</param>
        /// <param name="itemActivityAudit">The audit to add</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddItemActivityAuditAsync (int? itemActivityId, string itemActivityAudit)
        {
             await AddItemActivityAuditAsyncWithHttpInfo(itemActivityId, itemActivityAudit);

        }

        /// <summary>
        /// Add new audit for an itemActivity Adds an audit to an existing itemActivity.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemActivityId">Id of the itemActivity to add an audit to</param>
        /// <param name="itemActivityAudit">The audit to add</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddItemActivityAuditAsyncWithHttpInfo (int? itemActivityId, string itemActivityAudit)
        {
            // verify the required parameter 'itemActivityId' is set
            if (itemActivityId == null)
                throw new ApiException(400, "Missing required parameter 'itemActivityId' when calling ItemActivityApi->AddItemActivityAudit");
            // verify the required parameter 'itemActivityAudit' is set
            if (itemActivityAudit == null)
                throw new ApiException(400, "Missing required parameter 'itemActivityAudit' when calling ItemActivityApi->AddItemActivityAudit");

            var localVarPath = "/beta/itemActivity/{itemActivityId}/audit/{itemActivityAudit}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemActivityId != null) localVarPathParams.Add("itemActivityId", Configuration.ApiClient.ParameterToString(itemActivityId)); // path parameter
            if (itemActivityAudit != null) localVarPathParams.Add("itemActivityAudit", Configuration.ApiClient.ParameterToString(itemActivityAudit)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddItemActivityAudit", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Attach a file to an itemActivity Adds a file to an existing itemActivity.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemActivityId">Id of the itemActivity to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns></returns>
        public void AddItemActivityFile (int? itemActivityId, string fileName)
        {
             AddItemActivityFileWithHttpInfo(itemActivityId, fileName);
        }

        /// <summary>
        /// Attach a file to an itemActivity Adds a file to an existing itemActivity.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemActivityId">Id of the itemActivity to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AddItemActivityFileWithHttpInfo (int? itemActivityId, string fileName)
        {
            // verify the required parameter 'itemActivityId' is set
            if (itemActivityId == null)
                throw new ApiException(400, "Missing required parameter 'itemActivityId' when calling ItemActivityApi->AddItemActivityFile");
            // verify the required parameter 'fileName' is set
            if (fileName == null)
                throw new ApiException(400, "Missing required parameter 'fileName' when calling ItemActivityApi->AddItemActivityFile");

            var localVarPath = "/beta/itemActivity/{itemActivityId}/file/{fileName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemActivityId != null) localVarPathParams.Add("itemActivityId", Configuration.ApiClient.ParameterToString(itemActivityId)); // path parameter
            if (fileName != null) localVarPathParams.Add("fileName", Configuration.ApiClient.ParameterToString(fileName)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddItemActivityFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Attach a file to an itemActivity Adds a file to an existing itemActivity.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemActivityId">Id of the itemActivity to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddItemActivityFileAsync (int? itemActivityId, string fileName)
        {
             await AddItemActivityFileAsyncWithHttpInfo(itemActivityId, fileName);

        }

        /// <summary>
        /// Attach a file to an itemActivity Adds a file to an existing itemActivity.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemActivityId">Id of the itemActivity to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddItemActivityFileAsyncWithHttpInfo (int? itemActivityId, string fileName)
        {
            // verify the required parameter 'itemActivityId' is set
            if (itemActivityId == null)
                throw new ApiException(400, "Missing required parameter 'itemActivityId' when calling ItemActivityApi->AddItemActivityFile");
            // verify the required parameter 'fileName' is set
            if (fileName == null)
                throw new ApiException(400, "Missing required parameter 'fileName' when calling ItemActivityApi->AddItemActivityFile");

            var localVarPath = "/beta/itemActivity/{itemActivityId}/file/{fileName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemActivityId != null) localVarPathParams.Add("itemActivityId", Configuration.ApiClient.ParameterToString(itemActivityId)); // path parameter
            if (fileName != null) localVarPathParams.Add("fileName", Configuration.ApiClient.ParameterToString(fileName)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddItemActivityFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Attach a file to an itemActivity by URL. Adds a file to an existing itemActivity by URL.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="itemActivityId">Id of the itemActivity to add an file to</param>
        /// <returns></returns>
        public void AddItemActivityFileByURL (RecordFile body, int? itemActivityId)
        {
             AddItemActivityFileByURLWithHttpInfo(body, itemActivityId);
        }

        /// <summary>
        /// Attach a file to an itemActivity by URL. Adds a file to an existing itemActivity by URL.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="itemActivityId">Id of the itemActivity to add an file to</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AddItemActivityFileByURLWithHttpInfo (RecordFile body, int? itemActivityId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ItemActivityApi->AddItemActivityFileByURL");
            // verify the required parameter 'itemActivityId' is set
            if (itemActivityId == null)
                throw new ApiException(400, "Missing required parameter 'itemActivityId' when calling ItemActivityApi->AddItemActivityFileByURL");

            var localVarPath = "/beta/itemActivity/{itemActivityId}/file";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemActivityId != null) localVarPathParams.Add("itemActivityId", Configuration.ApiClient.ParameterToString(itemActivityId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddItemActivityFileByURL", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Attach a file to an itemActivity by URL. Adds a file to an existing itemActivity by URL.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="itemActivityId">Id of the itemActivity to add an file to</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddItemActivityFileByURLAsync (RecordFile body, int? itemActivityId)
        {
             await AddItemActivityFileByURLAsyncWithHttpInfo(body, itemActivityId);

        }

        /// <summary>
        /// Attach a file to an itemActivity by URL. Adds a file to an existing itemActivity by URL.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="itemActivityId">Id of the itemActivity to add an file to</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddItemActivityFileByURLAsyncWithHttpInfo (RecordFile body, int? itemActivityId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ItemActivityApi->AddItemActivityFileByURL");
            // verify the required parameter 'itemActivityId' is set
            if (itemActivityId == null)
                throw new ApiException(400, "Missing required parameter 'itemActivityId' when calling ItemActivityApi->AddItemActivityFileByURL");

            var localVarPath = "/beta/itemActivity/{itemActivityId}/file";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemActivityId != null) localVarPathParams.Add("itemActivityId", Configuration.ApiClient.ParameterToString(itemActivityId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddItemActivityFileByURL", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Add new tags for an itemActivity. Adds a tag to an existing itemActivity.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemActivityId">Id of the itemActivity to add a tag to</param>
        /// <param name="itemActivityTag">The tag to add</param>
        /// <returns></returns>
        public void AddItemActivityTag (int? itemActivityId, string itemActivityTag)
        {
             AddItemActivityTagWithHttpInfo(itemActivityId, itemActivityTag);
        }

        /// <summary>
        /// Add new tags for an itemActivity. Adds a tag to an existing itemActivity.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemActivityId">Id of the itemActivity to add a tag to</param>
        /// <param name="itemActivityTag">The tag to add</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AddItemActivityTagWithHttpInfo (int? itemActivityId, string itemActivityTag)
        {
            // verify the required parameter 'itemActivityId' is set
            if (itemActivityId == null)
                throw new ApiException(400, "Missing required parameter 'itemActivityId' when calling ItemActivityApi->AddItemActivityTag");
            // verify the required parameter 'itemActivityTag' is set
            if (itemActivityTag == null)
                throw new ApiException(400, "Missing required parameter 'itemActivityTag' when calling ItemActivityApi->AddItemActivityTag");

            var localVarPath = "/beta/itemActivity/{itemActivityId}/tag/{itemActivityTag}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemActivityId != null) localVarPathParams.Add("itemActivityId", Configuration.ApiClient.ParameterToString(itemActivityId)); // path parameter
            if (itemActivityTag != null) localVarPathParams.Add("itemActivityTag", Configuration.ApiClient.ParameterToString(itemActivityTag)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddItemActivityTag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Add new tags for an itemActivity. Adds a tag to an existing itemActivity.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemActivityId">Id of the itemActivity to add a tag to</param>
        /// <param name="itemActivityTag">The tag to add</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddItemActivityTagAsync (int? itemActivityId, string itemActivityTag)
        {
             await AddItemActivityTagAsyncWithHttpInfo(itemActivityId, itemActivityTag);

        }

        /// <summary>
        /// Add new tags for an itemActivity. Adds a tag to an existing itemActivity.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemActivityId">Id of the itemActivity to add a tag to</param>
        /// <param name="itemActivityTag">The tag to add</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddItemActivityTagAsyncWithHttpInfo (int? itemActivityId, string itemActivityTag)
        {
            // verify the required parameter 'itemActivityId' is set
            if (itemActivityId == null)
                throw new ApiException(400, "Missing required parameter 'itemActivityId' when calling ItemActivityApi->AddItemActivityTag");
            // verify the required parameter 'itemActivityTag' is set
            if (itemActivityTag == null)
                throw new ApiException(400, "Missing required parameter 'itemActivityTag' when calling ItemActivityApi->AddItemActivityTag");

            var localVarPath = "/beta/itemActivity/{itemActivityId}/tag/{itemActivityTag}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemActivityId != null) localVarPathParams.Add("itemActivityId", Configuration.ApiClient.ParameterToString(itemActivityId)); // path parameter
            if (itemActivityTag != null) localVarPathParams.Add("itemActivityTag", Configuration.ApiClient.ParameterToString(itemActivityTag)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddItemActivityTag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a file for an itemActivity. Deletes an existing itemActivity file using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemActivityId">Id of the itemActivity to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns></returns>
        public void DeleteItemActivityFile (int? itemActivityId, int? fileId)
        {
             DeleteItemActivityFileWithHttpInfo(itemActivityId, fileId);
        }

        /// <summary>
        /// Delete a file for an itemActivity. Deletes an existing itemActivity file using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemActivityId">Id of the itemActivity to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteItemActivityFileWithHttpInfo (int? itemActivityId, int? fileId)
        {
            // verify the required parameter 'itemActivityId' is set
            if (itemActivityId == null)
                throw new ApiException(400, "Missing required parameter 'itemActivityId' when calling ItemActivityApi->DeleteItemActivityFile");
            // verify the required parameter 'fileId' is set
            if (fileId == null)
                throw new ApiException(400, "Missing required parameter 'fileId' when calling ItemActivityApi->DeleteItemActivityFile");

            var localVarPath = "/beta/itemActivity/{itemActivityId}/file/{fileId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemActivityId != null) localVarPathParams.Add("itemActivityId", Configuration.ApiClient.ParameterToString(itemActivityId)); // path parameter
            if (fileId != null) localVarPathParams.Add("fileId", Configuration.ApiClient.ParameterToString(fileId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteItemActivityFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a file for an itemActivity. Deletes an existing itemActivity file using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemActivityId">Id of the itemActivity to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteItemActivityFileAsync (int? itemActivityId, int? fileId)
        {
             await DeleteItemActivityFileAsyncWithHttpInfo(itemActivityId, fileId);

        }

        /// <summary>
        /// Delete a file for an itemActivity. Deletes an existing itemActivity file using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemActivityId">Id of the itemActivity to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteItemActivityFileAsyncWithHttpInfo (int? itemActivityId, int? fileId)
        {
            // verify the required parameter 'itemActivityId' is set
            if (itemActivityId == null)
                throw new ApiException(400, "Missing required parameter 'itemActivityId' when calling ItemActivityApi->DeleteItemActivityFile");
            // verify the required parameter 'fileId' is set
            if (fileId == null)
                throw new ApiException(400, "Missing required parameter 'fileId' when calling ItemActivityApi->DeleteItemActivityFile");

            var localVarPath = "/beta/itemActivity/{itemActivityId}/file/{fileId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemActivityId != null) localVarPathParams.Add("itemActivityId", Configuration.ApiClient.ParameterToString(itemActivityId)); // path parameter
            if (fileId != null) localVarPathParams.Add("fileId", Configuration.ApiClient.ParameterToString(fileId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteItemActivityFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a tag for an itemActivity. Deletes an existing itemActivity tag using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemActivityId">Id of the itemActivity to remove tag from</param>
        /// <param name="itemActivityTag">The tag to delete</param>
        /// <returns></returns>
        public void DeleteItemActivityTag (int? itemActivityId, string itemActivityTag)
        {
             DeleteItemActivityTagWithHttpInfo(itemActivityId, itemActivityTag);
        }

        /// <summary>
        /// Delete a tag for an itemActivity. Deletes an existing itemActivity tag using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemActivityId">Id of the itemActivity to remove tag from</param>
        /// <param name="itemActivityTag">The tag to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteItemActivityTagWithHttpInfo (int? itemActivityId, string itemActivityTag)
        {
            // verify the required parameter 'itemActivityId' is set
            if (itemActivityId == null)
                throw new ApiException(400, "Missing required parameter 'itemActivityId' when calling ItemActivityApi->DeleteItemActivityTag");
            // verify the required parameter 'itemActivityTag' is set
            if (itemActivityTag == null)
                throw new ApiException(400, "Missing required parameter 'itemActivityTag' when calling ItemActivityApi->DeleteItemActivityTag");

            var localVarPath = "/beta/itemActivity/{itemActivityId}/tag/{itemActivityTag}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemActivityId != null) localVarPathParams.Add("itemActivityId", Configuration.ApiClient.ParameterToString(itemActivityId)); // path parameter
            if (itemActivityTag != null) localVarPathParams.Add("itemActivityTag", Configuration.ApiClient.ParameterToString(itemActivityTag)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteItemActivityTag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a tag for an itemActivity. Deletes an existing itemActivity tag using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemActivityId">Id of the itemActivity to remove tag from</param>
        /// <param name="itemActivityTag">The tag to delete</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteItemActivityTagAsync (int? itemActivityId, string itemActivityTag)
        {
             await DeleteItemActivityTagAsyncWithHttpInfo(itemActivityId, itemActivityTag);

        }

        /// <summary>
        /// Delete a tag for an itemActivity. Deletes an existing itemActivity tag using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemActivityId">Id of the itemActivity to remove tag from</param>
        /// <param name="itemActivityTag">The tag to delete</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteItemActivityTagAsyncWithHttpInfo (int? itemActivityId, string itemActivityTag)
        {
            // verify the required parameter 'itemActivityId' is set
            if (itemActivityId == null)
                throw new ApiException(400, "Missing required parameter 'itemActivityId' when calling ItemActivityApi->DeleteItemActivityTag");
            // verify the required parameter 'itemActivityTag' is set
            if (itemActivityTag == null)
                throw new ApiException(400, "Missing required parameter 'itemActivityTag' when calling ItemActivityApi->DeleteItemActivityTag");

            var localVarPath = "/beta/itemActivity/{itemActivityId}/tag/{itemActivityTag}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemActivityId != null) localVarPathParams.Add("itemActivityId", Configuration.ApiClient.ParameterToString(itemActivityId)); // path parameter
            if (itemActivityTag != null) localVarPathParams.Add("itemActivityTag", Configuration.ApiClient.ParameterToString(itemActivityTag)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteItemActivityTag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get a duplicated an itemActivity by id Returns a duplicated itemActivity identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemActivityId">Id of the itemActivity to be duplicated.</param>
        /// <returns>ItemActivity</returns>
        public ItemActivity GetDuplicateItemActivityById (int? itemActivityId)
        {
             ApiResponse<ItemActivity> localVarResponse = GetDuplicateItemActivityByIdWithHttpInfo(itemActivityId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a duplicated an itemActivity by id Returns a duplicated itemActivity identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemActivityId">Id of the itemActivity to be duplicated.</param>
        /// <returns>ApiResponse of ItemActivity</returns>
        public ApiResponse< ItemActivity > GetDuplicateItemActivityByIdWithHttpInfo (int? itemActivityId)
        {
            // verify the required parameter 'itemActivityId' is set
            if (itemActivityId == null)
                throw new ApiException(400, "Missing required parameter 'itemActivityId' when calling ItemActivityApi->GetDuplicateItemActivityById");

            var localVarPath = "/beta/itemActivity/duplicate/{itemActivityId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemActivityId != null) localVarPathParams.Add("itemActivityId", Configuration.ApiClient.ParameterToString(itemActivityId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDuplicateItemActivityById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ItemActivity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ItemActivity) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ItemActivity)));
        }

        /// <summary>
        /// Get a duplicated an itemActivity by id Returns a duplicated itemActivity identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemActivityId">Id of the itemActivity to be duplicated.</param>
        /// <returns>Task of ItemActivity</returns>
        public async System.Threading.Tasks.Task<ItemActivity> GetDuplicateItemActivityByIdAsync (int? itemActivityId)
        {
             ApiResponse<ItemActivity> localVarResponse = await GetDuplicateItemActivityByIdAsyncWithHttpInfo(itemActivityId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a duplicated an itemActivity by id Returns a duplicated itemActivity identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemActivityId">Id of the itemActivity to be duplicated.</param>
        /// <returns>Task of ApiResponse (ItemActivity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ItemActivity>> GetDuplicateItemActivityByIdAsyncWithHttpInfo (int? itemActivityId)
        {
            // verify the required parameter 'itemActivityId' is set
            if (itemActivityId == null)
                throw new ApiException(400, "Missing required parameter 'itemActivityId' when calling ItemActivityApi->GetDuplicateItemActivityById");

            var localVarPath = "/beta/itemActivity/duplicate/{itemActivityId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemActivityId != null) localVarPathParams.Add("itemActivityId", Configuration.ApiClient.ParameterToString(itemActivityId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDuplicateItemActivityById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ItemActivity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ItemActivity) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ItemActivity)));
        }

        /// <summary>
        /// Search itemActivitys by filter Returns the list of itemActivitys that match the given filter.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>List&lt;ItemActivity&gt;</returns>
        public List<ItemActivity> GetItemActivityByFilter (string filter = null, int? page = null, int? limit = null, string sort = null)
        {
             ApiResponse<List<ItemActivity>> localVarResponse = GetItemActivityByFilterWithHttpInfo(filter, page, limit, sort);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Search itemActivitys by filter Returns the list of itemActivitys that match the given filter.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>ApiResponse of List&lt;ItemActivity&gt;</returns>
        public ApiResponse< List<ItemActivity> > GetItemActivityByFilterWithHttpInfo (string filter = null, int? page = null, int? limit = null, string sort = null)
        {

            var localVarPath = "/beta/itemActivity/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (filter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (page != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetItemActivityByFilter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ItemActivity>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ItemActivity>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ItemActivity>)));
        }

        /// <summary>
        /// Search itemActivitys by filter Returns the list of itemActivitys that match the given filter.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>Task of List&lt;ItemActivity&gt;</returns>
        public async System.Threading.Tasks.Task<List<ItemActivity>> GetItemActivityByFilterAsync (string filter = null, int? page = null, int? limit = null, string sort = null)
        {
             ApiResponse<List<ItemActivity>> localVarResponse = await GetItemActivityByFilterAsyncWithHttpInfo(filter, page, limit, sort);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Search itemActivitys by filter Returns the list of itemActivitys that match the given filter.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ItemActivity&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ItemActivity>>> GetItemActivityByFilterAsyncWithHttpInfo (string filter = null, int? page = null, int? limit = null, string sort = null)
        {

            var localVarPath = "/beta/itemActivity/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (filter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (page != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetItemActivityByFilter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ItemActivity>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ItemActivity>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ItemActivity>)));
        }

        /// <summary>
        /// Get an itemActivity by id Returns the itemActivity identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemActivityId">Id of the itemActivity to be returned.</param>
        /// <returns>ItemActivity</returns>
        public ItemActivity GetItemActivityById (int? itemActivityId)
        {
             ApiResponse<ItemActivity> localVarResponse = GetItemActivityByIdWithHttpInfo(itemActivityId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get an itemActivity by id Returns the itemActivity identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemActivityId">Id of the itemActivity to be returned.</param>
        /// <returns>ApiResponse of ItemActivity</returns>
        public ApiResponse< ItemActivity > GetItemActivityByIdWithHttpInfo (int? itemActivityId)
        {
            // verify the required parameter 'itemActivityId' is set
            if (itemActivityId == null)
                throw new ApiException(400, "Missing required parameter 'itemActivityId' when calling ItemActivityApi->GetItemActivityById");

            var localVarPath = "/beta/itemActivity/{itemActivityId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemActivityId != null) localVarPathParams.Add("itemActivityId", Configuration.ApiClient.ParameterToString(itemActivityId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetItemActivityById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ItemActivity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ItemActivity) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ItemActivity)));
        }

        /// <summary>
        /// Get an itemActivity by id Returns the itemActivity identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemActivityId">Id of the itemActivity to be returned.</param>
        /// <returns>Task of ItemActivity</returns>
        public async System.Threading.Tasks.Task<ItemActivity> GetItemActivityByIdAsync (int? itemActivityId)
        {
             ApiResponse<ItemActivity> localVarResponse = await GetItemActivityByIdAsyncWithHttpInfo(itemActivityId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get an itemActivity by id Returns the itemActivity identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemActivityId">Id of the itemActivity to be returned.</param>
        /// <returns>Task of ApiResponse (ItemActivity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ItemActivity>> GetItemActivityByIdAsyncWithHttpInfo (int? itemActivityId)
        {
            // verify the required parameter 'itemActivityId' is set
            if (itemActivityId == null)
                throw new ApiException(400, "Missing required parameter 'itemActivityId' when calling ItemActivityApi->GetItemActivityById");

            var localVarPath = "/beta/itemActivity/{itemActivityId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemActivityId != null) localVarPathParams.Add("itemActivityId", Configuration.ApiClient.ParameterToString(itemActivityId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetItemActivityById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ItemActivity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ItemActivity) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ItemActivity)));
        }

        /// <summary>
        /// Get the files for an itemActivity. Get all existing itemActivity files.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemActivityId">Id of the itemActivity to get files for</param>
        /// <returns></returns>
        public void GetItemActivityFiles (int? itemActivityId)
        {
             GetItemActivityFilesWithHttpInfo(itemActivityId);
        }

        /// <summary>
        /// Get the files for an itemActivity. Get all existing itemActivity files.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemActivityId">Id of the itemActivity to get files for</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GetItemActivityFilesWithHttpInfo (int? itemActivityId)
        {
            // verify the required parameter 'itemActivityId' is set
            if (itemActivityId == null)
                throw new ApiException(400, "Missing required parameter 'itemActivityId' when calling ItemActivityApi->GetItemActivityFiles");

            var localVarPath = "/beta/itemActivity/{itemActivityId}/file";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemActivityId != null) localVarPathParams.Add("itemActivityId", Configuration.ApiClient.ParameterToString(itemActivityId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetItemActivityFiles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get the files for an itemActivity. Get all existing itemActivity files.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemActivityId">Id of the itemActivity to get files for</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetItemActivityFilesAsync (int? itemActivityId)
        {
             await GetItemActivityFilesAsyncWithHttpInfo(itemActivityId);

        }

        /// <summary>
        /// Get the files for an itemActivity. Get all existing itemActivity files.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemActivityId">Id of the itemActivity to get files for</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetItemActivityFilesAsyncWithHttpInfo (int? itemActivityId)
        {
            // verify the required parameter 'itemActivityId' is set
            if (itemActivityId == null)
                throw new ApiException(400, "Missing required parameter 'itemActivityId' when calling ItemActivityApi->GetItemActivityFiles");

            var localVarPath = "/beta/itemActivity/{itemActivityId}/file";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemActivityId != null) localVarPathParams.Add("itemActivityId", Configuration.ApiClient.ParameterToString(itemActivityId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetItemActivityFiles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get the tags for an itemActivity. Get all existing itemActivity tags.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemActivityId">Id of the itemActivity to get tags for</param>
        /// <returns></returns>
        public void GetItemActivityTags (int? itemActivityId)
        {
             GetItemActivityTagsWithHttpInfo(itemActivityId);
        }

        /// <summary>
        /// Get the tags for an itemActivity. Get all existing itemActivity tags.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemActivityId">Id of the itemActivity to get tags for</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GetItemActivityTagsWithHttpInfo (int? itemActivityId)
        {
            // verify the required parameter 'itemActivityId' is set
            if (itemActivityId == null)
                throw new ApiException(400, "Missing required parameter 'itemActivityId' when calling ItemActivityApi->GetItemActivityTags");

            var localVarPath = "/beta/itemActivity/{itemActivityId}/tag";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemActivityId != null) localVarPathParams.Add("itemActivityId", Configuration.ApiClient.ParameterToString(itemActivityId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetItemActivityTags", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get the tags for an itemActivity. Get all existing itemActivity tags.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemActivityId">Id of the itemActivity to get tags for</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetItemActivityTagsAsync (int? itemActivityId)
        {
             await GetItemActivityTagsAsyncWithHttpInfo(itemActivityId);

        }

        /// <summary>
        /// Get the tags for an itemActivity. Get all existing itemActivity tags.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemActivityId">Id of the itemActivity to get tags for</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetItemActivityTagsAsyncWithHttpInfo (int? itemActivityId)
        {
            // verify the required parameter 'itemActivityId' is set
            if (itemActivityId == null)
                throw new ApiException(400, "Missing required parameter 'itemActivityId' when calling ItemActivityApi->GetItemActivityTags");

            var localVarPath = "/beta/itemActivity/{itemActivityId}/tag";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemActivityId != null) localVarPathParams.Add("itemActivityId", Configuration.ApiClient.ParameterToString(itemActivityId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetItemActivityTags", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

    }
}
