/* 
 * Infoplus API
 *
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Infoplus.Client;
using Infoplus.Model;

namespace Infoplus.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IItemBuyerApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create an itemBuyer
        /// </summary>
        /// <remarks>
        /// Inserts a new itemBuyer using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">ItemBuyer to be inserted.</param>
        /// <returns>ItemBuyer</returns>
        ItemBuyer AddItemBuyer (ItemBuyer body);

        /// <summary>
        /// Create an itemBuyer
        /// </summary>
        /// <remarks>
        /// Inserts a new itemBuyer using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">ItemBuyer to be inserted.</param>
        /// <returns>ApiResponse of ItemBuyer</returns>
        ApiResponse<ItemBuyer> AddItemBuyerWithHttpInfo (ItemBuyer body);
        /// <summary>
        /// Add new audit for an itemBuyer
        /// </summary>
        /// <remarks>
        /// Adds an audit to an existing itemBuyer.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemBuyerId">Id of the itemBuyer to add an audit to</param>
        /// <param name="itemBuyerAudit">The audit to add</param>
        /// <returns></returns>
        void AddItemBuyerAudit (int? itemBuyerId, string itemBuyerAudit);

        /// <summary>
        /// Add new audit for an itemBuyer
        /// </summary>
        /// <remarks>
        /// Adds an audit to an existing itemBuyer.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemBuyerId">Id of the itemBuyer to add an audit to</param>
        /// <param name="itemBuyerAudit">The audit to add</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddItemBuyerAuditWithHttpInfo (int? itemBuyerId, string itemBuyerAudit);
        /// <summary>
        /// Attach a file to an itemBuyer
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing itemBuyer.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemBuyerId">Id of the itemBuyer to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns></returns>
        void AddItemBuyerFile (int? itemBuyerId, string fileName);

        /// <summary>
        /// Attach a file to an itemBuyer
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing itemBuyer.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemBuyerId">Id of the itemBuyer to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddItemBuyerFileWithHttpInfo (int? itemBuyerId, string fileName);
        /// <summary>
        /// Attach a file to an itemBuyer by URL.
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing itemBuyer by URL.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="itemBuyerId">Id of the itemBuyer to add an file to</param>
        /// <returns></returns>
        void AddItemBuyerFileByURL (RecordFile body, int? itemBuyerId);

        /// <summary>
        /// Attach a file to an itemBuyer by URL.
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing itemBuyer by URL.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="itemBuyerId">Id of the itemBuyer to add an file to</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddItemBuyerFileByURLWithHttpInfo (RecordFile body, int? itemBuyerId);
        /// <summary>
        /// Add new tags for an itemBuyer.
        /// </summary>
        /// <remarks>
        /// Adds a tag to an existing itemBuyer.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemBuyerId">Id of the itemBuyer to add a tag to</param>
        /// <param name="itemBuyerTag">The tag to add</param>
        /// <returns></returns>
        void AddItemBuyerTag (int? itemBuyerId, string itemBuyerTag);

        /// <summary>
        /// Add new tags for an itemBuyer.
        /// </summary>
        /// <remarks>
        /// Adds a tag to an existing itemBuyer.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemBuyerId">Id of the itemBuyer to add a tag to</param>
        /// <param name="itemBuyerTag">The tag to add</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddItemBuyerTagWithHttpInfo (int? itemBuyerId, string itemBuyerTag);
        /// <summary>
        /// Delete an itemBuyer
        /// </summary>
        /// <remarks>
        /// Deletes the itemBuyer identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemBuyerId">Id of the itemBuyer to be deleted.</param>
        /// <returns></returns>
        void DeleteItemBuyer (int? itemBuyerId);

        /// <summary>
        /// Delete an itemBuyer
        /// </summary>
        /// <remarks>
        /// Deletes the itemBuyer identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemBuyerId">Id of the itemBuyer to be deleted.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteItemBuyerWithHttpInfo (int? itemBuyerId);
        /// <summary>
        /// Delete a file for an itemBuyer.
        /// </summary>
        /// <remarks>
        /// Deletes an existing itemBuyer file using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemBuyerId">Id of the itemBuyer to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns></returns>
        void DeleteItemBuyerFile (int? itemBuyerId, int? fileId);

        /// <summary>
        /// Delete a file for an itemBuyer.
        /// </summary>
        /// <remarks>
        /// Deletes an existing itemBuyer file using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemBuyerId">Id of the itemBuyer to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteItemBuyerFileWithHttpInfo (int? itemBuyerId, int? fileId);
        /// <summary>
        /// Delete a tag for an itemBuyer.
        /// </summary>
        /// <remarks>
        /// Deletes an existing itemBuyer tag using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemBuyerId">Id of the itemBuyer to remove tag from</param>
        /// <param name="itemBuyerTag">The tag to delete</param>
        /// <returns></returns>
        void DeleteItemBuyerTag (int? itemBuyerId, string itemBuyerTag);

        /// <summary>
        /// Delete a tag for an itemBuyer.
        /// </summary>
        /// <remarks>
        /// Deletes an existing itemBuyer tag using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemBuyerId">Id of the itemBuyer to remove tag from</param>
        /// <param name="itemBuyerTag">The tag to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteItemBuyerTagWithHttpInfo (int? itemBuyerId, string itemBuyerTag);
        /// <summary>
        /// Get a duplicated an itemBuyer by id
        /// </summary>
        /// <remarks>
        /// Returns a duplicated itemBuyer identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemBuyerId">Id of the itemBuyer to be duplicated.</param>
        /// <returns>ItemBuyer</returns>
        ItemBuyer GetDuplicateItemBuyerById (int? itemBuyerId);

        /// <summary>
        /// Get a duplicated an itemBuyer by id
        /// </summary>
        /// <remarks>
        /// Returns a duplicated itemBuyer identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemBuyerId">Id of the itemBuyer to be duplicated.</param>
        /// <returns>ApiResponse of ItemBuyer</returns>
        ApiResponse<ItemBuyer> GetDuplicateItemBuyerByIdWithHttpInfo (int? itemBuyerId);
        /// <summary>
        /// Search itemBuyers by filter
        /// </summary>
        /// <remarks>
        /// Returns the list of itemBuyers that match the given filter.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>List&lt;ItemBuyer&gt;</returns>
        List<ItemBuyer> GetItemBuyerByFilter (string filter = null, int? page = null, int? limit = null, string sort = null);

        /// <summary>
        /// Search itemBuyers by filter
        /// </summary>
        /// <remarks>
        /// Returns the list of itemBuyers that match the given filter.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>ApiResponse of List&lt;ItemBuyer&gt;</returns>
        ApiResponse<List<ItemBuyer>> GetItemBuyerByFilterWithHttpInfo (string filter = null, int? page = null, int? limit = null, string sort = null);
        /// <summary>
        /// Get an itemBuyer by id
        /// </summary>
        /// <remarks>
        /// Returns the itemBuyer identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemBuyerId">Id of the itemBuyer to be returned.</param>
        /// <returns>ItemBuyer</returns>
        ItemBuyer GetItemBuyerById (int? itemBuyerId);

        /// <summary>
        /// Get an itemBuyer by id
        /// </summary>
        /// <remarks>
        /// Returns the itemBuyer identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemBuyerId">Id of the itemBuyer to be returned.</param>
        /// <returns>ApiResponse of ItemBuyer</returns>
        ApiResponse<ItemBuyer> GetItemBuyerByIdWithHttpInfo (int? itemBuyerId);
        /// <summary>
        /// Get the files for an itemBuyer.
        /// </summary>
        /// <remarks>
        /// Get all existing itemBuyer files.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemBuyerId">Id of the itemBuyer to get files for</param>
        /// <returns></returns>
        void GetItemBuyerFiles (int? itemBuyerId);

        /// <summary>
        /// Get the files for an itemBuyer.
        /// </summary>
        /// <remarks>
        /// Get all existing itemBuyer files.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemBuyerId">Id of the itemBuyer to get files for</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetItemBuyerFilesWithHttpInfo (int? itemBuyerId);
        /// <summary>
        /// Get the tags for an itemBuyer.
        /// </summary>
        /// <remarks>
        /// Get all existing itemBuyer tags.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemBuyerId">Id of the itemBuyer to get tags for</param>
        /// <returns></returns>
        void GetItemBuyerTags (int? itemBuyerId);

        /// <summary>
        /// Get the tags for an itemBuyer.
        /// </summary>
        /// <remarks>
        /// Get all existing itemBuyer tags.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemBuyerId">Id of the itemBuyer to get tags for</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetItemBuyerTagsWithHttpInfo (int? itemBuyerId);
        /// <summary>
        /// Update an itemBuyer
        /// </summary>
        /// <remarks>
        /// Updates an existing itemBuyer using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">ItemBuyer to be updated.</param>
        /// <returns></returns>
        void UpdateItemBuyer (ItemBuyer body);

        /// <summary>
        /// Update an itemBuyer
        /// </summary>
        /// <remarks>
        /// Updates an existing itemBuyer using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">ItemBuyer to be updated.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateItemBuyerWithHttpInfo (ItemBuyer body);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create an itemBuyer
        /// </summary>
        /// <remarks>
        /// Inserts a new itemBuyer using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">ItemBuyer to be inserted.</param>
        /// <returns>Task of ItemBuyer</returns>
        System.Threading.Tasks.Task<ItemBuyer> AddItemBuyerAsync (ItemBuyer body);

        /// <summary>
        /// Create an itemBuyer
        /// </summary>
        /// <remarks>
        /// Inserts a new itemBuyer using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">ItemBuyer to be inserted.</param>
        /// <returns>Task of ApiResponse (ItemBuyer)</returns>
        System.Threading.Tasks.Task<ApiResponse<ItemBuyer>> AddItemBuyerAsyncWithHttpInfo (ItemBuyer body);
        /// <summary>
        /// Add new audit for an itemBuyer
        /// </summary>
        /// <remarks>
        /// Adds an audit to an existing itemBuyer.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemBuyerId">Id of the itemBuyer to add an audit to</param>
        /// <param name="itemBuyerAudit">The audit to add</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddItemBuyerAuditAsync (int? itemBuyerId, string itemBuyerAudit);

        /// <summary>
        /// Add new audit for an itemBuyer
        /// </summary>
        /// <remarks>
        /// Adds an audit to an existing itemBuyer.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemBuyerId">Id of the itemBuyer to add an audit to</param>
        /// <param name="itemBuyerAudit">The audit to add</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddItemBuyerAuditAsyncWithHttpInfo (int? itemBuyerId, string itemBuyerAudit);
        /// <summary>
        /// Attach a file to an itemBuyer
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing itemBuyer.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemBuyerId">Id of the itemBuyer to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddItemBuyerFileAsync (int? itemBuyerId, string fileName);

        /// <summary>
        /// Attach a file to an itemBuyer
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing itemBuyer.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemBuyerId">Id of the itemBuyer to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddItemBuyerFileAsyncWithHttpInfo (int? itemBuyerId, string fileName);
        /// <summary>
        /// Attach a file to an itemBuyer by URL.
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing itemBuyer by URL.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="itemBuyerId">Id of the itemBuyer to add an file to</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddItemBuyerFileByURLAsync (RecordFile body, int? itemBuyerId);

        /// <summary>
        /// Attach a file to an itemBuyer by URL.
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing itemBuyer by URL.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="itemBuyerId">Id of the itemBuyer to add an file to</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddItemBuyerFileByURLAsyncWithHttpInfo (RecordFile body, int? itemBuyerId);
        /// <summary>
        /// Add new tags for an itemBuyer.
        /// </summary>
        /// <remarks>
        /// Adds a tag to an existing itemBuyer.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemBuyerId">Id of the itemBuyer to add a tag to</param>
        /// <param name="itemBuyerTag">The tag to add</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddItemBuyerTagAsync (int? itemBuyerId, string itemBuyerTag);

        /// <summary>
        /// Add new tags for an itemBuyer.
        /// </summary>
        /// <remarks>
        /// Adds a tag to an existing itemBuyer.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemBuyerId">Id of the itemBuyer to add a tag to</param>
        /// <param name="itemBuyerTag">The tag to add</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddItemBuyerTagAsyncWithHttpInfo (int? itemBuyerId, string itemBuyerTag);
        /// <summary>
        /// Delete an itemBuyer
        /// </summary>
        /// <remarks>
        /// Deletes the itemBuyer identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemBuyerId">Id of the itemBuyer to be deleted.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteItemBuyerAsync (int? itemBuyerId);

        /// <summary>
        /// Delete an itemBuyer
        /// </summary>
        /// <remarks>
        /// Deletes the itemBuyer identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemBuyerId">Id of the itemBuyer to be deleted.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteItemBuyerAsyncWithHttpInfo (int? itemBuyerId);
        /// <summary>
        /// Delete a file for an itemBuyer.
        /// </summary>
        /// <remarks>
        /// Deletes an existing itemBuyer file using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemBuyerId">Id of the itemBuyer to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteItemBuyerFileAsync (int? itemBuyerId, int? fileId);

        /// <summary>
        /// Delete a file for an itemBuyer.
        /// </summary>
        /// <remarks>
        /// Deletes an existing itemBuyer file using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemBuyerId">Id of the itemBuyer to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteItemBuyerFileAsyncWithHttpInfo (int? itemBuyerId, int? fileId);
        /// <summary>
        /// Delete a tag for an itemBuyer.
        /// </summary>
        /// <remarks>
        /// Deletes an existing itemBuyer tag using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemBuyerId">Id of the itemBuyer to remove tag from</param>
        /// <param name="itemBuyerTag">The tag to delete</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteItemBuyerTagAsync (int? itemBuyerId, string itemBuyerTag);

        /// <summary>
        /// Delete a tag for an itemBuyer.
        /// </summary>
        /// <remarks>
        /// Deletes an existing itemBuyer tag using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemBuyerId">Id of the itemBuyer to remove tag from</param>
        /// <param name="itemBuyerTag">The tag to delete</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteItemBuyerTagAsyncWithHttpInfo (int? itemBuyerId, string itemBuyerTag);
        /// <summary>
        /// Get a duplicated an itemBuyer by id
        /// </summary>
        /// <remarks>
        /// Returns a duplicated itemBuyer identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemBuyerId">Id of the itemBuyer to be duplicated.</param>
        /// <returns>Task of ItemBuyer</returns>
        System.Threading.Tasks.Task<ItemBuyer> GetDuplicateItemBuyerByIdAsync (int? itemBuyerId);

        /// <summary>
        /// Get a duplicated an itemBuyer by id
        /// </summary>
        /// <remarks>
        /// Returns a duplicated itemBuyer identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemBuyerId">Id of the itemBuyer to be duplicated.</param>
        /// <returns>Task of ApiResponse (ItemBuyer)</returns>
        System.Threading.Tasks.Task<ApiResponse<ItemBuyer>> GetDuplicateItemBuyerByIdAsyncWithHttpInfo (int? itemBuyerId);
        /// <summary>
        /// Search itemBuyers by filter
        /// </summary>
        /// <remarks>
        /// Returns the list of itemBuyers that match the given filter.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>Task of List&lt;ItemBuyer&gt;</returns>
        System.Threading.Tasks.Task<List<ItemBuyer>> GetItemBuyerByFilterAsync (string filter = null, int? page = null, int? limit = null, string sort = null);

        /// <summary>
        /// Search itemBuyers by filter
        /// </summary>
        /// <remarks>
        /// Returns the list of itemBuyers that match the given filter.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ItemBuyer&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ItemBuyer>>> GetItemBuyerByFilterAsyncWithHttpInfo (string filter = null, int? page = null, int? limit = null, string sort = null);
        /// <summary>
        /// Get an itemBuyer by id
        /// </summary>
        /// <remarks>
        /// Returns the itemBuyer identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemBuyerId">Id of the itemBuyer to be returned.</param>
        /// <returns>Task of ItemBuyer</returns>
        System.Threading.Tasks.Task<ItemBuyer> GetItemBuyerByIdAsync (int? itemBuyerId);

        /// <summary>
        /// Get an itemBuyer by id
        /// </summary>
        /// <remarks>
        /// Returns the itemBuyer identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemBuyerId">Id of the itemBuyer to be returned.</param>
        /// <returns>Task of ApiResponse (ItemBuyer)</returns>
        System.Threading.Tasks.Task<ApiResponse<ItemBuyer>> GetItemBuyerByIdAsyncWithHttpInfo (int? itemBuyerId);
        /// <summary>
        /// Get the files for an itemBuyer.
        /// </summary>
        /// <remarks>
        /// Get all existing itemBuyer files.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemBuyerId">Id of the itemBuyer to get files for</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetItemBuyerFilesAsync (int? itemBuyerId);

        /// <summary>
        /// Get the files for an itemBuyer.
        /// </summary>
        /// <remarks>
        /// Get all existing itemBuyer files.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemBuyerId">Id of the itemBuyer to get files for</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetItemBuyerFilesAsyncWithHttpInfo (int? itemBuyerId);
        /// <summary>
        /// Get the tags for an itemBuyer.
        /// </summary>
        /// <remarks>
        /// Get all existing itemBuyer tags.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemBuyerId">Id of the itemBuyer to get tags for</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetItemBuyerTagsAsync (int? itemBuyerId);

        /// <summary>
        /// Get the tags for an itemBuyer.
        /// </summary>
        /// <remarks>
        /// Get all existing itemBuyer tags.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemBuyerId">Id of the itemBuyer to get tags for</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetItemBuyerTagsAsyncWithHttpInfo (int? itemBuyerId);
        /// <summary>
        /// Update an itemBuyer
        /// </summary>
        /// <remarks>
        /// Updates an existing itemBuyer using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">ItemBuyer to be updated.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateItemBuyerAsync (ItemBuyer body);

        /// <summary>
        /// Update an itemBuyer
        /// </summary>
        /// <remarks>
        /// Updates an existing itemBuyer using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">ItemBuyer to be updated.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateItemBuyerAsyncWithHttpInfo (ItemBuyer body);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ItemBuyerApi : IItemBuyerApi
    {
        private Infoplus.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ItemBuyerApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ItemBuyerApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = Infoplus.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ItemBuyerApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ItemBuyerApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Infoplus.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Infoplus.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create an itemBuyer Inserts a new itemBuyer using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">ItemBuyer to be inserted.</param>
        /// <returns>ItemBuyer</returns>
        public ItemBuyer AddItemBuyer (ItemBuyer body)
        {
             ApiResponse<ItemBuyer> localVarResponse = AddItemBuyerWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create an itemBuyer Inserts a new itemBuyer using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">ItemBuyer to be inserted.</param>
        /// <returns>ApiResponse of ItemBuyer</returns>
        public ApiResponse< ItemBuyer > AddItemBuyerWithHttpInfo (ItemBuyer body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ItemBuyerApi->AddItemBuyer");

            var localVarPath = "/beta/itemBuyer";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddItemBuyer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ItemBuyer>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ItemBuyer) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ItemBuyer)));
        }

        /// <summary>
        /// Create an itemBuyer Inserts a new itemBuyer using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">ItemBuyer to be inserted.</param>
        /// <returns>Task of ItemBuyer</returns>
        public async System.Threading.Tasks.Task<ItemBuyer> AddItemBuyerAsync (ItemBuyer body)
        {
             ApiResponse<ItemBuyer> localVarResponse = await AddItemBuyerAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create an itemBuyer Inserts a new itemBuyer using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">ItemBuyer to be inserted.</param>
        /// <returns>Task of ApiResponse (ItemBuyer)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ItemBuyer>> AddItemBuyerAsyncWithHttpInfo (ItemBuyer body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ItemBuyerApi->AddItemBuyer");

            var localVarPath = "/beta/itemBuyer";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddItemBuyer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ItemBuyer>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ItemBuyer) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ItemBuyer)));
        }

        /// <summary>
        /// Add new audit for an itemBuyer Adds an audit to an existing itemBuyer.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemBuyerId">Id of the itemBuyer to add an audit to</param>
        /// <param name="itemBuyerAudit">The audit to add</param>
        /// <returns></returns>
        public void AddItemBuyerAudit (int? itemBuyerId, string itemBuyerAudit)
        {
             AddItemBuyerAuditWithHttpInfo(itemBuyerId, itemBuyerAudit);
        }

        /// <summary>
        /// Add new audit for an itemBuyer Adds an audit to an existing itemBuyer.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemBuyerId">Id of the itemBuyer to add an audit to</param>
        /// <param name="itemBuyerAudit">The audit to add</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AddItemBuyerAuditWithHttpInfo (int? itemBuyerId, string itemBuyerAudit)
        {
            // verify the required parameter 'itemBuyerId' is set
            if (itemBuyerId == null)
                throw new ApiException(400, "Missing required parameter 'itemBuyerId' when calling ItemBuyerApi->AddItemBuyerAudit");
            // verify the required parameter 'itemBuyerAudit' is set
            if (itemBuyerAudit == null)
                throw new ApiException(400, "Missing required parameter 'itemBuyerAudit' when calling ItemBuyerApi->AddItemBuyerAudit");

            var localVarPath = "/beta/itemBuyer/{itemBuyerId}/audit/{itemBuyerAudit}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemBuyerId != null) localVarPathParams.Add("itemBuyerId", Configuration.ApiClient.ParameterToString(itemBuyerId)); // path parameter
            if (itemBuyerAudit != null) localVarPathParams.Add("itemBuyerAudit", Configuration.ApiClient.ParameterToString(itemBuyerAudit)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddItemBuyerAudit", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Add new audit for an itemBuyer Adds an audit to an existing itemBuyer.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemBuyerId">Id of the itemBuyer to add an audit to</param>
        /// <param name="itemBuyerAudit">The audit to add</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddItemBuyerAuditAsync (int? itemBuyerId, string itemBuyerAudit)
        {
             await AddItemBuyerAuditAsyncWithHttpInfo(itemBuyerId, itemBuyerAudit);

        }

        /// <summary>
        /// Add new audit for an itemBuyer Adds an audit to an existing itemBuyer.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemBuyerId">Id of the itemBuyer to add an audit to</param>
        /// <param name="itemBuyerAudit">The audit to add</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddItemBuyerAuditAsyncWithHttpInfo (int? itemBuyerId, string itemBuyerAudit)
        {
            // verify the required parameter 'itemBuyerId' is set
            if (itemBuyerId == null)
                throw new ApiException(400, "Missing required parameter 'itemBuyerId' when calling ItemBuyerApi->AddItemBuyerAudit");
            // verify the required parameter 'itemBuyerAudit' is set
            if (itemBuyerAudit == null)
                throw new ApiException(400, "Missing required parameter 'itemBuyerAudit' when calling ItemBuyerApi->AddItemBuyerAudit");

            var localVarPath = "/beta/itemBuyer/{itemBuyerId}/audit/{itemBuyerAudit}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemBuyerId != null) localVarPathParams.Add("itemBuyerId", Configuration.ApiClient.ParameterToString(itemBuyerId)); // path parameter
            if (itemBuyerAudit != null) localVarPathParams.Add("itemBuyerAudit", Configuration.ApiClient.ParameterToString(itemBuyerAudit)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddItemBuyerAudit", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Attach a file to an itemBuyer Adds a file to an existing itemBuyer.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemBuyerId">Id of the itemBuyer to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns></returns>
        public void AddItemBuyerFile (int? itemBuyerId, string fileName)
        {
             AddItemBuyerFileWithHttpInfo(itemBuyerId, fileName);
        }

        /// <summary>
        /// Attach a file to an itemBuyer Adds a file to an existing itemBuyer.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemBuyerId">Id of the itemBuyer to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AddItemBuyerFileWithHttpInfo (int? itemBuyerId, string fileName)
        {
            // verify the required parameter 'itemBuyerId' is set
            if (itemBuyerId == null)
                throw new ApiException(400, "Missing required parameter 'itemBuyerId' when calling ItemBuyerApi->AddItemBuyerFile");
            // verify the required parameter 'fileName' is set
            if (fileName == null)
                throw new ApiException(400, "Missing required parameter 'fileName' when calling ItemBuyerApi->AddItemBuyerFile");

            var localVarPath = "/beta/itemBuyer/{itemBuyerId}/file/{fileName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemBuyerId != null) localVarPathParams.Add("itemBuyerId", Configuration.ApiClient.ParameterToString(itemBuyerId)); // path parameter
            if (fileName != null) localVarPathParams.Add("fileName", Configuration.ApiClient.ParameterToString(fileName)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddItemBuyerFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Attach a file to an itemBuyer Adds a file to an existing itemBuyer.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemBuyerId">Id of the itemBuyer to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddItemBuyerFileAsync (int? itemBuyerId, string fileName)
        {
             await AddItemBuyerFileAsyncWithHttpInfo(itemBuyerId, fileName);

        }

        /// <summary>
        /// Attach a file to an itemBuyer Adds a file to an existing itemBuyer.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemBuyerId">Id of the itemBuyer to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddItemBuyerFileAsyncWithHttpInfo (int? itemBuyerId, string fileName)
        {
            // verify the required parameter 'itemBuyerId' is set
            if (itemBuyerId == null)
                throw new ApiException(400, "Missing required parameter 'itemBuyerId' when calling ItemBuyerApi->AddItemBuyerFile");
            // verify the required parameter 'fileName' is set
            if (fileName == null)
                throw new ApiException(400, "Missing required parameter 'fileName' when calling ItemBuyerApi->AddItemBuyerFile");

            var localVarPath = "/beta/itemBuyer/{itemBuyerId}/file/{fileName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemBuyerId != null) localVarPathParams.Add("itemBuyerId", Configuration.ApiClient.ParameterToString(itemBuyerId)); // path parameter
            if (fileName != null) localVarPathParams.Add("fileName", Configuration.ApiClient.ParameterToString(fileName)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddItemBuyerFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Attach a file to an itemBuyer by URL. Adds a file to an existing itemBuyer by URL.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="itemBuyerId">Id of the itemBuyer to add an file to</param>
        /// <returns></returns>
        public void AddItemBuyerFileByURL (RecordFile body, int? itemBuyerId)
        {
             AddItemBuyerFileByURLWithHttpInfo(body, itemBuyerId);
        }

        /// <summary>
        /// Attach a file to an itemBuyer by URL. Adds a file to an existing itemBuyer by URL.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="itemBuyerId">Id of the itemBuyer to add an file to</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AddItemBuyerFileByURLWithHttpInfo (RecordFile body, int? itemBuyerId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ItemBuyerApi->AddItemBuyerFileByURL");
            // verify the required parameter 'itemBuyerId' is set
            if (itemBuyerId == null)
                throw new ApiException(400, "Missing required parameter 'itemBuyerId' when calling ItemBuyerApi->AddItemBuyerFileByURL");

            var localVarPath = "/beta/itemBuyer/{itemBuyerId}/file";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemBuyerId != null) localVarPathParams.Add("itemBuyerId", Configuration.ApiClient.ParameterToString(itemBuyerId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddItemBuyerFileByURL", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Attach a file to an itemBuyer by URL. Adds a file to an existing itemBuyer by URL.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="itemBuyerId">Id of the itemBuyer to add an file to</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddItemBuyerFileByURLAsync (RecordFile body, int? itemBuyerId)
        {
             await AddItemBuyerFileByURLAsyncWithHttpInfo(body, itemBuyerId);

        }

        /// <summary>
        /// Attach a file to an itemBuyer by URL. Adds a file to an existing itemBuyer by URL.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="itemBuyerId">Id of the itemBuyer to add an file to</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddItemBuyerFileByURLAsyncWithHttpInfo (RecordFile body, int? itemBuyerId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ItemBuyerApi->AddItemBuyerFileByURL");
            // verify the required parameter 'itemBuyerId' is set
            if (itemBuyerId == null)
                throw new ApiException(400, "Missing required parameter 'itemBuyerId' when calling ItemBuyerApi->AddItemBuyerFileByURL");

            var localVarPath = "/beta/itemBuyer/{itemBuyerId}/file";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemBuyerId != null) localVarPathParams.Add("itemBuyerId", Configuration.ApiClient.ParameterToString(itemBuyerId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddItemBuyerFileByURL", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Add new tags for an itemBuyer. Adds a tag to an existing itemBuyer.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemBuyerId">Id of the itemBuyer to add a tag to</param>
        /// <param name="itemBuyerTag">The tag to add</param>
        /// <returns></returns>
        public void AddItemBuyerTag (int? itemBuyerId, string itemBuyerTag)
        {
             AddItemBuyerTagWithHttpInfo(itemBuyerId, itemBuyerTag);
        }

        /// <summary>
        /// Add new tags for an itemBuyer. Adds a tag to an existing itemBuyer.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemBuyerId">Id of the itemBuyer to add a tag to</param>
        /// <param name="itemBuyerTag">The tag to add</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AddItemBuyerTagWithHttpInfo (int? itemBuyerId, string itemBuyerTag)
        {
            // verify the required parameter 'itemBuyerId' is set
            if (itemBuyerId == null)
                throw new ApiException(400, "Missing required parameter 'itemBuyerId' when calling ItemBuyerApi->AddItemBuyerTag");
            // verify the required parameter 'itemBuyerTag' is set
            if (itemBuyerTag == null)
                throw new ApiException(400, "Missing required parameter 'itemBuyerTag' when calling ItemBuyerApi->AddItemBuyerTag");

            var localVarPath = "/beta/itemBuyer/{itemBuyerId}/tag/{itemBuyerTag}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemBuyerId != null) localVarPathParams.Add("itemBuyerId", Configuration.ApiClient.ParameterToString(itemBuyerId)); // path parameter
            if (itemBuyerTag != null) localVarPathParams.Add("itemBuyerTag", Configuration.ApiClient.ParameterToString(itemBuyerTag)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddItemBuyerTag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Add new tags for an itemBuyer. Adds a tag to an existing itemBuyer.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemBuyerId">Id of the itemBuyer to add a tag to</param>
        /// <param name="itemBuyerTag">The tag to add</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddItemBuyerTagAsync (int? itemBuyerId, string itemBuyerTag)
        {
             await AddItemBuyerTagAsyncWithHttpInfo(itemBuyerId, itemBuyerTag);

        }

        /// <summary>
        /// Add new tags for an itemBuyer. Adds a tag to an existing itemBuyer.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemBuyerId">Id of the itemBuyer to add a tag to</param>
        /// <param name="itemBuyerTag">The tag to add</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddItemBuyerTagAsyncWithHttpInfo (int? itemBuyerId, string itemBuyerTag)
        {
            // verify the required parameter 'itemBuyerId' is set
            if (itemBuyerId == null)
                throw new ApiException(400, "Missing required parameter 'itemBuyerId' when calling ItemBuyerApi->AddItemBuyerTag");
            // verify the required parameter 'itemBuyerTag' is set
            if (itemBuyerTag == null)
                throw new ApiException(400, "Missing required parameter 'itemBuyerTag' when calling ItemBuyerApi->AddItemBuyerTag");

            var localVarPath = "/beta/itemBuyer/{itemBuyerId}/tag/{itemBuyerTag}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemBuyerId != null) localVarPathParams.Add("itemBuyerId", Configuration.ApiClient.ParameterToString(itemBuyerId)); // path parameter
            if (itemBuyerTag != null) localVarPathParams.Add("itemBuyerTag", Configuration.ApiClient.ParameterToString(itemBuyerTag)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddItemBuyerTag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete an itemBuyer Deletes the itemBuyer identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemBuyerId">Id of the itemBuyer to be deleted.</param>
        /// <returns></returns>
        public void DeleteItemBuyer (int? itemBuyerId)
        {
             DeleteItemBuyerWithHttpInfo(itemBuyerId);
        }

        /// <summary>
        /// Delete an itemBuyer Deletes the itemBuyer identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemBuyerId">Id of the itemBuyer to be deleted.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteItemBuyerWithHttpInfo (int? itemBuyerId)
        {
            // verify the required parameter 'itemBuyerId' is set
            if (itemBuyerId == null)
                throw new ApiException(400, "Missing required parameter 'itemBuyerId' when calling ItemBuyerApi->DeleteItemBuyer");

            var localVarPath = "/beta/itemBuyer/{itemBuyerId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemBuyerId != null) localVarPathParams.Add("itemBuyerId", Configuration.ApiClient.ParameterToString(itemBuyerId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteItemBuyer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete an itemBuyer Deletes the itemBuyer identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemBuyerId">Id of the itemBuyer to be deleted.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteItemBuyerAsync (int? itemBuyerId)
        {
             await DeleteItemBuyerAsyncWithHttpInfo(itemBuyerId);

        }

        /// <summary>
        /// Delete an itemBuyer Deletes the itemBuyer identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemBuyerId">Id of the itemBuyer to be deleted.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteItemBuyerAsyncWithHttpInfo (int? itemBuyerId)
        {
            // verify the required parameter 'itemBuyerId' is set
            if (itemBuyerId == null)
                throw new ApiException(400, "Missing required parameter 'itemBuyerId' when calling ItemBuyerApi->DeleteItemBuyer");

            var localVarPath = "/beta/itemBuyer/{itemBuyerId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemBuyerId != null) localVarPathParams.Add("itemBuyerId", Configuration.ApiClient.ParameterToString(itemBuyerId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteItemBuyer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a file for an itemBuyer. Deletes an existing itemBuyer file using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemBuyerId">Id of the itemBuyer to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns></returns>
        public void DeleteItemBuyerFile (int? itemBuyerId, int? fileId)
        {
             DeleteItemBuyerFileWithHttpInfo(itemBuyerId, fileId);
        }

        /// <summary>
        /// Delete a file for an itemBuyer. Deletes an existing itemBuyer file using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemBuyerId">Id of the itemBuyer to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteItemBuyerFileWithHttpInfo (int? itemBuyerId, int? fileId)
        {
            // verify the required parameter 'itemBuyerId' is set
            if (itemBuyerId == null)
                throw new ApiException(400, "Missing required parameter 'itemBuyerId' when calling ItemBuyerApi->DeleteItemBuyerFile");
            // verify the required parameter 'fileId' is set
            if (fileId == null)
                throw new ApiException(400, "Missing required parameter 'fileId' when calling ItemBuyerApi->DeleteItemBuyerFile");

            var localVarPath = "/beta/itemBuyer/{itemBuyerId}/file/{fileId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemBuyerId != null) localVarPathParams.Add("itemBuyerId", Configuration.ApiClient.ParameterToString(itemBuyerId)); // path parameter
            if (fileId != null) localVarPathParams.Add("fileId", Configuration.ApiClient.ParameterToString(fileId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteItemBuyerFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a file for an itemBuyer. Deletes an existing itemBuyer file using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemBuyerId">Id of the itemBuyer to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteItemBuyerFileAsync (int? itemBuyerId, int? fileId)
        {
             await DeleteItemBuyerFileAsyncWithHttpInfo(itemBuyerId, fileId);

        }

        /// <summary>
        /// Delete a file for an itemBuyer. Deletes an existing itemBuyer file using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemBuyerId">Id of the itemBuyer to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteItemBuyerFileAsyncWithHttpInfo (int? itemBuyerId, int? fileId)
        {
            // verify the required parameter 'itemBuyerId' is set
            if (itemBuyerId == null)
                throw new ApiException(400, "Missing required parameter 'itemBuyerId' when calling ItemBuyerApi->DeleteItemBuyerFile");
            // verify the required parameter 'fileId' is set
            if (fileId == null)
                throw new ApiException(400, "Missing required parameter 'fileId' when calling ItemBuyerApi->DeleteItemBuyerFile");

            var localVarPath = "/beta/itemBuyer/{itemBuyerId}/file/{fileId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemBuyerId != null) localVarPathParams.Add("itemBuyerId", Configuration.ApiClient.ParameterToString(itemBuyerId)); // path parameter
            if (fileId != null) localVarPathParams.Add("fileId", Configuration.ApiClient.ParameterToString(fileId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteItemBuyerFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a tag for an itemBuyer. Deletes an existing itemBuyer tag using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemBuyerId">Id of the itemBuyer to remove tag from</param>
        /// <param name="itemBuyerTag">The tag to delete</param>
        /// <returns></returns>
        public void DeleteItemBuyerTag (int? itemBuyerId, string itemBuyerTag)
        {
             DeleteItemBuyerTagWithHttpInfo(itemBuyerId, itemBuyerTag);
        }

        /// <summary>
        /// Delete a tag for an itemBuyer. Deletes an existing itemBuyer tag using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemBuyerId">Id of the itemBuyer to remove tag from</param>
        /// <param name="itemBuyerTag">The tag to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteItemBuyerTagWithHttpInfo (int? itemBuyerId, string itemBuyerTag)
        {
            // verify the required parameter 'itemBuyerId' is set
            if (itemBuyerId == null)
                throw new ApiException(400, "Missing required parameter 'itemBuyerId' when calling ItemBuyerApi->DeleteItemBuyerTag");
            // verify the required parameter 'itemBuyerTag' is set
            if (itemBuyerTag == null)
                throw new ApiException(400, "Missing required parameter 'itemBuyerTag' when calling ItemBuyerApi->DeleteItemBuyerTag");

            var localVarPath = "/beta/itemBuyer/{itemBuyerId}/tag/{itemBuyerTag}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemBuyerId != null) localVarPathParams.Add("itemBuyerId", Configuration.ApiClient.ParameterToString(itemBuyerId)); // path parameter
            if (itemBuyerTag != null) localVarPathParams.Add("itemBuyerTag", Configuration.ApiClient.ParameterToString(itemBuyerTag)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteItemBuyerTag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a tag for an itemBuyer. Deletes an existing itemBuyer tag using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemBuyerId">Id of the itemBuyer to remove tag from</param>
        /// <param name="itemBuyerTag">The tag to delete</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteItemBuyerTagAsync (int? itemBuyerId, string itemBuyerTag)
        {
             await DeleteItemBuyerTagAsyncWithHttpInfo(itemBuyerId, itemBuyerTag);

        }

        /// <summary>
        /// Delete a tag for an itemBuyer. Deletes an existing itemBuyer tag using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemBuyerId">Id of the itemBuyer to remove tag from</param>
        /// <param name="itemBuyerTag">The tag to delete</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteItemBuyerTagAsyncWithHttpInfo (int? itemBuyerId, string itemBuyerTag)
        {
            // verify the required parameter 'itemBuyerId' is set
            if (itemBuyerId == null)
                throw new ApiException(400, "Missing required parameter 'itemBuyerId' when calling ItemBuyerApi->DeleteItemBuyerTag");
            // verify the required parameter 'itemBuyerTag' is set
            if (itemBuyerTag == null)
                throw new ApiException(400, "Missing required parameter 'itemBuyerTag' when calling ItemBuyerApi->DeleteItemBuyerTag");

            var localVarPath = "/beta/itemBuyer/{itemBuyerId}/tag/{itemBuyerTag}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemBuyerId != null) localVarPathParams.Add("itemBuyerId", Configuration.ApiClient.ParameterToString(itemBuyerId)); // path parameter
            if (itemBuyerTag != null) localVarPathParams.Add("itemBuyerTag", Configuration.ApiClient.ParameterToString(itemBuyerTag)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteItemBuyerTag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get a duplicated an itemBuyer by id Returns a duplicated itemBuyer identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemBuyerId">Id of the itemBuyer to be duplicated.</param>
        /// <returns>ItemBuyer</returns>
        public ItemBuyer GetDuplicateItemBuyerById (int? itemBuyerId)
        {
             ApiResponse<ItemBuyer> localVarResponse = GetDuplicateItemBuyerByIdWithHttpInfo(itemBuyerId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a duplicated an itemBuyer by id Returns a duplicated itemBuyer identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemBuyerId">Id of the itemBuyer to be duplicated.</param>
        /// <returns>ApiResponse of ItemBuyer</returns>
        public ApiResponse< ItemBuyer > GetDuplicateItemBuyerByIdWithHttpInfo (int? itemBuyerId)
        {
            // verify the required parameter 'itemBuyerId' is set
            if (itemBuyerId == null)
                throw new ApiException(400, "Missing required parameter 'itemBuyerId' when calling ItemBuyerApi->GetDuplicateItemBuyerById");

            var localVarPath = "/beta/itemBuyer/duplicate/{itemBuyerId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemBuyerId != null) localVarPathParams.Add("itemBuyerId", Configuration.ApiClient.ParameterToString(itemBuyerId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDuplicateItemBuyerById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ItemBuyer>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ItemBuyer) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ItemBuyer)));
        }

        /// <summary>
        /// Get a duplicated an itemBuyer by id Returns a duplicated itemBuyer identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemBuyerId">Id of the itemBuyer to be duplicated.</param>
        /// <returns>Task of ItemBuyer</returns>
        public async System.Threading.Tasks.Task<ItemBuyer> GetDuplicateItemBuyerByIdAsync (int? itemBuyerId)
        {
             ApiResponse<ItemBuyer> localVarResponse = await GetDuplicateItemBuyerByIdAsyncWithHttpInfo(itemBuyerId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a duplicated an itemBuyer by id Returns a duplicated itemBuyer identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemBuyerId">Id of the itemBuyer to be duplicated.</param>
        /// <returns>Task of ApiResponse (ItemBuyer)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ItemBuyer>> GetDuplicateItemBuyerByIdAsyncWithHttpInfo (int? itemBuyerId)
        {
            // verify the required parameter 'itemBuyerId' is set
            if (itemBuyerId == null)
                throw new ApiException(400, "Missing required parameter 'itemBuyerId' when calling ItemBuyerApi->GetDuplicateItemBuyerById");

            var localVarPath = "/beta/itemBuyer/duplicate/{itemBuyerId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemBuyerId != null) localVarPathParams.Add("itemBuyerId", Configuration.ApiClient.ParameterToString(itemBuyerId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDuplicateItemBuyerById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ItemBuyer>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ItemBuyer) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ItemBuyer)));
        }

        /// <summary>
        /// Search itemBuyers by filter Returns the list of itemBuyers that match the given filter.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>List&lt;ItemBuyer&gt;</returns>
        public List<ItemBuyer> GetItemBuyerByFilter (string filter = null, int? page = null, int? limit = null, string sort = null)
        {
             ApiResponse<List<ItemBuyer>> localVarResponse = GetItemBuyerByFilterWithHttpInfo(filter, page, limit, sort);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Search itemBuyers by filter Returns the list of itemBuyers that match the given filter.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>ApiResponse of List&lt;ItemBuyer&gt;</returns>
        public ApiResponse< List<ItemBuyer> > GetItemBuyerByFilterWithHttpInfo (string filter = null, int? page = null, int? limit = null, string sort = null)
        {

            var localVarPath = "/beta/itemBuyer/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (filter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (page != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetItemBuyerByFilter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ItemBuyer>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ItemBuyer>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ItemBuyer>)));
        }

        /// <summary>
        /// Search itemBuyers by filter Returns the list of itemBuyers that match the given filter.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>Task of List&lt;ItemBuyer&gt;</returns>
        public async System.Threading.Tasks.Task<List<ItemBuyer>> GetItemBuyerByFilterAsync (string filter = null, int? page = null, int? limit = null, string sort = null)
        {
             ApiResponse<List<ItemBuyer>> localVarResponse = await GetItemBuyerByFilterAsyncWithHttpInfo(filter, page, limit, sort);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Search itemBuyers by filter Returns the list of itemBuyers that match the given filter.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ItemBuyer&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ItemBuyer>>> GetItemBuyerByFilterAsyncWithHttpInfo (string filter = null, int? page = null, int? limit = null, string sort = null)
        {

            var localVarPath = "/beta/itemBuyer/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (filter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (page != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetItemBuyerByFilter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ItemBuyer>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ItemBuyer>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ItemBuyer>)));
        }

        /// <summary>
        /// Get an itemBuyer by id Returns the itemBuyer identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemBuyerId">Id of the itemBuyer to be returned.</param>
        /// <returns>ItemBuyer</returns>
        public ItemBuyer GetItemBuyerById (int? itemBuyerId)
        {
             ApiResponse<ItemBuyer> localVarResponse = GetItemBuyerByIdWithHttpInfo(itemBuyerId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get an itemBuyer by id Returns the itemBuyer identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemBuyerId">Id of the itemBuyer to be returned.</param>
        /// <returns>ApiResponse of ItemBuyer</returns>
        public ApiResponse< ItemBuyer > GetItemBuyerByIdWithHttpInfo (int? itemBuyerId)
        {
            // verify the required parameter 'itemBuyerId' is set
            if (itemBuyerId == null)
                throw new ApiException(400, "Missing required parameter 'itemBuyerId' when calling ItemBuyerApi->GetItemBuyerById");

            var localVarPath = "/beta/itemBuyer/{itemBuyerId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemBuyerId != null) localVarPathParams.Add("itemBuyerId", Configuration.ApiClient.ParameterToString(itemBuyerId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetItemBuyerById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ItemBuyer>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ItemBuyer) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ItemBuyer)));
        }

        /// <summary>
        /// Get an itemBuyer by id Returns the itemBuyer identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemBuyerId">Id of the itemBuyer to be returned.</param>
        /// <returns>Task of ItemBuyer</returns>
        public async System.Threading.Tasks.Task<ItemBuyer> GetItemBuyerByIdAsync (int? itemBuyerId)
        {
             ApiResponse<ItemBuyer> localVarResponse = await GetItemBuyerByIdAsyncWithHttpInfo(itemBuyerId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get an itemBuyer by id Returns the itemBuyer identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemBuyerId">Id of the itemBuyer to be returned.</param>
        /// <returns>Task of ApiResponse (ItemBuyer)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ItemBuyer>> GetItemBuyerByIdAsyncWithHttpInfo (int? itemBuyerId)
        {
            // verify the required parameter 'itemBuyerId' is set
            if (itemBuyerId == null)
                throw new ApiException(400, "Missing required parameter 'itemBuyerId' when calling ItemBuyerApi->GetItemBuyerById");

            var localVarPath = "/beta/itemBuyer/{itemBuyerId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemBuyerId != null) localVarPathParams.Add("itemBuyerId", Configuration.ApiClient.ParameterToString(itemBuyerId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetItemBuyerById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ItemBuyer>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ItemBuyer) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ItemBuyer)));
        }

        /// <summary>
        /// Get the files for an itemBuyer. Get all existing itemBuyer files.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemBuyerId">Id of the itemBuyer to get files for</param>
        /// <returns></returns>
        public void GetItemBuyerFiles (int? itemBuyerId)
        {
             GetItemBuyerFilesWithHttpInfo(itemBuyerId);
        }

        /// <summary>
        /// Get the files for an itemBuyer. Get all existing itemBuyer files.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemBuyerId">Id of the itemBuyer to get files for</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GetItemBuyerFilesWithHttpInfo (int? itemBuyerId)
        {
            // verify the required parameter 'itemBuyerId' is set
            if (itemBuyerId == null)
                throw new ApiException(400, "Missing required parameter 'itemBuyerId' when calling ItemBuyerApi->GetItemBuyerFiles");

            var localVarPath = "/beta/itemBuyer/{itemBuyerId}/file";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemBuyerId != null) localVarPathParams.Add("itemBuyerId", Configuration.ApiClient.ParameterToString(itemBuyerId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetItemBuyerFiles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get the files for an itemBuyer. Get all existing itemBuyer files.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemBuyerId">Id of the itemBuyer to get files for</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetItemBuyerFilesAsync (int? itemBuyerId)
        {
             await GetItemBuyerFilesAsyncWithHttpInfo(itemBuyerId);

        }

        /// <summary>
        /// Get the files for an itemBuyer. Get all existing itemBuyer files.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemBuyerId">Id of the itemBuyer to get files for</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetItemBuyerFilesAsyncWithHttpInfo (int? itemBuyerId)
        {
            // verify the required parameter 'itemBuyerId' is set
            if (itemBuyerId == null)
                throw new ApiException(400, "Missing required parameter 'itemBuyerId' when calling ItemBuyerApi->GetItemBuyerFiles");

            var localVarPath = "/beta/itemBuyer/{itemBuyerId}/file";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemBuyerId != null) localVarPathParams.Add("itemBuyerId", Configuration.ApiClient.ParameterToString(itemBuyerId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetItemBuyerFiles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get the tags for an itemBuyer. Get all existing itemBuyer tags.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemBuyerId">Id of the itemBuyer to get tags for</param>
        /// <returns></returns>
        public void GetItemBuyerTags (int? itemBuyerId)
        {
             GetItemBuyerTagsWithHttpInfo(itemBuyerId);
        }

        /// <summary>
        /// Get the tags for an itemBuyer. Get all existing itemBuyer tags.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemBuyerId">Id of the itemBuyer to get tags for</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GetItemBuyerTagsWithHttpInfo (int? itemBuyerId)
        {
            // verify the required parameter 'itemBuyerId' is set
            if (itemBuyerId == null)
                throw new ApiException(400, "Missing required parameter 'itemBuyerId' when calling ItemBuyerApi->GetItemBuyerTags");

            var localVarPath = "/beta/itemBuyer/{itemBuyerId}/tag";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemBuyerId != null) localVarPathParams.Add("itemBuyerId", Configuration.ApiClient.ParameterToString(itemBuyerId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetItemBuyerTags", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get the tags for an itemBuyer. Get all existing itemBuyer tags.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemBuyerId">Id of the itemBuyer to get tags for</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetItemBuyerTagsAsync (int? itemBuyerId)
        {
             await GetItemBuyerTagsAsyncWithHttpInfo(itemBuyerId);

        }

        /// <summary>
        /// Get the tags for an itemBuyer. Get all existing itemBuyer tags.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemBuyerId">Id of the itemBuyer to get tags for</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetItemBuyerTagsAsyncWithHttpInfo (int? itemBuyerId)
        {
            // verify the required parameter 'itemBuyerId' is set
            if (itemBuyerId == null)
                throw new ApiException(400, "Missing required parameter 'itemBuyerId' when calling ItemBuyerApi->GetItemBuyerTags");

            var localVarPath = "/beta/itemBuyer/{itemBuyerId}/tag";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemBuyerId != null) localVarPathParams.Add("itemBuyerId", Configuration.ApiClient.ParameterToString(itemBuyerId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetItemBuyerTags", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update an itemBuyer Updates an existing itemBuyer using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">ItemBuyer to be updated.</param>
        /// <returns></returns>
        public void UpdateItemBuyer (ItemBuyer body)
        {
             UpdateItemBuyerWithHttpInfo(body);
        }

        /// <summary>
        /// Update an itemBuyer Updates an existing itemBuyer using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">ItemBuyer to be updated.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateItemBuyerWithHttpInfo (ItemBuyer body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ItemBuyerApi->UpdateItemBuyer");

            var localVarPath = "/beta/itemBuyer";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateItemBuyer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update an itemBuyer Updates an existing itemBuyer using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">ItemBuyer to be updated.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateItemBuyerAsync (ItemBuyer body)
        {
             await UpdateItemBuyerAsyncWithHttpInfo(body);

        }

        /// <summary>
        /// Update an itemBuyer Updates an existing itemBuyer using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">ItemBuyer to be updated.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateItemBuyerAsyncWithHttpInfo (ItemBuyer body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ItemBuyerApi->UpdateItemBuyer");

            var localVarPath = "/beta/itemBuyer";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateItemBuyer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

    }
}
