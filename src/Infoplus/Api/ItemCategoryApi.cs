/* 
 * Infoplus API
 *
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Infoplus.Client;
using Infoplus.Model;

namespace Infoplus.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IItemCategoryApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create an itemCategory
        /// </summary>
        /// <remarks>
        /// Inserts a new itemCategory using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">ItemCategory to be inserted.</param>
        /// <returns>ItemCategory</returns>
        ItemCategory AddItemCategory (ItemCategory body);

        /// <summary>
        /// Create an itemCategory
        /// </summary>
        /// <remarks>
        /// Inserts a new itemCategory using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">ItemCategory to be inserted.</param>
        /// <returns>ApiResponse of ItemCategory</returns>
        ApiResponse<ItemCategory> AddItemCategoryWithHttpInfo (ItemCategory body);
        /// <summary>
        /// Add new audit for an itemCategory
        /// </summary>
        /// <remarks>
        /// Adds an audit to an existing itemCategory.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemCategoryId">Id of the itemCategory to add an audit to</param>
        /// <param name="itemCategoryAudit">The audit to add</param>
        /// <returns></returns>
        void AddItemCategoryAudit (int? itemCategoryId, string itemCategoryAudit);

        /// <summary>
        /// Add new audit for an itemCategory
        /// </summary>
        /// <remarks>
        /// Adds an audit to an existing itemCategory.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemCategoryId">Id of the itemCategory to add an audit to</param>
        /// <param name="itemCategoryAudit">The audit to add</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddItemCategoryAuditWithHttpInfo (int? itemCategoryId, string itemCategoryAudit);
        /// <summary>
        /// Attach a file to an itemCategory
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing itemCategory.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemCategoryId">Id of the itemCategory to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns></returns>
        void AddItemCategoryFile (int? itemCategoryId, string fileName);

        /// <summary>
        /// Attach a file to an itemCategory
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing itemCategory.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemCategoryId">Id of the itemCategory to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddItemCategoryFileWithHttpInfo (int? itemCategoryId, string fileName);
        /// <summary>
        /// Attach a file to an itemCategory by URL.
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing itemCategory by URL.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="itemCategoryId">Id of the itemCategory to add an file to</param>
        /// <returns></returns>
        void AddItemCategoryFileByURL (RecordFile body, int? itemCategoryId);

        /// <summary>
        /// Attach a file to an itemCategory by URL.
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing itemCategory by URL.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="itemCategoryId">Id of the itemCategory to add an file to</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddItemCategoryFileByURLWithHttpInfo (RecordFile body, int? itemCategoryId);
        /// <summary>
        /// Add new tags for an itemCategory.
        /// </summary>
        /// <remarks>
        /// Adds a tag to an existing itemCategory.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemCategoryId">Id of the itemCategory to add a tag to</param>
        /// <param name="itemCategoryTag">The tag to add</param>
        /// <returns></returns>
        void AddItemCategoryTag (int? itemCategoryId, string itemCategoryTag);

        /// <summary>
        /// Add new tags for an itemCategory.
        /// </summary>
        /// <remarks>
        /// Adds a tag to an existing itemCategory.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemCategoryId">Id of the itemCategory to add a tag to</param>
        /// <param name="itemCategoryTag">The tag to add</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddItemCategoryTagWithHttpInfo (int? itemCategoryId, string itemCategoryTag);
        /// <summary>
        /// Delete an itemCategory
        /// </summary>
        /// <remarks>
        /// Deletes the itemCategory identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemCategoryId">Id of the itemCategory to be deleted.</param>
        /// <returns></returns>
        void DeleteItemCategory (int? itemCategoryId);

        /// <summary>
        /// Delete an itemCategory
        /// </summary>
        /// <remarks>
        /// Deletes the itemCategory identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemCategoryId">Id of the itemCategory to be deleted.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteItemCategoryWithHttpInfo (int? itemCategoryId);
        /// <summary>
        /// Delete a file for an itemCategory.
        /// </summary>
        /// <remarks>
        /// Deletes an existing itemCategory file using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemCategoryId">Id of the itemCategory to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns></returns>
        void DeleteItemCategoryFile (int? itemCategoryId, int? fileId);

        /// <summary>
        /// Delete a file for an itemCategory.
        /// </summary>
        /// <remarks>
        /// Deletes an existing itemCategory file using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemCategoryId">Id of the itemCategory to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteItemCategoryFileWithHttpInfo (int? itemCategoryId, int? fileId);
        /// <summary>
        /// Delete a tag for an itemCategory.
        /// </summary>
        /// <remarks>
        /// Deletes an existing itemCategory tag using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemCategoryId">Id of the itemCategory to remove tag from</param>
        /// <param name="itemCategoryTag">The tag to delete</param>
        /// <returns></returns>
        void DeleteItemCategoryTag (int? itemCategoryId, string itemCategoryTag);

        /// <summary>
        /// Delete a tag for an itemCategory.
        /// </summary>
        /// <remarks>
        /// Deletes an existing itemCategory tag using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemCategoryId">Id of the itemCategory to remove tag from</param>
        /// <param name="itemCategoryTag">The tag to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteItemCategoryTagWithHttpInfo (int? itemCategoryId, string itemCategoryTag);
        /// <summary>
        /// Get a duplicated an itemCategory by id
        /// </summary>
        /// <remarks>
        /// Returns a duplicated itemCategory identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemCategoryId">Id of the itemCategory to be duplicated.</param>
        /// <returns>ItemCategory</returns>
        ItemCategory GetDuplicateItemCategoryById (int? itemCategoryId);

        /// <summary>
        /// Get a duplicated an itemCategory by id
        /// </summary>
        /// <remarks>
        /// Returns a duplicated itemCategory identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemCategoryId">Id of the itemCategory to be duplicated.</param>
        /// <returns>ApiResponse of ItemCategory</returns>
        ApiResponse<ItemCategory> GetDuplicateItemCategoryByIdWithHttpInfo (int? itemCategoryId);
        /// <summary>
        /// Search itemCategorys by filter
        /// </summary>
        /// <remarks>
        /// Returns the list of itemCategorys that match the given filter.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>List&lt;ItemCategory&gt;</returns>
        List<ItemCategory> GetItemCategoryByFilter (string filter = null, int? page = null, int? limit = null, string sort = null);

        /// <summary>
        /// Search itemCategorys by filter
        /// </summary>
        /// <remarks>
        /// Returns the list of itemCategorys that match the given filter.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>ApiResponse of List&lt;ItemCategory&gt;</returns>
        ApiResponse<List<ItemCategory>> GetItemCategoryByFilterWithHttpInfo (string filter = null, int? page = null, int? limit = null, string sort = null);
        /// <summary>
        /// Get an itemCategory by id
        /// </summary>
        /// <remarks>
        /// Returns the itemCategory identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemCategoryId">Id of the itemCategory to be returned.</param>
        /// <returns>ItemCategory</returns>
        ItemCategory GetItemCategoryById (int? itemCategoryId);

        /// <summary>
        /// Get an itemCategory by id
        /// </summary>
        /// <remarks>
        /// Returns the itemCategory identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemCategoryId">Id of the itemCategory to be returned.</param>
        /// <returns>ApiResponse of ItemCategory</returns>
        ApiResponse<ItemCategory> GetItemCategoryByIdWithHttpInfo (int? itemCategoryId);
        /// <summary>
        /// Get the files for an itemCategory.
        /// </summary>
        /// <remarks>
        /// Get all existing itemCategory files.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemCategoryId">Id of the itemCategory to get files for</param>
        /// <returns></returns>
        void GetItemCategoryFiles (int? itemCategoryId);

        /// <summary>
        /// Get the files for an itemCategory.
        /// </summary>
        /// <remarks>
        /// Get all existing itemCategory files.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemCategoryId">Id of the itemCategory to get files for</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetItemCategoryFilesWithHttpInfo (int? itemCategoryId);
        /// <summary>
        /// Get the tags for an itemCategory.
        /// </summary>
        /// <remarks>
        /// Get all existing itemCategory tags.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemCategoryId">Id of the itemCategory to get tags for</param>
        /// <returns></returns>
        void GetItemCategoryTags (int? itemCategoryId);

        /// <summary>
        /// Get the tags for an itemCategory.
        /// </summary>
        /// <remarks>
        /// Get all existing itemCategory tags.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemCategoryId">Id of the itemCategory to get tags for</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetItemCategoryTagsWithHttpInfo (int? itemCategoryId);
        /// <summary>
        /// Update an itemCategory
        /// </summary>
        /// <remarks>
        /// Updates an existing itemCategory using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">ItemCategory to be updated.</param>
        /// <returns></returns>
        void UpdateItemCategory (ItemCategory body);

        /// <summary>
        /// Update an itemCategory
        /// </summary>
        /// <remarks>
        /// Updates an existing itemCategory using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">ItemCategory to be updated.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateItemCategoryWithHttpInfo (ItemCategory body);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create an itemCategory
        /// </summary>
        /// <remarks>
        /// Inserts a new itemCategory using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">ItemCategory to be inserted.</param>
        /// <returns>Task of ItemCategory</returns>
        System.Threading.Tasks.Task<ItemCategory> AddItemCategoryAsync (ItemCategory body);

        /// <summary>
        /// Create an itemCategory
        /// </summary>
        /// <remarks>
        /// Inserts a new itemCategory using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">ItemCategory to be inserted.</param>
        /// <returns>Task of ApiResponse (ItemCategory)</returns>
        System.Threading.Tasks.Task<ApiResponse<ItemCategory>> AddItemCategoryAsyncWithHttpInfo (ItemCategory body);
        /// <summary>
        /// Add new audit for an itemCategory
        /// </summary>
        /// <remarks>
        /// Adds an audit to an existing itemCategory.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemCategoryId">Id of the itemCategory to add an audit to</param>
        /// <param name="itemCategoryAudit">The audit to add</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddItemCategoryAuditAsync (int? itemCategoryId, string itemCategoryAudit);

        /// <summary>
        /// Add new audit for an itemCategory
        /// </summary>
        /// <remarks>
        /// Adds an audit to an existing itemCategory.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemCategoryId">Id of the itemCategory to add an audit to</param>
        /// <param name="itemCategoryAudit">The audit to add</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddItemCategoryAuditAsyncWithHttpInfo (int? itemCategoryId, string itemCategoryAudit);
        /// <summary>
        /// Attach a file to an itemCategory
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing itemCategory.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemCategoryId">Id of the itemCategory to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddItemCategoryFileAsync (int? itemCategoryId, string fileName);

        /// <summary>
        /// Attach a file to an itemCategory
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing itemCategory.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemCategoryId">Id of the itemCategory to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddItemCategoryFileAsyncWithHttpInfo (int? itemCategoryId, string fileName);
        /// <summary>
        /// Attach a file to an itemCategory by URL.
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing itemCategory by URL.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="itemCategoryId">Id of the itemCategory to add an file to</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddItemCategoryFileByURLAsync (RecordFile body, int? itemCategoryId);

        /// <summary>
        /// Attach a file to an itemCategory by URL.
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing itemCategory by URL.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="itemCategoryId">Id of the itemCategory to add an file to</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddItemCategoryFileByURLAsyncWithHttpInfo (RecordFile body, int? itemCategoryId);
        /// <summary>
        /// Add new tags for an itemCategory.
        /// </summary>
        /// <remarks>
        /// Adds a tag to an existing itemCategory.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemCategoryId">Id of the itemCategory to add a tag to</param>
        /// <param name="itemCategoryTag">The tag to add</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddItemCategoryTagAsync (int? itemCategoryId, string itemCategoryTag);

        /// <summary>
        /// Add new tags for an itemCategory.
        /// </summary>
        /// <remarks>
        /// Adds a tag to an existing itemCategory.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemCategoryId">Id of the itemCategory to add a tag to</param>
        /// <param name="itemCategoryTag">The tag to add</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddItemCategoryTagAsyncWithHttpInfo (int? itemCategoryId, string itemCategoryTag);
        /// <summary>
        /// Delete an itemCategory
        /// </summary>
        /// <remarks>
        /// Deletes the itemCategory identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemCategoryId">Id of the itemCategory to be deleted.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteItemCategoryAsync (int? itemCategoryId);

        /// <summary>
        /// Delete an itemCategory
        /// </summary>
        /// <remarks>
        /// Deletes the itemCategory identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemCategoryId">Id of the itemCategory to be deleted.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteItemCategoryAsyncWithHttpInfo (int? itemCategoryId);
        /// <summary>
        /// Delete a file for an itemCategory.
        /// </summary>
        /// <remarks>
        /// Deletes an existing itemCategory file using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemCategoryId">Id of the itemCategory to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteItemCategoryFileAsync (int? itemCategoryId, int? fileId);

        /// <summary>
        /// Delete a file for an itemCategory.
        /// </summary>
        /// <remarks>
        /// Deletes an existing itemCategory file using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemCategoryId">Id of the itemCategory to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteItemCategoryFileAsyncWithHttpInfo (int? itemCategoryId, int? fileId);
        /// <summary>
        /// Delete a tag for an itemCategory.
        /// </summary>
        /// <remarks>
        /// Deletes an existing itemCategory tag using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemCategoryId">Id of the itemCategory to remove tag from</param>
        /// <param name="itemCategoryTag">The tag to delete</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteItemCategoryTagAsync (int? itemCategoryId, string itemCategoryTag);

        /// <summary>
        /// Delete a tag for an itemCategory.
        /// </summary>
        /// <remarks>
        /// Deletes an existing itemCategory tag using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemCategoryId">Id of the itemCategory to remove tag from</param>
        /// <param name="itemCategoryTag">The tag to delete</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteItemCategoryTagAsyncWithHttpInfo (int? itemCategoryId, string itemCategoryTag);
        /// <summary>
        /// Get a duplicated an itemCategory by id
        /// </summary>
        /// <remarks>
        /// Returns a duplicated itemCategory identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemCategoryId">Id of the itemCategory to be duplicated.</param>
        /// <returns>Task of ItemCategory</returns>
        System.Threading.Tasks.Task<ItemCategory> GetDuplicateItemCategoryByIdAsync (int? itemCategoryId);

        /// <summary>
        /// Get a duplicated an itemCategory by id
        /// </summary>
        /// <remarks>
        /// Returns a duplicated itemCategory identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemCategoryId">Id of the itemCategory to be duplicated.</param>
        /// <returns>Task of ApiResponse (ItemCategory)</returns>
        System.Threading.Tasks.Task<ApiResponse<ItemCategory>> GetDuplicateItemCategoryByIdAsyncWithHttpInfo (int? itemCategoryId);
        /// <summary>
        /// Search itemCategorys by filter
        /// </summary>
        /// <remarks>
        /// Returns the list of itemCategorys that match the given filter.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>Task of List&lt;ItemCategory&gt;</returns>
        System.Threading.Tasks.Task<List<ItemCategory>> GetItemCategoryByFilterAsync (string filter = null, int? page = null, int? limit = null, string sort = null);

        /// <summary>
        /// Search itemCategorys by filter
        /// </summary>
        /// <remarks>
        /// Returns the list of itemCategorys that match the given filter.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ItemCategory&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ItemCategory>>> GetItemCategoryByFilterAsyncWithHttpInfo (string filter = null, int? page = null, int? limit = null, string sort = null);
        /// <summary>
        /// Get an itemCategory by id
        /// </summary>
        /// <remarks>
        /// Returns the itemCategory identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemCategoryId">Id of the itemCategory to be returned.</param>
        /// <returns>Task of ItemCategory</returns>
        System.Threading.Tasks.Task<ItemCategory> GetItemCategoryByIdAsync (int? itemCategoryId);

        /// <summary>
        /// Get an itemCategory by id
        /// </summary>
        /// <remarks>
        /// Returns the itemCategory identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemCategoryId">Id of the itemCategory to be returned.</param>
        /// <returns>Task of ApiResponse (ItemCategory)</returns>
        System.Threading.Tasks.Task<ApiResponse<ItemCategory>> GetItemCategoryByIdAsyncWithHttpInfo (int? itemCategoryId);
        /// <summary>
        /// Get the files for an itemCategory.
        /// </summary>
        /// <remarks>
        /// Get all existing itemCategory files.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemCategoryId">Id of the itemCategory to get files for</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetItemCategoryFilesAsync (int? itemCategoryId);

        /// <summary>
        /// Get the files for an itemCategory.
        /// </summary>
        /// <remarks>
        /// Get all existing itemCategory files.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemCategoryId">Id of the itemCategory to get files for</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetItemCategoryFilesAsyncWithHttpInfo (int? itemCategoryId);
        /// <summary>
        /// Get the tags for an itemCategory.
        /// </summary>
        /// <remarks>
        /// Get all existing itemCategory tags.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemCategoryId">Id of the itemCategory to get tags for</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetItemCategoryTagsAsync (int? itemCategoryId);

        /// <summary>
        /// Get the tags for an itemCategory.
        /// </summary>
        /// <remarks>
        /// Get all existing itemCategory tags.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemCategoryId">Id of the itemCategory to get tags for</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetItemCategoryTagsAsyncWithHttpInfo (int? itemCategoryId);
        /// <summary>
        /// Update an itemCategory
        /// </summary>
        /// <remarks>
        /// Updates an existing itemCategory using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">ItemCategory to be updated.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateItemCategoryAsync (ItemCategory body);

        /// <summary>
        /// Update an itemCategory
        /// </summary>
        /// <remarks>
        /// Updates an existing itemCategory using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">ItemCategory to be updated.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateItemCategoryAsyncWithHttpInfo (ItemCategory body);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ItemCategoryApi : IItemCategoryApi
    {
        private Infoplus.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ItemCategoryApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ItemCategoryApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = Infoplus.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ItemCategoryApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ItemCategoryApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Infoplus.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Infoplus.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create an itemCategory Inserts a new itemCategory using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">ItemCategory to be inserted.</param>
        /// <returns>ItemCategory</returns>
        public ItemCategory AddItemCategory (ItemCategory body)
        {
             ApiResponse<ItemCategory> localVarResponse = AddItemCategoryWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create an itemCategory Inserts a new itemCategory using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">ItemCategory to be inserted.</param>
        /// <returns>ApiResponse of ItemCategory</returns>
        public ApiResponse< ItemCategory > AddItemCategoryWithHttpInfo (ItemCategory body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ItemCategoryApi->AddItemCategory");

            var localVarPath = "/beta/itemCategory";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddItemCategory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ItemCategory>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ItemCategory) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ItemCategory)));
        }

        /// <summary>
        /// Create an itemCategory Inserts a new itemCategory using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">ItemCategory to be inserted.</param>
        /// <returns>Task of ItemCategory</returns>
        public async System.Threading.Tasks.Task<ItemCategory> AddItemCategoryAsync (ItemCategory body)
        {
             ApiResponse<ItemCategory> localVarResponse = await AddItemCategoryAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create an itemCategory Inserts a new itemCategory using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">ItemCategory to be inserted.</param>
        /// <returns>Task of ApiResponse (ItemCategory)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ItemCategory>> AddItemCategoryAsyncWithHttpInfo (ItemCategory body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ItemCategoryApi->AddItemCategory");

            var localVarPath = "/beta/itemCategory";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddItemCategory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ItemCategory>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ItemCategory) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ItemCategory)));
        }

        /// <summary>
        /// Add new audit for an itemCategory Adds an audit to an existing itemCategory.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemCategoryId">Id of the itemCategory to add an audit to</param>
        /// <param name="itemCategoryAudit">The audit to add</param>
        /// <returns></returns>
        public void AddItemCategoryAudit (int? itemCategoryId, string itemCategoryAudit)
        {
             AddItemCategoryAuditWithHttpInfo(itemCategoryId, itemCategoryAudit);
        }

        /// <summary>
        /// Add new audit for an itemCategory Adds an audit to an existing itemCategory.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemCategoryId">Id of the itemCategory to add an audit to</param>
        /// <param name="itemCategoryAudit">The audit to add</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AddItemCategoryAuditWithHttpInfo (int? itemCategoryId, string itemCategoryAudit)
        {
            // verify the required parameter 'itemCategoryId' is set
            if (itemCategoryId == null)
                throw new ApiException(400, "Missing required parameter 'itemCategoryId' when calling ItemCategoryApi->AddItemCategoryAudit");
            // verify the required parameter 'itemCategoryAudit' is set
            if (itemCategoryAudit == null)
                throw new ApiException(400, "Missing required parameter 'itemCategoryAudit' when calling ItemCategoryApi->AddItemCategoryAudit");

            var localVarPath = "/beta/itemCategory/{itemCategoryId}/audit/{itemCategoryAudit}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemCategoryId != null) localVarPathParams.Add("itemCategoryId", Configuration.ApiClient.ParameterToString(itemCategoryId)); // path parameter
            if (itemCategoryAudit != null) localVarPathParams.Add("itemCategoryAudit", Configuration.ApiClient.ParameterToString(itemCategoryAudit)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddItemCategoryAudit", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Add new audit for an itemCategory Adds an audit to an existing itemCategory.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemCategoryId">Id of the itemCategory to add an audit to</param>
        /// <param name="itemCategoryAudit">The audit to add</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddItemCategoryAuditAsync (int? itemCategoryId, string itemCategoryAudit)
        {
             await AddItemCategoryAuditAsyncWithHttpInfo(itemCategoryId, itemCategoryAudit);

        }

        /// <summary>
        /// Add new audit for an itemCategory Adds an audit to an existing itemCategory.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemCategoryId">Id of the itemCategory to add an audit to</param>
        /// <param name="itemCategoryAudit">The audit to add</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddItemCategoryAuditAsyncWithHttpInfo (int? itemCategoryId, string itemCategoryAudit)
        {
            // verify the required parameter 'itemCategoryId' is set
            if (itemCategoryId == null)
                throw new ApiException(400, "Missing required parameter 'itemCategoryId' when calling ItemCategoryApi->AddItemCategoryAudit");
            // verify the required parameter 'itemCategoryAudit' is set
            if (itemCategoryAudit == null)
                throw new ApiException(400, "Missing required parameter 'itemCategoryAudit' when calling ItemCategoryApi->AddItemCategoryAudit");

            var localVarPath = "/beta/itemCategory/{itemCategoryId}/audit/{itemCategoryAudit}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemCategoryId != null) localVarPathParams.Add("itemCategoryId", Configuration.ApiClient.ParameterToString(itemCategoryId)); // path parameter
            if (itemCategoryAudit != null) localVarPathParams.Add("itemCategoryAudit", Configuration.ApiClient.ParameterToString(itemCategoryAudit)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddItemCategoryAudit", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Attach a file to an itemCategory Adds a file to an existing itemCategory.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemCategoryId">Id of the itemCategory to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns></returns>
        public void AddItemCategoryFile (int? itemCategoryId, string fileName)
        {
             AddItemCategoryFileWithHttpInfo(itemCategoryId, fileName);
        }

        /// <summary>
        /// Attach a file to an itemCategory Adds a file to an existing itemCategory.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemCategoryId">Id of the itemCategory to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AddItemCategoryFileWithHttpInfo (int? itemCategoryId, string fileName)
        {
            // verify the required parameter 'itemCategoryId' is set
            if (itemCategoryId == null)
                throw new ApiException(400, "Missing required parameter 'itemCategoryId' when calling ItemCategoryApi->AddItemCategoryFile");
            // verify the required parameter 'fileName' is set
            if (fileName == null)
                throw new ApiException(400, "Missing required parameter 'fileName' when calling ItemCategoryApi->AddItemCategoryFile");

            var localVarPath = "/beta/itemCategory/{itemCategoryId}/file/{fileName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemCategoryId != null) localVarPathParams.Add("itemCategoryId", Configuration.ApiClient.ParameterToString(itemCategoryId)); // path parameter
            if (fileName != null) localVarPathParams.Add("fileName", Configuration.ApiClient.ParameterToString(fileName)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddItemCategoryFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Attach a file to an itemCategory Adds a file to an existing itemCategory.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemCategoryId">Id of the itemCategory to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddItemCategoryFileAsync (int? itemCategoryId, string fileName)
        {
             await AddItemCategoryFileAsyncWithHttpInfo(itemCategoryId, fileName);

        }

        /// <summary>
        /// Attach a file to an itemCategory Adds a file to an existing itemCategory.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemCategoryId">Id of the itemCategory to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddItemCategoryFileAsyncWithHttpInfo (int? itemCategoryId, string fileName)
        {
            // verify the required parameter 'itemCategoryId' is set
            if (itemCategoryId == null)
                throw new ApiException(400, "Missing required parameter 'itemCategoryId' when calling ItemCategoryApi->AddItemCategoryFile");
            // verify the required parameter 'fileName' is set
            if (fileName == null)
                throw new ApiException(400, "Missing required parameter 'fileName' when calling ItemCategoryApi->AddItemCategoryFile");

            var localVarPath = "/beta/itemCategory/{itemCategoryId}/file/{fileName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemCategoryId != null) localVarPathParams.Add("itemCategoryId", Configuration.ApiClient.ParameterToString(itemCategoryId)); // path parameter
            if (fileName != null) localVarPathParams.Add("fileName", Configuration.ApiClient.ParameterToString(fileName)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddItemCategoryFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Attach a file to an itemCategory by URL. Adds a file to an existing itemCategory by URL.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="itemCategoryId">Id of the itemCategory to add an file to</param>
        /// <returns></returns>
        public void AddItemCategoryFileByURL (RecordFile body, int? itemCategoryId)
        {
             AddItemCategoryFileByURLWithHttpInfo(body, itemCategoryId);
        }

        /// <summary>
        /// Attach a file to an itemCategory by URL. Adds a file to an existing itemCategory by URL.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="itemCategoryId">Id of the itemCategory to add an file to</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AddItemCategoryFileByURLWithHttpInfo (RecordFile body, int? itemCategoryId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ItemCategoryApi->AddItemCategoryFileByURL");
            // verify the required parameter 'itemCategoryId' is set
            if (itemCategoryId == null)
                throw new ApiException(400, "Missing required parameter 'itemCategoryId' when calling ItemCategoryApi->AddItemCategoryFileByURL");

            var localVarPath = "/beta/itemCategory/{itemCategoryId}/file";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemCategoryId != null) localVarPathParams.Add("itemCategoryId", Configuration.ApiClient.ParameterToString(itemCategoryId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddItemCategoryFileByURL", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Attach a file to an itemCategory by URL. Adds a file to an existing itemCategory by URL.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="itemCategoryId">Id of the itemCategory to add an file to</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddItemCategoryFileByURLAsync (RecordFile body, int? itemCategoryId)
        {
             await AddItemCategoryFileByURLAsyncWithHttpInfo(body, itemCategoryId);

        }

        /// <summary>
        /// Attach a file to an itemCategory by URL. Adds a file to an existing itemCategory by URL.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="itemCategoryId">Id of the itemCategory to add an file to</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddItemCategoryFileByURLAsyncWithHttpInfo (RecordFile body, int? itemCategoryId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ItemCategoryApi->AddItemCategoryFileByURL");
            // verify the required parameter 'itemCategoryId' is set
            if (itemCategoryId == null)
                throw new ApiException(400, "Missing required parameter 'itemCategoryId' when calling ItemCategoryApi->AddItemCategoryFileByURL");

            var localVarPath = "/beta/itemCategory/{itemCategoryId}/file";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemCategoryId != null) localVarPathParams.Add("itemCategoryId", Configuration.ApiClient.ParameterToString(itemCategoryId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddItemCategoryFileByURL", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Add new tags for an itemCategory. Adds a tag to an existing itemCategory.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemCategoryId">Id of the itemCategory to add a tag to</param>
        /// <param name="itemCategoryTag">The tag to add</param>
        /// <returns></returns>
        public void AddItemCategoryTag (int? itemCategoryId, string itemCategoryTag)
        {
             AddItemCategoryTagWithHttpInfo(itemCategoryId, itemCategoryTag);
        }

        /// <summary>
        /// Add new tags for an itemCategory. Adds a tag to an existing itemCategory.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemCategoryId">Id of the itemCategory to add a tag to</param>
        /// <param name="itemCategoryTag">The tag to add</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AddItemCategoryTagWithHttpInfo (int? itemCategoryId, string itemCategoryTag)
        {
            // verify the required parameter 'itemCategoryId' is set
            if (itemCategoryId == null)
                throw new ApiException(400, "Missing required parameter 'itemCategoryId' when calling ItemCategoryApi->AddItemCategoryTag");
            // verify the required parameter 'itemCategoryTag' is set
            if (itemCategoryTag == null)
                throw new ApiException(400, "Missing required parameter 'itemCategoryTag' when calling ItemCategoryApi->AddItemCategoryTag");

            var localVarPath = "/beta/itemCategory/{itemCategoryId}/tag/{itemCategoryTag}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemCategoryId != null) localVarPathParams.Add("itemCategoryId", Configuration.ApiClient.ParameterToString(itemCategoryId)); // path parameter
            if (itemCategoryTag != null) localVarPathParams.Add("itemCategoryTag", Configuration.ApiClient.ParameterToString(itemCategoryTag)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddItemCategoryTag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Add new tags for an itemCategory. Adds a tag to an existing itemCategory.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemCategoryId">Id of the itemCategory to add a tag to</param>
        /// <param name="itemCategoryTag">The tag to add</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddItemCategoryTagAsync (int? itemCategoryId, string itemCategoryTag)
        {
             await AddItemCategoryTagAsyncWithHttpInfo(itemCategoryId, itemCategoryTag);

        }

        /// <summary>
        /// Add new tags for an itemCategory. Adds a tag to an existing itemCategory.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemCategoryId">Id of the itemCategory to add a tag to</param>
        /// <param name="itemCategoryTag">The tag to add</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddItemCategoryTagAsyncWithHttpInfo (int? itemCategoryId, string itemCategoryTag)
        {
            // verify the required parameter 'itemCategoryId' is set
            if (itemCategoryId == null)
                throw new ApiException(400, "Missing required parameter 'itemCategoryId' when calling ItemCategoryApi->AddItemCategoryTag");
            // verify the required parameter 'itemCategoryTag' is set
            if (itemCategoryTag == null)
                throw new ApiException(400, "Missing required parameter 'itemCategoryTag' when calling ItemCategoryApi->AddItemCategoryTag");

            var localVarPath = "/beta/itemCategory/{itemCategoryId}/tag/{itemCategoryTag}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemCategoryId != null) localVarPathParams.Add("itemCategoryId", Configuration.ApiClient.ParameterToString(itemCategoryId)); // path parameter
            if (itemCategoryTag != null) localVarPathParams.Add("itemCategoryTag", Configuration.ApiClient.ParameterToString(itemCategoryTag)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddItemCategoryTag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete an itemCategory Deletes the itemCategory identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemCategoryId">Id of the itemCategory to be deleted.</param>
        /// <returns></returns>
        public void DeleteItemCategory (int? itemCategoryId)
        {
             DeleteItemCategoryWithHttpInfo(itemCategoryId);
        }

        /// <summary>
        /// Delete an itemCategory Deletes the itemCategory identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemCategoryId">Id of the itemCategory to be deleted.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteItemCategoryWithHttpInfo (int? itemCategoryId)
        {
            // verify the required parameter 'itemCategoryId' is set
            if (itemCategoryId == null)
                throw new ApiException(400, "Missing required parameter 'itemCategoryId' when calling ItemCategoryApi->DeleteItemCategory");

            var localVarPath = "/beta/itemCategory/{itemCategoryId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemCategoryId != null) localVarPathParams.Add("itemCategoryId", Configuration.ApiClient.ParameterToString(itemCategoryId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteItemCategory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete an itemCategory Deletes the itemCategory identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemCategoryId">Id of the itemCategory to be deleted.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteItemCategoryAsync (int? itemCategoryId)
        {
             await DeleteItemCategoryAsyncWithHttpInfo(itemCategoryId);

        }

        /// <summary>
        /// Delete an itemCategory Deletes the itemCategory identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemCategoryId">Id of the itemCategory to be deleted.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteItemCategoryAsyncWithHttpInfo (int? itemCategoryId)
        {
            // verify the required parameter 'itemCategoryId' is set
            if (itemCategoryId == null)
                throw new ApiException(400, "Missing required parameter 'itemCategoryId' when calling ItemCategoryApi->DeleteItemCategory");

            var localVarPath = "/beta/itemCategory/{itemCategoryId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemCategoryId != null) localVarPathParams.Add("itemCategoryId", Configuration.ApiClient.ParameterToString(itemCategoryId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteItemCategory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a file for an itemCategory. Deletes an existing itemCategory file using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemCategoryId">Id of the itemCategory to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns></returns>
        public void DeleteItemCategoryFile (int? itemCategoryId, int? fileId)
        {
             DeleteItemCategoryFileWithHttpInfo(itemCategoryId, fileId);
        }

        /// <summary>
        /// Delete a file for an itemCategory. Deletes an existing itemCategory file using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemCategoryId">Id of the itemCategory to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteItemCategoryFileWithHttpInfo (int? itemCategoryId, int? fileId)
        {
            // verify the required parameter 'itemCategoryId' is set
            if (itemCategoryId == null)
                throw new ApiException(400, "Missing required parameter 'itemCategoryId' when calling ItemCategoryApi->DeleteItemCategoryFile");
            // verify the required parameter 'fileId' is set
            if (fileId == null)
                throw new ApiException(400, "Missing required parameter 'fileId' when calling ItemCategoryApi->DeleteItemCategoryFile");

            var localVarPath = "/beta/itemCategory/{itemCategoryId}/file/{fileId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemCategoryId != null) localVarPathParams.Add("itemCategoryId", Configuration.ApiClient.ParameterToString(itemCategoryId)); // path parameter
            if (fileId != null) localVarPathParams.Add("fileId", Configuration.ApiClient.ParameterToString(fileId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteItemCategoryFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a file for an itemCategory. Deletes an existing itemCategory file using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemCategoryId">Id of the itemCategory to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteItemCategoryFileAsync (int? itemCategoryId, int? fileId)
        {
             await DeleteItemCategoryFileAsyncWithHttpInfo(itemCategoryId, fileId);

        }

        /// <summary>
        /// Delete a file for an itemCategory. Deletes an existing itemCategory file using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemCategoryId">Id of the itemCategory to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteItemCategoryFileAsyncWithHttpInfo (int? itemCategoryId, int? fileId)
        {
            // verify the required parameter 'itemCategoryId' is set
            if (itemCategoryId == null)
                throw new ApiException(400, "Missing required parameter 'itemCategoryId' when calling ItemCategoryApi->DeleteItemCategoryFile");
            // verify the required parameter 'fileId' is set
            if (fileId == null)
                throw new ApiException(400, "Missing required parameter 'fileId' when calling ItemCategoryApi->DeleteItemCategoryFile");

            var localVarPath = "/beta/itemCategory/{itemCategoryId}/file/{fileId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemCategoryId != null) localVarPathParams.Add("itemCategoryId", Configuration.ApiClient.ParameterToString(itemCategoryId)); // path parameter
            if (fileId != null) localVarPathParams.Add("fileId", Configuration.ApiClient.ParameterToString(fileId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteItemCategoryFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a tag for an itemCategory. Deletes an existing itemCategory tag using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemCategoryId">Id of the itemCategory to remove tag from</param>
        /// <param name="itemCategoryTag">The tag to delete</param>
        /// <returns></returns>
        public void DeleteItemCategoryTag (int? itemCategoryId, string itemCategoryTag)
        {
             DeleteItemCategoryTagWithHttpInfo(itemCategoryId, itemCategoryTag);
        }

        /// <summary>
        /// Delete a tag for an itemCategory. Deletes an existing itemCategory tag using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemCategoryId">Id of the itemCategory to remove tag from</param>
        /// <param name="itemCategoryTag">The tag to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteItemCategoryTagWithHttpInfo (int? itemCategoryId, string itemCategoryTag)
        {
            // verify the required parameter 'itemCategoryId' is set
            if (itemCategoryId == null)
                throw new ApiException(400, "Missing required parameter 'itemCategoryId' when calling ItemCategoryApi->DeleteItemCategoryTag");
            // verify the required parameter 'itemCategoryTag' is set
            if (itemCategoryTag == null)
                throw new ApiException(400, "Missing required parameter 'itemCategoryTag' when calling ItemCategoryApi->DeleteItemCategoryTag");

            var localVarPath = "/beta/itemCategory/{itemCategoryId}/tag/{itemCategoryTag}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemCategoryId != null) localVarPathParams.Add("itemCategoryId", Configuration.ApiClient.ParameterToString(itemCategoryId)); // path parameter
            if (itemCategoryTag != null) localVarPathParams.Add("itemCategoryTag", Configuration.ApiClient.ParameterToString(itemCategoryTag)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteItemCategoryTag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a tag for an itemCategory. Deletes an existing itemCategory tag using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemCategoryId">Id of the itemCategory to remove tag from</param>
        /// <param name="itemCategoryTag">The tag to delete</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteItemCategoryTagAsync (int? itemCategoryId, string itemCategoryTag)
        {
             await DeleteItemCategoryTagAsyncWithHttpInfo(itemCategoryId, itemCategoryTag);

        }

        /// <summary>
        /// Delete a tag for an itemCategory. Deletes an existing itemCategory tag using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemCategoryId">Id of the itemCategory to remove tag from</param>
        /// <param name="itemCategoryTag">The tag to delete</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteItemCategoryTagAsyncWithHttpInfo (int? itemCategoryId, string itemCategoryTag)
        {
            // verify the required parameter 'itemCategoryId' is set
            if (itemCategoryId == null)
                throw new ApiException(400, "Missing required parameter 'itemCategoryId' when calling ItemCategoryApi->DeleteItemCategoryTag");
            // verify the required parameter 'itemCategoryTag' is set
            if (itemCategoryTag == null)
                throw new ApiException(400, "Missing required parameter 'itemCategoryTag' when calling ItemCategoryApi->DeleteItemCategoryTag");

            var localVarPath = "/beta/itemCategory/{itemCategoryId}/tag/{itemCategoryTag}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemCategoryId != null) localVarPathParams.Add("itemCategoryId", Configuration.ApiClient.ParameterToString(itemCategoryId)); // path parameter
            if (itemCategoryTag != null) localVarPathParams.Add("itemCategoryTag", Configuration.ApiClient.ParameterToString(itemCategoryTag)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteItemCategoryTag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get a duplicated an itemCategory by id Returns a duplicated itemCategory identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemCategoryId">Id of the itemCategory to be duplicated.</param>
        /// <returns>ItemCategory</returns>
        public ItemCategory GetDuplicateItemCategoryById (int? itemCategoryId)
        {
             ApiResponse<ItemCategory> localVarResponse = GetDuplicateItemCategoryByIdWithHttpInfo(itemCategoryId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a duplicated an itemCategory by id Returns a duplicated itemCategory identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemCategoryId">Id of the itemCategory to be duplicated.</param>
        /// <returns>ApiResponse of ItemCategory</returns>
        public ApiResponse< ItemCategory > GetDuplicateItemCategoryByIdWithHttpInfo (int? itemCategoryId)
        {
            // verify the required parameter 'itemCategoryId' is set
            if (itemCategoryId == null)
                throw new ApiException(400, "Missing required parameter 'itemCategoryId' when calling ItemCategoryApi->GetDuplicateItemCategoryById");

            var localVarPath = "/beta/itemCategory/duplicate/{itemCategoryId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemCategoryId != null) localVarPathParams.Add("itemCategoryId", Configuration.ApiClient.ParameterToString(itemCategoryId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDuplicateItemCategoryById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ItemCategory>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ItemCategory) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ItemCategory)));
        }

        /// <summary>
        /// Get a duplicated an itemCategory by id Returns a duplicated itemCategory identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemCategoryId">Id of the itemCategory to be duplicated.</param>
        /// <returns>Task of ItemCategory</returns>
        public async System.Threading.Tasks.Task<ItemCategory> GetDuplicateItemCategoryByIdAsync (int? itemCategoryId)
        {
             ApiResponse<ItemCategory> localVarResponse = await GetDuplicateItemCategoryByIdAsyncWithHttpInfo(itemCategoryId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a duplicated an itemCategory by id Returns a duplicated itemCategory identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemCategoryId">Id of the itemCategory to be duplicated.</param>
        /// <returns>Task of ApiResponse (ItemCategory)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ItemCategory>> GetDuplicateItemCategoryByIdAsyncWithHttpInfo (int? itemCategoryId)
        {
            // verify the required parameter 'itemCategoryId' is set
            if (itemCategoryId == null)
                throw new ApiException(400, "Missing required parameter 'itemCategoryId' when calling ItemCategoryApi->GetDuplicateItemCategoryById");

            var localVarPath = "/beta/itemCategory/duplicate/{itemCategoryId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemCategoryId != null) localVarPathParams.Add("itemCategoryId", Configuration.ApiClient.ParameterToString(itemCategoryId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDuplicateItemCategoryById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ItemCategory>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ItemCategory) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ItemCategory)));
        }

        /// <summary>
        /// Search itemCategorys by filter Returns the list of itemCategorys that match the given filter.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>List&lt;ItemCategory&gt;</returns>
        public List<ItemCategory> GetItemCategoryByFilter (string filter = null, int? page = null, int? limit = null, string sort = null)
        {
             ApiResponse<List<ItemCategory>> localVarResponse = GetItemCategoryByFilterWithHttpInfo(filter, page, limit, sort);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Search itemCategorys by filter Returns the list of itemCategorys that match the given filter.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>ApiResponse of List&lt;ItemCategory&gt;</returns>
        public ApiResponse< List<ItemCategory> > GetItemCategoryByFilterWithHttpInfo (string filter = null, int? page = null, int? limit = null, string sort = null)
        {

            var localVarPath = "/beta/itemCategory/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (filter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (page != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetItemCategoryByFilter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ItemCategory>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ItemCategory>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ItemCategory>)));
        }

        /// <summary>
        /// Search itemCategorys by filter Returns the list of itemCategorys that match the given filter.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>Task of List&lt;ItemCategory&gt;</returns>
        public async System.Threading.Tasks.Task<List<ItemCategory>> GetItemCategoryByFilterAsync (string filter = null, int? page = null, int? limit = null, string sort = null)
        {
             ApiResponse<List<ItemCategory>> localVarResponse = await GetItemCategoryByFilterAsyncWithHttpInfo(filter, page, limit, sort);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Search itemCategorys by filter Returns the list of itemCategorys that match the given filter.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ItemCategory&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ItemCategory>>> GetItemCategoryByFilterAsyncWithHttpInfo (string filter = null, int? page = null, int? limit = null, string sort = null)
        {

            var localVarPath = "/beta/itemCategory/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (filter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (page != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetItemCategoryByFilter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ItemCategory>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ItemCategory>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ItemCategory>)));
        }

        /// <summary>
        /// Get an itemCategory by id Returns the itemCategory identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemCategoryId">Id of the itemCategory to be returned.</param>
        /// <returns>ItemCategory</returns>
        public ItemCategory GetItemCategoryById (int? itemCategoryId)
        {
             ApiResponse<ItemCategory> localVarResponse = GetItemCategoryByIdWithHttpInfo(itemCategoryId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get an itemCategory by id Returns the itemCategory identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemCategoryId">Id of the itemCategory to be returned.</param>
        /// <returns>ApiResponse of ItemCategory</returns>
        public ApiResponse< ItemCategory > GetItemCategoryByIdWithHttpInfo (int? itemCategoryId)
        {
            // verify the required parameter 'itemCategoryId' is set
            if (itemCategoryId == null)
                throw new ApiException(400, "Missing required parameter 'itemCategoryId' when calling ItemCategoryApi->GetItemCategoryById");

            var localVarPath = "/beta/itemCategory/{itemCategoryId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemCategoryId != null) localVarPathParams.Add("itemCategoryId", Configuration.ApiClient.ParameterToString(itemCategoryId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetItemCategoryById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ItemCategory>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ItemCategory) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ItemCategory)));
        }

        /// <summary>
        /// Get an itemCategory by id Returns the itemCategory identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemCategoryId">Id of the itemCategory to be returned.</param>
        /// <returns>Task of ItemCategory</returns>
        public async System.Threading.Tasks.Task<ItemCategory> GetItemCategoryByIdAsync (int? itemCategoryId)
        {
             ApiResponse<ItemCategory> localVarResponse = await GetItemCategoryByIdAsyncWithHttpInfo(itemCategoryId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get an itemCategory by id Returns the itemCategory identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemCategoryId">Id of the itemCategory to be returned.</param>
        /// <returns>Task of ApiResponse (ItemCategory)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ItemCategory>> GetItemCategoryByIdAsyncWithHttpInfo (int? itemCategoryId)
        {
            // verify the required parameter 'itemCategoryId' is set
            if (itemCategoryId == null)
                throw new ApiException(400, "Missing required parameter 'itemCategoryId' when calling ItemCategoryApi->GetItemCategoryById");

            var localVarPath = "/beta/itemCategory/{itemCategoryId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemCategoryId != null) localVarPathParams.Add("itemCategoryId", Configuration.ApiClient.ParameterToString(itemCategoryId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetItemCategoryById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ItemCategory>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ItemCategory) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ItemCategory)));
        }

        /// <summary>
        /// Get the files for an itemCategory. Get all existing itemCategory files.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemCategoryId">Id of the itemCategory to get files for</param>
        /// <returns></returns>
        public void GetItemCategoryFiles (int? itemCategoryId)
        {
             GetItemCategoryFilesWithHttpInfo(itemCategoryId);
        }

        /// <summary>
        /// Get the files for an itemCategory. Get all existing itemCategory files.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemCategoryId">Id of the itemCategory to get files for</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GetItemCategoryFilesWithHttpInfo (int? itemCategoryId)
        {
            // verify the required parameter 'itemCategoryId' is set
            if (itemCategoryId == null)
                throw new ApiException(400, "Missing required parameter 'itemCategoryId' when calling ItemCategoryApi->GetItemCategoryFiles");

            var localVarPath = "/beta/itemCategory/{itemCategoryId}/file";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemCategoryId != null) localVarPathParams.Add("itemCategoryId", Configuration.ApiClient.ParameterToString(itemCategoryId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetItemCategoryFiles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get the files for an itemCategory. Get all existing itemCategory files.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemCategoryId">Id of the itemCategory to get files for</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetItemCategoryFilesAsync (int? itemCategoryId)
        {
             await GetItemCategoryFilesAsyncWithHttpInfo(itemCategoryId);

        }

        /// <summary>
        /// Get the files for an itemCategory. Get all existing itemCategory files.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemCategoryId">Id of the itemCategory to get files for</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetItemCategoryFilesAsyncWithHttpInfo (int? itemCategoryId)
        {
            // verify the required parameter 'itemCategoryId' is set
            if (itemCategoryId == null)
                throw new ApiException(400, "Missing required parameter 'itemCategoryId' when calling ItemCategoryApi->GetItemCategoryFiles");

            var localVarPath = "/beta/itemCategory/{itemCategoryId}/file";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemCategoryId != null) localVarPathParams.Add("itemCategoryId", Configuration.ApiClient.ParameterToString(itemCategoryId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetItemCategoryFiles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get the tags for an itemCategory. Get all existing itemCategory tags.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemCategoryId">Id of the itemCategory to get tags for</param>
        /// <returns></returns>
        public void GetItemCategoryTags (int? itemCategoryId)
        {
             GetItemCategoryTagsWithHttpInfo(itemCategoryId);
        }

        /// <summary>
        /// Get the tags for an itemCategory. Get all existing itemCategory tags.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemCategoryId">Id of the itemCategory to get tags for</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GetItemCategoryTagsWithHttpInfo (int? itemCategoryId)
        {
            // verify the required parameter 'itemCategoryId' is set
            if (itemCategoryId == null)
                throw new ApiException(400, "Missing required parameter 'itemCategoryId' when calling ItemCategoryApi->GetItemCategoryTags");

            var localVarPath = "/beta/itemCategory/{itemCategoryId}/tag";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemCategoryId != null) localVarPathParams.Add("itemCategoryId", Configuration.ApiClient.ParameterToString(itemCategoryId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetItemCategoryTags", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get the tags for an itemCategory. Get all existing itemCategory tags.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemCategoryId">Id of the itemCategory to get tags for</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetItemCategoryTagsAsync (int? itemCategoryId)
        {
             await GetItemCategoryTagsAsyncWithHttpInfo(itemCategoryId);

        }

        /// <summary>
        /// Get the tags for an itemCategory. Get all existing itemCategory tags.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemCategoryId">Id of the itemCategory to get tags for</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetItemCategoryTagsAsyncWithHttpInfo (int? itemCategoryId)
        {
            // verify the required parameter 'itemCategoryId' is set
            if (itemCategoryId == null)
                throw new ApiException(400, "Missing required parameter 'itemCategoryId' when calling ItemCategoryApi->GetItemCategoryTags");

            var localVarPath = "/beta/itemCategory/{itemCategoryId}/tag";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemCategoryId != null) localVarPathParams.Add("itemCategoryId", Configuration.ApiClient.ParameterToString(itemCategoryId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetItemCategoryTags", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update an itemCategory Updates an existing itemCategory using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">ItemCategory to be updated.</param>
        /// <returns></returns>
        public void UpdateItemCategory (ItemCategory body)
        {
             UpdateItemCategoryWithHttpInfo(body);
        }

        /// <summary>
        /// Update an itemCategory Updates an existing itemCategory using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">ItemCategory to be updated.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateItemCategoryWithHttpInfo (ItemCategory body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ItemCategoryApi->UpdateItemCategory");

            var localVarPath = "/beta/itemCategory";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateItemCategory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update an itemCategory Updates an existing itemCategory using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">ItemCategory to be updated.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateItemCategoryAsync (ItemCategory body)
        {
             await UpdateItemCategoryAsyncWithHttpInfo(body);

        }

        /// <summary>
        /// Update an itemCategory Updates an existing itemCategory using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">ItemCategory to be updated.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateItemCategoryAsyncWithHttpInfo (ItemCategory body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ItemCategoryApi->UpdateItemCategory");

            var localVarPath = "/beta/itemCategory";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateItemCategory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

    }
}
