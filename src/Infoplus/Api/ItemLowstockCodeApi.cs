/* 
 * Infoplus API
 *
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Infoplus.Client;
using Infoplus.Model;

namespace Infoplus.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IItemLowstockCodeApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create an itemLowstockCode
        /// </summary>
        /// <remarks>
        /// Inserts a new itemLowstockCode using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">ItemLowstockCode to be inserted.</param>
        /// <returns>ItemLowstockCode</returns>
        ItemLowstockCode AddItemLowstockCode (ItemLowstockCode body);

        /// <summary>
        /// Create an itemLowstockCode
        /// </summary>
        /// <remarks>
        /// Inserts a new itemLowstockCode using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">ItemLowstockCode to be inserted.</param>
        /// <returns>ApiResponse of ItemLowstockCode</returns>
        ApiResponse<ItemLowstockCode> AddItemLowstockCodeWithHttpInfo (ItemLowstockCode body);
        /// <summary>
        /// Add new audit for an itemLowstockCode
        /// </summary>
        /// <remarks>
        /// Adds an audit to an existing itemLowstockCode.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemLowstockCodeId">Id of the itemLowstockCode to add an audit to</param>
        /// <param name="itemLowstockCodeAudit">The audit to add</param>
        /// <returns></returns>
        void AddItemLowstockCodeAudit (int? itemLowstockCodeId, string itemLowstockCodeAudit);

        /// <summary>
        /// Add new audit for an itemLowstockCode
        /// </summary>
        /// <remarks>
        /// Adds an audit to an existing itemLowstockCode.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemLowstockCodeId">Id of the itemLowstockCode to add an audit to</param>
        /// <param name="itemLowstockCodeAudit">The audit to add</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddItemLowstockCodeAuditWithHttpInfo (int? itemLowstockCodeId, string itemLowstockCodeAudit);
        /// <summary>
        /// Attach a file to an itemLowstockCode
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing itemLowstockCode.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemLowstockCodeId">Id of the itemLowstockCode to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns></returns>
        void AddItemLowstockCodeFile (int? itemLowstockCodeId, string fileName);

        /// <summary>
        /// Attach a file to an itemLowstockCode
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing itemLowstockCode.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemLowstockCodeId">Id of the itemLowstockCode to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddItemLowstockCodeFileWithHttpInfo (int? itemLowstockCodeId, string fileName);
        /// <summary>
        /// Attach a file to an itemLowstockCode by URL.
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing itemLowstockCode by URL.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="itemLowstockCodeId">Id of the itemLowstockCode to add an file to</param>
        /// <returns></returns>
        void AddItemLowstockCodeFileByURL (RecordFile body, int? itemLowstockCodeId);

        /// <summary>
        /// Attach a file to an itemLowstockCode by URL.
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing itemLowstockCode by URL.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="itemLowstockCodeId">Id of the itemLowstockCode to add an file to</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddItemLowstockCodeFileByURLWithHttpInfo (RecordFile body, int? itemLowstockCodeId);
        /// <summary>
        /// Add new tags for an itemLowstockCode.
        /// </summary>
        /// <remarks>
        /// Adds a tag to an existing itemLowstockCode.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemLowstockCodeId">Id of the itemLowstockCode to add a tag to</param>
        /// <param name="itemLowstockCodeTag">The tag to add</param>
        /// <returns></returns>
        void AddItemLowstockCodeTag (int? itemLowstockCodeId, string itemLowstockCodeTag);

        /// <summary>
        /// Add new tags for an itemLowstockCode.
        /// </summary>
        /// <remarks>
        /// Adds a tag to an existing itemLowstockCode.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemLowstockCodeId">Id of the itemLowstockCode to add a tag to</param>
        /// <param name="itemLowstockCodeTag">The tag to add</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddItemLowstockCodeTagWithHttpInfo (int? itemLowstockCodeId, string itemLowstockCodeTag);
        /// <summary>
        /// Delete an itemLowstockCode
        /// </summary>
        /// <remarks>
        /// Deletes the itemLowstockCode identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemLowstockCodeId">Id of the itemLowstockCode to be deleted.</param>
        /// <returns></returns>
        void DeleteItemLowstockCode (int? itemLowstockCodeId);

        /// <summary>
        /// Delete an itemLowstockCode
        /// </summary>
        /// <remarks>
        /// Deletes the itemLowstockCode identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemLowstockCodeId">Id of the itemLowstockCode to be deleted.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteItemLowstockCodeWithHttpInfo (int? itemLowstockCodeId);
        /// <summary>
        /// Delete a file for an itemLowstockCode.
        /// </summary>
        /// <remarks>
        /// Deletes an existing itemLowstockCode file using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemLowstockCodeId">Id of the itemLowstockCode to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns></returns>
        void DeleteItemLowstockCodeFile (int? itemLowstockCodeId, int? fileId);

        /// <summary>
        /// Delete a file for an itemLowstockCode.
        /// </summary>
        /// <remarks>
        /// Deletes an existing itemLowstockCode file using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemLowstockCodeId">Id of the itemLowstockCode to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteItemLowstockCodeFileWithHttpInfo (int? itemLowstockCodeId, int? fileId);
        /// <summary>
        /// Delete a tag for an itemLowstockCode.
        /// </summary>
        /// <remarks>
        /// Deletes an existing itemLowstockCode tag using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemLowstockCodeId">Id of the itemLowstockCode to remove tag from</param>
        /// <param name="itemLowstockCodeTag">The tag to delete</param>
        /// <returns></returns>
        void DeleteItemLowstockCodeTag (int? itemLowstockCodeId, string itemLowstockCodeTag);

        /// <summary>
        /// Delete a tag for an itemLowstockCode.
        /// </summary>
        /// <remarks>
        /// Deletes an existing itemLowstockCode tag using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemLowstockCodeId">Id of the itemLowstockCode to remove tag from</param>
        /// <param name="itemLowstockCodeTag">The tag to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteItemLowstockCodeTagWithHttpInfo (int? itemLowstockCodeId, string itemLowstockCodeTag);
        /// <summary>
        /// Get a duplicated an itemLowstockCode by id
        /// </summary>
        /// <remarks>
        /// Returns a duplicated itemLowstockCode identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemLowstockCodeId">Id of the itemLowstockCode to be duplicated.</param>
        /// <returns>ItemLowstockCode</returns>
        ItemLowstockCode GetDuplicateItemLowstockCodeById (int? itemLowstockCodeId);

        /// <summary>
        /// Get a duplicated an itemLowstockCode by id
        /// </summary>
        /// <remarks>
        /// Returns a duplicated itemLowstockCode identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemLowstockCodeId">Id of the itemLowstockCode to be duplicated.</param>
        /// <returns>ApiResponse of ItemLowstockCode</returns>
        ApiResponse<ItemLowstockCode> GetDuplicateItemLowstockCodeByIdWithHttpInfo (int? itemLowstockCodeId);
        /// <summary>
        /// Search itemLowstockCodes by filter
        /// </summary>
        /// <remarks>
        /// Returns the list of itemLowstockCodes that match the given filter.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>List&lt;ItemLowstockCode&gt;</returns>
        List<ItemLowstockCode> GetItemLowstockCodeByFilter (string filter = null, int? page = null, int? limit = null, string sort = null);

        /// <summary>
        /// Search itemLowstockCodes by filter
        /// </summary>
        /// <remarks>
        /// Returns the list of itemLowstockCodes that match the given filter.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>ApiResponse of List&lt;ItemLowstockCode&gt;</returns>
        ApiResponse<List<ItemLowstockCode>> GetItemLowstockCodeByFilterWithHttpInfo (string filter = null, int? page = null, int? limit = null, string sort = null);
        /// <summary>
        /// Get an itemLowstockCode by id
        /// </summary>
        /// <remarks>
        /// Returns the itemLowstockCode identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemLowstockCodeId">Id of the itemLowstockCode to be returned.</param>
        /// <returns>ItemLowstockCode</returns>
        ItemLowstockCode GetItemLowstockCodeById (int? itemLowstockCodeId);

        /// <summary>
        /// Get an itemLowstockCode by id
        /// </summary>
        /// <remarks>
        /// Returns the itemLowstockCode identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemLowstockCodeId">Id of the itemLowstockCode to be returned.</param>
        /// <returns>ApiResponse of ItemLowstockCode</returns>
        ApiResponse<ItemLowstockCode> GetItemLowstockCodeByIdWithHttpInfo (int? itemLowstockCodeId);
        /// <summary>
        /// Get the files for an itemLowstockCode.
        /// </summary>
        /// <remarks>
        /// Get all existing itemLowstockCode files.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemLowstockCodeId">Id of the itemLowstockCode to get files for</param>
        /// <returns></returns>
        void GetItemLowstockCodeFiles (int? itemLowstockCodeId);

        /// <summary>
        /// Get the files for an itemLowstockCode.
        /// </summary>
        /// <remarks>
        /// Get all existing itemLowstockCode files.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemLowstockCodeId">Id of the itemLowstockCode to get files for</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetItemLowstockCodeFilesWithHttpInfo (int? itemLowstockCodeId);
        /// <summary>
        /// Get the tags for an itemLowstockCode.
        /// </summary>
        /// <remarks>
        /// Get all existing itemLowstockCode tags.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemLowstockCodeId">Id of the itemLowstockCode to get tags for</param>
        /// <returns></returns>
        void GetItemLowstockCodeTags (int? itemLowstockCodeId);

        /// <summary>
        /// Get the tags for an itemLowstockCode.
        /// </summary>
        /// <remarks>
        /// Get all existing itemLowstockCode tags.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemLowstockCodeId">Id of the itemLowstockCode to get tags for</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetItemLowstockCodeTagsWithHttpInfo (int? itemLowstockCodeId);
        /// <summary>
        /// Update an itemLowstockCode
        /// </summary>
        /// <remarks>
        /// Updates an existing itemLowstockCode using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">ItemLowstockCode to be updated.</param>
        /// <returns></returns>
        void UpdateItemLowstockCode (ItemLowstockCode body);

        /// <summary>
        /// Update an itemLowstockCode
        /// </summary>
        /// <remarks>
        /// Updates an existing itemLowstockCode using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">ItemLowstockCode to be updated.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateItemLowstockCodeWithHttpInfo (ItemLowstockCode body);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create an itemLowstockCode
        /// </summary>
        /// <remarks>
        /// Inserts a new itemLowstockCode using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">ItemLowstockCode to be inserted.</param>
        /// <returns>Task of ItemLowstockCode</returns>
        System.Threading.Tasks.Task<ItemLowstockCode> AddItemLowstockCodeAsync (ItemLowstockCode body);

        /// <summary>
        /// Create an itemLowstockCode
        /// </summary>
        /// <remarks>
        /// Inserts a new itemLowstockCode using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">ItemLowstockCode to be inserted.</param>
        /// <returns>Task of ApiResponse (ItemLowstockCode)</returns>
        System.Threading.Tasks.Task<ApiResponse<ItemLowstockCode>> AddItemLowstockCodeAsyncWithHttpInfo (ItemLowstockCode body);
        /// <summary>
        /// Add new audit for an itemLowstockCode
        /// </summary>
        /// <remarks>
        /// Adds an audit to an existing itemLowstockCode.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemLowstockCodeId">Id of the itemLowstockCode to add an audit to</param>
        /// <param name="itemLowstockCodeAudit">The audit to add</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddItemLowstockCodeAuditAsync (int? itemLowstockCodeId, string itemLowstockCodeAudit);

        /// <summary>
        /// Add new audit for an itemLowstockCode
        /// </summary>
        /// <remarks>
        /// Adds an audit to an existing itemLowstockCode.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemLowstockCodeId">Id of the itemLowstockCode to add an audit to</param>
        /// <param name="itemLowstockCodeAudit">The audit to add</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddItemLowstockCodeAuditAsyncWithHttpInfo (int? itemLowstockCodeId, string itemLowstockCodeAudit);
        /// <summary>
        /// Attach a file to an itemLowstockCode
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing itemLowstockCode.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemLowstockCodeId">Id of the itemLowstockCode to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddItemLowstockCodeFileAsync (int? itemLowstockCodeId, string fileName);

        /// <summary>
        /// Attach a file to an itemLowstockCode
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing itemLowstockCode.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemLowstockCodeId">Id of the itemLowstockCode to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddItemLowstockCodeFileAsyncWithHttpInfo (int? itemLowstockCodeId, string fileName);
        /// <summary>
        /// Attach a file to an itemLowstockCode by URL.
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing itemLowstockCode by URL.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="itemLowstockCodeId">Id of the itemLowstockCode to add an file to</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddItemLowstockCodeFileByURLAsync (RecordFile body, int? itemLowstockCodeId);

        /// <summary>
        /// Attach a file to an itemLowstockCode by URL.
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing itemLowstockCode by URL.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="itemLowstockCodeId">Id of the itemLowstockCode to add an file to</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddItemLowstockCodeFileByURLAsyncWithHttpInfo (RecordFile body, int? itemLowstockCodeId);
        /// <summary>
        /// Add new tags for an itemLowstockCode.
        /// </summary>
        /// <remarks>
        /// Adds a tag to an existing itemLowstockCode.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemLowstockCodeId">Id of the itemLowstockCode to add a tag to</param>
        /// <param name="itemLowstockCodeTag">The tag to add</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddItemLowstockCodeTagAsync (int? itemLowstockCodeId, string itemLowstockCodeTag);

        /// <summary>
        /// Add new tags for an itemLowstockCode.
        /// </summary>
        /// <remarks>
        /// Adds a tag to an existing itemLowstockCode.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemLowstockCodeId">Id of the itemLowstockCode to add a tag to</param>
        /// <param name="itemLowstockCodeTag">The tag to add</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddItemLowstockCodeTagAsyncWithHttpInfo (int? itemLowstockCodeId, string itemLowstockCodeTag);
        /// <summary>
        /// Delete an itemLowstockCode
        /// </summary>
        /// <remarks>
        /// Deletes the itemLowstockCode identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemLowstockCodeId">Id of the itemLowstockCode to be deleted.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteItemLowstockCodeAsync (int? itemLowstockCodeId);

        /// <summary>
        /// Delete an itemLowstockCode
        /// </summary>
        /// <remarks>
        /// Deletes the itemLowstockCode identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemLowstockCodeId">Id of the itemLowstockCode to be deleted.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteItemLowstockCodeAsyncWithHttpInfo (int? itemLowstockCodeId);
        /// <summary>
        /// Delete a file for an itemLowstockCode.
        /// </summary>
        /// <remarks>
        /// Deletes an existing itemLowstockCode file using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemLowstockCodeId">Id of the itemLowstockCode to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteItemLowstockCodeFileAsync (int? itemLowstockCodeId, int? fileId);

        /// <summary>
        /// Delete a file for an itemLowstockCode.
        /// </summary>
        /// <remarks>
        /// Deletes an existing itemLowstockCode file using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemLowstockCodeId">Id of the itemLowstockCode to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteItemLowstockCodeFileAsyncWithHttpInfo (int? itemLowstockCodeId, int? fileId);
        /// <summary>
        /// Delete a tag for an itemLowstockCode.
        /// </summary>
        /// <remarks>
        /// Deletes an existing itemLowstockCode tag using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemLowstockCodeId">Id of the itemLowstockCode to remove tag from</param>
        /// <param name="itemLowstockCodeTag">The tag to delete</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteItemLowstockCodeTagAsync (int? itemLowstockCodeId, string itemLowstockCodeTag);

        /// <summary>
        /// Delete a tag for an itemLowstockCode.
        /// </summary>
        /// <remarks>
        /// Deletes an existing itemLowstockCode tag using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemLowstockCodeId">Id of the itemLowstockCode to remove tag from</param>
        /// <param name="itemLowstockCodeTag">The tag to delete</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteItemLowstockCodeTagAsyncWithHttpInfo (int? itemLowstockCodeId, string itemLowstockCodeTag);
        /// <summary>
        /// Get a duplicated an itemLowstockCode by id
        /// </summary>
        /// <remarks>
        /// Returns a duplicated itemLowstockCode identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemLowstockCodeId">Id of the itemLowstockCode to be duplicated.</param>
        /// <returns>Task of ItemLowstockCode</returns>
        System.Threading.Tasks.Task<ItemLowstockCode> GetDuplicateItemLowstockCodeByIdAsync (int? itemLowstockCodeId);

        /// <summary>
        /// Get a duplicated an itemLowstockCode by id
        /// </summary>
        /// <remarks>
        /// Returns a duplicated itemLowstockCode identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemLowstockCodeId">Id of the itemLowstockCode to be duplicated.</param>
        /// <returns>Task of ApiResponse (ItemLowstockCode)</returns>
        System.Threading.Tasks.Task<ApiResponse<ItemLowstockCode>> GetDuplicateItemLowstockCodeByIdAsyncWithHttpInfo (int? itemLowstockCodeId);
        /// <summary>
        /// Search itemLowstockCodes by filter
        /// </summary>
        /// <remarks>
        /// Returns the list of itemLowstockCodes that match the given filter.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>Task of List&lt;ItemLowstockCode&gt;</returns>
        System.Threading.Tasks.Task<List<ItemLowstockCode>> GetItemLowstockCodeByFilterAsync (string filter = null, int? page = null, int? limit = null, string sort = null);

        /// <summary>
        /// Search itemLowstockCodes by filter
        /// </summary>
        /// <remarks>
        /// Returns the list of itemLowstockCodes that match the given filter.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ItemLowstockCode&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ItemLowstockCode>>> GetItemLowstockCodeByFilterAsyncWithHttpInfo (string filter = null, int? page = null, int? limit = null, string sort = null);
        /// <summary>
        /// Get an itemLowstockCode by id
        /// </summary>
        /// <remarks>
        /// Returns the itemLowstockCode identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemLowstockCodeId">Id of the itemLowstockCode to be returned.</param>
        /// <returns>Task of ItemLowstockCode</returns>
        System.Threading.Tasks.Task<ItemLowstockCode> GetItemLowstockCodeByIdAsync (int? itemLowstockCodeId);

        /// <summary>
        /// Get an itemLowstockCode by id
        /// </summary>
        /// <remarks>
        /// Returns the itemLowstockCode identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemLowstockCodeId">Id of the itemLowstockCode to be returned.</param>
        /// <returns>Task of ApiResponse (ItemLowstockCode)</returns>
        System.Threading.Tasks.Task<ApiResponse<ItemLowstockCode>> GetItemLowstockCodeByIdAsyncWithHttpInfo (int? itemLowstockCodeId);
        /// <summary>
        /// Get the files for an itemLowstockCode.
        /// </summary>
        /// <remarks>
        /// Get all existing itemLowstockCode files.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemLowstockCodeId">Id of the itemLowstockCode to get files for</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetItemLowstockCodeFilesAsync (int? itemLowstockCodeId);

        /// <summary>
        /// Get the files for an itemLowstockCode.
        /// </summary>
        /// <remarks>
        /// Get all existing itemLowstockCode files.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemLowstockCodeId">Id of the itemLowstockCode to get files for</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetItemLowstockCodeFilesAsyncWithHttpInfo (int? itemLowstockCodeId);
        /// <summary>
        /// Get the tags for an itemLowstockCode.
        /// </summary>
        /// <remarks>
        /// Get all existing itemLowstockCode tags.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemLowstockCodeId">Id of the itemLowstockCode to get tags for</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetItemLowstockCodeTagsAsync (int? itemLowstockCodeId);

        /// <summary>
        /// Get the tags for an itemLowstockCode.
        /// </summary>
        /// <remarks>
        /// Get all existing itemLowstockCode tags.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemLowstockCodeId">Id of the itemLowstockCode to get tags for</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetItemLowstockCodeTagsAsyncWithHttpInfo (int? itemLowstockCodeId);
        /// <summary>
        /// Update an itemLowstockCode
        /// </summary>
        /// <remarks>
        /// Updates an existing itemLowstockCode using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">ItemLowstockCode to be updated.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateItemLowstockCodeAsync (ItemLowstockCode body);

        /// <summary>
        /// Update an itemLowstockCode
        /// </summary>
        /// <remarks>
        /// Updates an existing itemLowstockCode using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">ItemLowstockCode to be updated.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateItemLowstockCodeAsyncWithHttpInfo (ItemLowstockCode body);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ItemLowstockCodeApi : IItemLowstockCodeApi
    {
        private Infoplus.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ItemLowstockCodeApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ItemLowstockCodeApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = Infoplus.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ItemLowstockCodeApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ItemLowstockCodeApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Infoplus.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Infoplus.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create an itemLowstockCode Inserts a new itemLowstockCode using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">ItemLowstockCode to be inserted.</param>
        /// <returns>ItemLowstockCode</returns>
        public ItemLowstockCode AddItemLowstockCode (ItemLowstockCode body)
        {
             ApiResponse<ItemLowstockCode> localVarResponse = AddItemLowstockCodeWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create an itemLowstockCode Inserts a new itemLowstockCode using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">ItemLowstockCode to be inserted.</param>
        /// <returns>ApiResponse of ItemLowstockCode</returns>
        public ApiResponse< ItemLowstockCode > AddItemLowstockCodeWithHttpInfo (ItemLowstockCode body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ItemLowstockCodeApi->AddItemLowstockCode");

            var localVarPath = "/beta/itemLowstockCode";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddItemLowstockCode", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ItemLowstockCode>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ItemLowstockCode) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ItemLowstockCode)));
        }

        /// <summary>
        /// Create an itemLowstockCode Inserts a new itemLowstockCode using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">ItemLowstockCode to be inserted.</param>
        /// <returns>Task of ItemLowstockCode</returns>
        public async System.Threading.Tasks.Task<ItemLowstockCode> AddItemLowstockCodeAsync (ItemLowstockCode body)
        {
             ApiResponse<ItemLowstockCode> localVarResponse = await AddItemLowstockCodeAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create an itemLowstockCode Inserts a new itemLowstockCode using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">ItemLowstockCode to be inserted.</param>
        /// <returns>Task of ApiResponse (ItemLowstockCode)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ItemLowstockCode>> AddItemLowstockCodeAsyncWithHttpInfo (ItemLowstockCode body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ItemLowstockCodeApi->AddItemLowstockCode");

            var localVarPath = "/beta/itemLowstockCode";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddItemLowstockCode", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ItemLowstockCode>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ItemLowstockCode) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ItemLowstockCode)));
        }

        /// <summary>
        /// Add new audit for an itemLowstockCode Adds an audit to an existing itemLowstockCode.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemLowstockCodeId">Id of the itemLowstockCode to add an audit to</param>
        /// <param name="itemLowstockCodeAudit">The audit to add</param>
        /// <returns></returns>
        public void AddItemLowstockCodeAudit (int? itemLowstockCodeId, string itemLowstockCodeAudit)
        {
             AddItemLowstockCodeAuditWithHttpInfo(itemLowstockCodeId, itemLowstockCodeAudit);
        }

        /// <summary>
        /// Add new audit for an itemLowstockCode Adds an audit to an existing itemLowstockCode.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemLowstockCodeId">Id of the itemLowstockCode to add an audit to</param>
        /// <param name="itemLowstockCodeAudit">The audit to add</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AddItemLowstockCodeAuditWithHttpInfo (int? itemLowstockCodeId, string itemLowstockCodeAudit)
        {
            // verify the required parameter 'itemLowstockCodeId' is set
            if (itemLowstockCodeId == null)
                throw new ApiException(400, "Missing required parameter 'itemLowstockCodeId' when calling ItemLowstockCodeApi->AddItemLowstockCodeAudit");
            // verify the required parameter 'itemLowstockCodeAudit' is set
            if (itemLowstockCodeAudit == null)
                throw new ApiException(400, "Missing required parameter 'itemLowstockCodeAudit' when calling ItemLowstockCodeApi->AddItemLowstockCodeAudit");

            var localVarPath = "/beta/itemLowstockCode/{itemLowstockCodeId}/audit/{itemLowstockCodeAudit}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemLowstockCodeId != null) localVarPathParams.Add("itemLowstockCodeId", Configuration.ApiClient.ParameterToString(itemLowstockCodeId)); // path parameter
            if (itemLowstockCodeAudit != null) localVarPathParams.Add("itemLowstockCodeAudit", Configuration.ApiClient.ParameterToString(itemLowstockCodeAudit)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddItemLowstockCodeAudit", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Add new audit for an itemLowstockCode Adds an audit to an existing itemLowstockCode.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemLowstockCodeId">Id of the itemLowstockCode to add an audit to</param>
        /// <param name="itemLowstockCodeAudit">The audit to add</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddItemLowstockCodeAuditAsync (int? itemLowstockCodeId, string itemLowstockCodeAudit)
        {
             await AddItemLowstockCodeAuditAsyncWithHttpInfo(itemLowstockCodeId, itemLowstockCodeAudit);

        }

        /// <summary>
        /// Add new audit for an itemLowstockCode Adds an audit to an existing itemLowstockCode.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemLowstockCodeId">Id of the itemLowstockCode to add an audit to</param>
        /// <param name="itemLowstockCodeAudit">The audit to add</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddItemLowstockCodeAuditAsyncWithHttpInfo (int? itemLowstockCodeId, string itemLowstockCodeAudit)
        {
            // verify the required parameter 'itemLowstockCodeId' is set
            if (itemLowstockCodeId == null)
                throw new ApiException(400, "Missing required parameter 'itemLowstockCodeId' when calling ItemLowstockCodeApi->AddItemLowstockCodeAudit");
            // verify the required parameter 'itemLowstockCodeAudit' is set
            if (itemLowstockCodeAudit == null)
                throw new ApiException(400, "Missing required parameter 'itemLowstockCodeAudit' when calling ItemLowstockCodeApi->AddItemLowstockCodeAudit");

            var localVarPath = "/beta/itemLowstockCode/{itemLowstockCodeId}/audit/{itemLowstockCodeAudit}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemLowstockCodeId != null) localVarPathParams.Add("itemLowstockCodeId", Configuration.ApiClient.ParameterToString(itemLowstockCodeId)); // path parameter
            if (itemLowstockCodeAudit != null) localVarPathParams.Add("itemLowstockCodeAudit", Configuration.ApiClient.ParameterToString(itemLowstockCodeAudit)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddItemLowstockCodeAudit", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Attach a file to an itemLowstockCode Adds a file to an existing itemLowstockCode.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemLowstockCodeId">Id of the itemLowstockCode to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns></returns>
        public void AddItemLowstockCodeFile (int? itemLowstockCodeId, string fileName)
        {
             AddItemLowstockCodeFileWithHttpInfo(itemLowstockCodeId, fileName);
        }

        /// <summary>
        /// Attach a file to an itemLowstockCode Adds a file to an existing itemLowstockCode.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemLowstockCodeId">Id of the itemLowstockCode to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AddItemLowstockCodeFileWithHttpInfo (int? itemLowstockCodeId, string fileName)
        {
            // verify the required parameter 'itemLowstockCodeId' is set
            if (itemLowstockCodeId == null)
                throw new ApiException(400, "Missing required parameter 'itemLowstockCodeId' when calling ItemLowstockCodeApi->AddItemLowstockCodeFile");
            // verify the required parameter 'fileName' is set
            if (fileName == null)
                throw new ApiException(400, "Missing required parameter 'fileName' when calling ItemLowstockCodeApi->AddItemLowstockCodeFile");

            var localVarPath = "/beta/itemLowstockCode/{itemLowstockCodeId}/file/{fileName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemLowstockCodeId != null) localVarPathParams.Add("itemLowstockCodeId", Configuration.ApiClient.ParameterToString(itemLowstockCodeId)); // path parameter
            if (fileName != null) localVarPathParams.Add("fileName", Configuration.ApiClient.ParameterToString(fileName)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddItemLowstockCodeFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Attach a file to an itemLowstockCode Adds a file to an existing itemLowstockCode.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemLowstockCodeId">Id of the itemLowstockCode to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddItemLowstockCodeFileAsync (int? itemLowstockCodeId, string fileName)
        {
             await AddItemLowstockCodeFileAsyncWithHttpInfo(itemLowstockCodeId, fileName);

        }

        /// <summary>
        /// Attach a file to an itemLowstockCode Adds a file to an existing itemLowstockCode.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemLowstockCodeId">Id of the itemLowstockCode to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddItemLowstockCodeFileAsyncWithHttpInfo (int? itemLowstockCodeId, string fileName)
        {
            // verify the required parameter 'itemLowstockCodeId' is set
            if (itemLowstockCodeId == null)
                throw new ApiException(400, "Missing required parameter 'itemLowstockCodeId' when calling ItemLowstockCodeApi->AddItemLowstockCodeFile");
            // verify the required parameter 'fileName' is set
            if (fileName == null)
                throw new ApiException(400, "Missing required parameter 'fileName' when calling ItemLowstockCodeApi->AddItemLowstockCodeFile");

            var localVarPath = "/beta/itemLowstockCode/{itemLowstockCodeId}/file/{fileName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemLowstockCodeId != null) localVarPathParams.Add("itemLowstockCodeId", Configuration.ApiClient.ParameterToString(itemLowstockCodeId)); // path parameter
            if (fileName != null) localVarPathParams.Add("fileName", Configuration.ApiClient.ParameterToString(fileName)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddItemLowstockCodeFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Attach a file to an itemLowstockCode by URL. Adds a file to an existing itemLowstockCode by URL.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="itemLowstockCodeId">Id of the itemLowstockCode to add an file to</param>
        /// <returns></returns>
        public void AddItemLowstockCodeFileByURL (RecordFile body, int? itemLowstockCodeId)
        {
             AddItemLowstockCodeFileByURLWithHttpInfo(body, itemLowstockCodeId);
        }

        /// <summary>
        /// Attach a file to an itemLowstockCode by URL. Adds a file to an existing itemLowstockCode by URL.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="itemLowstockCodeId">Id of the itemLowstockCode to add an file to</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AddItemLowstockCodeFileByURLWithHttpInfo (RecordFile body, int? itemLowstockCodeId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ItemLowstockCodeApi->AddItemLowstockCodeFileByURL");
            // verify the required parameter 'itemLowstockCodeId' is set
            if (itemLowstockCodeId == null)
                throw new ApiException(400, "Missing required parameter 'itemLowstockCodeId' when calling ItemLowstockCodeApi->AddItemLowstockCodeFileByURL");

            var localVarPath = "/beta/itemLowstockCode/{itemLowstockCodeId}/file";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemLowstockCodeId != null) localVarPathParams.Add("itemLowstockCodeId", Configuration.ApiClient.ParameterToString(itemLowstockCodeId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddItemLowstockCodeFileByURL", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Attach a file to an itemLowstockCode by URL. Adds a file to an existing itemLowstockCode by URL.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="itemLowstockCodeId">Id of the itemLowstockCode to add an file to</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddItemLowstockCodeFileByURLAsync (RecordFile body, int? itemLowstockCodeId)
        {
             await AddItemLowstockCodeFileByURLAsyncWithHttpInfo(body, itemLowstockCodeId);

        }

        /// <summary>
        /// Attach a file to an itemLowstockCode by URL. Adds a file to an existing itemLowstockCode by URL.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="itemLowstockCodeId">Id of the itemLowstockCode to add an file to</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddItemLowstockCodeFileByURLAsyncWithHttpInfo (RecordFile body, int? itemLowstockCodeId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ItemLowstockCodeApi->AddItemLowstockCodeFileByURL");
            // verify the required parameter 'itemLowstockCodeId' is set
            if (itemLowstockCodeId == null)
                throw new ApiException(400, "Missing required parameter 'itemLowstockCodeId' when calling ItemLowstockCodeApi->AddItemLowstockCodeFileByURL");

            var localVarPath = "/beta/itemLowstockCode/{itemLowstockCodeId}/file";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemLowstockCodeId != null) localVarPathParams.Add("itemLowstockCodeId", Configuration.ApiClient.ParameterToString(itemLowstockCodeId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddItemLowstockCodeFileByURL", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Add new tags for an itemLowstockCode. Adds a tag to an existing itemLowstockCode.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemLowstockCodeId">Id of the itemLowstockCode to add a tag to</param>
        /// <param name="itemLowstockCodeTag">The tag to add</param>
        /// <returns></returns>
        public void AddItemLowstockCodeTag (int? itemLowstockCodeId, string itemLowstockCodeTag)
        {
             AddItemLowstockCodeTagWithHttpInfo(itemLowstockCodeId, itemLowstockCodeTag);
        }

        /// <summary>
        /// Add new tags for an itemLowstockCode. Adds a tag to an existing itemLowstockCode.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemLowstockCodeId">Id of the itemLowstockCode to add a tag to</param>
        /// <param name="itemLowstockCodeTag">The tag to add</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AddItemLowstockCodeTagWithHttpInfo (int? itemLowstockCodeId, string itemLowstockCodeTag)
        {
            // verify the required parameter 'itemLowstockCodeId' is set
            if (itemLowstockCodeId == null)
                throw new ApiException(400, "Missing required parameter 'itemLowstockCodeId' when calling ItemLowstockCodeApi->AddItemLowstockCodeTag");
            // verify the required parameter 'itemLowstockCodeTag' is set
            if (itemLowstockCodeTag == null)
                throw new ApiException(400, "Missing required parameter 'itemLowstockCodeTag' when calling ItemLowstockCodeApi->AddItemLowstockCodeTag");

            var localVarPath = "/beta/itemLowstockCode/{itemLowstockCodeId}/tag/{itemLowstockCodeTag}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemLowstockCodeId != null) localVarPathParams.Add("itemLowstockCodeId", Configuration.ApiClient.ParameterToString(itemLowstockCodeId)); // path parameter
            if (itemLowstockCodeTag != null) localVarPathParams.Add("itemLowstockCodeTag", Configuration.ApiClient.ParameterToString(itemLowstockCodeTag)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddItemLowstockCodeTag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Add new tags for an itemLowstockCode. Adds a tag to an existing itemLowstockCode.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemLowstockCodeId">Id of the itemLowstockCode to add a tag to</param>
        /// <param name="itemLowstockCodeTag">The tag to add</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddItemLowstockCodeTagAsync (int? itemLowstockCodeId, string itemLowstockCodeTag)
        {
             await AddItemLowstockCodeTagAsyncWithHttpInfo(itemLowstockCodeId, itemLowstockCodeTag);

        }

        /// <summary>
        /// Add new tags for an itemLowstockCode. Adds a tag to an existing itemLowstockCode.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemLowstockCodeId">Id of the itemLowstockCode to add a tag to</param>
        /// <param name="itemLowstockCodeTag">The tag to add</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddItemLowstockCodeTagAsyncWithHttpInfo (int? itemLowstockCodeId, string itemLowstockCodeTag)
        {
            // verify the required parameter 'itemLowstockCodeId' is set
            if (itemLowstockCodeId == null)
                throw new ApiException(400, "Missing required parameter 'itemLowstockCodeId' when calling ItemLowstockCodeApi->AddItemLowstockCodeTag");
            // verify the required parameter 'itemLowstockCodeTag' is set
            if (itemLowstockCodeTag == null)
                throw new ApiException(400, "Missing required parameter 'itemLowstockCodeTag' when calling ItemLowstockCodeApi->AddItemLowstockCodeTag");

            var localVarPath = "/beta/itemLowstockCode/{itemLowstockCodeId}/tag/{itemLowstockCodeTag}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemLowstockCodeId != null) localVarPathParams.Add("itemLowstockCodeId", Configuration.ApiClient.ParameterToString(itemLowstockCodeId)); // path parameter
            if (itemLowstockCodeTag != null) localVarPathParams.Add("itemLowstockCodeTag", Configuration.ApiClient.ParameterToString(itemLowstockCodeTag)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddItemLowstockCodeTag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete an itemLowstockCode Deletes the itemLowstockCode identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemLowstockCodeId">Id of the itemLowstockCode to be deleted.</param>
        /// <returns></returns>
        public void DeleteItemLowstockCode (int? itemLowstockCodeId)
        {
             DeleteItemLowstockCodeWithHttpInfo(itemLowstockCodeId);
        }

        /// <summary>
        /// Delete an itemLowstockCode Deletes the itemLowstockCode identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemLowstockCodeId">Id of the itemLowstockCode to be deleted.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteItemLowstockCodeWithHttpInfo (int? itemLowstockCodeId)
        {
            // verify the required parameter 'itemLowstockCodeId' is set
            if (itemLowstockCodeId == null)
                throw new ApiException(400, "Missing required parameter 'itemLowstockCodeId' when calling ItemLowstockCodeApi->DeleteItemLowstockCode");

            var localVarPath = "/beta/itemLowstockCode/{itemLowstockCodeId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemLowstockCodeId != null) localVarPathParams.Add("itemLowstockCodeId", Configuration.ApiClient.ParameterToString(itemLowstockCodeId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteItemLowstockCode", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete an itemLowstockCode Deletes the itemLowstockCode identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemLowstockCodeId">Id of the itemLowstockCode to be deleted.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteItemLowstockCodeAsync (int? itemLowstockCodeId)
        {
             await DeleteItemLowstockCodeAsyncWithHttpInfo(itemLowstockCodeId);

        }

        /// <summary>
        /// Delete an itemLowstockCode Deletes the itemLowstockCode identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemLowstockCodeId">Id of the itemLowstockCode to be deleted.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteItemLowstockCodeAsyncWithHttpInfo (int? itemLowstockCodeId)
        {
            // verify the required parameter 'itemLowstockCodeId' is set
            if (itemLowstockCodeId == null)
                throw new ApiException(400, "Missing required parameter 'itemLowstockCodeId' when calling ItemLowstockCodeApi->DeleteItemLowstockCode");

            var localVarPath = "/beta/itemLowstockCode/{itemLowstockCodeId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemLowstockCodeId != null) localVarPathParams.Add("itemLowstockCodeId", Configuration.ApiClient.ParameterToString(itemLowstockCodeId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteItemLowstockCode", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a file for an itemLowstockCode. Deletes an existing itemLowstockCode file using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemLowstockCodeId">Id of the itemLowstockCode to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns></returns>
        public void DeleteItemLowstockCodeFile (int? itemLowstockCodeId, int? fileId)
        {
             DeleteItemLowstockCodeFileWithHttpInfo(itemLowstockCodeId, fileId);
        }

        /// <summary>
        /// Delete a file for an itemLowstockCode. Deletes an existing itemLowstockCode file using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemLowstockCodeId">Id of the itemLowstockCode to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteItemLowstockCodeFileWithHttpInfo (int? itemLowstockCodeId, int? fileId)
        {
            // verify the required parameter 'itemLowstockCodeId' is set
            if (itemLowstockCodeId == null)
                throw new ApiException(400, "Missing required parameter 'itemLowstockCodeId' when calling ItemLowstockCodeApi->DeleteItemLowstockCodeFile");
            // verify the required parameter 'fileId' is set
            if (fileId == null)
                throw new ApiException(400, "Missing required parameter 'fileId' when calling ItemLowstockCodeApi->DeleteItemLowstockCodeFile");

            var localVarPath = "/beta/itemLowstockCode/{itemLowstockCodeId}/file/{fileId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemLowstockCodeId != null) localVarPathParams.Add("itemLowstockCodeId", Configuration.ApiClient.ParameterToString(itemLowstockCodeId)); // path parameter
            if (fileId != null) localVarPathParams.Add("fileId", Configuration.ApiClient.ParameterToString(fileId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteItemLowstockCodeFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a file for an itemLowstockCode. Deletes an existing itemLowstockCode file using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemLowstockCodeId">Id of the itemLowstockCode to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteItemLowstockCodeFileAsync (int? itemLowstockCodeId, int? fileId)
        {
             await DeleteItemLowstockCodeFileAsyncWithHttpInfo(itemLowstockCodeId, fileId);

        }

        /// <summary>
        /// Delete a file for an itemLowstockCode. Deletes an existing itemLowstockCode file using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemLowstockCodeId">Id of the itemLowstockCode to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteItemLowstockCodeFileAsyncWithHttpInfo (int? itemLowstockCodeId, int? fileId)
        {
            // verify the required parameter 'itemLowstockCodeId' is set
            if (itemLowstockCodeId == null)
                throw new ApiException(400, "Missing required parameter 'itemLowstockCodeId' when calling ItemLowstockCodeApi->DeleteItemLowstockCodeFile");
            // verify the required parameter 'fileId' is set
            if (fileId == null)
                throw new ApiException(400, "Missing required parameter 'fileId' when calling ItemLowstockCodeApi->DeleteItemLowstockCodeFile");

            var localVarPath = "/beta/itemLowstockCode/{itemLowstockCodeId}/file/{fileId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemLowstockCodeId != null) localVarPathParams.Add("itemLowstockCodeId", Configuration.ApiClient.ParameterToString(itemLowstockCodeId)); // path parameter
            if (fileId != null) localVarPathParams.Add("fileId", Configuration.ApiClient.ParameterToString(fileId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteItemLowstockCodeFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a tag for an itemLowstockCode. Deletes an existing itemLowstockCode tag using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemLowstockCodeId">Id of the itemLowstockCode to remove tag from</param>
        /// <param name="itemLowstockCodeTag">The tag to delete</param>
        /// <returns></returns>
        public void DeleteItemLowstockCodeTag (int? itemLowstockCodeId, string itemLowstockCodeTag)
        {
             DeleteItemLowstockCodeTagWithHttpInfo(itemLowstockCodeId, itemLowstockCodeTag);
        }

        /// <summary>
        /// Delete a tag for an itemLowstockCode. Deletes an existing itemLowstockCode tag using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemLowstockCodeId">Id of the itemLowstockCode to remove tag from</param>
        /// <param name="itemLowstockCodeTag">The tag to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteItemLowstockCodeTagWithHttpInfo (int? itemLowstockCodeId, string itemLowstockCodeTag)
        {
            // verify the required parameter 'itemLowstockCodeId' is set
            if (itemLowstockCodeId == null)
                throw new ApiException(400, "Missing required parameter 'itemLowstockCodeId' when calling ItemLowstockCodeApi->DeleteItemLowstockCodeTag");
            // verify the required parameter 'itemLowstockCodeTag' is set
            if (itemLowstockCodeTag == null)
                throw new ApiException(400, "Missing required parameter 'itemLowstockCodeTag' when calling ItemLowstockCodeApi->DeleteItemLowstockCodeTag");

            var localVarPath = "/beta/itemLowstockCode/{itemLowstockCodeId}/tag/{itemLowstockCodeTag}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemLowstockCodeId != null) localVarPathParams.Add("itemLowstockCodeId", Configuration.ApiClient.ParameterToString(itemLowstockCodeId)); // path parameter
            if (itemLowstockCodeTag != null) localVarPathParams.Add("itemLowstockCodeTag", Configuration.ApiClient.ParameterToString(itemLowstockCodeTag)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteItemLowstockCodeTag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a tag for an itemLowstockCode. Deletes an existing itemLowstockCode tag using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemLowstockCodeId">Id of the itemLowstockCode to remove tag from</param>
        /// <param name="itemLowstockCodeTag">The tag to delete</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteItemLowstockCodeTagAsync (int? itemLowstockCodeId, string itemLowstockCodeTag)
        {
             await DeleteItemLowstockCodeTagAsyncWithHttpInfo(itemLowstockCodeId, itemLowstockCodeTag);

        }

        /// <summary>
        /// Delete a tag for an itemLowstockCode. Deletes an existing itemLowstockCode tag using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemLowstockCodeId">Id of the itemLowstockCode to remove tag from</param>
        /// <param name="itemLowstockCodeTag">The tag to delete</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteItemLowstockCodeTagAsyncWithHttpInfo (int? itemLowstockCodeId, string itemLowstockCodeTag)
        {
            // verify the required parameter 'itemLowstockCodeId' is set
            if (itemLowstockCodeId == null)
                throw new ApiException(400, "Missing required parameter 'itemLowstockCodeId' when calling ItemLowstockCodeApi->DeleteItemLowstockCodeTag");
            // verify the required parameter 'itemLowstockCodeTag' is set
            if (itemLowstockCodeTag == null)
                throw new ApiException(400, "Missing required parameter 'itemLowstockCodeTag' when calling ItemLowstockCodeApi->DeleteItemLowstockCodeTag");

            var localVarPath = "/beta/itemLowstockCode/{itemLowstockCodeId}/tag/{itemLowstockCodeTag}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemLowstockCodeId != null) localVarPathParams.Add("itemLowstockCodeId", Configuration.ApiClient.ParameterToString(itemLowstockCodeId)); // path parameter
            if (itemLowstockCodeTag != null) localVarPathParams.Add("itemLowstockCodeTag", Configuration.ApiClient.ParameterToString(itemLowstockCodeTag)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteItemLowstockCodeTag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get a duplicated an itemLowstockCode by id Returns a duplicated itemLowstockCode identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemLowstockCodeId">Id of the itemLowstockCode to be duplicated.</param>
        /// <returns>ItemLowstockCode</returns>
        public ItemLowstockCode GetDuplicateItemLowstockCodeById (int? itemLowstockCodeId)
        {
             ApiResponse<ItemLowstockCode> localVarResponse = GetDuplicateItemLowstockCodeByIdWithHttpInfo(itemLowstockCodeId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a duplicated an itemLowstockCode by id Returns a duplicated itemLowstockCode identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemLowstockCodeId">Id of the itemLowstockCode to be duplicated.</param>
        /// <returns>ApiResponse of ItemLowstockCode</returns>
        public ApiResponse< ItemLowstockCode > GetDuplicateItemLowstockCodeByIdWithHttpInfo (int? itemLowstockCodeId)
        {
            // verify the required parameter 'itemLowstockCodeId' is set
            if (itemLowstockCodeId == null)
                throw new ApiException(400, "Missing required parameter 'itemLowstockCodeId' when calling ItemLowstockCodeApi->GetDuplicateItemLowstockCodeById");

            var localVarPath = "/beta/itemLowstockCode/duplicate/{itemLowstockCodeId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemLowstockCodeId != null) localVarPathParams.Add("itemLowstockCodeId", Configuration.ApiClient.ParameterToString(itemLowstockCodeId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDuplicateItemLowstockCodeById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ItemLowstockCode>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ItemLowstockCode) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ItemLowstockCode)));
        }

        /// <summary>
        /// Get a duplicated an itemLowstockCode by id Returns a duplicated itemLowstockCode identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemLowstockCodeId">Id of the itemLowstockCode to be duplicated.</param>
        /// <returns>Task of ItemLowstockCode</returns>
        public async System.Threading.Tasks.Task<ItemLowstockCode> GetDuplicateItemLowstockCodeByIdAsync (int? itemLowstockCodeId)
        {
             ApiResponse<ItemLowstockCode> localVarResponse = await GetDuplicateItemLowstockCodeByIdAsyncWithHttpInfo(itemLowstockCodeId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a duplicated an itemLowstockCode by id Returns a duplicated itemLowstockCode identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemLowstockCodeId">Id of the itemLowstockCode to be duplicated.</param>
        /// <returns>Task of ApiResponse (ItemLowstockCode)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ItemLowstockCode>> GetDuplicateItemLowstockCodeByIdAsyncWithHttpInfo (int? itemLowstockCodeId)
        {
            // verify the required parameter 'itemLowstockCodeId' is set
            if (itemLowstockCodeId == null)
                throw new ApiException(400, "Missing required parameter 'itemLowstockCodeId' when calling ItemLowstockCodeApi->GetDuplicateItemLowstockCodeById");

            var localVarPath = "/beta/itemLowstockCode/duplicate/{itemLowstockCodeId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemLowstockCodeId != null) localVarPathParams.Add("itemLowstockCodeId", Configuration.ApiClient.ParameterToString(itemLowstockCodeId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDuplicateItemLowstockCodeById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ItemLowstockCode>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ItemLowstockCode) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ItemLowstockCode)));
        }

        /// <summary>
        /// Search itemLowstockCodes by filter Returns the list of itemLowstockCodes that match the given filter.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>List&lt;ItemLowstockCode&gt;</returns>
        public List<ItemLowstockCode> GetItemLowstockCodeByFilter (string filter = null, int? page = null, int? limit = null, string sort = null)
        {
             ApiResponse<List<ItemLowstockCode>> localVarResponse = GetItemLowstockCodeByFilterWithHttpInfo(filter, page, limit, sort);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Search itemLowstockCodes by filter Returns the list of itemLowstockCodes that match the given filter.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>ApiResponse of List&lt;ItemLowstockCode&gt;</returns>
        public ApiResponse< List<ItemLowstockCode> > GetItemLowstockCodeByFilterWithHttpInfo (string filter = null, int? page = null, int? limit = null, string sort = null)
        {

            var localVarPath = "/beta/itemLowstockCode/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (filter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (page != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetItemLowstockCodeByFilter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ItemLowstockCode>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ItemLowstockCode>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ItemLowstockCode>)));
        }

        /// <summary>
        /// Search itemLowstockCodes by filter Returns the list of itemLowstockCodes that match the given filter.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>Task of List&lt;ItemLowstockCode&gt;</returns>
        public async System.Threading.Tasks.Task<List<ItemLowstockCode>> GetItemLowstockCodeByFilterAsync (string filter = null, int? page = null, int? limit = null, string sort = null)
        {
             ApiResponse<List<ItemLowstockCode>> localVarResponse = await GetItemLowstockCodeByFilterAsyncWithHttpInfo(filter, page, limit, sort);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Search itemLowstockCodes by filter Returns the list of itemLowstockCodes that match the given filter.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ItemLowstockCode&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ItemLowstockCode>>> GetItemLowstockCodeByFilterAsyncWithHttpInfo (string filter = null, int? page = null, int? limit = null, string sort = null)
        {

            var localVarPath = "/beta/itemLowstockCode/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (filter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (page != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetItemLowstockCodeByFilter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ItemLowstockCode>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ItemLowstockCode>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ItemLowstockCode>)));
        }

        /// <summary>
        /// Get an itemLowstockCode by id Returns the itemLowstockCode identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemLowstockCodeId">Id of the itemLowstockCode to be returned.</param>
        /// <returns>ItemLowstockCode</returns>
        public ItemLowstockCode GetItemLowstockCodeById (int? itemLowstockCodeId)
        {
             ApiResponse<ItemLowstockCode> localVarResponse = GetItemLowstockCodeByIdWithHttpInfo(itemLowstockCodeId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get an itemLowstockCode by id Returns the itemLowstockCode identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemLowstockCodeId">Id of the itemLowstockCode to be returned.</param>
        /// <returns>ApiResponse of ItemLowstockCode</returns>
        public ApiResponse< ItemLowstockCode > GetItemLowstockCodeByIdWithHttpInfo (int? itemLowstockCodeId)
        {
            // verify the required parameter 'itemLowstockCodeId' is set
            if (itemLowstockCodeId == null)
                throw new ApiException(400, "Missing required parameter 'itemLowstockCodeId' when calling ItemLowstockCodeApi->GetItemLowstockCodeById");

            var localVarPath = "/beta/itemLowstockCode/{itemLowstockCodeId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemLowstockCodeId != null) localVarPathParams.Add("itemLowstockCodeId", Configuration.ApiClient.ParameterToString(itemLowstockCodeId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetItemLowstockCodeById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ItemLowstockCode>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ItemLowstockCode) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ItemLowstockCode)));
        }

        /// <summary>
        /// Get an itemLowstockCode by id Returns the itemLowstockCode identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemLowstockCodeId">Id of the itemLowstockCode to be returned.</param>
        /// <returns>Task of ItemLowstockCode</returns>
        public async System.Threading.Tasks.Task<ItemLowstockCode> GetItemLowstockCodeByIdAsync (int? itemLowstockCodeId)
        {
             ApiResponse<ItemLowstockCode> localVarResponse = await GetItemLowstockCodeByIdAsyncWithHttpInfo(itemLowstockCodeId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get an itemLowstockCode by id Returns the itemLowstockCode identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemLowstockCodeId">Id of the itemLowstockCode to be returned.</param>
        /// <returns>Task of ApiResponse (ItemLowstockCode)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ItemLowstockCode>> GetItemLowstockCodeByIdAsyncWithHttpInfo (int? itemLowstockCodeId)
        {
            // verify the required parameter 'itemLowstockCodeId' is set
            if (itemLowstockCodeId == null)
                throw new ApiException(400, "Missing required parameter 'itemLowstockCodeId' when calling ItemLowstockCodeApi->GetItemLowstockCodeById");

            var localVarPath = "/beta/itemLowstockCode/{itemLowstockCodeId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemLowstockCodeId != null) localVarPathParams.Add("itemLowstockCodeId", Configuration.ApiClient.ParameterToString(itemLowstockCodeId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetItemLowstockCodeById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ItemLowstockCode>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ItemLowstockCode) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ItemLowstockCode)));
        }

        /// <summary>
        /// Get the files for an itemLowstockCode. Get all existing itemLowstockCode files.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemLowstockCodeId">Id of the itemLowstockCode to get files for</param>
        /// <returns></returns>
        public void GetItemLowstockCodeFiles (int? itemLowstockCodeId)
        {
             GetItemLowstockCodeFilesWithHttpInfo(itemLowstockCodeId);
        }

        /// <summary>
        /// Get the files for an itemLowstockCode. Get all existing itemLowstockCode files.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemLowstockCodeId">Id of the itemLowstockCode to get files for</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GetItemLowstockCodeFilesWithHttpInfo (int? itemLowstockCodeId)
        {
            // verify the required parameter 'itemLowstockCodeId' is set
            if (itemLowstockCodeId == null)
                throw new ApiException(400, "Missing required parameter 'itemLowstockCodeId' when calling ItemLowstockCodeApi->GetItemLowstockCodeFiles");

            var localVarPath = "/beta/itemLowstockCode/{itemLowstockCodeId}/file";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemLowstockCodeId != null) localVarPathParams.Add("itemLowstockCodeId", Configuration.ApiClient.ParameterToString(itemLowstockCodeId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetItemLowstockCodeFiles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get the files for an itemLowstockCode. Get all existing itemLowstockCode files.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemLowstockCodeId">Id of the itemLowstockCode to get files for</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetItemLowstockCodeFilesAsync (int? itemLowstockCodeId)
        {
             await GetItemLowstockCodeFilesAsyncWithHttpInfo(itemLowstockCodeId);

        }

        /// <summary>
        /// Get the files for an itemLowstockCode. Get all existing itemLowstockCode files.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemLowstockCodeId">Id of the itemLowstockCode to get files for</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetItemLowstockCodeFilesAsyncWithHttpInfo (int? itemLowstockCodeId)
        {
            // verify the required parameter 'itemLowstockCodeId' is set
            if (itemLowstockCodeId == null)
                throw new ApiException(400, "Missing required parameter 'itemLowstockCodeId' when calling ItemLowstockCodeApi->GetItemLowstockCodeFiles");

            var localVarPath = "/beta/itemLowstockCode/{itemLowstockCodeId}/file";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemLowstockCodeId != null) localVarPathParams.Add("itemLowstockCodeId", Configuration.ApiClient.ParameterToString(itemLowstockCodeId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetItemLowstockCodeFiles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get the tags for an itemLowstockCode. Get all existing itemLowstockCode tags.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemLowstockCodeId">Id of the itemLowstockCode to get tags for</param>
        /// <returns></returns>
        public void GetItemLowstockCodeTags (int? itemLowstockCodeId)
        {
             GetItemLowstockCodeTagsWithHttpInfo(itemLowstockCodeId);
        }

        /// <summary>
        /// Get the tags for an itemLowstockCode. Get all existing itemLowstockCode tags.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemLowstockCodeId">Id of the itemLowstockCode to get tags for</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GetItemLowstockCodeTagsWithHttpInfo (int? itemLowstockCodeId)
        {
            // verify the required parameter 'itemLowstockCodeId' is set
            if (itemLowstockCodeId == null)
                throw new ApiException(400, "Missing required parameter 'itemLowstockCodeId' when calling ItemLowstockCodeApi->GetItemLowstockCodeTags");

            var localVarPath = "/beta/itemLowstockCode/{itemLowstockCodeId}/tag";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemLowstockCodeId != null) localVarPathParams.Add("itemLowstockCodeId", Configuration.ApiClient.ParameterToString(itemLowstockCodeId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetItemLowstockCodeTags", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get the tags for an itemLowstockCode. Get all existing itemLowstockCode tags.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemLowstockCodeId">Id of the itemLowstockCode to get tags for</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetItemLowstockCodeTagsAsync (int? itemLowstockCodeId)
        {
             await GetItemLowstockCodeTagsAsyncWithHttpInfo(itemLowstockCodeId);

        }

        /// <summary>
        /// Get the tags for an itemLowstockCode. Get all existing itemLowstockCode tags.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemLowstockCodeId">Id of the itemLowstockCode to get tags for</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetItemLowstockCodeTagsAsyncWithHttpInfo (int? itemLowstockCodeId)
        {
            // verify the required parameter 'itemLowstockCodeId' is set
            if (itemLowstockCodeId == null)
                throw new ApiException(400, "Missing required parameter 'itemLowstockCodeId' when calling ItemLowstockCodeApi->GetItemLowstockCodeTags");

            var localVarPath = "/beta/itemLowstockCode/{itemLowstockCodeId}/tag";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemLowstockCodeId != null) localVarPathParams.Add("itemLowstockCodeId", Configuration.ApiClient.ParameterToString(itemLowstockCodeId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetItemLowstockCodeTags", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update an itemLowstockCode Updates an existing itemLowstockCode using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">ItemLowstockCode to be updated.</param>
        /// <returns></returns>
        public void UpdateItemLowstockCode (ItemLowstockCode body)
        {
             UpdateItemLowstockCodeWithHttpInfo(body);
        }

        /// <summary>
        /// Update an itemLowstockCode Updates an existing itemLowstockCode using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">ItemLowstockCode to be updated.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateItemLowstockCodeWithHttpInfo (ItemLowstockCode body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ItemLowstockCodeApi->UpdateItemLowstockCode");

            var localVarPath = "/beta/itemLowstockCode";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateItemLowstockCode", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update an itemLowstockCode Updates an existing itemLowstockCode using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">ItemLowstockCode to be updated.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateItemLowstockCodeAsync (ItemLowstockCode body)
        {
             await UpdateItemLowstockCodeAsyncWithHttpInfo(body);

        }

        /// <summary>
        /// Update an itemLowstockCode Updates an existing itemLowstockCode using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">ItemLowstockCode to be updated.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateItemLowstockCodeAsyncWithHttpInfo (ItemLowstockCode body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ItemLowstockCodeApi->UpdateItemLowstockCode");

            var localVarPath = "/beta/itemLowstockCode";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateItemLowstockCode", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

    }
}
