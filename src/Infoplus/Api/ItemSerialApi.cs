/* 
 * Infoplus API
 *
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Infoplus.Client;
using Infoplus.Model;

namespace Infoplus.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IItemSerialApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create an itemSerial
        /// </summary>
        /// <remarks>
        /// Inserts a new itemSerial using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">ItemSerial to be inserted.</param>
        /// <returns>ItemSerial</returns>
        ItemSerial AddItemSerial (ItemSerial body);

        /// <summary>
        /// Create an itemSerial
        /// </summary>
        /// <remarks>
        /// Inserts a new itemSerial using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">ItemSerial to be inserted.</param>
        /// <returns>ApiResponse of ItemSerial</returns>
        ApiResponse<ItemSerial> AddItemSerialWithHttpInfo (ItemSerial body);
        /// <summary>
        /// Add new audit for an itemSerial
        /// </summary>
        /// <remarks>
        /// Adds an audit to an existing itemSerial.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemSerialId">Id of the itemSerial to add an audit to</param>
        /// <param name="itemSerialAudit">The audit to add</param>
        /// <returns></returns>
        void AddItemSerialAudit (int? itemSerialId, string itemSerialAudit);

        /// <summary>
        /// Add new audit for an itemSerial
        /// </summary>
        /// <remarks>
        /// Adds an audit to an existing itemSerial.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemSerialId">Id of the itemSerial to add an audit to</param>
        /// <param name="itemSerialAudit">The audit to add</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddItemSerialAuditWithHttpInfo (int? itemSerialId, string itemSerialAudit);
        /// <summary>
        /// Attach a file to an itemSerial
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing itemSerial.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemSerialId">Id of the itemSerial to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns></returns>
        void AddItemSerialFile (int? itemSerialId, string fileName);

        /// <summary>
        /// Attach a file to an itemSerial
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing itemSerial.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemSerialId">Id of the itemSerial to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddItemSerialFileWithHttpInfo (int? itemSerialId, string fileName);
        /// <summary>
        /// Attach a file to an itemSerial by URL.
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing itemSerial by URL.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="itemSerialId">Id of the itemSerial to add an file to</param>
        /// <returns></returns>
        void AddItemSerialFileByURL (RecordFile body, int? itemSerialId);

        /// <summary>
        /// Attach a file to an itemSerial by URL.
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing itemSerial by URL.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="itemSerialId">Id of the itemSerial to add an file to</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddItemSerialFileByURLWithHttpInfo (RecordFile body, int? itemSerialId);
        /// <summary>
        /// Add new tags for an itemSerial.
        /// </summary>
        /// <remarks>
        /// Adds a tag to an existing itemSerial.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemSerialId">Id of the itemSerial to add a tag to</param>
        /// <param name="itemSerialTag">The tag to add</param>
        /// <returns></returns>
        void AddItemSerialTag (int? itemSerialId, string itemSerialTag);

        /// <summary>
        /// Add new tags for an itemSerial.
        /// </summary>
        /// <remarks>
        /// Adds a tag to an existing itemSerial.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemSerialId">Id of the itemSerial to add a tag to</param>
        /// <param name="itemSerialTag">The tag to add</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddItemSerialTagWithHttpInfo (int? itemSerialId, string itemSerialTag);
        /// <summary>
        /// Delete an itemSerial
        /// </summary>
        /// <remarks>
        /// Deletes the itemSerial identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemSerialId">Id of the itemSerial to be deleted.</param>
        /// <returns></returns>
        void DeleteItemSerial (int? itemSerialId);

        /// <summary>
        /// Delete an itemSerial
        /// </summary>
        /// <remarks>
        /// Deletes the itemSerial identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemSerialId">Id of the itemSerial to be deleted.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteItemSerialWithHttpInfo (int? itemSerialId);
        /// <summary>
        /// Delete a file for an itemSerial.
        /// </summary>
        /// <remarks>
        /// Deletes an existing itemSerial file using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemSerialId">Id of the itemSerial to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns></returns>
        void DeleteItemSerialFile (int? itemSerialId, int? fileId);

        /// <summary>
        /// Delete a file for an itemSerial.
        /// </summary>
        /// <remarks>
        /// Deletes an existing itemSerial file using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemSerialId">Id of the itemSerial to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteItemSerialFileWithHttpInfo (int? itemSerialId, int? fileId);
        /// <summary>
        /// Delete a tag for an itemSerial.
        /// </summary>
        /// <remarks>
        /// Deletes an existing itemSerial tag using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemSerialId">Id of the itemSerial to remove tag from</param>
        /// <param name="itemSerialTag">The tag to delete</param>
        /// <returns></returns>
        void DeleteItemSerialTag (int? itemSerialId, string itemSerialTag);

        /// <summary>
        /// Delete a tag for an itemSerial.
        /// </summary>
        /// <remarks>
        /// Deletes an existing itemSerial tag using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemSerialId">Id of the itemSerial to remove tag from</param>
        /// <param name="itemSerialTag">The tag to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteItemSerialTagWithHttpInfo (int? itemSerialId, string itemSerialTag);
        /// <summary>
        /// Get a duplicated an itemSerial by id
        /// </summary>
        /// <remarks>
        /// Returns a duplicated itemSerial identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemSerialId">Id of the itemSerial to be duplicated.</param>
        /// <returns>ItemSerial</returns>
        ItemSerial GetDuplicateItemSerialById (int? itemSerialId);

        /// <summary>
        /// Get a duplicated an itemSerial by id
        /// </summary>
        /// <remarks>
        /// Returns a duplicated itemSerial identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemSerialId">Id of the itemSerial to be duplicated.</param>
        /// <returns>ApiResponse of ItemSerial</returns>
        ApiResponse<ItemSerial> GetDuplicateItemSerialByIdWithHttpInfo (int? itemSerialId);
        /// <summary>
        /// Search itemSerials by filter
        /// </summary>
        /// <remarks>
        /// Returns the list of itemSerials that match the given filter.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>List&lt;ItemSerial&gt;</returns>
        List<ItemSerial> GetItemSerialByFilter (string filter = null, int? page = null, int? limit = null, string sort = null);

        /// <summary>
        /// Search itemSerials by filter
        /// </summary>
        /// <remarks>
        /// Returns the list of itemSerials that match the given filter.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>ApiResponse of List&lt;ItemSerial&gt;</returns>
        ApiResponse<List<ItemSerial>> GetItemSerialByFilterWithHttpInfo (string filter = null, int? page = null, int? limit = null, string sort = null);
        /// <summary>
        /// Get an itemSerial by id
        /// </summary>
        /// <remarks>
        /// Returns the itemSerial identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemSerialId">Id of the itemSerial to be returned.</param>
        /// <returns>ItemSerial</returns>
        ItemSerial GetItemSerialById (int? itemSerialId);

        /// <summary>
        /// Get an itemSerial by id
        /// </summary>
        /// <remarks>
        /// Returns the itemSerial identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemSerialId">Id of the itemSerial to be returned.</param>
        /// <returns>ApiResponse of ItemSerial</returns>
        ApiResponse<ItemSerial> GetItemSerialByIdWithHttpInfo (int? itemSerialId);
        /// <summary>
        /// Get the files for an itemSerial.
        /// </summary>
        /// <remarks>
        /// Get all existing itemSerial files.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemSerialId">Id of the itemSerial to get files for</param>
        /// <returns></returns>
        void GetItemSerialFiles (int? itemSerialId);

        /// <summary>
        /// Get the files for an itemSerial.
        /// </summary>
        /// <remarks>
        /// Get all existing itemSerial files.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemSerialId">Id of the itemSerial to get files for</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetItemSerialFilesWithHttpInfo (int? itemSerialId);
        /// <summary>
        /// Get the tags for an itemSerial.
        /// </summary>
        /// <remarks>
        /// Get all existing itemSerial tags.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemSerialId">Id of the itemSerial to get tags for</param>
        /// <returns></returns>
        void GetItemSerialTags (int? itemSerialId);

        /// <summary>
        /// Get the tags for an itemSerial.
        /// </summary>
        /// <remarks>
        /// Get all existing itemSerial tags.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemSerialId">Id of the itemSerial to get tags for</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetItemSerialTagsWithHttpInfo (int? itemSerialId);
        /// <summary>
        /// Update an itemSerial
        /// </summary>
        /// <remarks>
        /// Updates an existing itemSerial using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">ItemSerial to be updated.</param>
        /// <returns></returns>
        void UpdateItemSerial (ItemSerial body);

        /// <summary>
        /// Update an itemSerial
        /// </summary>
        /// <remarks>
        /// Updates an existing itemSerial using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">ItemSerial to be updated.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateItemSerialWithHttpInfo (ItemSerial body);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create an itemSerial
        /// </summary>
        /// <remarks>
        /// Inserts a new itemSerial using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">ItemSerial to be inserted.</param>
        /// <returns>Task of ItemSerial</returns>
        System.Threading.Tasks.Task<ItemSerial> AddItemSerialAsync (ItemSerial body);

        /// <summary>
        /// Create an itemSerial
        /// </summary>
        /// <remarks>
        /// Inserts a new itemSerial using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">ItemSerial to be inserted.</param>
        /// <returns>Task of ApiResponse (ItemSerial)</returns>
        System.Threading.Tasks.Task<ApiResponse<ItemSerial>> AddItemSerialAsyncWithHttpInfo (ItemSerial body);
        /// <summary>
        /// Add new audit for an itemSerial
        /// </summary>
        /// <remarks>
        /// Adds an audit to an existing itemSerial.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemSerialId">Id of the itemSerial to add an audit to</param>
        /// <param name="itemSerialAudit">The audit to add</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddItemSerialAuditAsync (int? itemSerialId, string itemSerialAudit);

        /// <summary>
        /// Add new audit for an itemSerial
        /// </summary>
        /// <remarks>
        /// Adds an audit to an existing itemSerial.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemSerialId">Id of the itemSerial to add an audit to</param>
        /// <param name="itemSerialAudit">The audit to add</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddItemSerialAuditAsyncWithHttpInfo (int? itemSerialId, string itemSerialAudit);
        /// <summary>
        /// Attach a file to an itemSerial
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing itemSerial.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemSerialId">Id of the itemSerial to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddItemSerialFileAsync (int? itemSerialId, string fileName);

        /// <summary>
        /// Attach a file to an itemSerial
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing itemSerial.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemSerialId">Id of the itemSerial to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddItemSerialFileAsyncWithHttpInfo (int? itemSerialId, string fileName);
        /// <summary>
        /// Attach a file to an itemSerial by URL.
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing itemSerial by URL.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="itemSerialId">Id of the itemSerial to add an file to</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddItemSerialFileByURLAsync (RecordFile body, int? itemSerialId);

        /// <summary>
        /// Attach a file to an itemSerial by URL.
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing itemSerial by URL.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="itemSerialId">Id of the itemSerial to add an file to</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddItemSerialFileByURLAsyncWithHttpInfo (RecordFile body, int? itemSerialId);
        /// <summary>
        /// Add new tags for an itemSerial.
        /// </summary>
        /// <remarks>
        /// Adds a tag to an existing itemSerial.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemSerialId">Id of the itemSerial to add a tag to</param>
        /// <param name="itemSerialTag">The tag to add</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddItemSerialTagAsync (int? itemSerialId, string itemSerialTag);

        /// <summary>
        /// Add new tags for an itemSerial.
        /// </summary>
        /// <remarks>
        /// Adds a tag to an existing itemSerial.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemSerialId">Id of the itemSerial to add a tag to</param>
        /// <param name="itemSerialTag">The tag to add</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddItemSerialTagAsyncWithHttpInfo (int? itemSerialId, string itemSerialTag);
        /// <summary>
        /// Delete an itemSerial
        /// </summary>
        /// <remarks>
        /// Deletes the itemSerial identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemSerialId">Id of the itemSerial to be deleted.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteItemSerialAsync (int? itemSerialId);

        /// <summary>
        /// Delete an itemSerial
        /// </summary>
        /// <remarks>
        /// Deletes the itemSerial identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemSerialId">Id of the itemSerial to be deleted.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteItemSerialAsyncWithHttpInfo (int? itemSerialId);
        /// <summary>
        /// Delete a file for an itemSerial.
        /// </summary>
        /// <remarks>
        /// Deletes an existing itemSerial file using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemSerialId">Id of the itemSerial to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteItemSerialFileAsync (int? itemSerialId, int? fileId);

        /// <summary>
        /// Delete a file for an itemSerial.
        /// </summary>
        /// <remarks>
        /// Deletes an existing itemSerial file using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemSerialId">Id of the itemSerial to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteItemSerialFileAsyncWithHttpInfo (int? itemSerialId, int? fileId);
        /// <summary>
        /// Delete a tag for an itemSerial.
        /// </summary>
        /// <remarks>
        /// Deletes an existing itemSerial tag using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemSerialId">Id of the itemSerial to remove tag from</param>
        /// <param name="itemSerialTag">The tag to delete</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteItemSerialTagAsync (int? itemSerialId, string itemSerialTag);

        /// <summary>
        /// Delete a tag for an itemSerial.
        /// </summary>
        /// <remarks>
        /// Deletes an existing itemSerial tag using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemSerialId">Id of the itemSerial to remove tag from</param>
        /// <param name="itemSerialTag">The tag to delete</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteItemSerialTagAsyncWithHttpInfo (int? itemSerialId, string itemSerialTag);
        /// <summary>
        /// Get a duplicated an itemSerial by id
        /// </summary>
        /// <remarks>
        /// Returns a duplicated itemSerial identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemSerialId">Id of the itemSerial to be duplicated.</param>
        /// <returns>Task of ItemSerial</returns>
        System.Threading.Tasks.Task<ItemSerial> GetDuplicateItemSerialByIdAsync (int? itemSerialId);

        /// <summary>
        /// Get a duplicated an itemSerial by id
        /// </summary>
        /// <remarks>
        /// Returns a duplicated itemSerial identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemSerialId">Id of the itemSerial to be duplicated.</param>
        /// <returns>Task of ApiResponse (ItemSerial)</returns>
        System.Threading.Tasks.Task<ApiResponse<ItemSerial>> GetDuplicateItemSerialByIdAsyncWithHttpInfo (int? itemSerialId);
        /// <summary>
        /// Search itemSerials by filter
        /// </summary>
        /// <remarks>
        /// Returns the list of itemSerials that match the given filter.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>Task of List&lt;ItemSerial&gt;</returns>
        System.Threading.Tasks.Task<List<ItemSerial>> GetItemSerialByFilterAsync (string filter = null, int? page = null, int? limit = null, string sort = null);

        /// <summary>
        /// Search itemSerials by filter
        /// </summary>
        /// <remarks>
        /// Returns the list of itemSerials that match the given filter.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ItemSerial&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ItemSerial>>> GetItemSerialByFilterAsyncWithHttpInfo (string filter = null, int? page = null, int? limit = null, string sort = null);
        /// <summary>
        /// Get an itemSerial by id
        /// </summary>
        /// <remarks>
        /// Returns the itemSerial identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemSerialId">Id of the itemSerial to be returned.</param>
        /// <returns>Task of ItemSerial</returns>
        System.Threading.Tasks.Task<ItemSerial> GetItemSerialByIdAsync (int? itemSerialId);

        /// <summary>
        /// Get an itemSerial by id
        /// </summary>
        /// <remarks>
        /// Returns the itemSerial identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemSerialId">Id of the itemSerial to be returned.</param>
        /// <returns>Task of ApiResponse (ItemSerial)</returns>
        System.Threading.Tasks.Task<ApiResponse<ItemSerial>> GetItemSerialByIdAsyncWithHttpInfo (int? itemSerialId);
        /// <summary>
        /// Get the files for an itemSerial.
        /// </summary>
        /// <remarks>
        /// Get all existing itemSerial files.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemSerialId">Id of the itemSerial to get files for</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetItemSerialFilesAsync (int? itemSerialId);

        /// <summary>
        /// Get the files for an itemSerial.
        /// </summary>
        /// <remarks>
        /// Get all existing itemSerial files.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemSerialId">Id of the itemSerial to get files for</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetItemSerialFilesAsyncWithHttpInfo (int? itemSerialId);
        /// <summary>
        /// Get the tags for an itemSerial.
        /// </summary>
        /// <remarks>
        /// Get all existing itemSerial tags.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemSerialId">Id of the itemSerial to get tags for</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetItemSerialTagsAsync (int? itemSerialId);

        /// <summary>
        /// Get the tags for an itemSerial.
        /// </summary>
        /// <remarks>
        /// Get all existing itemSerial tags.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemSerialId">Id of the itemSerial to get tags for</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetItemSerialTagsAsyncWithHttpInfo (int? itemSerialId);
        /// <summary>
        /// Update an itemSerial
        /// </summary>
        /// <remarks>
        /// Updates an existing itemSerial using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">ItemSerial to be updated.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateItemSerialAsync (ItemSerial body);

        /// <summary>
        /// Update an itemSerial
        /// </summary>
        /// <remarks>
        /// Updates an existing itemSerial using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">ItemSerial to be updated.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateItemSerialAsyncWithHttpInfo (ItemSerial body);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ItemSerialApi : IItemSerialApi
    {
        private Infoplus.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ItemSerialApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ItemSerialApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = Infoplus.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ItemSerialApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ItemSerialApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Infoplus.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Infoplus.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create an itemSerial Inserts a new itemSerial using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">ItemSerial to be inserted.</param>
        /// <returns>ItemSerial</returns>
        public ItemSerial AddItemSerial (ItemSerial body)
        {
             ApiResponse<ItemSerial> localVarResponse = AddItemSerialWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create an itemSerial Inserts a new itemSerial using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">ItemSerial to be inserted.</param>
        /// <returns>ApiResponse of ItemSerial</returns>
        public ApiResponse< ItemSerial > AddItemSerialWithHttpInfo (ItemSerial body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ItemSerialApi->AddItemSerial");

            var localVarPath = "/beta/itemSerial";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddItemSerial", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ItemSerial>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ItemSerial) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ItemSerial)));
        }

        /// <summary>
        /// Create an itemSerial Inserts a new itemSerial using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">ItemSerial to be inserted.</param>
        /// <returns>Task of ItemSerial</returns>
        public async System.Threading.Tasks.Task<ItemSerial> AddItemSerialAsync (ItemSerial body)
        {
             ApiResponse<ItemSerial> localVarResponse = await AddItemSerialAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create an itemSerial Inserts a new itemSerial using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">ItemSerial to be inserted.</param>
        /// <returns>Task of ApiResponse (ItemSerial)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ItemSerial>> AddItemSerialAsyncWithHttpInfo (ItemSerial body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ItemSerialApi->AddItemSerial");

            var localVarPath = "/beta/itemSerial";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddItemSerial", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ItemSerial>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ItemSerial) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ItemSerial)));
        }

        /// <summary>
        /// Add new audit for an itemSerial Adds an audit to an existing itemSerial.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemSerialId">Id of the itemSerial to add an audit to</param>
        /// <param name="itemSerialAudit">The audit to add</param>
        /// <returns></returns>
        public void AddItemSerialAudit (int? itemSerialId, string itemSerialAudit)
        {
             AddItemSerialAuditWithHttpInfo(itemSerialId, itemSerialAudit);
        }

        /// <summary>
        /// Add new audit for an itemSerial Adds an audit to an existing itemSerial.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemSerialId">Id of the itemSerial to add an audit to</param>
        /// <param name="itemSerialAudit">The audit to add</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AddItemSerialAuditWithHttpInfo (int? itemSerialId, string itemSerialAudit)
        {
            // verify the required parameter 'itemSerialId' is set
            if (itemSerialId == null)
                throw new ApiException(400, "Missing required parameter 'itemSerialId' when calling ItemSerialApi->AddItemSerialAudit");
            // verify the required parameter 'itemSerialAudit' is set
            if (itemSerialAudit == null)
                throw new ApiException(400, "Missing required parameter 'itemSerialAudit' when calling ItemSerialApi->AddItemSerialAudit");

            var localVarPath = "/beta/itemSerial/{itemSerialId}/audit/{itemSerialAudit}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemSerialId != null) localVarPathParams.Add("itemSerialId", Configuration.ApiClient.ParameterToString(itemSerialId)); // path parameter
            if (itemSerialAudit != null) localVarPathParams.Add("itemSerialAudit", Configuration.ApiClient.ParameterToString(itemSerialAudit)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddItemSerialAudit", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Add new audit for an itemSerial Adds an audit to an existing itemSerial.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemSerialId">Id of the itemSerial to add an audit to</param>
        /// <param name="itemSerialAudit">The audit to add</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddItemSerialAuditAsync (int? itemSerialId, string itemSerialAudit)
        {
             await AddItemSerialAuditAsyncWithHttpInfo(itemSerialId, itemSerialAudit);

        }

        /// <summary>
        /// Add new audit for an itemSerial Adds an audit to an existing itemSerial.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemSerialId">Id of the itemSerial to add an audit to</param>
        /// <param name="itemSerialAudit">The audit to add</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddItemSerialAuditAsyncWithHttpInfo (int? itemSerialId, string itemSerialAudit)
        {
            // verify the required parameter 'itemSerialId' is set
            if (itemSerialId == null)
                throw new ApiException(400, "Missing required parameter 'itemSerialId' when calling ItemSerialApi->AddItemSerialAudit");
            // verify the required parameter 'itemSerialAudit' is set
            if (itemSerialAudit == null)
                throw new ApiException(400, "Missing required parameter 'itemSerialAudit' when calling ItemSerialApi->AddItemSerialAudit");

            var localVarPath = "/beta/itemSerial/{itemSerialId}/audit/{itemSerialAudit}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemSerialId != null) localVarPathParams.Add("itemSerialId", Configuration.ApiClient.ParameterToString(itemSerialId)); // path parameter
            if (itemSerialAudit != null) localVarPathParams.Add("itemSerialAudit", Configuration.ApiClient.ParameterToString(itemSerialAudit)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddItemSerialAudit", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Attach a file to an itemSerial Adds a file to an existing itemSerial.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemSerialId">Id of the itemSerial to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns></returns>
        public void AddItemSerialFile (int? itemSerialId, string fileName)
        {
             AddItemSerialFileWithHttpInfo(itemSerialId, fileName);
        }

        /// <summary>
        /// Attach a file to an itemSerial Adds a file to an existing itemSerial.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemSerialId">Id of the itemSerial to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AddItemSerialFileWithHttpInfo (int? itemSerialId, string fileName)
        {
            // verify the required parameter 'itemSerialId' is set
            if (itemSerialId == null)
                throw new ApiException(400, "Missing required parameter 'itemSerialId' when calling ItemSerialApi->AddItemSerialFile");
            // verify the required parameter 'fileName' is set
            if (fileName == null)
                throw new ApiException(400, "Missing required parameter 'fileName' when calling ItemSerialApi->AddItemSerialFile");

            var localVarPath = "/beta/itemSerial/{itemSerialId}/file/{fileName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemSerialId != null) localVarPathParams.Add("itemSerialId", Configuration.ApiClient.ParameterToString(itemSerialId)); // path parameter
            if (fileName != null) localVarPathParams.Add("fileName", Configuration.ApiClient.ParameterToString(fileName)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddItemSerialFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Attach a file to an itemSerial Adds a file to an existing itemSerial.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemSerialId">Id of the itemSerial to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddItemSerialFileAsync (int? itemSerialId, string fileName)
        {
             await AddItemSerialFileAsyncWithHttpInfo(itemSerialId, fileName);

        }

        /// <summary>
        /// Attach a file to an itemSerial Adds a file to an existing itemSerial.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemSerialId">Id of the itemSerial to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddItemSerialFileAsyncWithHttpInfo (int? itemSerialId, string fileName)
        {
            // verify the required parameter 'itemSerialId' is set
            if (itemSerialId == null)
                throw new ApiException(400, "Missing required parameter 'itemSerialId' when calling ItemSerialApi->AddItemSerialFile");
            // verify the required parameter 'fileName' is set
            if (fileName == null)
                throw new ApiException(400, "Missing required parameter 'fileName' when calling ItemSerialApi->AddItemSerialFile");

            var localVarPath = "/beta/itemSerial/{itemSerialId}/file/{fileName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemSerialId != null) localVarPathParams.Add("itemSerialId", Configuration.ApiClient.ParameterToString(itemSerialId)); // path parameter
            if (fileName != null) localVarPathParams.Add("fileName", Configuration.ApiClient.ParameterToString(fileName)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddItemSerialFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Attach a file to an itemSerial by URL. Adds a file to an existing itemSerial by URL.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="itemSerialId">Id of the itemSerial to add an file to</param>
        /// <returns></returns>
        public void AddItemSerialFileByURL (RecordFile body, int? itemSerialId)
        {
             AddItemSerialFileByURLWithHttpInfo(body, itemSerialId);
        }

        /// <summary>
        /// Attach a file to an itemSerial by URL. Adds a file to an existing itemSerial by URL.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="itemSerialId">Id of the itemSerial to add an file to</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AddItemSerialFileByURLWithHttpInfo (RecordFile body, int? itemSerialId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ItemSerialApi->AddItemSerialFileByURL");
            // verify the required parameter 'itemSerialId' is set
            if (itemSerialId == null)
                throw new ApiException(400, "Missing required parameter 'itemSerialId' when calling ItemSerialApi->AddItemSerialFileByURL");

            var localVarPath = "/beta/itemSerial/{itemSerialId}/file";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemSerialId != null) localVarPathParams.Add("itemSerialId", Configuration.ApiClient.ParameterToString(itemSerialId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddItemSerialFileByURL", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Attach a file to an itemSerial by URL. Adds a file to an existing itemSerial by URL.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="itemSerialId">Id of the itemSerial to add an file to</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddItemSerialFileByURLAsync (RecordFile body, int? itemSerialId)
        {
             await AddItemSerialFileByURLAsyncWithHttpInfo(body, itemSerialId);

        }

        /// <summary>
        /// Attach a file to an itemSerial by URL. Adds a file to an existing itemSerial by URL.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="itemSerialId">Id of the itemSerial to add an file to</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddItemSerialFileByURLAsyncWithHttpInfo (RecordFile body, int? itemSerialId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ItemSerialApi->AddItemSerialFileByURL");
            // verify the required parameter 'itemSerialId' is set
            if (itemSerialId == null)
                throw new ApiException(400, "Missing required parameter 'itemSerialId' when calling ItemSerialApi->AddItemSerialFileByURL");

            var localVarPath = "/beta/itemSerial/{itemSerialId}/file";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemSerialId != null) localVarPathParams.Add("itemSerialId", Configuration.ApiClient.ParameterToString(itemSerialId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddItemSerialFileByURL", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Add new tags for an itemSerial. Adds a tag to an existing itemSerial.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemSerialId">Id of the itemSerial to add a tag to</param>
        /// <param name="itemSerialTag">The tag to add</param>
        /// <returns></returns>
        public void AddItemSerialTag (int? itemSerialId, string itemSerialTag)
        {
             AddItemSerialTagWithHttpInfo(itemSerialId, itemSerialTag);
        }

        /// <summary>
        /// Add new tags for an itemSerial. Adds a tag to an existing itemSerial.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemSerialId">Id of the itemSerial to add a tag to</param>
        /// <param name="itemSerialTag">The tag to add</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AddItemSerialTagWithHttpInfo (int? itemSerialId, string itemSerialTag)
        {
            // verify the required parameter 'itemSerialId' is set
            if (itemSerialId == null)
                throw new ApiException(400, "Missing required parameter 'itemSerialId' when calling ItemSerialApi->AddItemSerialTag");
            // verify the required parameter 'itemSerialTag' is set
            if (itemSerialTag == null)
                throw new ApiException(400, "Missing required parameter 'itemSerialTag' when calling ItemSerialApi->AddItemSerialTag");

            var localVarPath = "/beta/itemSerial/{itemSerialId}/tag/{itemSerialTag}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemSerialId != null) localVarPathParams.Add("itemSerialId", Configuration.ApiClient.ParameterToString(itemSerialId)); // path parameter
            if (itemSerialTag != null) localVarPathParams.Add("itemSerialTag", Configuration.ApiClient.ParameterToString(itemSerialTag)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddItemSerialTag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Add new tags for an itemSerial. Adds a tag to an existing itemSerial.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemSerialId">Id of the itemSerial to add a tag to</param>
        /// <param name="itemSerialTag">The tag to add</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddItemSerialTagAsync (int? itemSerialId, string itemSerialTag)
        {
             await AddItemSerialTagAsyncWithHttpInfo(itemSerialId, itemSerialTag);

        }

        /// <summary>
        /// Add new tags for an itemSerial. Adds a tag to an existing itemSerial.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemSerialId">Id of the itemSerial to add a tag to</param>
        /// <param name="itemSerialTag">The tag to add</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddItemSerialTagAsyncWithHttpInfo (int? itemSerialId, string itemSerialTag)
        {
            // verify the required parameter 'itemSerialId' is set
            if (itemSerialId == null)
                throw new ApiException(400, "Missing required parameter 'itemSerialId' when calling ItemSerialApi->AddItemSerialTag");
            // verify the required parameter 'itemSerialTag' is set
            if (itemSerialTag == null)
                throw new ApiException(400, "Missing required parameter 'itemSerialTag' when calling ItemSerialApi->AddItemSerialTag");

            var localVarPath = "/beta/itemSerial/{itemSerialId}/tag/{itemSerialTag}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemSerialId != null) localVarPathParams.Add("itemSerialId", Configuration.ApiClient.ParameterToString(itemSerialId)); // path parameter
            if (itemSerialTag != null) localVarPathParams.Add("itemSerialTag", Configuration.ApiClient.ParameterToString(itemSerialTag)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddItemSerialTag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete an itemSerial Deletes the itemSerial identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemSerialId">Id of the itemSerial to be deleted.</param>
        /// <returns></returns>
        public void DeleteItemSerial (int? itemSerialId)
        {
             DeleteItemSerialWithHttpInfo(itemSerialId);
        }

        /// <summary>
        /// Delete an itemSerial Deletes the itemSerial identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemSerialId">Id of the itemSerial to be deleted.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteItemSerialWithHttpInfo (int? itemSerialId)
        {
            // verify the required parameter 'itemSerialId' is set
            if (itemSerialId == null)
                throw new ApiException(400, "Missing required parameter 'itemSerialId' when calling ItemSerialApi->DeleteItemSerial");

            var localVarPath = "/beta/itemSerial/{itemSerialId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemSerialId != null) localVarPathParams.Add("itemSerialId", Configuration.ApiClient.ParameterToString(itemSerialId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteItemSerial", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete an itemSerial Deletes the itemSerial identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemSerialId">Id of the itemSerial to be deleted.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteItemSerialAsync (int? itemSerialId)
        {
             await DeleteItemSerialAsyncWithHttpInfo(itemSerialId);

        }

        /// <summary>
        /// Delete an itemSerial Deletes the itemSerial identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemSerialId">Id of the itemSerial to be deleted.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteItemSerialAsyncWithHttpInfo (int? itemSerialId)
        {
            // verify the required parameter 'itemSerialId' is set
            if (itemSerialId == null)
                throw new ApiException(400, "Missing required parameter 'itemSerialId' when calling ItemSerialApi->DeleteItemSerial");

            var localVarPath = "/beta/itemSerial/{itemSerialId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemSerialId != null) localVarPathParams.Add("itemSerialId", Configuration.ApiClient.ParameterToString(itemSerialId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteItemSerial", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a file for an itemSerial. Deletes an existing itemSerial file using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemSerialId">Id of the itemSerial to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns></returns>
        public void DeleteItemSerialFile (int? itemSerialId, int? fileId)
        {
             DeleteItemSerialFileWithHttpInfo(itemSerialId, fileId);
        }

        /// <summary>
        /// Delete a file for an itemSerial. Deletes an existing itemSerial file using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemSerialId">Id of the itemSerial to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteItemSerialFileWithHttpInfo (int? itemSerialId, int? fileId)
        {
            // verify the required parameter 'itemSerialId' is set
            if (itemSerialId == null)
                throw new ApiException(400, "Missing required parameter 'itemSerialId' when calling ItemSerialApi->DeleteItemSerialFile");
            // verify the required parameter 'fileId' is set
            if (fileId == null)
                throw new ApiException(400, "Missing required parameter 'fileId' when calling ItemSerialApi->DeleteItemSerialFile");

            var localVarPath = "/beta/itemSerial/{itemSerialId}/file/{fileId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemSerialId != null) localVarPathParams.Add("itemSerialId", Configuration.ApiClient.ParameterToString(itemSerialId)); // path parameter
            if (fileId != null) localVarPathParams.Add("fileId", Configuration.ApiClient.ParameterToString(fileId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteItemSerialFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a file for an itemSerial. Deletes an existing itemSerial file using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemSerialId">Id of the itemSerial to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteItemSerialFileAsync (int? itemSerialId, int? fileId)
        {
             await DeleteItemSerialFileAsyncWithHttpInfo(itemSerialId, fileId);

        }

        /// <summary>
        /// Delete a file for an itemSerial. Deletes an existing itemSerial file using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemSerialId">Id of the itemSerial to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteItemSerialFileAsyncWithHttpInfo (int? itemSerialId, int? fileId)
        {
            // verify the required parameter 'itemSerialId' is set
            if (itemSerialId == null)
                throw new ApiException(400, "Missing required parameter 'itemSerialId' when calling ItemSerialApi->DeleteItemSerialFile");
            // verify the required parameter 'fileId' is set
            if (fileId == null)
                throw new ApiException(400, "Missing required parameter 'fileId' when calling ItemSerialApi->DeleteItemSerialFile");

            var localVarPath = "/beta/itemSerial/{itemSerialId}/file/{fileId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemSerialId != null) localVarPathParams.Add("itemSerialId", Configuration.ApiClient.ParameterToString(itemSerialId)); // path parameter
            if (fileId != null) localVarPathParams.Add("fileId", Configuration.ApiClient.ParameterToString(fileId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteItemSerialFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a tag for an itemSerial. Deletes an existing itemSerial tag using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemSerialId">Id of the itemSerial to remove tag from</param>
        /// <param name="itemSerialTag">The tag to delete</param>
        /// <returns></returns>
        public void DeleteItemSerialTag (int? itemSerialId, string itemSerialTag)
        {
             DeleteItemSerialTagWithHttpInfo(itemSerialId, itemSerialTag);
        }

        /// <summary>
        /// Delete a tag for an itemSerial. Deletes an existing itemSerial tag using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemSerialId">Id of the itemSerial to remove tag from</param>
        /// <param name="itemSerialTag">The tag to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteItemSerialTagWithHttpInfo (int? itemSerialId, string itemSerialTag)
        {
            // verify the required parameter 'itemSerialId' is set
            if (itemSerialId == null)
                throw new ApiException(400, "Missing required parameter 'itemSerialId' when calling ItemSerialApi->DeleteItemSerialTag");
            // verify the required parameter 'itemSerialTag' is set
            if (itemSerialTag == null)
                throw new ApiException(400, "Missing required parameter 'itemSerialTag' when calling ItemSerialApi->DeleteItemSerialTag");

            var localVarPath = "/beta/itemSerial/{itemSerialId}/tag/{itemSerialTag}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemSerialId != null) localVarPathParams.Add("itemSerialId", Configuration.ApiClient.ParameterToString(itemSerialId)); // path parameter
            if (itemSerialTag != null) localVarPathParams.Add("itemSerialTag", Configuration.ApiClient.ParameterToString(itemSerialTag)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteItemSerialTag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a tag for an itemSerial. Deletes an existing itemSerial tag using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemSerialId">Id of the itemSerial to remove tag from</param>
        /// <param name="itemSerialTag">The tag to delete</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteItemSerialTagAsync (int? itemSerialId, string itemSerialTag)
        {
             await DeleteItemSerialTagAsyncWithHttpInfo(itemSerialId, itemSerialTag);

        }

        /// <summary>
        /// Delete a tag for an itemSerial. Deletes an existing itemSerial tag using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemSerialId">Id of the itemSerial to remove tag from</param>
        /// <param name="itemSerialTag">The tag to delete</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteItemSerialTagAsyncWithHttpInfo (int? itemSerialId, string itemSerialTag)
        {
            // verify the required parameter 'itemSerialId' is set
            if (itemSerialId == null)
                throw new ApiException(400, "Missing required parameter 'itemSerialId' when calling ItemSerialApi->DeleteItemSerialTag");
            // verify the required parameter 'itemSerialTag' is set
            if (itemSerialTag == null)
                throw new ApiException(400, "Missing required parameter 'itemSerialTag' when calling ItemSerialApi->DeleteItemSerialTag");

            var localVarPath = "/beta/itemSerial/{itemSerialId}/tag/{itemSerialTag}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemSerialId != null) localVarPathParams.Add("itemSerialId", Configuration.ApiClient.ParameterToString(itemSerialId)); // path parameter
            if (itemSerialTag != null) localVarPathParams.Add("itemSerialTag", Configuration.ApiClient.ParameterToString(itemSerialTag)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteItemSerialTag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get a duplicated an itemSerial by id Returns a duplicated itemSerial identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemSerialId">Id of the itemSerial to be duplicated.</param>
        /// <returns>ItemSerial</returns>
        public ItemSerial GetDuplicateItemSerialById (int? itemSerialId)
        {
             ApiResponse<ItemSerial> localVarResponse = GetDuplicateItemSerialByIdWithHttpInfo(itemSerialId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a duplicated an itemSerial by id Returns a duplicated itemSerial identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemSerialId">Id of the itemSerial to be duplicated.</param>
        /// <returns>ApiResponse of ItemSerial</returns>
        public ApiResponse< ItemSerial > GetDuplicateItemSerialByIdWithHttpInfo (int? itemSerialId)
        {
            // verify the required parameter 'itemSerialId' is set
            if (itemSerialId == null)
                throw new ApiException(400, "Missing required parameter 'itemSerialId' when calling ItemSerialApi->GetDuplicateItemSerialById");

            var localVarPath = "/beta/itemSerial/duplicate/{itemSerialId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemSerialId != null) localVarPathParams.Add("itemSerialId", Configuration.ApiClient.ParameterToString(itemSerialId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDuplicateItemSerialById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ItemSerial>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ItemSerial) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ItemSerial)));
        }

        /// <summary>
        /// Get a duplicated an itemSerial by id Returns a duplicated itemSerial identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemSerialId">Id of the itemSerial to be duplicated.</param>
        /// <returns>Task of ItemSerial</returns>
        public async System.Threading.Tasks.Task<ItemSerial> GetDuplicateItemSerialByIdAsync (int? itemSerialId)
        {
             ApiResponse<ItemSerial> localVarResponse = await GetDuplicateItemSerialByIdAsyncWithHttpInfo(itemSerialId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a duplicated an itemSerial by id Returns a duplicated itemSerial identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemSerialId">Id of the itemSerial to be duplicated.</param>
        /// <returns>Task of ApiResponse (ItemSerial)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ItemSerial>> GetDuplicateItemSerialByIdAsyncWithHttpInfo (int? itemSerialId)
        {
            // verify the required parameter 'itemSerialId' is set
            if (itemSerialId == null)
                throw new ApiException(400, "Missing required parameter 'itemSerialId' when calling ItemSerialApi->GetDuplicateItemSerialById");

            var localVarPath = "/beta/itemSerial/duplicate/{itemSerialId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemSerialId != null) localVarPathParams.Add("itemSerialId", Configuration.ApiClient.ParameterToString(itemSerialId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDuplicateItemSerialById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ItemSerial>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ItemSerial) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ItemSerial)));
        }

        /// <summary>
        /// Search itemSerials by filter Returns the list of itemSerials that match the given filter.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>List&lt;ItemSerial&gt;</returns>
        public List<ItemSerial> GetItemSerialByFilter (string filter = null, int? page = null, int? limit = null, string sort = null)
        {
             ApiResponse<List<ItemSerial>> localVarResponse = GetItemSerialByFilterWithHttpInfo(filter, page, limit, sort);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Search itemSerials by filter Returns the list of itemSerials that match the given filter.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>ApiResponse of List&lt;ItemSerial&gt;</returns>
        public ApiResponse< List<ItemSerial> > GetItemSerialByFilterWithHttpInfo (string filter = null, int? page = null, int? limit = null, string sort = null)
        {

            var localVarPath = "/beta/itemSerial/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (filter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (page != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetItemSerialByFilter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ItemSerial>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ItemSerial>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ItemSerial>)));
        }

        /// <summary>
        /// Search itemSerials by filter Returns the list of itemSerials that match the given filter.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>Task of List&lt;ItemSerial&gt;</returns>
        public async System.Threading.Tasks.Task<List<ItemSerial>> GetItemSerialByFilterAsync (string filter = null, int? page = null, int? limit = null, string sort = null)
        {
             ApiResponse<List<ItemSerial>> localVarResponse = await GetItemSerialByFilterAsyncWithHttpInfo(filter, page, limit, sort);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Search itemSerials by filter Returns the list of itemSerials that match the given filter.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ItemSerial&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ItemSerial>>> GetItemSerialByFilterAsyncWithHttpInfo (string filter = null, int? page = null, int? limit = null, string sort = null)
        {

            var localVarPath = "/beta/itemSerial/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (filter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (page != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetItemSerialByFilter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ItemSerial>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ItemSerial>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ItemSerial>)));
        }

        /// <summary>
        /// Get an itemSerial by id Returns the itemSerial identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemSerialId">Id of the itemSerial to be returned.</param>
        /// <returns>ItemSerial</returns>
        public ItemSerial GetItemSerialById (int? itemSerialId)
        {
             ApiResponse<ItemSerial> localVarResponse = GetItemSerialByIdWithHttpInfo(itemSerialId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get an itemSerial by id Returns the itemSerial identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemSerialId">Id of the itemSerial to be returned.</param>
        /// <returns>ApiResponse of ItemSerial</returns>
        public ApiResponse< ItemSerial > GetItemSerialByIdWithHttpInfo (int? itemSerialId)
        {
            // verify the required parameter 'itemSerialId' is set
            if (itemSerialId == null)
                throw new ApiException(400, "Missing required parameter 'itemSerialId' when calling ItemSerialApi->GetItemSerialById");

            var localVarPath = "/beta/itemSerial/{itemSerialId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemSerialId != null) localVarPathParams.Add("itemSerialId", Configuration.ApiClient.ParameterToString(itemSerialId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetItemSerialById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ItemSerial>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ItemSerial) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ItemSerial)));
        }

        /// <summary>
        /// Get an itemSerial by id Returns the itemSerial identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemSerialId">Id of the itemSerial to be returned.</param>
        /// <returns>Task of ItemSerial</returns>
        public async System.Threading.Tasks.Task<ItemSerial> GetItemSerialByIdAsync (int? itemSerialId)
        {
             ApiResponse<ItemSerial> localVarResponse = await GetItemSerialByIdAsyncWithHttpInfo(itemSerialId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get an itemSerial by id Returns the itemSerial identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemSerialId">Id of the itemSerial to be returned.</param>
        /// <returns>Task of ApiResponse (ItemSerial)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ItemSerial>> GetItemSerialByIdAsyncWithHttpInfo (int? itemSerialId)
        {
            // verify the required parameter 'itemSerialId' is set
            if (itemSerialId == null)
                throw new ApiException(400, "Missing required parameter 'itemSerialId' when calling ItemSerialApi->GetItemSerialById");

            var localVarPath = "/beta/itemSerial/{itemSerialId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemSerialId != null) localVarPathParams.Add("itemSerialId", Configuration.ApiClient.ParameterToString(itemSerialId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetItemSerialById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ItemSerial>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ItemSerial) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ItemSerial)));
        }

        /// <summary>
        /// Get the files for an itemSerial. Get all existing itemSerial files.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemSerialId">Id of the itemSerial to get files for</param>
        /// <returns></returns>
        public void GetItemSerialFiles (int? itemSerialId)
        {
             GetItemSerialFilesWithHttpInfo(itemSerialId);
        }

        /// <summary>
        /// Get the files for an itemSerial. Get all existing itemSerial files.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemSerialId">Id of the itemSerial to get files for</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GetItemSerialFilesWithHttpInfo (int? itemSerialId)
        {
            // verify the required parameter 'itemSerialId' is set
            if (itemSerialId == null)
                throw new ApiException(400, "Missing required parameter 'itemSerialId' when calling ItemSerialApi->GetItemSerialFiles");

            var localVarPath = "/beta/itemSerial/{itemSerialId}/file";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemSerialId != null) localVarPathParams.Add("itemSerialId", Configuration.ApiClient.ParameterToString(itemSerialId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetItemSerialFiles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get the files for an itemSerial. Get all existing itemSerial files.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemSerialId">Id of the itemSerial to get files for</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetItemSerialFilesAsync (int? itemSerialId)
        {
             await GetItemSerialFilesAsyncWithHttpInfo(itemSerialId);

        }

        /// <summary>
        /// Get the files for an itemSerial. Get all existing itemSerial files.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemSerialId">Id of the itemSerial to get files for</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetItemSerialFilesAsyncWithHttpInfo (int? itemSerialId)
        {
            // verify the required parameter 'itemSerialId' is set
            if (itemSerialId == null)
                throw new ApiException(400, "Missing required parameter 'itemSerialId' when calling ItemSerialApi->GetItemSerialFiles");

            var localVarPath = "/beta/itemSerial/{itemSerialId}/file";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemSerialId != null) localVarPathParams.Add("itemSerialId", Configuration.ApiClient.ParameterToString(itemSerialId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetItemSerialFiles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get the tags for an itemSerial. Get all existing itemSerial tags.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemSerialId">Id of the itemSerial to get tags for</param>
        /// <returns></returns>
        public void GetItemSerialTags (int? itemSerialId)
        {
             GetItemSerialTagsWithHttpInfo(itemSerialId);
        }

        /// <summary>
        /// Get the tags for an itemSerial. Get all existing itemSerial tags.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemSerialId">Id of the itemSerial to get tags for</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GetItemSerialTagsWithHttpInfo (int? itemSerialId)
        {
            // verify the required parameter 'itemSerialId' is set
            if (itemSerialId == null)
                throw new ApiException(400, "Missing required parameter 'itemSerialId' when calling ItemSerialApi->GetItemSerialTags");

            var localVarPath = "/beta/itemSerial/{itemSerialId}/tag";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemSerialId != null) localVarPathParams.Add("itemSerialId", Configuration.ApiClient.ParameterToString(itemSerialId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetItemSerialTags", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get the tags for an itemSerial. Get all existing itemSerial tags.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemSerialId">Id of the itemSerial to get tags for</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetItemSerialTagsAsync (int? itemSerialId)
        {
             await GetItemSerialTagsAsyncWithHttpInfo(itemSerialId);

        }

        /// <summary>
        /// Get the tags for an itemSerial. Get all existing itemSerial tags.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemSerialId">Id of the itemSerial to get tags for</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetItemSerialTagsAsyncWithHttpInfo (int? itemSerialId)
        {
            // verify the required parameter 'itemSerialId' is set
            if (itemSerialId == null)
                throw new ApiException(400, "Missing required parameter 'itemSerialId' when calling ItemSerialApi->GetItemSerialTags");

            var localVarPath = "/beta/itemSerial/{itemSerialId}/tag";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemSerialId != null) localVarPathParams.Add("itemSerialId", Configuration.ApiClient.ParameterToString(itemSerialId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetItemSerialTags", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update an itemSerial Updates an existing itemSerial using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">ItemSerial to be updated.</param>
        /// <returns></returns>
        public void UpdateItemSerial (ItemSerial body)
        {
             UpdateItemSerialWithHttpInfo(body);
        }

        /// <summary>
        /// Update an itemSerial Updates an existing itemSerial using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">ItemSerial to be updated.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateItemSerialWithHttpInfo (ItemSerial body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ItemSerialApi->UpdateItemSerial");

            var localVarPath = "/beta/itemSerial";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateItemSerial", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update an itemSerial Updates an existing itemSerial using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">ItemSerial to be updated.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateItemSerialAsync (ItemSerial body)
        {
             await UpdateItemSerialAsyncWithHttpInfo(body);

        }

        /// <summary>
        /// Update an itemSerial Updates an existing itemSerial using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">ItemSerial to be updated.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateItemSerialAsyncWithHttpInfo (ItemSerial body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ItemSerialApi->UpdateItemSerial");

            var localVarPath = "/beta/itemSerial";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateItemSerial", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

    }
}
