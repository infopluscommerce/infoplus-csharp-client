/* 
 * Infoplus API
 *
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Infoplus.Client;
using Infoplus.Model;

namespace Infoplus.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IItemSerialSchemeApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create an itemSerialScheme
        /// </summary>
        /// <remarks>
        /// Inserts a new itemSerialScheme using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">ItemSerialScheme to be inserted.</param>
        /// <returns>ItemSerialScheme</returns>
        ItemSerialScheme AddItemSerialScheme (ItemSerialScheme body);

        /// <summary>
        /// Create an itemSerialScheme
        /// </summary>
        /// <remarks>
        /// Inserts a new itemSerialScheme using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">ItemSerialScheme to be inserted.</param>
        /// <returns>ApiResponse of ItemSerialScheme</returns>
        ApiResponse<ItemSerialScheme> AddItemSerialSchemeWithHttpInfo (ItemSerialScheme body);
        /// <summary>
        /// Add new audit for an itemSerialScheme
        /// </summary>
        /// <remarks>
        /// Adds an audit to an existing itemSerialScheme.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemSerialSchemeId">Id of the itemSerialScheme to add an audit to</param>
        /// <param name="itemSerialSchemeAudit">The audit to add</param>
        /// <returns></returns>
        void AddItemSerialSchemeAudit (int? itemSerialSchemeId, string itemSerialSchemeAudit);

        /// <summary>
        /// Add new audit for an itemSerialScheme
        /// </summary>
        /// <remarks>
        /// Adds an audit to an existing itemSerialScheme.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemSerialSchemeId">Id of the itemSerialScheme to add an audit to</param>
        /// <param name="itemSerialSchemeAudit">The audit to add</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddItemSerialSchemeAuditWithHttpInfo (int? itemSerialSchemeId, string itemSerialSchemeAudit);
        /// <summary>
        /// Attach a file to an itemSerialScheme
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing itemSerialScheme.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemSerialSchemeId">Id of the itemSerialScheme to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns></returns>
        void AddItemSerialSchemeFile (int? itemSerialSchemeId, string fileName);

        /// <summary>
        /// Attach a file to an itemSerialScheme
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing itemSerialScheme.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemSerialSchemeId">Id of the itemSerialScheme to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddItemSerialSchemeFileWithHttpInfo (int? itemSerialSchemeId, string fileName);
        /// <summary>
        /// Attach a file to an itemSerialScheme by URL.
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing itemSerialScheme by URL.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="itemSerialSchemeId">Id of the itemSerialScheme to add an file to</param>
        /// <returns></returns>
        void AddItemSerialSchemeFileByURL (RecordFile body, int? itemSerialSchemeId);

        /// <summary>
        /// Attach a file to an itemSerialScheme by URL.
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing itemSerialScheme by URL.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="itemSerialSchemeId">Id of the itemSerialScheme to add an file to</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddItemSerialSchemeFileByURLWithHttpInfo (RecordFile body, int? itemSerialSchemeId);
        /// <summary>
        /// Add new tags for an itemSerialScheme.
        /// </summary>
        /// <remarks>
        /// Adds a tag to an existing itemSerialScheme.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemSerialSchemeId">Id of the itemSerialScheme to add a tag to</param>
        /// <param name="itemSerialSchemeTag">The tag to add</param>
        /// <returns></returns>
        void AddItemSerialSchemeTag (int? itemSerialSchemeId, string itemSerialSchemeTag);

        /// <summary>
        /// Add new tags for an itemSerialScheme.
        /// </summary>
        /// <remarks>
        /// Adds a tag to an existing itemSerialScheme.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemSerialSchemeId">Id of the itemSerialScheme to add a tag to</param>
        /// <param name="itemSerialSchemeTag">The tag to add</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddItemSerialSchemeTagWithHttpInfo (int? itemSerialSchemeId, string itemSerialSchemeTag);
        /// <summary>
        /// Delete an itemSerialScheme
        /// </summary>
        /// <remarks>
        /// Deletes the itemSerialScheme identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemSerialSchemeId">Id of the itemSerialScheme to be deleted.</param>
        /// <returns></returns>
        void DeleteItemSerialScheme (int? itemSerialSchemeId);

        /// <summary>
        /// Delete an itemSerialScheme
        /// </summary>
        /// <remarks>
        /// Deletes the itemSerialScheme identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemSerialSchemeId">Id of the itemSerialScheme to be deleted.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteItemSerialSchemeWithHttpInfo (int? itemSerialSchemeId);
        /// <summary>
        /// Delete a file for an itemSerialScheme.
        /// </summary>
        /// <remarks>
        /// Deletes an existing itemSerialScheme file using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemSerialSchemeId">Id of the itemSerialScheme to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns></returns>
        void DeleteItemSerialSchemeFile (int? itemSerialSchemeId, int? fileId);

        /// <summary>
        /// Delete a file for an itemSerialScheme.
        /// </summary>
        /// <remarks>
        /// Deletes an existing itemSerialScheme file using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemSerialSchemeId">Id of the itemSerialScheme to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteItemSerialSchemeFileWithHttpInfo (int? itemSerialSchemeId, int? fileId);
        /// <summary>
        /// Delete a tag for an itemSerialScheme.
        /// </summary>
        /// <remarks>
        /// Deletes an existing itemSerialScheme tag using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemSerialSchemeId">Id of the itemSerialScheme to remove tag from</param>
        /// <param name="itemSerialSchemeTag">The tag to delete</param>
        /// <returns></returns>
        void DeleteItemSerialSchemeTag (int? itemSerialSchemeId, string itemSerialSchemeTag);

        /// <summary>
        /// Delete a tag for an itemSerialScheme.
        /// </summary>
        /// <remarks>
        /// Deletes an existing itemSerialScheme tag using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemSerialSchemeId">Id of the itemSerialScheme to remove tag from</param>
        /// <param name="itemSerialSchemeTag">The tag to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteItemSerialSchemeTagWithHttpInfo (int? itemSerialSchemeId, string itemSerialSchemeTag);
        /// <summary>
        /// Get a duplicated an itemSerialScheme by id
        /// </summary>
        /// <remarks>
        /// Returns a duplicated itemSerialScheme identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemSerialSchemeId">Id of the itemSerialScheme to be duplicated.</param>
        /// <returns>ItemSerialScheme</returns>
        ItemSerialScheme GetDuplicateItemSerialSchemeById (int? itemSerialSchemeId);

        /// <summary>
        /// Get a duplicated an itemSerialScheme by id
        /// </summary>
        /// <remarks>
        /// Returns a duplicated itemSerialScheme identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemSerialSchemeId">Id of the itemSerialScheme to be duplicated.</param>
        /// <returns>ApiResponse of ItemSerialScheme</returns>
        ApiResponse<ItemSerialScheme> GetDuplicateItemSerialSchemeByIdWithHttpInfo (int? itemSerialSchemeId);
        /// <summary>
        /// Search itemSerialSchemes by filter
        /// </summary>
        /// <remarks>
        /// Returns the list of itemSerialSchemes that match the given filter.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>List&lt;ItemSerialScheme&gt;</returns>
        List<ItemSerialScheme> GetItemSerialSchemeByFilter (string filter = null, int? page = null, int? limit = null, string sort = null);

        /// <summary>
        /// Search itemSerialSchemes by filter
        /// </summary>
        /// <remarks>
        /// Returns the list of itemSerialSchemes that match the given filter.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>ApiResponse of List&lt;ItemSerialScheme&gt;</returns>
        ApiResponse<List<ItemSerialScheme>> GetItemSerialSchemeByFilterWithHttpInfo (string filter = null, int? page = null, int? limit = null, string sort = null);
        /// <summary>
        /// Get an itemSerialScheme by id
        /// </summary>
        /// <remarks>
        /// Returns the itemSerialScheme identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemSerialSchemeId">Id of the itemSerialScheme to be returned.</param>
        /// <returns>ItemSerialScheme</returns>
        ItemSerialScheme GetItemSerialSchemeById (int? itemSerialSchemeId);

        /// <summary>
        /// Get an itemSerialScheme by id
        /// </summary>
        /// <remarks>
        /// Returns the itemSerialScheme identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemSerialSchemeId">Id of the itemSerialScheme to be returned.</param>
        /// <returns>ApiResponse of ItemSerialScheme</returns>
        ApiResponse<ItemSerialScheme> GetItemSerialSchemeByIdWithHttpInfo (int? itemSerialSchemeId);
        /// <summary>
        /// Get the files for an itemSerialScheme.
        /// </summary>
        /// <remarks>
        /// Get all existing itemSerialScheme files.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemSerialSchemeId">Id of the itemSerialScheme to get files for</param>
        /// <returns></returns>
        void GetItemSerialSchemeFiles (int? itemSerialSchemeId);

        /// <summary>
        /// Get the files for an itemSerialScheme.
        /// </summary>
        /// <remarks>
        /// Get all existing itemSerialScheme files.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemSerialSchemeId">Id of the itemSerialScheme to get files for</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetItemSerialSchemeFilesWithHttpInfo (int? itemSerialSchemeId);
        /// <summary>
        /// Get the tags for an itemSerialScheme.
        /// </summary>
        /// <remarks>
        /// Get all existing itemSerialScheme tags.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemSerialSchemeId">Id of the itemSerialScheme to get tags for</param>
        /// <returns></returns>
        void GetItemSerialSchemeTags (int? itemSerialSchemeId);

        /// <summary>
        /// Get the tags for an itemSerialScheme.
        /// </summary>
        /// <remarks>
        /// Get all existing itemSerialScheme tags.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemSerialSchemeId">Id of the itemSerialScheme to get tags for</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetItemSerialSchemeTagsWithHttpInfo (int? itemSerialSchemeId);
        /// <summary>
        /// Update an itemSerialScheme
        /// </summary>
        /// <remarks>
        /// Updates an existing itemSerialScheme using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">ItemSerialScheme to be updated.</param>
        /// <returns></returns>
        void UpdateItemSerialScheme (ItemSerialScheme body);

        /// <summary>
        /// Update an itemSerialScheme
        /// </summary>
        /// <remarks>
        /// Updates an existing itemSerialScheme using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">ItemSerialScheme to be updated.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateItemSerialSchemeWithHttpInfo (ItemSerialScheme body);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create an itemSerialScheme
        /// </summary>
        /// <remarks>
        /// Inserts a new itemSerialScheme using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">ItemSerialScheme to be inserted.</param>
        /// <returns>Task of ItemSerialScheme</returns>
        System.Threading.Tasks.Task<ItemSerialScheme> AddItemSerialSchemeAsync (ItemSerialScheme body);

        /// <summary>
        /// Create an itemSerialScheme
        /// </summary>
        /// <remarks>
        /// Inserts a new itemSerialScheme using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">ItemSerialScheme to be inserted.</param>
        /// <returns>Task of ApiResponse (ItemSerialScheme)</returns>
        System.Threading.Tasks.Task<ApiResponse<ItemSerialScheme>> AddItemSerialSchemeAsyncWithHttpInfo (ItemSerialScheme body);
        /// <summary>
        /// Add new audit for an itemSerialScheme
        /// </summary>
        /// <remarks>
        /// Adds an audit to an existing itemSerialScheme.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemSerialSchemeId">Id of the itemSerialScheme to add an audit to</param>
        /// <param name="itemSerialSchemeAudit">The audit to add</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddItemSerialSchemeAuditAsync (int? itemSerialSchemeId, string itemSerialSchemeAudit);

        /// <summary>
        /// Add new audit for an itemSerialScheme
        /// </summary>
        /// <remarks>
        /// Adds an audit to an existing itemSerialScheme.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemSerialSchemeId">Id of the itemSerialScheme to add an audit to</param>
        /// <param name="itemSerialSchemeAudit">The audit to add</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddItemSerialSchemeAuditAsyncWithHttpInfo (int? itemSerialSchemeId, string itemSerialSchemeAudit);
        /// <summary>
        /// Attach a file to an itemSerialScheme
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing itemSerialScheme.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemSerialSchemeId">Id of the itemSerialScheme to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddItemSerialSchemeFileAsync (int? itemSerialSchemeId, string fileName);

        /// <summary>
        /// Attach a file to an itemSerialScheme
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing itemSerialScheme.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemSerialSchemeId">Id of the itemSerialScheme to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddItemSerialSchemeFileAsyncWithHttpInfo (int? itemSerialSchemeId, string fileName);
        /// <summary>
        /// Attach a file to an itemSerialScheme by URL.
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing itemSerialScheme by URL.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="itemSerialSchemeId">Id of the itemSerialScheme to add an file to</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddItemSerialSchemeFileByURLAsync (RecordFile body, int? itemSerialSchemeId);

        /// <summary>
        /// Attach a file to an itemSerialScheme by URL.
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing itemSerialScheme by URL.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="itemSerialSchemeId">Id of the itemSerialScheme to add an file to</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddItemSerialSchemeFileByURLAsyncWithHttpInfo (RecordFile body, int? itemSerialSchemeId);
        /// <summary>
        /// Add new tags for an itemSerialScheme.
        /// </summary>
        /// <remarks>
        /// Adds a tag to an existing itemSerialScheme.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemSerialSchemeId">Id of the itemSerialScheme to add a tag to</param>
        /// <param name="itemSerialSchemeTag">The tag to add</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddItemSerialSchemeTagAsync (int? itemSerialSchemeId, string itemSerialSchemeTag);

        /// <summary>
        /// Add new tags for an itemSerialScheme.
        /// </summary>
        /// <remarks>
        /// Adds a tag to an existing itemSerialScheme.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemSerialSchemeId">Id of the itemSerialScheme to add a tag to</param>
        /// <param name="itemSerialSchemeTag">The tag to add</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddItemSerialSchemeTagAsyncWithHttpInfo (int? itemSerialSchemeId, string itemSerialSchemeTag);
        /// <summary>
        /// Delete an itemSerialScheme
        /// </summary>
        /// <remarks>
        /// Deletes the itemSerialScheme identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemSerialSchemeId">Id of the itemSerialScheme to be deleted.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteItemSerialSchemeAsync (int? itemSerialSchemeId);

        /// <summary>
        /// Delete an itemSerialScheme
        /// </summary>
        /// <remarks>
        /// Deletes the itemSerialScheme identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemSerialSchemeId">Id of the itemSerialScheme to be deleted.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteItemSerialSchemeAsyncWithHttpInfo (int? itemSerialSchemeId);
        /// <summary>
        /// Delete a file for an itemSerialScheme.
        /// </summary>
        /// <remarks>
        /// Deletes an existing itemSerialScheme file using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemSerialSchemeId">Id of the itemSerialScheme to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteItemSerialSchemeFileAsync (int? itemSerialSchemeId, int? fileId);

        /// <summary>
        /// Delete a file for an itemSerialScheme.
        /// </summary>
        /// <remarks>
        /// Deletes an existing itemSerialScheme file using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemSerialSchemeId">Id of the itemSerialScheme to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteItemSerialSchemeFileAsyncWithHttpInfo (int? itemSerialSchemeId, int? fileId);
        /// <summary>
        /// Delete a tag for an itemSerialScheme.
        /// </summary>
        /// <remarks>
        /// Deletes an existing itemSerialScheme tag using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemSerialSchemeId">Id of the itemSerialScheme to remove tag from</param>
        /// <param name="itemSerialSchemeTag">The tag to delete</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteItemSerialSchemeTagAsync (int? itemSerialSchemeId, string itemSerialSchemeTag);

        /// <summary>
        /// Delete a tag for an itemSerialScheme.
        /// </summary>
        /// <remarks>
        /// Deletes an existing itemSerialScheme tag using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemSerialSchemeId">Id of the itemSerialScheme to remove tag from</param>
        /// <param name="itemSerialSchemeTag">The tag to delete</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteItemSerialSchemeTagAsyncWithHttpInfo (int? itemSerialSchemeId, string itemSerialSchemeTag);
        /// <summary>
        /// Get a duplicated an itemSerialScheme by id
        /// </summary>
        /// <remarks>
        /// Returns a duplicated itemSerialScheme identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemSerialSchemeId">Id of the itemSerialScheme to be duplicated.</param>
        /// <returns>Task of ItemSerialScheme</returns>
        System.Threading.Tasks.Task<ItemSerialScheme> GetDuplicateItemSerialSchemeByIdAsync (int? itemSerialSchemeId);

        /// <summary>
        /// Get a duplicated an itemSerialScheme by id
        /// </summary>
        /// <remarks>
        /// Returns a duplicated itemSerialScheme identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemSerialSchemeId">Id of the itemSerialScheme to be duplicated.</param>
        /// <returns>Task of ApiResponse (ItemSerialScheme)</returns>
        System.Threading.Tasks.Task<ApiResponse<ItemSerialScheme>> GetDuplicateItemSerialSchemeByIdAsyncWithHttpInfo (int? itemSerialSchemeId);
        /// <summary>
        /// Search itemSerialSchemes by filter
        /// </summary>
        /// <remarks>
        /// Returns the list of itemSerialSchemes that match the given filter.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>Task of List&lt;ItemSerialScheme&gt;</returns>
        System.Threading.Tasks.Task<List<ItemSerialScheme>> GetItemSerialSchemeByFilterAsync (string filter = null, int? page = null, int? limit = null, string sort = null);

        /// <summary>
        /// Search itemSerialSchemes by filter
        /// </summary>
        /// <remarks>
        /// Returns the list of itemSerialSchemes that match the given filter.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ItemSerialScheme&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ItemSerialScheme>>> GetItemSerialSchemeByFilterAsyncWithHttpInfo (string filter = null, int? page = null, int? limit = null, string sort = null);
        /// <summary>
        /// Get an itemSerialScheme by id
        /// </summary>
        /// <remarks>
        /// Returns the itemSerialScheme identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemSerialSchemeId">Id of the itemSerialScheme to be returned.</param>
        /// <returns>Task of ItemSerialScheme</returns>
        System.Threading.Tasks.Task<ItemSerialScheme> GetItemSerialSchemeByIdAsync (int? itemSerialSchemeId);

        /// <summary>
        /// Get an itemSerialScheme by id
        /// </summary>
        /// <remarks>
        /// Returns the itemSerialScheme identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemSerialSchemeId">Id of the itemSerialScheme to be returned.</param>
        /// <returns>Task of ApiResponse (ItemSerialScheme)</returns>
        System.Threading.Tasks.Task<ApiResponse<ItemSerialScheme>> GetItemSerialSchemeByIdAsyncWithHttpInfo (int? itemSerialSchemeId);
        /// <summary>
        /// Get the files for an itemSerialScheme.
        /// </summary>
        /// <remarks>
        /// Get all existing itemSerialScheme files.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemSerialSchemeId">Id of the itemSerialScheme to get files for</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetItemSerialSchemeFilesAsync (int? itemSerialSchemeId);

        /// <summary>
        /// Get the files for an itemSerialScheme.
        /// </summary>
        /// <remarks>
        /// Get all existing itemSerialScheme files.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemSerialSchemeId">Id of the itemSerialScheme to get files for</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetItemSerialSchemeFilesAsyncWithHttpInfo (int? itemSerialSchemeId);
        /// <summary>
        /// Get the tags for an itemSerialScheme.
        /// </summary>
        /// <remarks>
        /// Get all existing itemSerialScheme tags.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemSerialSchemeId">Id of the itemSerialScheme to get tags for</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetItemSerialSchemeTagsAsync (int? itemSerialSchemeId);

        /// <summary>
        /// Get the tags for an itemSerialScheme.
        /// </summary>
        /// <remarks>
        /// Get all existing itemSerialScheme tags.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemSerialSchemeId">Id of the itemSerialScheme to get tags for</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetItemSerialSchemeTagsAsyncWithHttpInfo (int? itemSerialSchemeId);
        /// <summary>
        /// Update an itemSerialScheme
        /// </summary>
        /// <remarks>
        /// Updates an existing itemSerialScheme using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">ItemSerialScheme to be updated.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateItemSerialSchemeAsync (ItemSerialScheme body);

        /// <summary>
        /// Update an itemSerialScheme
        /// </summary>
        /// <remarks>
        /// Updates an existing itemSerialScheme using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">ItemSerialScheme to be updated.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateItemSerialSchemeAsyncWithHttpInfo (ItemSerialScheme body);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ItemSerialSchemeApi : IItemSerialSchemeApi
    {
        private Infoplus.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ItemSerialSchemeApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ItemSerialSchemeApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = Infoplus.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ItemSerialSchemeApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ItemSerialSchemeApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Infoplus.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Infoplus.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create an itemSerialScheme Inserts a new itemSerialScheme using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">ItemSerialScheme to be inserted.</param>
        /// <returns>ItemSerialScheme</returns>
        public ItemSerialScheme AddItemSerialScheme (ItemSerialScheme body)
        {
             ApiResponse<ItemSerialScheme> localVarResponse = AddItemSerialSchemeWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create an itemSerialScheme Inserts a new itemSerialScheme using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">ItemSerialScheme to be inserted.</param>
        /// <returns>ApiResponse of ItemSerialScheme</returns>
        public ApiResponse< ItemSerialScheme > AddItemSerialSchemeWithHttpInfo (ItemSerialScheme body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ItemSerialSchemeApi->AddItemSerialScheme");

            var localVarPath = "/beta/itemSerialScheme";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddItemSerialScheme", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ItemSerialScheme>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ItemSerialScheme) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ItemSerialScheme)));
        }

        /// <summary>
        /// Create an itemSerialScheme Inserts a new itemSerialScheme using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">ItemSerialScheme to be inserted.</param>
        /// <returns>Task of ItemSerialScheme</returns>
        public async System.Threading.Tasks.Task<ItemSerialScheme> AddItemSerialSchemeAsync (ItemSerialScheme body)
        {
             ApiResponse<ItemSerialScheme> localVarResponse = await AddItemSerialSchemeAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create an itemSerialScheme Inserts a new itemSerialScheme using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">ItemSerialScheme to be inserted.</param>
        /// <returns>Task of ApiResponse (ItemSerialScheme)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ItemSerialScheme>> AddItemSerialSchemeAsyncWithHttpInfo (ItemSerialScheme body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ItemSerialSchemeApi->AddItemSerialScheme");

            var localVarPath = "/beta/itemSerialScheme";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddItemSerialScheme", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ItemSerialScheme>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ItemSerialScheme) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ItemSerialScheme)));
        }

        /// <summary>
        /// Add new audit for an itemSerialScheme Adds an audit to an existing itemSerialScheme.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemSerialSchemeId">Id of the itemSerialScheme to add an audit to</param>
        /// <param name="itemSerialSchemeAudit">The audit to add</param>
        /// <returns></returns>
        public void AddItemSerialSchemeAudit (int? itemSerialSchemeId, string itemSerialSchemeAudit)
        {
             AddItemSerialSchemeAuditWithHttpInfo(itemSerialSchemeId, itemSerialSchemeAudit);
        }

        /// <summary>
        /// Add new audit for an itemSerialScheme Adds an audit to an existing itemSerialScheme.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemSerialSchemeId">Id of the itemSerialScheme to add an audit to</param>
        /// <param name="itemSerialSchemeAudit">The audit to add</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AddItemSerialSchemeAuditWithHttpInfo (int? itemSerialSchemeId, string itemSerialSchemeAudit)
        {
            // verify the required parameter 'itemSerialSchemeId' is set
            if (itemSerialSchemeId == null)
                throw new ApiException(400, "Missing required parameter 'itemSerialSchemeId' when calling ItemSerialSchemeApi->AddItemSerialSchemeAudit");
            // verify the required parameter 'itemSerialSchemeAudit' is set
            if (itemSerialSchemeAudit == null)
                throw new ApiException(400, "Missing required parameter 'itemSerialSchemeAudit' when calling ItemSerialSchemeApi->AddItemSerialSchemeAudit");

            var localVarPath = "/beta/itemSerialScheme/{itemSerialSchemeId}/audit/{itemSerialSchemeAudit}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemSerialSchemeId != null) localVarPathParams.Add("itemSerialSchemeId", Configuration.ApiClient.ParameterToString(itemSerialSchemeId)); // path parameter
            if (itemSerialSchemeAudit != null) localVarPathParams.Add("itemSerialSchemeAudit", Configuration.ApiClient.ParameterToString(itemSerialSchemeAudit)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddItemSerialSchemeAudit", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Add new audit for an itemSerialScheme Adds an audit to an existing itemSerialScheme.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemSerialSchemeId">Id of the itemSerialScheme to add an audit to</param>
        /// <param name="itemSerialSchemeAudit">The audit to add</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddItemSerialSchemeAuditAsync (int? itemSerialSchemeId, string itemSerialSchemeAudit)
        {
             await AddItemSerialSchemeAuditAsyncWithHttpInfo(itemSerialSchemeId, itemSerialSchemeAudit);

        }

        /// <summary>
        /// Add new audit for an itemSerialScheme Adds an audit to an existing itemSerialScheme.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemSerialSchemeId">Id of the itemSerialScheme to add an audit to</param>
        /// <param name="itemSerialSchemeAudit">The audit to add</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddItemSerialSchemeAuditAsyncWithHttpInfo (int? itemSerialSchemeId, string itemSerialSchemeAudit)
        {
            // verify the required parameter 'itemSerialSchemeId' is set
            if (itemSerialSchemeId == null)
                throw new ApiException(400, "Missing required parameter 'itemSerialSchemeId' when calling ItemSerialSchemeApi->AddItemSerialSchemeAudit");
            // verify the required parameter 'itemSerialSchemeAudit' is set
            if (itemSerialSchemeAudit == null)
                throw new ApiException(400, "Missing required parameter 'itemSerialSchemeAudit' when calling ItemSerialSchemeApi->AddItemSerialSchemeAudit");

            var localVarPath = "/beta/itemSerialScheme/{itemSerialSchemeId}/audit/{itemSerialSchemeAudit}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemSerialSchemeId != null) localVarPathParams.Add("itemSerialSchemeId", Configuration.ApiClient.ParameterToString(itemSerialSchemeId)); // path parameter
            if (itemSerialSchemeAudit != null) localVarPathParams.Add("itemSerialSchemeAudit", Configuration.ApiClient.ParameterToString(itemSerialSchemeAudit)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddItemSerialSchemeAudit", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Attach a file to an itemSerialScheme Adds a file to an existing itemSerialScheme.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemSerialSchemeId">Id of the itemSerialScheme to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns></returns>
        public void AddItemSerialSchemeFile (int? itemSerialSchemeId, string fileName)
        {
             AddItemSerialSchemeFileWithHttpInfo(itemSerialSchemeId, fileName);
        }

        /// <summary>
        /// Attach a file to an itemSerialScheme Adds a file to an existing itemSerialScheme.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemSerialSchemeId">Id of the itemSerialScheme to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AddItemSerialSchemeFileWithHttpInfo (int? itemSerialSchemeId, string fileName)
        {
            // verify the required parameter 'itemSerialSchemeId' is set
            if (itemSerialSchemeId == null)
                throw new ApiException(400, "Missing required parameter 'itemSerialSchemeId' when calling ItemSerialSchemeApi->AddItemSerialSchemeFile");
            // verify the required parameter 'fileName' is set
            if (fileName == null)
                throw new ApiException(400, "Missing required parameter 'fileName' when calling ItemSerialSchemeApi->AddItemSerialSchemeFile");

            var localVarPath = "/beta/itemSerialScheme/{itemSerialSchemeId}/file/{fileName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemSerialSchemeId != null) localVarPathParams.Add("itemSerialSchemeId", Configuration.ApiClient.ParameterToString(itemSerialSchemeId)); // path parameter
            if (fileName != null) localVarPathParams.Add("fileName", Configuration.ApiClient.ParameterToString(fileName)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddItemSerialSchemeFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Attach a file to an itemSerialScheme Adds a file to an existing itemSerialScheme.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemSerialSchemeId">Id of the itemSerialScheme to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddItemSerialSchemeFileAsync (int? itemSerialSchemeId, string fileName)
        {
             await AddItemSerialSchemeFileAsyncWithHttpInfo(itemSerialSchemeId, fileName);

        }

        /// <summary>
        /// Attach a file to an itemSerialScheme Adds a file to an existing itemSerialScheme.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemSerialSchemeId">Id of the itemSerialScheme to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddItemSerialSchemeFileAsyncWithHttpInfo (int? itemSerialSchemeId, string fileName)
        {
            // verify the required parameter 'itemSerialSchemeId' is set
            if (itemSerialSchemeId == null)
                throw new ApiException(400, "Missing required parameter 'itemSerialSchemeId' when calling ItemSerialSchemeApi->AddItemSerialSchemeFile");
            // verify the required parameter 'fileName' is set
            if (fileName == null)
                throw new ApiException(400, "Missing required parameter 'fileName' when calling ItemSerialSchemeApi->AddItemSerialSchemeFile");

            var localVarPath = "/beta/itemSerialScheme/{itemSerialSchemeId}/file/{fileName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemSerialSchemeId != null) localVarPathParams.Add("itemSerialSchemeId", Configuration.ApiClient.ParameterToString(itemSerialSchemeId)); // path parameter
            if (fileName != null) localVarPathParams.Add("fileName", Configuration.ApiClient.ParameterToString(fileName)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddItemSerialSchemeFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Attach a file to an itemSerialScheme by URL. Adds a file to an existing itemSerialScheme by URL.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="itemSerialSchemeId">Id of the itemSerialScheme to add an file to</param>
        /// <returns></returns>
        public void AddItemSerialSchemeFileByURL (RecordFile body, int? itemSerialSchemeId)
        {
             AddItemSerialSchemeFileByURLWithHttpInfo(body, itemSerialSchemeId);
        }

        /// <summary>
        /// Attach a file to an itemSerialScheme by URL. Adds a file to an existing itemSerialScheme by URL.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="itemSerialSchemeId">Id of the itemSerialScheme to add an file to</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AddItemSerialSchemeFileByURLWithHttpInfo (RecordFile body, int? itemSerialSchemeId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ItemSerialSchemeApi->AddItemSerialSchemeFileByURL");
            // verify the required parameter 'itemSerialSchemeId' is set
            if (itemSerialSchemeId == null)
                throw new ApiException(400, "Missing required parameter 'itemSerialSchemeId' when calling ItemSerialSchemeApi->AddItemSerialSchemeFileByURL");

            var localVarPath = "/beta/itemSerialScheme/{itemSerialSchemeId}/file";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemSerialSchemeId != null) localVarPathParams.Add("itemSerialSchemeId", Configuration.ApiClient.ParameterToString(itemSerialSchemeId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddItemSerialSchemeFileByURL", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Attach a file to an itemSerialScheme by URL. Adds a file to an existing itemSerialScheme by URL.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="itemSerialSchemeId">Id of the itemSerialScheme to add an file to</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddItemSerialSchemeFileByURLAsync (RecordFile body, int? itemSerialSchemeId)
        {
             await AddItemSerialSchemeFileByURLAsyncWithHttpInfo(body, itemSerialSchemeId);

        }

        /// <summary>
        /// Attach a file to an itemSerialScheme by URL. Adds a file to an existing itemSerialScheme by URL.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="itemSerialSchemeId">Id of the itemSerialScheme to add an file to</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddItemSerialSchemeFileByURLAsyncWithHttpInfo (RecordFile body, int? itemSerialSchemeId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ItemSerialSchemeApi->AddItemSerialSchemeFileByURL");
            // verify the required parameter 'itemSerialSchemeId' is set
            if (itemSerialSchemeId == null)
                throw new ApiException(400, "Missing required parameter 'itemSerialSchemeId' when calling ItemSerialSchemeApi->AddItemSerialSchemeFileByURL");

            var localVarPath = "/beta/itemSerialScheme/{itemSerialSchemeId}/file";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemSerialSchemeId != null) localVarPathParams.Add("itemSerialSchemeId", Configuration.ApiClient.ParameterToString(itemSerialSchemeId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddItemSerialSchemeFileByURL", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Add new tags for an itemSerialScheme. Adds a tag to an existing itemSerialScheme.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemSerialSchemeId">Id of the itemSerialScheme to add a tag to</param>
        /// <param name="itemSerialSchemeTag">The tag to add</param>
        /// <returns></returns>
        public void AddItemSerialSchemeTag (int? itemSerialSchemeId, string itemSerialSchemeTag)
        {
             AddItemSerialSchemeTagWithHttpInfo(itemSerialSchemeId, itemSerialSchemeTag);
        }

        /// <summary>
        /// Add new tags for an itemSerialScheme. Adds a tag to an existing itemSerialScheme.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemSerialSchemeId">Id of the itemSerialScheme to add a tag to</param>
        /// <param name="itemSerialSchemeTag">The tag to add</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AddItemSerialSchemeTagWithHttpInfo (int? itemSerialSchemeId, string itemSerialSchemeTag)
        {
            // verify the required parameter 'itemSerialSchemeId' is set
            if (itemSerialSchemeId == null)
                throw new ApiException(400, "Missing required parameter 'itemSerialSchemeId' when calling ItemSerialSchemeApi->AddItemSerialSchemeTag");
            // verify the required parameter 'itemSerialSchemeTag' is set
            if (itemSerialSchemeTag == null)
                throw new ApiException(400, "Missing required parameter 'itemSerialSchemeTag' when calling ItemSerialSchemeApi->AddItemSerialSchemeTag");

            var localVarPath = "/beta/itemSerialScheme/{itemSerialSchemeId}/tag/{itemSerialSchemeTag}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemSerialSchemeId != null) localVarPathParams.Add("itemSerialSchemeId", Configuration.ApiClient.ParameterToString(itemSerialSchemeId)); // path parameter
            if (itemSerialSchemeTag != null) localVarPathParams.Add("itemSerialSchemeTag", Configuration.ApiClient.ParameterToString(itemSerialSchemeTag)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddItemSerialSchemeTag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Add new tags for an itemSerialScheme. Adds a tag to an existing itemSerialScheme.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemSerialSchemeId">Id of the itemSerialScheme to add a tag to</param>
        /// <param name="itemSerialSchemeTag">The tag to add</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddItemSerialSchemeTagAsync (int? itemSerialSchemeId, string itemSerialSchemeTag)
        {
             await AddItemSerialSchemeTagAsyncWithHttpInfo(itemSerialSchemeId, itemSerialSchemeTag);

        }

        /// <summary>
        /// Add new tags for an itemSerialScheme. Adds a tag to an existing itemSerialScheme.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemSerialSchemeId">Id of the itemSerialScheme to add a tag to</param>
        /// <param name="itemSerialSchemeTag">The tag to add</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddItemSerialSchemeTagAsyncWithHttpInfo (int? itemSerialSchemeId, string itemSerialSchemeTag)
        {
            // verify the required parameter 'itemSerialSchemeId' is set
            if (itemSerialSchemeId == null)
                throw new ApiException(400, "Missing required parameter 'itemSerialSchemeId' when calling ItemSerialSchemeApi->AddItemSerialSchemeTag");
            // verify the required parameter 'itemSerialSchemeTag' is set
            if (itemSerialSchemeTag == null)
                throw new ApiException(400, "Missing required parameter 'itemSerialSchemeTag' when calling ItemSerialSchemeApi->AddItemSerialSchemeTag");

            var localVarPath = "/beta/itemSerialScheme/{itemSerialSchemeId}/tag/{itemSerialSchemeTag}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemSerialSchemeId != null) localVarPathParams.Add("itemSerialSchemeId", Configuration.ApiClient.ParameterToString(itemSerialSchemeId)); // path parameter
            if (itemSerialSchemeTag != null) localVarPathParams.Add("itemSerialSchemeTag", Configuration.ApiClient.ParameterToString(itemSerialSchemeTag)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddItemSerialSchemeTag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete an itemSerialScheme Deletes the itemSerialScheme identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemSerialSchemeId">Id of the itemSerialScheme to be deleted.</param>
        /// <returns></returns>
        public void DeleteItemSerialScheme (int? itemSerialSchemeId)
        {
             DeleteItemSerialSchemeWithHttpInfo(itemSerialSchemeId);
        }

        /// <summary>
        /// Delete an itemSerialScheme Deletes the itemSerialScheme identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemSerialSchemeId">Id of the itemSerialScheme to be deleted.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteItemSerialSchemeWithHttpInfo (int? itemSerialSchemeId)
        {
            // verify the required parameter 'itemSerialSchemeId' is set
            if (itemSerialSchemeId == null)
                throw new ApiException(400, "Missing required parameter 'itemSerialSchemeId' when calling ItemSerialSchemeApi->DeleteItemSerialScheme");

            var localVarPath = "/beta/itemSerialScheme/{itemSerialSchemeId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemSerialSchemeId != null) localVarPathParams.Add("itemSerialSchemeId", Configuration.ApiClient.ParameterToString(itemSerialSchemeId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteItemSerialScheme", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete an itemSerialScheme Deletes the itemSerialScheme identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemSerialSchemeId">Id of the itemSerialScheme to be deleted.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteItemSerialSchemeAsync (int? itemSerialSchemeId)
        {
             await DeleteItemSerialSchemeAsyncWithHttpInfo(itemSerialSchemeId);

        }

        /// <summary>
        /// Delete an itemSerialScheme Deletes the itemSerialScheme identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemSerialSchemeId">Id of the itemSerialScheme to be deleted.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteItemSerialSchemeAsyncWithHttpInfo (int? itemSerialSchemeId)
        {
            // verify the required parameter 'itemSerialSchemeId' is set
            if (itemSerialSchemeId == null)
                throw new ApiException(400, "Missing required parameter 'itemSerialSchemeId' when calling ItemSerialSchemeApi->DeleteItemSerialScheme");

            var localVarPath = "/beta/itemSerialScheme/{itemSerialSchemeId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemSerialSchemeId != null) localVarPathParams.Add("itemSerialSchemeId", Configuration.ApiClient.ParameterToString(itemSerialSchemeId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteItemSerialScheme", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a file for an itemSerialScheme. Deletes an existing itemSerialScheme file using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemSerialSchemeId">Id of the itemSerialScheme to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns></returns>
        public void DeleteItemSerialSchemeFile (int? itemSerialSchemeId, int? fileId)
        {
             DeleteItemSerialSchemeFileWithHttpInfo(itemSerialSchemeId, fileId);
        }

        /// <summary>
        /// Delete a file for an itemSerialScheme. Deletes an existing itemSerialScheme file using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemSerialSchemeId">Id of the itemSerialScheme to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteItemSerialSchemeFileWithHttpInfo (int? itemSerialSchemeId, int? fileId)
        {
            // verify the required parameter 'itemSerialSchemeId' is set
            if (itemSerialSchemeId == null)
                throw new ApiException(400, "Missing required parameter 'itemSerialSchemeId' when calling ItemSerialSchemeApi->DeleteItemSerialSchemeFile");
            // verify the required parameter 'fileId' is set
            if (fileId == null)
                throw new ApiException(400, "Missing required parameter 'fileId' when calling ItemSerialSchemeApi->DeleteItemSerialSchemeFile");

            var localVarPath = "/beta/itemSerialScheme/{itemSerialSchemeId}/file/{fileId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemSerialSchemeId != null) localVarPathParams.Add("itemSerialSchemeId", Configuration.ApiClient.ParameterToString(itemSerialSchemeId)); // path parameter
            if (fileId != null) localVarPathParams.Add("fileId", Configuration.ApiClient.ParameterToString(fileId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteItemSerialSchemeFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a file for an itemSerialScheme. Deletes an existing itemSerialScheme file using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemSerialSchemeId">Id of the itemSerialScheme to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteItemSerialSchemeFileAsync (int? itemSerialSchemeId, int? fileId)
        {
             await DeleteItemSerialSchemeFileAsyncWithHttpInfo(itemSerialSchemeId, fileId);

        }

        /// <summary>
        /// Delete a file for an itemSerialScheme. Deletes an existing itemSerialScheme file using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemSerialSchemeId">Id of the itemSerialScheme to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteItemSerialSchemeFileAsyncWithHttpInfo (int? itemSerialSchemeId, int? fileId)
        {
            // verify the required parameter 'itemSerialSchemeId' is set
            if (itemSerialSchemeId == null)
                throw new ApiException(400, "Missing required parameter 'itemSerialSchemeId' when calling ItemSerialSchemeApi->DeleteItemSerialSchemeFile");
            // verify the required parameter 'fileId' is set
            if (fileId == null)
                throw new ApiException(400, "Missing required parameter 'fileId' when calling ItemSerialSchemeApi->DeleteItemSerialSchemeFile");

            var localVarPath = "/beta/itemSerialScheme/{itemSerialSchemeId}/file/{fileId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemSerialSchemeId != null) localVarPathParams.Add("itemSerialSchemeId", Configuration.ApiClient.ParameterToString(itemSerialSchemeId)); // path parameter
            if (fileId != null) localVarPathParams.Add("fileId", Configuration.ApiClient.ParameterToString(fileId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteItemSerialSchemeFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a tag for an itemSerialScheme. Deletes an existing itemSerialScheme tag using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemSerialSchemeId">Id of the itemSerialScheme to remove tag from</param>
        /// <param name="itemSerialSchemeTag">The tag to delete</param>
        /// <returns></returns>
        public void DeleteItemSerialSchemeTag (int? itemSerialSchemeId, string itemSerialSchemeTag)
        {
             DeleteItemSerialSchemeTagWithHttpInfo(itemSerialSchemeId, itemSerialSchemeTag);
        }

        /// <summary>
        /// Delete a tag for an itemSerialScheme. Deletes an existing itemSerialScheme tag using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemSerialSchemeId">Id of the itemSerialScheme to remove tag from</param>
        /// <param name="itemSerialSchemeTag">The tag to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteItemSerialSchemeTagWithHttpInfo (int? itemSerialSchemeId, string itemSerialSchemeTag)
        {
            // verify the required parameter 'itemSerialSchemeId' is set
            if (itemSerialSchemeId == null)
                throw new ApiException(400, "Missing required parameter 'itemSerialSchemeId' when calling ItemSerialSchemeApi->DeleteItemSerialSchemeTag");
            // verify the required parameter 'itemSerialSchemeTag' is set
            if (itemSerialSchemeTag == null)
                throw new ApiException(400, "Missing required parameter 'itemSerialSchemeTag' when calling ItemSerialSchemeApi->DeleteItemSerialSchemeTag");

            var localVarPath = "/beta/itemSerialScheme/{itemSerialSchemeId}/tag/{itemSerialSchemeTag}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemSerialSchemeId != null) localVarPathParams.Add("itemSerialSchemeId", Configuration.ApiClient.ParameterToString(itemSerialSchemeId)); // path parameter
            if (itemSerialSchemeTag != null) localVarPathParams.Add("itemSerialSchemeTag", Configuration.ApiClient.ParameterToString(itemSerialSchemeTag)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteItemSerialSchemeTag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a tag for an itemSerialScheme. Deletes an existing itemSerialScheme tag using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemSerialSchemeId">Id of the itemSerialScheme to remove tag from</param>
        /// <param name="itemSerialSchemeTag">The tag to delete</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteItemSerialSchemeTagAsync (int? itemSerialSchemeId, string itemSerialSchemeTag)
        {
             await DeleteItemSerialSchemeTagAsyncWithHttpInfo(itemSerialSchemeId, itemSerialSchemeTag);

        }

        /// <summary>
        /// Delete a tag for an itemSerialScheme. Deletes an existing itemSerialScheme tag using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemSerialSchemeId">Id of the itemSerialScheme to remove tag from</param>
        /// <param name="itemSerialSchemeTag">The tag to delete</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteItemSerialSchemeTagAsyncWithHttpInfo (int? itemSerialSchemeId, string itemSerialSchemeTag)
        {
            // verify the required parameter 'itemSerialSchemeId' is set
            if (itemSerialSchemeId == null)
                throw new ApiException(400, "Missing required parameter 'itemSerialSchemeId' when calling ItemSerialSchemeApi->DeleteItemSerialSchemeTag");
            // verify the required parameter 'itemSerialSchemeTag' is set
            if (itemSerialSchemeTag == null)
                throw new ApiException(400, "Missing required parameter 'itemSerialSchemeTag' when calling ItemSerialSchemeApi->DeleteItemSerialSchemeTag");

            var localVarPath = "/beta/itemSerialScheme/{itemSerialSchemeId}/tag/{itemSerialSchemeTag}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemSerialSchemeId != null) localVarPathParams.Add("itemSerialSchemeId", Configuration.ApiClient.ParameterToString(itemSerialSchemeId)); // path parameter
            if (itemSerialSchemeTag != null) localVarPathParams.Add("itemSerialSchemeTag", Configuration.ApiClient.ParameterToString(itemSerialSchemeTag)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteItemSerialSchemeTag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get a duplicated an itemSerialScheme by id Returns a duplicated itemSerialScheme identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemSerialSchemeId">Id of the itemSerialScheme to be duplicated.</param>
        /// <returns>ItemSerialScheme</returns>
        public ItemSerialScheme GetDuplicateItemSerialSchemeById (int? itemSerialSchemeId)
        {
             ApiResponse<ItemSerialScheme> localVarResponse = GetDuplicateItemSerialSchemeByIdWithHttpInfo(itemSerialSchemeId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a duplicated an itemSerialScheme by id Returns a duplicated itemSerialScheme identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemSerialSchemeId">Id of the itemSerialScheme to be duplicated.</param>
        /// <returns>ApiResponse of ItemSerialScheme</returns>
        public ApiResponse< ItemSerialScheme > GetDuplicateItemSerialSchemeByIdWithHttpInfo (int? itemSerialSchemeId)
        {
            // verify the required parameter 'itemSerialSchemeId' is set
            if (itemSerialSchemeId == null)
                throw new ApiException(400, "Missing required parameter 'itemSerialSchemeId' when calling ItemSerialSchemeApi->GetDuplicateItemSerialSchemeById");

            var localVarPath = "/beta/itemSerialScheme/duplicate/{itemSerialSchemeId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemSerialSchemeId != null) localVarPathParams.Add("itemSerialSchemeId", Configuration.ApiClient.ParameterToString(itemSerialSchemeId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDuplicateItemSerialSchemeById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ItemSerialScheme>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ItemSerialScheme) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ItemSerialScheme)));
        }

        /// <summary>
        /// Get a duplicated an itemSerialScheme by id Returns a duplicated itemSerialScheme identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemSerialSchemeId">Id of the itemSerialScheme to be duplicated.</param>
        /// <returns>Task of ItemSerialScheme</returns>
        public async System.Threading.Tasks.Task<ItemSerialScheme> GetDuplicateItemSerialSchemeByIdAsync (int? itemSerialSchemeId)
        {
             ApiResponse<ItemSerialScheme> localVarResponse = await GetDuplicateItemSerialSchemeByIdAsyncWithHttpInfo(itemSerialSchemeId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a duplicated an itemSerialScheme by id Returns a duplicated itemSerialScheme identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemSerialSchemeId">Id of the itemSerialScheme to be duplicated.</param>
        /// <returns>Task of ApiResponse (ItemSerialScheme)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ItemSerialScheme>> GetDuplicateItemSerialSchemeByIdAsyncWithHttpInfo (int? itemSerialSchemeId)
        {
            // verify the required parameter 'itemSerialSchemeId' is set
            if (itemSerialSchemeId == null)
                throw new ApiException(400, "Missing required parameter 'itemSerialSchemeId' when calling ItemSerialSchemeApi->GetDuplicateItemSerialSchemeById");

            var localVarPath = "/beta/itemSerialScheme/duplicate/{itemSerialSchemeId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemSerialSchemeId != null) localVarPathParams.Add("itemSerialSchemeId", Configuration.ApiClient.ParameterToString(itemSerialSchemeId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDuplicateItemSerialSchemeById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ItemSerialScheme>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ItemSerialScheme) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ItemSerialScheme)));
        }

        /// <summary>
        /// Search itemSerialSchemes by filter Returns the list of itemSerialSchemes that match the given filter.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>List&lt;ItemSerialScheme&gt;</returns>
        public List<ItemSerialScheme> GetItemSerialSchemeByFilter (string filter = null, int? page = null, int? limit = null, string sort = null)
        {
             ApiResponse<List<ItemSerialScheme>> localVarResponse = GetItemSerialSchemeByFilterWithHttpInfo(filter, page, limit, sort);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Search itemSerialSchemes by filter Returns the list of itemSerialSchemes that match the given filter.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>ApiResponse of List&lt;ItemSerialScheme&gt;</returns>
        public ApiResponse< List<ItemSerialScheme> > GetItemSerialSchemeByFilterWithHttpInfo (string filter = null, int? page = null, int? limit = null, string sort = null)
        {

            var localVarPath = "/beta/itemSerialScheme/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (filter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (page != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetItemSerialSchemeByFilter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ItemSerialScheme>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ItemSerialScheme>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ItemSerialScheme>)));
        }

        /// <summary>
        /// Search itemSerialSchemes by filter Returns the list of itemSerialSchemes that match the given filter.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>Task of List&lt;ItemSerialScheme&gt;</returns>
        public async System.Threading.Tasks.Task<List<ItemSerialScheme>> GetItemSerialSchemeByFilterAsync (string filter = null, int? page = null, int? limit = null, string sort = null)
        {
             ApiResponse<List<ItemSerialScheme>> localVarResponse = await GetItemSerialSchemeByFilterAsyncWithHttpInfo(filter, page, limit, sort);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Search itemSerialSchemes by filter Returns the list of itemSerialSchemes that match the given filter.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ItemSerialScheme&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ItemSerialScheme>>> GetItemSerialSchemeByFilterAsyncWithHttpInfo (string filter = null, int? page = null, int? limit = null, string sort = null)
        {

            var localVarPath = "/beta/itemSerialScheme/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (filter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (page != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetItemSerialSchemeByFilter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ItemSerialScheme>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ItemSerialScheme>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ItemSerialScheme>)));
        }

        /// <summary>
        /// Get an itemSerialScheme by id Returns the itemSerialScheme identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemSerialSchemeId">Id of the itemSerialScheme to be returned.</param>
        /// <returns>ItemSerialScheme</returns>
        public ItemSerialScheme GetItemSerialSchemeById (int? itemSerialSchemeId)
        {
             ApiResponse<ItemSerialScheme> localVarResponse = GetItemSerialSchemeByIdWithHttpInfo(itemSerialSchemeId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get an itemSerialScheme by id Returns the itemSerialScheme identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemSerialSchemeId">Id of the itemSerialScheme to be returned.</param>
        /// <returns>ApiResponse of ItemSerialScheme</returns>
        public ApiResponse< ItemSerialScheme > GetItemSerialSchemeByIdWithHttpInfo (int? itemSerialSchemeId)
        {
            // verify the required parameter 'itemSerialSchemeId' is set
            if (itemSerialSchemeId == null)
                throw new ApiException(400, "Missing required parameter 'itemSerialSchemeId' when calling ItemSerialSchemeApi->GetItemSerialSchemeById");

            var localVarPath = "/beta/itemSerialScheme/{itemSerialSchemeId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemSerialSchemeId != null) localVarPathParams.Add("itemSerialSchemeId", Configuration.ApiClient.ParameterToString(itemSerialSchemeId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetItemSerialSchemeById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ItemSerialScheme>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ItemSerialScheme) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ItemSerialScheme)));
        }

        /// <summary>
        /// Get an itemSerialScheme by id Returns the itemSerialScheme identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemSerialSchemeId">Id of the itemSerialScheme to be returned.</param>
        /// <returns>Task of ItemSerialScheme</returns>
        public async System.Threading.Tasks.Task<ItemSerialScheme> GetItemSerialSchemeByIdAsync (int? itemSerialSchemeId)
        {
             ApiResponse<ItemSerialScheme> localVarResponse = await GetItemSerialSchemeByIdAsyncWithHttpInfo(itemSerialSchemeId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get an itemSerialScheme by id Returns the itemSerialScheme identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemSerialSchemeId">Id of the itemSerialScheme to be returned.</param>
        /// <returns>Task of ApiResponse (ItemSerialScheme)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ItemSerialScheme>> GetItemSerialSchemeByIdAsyncWithHttpInfo (int? itemSerialSchemeId)
        {
            // verify the required parameter 'itemSerialSchemeId' is set
            if (itemSerialSchemeId == null)
                throw new ApiException(400, "Missing required parameter 'itemSerialSchemeId' when calling ItemSerialSchemeApi->GetItemSerialSchemeById");

            var localVarPath = "/beta/itemSerialScheme/{itemSerialSchemeId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemSerialSchemeId != null) localVarPathParams.Add("itemSerialSchemeId", Configuration.ApiClient.ParameterToString(itemSerialSchemeId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetItemSerialSchemeById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ItemSerialScheme>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ItemSerialScheme) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ItemSerialScheme)));
        }

        /// <summary>
        /// Get the files for an itemSerialScheme. Get all existing itemSerialScheme files.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemSerialSchemeId">Id of the itemSerialScheme to get files for</param>
        /// <returns></returns>
        public void GetItemSerialSchemeFiles (int? itemSerialSchemeId)
        {
             GetItemSerialSchemeFilesWithHttpInfo(itemSerialSchemeId);
        }

        /// <summary>
        /// Get the files for an itemSerialScheme. Get all existing itemSerialScheme files.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemSerialSchemeId">Id of the itemSerialScheme to get files for</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GetItemSerialSchemeFilesWithHttpInfo (int? itemSerialSchemeId)
        {
            // verify the required parameter 'itemSerialSchemeId' is set
            if (itemSerialSchemeId == null)
                throw new ApiException(400, "Missing required parameter 'itemSerialSchemeId' when calling ItemSerialSchemeApi->GetItemSerialSchemeFiles");

            var localVarPath = "/beta/itemSerialScheme/{itemSerialSchemeId}/file";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemSerialSchemeId != null) localVarPathParams.Add("itemSerialSchemeId", Configuration.ApiClient.ParameterToString(itemSerialSchemeId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetItemSerialSchemeFiles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get the files for an itemSerialScheme. Get all existing itemSerialScheme files.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemSerialSchemeId">Id of the itemSerialScheme to get files for</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetItemSerialSchemeFilesAsync (int? itemSerialSchemeId)
        {
             await GetItemSerialSchemeFilesAsyncWithHttpInfo(itemSerialSchemeId);

        }

        /// <summary>
        /// Get the files for an itemSerialScheme. Get all existing itemSerialScheme files.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemSerialSchemeId">Id of the itemSerialScheme to get files for</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetItemSerialSchemeFilesAsyncWithHttpInfo (int? itemSerialSchemeId)
        {
            // verify the required parameter 'itemSerialSchemeId' is set
            if (itemSerialSchemeId == null)
                throw new ApiException(400, "Missing required parameter 'itemSerialSchemeId' when calling ItemSerialSchemeApi->GetItemSerialSchemeFiles");

            var localVarPath = "/beta/itemSerialScheme/{itemSerialSchemeId}/file";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemSerialSchemeId != null) localVarPathParams.Add("itemSerialSchemeId", Configuration.ApiClient.ParameterToString(itemSerialSchemeId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetItemSerialSchemeFiles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get the tags for an itemSerialScheme. Get all existing itemSerialScheme tags.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemSerialSchemeId">Id of the itemSerialScheme to get tags for</param>
        /// <returns></returns>
        public void GetItemSerialSchemeTags (int? itemSerialSchemeId)
        {
             GetItemSerialSchemeTagsWithHttpInfo(itemSerialSchemeId);
        }

        /// <summary>
        /// Get the tags for an itemSerialScheme. Get all existing itemSerialScheme tags.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemSerialSchemeId">Id of the itemSerialScheme to get tags for</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GetItemSerialSchemeTagsWithHttpInfo (int? itemSerialSchemeId)
        {
            // verify the required parameter 'itemSerialSchemeId' is set
            if (itemSerialSchemeId == null)
                throw new ApiException(400, "Missing required parameter 'itemSerialSchemeId' when calling ItemSerialSchemeApi->GetItemSerialSchemeTags");

            var localVarPath = "/beta/itemSerialScheme/{itemSerialSchemeId}/tag";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemSerialSchemeId != null) localVarPathParams.Add("itemSerialSchemeId", Configuration.ApiClient.ParameterToString(itemSerialSchemeId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetItemSerialSchemeTags", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get the tags for an itemSerialScheme. Get all existing itemSerialScheme tags.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemSerialSchemeId">Id of the itemSerialScheme to get tags for</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetItemSerialSchemeTagsAsync (int? itemSerialSchemeId)
        {
             await GetItemSerialSchemeTagsAsyncWithHttpInfo(itemSerialSchemeId);

        }

        /// <summary>
        /// Get the tags for an itemSerialScheme. Get all existing itemSerialScheme tags.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemSerialSchemeId">Id of the itemSerialScheme to get tags for</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetItemSerialSchemeTagsAsyncWithHttpInfo (int? itemSerialSchemeId)
        {
            // verify the required parameter 'itemSerialSchemeId' is set
            if (itemSerialSchemeId == null)
                throw new ApiException(400, "Missing required parameter 'itemSerialSchemeId' when calling ItemSerialSchemeApi->GetItemSerialSchemeTags");

            var localVarPath = "/beta/itemSerialScheme/{itemSerialSchemeId}/tag";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemSerialSchemeId != null) localVarPathParams.Add("itemSerialSchemeId", Configuration.ApiClient.ParameterToString(itemSerialSchemeId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetItemSerialSchemeTags", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update an itemSerialScheme Updates an existing itemSerialScheme using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">ItemSerialScheme to be updated.</param>
        /// <returns></returns>
        public void UpdateItemSerialScheme (ItemSerialScheme body)
        {
             UpdateItemSerialSchemeWithHttpInfo(body);
        }

        /// <summary>
        /// Update an itemSerialScheme Updates an existing itemSerialScheme using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">ItemSerialScheme to be updated.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateItemSerialSchemeWithHttpInfo (ItemSerialScheme body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ItemSerialSchemeApi->UpdateItemSerialScheme");

            var localVarPath = "/beta/itemSerialScheme";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateItemSerialScheme", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update an itemSerialScheme Updates an existing itemSerialScheme using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">ItemSerialScheme to be updated.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateItemSerialSchemeAsync (ItemSerialScheme body)
        {
             await UpdateItemSerialSchemeAsyncWithHttpInfo(body);

        }

        /// <summary>
        /// Update an itemSerialScheme Updates an existing itemSerialScheme using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">ItemSerialScheme to be updated.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateItemSerialSchemeAsyncWithHttpInfo (ItemSerialScheme body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ItemSerialSchemeApi->UpdateItemSerialScheme");

            var localVarPath = "/beta/itemSerialScheme";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateItemSerialScheme", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

    }
}
