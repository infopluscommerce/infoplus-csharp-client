/* 
 * Infoplus API
 *
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Infoplus.Client;
using Infoplus.Model;

namespace Infoplus.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IJobRecipeApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create a jobRecipe
        /// </summary>
        /// <remarks>
        /// Inserts a new jobRecipe using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JobRecipe to be inserted.</param>
        /// <returns>JobRecipe</returns>
        JobRecipe AddJobRecipe (JobRecipe body);

        /// <summary>
        /// Create a jobRecipe
        /// </summary>
        /// <remarks>
        /// Inserts a new jobRecipe using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JobRecipe to be inserted.</param>
        /// <returns>ApiResponse of JobRecipe</returns>
        ApiResponse<JobRecipe> AddJobRecipeWithHttpInfo (JobRecipe body);
        /// <summary>
        /// Add new audit for a jobRecipe
        /// </summary>
        /// <remarks>
        /// Adds an audit to an existing jobRecipe.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobRecipeId">Id of the jobRecipe to add an audit to</param>
        /// <param name="jobRecipeAudit">The audit to add</param>
        /// <returns></returns>
        void AddJobRecipeAudit (int? jobRecipeId, string jobRecipeAudit);

        /// <summary>
        /// Add new audit for a jobRecipe
        /// </summary>
        /// <remarks>
        /// Adds an audit to an existing jobRecipe.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobRecipeId">Id of the jobRecipe to add an audit to</param>
        /// <param name="jobRecipeAudit">The audit to add</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddJobRecipeAuditWithHttpInfo (int? jobRecipeId, string jobRecipeAudit);
        /// <summary>
        /// Attach a file to a jobRecipe
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing jobRecipe.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobRecipeId">Id of the jobRecipe to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns></returns>
        void AddJobRecipeFile (int? jobRecipeId, string fileName);

        /// <summary>
        /// Attach a file to a jobRecipe
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing jobRecipe.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobRecipeId">Id of the jobRecipe to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddJobRecipeFileWithHttpInfo (int? jobRecipeId, string fileName);
        /// <summary>
        /// Attach a file to a jobRecipe by URL.
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing jobRecipe by URL.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="jobRecipeId">Id of the jobRecipe to add an file to</param>
        /// <returns></returns>
        void AddJobRecipeFileByURL (RecordFile body, int? jobRecipeId);

        /// <summary>
        /// Attach a file to a jobRecipe by URL.
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing jobRecipe by URL.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="jobRecipeId">Id of the jobRecipe to add an file to</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddJobRecipeFileByURLWithHttpInfo (RecordFile body, int? jobRecipeId);
        /// <summary>
        /// Add new tags for a jobRecipe.
        /// </summary>
        /// <remarks>
        /// Adds a tag to an existing jobRecipe.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobRecipeId">Id of the jobRecipe to add a tag to</param>
        /// <param name="jobRecipeTag">The tag to add</param>
        /// <returns></returns>
        void AddJobRecipeTag (int? jobRecipeId, string jobRecipeTag);

        /// <summary>
        /// Add new tags for a jobRecipe.
        /// </summary>
        /// <remarks>
        /// Adds a tag to an existing jobRecipe.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobRecipeId">Id of the jobRecipe to add a tag to</param>
        /// <param name="jobRecipeTag">The tag to add</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddJobRecipeTagWithHttpInfo (int? jobRecipeId, string jobRecipeTag);
        /// <summary>
        /// Delete a jobRecipe
        /// </summary>
        /// <remarks>
        /// Deletes the jobRecipe identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobRecipeId">Id of the jobRecipe to be deleted.</param>
        /// <returns></returns>
        void DeleteJobRecipe (int? jobRecipeId);

        /// <summary>
        /// Delete a jobRecipe
        /// </summary>
        /// <remarks>
        /// Deletes the jobRecipe identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobRecipeId">Id of the jobRecipe to be deleted.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteJobRecipeWithHttpInfo (int? jobRecipeId);
        /// <summary>
        /// Delete a file for a jobRecipe.
        /// </summary>
        /// <remarks>
        /// Deletes an existing jobRecipe file using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobRecipeId">Id of the jobRecipe to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns></returns>
        void DeleteJobRecipeFile (int? jobRecipeId, int? fileId);

        /// <summary>
        /// Delete a file for a jobRecipe.
        /// </summary>
        /// <remarks>
        /// Deletes an existing jobRecipe file using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobRecipeId">Id of the jobRecipe to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteJobRecipeFileWithHttpInfo (int? jobRecipeId, int? fileId);
        /// <summary>
        /// Delete a tag for a jobRecipe.
        /// </summary>
        /// <remarks>
        /// Deletes an existing jobRecipe tag using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobRecipeId">Id of the jobRecipe to remove tag from</param>
        /// <param name="jobRecipeTag">The tag to delete</param>
        /// <returns></returns>
        void DeleteJobRecipeTag (int? jobRecipeId, string jobRecipeTag);

        /// <summary>
        /// Delete a tag for a jobRecipe.
        /// </summary>
        /// <remarks>
        /// Deletes an existing jobRecipe tag using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobRecipeId">Id of the jobRecipe to remove tag from</param>
        /// <param name="jobRecipeTag">The tag to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteJobRecipeTagWithHttpInfo (int? jobRecipeId, string jobRecipeTag);
        /// <summary>
        /// Get a duplicated a jobRecipe by id
        /// </summary>
        /// <remarks>
        /// Returns a duplicated jobRecipe identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobRecipeId">Id of the jobRecipe to be duplicated.</param>
        /// <returns>JobRecipe</returns>
        JobRecipe GetDuplicateJobRecipeById (int? jobRecipeId);

        /// <summary>
        /// Get a duplicated a jobRecipe by id
        /// </summary>
        /// <remarks>
        /// Returns a duplicated jobRecipe identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobRecipeId">Id of the jobRecipe to be duplicated.</param>
        /// <returns>ApiResponse of JobRecipe</returns>
        ApiResponse<JobRecipe> GetDuplicateJobRecipeByIdWithHttpInfo (int? jobRecipeId);
        /// <summary>
        /// Search jobRecipes by filter
        /// </summary>
        /// <remarks>
        /// Returns the list of jobRecipes that match the given filter.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>List&lt;JobRecipe&gt;</returns>
        List<JobRecipe> GetJobRecipeByFilter (string filter = null, int? page = null, int? limit = null, string sort = null);

        /// <summary>
        /// Search jobRecipes by filter
        /// </summary>
        /// <remarks>
        /// Returns the list of jobRecipes that match the given filter.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>ApiResponse of List&lt;JobRecipe&gt;</returns>
        ApiResponse<List<JobRecipe>> GetJobRecipeByFilterWithHttpInfo (string filter = null, int? page = null, int? limit = null, string sort = null);
        /// <summary>
        /// Get a jobRecipe by id
        /// </summary>
        /// <remarks>
        /// Returns the jobRecipe identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobRecipeId">Id of the jobRecipe to be returned.</param>
        /// <returns>JobRecipe</returns>
        JobRecipe GetJobRecipeById (int? jobRecipeId);

        /// <summary>
        /// Get a jobRecipe by id
        /// </summary>
        /// <remarks>
        /// Returns the jobRecipe identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobRecipeId">Id of the jobRecipe to be returned.</param>
        /// <returns>ApiResponse of JobRecipe</returns>
        ApiResponse<JobRecipe> GetJobRecipeByIdWithHttpInfo (int? jobRecipeId);
        /// <summary>
        /// Get the files for a jobRecipe.
        /// </summary>
        /// <remarks>
        /// Get all existing jobRecipe files.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobRecipeId">Id of the jobRecipe to get files for</param>
        /// <returns></returns>
        void GetJobRecipeFiles (int? jobRecipeId);

        /// <summary>
        /// Get the files for a jobRecipe.
        /// </summary>
        /// <remarks>
        /// Get all existing jobRecipe files.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobRecipeId">Id of the jobRecipe to get files for</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetJobRecipeFilesWithHttpInfo (int? jobRecipeId);
        /// <summary>
        /// Get the tags for a jobRecipe.
        /// </summary>
        /// <remarks>
        /// Get all existing jobRecipe tags.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobRecipeId">Id of the jobRecipe to get tags for</param>
        /// <returns></returns>
        void GetJobRecipeTags (int? jobRecipeId);

        /// <summary>
        /// Get the tags for a jobRecipe.
        /// </summary>
        /// <remarks>
        /// Get all existing jobRecipe tags.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobRecipeId">Id of the jobRecipe to get tags for</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetJobRecipeTagsWithHttpInfo (int? jobRecipeId);
        /// <summary>
        /// Update a jobRecipe
        /// </summary>
        /// <remarks>
        /// Updates an existing jobRecipe using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JobRecipe to be updated.</param>
        /// <returns></returns>
        void UpdateJobRecipe (JobRecipe body);

        /// <summary>
        /// Update a jobRecipe
        /// </summary>
        /// <remarks>
        /// Updates an existing jobRecipe using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JobRecipe to be updated.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateJobRecipeWithHttpInfo (JobRecipe body);
        /// <summary>
        /// Update a jobRecipe custom fields
        /// </summary>
        /// <remarks>
        /// Updates an existing jobRecipe custom fields using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JobRecipe to be updated.</param>
        /// <returns></returns>
        void UpdateJobRecipeCustomFields (JobRecipe body);

        /// <summary>
        /// Update a jobRecipe custom fields
        /// </summary>
        /// <remarks>
        /// Updates an existing jobRecipe custom fields using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JobRecipe to be updated.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateJobRecipeCustomFieldsWithHttpInfo (JobRecipe body);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create a jobRecipe
        /// </summary>
        /// <remarks>
        /// Inserts a new jobRecipe using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JobRecipe to be inserted.</param>
        /// <returns>Task of JobRecipe</returns>
        System.Threading.Tasks.Task<JobRecipe> AddJobRecipeAsync (JobRecipe body);

        /// <summary>
        /// Create a jobRecipe
        /// </summary>
        /// <remarks>
        /// Inserts a new jobRecipe using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JobRecipe to be inserted.</param>
        /// <returns>Task of ApiResponse (JobRecipe)</returns>
        System.Threading.Tasks.Task<ApiResponse<JobRecipe>> AddJobRecipeAsyncWithHttpInfo (JobRecipe body);
        /// <summary>
        /// Add new audit for a jobRecipe
        /// </summary>
        /// <remarks>
        /// Adds an audit to an existing jobRecipe.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobRecipeId">Id of the jobRecipe to add an audit to</param>
        /// <param name="jobRecipeAudit">The audit to add</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddJobRecipeAuditAsync (int? jobRecipeId, string jobRecipeAudit);

        /// <summary>
        /// Add new audit for a jobRecipe
        /// </summary>
        /// <remarks>
        /// Adds an audit to an existing jobRecipe.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobRecipeId">Id of the jobRecipe to add an audit to</param>
        /// <param name="jobRecipeAudit">The audit to add</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddJobRecipeAuditAsyncWithHttpInfo (int? jobRecipeId, string jobRecipeAudit);
        /// <summary>
        /// Attach a file to a jobRecipe
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing jobRecipe.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobRecipeId">Id of the jobRecipe to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddJobRecipeFileAsync (int? jobRecipeId, string fileName);

        /// <summary>
        /// Attach a file to a jobRecipe
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing jobRecipe.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobRecipeId">Id of the jobRecipe to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddJobRecipeFileAsyncWithHttpInfo (int? jobRecipeId, string fileName);
        /// <summary>
        /// Attach a file to a jobRecipe by URL.
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing jobRecipe by URL.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="jobRecipeId">Id of the jobRecipe to add an file to</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddJobRecipeFileByURLAsync (RecordFile body, int? jobRecipeId);

        /// <summary>
        /// Attach a file to a jobRecipe by URL.
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing jobRecipe by URL.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="jobRecipeId">Id of the jobRecipe to add an file to</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddJobRecipeFileByURLAsyncWithHttpInfo (RecordFile body, int? jobRecipeId);
        /// <summary>
        /// Add new tags for a jobRecipe.
        /// </summary>
        /// <remarks>
        /// Adds a tag to an existing jobRecipe.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobRecipeId">Id of the jobRecipe to add a tag to</param>
        /// <param name="jobRecipeTag">The tag to add</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddJobRecipeTagAsync (int? jobRecipeId, string jobRecipeTag);

        /// <summary>
        /// Add new tags for a jobRecipe.
        /// </summary>
        /// <remarks>
        /// Adds a tag to an existing jobRecipe.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobRecipeId">Id of the jobRecipe to add a tag to</param>
        /// <param name="jobRecipeTag">The tag to add</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddJobRecipeTagAsyncWithHttpInfo (int? jobRecipeId, string jobRecipeTag);
        /// <summary>
        /// Delete a jobRecipe
        /// </summary>
        /// <remarks>
        /// Deletes the jobRecipe identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobRecipeId">Id of the jobRecipe to be deleted.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteJobRecipeAsync (int? jobRecipeId);

        /// <summary>
        /// Delete a jobRecipe
        /// </summary>
        /// <remarks>
        /// Deletes the jobRecipe identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobRecipeId">Id of the jobRecipe to be deleted.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteJobRecipeAsyncWithHttpInfo (int? jobRecipeId);
        /// <summary>
        /// Delete a file for a jobRecipe.
        /// </summary>
        /// <remarks>
        /// Deletes an existing jobRecipe file using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobRecipeId">Id of the jobRecipe to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteJobRecipeFileAsync (int? jobRecipeId, int? fileId);

        /// <summary>
        /// Delete a file for a jobRecipe.
        /// </summary>
        /// <remarks>
        /// Deletes an existing jobRecipe file using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobRecipeId">Id of the jobRecipe to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteJobRecipeFileAsyncWithHttpInfo (int? jobRecipeId, int? fileId);
        /// <summary>
        /// Delete a tag for a jobRecipe.
        /// </summary>
        /// <remarks>
        /// Deletes an existing jobRecipe tag using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobRecipeId">Id of the jobRecipe to remove tag from</param>
        /// <param name="jobRecipeTag">The tag to delete</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteJobRecipeTagAsync (int? jobRecipeId, string jobRecipeTag);

        /// <summary>
        /// Delete a tag for a jobRecipe.
        /// </summary>
        /// <remarks>
        /// Deletes an existing jobRecipe tag using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobRecipeId">Id of the jobRecipe to remove tag from</param>
        /// <param name="jobRecipeTag">The tag to delete</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteJobRecipeTagAsyncWithHttpInfo (int? jobRecipeId, string jobRecipeTag);
        /// <summary>
        /// Get a duplicated a jobRecipe by id
        /// </summary>
        /// <remarks>
        /// Returns a duplicated jobRecipe identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobRecipeId">Id of the jobRecipe to be duplicated.</param>
        /// <returns>Task of JobRecipe</returns>
        System.Threading.Tasks.Task<JobRecipe> GetDuplicateJobRecipeByIdAsync (int? jobRecipeId);

        /// <summary>
        /// Get a duplicated a jobRecipe by id
        /// </summary>
        /// <remarks>
        /// Returns a duplicated jobRecipe identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobRecipeId">Id of the jobRecipe to be duplicated.</param>
        /// <returns>Task of ApiResponse (JobRecipe)</returns>
        System.Threading.Tasks.Task<ApiResponse<JobRecipe>> GetDuplicateJobRecipeByIdAsyncWithHttpInfo (int? jobRecipeId);
        /// <summary>
        /// Search jobRecipes by filter
        /// </summary>
        /// <remarks>
        /// Returns the list of jobRecipes that match the given filter.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>Task of List&lt;JobRecipe&gt;</returns>
        System.Threading.Tasks.Task<List<JobRecipe>> GetJobRecipeByFilterAsync (string filter = null, int? page = null, int? limit = null, string sort = null);

        /// <summary>
        /// Search jobRecipes by filter
        /// </summary>
        /// <remarks>
        /// Returns the list of jobRecipes that match the given filter.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;JobRecipe&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<JobRecipe>>> GetJobRecipeByFilterAsyncWithHttpInfo (string filter = null, int? page = null, int? limit = null, string sort = null);
        /// <summary>
        /// Get a jobRecipe by id
        /// </summary>
        /// <remarks>
        /// Returns the jobRecipe identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobRecipeId">Id of the jobRecipe to be returned.</param>
        /// <returns>Task of JobRecipe</returns>
        System.Threading.Tasks.Task<JobRecipe> GetJobRecipeByIdAsync (int? jobRecipeId);

        /// <summary>
        /// Get a jobRecipe by id
        /// </summary>
        /// <remarks>
        /// Returns the jobRecipe identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobRecipeId">Id of the jobRecipe to be returned.</param>
        /// <returns>Task of ApiResponse (JobRecipe)</returns>
        System.Threading.Tasks.Task<ApiResponse<JobRecipe>> GetJobRecipeByIdAsyncWithHttpInfo (int? jobRecipeId);
        /// <summary>
        /// Get the files for a jobRecipe.
        /// </summary>
        /// <remarks>
        /// Get all existing jobRecipe files.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobRecipeId">Id of the jobRecipe to get files for</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetJobRecipeFilesAsync (int? jobRecipeId);

        /// <summary>
        /// Get the files for a jobRecipe.
        /// </summary>
        /// <remarks>
        /// Get all existing jobRecipe files.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobRecipeId">Id of the jobRecipe to get files for</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetJobRecipeFilesAsyncWithHttpInfo (int? jobRecipeId);
        /// <summary>
        /// Get the tags for a jobRecipe.
        /// </summary>
        /// <remarks>
        /// Get all existing jobRecipe tags.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobRecipeId">Id of the jobRecipe to get tags for</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetJobRecipeTagsAsync (int? jobRecipeId);

        /// <summary>
        /// Get the tags for a jobRecipe.
        /// </summary>
        /// <remarks>
        /// Get all existing jobRecipe tags.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobRecipeId">Id of the jobRecipe to get tags for</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetJobRecipeTagsAsyncWithHttpInfo (int? jobRecipeId);
        /// <summary>
        /// Update a jobRecipe
        /// </summary>
        /// <remarks>
        /// Updates an existing jobRecipe using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JobRecipe to be updated.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateJobRecipeAsync (JobRecipe body);

        /// <summary>
        /// Update a jobRecipe
        /// </summary>
        /// <remarks>
        /// Updates an existing jobRecipe using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JobRecipe to be updated.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateJobRecipeAsyncWithHttpInfo (JobRecipe body);
        /// <summary>
        /// Update a jobRecipe custom fields
        /// </summary>
        /// <remarks>
        /// Updates an existing jobRecipe custom fields using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JobRecipe to be updated.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateJobRecipeCustomFieldsAsync (JobRecipe body);

        /// <summary>
        /// Update a jobRecipe custom fields
        /// </summary>
        /// <remarks>
        /// Updates an existing jobRecipe custom fields using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JobRecipe to be updated.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateJobRecipeCustomFieldsAsyncWithHttpInfo (JobRecipe body);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class JobRecipeApi : IJobRecipeApi
    {
        private Infoplus.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="JobRecipeApi"/> class.
        /// </summary>
        /// <returns></returns>
        public JobRecipeApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = Infoplus.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="JobRecipeApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public JobRecipeApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Infoplus.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Infoplus.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create a jobRecipe Inserts a new jobRecipe using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JobRecipe to be inserted.</param>
        /// <returns>JobRecipe</returns>
        public JobRecipe AddJobRecipe (JobRecipe body)
        {
             ApiResponse<JobRecipe> localVarResponse = AddJobRecipeWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a jobRecipe Inserts a new jobRecipe using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JobRecipe to be inserted.</param>
        /// <returns>ApiResponse of JobRecipe</returns>
        public ApiResponse< JobRecipe > AddJobRecipeWithHttpInfo (JobRecipe body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling JobRecipeApi->AddJobRecipe");

            var localVarPath = "/beta/jobRecipe";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddJobRecipe", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<JobRecipe>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (JobRecipe) Configuration.ApiClient.Deserialize(localVarResponse, typeof(JobRecipe)));
        }

        /// <summary>
        /// Create a jobRecipe Inserts a new jobRecipe using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JobRecipe to be inserted.</param>
        /// <returns>Task of JobRecipe</returns>
        public async System.Threading.Tasks.Task<JobRecipe> AddJobRecipeAsync (JobRecipe body)
        {
             ApiResponse<JobRecipe> localVarResponse = await AddJobRecipeAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a jobRecipe Inserts a new jobRecipe using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JobRecipe to be inserted.</param>
        /// <returns>Task of ApiResponse (JobRecipe)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<JobRecipe>> AddJobRecipeAsyncWithHttpInfo (JobRecipe body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling JobRecipeApi->AddJobRecipe");

            var localVarPath = "/beta/jobRecipe";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddJobRecipe", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<JobRecipe>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (JobRecipe) Configuration.ApiClient.Deserialize(localVarResponse, typeof(JobRecipe)));
        }

        /// <summary>
        /// Add new audit for a jobRecipe Adds an audit to an existing jobRecipe.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobRecipeId">Id of the jobRecipe to add an audit to</param>
        /// <param name="jobRecipeAudit">The audit to add</param>
        /// <returns></returns>
        public void AddJobRecipeAudit (int? jobRecipeId, string jobRecipeAudit)
        {
             AddJobRecipeAuditWithHttpInfo(jobRecipeId, jobRecipeAudit);
        }

        /// <summary>
        /// Add new audit for a jobRecipe Adds an audit to an existing jobRecipe.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobRecipeId">Id of the jobRecipe to add an audit to</param>
        /// <param name="jobRecipeAudit">The audit to add</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AddJobRecipeAuditWithHttpInfo (int? jobRecipeId, string jobRecipeAudit)
        {
            // verify the required parameter 'jobRecipeId' is set
            if (jobRecipeId == null)
                throw new ApiException(400, "Missing required parameter 'jobRecipeId' when calling JobRecipeApi->AddJobRecipeAudit");
            // verify the required parameter 'jobRecipeAudit' is set
            if (jobRecipeAudit == null)
                throw new ApiException(400, "Missing required parameter 'jobRecipeAudit' when calling JobRecipeApi->AddJobRecipeAudit");

            var localVarPath = "/beta/jobRecipe/{jobRecipeId}/audit/{jobRecipeAudit}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (jobRecipeId != null) localVarPathParams.Add("jobRecipeId", Configuration.ApiClient.ParameterToString(jobRecipeId)); // path parameter
            if (jobRecipeAudit != null) localVarPathParams.Add("jobRecipeAudit", Configuration.ApiClient.ParameterToString(jobRecipeAudit)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddJobRecipeAudit", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Add new audit for a jobRecipe Adds an audit to an existing jobRecipe.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobRecipeId">Id of the jobRecipe to add an audit to</param>
        /// <param name="jobRecipeAudit">The audit to add</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddJobRecipeAuditAsync (int? jobRecipeId, string jobRecipeAudit)
        {
             await AddJobRecipeAuditAsyncWithHttpInfo(jobRecipeId, jobRecipeAudit);

        }

        /// <summary>
        /// Add new audit for a jobRecipe Adds an audit to an existing jobRecipe.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobRecipeId">Id of the jobRecipe to add an audit to</param>
        /// <param name="jobRecipeAudit">The audit to add</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddJobRecipeAuditAsyncWithHttpInfo (int? jobRecipeId, string jobRecipeAudit)
        {
            // verify the required parameter 'jobRecipeId' is set
            if (jobRecipeId == null)
                throw new ApiException(400, "Missing required parameter 'jobRecipeId' when calling JobRecipeApi->AddJobRecipeAudit");
            // verify the required parameter 'jobRecipeAudit' is set
            if (jobRecipeAudit == null)
                throw new ApiException(400, "Missing required parameter 'jobRecipeAudit' when calling JobRecipeApi->AddJobRecipeAudit");

            var localVarPath = "/beta/jobRecipe/{jobRecipeId}/audit/{jobRecipeAudit}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (jobRecipeId != null) localVarPathParams.Add("jobRecipeId", Configuration.ApiClient.ParameterToString(jobRecipeId)); // path parameter
            if (jobRecipeAudit != null) localVarPathParams.Add("jobRecipeAudit", Configuration.ApiClient.ParameterToString(jobRecipeAudit)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddJobRecipeAudit", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Attach a file to a jobRecipe Adds a file to an existing jobRecipe.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobRecipeId">Id of the jobRecipe to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns></returns>
        public void AddJobRecipeFile (int? jobRecipeId, string fileName)
        {
             AddJobRecipeFileWithHttpInfo(jobRecipeId, fileName);
        }

        /// <summary>
        /// Attach a file to a jobRecipe Adds a file to an existing jobRecipe.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobRecipeId">Id of the jobRecipe to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AddJobRecipeFileWithHttpInfo (int? jobRecipeId, string fileName)
        {
            // verify the required parameter 'jobRecipeId' is set
            if (jobRecipeId == null)
                throw new ApiException(400, "Missing required parameter 'jobRecipeId' when calling JobRecipeApi->AddJobRecipeFile");
            // verify the required parameter 'fileName' is set
            if (fileName == null)
                throw new ApiException(400, "Missing required parameter 'fileName' when calling JobRecipeApi->AddJobRecipeFile");

            var localVarPath = "/beta/jobRecipe/{jobRecipeId}/file/{fileName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (jobRecipeId != null) localVarPathParams.Add("jobRecipeId", Configuration.ApiClient.ParameterToString(jobRecipeId)); // path parameter
            if (fileName != null) localVarPathParams.Add("fileName", Configuration.ApiClient.ParameterToString(fileName)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddJobRecipeFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Attach a file to a jobRecipe Adds a file to an existing jobRecipe.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobRecipeId">Id of the jobRecipe to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddJobRecipeFileAsync (int? jobRecipeId, string fileName)
        {
             await AddJobRecipeFileAsyncWithHttpInfo(jobRecipeId, fileName);

        }

        /// <summary>
        /// Attach a file to a jobRecipe Adds a file to an existing jobRecipe.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobRecipeId">Id of the jobRecipe to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddJobRecipeFileAsyncWithHttpInfo (int? jobRecipeId, string fileName)
        {
            // verify the required parameter 'jobRecipeId' is set
            if (jobRecipeId == null)
                throw new ApiException(400, "Missing required parameter 'jobRecipeId' when calling JobRecipeApi->AddJobRecipeFile");
            // verify the required parameter 'fileName' is set
            if (fileName == null)
                throw new ApiException(400, "Missing required parameter 'fileName' when calling JobRecipeApi->AddJobRecipeFile");

            var localVarPath = "/beta/jobRecipe/{jobRecipeId}/file/{fileName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (jobRecipeId != null) localVarPathParams.Add("jobRecipeId", Configuration.ApiClient.ParameterToString(jobRecipeId)); // path parameter
            if (fileName != null) localVarPathParams.Add("fileName", Configuration.ApiClient.ParameterToString(fileName)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddJobRecipeFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Attach a file to a jobRecipe by URL. Adds a file to an existing jobRecipe by URL.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="jobRecipeId">Id of the jobRecipe to add an file to</param>
        /// <returns></returns>
        public void AddJobRecipeFileByURL (RecordFile body, int? jobRecipeId)
        {
             AddJobRecipeFileByURLWithHttpInfo(body, jobRecipeId);
        }

        /// <summary>
        /// Attach a file to a jobRecipe by URL. Adds a file to an existing jobRecipe by URL.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="jobRecipeId">Id of the jobRecipe to add an file to</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AddJobRecipeFileByURLWithHttpInfo (RecordFile body, int? jobRecipeId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling JobRecipeApi->AddJobRecipeFileByURL");
            // verify the required parameter 'jobRecipeId' is set
            if (jobRecipeId == null)
                throw new ApiException(400, "Missing required parameter 'jobRecipeId' when calling JobRecipeApi->AddJobRecipeFileByURL");

            var localVarPath = "/beta/jobRecipe/{jobRecipeId}/file";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (jobRecipeId != null) localVarPathParams.Add("jobRecipeId", Configuration.ApiClient.ParameterToString(jobRecipeId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddJobRecipeFileByURL", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Attach a file to a jobRecipe by URL. Adds a file to an existing jobRecipe by URL.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="jobRecipeId">Id of the jobRecipe to add an file to</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddJobRecipeFileByURLAsync (RecordFile body, int? jobRecipeId)
        {
             await AddJobRecipeFileByURLAsyncWithHttpInfo(body, jobRecipeId);

        }

        /// <summary>
        /// Attach a file to a jobRecipe by URL. Adds a file to an existing jobRecipe by URL.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="jobRecipeId">Id of the jobRecipe to add an file to</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddJobRecipeFileByURLAsyncWithHttpInfo (RecordFile body, int? jobRecipeId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling JobRecipeApi->AddJobRecipeFileByURL");
            // verify the required parameter 'jobRecipeId' is set
            if (jobRecipeId == null)
                throw new ApiException(400, "Missing required parameter 'jobRecipeId' when calling JobRecipeApi->AddJobRecipeFileByURL");

            var localVarPath = "/beta/jobRecipe/{jobRecipeId}/file";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (jobRecipeId != null) localVarPathParams.Add("jobRecipeId", Configuration.ApiClient.ParameterToString(jobRecipeId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddJobRecipeFileByURL", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Add new tags for a jobRecipe. Adds a tag to an existing jobRecipe.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobRecipeId">Id of the jobRecipe to add a tag to</param>
        /// <param name="jobRecipeTag">The tag to add</param>
        /// <returns></returns>
        public void AddJobRecipeTag (int? jobRecipeId, string jobRecipeTag)
        {
             AddJobRecipeTagWithHttpInfo(jobRecipeId, jobRecipeTag);
        }

        /// <summary>
        /// Add new tags for a jobRecipe. Adds a tag to an existing jobRecipe.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobRecipeId">Id of the jobRecipe to add a tag to</param>
        /// <param name="jobRecipeTag">The tag to add</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AddJobRecipeTagWithHttpInfo (int? jobRecipeId, string jobRecipeTag)
        {
            // verify the required parameter 'jobRecipeId' is set
            if (jobRecipeId == null)
                throw new ApiException(400, "Missing required parameter 'jobRecipeId' when calling JobRecipeApi->AddJobRecipeTag");
            // verify the required parameter 'jobRecipeTag' is set
            if (jobRecipeTag == null)
                throw new ApiException(400, "Missing required parameter 'jobRecipeTag' when calling JobRecipeApi->AddJobRecipeTag");

            var localVarPath = "/beta/jobRecipe/{jobRecipeId}/tag/{jobRecipeTag}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (jobRecipeId != null) localVarPathParams.Add("jobRecipeId", Configuration.ApiClient.ParameterToString(jobRecipeId)); // path parameter
            if (jobRecipeTag != null) localVarPathParams.Add("jobRecipeTag", Configuration.ApiClient.ParameterToString(jobRecipeTag)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddJobRecipeTag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Add new tags for a jobRecipe. Adds a tag to an existing jobRecipe.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobRecipeId">Id of the jobRecipe to add a tag to</param>
        /// <param name="jobRecipeTag">The tag to add</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddJobRecipeTagAsync (int? jobRecipeId, string jobRecipeTag)
        {
             await AddJobRecipeTagAsyncWithHttpInfo(jobRecipeId, jobRecipeTag);

        }

        /// <summary>
        /// Add new tags for a jobRecipe. Adds a tag to an existing jobRecipe.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobRecipeId">Id of the jobRecipe to add a tag to</param>
        /// <param name="jobRecipeTag">The tag to add</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddJobRecipeTagAsyncWithHttpInfo (int? jobRecipeId, string jobRecipeTag)
        {
            // verify the required parameter 'jobRecipeId' is set
            if (jobRecipeId == null)
                throw new ApiException(400, "Missing required parameter 'jobRecipeId' when calling JobRecipeApi->AddJobRecipeTag");
            // verify the required parameter 'jobRecipeTag' is set
            if (jobRecipeTag == null)
                throw new ApiException(400, "Missing required parameter 'jobRecipeTag' when calling JobRecipeApi->AddJobRecipeTag");

            var localVarPath = "/beta/jobRecipe/{jobRecipeId}/tag/{jobRecipeTag}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (jobRecipeId != null) localVarPathParams.Add("jobRecipeId", Configuration.ApiClient.ParameterToString(jobRecipeId)); // path parameter
            if (jobRecipeTag != null) localVarPathParams.Add("jobRecipeTag", Configuration.ApiClient.ParameterToString(jobRecipeTag)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddJobRecipeTag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a jobRecipe Deletes the jobRecipe identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobRecipeId">Id of the jobRecipe to be deleted.</param>
        /// <returns></returns>
        public void DeleteJobRecipe (int? jobRecipeId)
        {
             DeleteJobRecipeWithHttpInfo(jobRecipeId);
        }

        /// <summary>
        /// Delete a jobRecipe Deletes the jobRecipe identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobRecipeId">Id of the jobRecipe to be deleted.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteJobRecipeWithHttpInfo (int? jobRecipeId)
        {
            // verify the required parameter 'jobRecipeId' is set
            if (jobRecipeId == null)
                throw new ApiException(400, "Missing required parameter 'jobRecipeId' when calling JobRecipeApi->DeleteJobRecipe");

            var localVarPath = "/beta/jobRecipe/{jobRecipeId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (jobRecipeId != null) localVarPathParams.Add("jobRecipeId", Configuration.ApiClient.ParameterToString(jobRecipeId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteJobRecipe", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a jobRecipe Deletes the jobRecipe identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobRecipeId">Id of the jobRecipe to be deleted.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteJobRecipeAsync (int? jobRecipeId)
        {
             await DeleteJobRecipeAsyncWithHttpInfo(jobRecipeId);

        }

        /// <summary>
        /// Delete a jobRecipe Deletes the jobRecipe identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobRecipeId">Id of the jobRecipe to be deleted.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteJobRecipeAsyncWithHttpInfo (int? jobRecipeId)
        {
            // verify the required parameter 'jobRecipeId' is set
            if (jobRecipeId == null)
                throw new ApiException(400, "Missing required parameter 'jobRecipeId' when calling JobRecipeApi->DeleteJobRecipe");

            var localVarPath = "/beta/jobRecipe/{jobRecipeId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (jobRecipeId != null) localVarPathParams.Add("jobRecipeId", Configuration.ApiClient.ParameterToString(jobRecipeId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteJobRecipe", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a file for a jobRecipe. Deletes an existing jobRecipe file using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobRecipeId">Id of the jobRecipe to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns></returns>
        public void DeleteJobRecipeFile (int? jobRecipeId, int? fileId)
        {
             DeleteJobRecipeFileWithHttpInfo(jobRecipeId, fileId);
        }

        /// <summary>
        /// Delete a file for a jobRecipe. Deletes an existing jobRecipe file using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobRecipeId">Id of the jobRecipe to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteJobRecipeFileWithHttpInfo (int? jobRecipeId, int? fileId)
        {
            // verify the required parameter 'jobRecipeId' is set
            if (jobRecipeId == null)
                throw new ApiException(400, "Missing required parameter 'jobRecipeId' when calling JobRecipeApi->DeleteJobRecipeFile");
            // verify the required parameter 'fileId' is set
            if (fileId == null)
                throw new ApiException(400, "Missing required parameter 'fileId' when calling JobRecipeApi->DeleteJobRecipeFile");

            var localVarPath = "/beta/jobRecipe/{jobRecipeId}/file/{fileId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (jobRecipeId != null) localVarPathParams.Add("jobRecipeId", Configuration.ApiClient.ParameterToString(jobRecipeId)); // path parameter
            if (fileId != null) localVarPathParams.Add("fileId", Configuration.ApiClient.ParameterToString(fileId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteJobRecipeFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a file for a jobRecipe. Deletes an existing jobRecipe file using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobRecipeId">Id of the jobRecipe to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteJobRecipeFileAsync (int? jobRecipeId, int? fileId)
        {
             await DeleteJobRecipeFileAsyncWithHttpInfo(jobRecipeId, fileId);

        }

        /// <summary>
        /// Delete a file for a jobRecipe. Deletes an existing jobRecipe file using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobRecipeId">Id of the jobRecipe to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteJobRecipeFileAsyncWithHttpInfo (int? jobRecipeId, int? fileId)
        {
            // verify the required parameter 'jobRecipeId' is set
            if (jobRecipeId == null)
                throw new ApiException(400, "Missing required parameter 'jobRecipeId' when calling JobRecipeApi->DeleteJobRecipeFile");
            // verify the required parameter 'fileId' is set
            if (fileId == null)
                throw new ApiException(400, "Missing required parameter 'fileId' when calling JobRecipeApi->DeleteJobRecipeFile");

            var localVarPath = "/beta/jobRecipe/{jobRecipeId}/file/{fileId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (jobRecipeId != null) localVarPathParams.Add("jobRecipeId", Configuration.ApiClient.ParameterToString(jobRecipeId)); // path parameter
            if (fileId != null) localVarPathParams.Add("fileId", Configuration.ApiClient.ParameterToString(fileId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteJobRecipeFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a tag for a jobRecipe. Deletes an existing jobRecipe tag using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobRecipeId">Id of the jobRecipe to remove tag from</param>
        /// <param name="jobRecipeTag">The tag to delete</param>
        /// <returns></returns>
        public void DeleteJobRecipeTag (int? jobRecipeId, string jobRecipeTag)
        {
             DeleteJobRecipeTagWithHttpInfo(jobRecipeId, jobRecipeTag);
        }

        /// <summary>
        /// Delete a tag for a jobRecipe. Deletes an existing jobRecipe tag using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobRecipeId">Id of the jobRecipe to remove tag from</param>
        /// <param name="jobRecipeTag">The tag to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteJobRecipeTagWithHttpInfo (int? jobRecipeId, string jobRecipeTag)
        {
            // verify the required parameter 'jobRecipeId' is set
            if (jobRecipeId == null)
                throw new ApiException(400, "Missing required parameter 'jobRecipeId' when calling JobRecipeApi->DeleteJobRecipeTag");
            // verify the required parameter 'jobRecipeTag' is set
            if (jobRecipeTag == null)
                throw new ApiException(400, "Missing required parameter 'jobRecipeTag' when calling JobRecipeApi->DeleteJobRecipeTag");

            var localVarPath = "/beta/jobRecipe/{jobRecipeId}/tag/{jobRecipeTag}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (jobRecipeId != null) localVarPathParams.Add("jobRecipeId", Configuration.ApiClient.ParameterToString(jobRecipeId)); // path parameter
            if (jobRecipeTag != null) localVarPathParams.Add("jobRecipeTag", Configuration.ApiClient.ParameterToString(jobRecipeTag)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteJobRecipeTag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a tag for a jobRecipe. Deletes an existing jobRecipe tag using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobRecipeId">Id of the jobRecipe to remove tag from</param>
        /// <param name="jobRecipeTag">The tag to delete</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteJobRecipeTagAsync (int? jobRecipeId, string jobRecipeTag)
        {
             await DeleteJobRecipeTagAsyncWithHttpInfo(jobRecipeId, jobRecipeTag);

        }

        /// <summary>
        /// Delete a tag for a jobRecipe. Deletes an existing jobRecipe tag using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobRecipeId">Id of the jobRecipe to remove tag from</param>
        /// <param name="jobRecipeTag">The tag to delete</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteJobRecipeTagAsyncWithHttpInfo (int? jobRecipeId, string jobRecipeTag)
        {
            // verify the required parameter 'jobRecipeId' is set
            if (jobRecipeId == null)
                throw new ApiException(400, "Missing required parameter 'jobRecipeId' when calling JobRecipeApi->DeleteJobRecipeTag");
            // verify the required parameter 'jobRecipeTag' is set
            if (jobRecipeTag == null)
                throw new ApiException(400, "Missing required parameter 'jobRecipeTag' when calling JobRecipeApi->DeleteJobRecipeTag");

            var localVarPath = "/beta/jobRecipe/{jobRecipeId}/tag/{jobRecipeTag}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (jobRecipeId != null) localVarPathParams.Add("jobRecipeId", Configuration.ApiClient.ParameterToString(jobRecipeId)); // path parameter
            if (jobRecipeTag != null) localVarPathParams.Add("jobRecipeTag", Configuration.ApiClient.ParameterToString(jobRecipeTag)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteJobRecipeTag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get a duplicated a jobRecipe by id Returns a duplicated jobRecipe identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobRecipeId">Id of the jobRecipe to be duplicated.</param>
        /// <returns>JobRecipe</returns>
        public JobRecipe GetDuplicateJobRecipeById (int? jobRecipeId)
        {
             ApiResponse<JobRecipe> localVarResponse = GetDuplicateJobRecipeByIdWithHttpInfo(jobRecipeId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a duplicated a jobRecipe by id Returns a duplicated jobRecipe identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobRecipeId">Id of the jobRecipe to be duplicated.</param>
        /// <returns>ApiResponse of JobRecipe</returns>
        public ApiResponse< JobRecipe > GetDuplicateJobRecipeByIdWithHttpInfo (int? jobRecipeId)
        {
            // verify the required parameter 'jobRecipeId' is set
            if (jobRecipeId == null)
                throw new ApiException(400, "Missing required parameter 'jobRecipeId' when calling JobRecipeApi->GetDuplicateJobRecipeById");

            var localVarPath = "/beta/jobRecipe/duplicate/{jobRecipeId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (jobRecipeId != null) localVarPathParams.Add("jobRecipeId", Configuration.ApiClient.ParameterToString(jobRecipeId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDuplicateJobRecipeById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<JobRecipe>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (JobRecipe) Configuration.ApiClient.Deserialize(localVarResponse, typeof(JobRecipe)));
        }

        /// <summary>
        /// Get a duplicated a jobRecipe by id Returns a duplicated jobRecipe identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobRecipeId">Id of the jobRecipe to be duplicated.</param>
        /// <returns>Task of JobRecipe</returns>
        public async System.Threading.Tasks.Task<JobRecipe> GetDuplicateJobRecipeByIdAsync (int? jobRecipeId)
        {
             ApiResponse<JobRecipe> localVarResponse = await GetDuplicateJobRecipeByIdAsyncWithHttpInfo(jobRecipeId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a duplicated a jobRecipe by id Returns a duplicated jobRecipe identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobRecipeId">Id of the jobRecipe to be duplicated.</param>
        /// <returns>Task of ApiResponse (JobRecipe)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<JobRecipe>> GetDuplicateJobRecipeByIdAsyncWithHttpInfo (int? jobRecipeId)
        {
            // verify the required parameter 'jobRecipeId' is set
            if (jobRecipeId == null)
                throw new ApiException(400, "Missing required parameter 'jobRecipeId' when calling JobRecipeApi->GetDuplicateJobRecipeById");

            var localVarPath = "/beta/jobRecipe/duplicate/{jobRecipeId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (jobRecipeId != null) localVarPathParams.Add("jobRecipeId", Configuration.ApiClient.ParameterToString(jobRecipeId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDuplicateJobRecipeById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<JobRecipe>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (JobRecipe) Configuration.ApiClient.Deserialize(localVarResponse, typeof(JobRecipe)));
        }

        /// <summary>
        /// Search jobRecipes by filter Returns the list of jobRecipes that match the given filter.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>List&lt;JobRecipe&gt;</returns>
        public List<JobRecipe> GetJobRecipeByFilter (string filter = null, int? page = null, int? limit = null, string sort = null)
        {
             ApiResponse<List<JobRecipe>> localVarResponse = GetJobRecipeByFilterWithHttpInfo(filter, page, limit, sort);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Search jobRecipes by filter Returns the list of jobRecipes that match the given filter.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>ApiResponse of List&lt;JobRecipe&gt;</returns>
        public ApiResponse< List<JobRecipe> > GetJobRecipeByFilterWithHttpInfo (string filter = null, int? page = null, int? limit = null, string sort = null)
        {

            var localVarPath = "/beta/jobRecipe/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (filter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (page != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetJobRecipeByFilter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<JobRecipe>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<JobRecipe>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<JobRecipe>)));
        }

        /// <summary>
        /// Search jobRecipes by filter Returns the list of jobRecipes that match the given filter.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>Task of List&lt;JobRecipe&gt;</returns>
        public async System.Threading.Tasks.Task<List<JobRecipe>> GetJobRecipeByFilterAsync (string filter = null, int? page = null, int? limit = null, string sort = null)
        {
             ApiResponse<List<JobRecipe>> localVarResponse = await GetJobRecipeByFilterAsyncWithHttpInfo(filter, page, limit, sort);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Search jobRecipes by filter Returns the list of jobRecipes that match the given filter.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;JobRecipe&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<JobRecipe>>> GetJobRecipeByFilterAsyncWithHttpInfo (string filter = null, int? page = null, int? limit = null, string sort = null)
        {

            var localVarPath = "/beta/jobRecipe/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (filter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (page != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetJobRecipeByFilter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<JobRecipe>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<JobRecipe>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<JobRecipe>)));
        }

        /// <summary>
        /// Get a jobRecipe by id Returns the jobRecipe identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobRecipeId">Id of the jobRecipe to be returned.</param>
        /// <returns>JobRecipe</returns>
        public JobRecipe GetJobRecipeById (int? jobRecipeId)
        {
             ApiResponse<JobRecipe> localVarResponse = GetJobRecipeByIdWithHttpInfo(jobRecipeId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a jobRecipe by id Returns the jobRecipe identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobRecipeId">Id of the jobRecipe to be returned.</param>
        /// <returns>ApiResponse of JobRecipe</returns>
        public ApiResponse< JobRecipe > GetJobRecipeByIdWithHttpInfo (int? jobRecipeId)
        {
            // verify the required parameter 'jobRecipeId' is set
            if (jobRecipeId == null)
                throw new ApiException(400, "Missing required parameter 'jobRecipeId' when calling JobRecipeApi->GetJobRecipeById");

            var localVarPath = "/beta/jobRecipe/{jobRecipeId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (jobRecipeId != null) localVarPathParams.Add("jobRecipeId", Configuration.ApiClient.ParameterToString(jobRecipeId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetJobRecipeById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<JobRecipe>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (JobRecipe) Configuration.ApiClient.Deserialize(localVarResponse, typeof(JobRecipe)));
        }

        /// <summary>
        /// Get a jobRecipe by id Returns the jobRecipe identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobRecipeId">Id of the jobRecipe to be returned.</param>
        /// <returns>Task of JobRecipe</returns>
        public async System.Threading.Tasks.Task<JobRecipe> GetJobRecipeByIdAsync (int? jobRecipeId)
        {
             ApiResponse<JobRecipe> localVarResponse = await GetJobRecipeByIdAsyncWithHttpInfo(jobRecipeId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a jobRecipe by id Returns the jobRecipe identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobRecipeId">Id of the jobRecipe to be returned.</param>
        /// <returns>Task of ApiResponse (JobRecipe)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<JobRecipe>> GetJobRecipeByIdAsyncWithHttpInfo (int? jobRecipeId)
        {
            // verify the required parameter 'jobRecipeId' is set
            if (jobRecipeId == null)
                throw new ApiException(400, "Missing required parameter 'jobRecipeId' when calling JobRecipeApi->GetJobRecipeById");

            var localVarPath = "/beta/jobRecipe/{jobRecipeId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (jobRecipeId != null) localVarPathParams.Add("jobRecipeId", Configuration.ApiClient.ParameterToString(jobRecipeId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetJobRecipeById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<JobRecipe>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (JobRecipe) Configuration.ApiClient.Deserialize(localVarResponse, typeof(JobRecipe)));
        }

        /// <summary>
        /// Get the files for a jobRecipe. Get all existing jobRecipe files.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobRecipeId">Id of the jobRecipe to get files for</param>
        /// <returns></returns>
        public void GetJobRecipeFiles (int? jobRecipeId)
        {
             GetJobRecipeFilesWithHttpInfo(jobRecipeId);
        }

        /// <summary>
        /// Get the files for a jobRecipe. Get all existing jobRecipe files.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobRecipeId">Id of the jobRecipe to get files for</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GetJobRecipeFilesWithHttpInfo (int? jobRecipeId)
        {
            // verify the required parameter 'jobRecipeId' is set
            if (jobRecipeId == null)
                throw new ApiException(400, "Missing required parameter 'jobRecipeId' when calling JobRecipeApi->GetJobRecipeFiles");

            var localVarPath = "/beta/jobRecipe/{jobRecipeId}/file";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (jobRecipeId != null) localVarPathParams.Add("jobRecipeId", Configuration.ApiClient.ParameterToString(jobRecipeId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetJobRecipeFiles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get the files for a jobRecipe. Get all existing jobRecipe files.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobRecipeId">Id of the jobRecipe to get files for</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetJobRecipeFilesAsync (int? jobRecipeId)
        {
             await GetJobRecipeFilesAsyncWithHttpInfo(jobRecipeId);

        }

        /// <summary>
        /// Get the files for a jobRecipe. Get all existing jobRecipe files.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobRecipeId">Id of the jobRecipe to get files for</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetJobRecipeFilesAsyncWithHttpInfo (int? jobRecipeId)
        {
            // verify the required parameter 'jobRecipeId' is set
            if (jobRecipeId == null)
                throw new ApiException(400, "Missing required parameter 'jobRecipeId' when calling JobRecipeApi->GetJobRecipeFiles");

            var localVarPath = "/beta/jobRecipe/{jobRecipeId}/file";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (jobRecipeId != null) localVarPathParams.Add("jobRecipeId", Configuration.ApiClient.ParameterToString(jobRecipeId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetJobRecipeFiles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get the tags for a jobRecipe. Get all existing jobRecipe tags.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobRecipeId">Id of the jobRecipe to get tags for</param>
        /// <returns></returns>
        public void GetJobRecipeTags (int? jobRecipeId)
        {
             GetJobRecipeTagsWithHttpInfo(jobRecipeId);
        }

        /// <summary>
        /// Get the tags for a jobRecipe. Get all existing jobRecipe tags.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobRecipeId">Id of the jobRecipe to get tags for</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GetJobRecipeTagsWithHttpInfo (int? jobRecipeId)
        {
            // verify the required parameter 'jobRecipeId' is set
            if (jobRecipeId == null)
                throw new ApiException(400, "Missing required parameter 'jobRecipeId' when calling JobRecipeApi->GetJobRecipeTags");

            var localVarPath = "/beta/jobRecipe/{jobRecipeId}/tag";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (jobRecipeId != null) localVarPathParams.Add("jobRecipeId", Configuration.ApiClient.ParameterToString(jobRecipeId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetJobRecipeTags", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get the tags for a jobRecipe. Get all existing jobRecipe tags.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobRecipeId">Id of the jobRecipe to get tags for</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetJobRecipeTagsAsync (int? jobRecipeId)
        {
             await GetJobRecipeTagsAsyncWithHttpInfo(jobRecipeId);

        }

        /// <summary>
        /// Get the tags for a jobRecipe. Get all existing jobRecipe tags.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobRecipeId">Id of the jobRecipe to get tags for</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetJobRecipeTagsAsyncWithHttpInfo (int? jobRecipeId)
        {
            // verify the required parameter 'jobRecipeId' is set
            if (jobRecipeId == null)
                throw new ApiException(400, "Missing required parameter 'jobRecipeId' when calling JobRecipeApi->GetJobRecipeTags");

            var localVarPath = "/beta/jobRecipe/{jobRecipeId}/tag";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (jobRecipeId != null) localVarPathParams.Add("jobRecipeId", Configuration.ApiClient.ParameterToString(jobRecipeId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetJobRecipeTags", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update a jobRecipe Updates an existing jobRecipe using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JobRecipe to be updated.</param>
        /// <returns></returns>
        public void UpdateJobRecipe (JobRecipe body)
        {
             UpdateJobRecipeWithHttpInfo(body);
        }

        /// <summary>
        /// Update a jobRecipe Updates an existing jobRecipe using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JobRecipe to be updated.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateJobRecipeWithHttpInfo (JobRecipe body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling JobRecipeApi->UpdateJobRecipe");

            var localVarPath = "/beta/jobRecipe";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateJobRecipe", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update a jobRecipe Updates an existing jobRecipe using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JobRecipe to be updated.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateJobRecipeAsync (JobRecipe body)
        {
             await UpdateJobRecipeAsyncWithHttpInfo(body);

        }

        /// <summary>
        /// Update a jobRecipe Updates an existing jobRecipe using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JobRecipe to be updated.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateJobRecipeAsyncWithHttpInfo (JobRecipe body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling JobRecipeApi->UpdateJobRecipe");

            var localVarPath = "/beta/jobRecipe";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateJobRecipe", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update a jobRecipe custom fields Updates an existing jobRecipe custom fields using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JobRecipe to be updated.</param>
        /// <returns></returns>
        public void UpdateJobRecipeCustomFields (JobRecipe body)
        {
             UpdateJobRecipeCustomFieldsWithHttpInfo(body);
        }

        /// <summary>
        /// Update a jobRecipe custom fields Updates an existing jobRecipe custom fields using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JobRecipe to be updated.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateJobRecipeCustomFieldsWithHttpInfo (JobRecipe body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling JobRecipeApi->UpdateJobRecipeCustomFields");

            var localVarPath = "/beta/jobRecipe/customFields";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateJobRecipeCustomFields", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update a jobRecipe custom fields Updates an existing jobRecipe custom fields using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JobRecipe to be updated.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateJobRecipeCustomFieldsAsync (JobRecipe body)
        {
             await UpdateJobRecipeCustomFieldsAsyncWithHttpInfo(body);

        }

        /// <summary>
        /// Update a jobRecipe custom fields Updates an existing jobRecipe custom fields using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JobRecipe to be updated.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateJobRecipeCustomFieldsAsyncWithHttpInfo (JobRecipe body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling JobRecipeApi->UpdateJobRecipeCustomFields");

            var localVarPath = "/beta/jobRecipe/customFields";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateJobRecipeCustomFields", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

    }
}
