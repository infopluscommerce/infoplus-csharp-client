/* 
 * Infoplus API
 *
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Infoplus.Client;
using Infoplus.Model;

namespace Infoplus.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IJobTimeApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create a jobTime
        /// </summary>
        /// <remarks>
        /// Inserts a new jobTime using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JobTime to be inserted.</param>
        /// <returns>JobTime</returns>
        JobTime AddJobTime (JobTime body);

        /// <summary>
        /// Create a jobTime
        /// </summary>
        /// <remarks>
        /// Inserts a new jobTime using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JobTime to be inserted.</param>
        /// <returns>ApiResponse of JobTime</returns>
        ApiResponse<JobTime> AddJobTimeWithHttpInfo (JobTime body);
        /// <summary>
        /// Add new audit for a jobTime
        /// </summary>
        /// <remarks>
        /// Adds an audit to an existing jobTime.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobTimeId">Id of the jobTime to add an audit to</param>
        /// <param name="jobTimeAudit">The audit to add</param>
        /// <returns></returns>
        void AddJobTimeAudit (int? jobTimeId, string jobTimeAudit);

        /// <summary>
        /// Add new audit for a jobTime
        /// </summary>
        /// <remarks>
        /// Adds an audit to an existing jobTime.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobTimeId">Id of the jobTime to add an audit to</param>
        /// <param name="jobTimeAudit">The audit to add</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddJobTimeAuditWithHttpInfo (int? jobTimeId, string jobTimeAudit);
        /// <summary>
        /// Attach a file to a jobTime
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing jobTime.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobTimeId">Id of the jobTime to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns></returns>
        void AddJobTimeFile (int? jobTimeId, string fileName);

        /// <summary>
        /// Attach a file to a jobTime
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing jobTime.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobTimeId">Id of the jobTime to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddJobTimeFileWithHttpInfo (int? jobTimeId, string fileName);
        /// <summary>
        /// Attach a file to a jobTime by URL.
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing jobTime by URL.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="jobTimeId">Id of the jobTime to add an file to</param>
        /// <returns></returns>
        void AddJobTimeFileByURL (RecordFile body, int? jobTimeId);

        /// <summary>
        /// Attach a file to a jobTime by URL.
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing jobTime by URL.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="jobTimeId">Id of the jobTime to add an file to</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddJobTimeFileByURLWithHttpInfo (RecordFile body, int? jobTimeId);
        /// <summary>
        /// Add new tags for a jobTime.
        /// </summary>
        /// <remarks>
        /// Adds a tag to an existing jobTime.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobTimeId">Id of the jobTime to add a tag to</param>
        /// <param name="jobTimeTag">The tag to add</param>
        /// <returns></returns>
        void AddJobTimeTag (int? jobTimeId, string jobTimeTag);

        /// <summary>
        /// Add new tags for a jobTime.
        /// </summary>
        /// <remarks>
        /// Adds a tag to an existing jobTime.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobTimeId">Id of the jobTime to add a tag to</param>
        /// <param name="jobTimeTag">The tag to add</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddJobTimeTagWithHttpInfo (int? jobTimeId, string jobTimeTag);
        /// <summary>
        /// Delete a jobTime
        /// </summary>
        /// <remarks>
        /// Deletes the jobTime identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobTimeId">Id of the jobTime to be deleted.</param>
        /// <returns></returns>
        void DeleteJobTime (int? jobTimeId);

        /// <summary>
        /// Delete a jobTime
        /// </summary>
        /// <remarks>
        /// Deletes the jobTime identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobTimeId">Id of the jobTime to be deleted.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteJobTimeWithHttpInfo (int? jobTimeId);
        /// <summary>
        /// Delete a file for a jobTime.
        /// </summary>
        /// <remarks>
        /// Deletes an existing jobTime file using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobTimeId">Id of the jobTime to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns></returns>
        void DeleteJobTimeFile (int? jobTimeId, int? fileId);

        /// <summary>
        /// Delete a file for a jobTime.
        /// </summary>
        /// <remarks>
        /// Deletes an existing jobTime file using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobTimeId">Id of the jobTime to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteJobTimeFileWithHttpInfo (int? jobTimeId, int? fileId);
        /// <summary>
        /// Delete a tag for a jobTime.
        /// </summary>
        /// <remarks>
        /// Deletes an existing jobTime tag using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobTimeId">Id of the jobTime to remove tag from</param>
        /// <param name="jobTimeTag">The tag to delete</param>
        /// <returns></returns>
        void DeleteJobTimeTag (int? jobTimeId, string jobTimeTag);

        /// <summary>
        /// Delete a tag for a jobTime.
        /// </summary>
        /// <remarks>
        /// Deletes an existing jobTime tag using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobTimeId">Id of the jobTime to remove tag from</param>
        /// <param name="jobTimeTag">The tag to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteJobTimeTagWithHttpInfo (int? jobTimeId, string jobTimeTag);
        /// <summary>
        /// Get a duplicated a jobTime by id
        /// </summary>
        /// <remarks>
        /// Returns a duplicated jobTime identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobTimeId">Id of the jobTime to be duplicated.</param>
        /// <returns>JobTime</returns>
        JobTime GetDuplicateJobTimeById (int? jobTimeId);

        /// <summary>
        /// Get a duplicated a jobTime by id
        /// </summary>
        /// <remarks>
        /// Returns a duplicated jobTime identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobTimeId">Id of the jobTime to be duplicated.</param>
        /// <returns>ApiResponse of JobTime</returns>
        ApiResponse<JobTime> GetDuplicateJobTimeByIdWithHttpInfo (int? jobTimeId);
        /// <summary>
        /// Search jobTimes by filter
        /// </summary>
        /// <remarks>
        /// Returns the list of jobTimes that match the given filter.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>List&lt;JobTime&gt;</returns>
        List<JobTime> GetJobTimeByFilter (string filter = null, int? page = null, int? limit = null, string sort = null);

        /// <summary>
        /// Search jobTimes by filter
        /// </summary>
        /// <remarks>
        /// Returns the list of jobTimes that match the given filter.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>ApiResponse of List&lt;JobTime&gt;</returns>
        ApiResponse<List<JobTime>> GetJobTimeByFilterWithHttpInfo (string filter = null, int? page = null, int? limit = null, string sort = null);
        /// <summary>
        /// Get a jobTime by id
        /// </summary>
        /// <remarks>
        /// Returns the jobTime identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobTimeId">Id of the jobTime to be returned.</param>
        /// <returns>JobTime</returns>
        JobTime GetJobTimeById (int? jobTimeId);

        /// <summary>
        /// Get a jobTime by id
        /// </summary>
        /// <remarks>
        /// Returns the jobTime identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobTimeId">Id of the jobTime to be returned.</param>
        /// <returns>ApiResponse of JobTime</returns>
        ApiResponse<JobTime> GetJobTimeByIdWithHttpInfo (int? jobTimeId);
        /// <summary>
        /// Get the files for a jobTime.
        /// </summary>
        /// <remarks>
        /// Get all existing jobTime files.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobTimeId">Id of the jobTime to get files for</param>
        /// <returns></returns>
        void GetJobTimeFiles (int? jobTimeId);

        /// <summary>
        /// Get the files for a jobTime.
        /// </summary>
        /// <remarks>
        /// Get all existing jobTime files.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobTimeId">Id of the jobTime to get files for</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetJobTimeFilesWithHttpInfo (int? jobTimeId);
        /// <summary>
        /// Get the tags for a jobTime.
        /// </summary>
        /// <remarks>
        /// Get all existing jobTime tags.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobTimeId">Id of the jobTime to get tags for</param>
        /// <returns></returns>
        void GetJobTimeTags (int? jobTimeId);

        /// <summary>
        /// Get the tags for a jobTime.
        /// </summary>
        /// <remarks>
        /// Get all existing jobTime tags.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobTimeId">Id of the jobTime to get tags for</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetJobTimeTagsWithHttpInfo (int? jobTimeId);
        /// <summary>
        /// Update a jobTime
        /// </summary>
        /// <remarks>
        /// Updates an existing jobTime using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JobTime to be updated.</param>
        /// <returns></returns>
        void UpdateJobTime (JobTime body);

        /// <summary>
        /// Update a jobTime
        /// </summary>
        /// <remarks>
        /// Updates an existing jobTime using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JobTime to be updated.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateJobTimeWithHttpInfo (JobTime body);
        /// <summary>
        /// Update a jobTime custom fields
        /// </summary>
        /// <remarks>
        /// Updates an existing jobTime custom fields using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JobTime to be updated.</param>
        /// <returns></returns>
        void UpdateJobTimeCustomFields (JobTime body);

        /// <summary>
        /// Update a jobTime custom fields
        /// </summary>
        /// <remarks>
        /// Updates an existing jobTime custom fields using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JobTime to be updated.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateJobTimeCustomFieldsWithHttpInfo (JobTime body);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create a jobTime
        /// </summary>
        /// <remarks>
        /// Inserts a new jobTime using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JobTime to be inserted.</param>
        /// <returns>Task of JobTime</returns>
        System.Threading.Tasks.Task<JobTime> AddJobTimeAsync (JobTime body);

        /// <summary>
        /// Create a jobTime
        /// </summary>
        /// <remarks>
        /// Inserts a new jobTime using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JobTime to be inserted.</param>
        /// <returns>Task of ApiResponse (JobTime)</returns>
        System.Threading.Tasks.Task<ApiResponse<JobTime>> AddJobTimeAsyncWithHttpInfo (JobTime body);
        /// <summary>
        /// Add new audit for a jobTime
        /// </summary>
        /// <remarks>
        /// Adds an audit to an existing jobTime.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobTimeId">Id of the jobTime to add an audit to</param>
        /// <param name="jobTimeAudit">The audit to add</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddJobTimeAuditAsync (int? jobTimeId, string jobTimeAudit);

        /// <summary>
        /// Add new audit for a jobTime
        /// </summary>
        /// <remarks>
        /// Adds an audit to an existing jobTime.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobTimeId">Id of the jobTime to add an audit to</param>
        /// <param name="jobTimeAudit">The audit to add</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddJobTimeAuditAsyncWithHttpInfo (int? jobTimeId, string jobTimeAudit);
        /// <summary>
        /// Attach a file to a jobTime
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing jobTime.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobTimeId">Id of the jobTime to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddJobTimeFileAsync (int? jobTimeId, string fileName);

        /// <summary>
        /// Attach a file to a jobTime
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing jobTime.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobTimeId">Id of the jobTime to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddJobTimeFileAsyncWithHttpInfo (int? jobTimeId, string fileName);
        /// <summary>
        /// Attach a file to a jobTime by URL.
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing jobTime by URL.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="jobTimeId">Id of the jobTime to add an file to</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddJobTimeFileByURLAsync (RecordFile body, int? jobTimeId);

        /// <summary>
        /// Attach a file to a jobTime by URL.
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing jobTime by URL.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="jobTimeId">Id of the jobTime to add an file to</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddJobTimeFileByURLAsyncWithHttpInfo (RecordFile body, int? jobTimeId);
        /// <summary>
        /// Add new tags for a jobTime.
        /// </summary>
        /// <remarks>
        /// Adds a tag to an existing jobTime.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobTimeId">Id of the jobTime to add a tag to</param>
        /// <param name="jobTimeTag">The tag to add</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddJobTimeTagAsync (int? jobTimeId, string jobTimeTag);

        /// <summary>
        /// Add new tags for a jobTime.
        /// </summary>
        /// <remarks>
        /// Adds a tag to an existing jobTime.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobTimeId">Id of the jobTime to add a tag to</param>
        /// <param name="jobTimeTag">The tag to add</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddJobTimeTagAsyncWithHttpInfo (int? jobTimeId, string jobTimeTag);
        /// <summary>
        /// Delete a jobTime
        /// </summary>
        /// <remarks>
        /// Deletes the jobTime identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobTimeId">Id of the jobTime to be deleted.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteJobTimeAsync (int? jobTimeId);

        /// <summary>
        /// Delete a jobTime
        /// </summary>
        /// <remarks>
        /// Deletes the jobTime identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobTimeId">Id of the jobTime to be deleted.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteJobTimeAsyncWithHttpInfo (int? jobTimeId);
        /// <summary>
        /// Delete a file for a jobTime.
        /// </summary>
        /// <remarks>
        /// Deletes an existing jobTime file using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobTimeId">Id of the jobTime to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteJobTimeFileAsync (int? jobTimeId, int? fileId);

        /// <summary>
        /// Delete a file for a jobTime.
        /// </summary>
        /// <remarks>
        /// Deletes an existing jobTime file using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobTimeId">Id of the jobTime to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteJobTimeFileAsyncWithHttpInfo (int? jobTimeId, int? fileId);
        /// <summary>
        /// Delete a tag for a jobTime.
        /// </summary>
        /// <remarks>
        /// Deletes an existing jobTime tag using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobTimeId">Id of the jobTime to remove tag from</param>
        /// <param name="jobTimeTag">The tag to delete</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteJobTimeTagAsync (int? jobTimeId, string jobTimeTag);

        /// <summary>
        /// Delete a tag for a jobTime.
        /// </summary>
        /// <remarks>
        /// Deletes an existing jobTime tag using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobTimeId">Id of the jobTime to remove tag from</param>
        /// <param name="jobTimeTag">The tag to delete</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteJobTimeTagAsyncWithHttpInfo (int? jobTimeId, string jobTimeTag);
        /// <summary>
        /// Get a duplicated a jobTime by id
        /// </summary>
        /// <remarks>
        /// Returns a duplicated jobTime identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobTimeId">Id of the jobTime to be duplicated.</param>
        /// <returns>Task of JobTime</returns>
        System.Threading.Tasks.Task<JobTime> GetDuplicateJobTimeByIdAsync (int? jobTimeId);

        /// <summary>
        /// Get a duplicated a jobTime by id
        /// </summary>
        /// <remarks>
        /// Returns a duplicated jobTime identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobTimeId">Id of the jobTime to be duplicated.</param>
        /// <returns>Task of ApiResponse (JobTime)</returns>
        System.Threading.Tasks.Task<ApiResponse<JobTime>> GetDuplicateJobTimeByIdAsyncWithHttpInfo (int? jobTimeId);
        /// <summary>
        /// Search jobTimes by filter
        /// </summary>
        /// <remarks>
        /// Returns the list of jobTimes that match the given filter.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>Task of List&lt;JobTime&gt;</returns>
        System.Threading.Tasks.Task<List<JobTime>> GetJobTimeByFilterAsync (string filter = null, int? page = null, int? limit = null, string sort = null);

        /// <summary>
        /// Search jobTimes by filter
        /// </summary>
        /// <remarks>
        /// Returns the list of jobTimes that match the given filter.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;JobTime&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<JobTime>>> GetJobTimeByFilterAsyncWithHttpInfo (string filter = null, int? page = null, int? limit = null, string sort = null);
        /// <summary>
        /// Get a jobTime by id
        /// </summary>
        /// <remarks>
        /// Returns the jobTime identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobTimeId">Id of the jobTime to be returned.</param>
        /// <returns>Task of JobTime</returns>
        System.Threading.Tasks.Task<JobTime> GetJobTimeByIdAsync (int? jobTimeId);

        /// <summary>
        /// Get a jobTime by id
        /// </summary>
        /// <remarks>
        /// Returns the jobTime identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobTimeId">Id of the jobTime to be returned.</param>
        /// <returns>Task of ApiResponse (JobTime)</returns>
        System.Threading.Tasks.Task<ApiResponse<JobTime>> GetJobTimeByIdAsyncWithHttpInfo (int? jobTimeId);
        /// <summary>
        /// Get the files for a jobTime.
        /// </summary>
        /// <remarks>
        /// Get all existing jobTime files.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobTimeId">Id of the jobTime to get files for</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetJobTimeFilesAsync (int? jobTimeId);

        /// <summary>
        /// Get the files for a jobTime.
        /// </summary>
        /// <remarks>
        /// Get all existing jobTime files.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobTimeId">Id of the jobTime to get files for</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetJobTimeFilesAsyncWithHttpInfo (int? jobTimeId);
        /// <summary>
        /// Get the tags for a jobTime.
        /// </summary>
        /// <remarks>
        /// Get all existing jobTime tags.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobTimeId">Id of the jobTime to get tags for</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetJobTimeTagsAsync (int? jobTimeId);

        /// <summary>
        /// Get the tags for a jobTime.
        /// </summary>
        /// <remarks>
        /// Get all existing jobTime tags.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobTimeId">Id of the jobTime to get tags for</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetJobTimeTagsAsyncWithHttpInfo (int? jobTimeId);
        /// <summary>
        /// Update a jobTime
        /// </summary>
        /// <remarks>
        /// Updates an existing jobTime using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JobTime to be updated.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateJobTimeAsync (JobTime body);

        /// <summary>
        /// Update a jobTime
        /// </summary>
        /// <remarks>
        /// Updates an existing jobTime using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JobTime to be updated.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateJobTimeAsyncWithHttpInfo (JobTime body);
        /// <summary>
        /// Update a jobTime custom fields
        /// </summary>
        /// <remarks>
        /// Updates an existing jobTime custom fields using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JobTime to be updated.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateJobTimeCustomFieldsAsync (JobTime body);

        /// <summary>
        /// Update a jobTime custom fields
        /// </summary>
        /// <remarks>
        /// Updates an existing jobTime custom fields using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JobTime to be updated.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateJobTimeCustomFieldsAsyncWithHttpInfo (JobTime body);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class JobTimeApi : IJobTimeApi
    {
        private Infoplus.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="JobTimeApi"/> class.
        /// </summary>
        /// <returns></returns>
        public JobTimeApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = Infoplus.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="JobTimeApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public JobTimeApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Infoplus.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Infoplus.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create a jobTime Inserts a new jobTime using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JobTime to be inserted.</param>
        /// <returns>JobTime</returns>
        public JobTime AddJobTime (JobTime body)
        {
             ApiResponse<JobTime> localVarResponse = AddJobTimeWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a jobTime Inserts a new jobTime using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JobTime to be inserted.</param>
        /// <returns>ApiResponse of JobTime</returns>
        public ApiResponse< JobTime > AddJobTimeWithHttpInfo (JobTime body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling JobTimeApi->AddJobTime");

            var localVarPath = "/beta/jobTime";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddJobTime", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<JobTime>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (JobTime) Configuration.ApiClient.Deserialize(localVarResponse, typeof(JobTime)));
        }

        /// <summary>
        /// Create a jobTime Inserts a new jobTime using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JobTime to be inserted.</param>
        /// <returns>Task of JobTime</returns>
        public async System.Threading.Tasks.Task<JobTime> AddJobTimeAsync (JobTime body)
        {
             ApiResponse<JobTime> localVarResponse = await AddJobTimeAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a jobTime Inserts a new jobTime using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JobTime to be inserted.</param>
        /// <returns>Task of ApiResponse (JobTime)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<JobTime>> AddJobTimeAsyncWithHttpInfo (JobTime body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling JobTimeApi->AddJobTime");

            var localVarPath = "/beta/jobTime";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddJobTime", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<JobTime>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (JobTime) Configuration.ApiClient.Deserialize(localVarResponse, typeof(JobTime)));
        }

        /// <summary>
        /// Add new audit for a jobTime Adds an audit to an existing jobTime.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobTimeId">Id of the jobTime to add an audit to</param>
        /// <param name="jobTimeAudit">The audit to add</param>
        /// <returns></returns>
        public void AddJobTimeAudit (int? jobTimeId, string jobTimeAudit)
        {
             AddJobTimeAuditWithHttpInfo(jobTimeId, jobTimeAudit);
        }

        /// <summary>
        /// Add new audit for a jobTime Adds an audit to an existing jobTime.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobTimeId">Id of the jobTime to add an audit to</param>
        /// <param name="jobTimeAudit">The audit to add</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AddJobTimeAuditWithHttpInfo (int? jobTimeId, string jobTimeAudit)
        {
            // verify the required parameter 'jobTimeId' is set
            if (jobTimeId == null)
                throw new ApiException(400, "Missing required parameter 'jobTimeId' when calling JobTimeApi->AddJobTimeAudit");
            // verify the required parameter 'jobTimeAudit' is set
            if (jobTimeAudit == null)
                throw new ApiException(400, "Missing required parameter 'jobTimeAudit' when calling JobTimeApi->AddJobTimeAudit");

            var localVarPath = "/beta/jobTime/{jobTimeId}/audit/{jobTimeAudit}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (jobTimeId != null) localVarPathParams.Add("jobTimeId", Configuration.ApiClient.ParameterToString(jobTimeId)); // path parameter
            if (jobTimeAudit != null) localVarPathParams.Add("jobTimeAudit", Configuration.ApiClient.ParameterToString(jobTimeAudit)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddJobTimeAudit", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Add new audit for a jobTime Adds an audit to an existing jobTime.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobTimeId">Id of the jobTime to add an audit to</param>
        /// <param name="jobTimeAudit">The audit to add</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddJobTimeAuditAsync (int? jobTimeId, string jobTimeAudit)
        {
             await AddJobTimeAuditAsyncWithHttpInfo(jobTimeId, jobTimeAudit);

        }

        /// <summary>
        /// Add new audit for a jobTime Adds an audit to an existing jobTime.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobTimeId">Id of the jobTime to add an audit to</param>
        /// <param name="jobTimeAudit">The audit to add</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddJobTimeAuditAsyncWithHttpInfo (int? jobTimeId, string jobTimeAudit)
        {
            // verify the required parameter 'jobTimeId' is set
            if (jobTimeId == null)
                throw new ApiException(400, "Missing required parameter 'jobTimeId' when calling JobTimeApi->AddJobTimeAudit");
            // verify the required parameter 'jobTimeAudit' is set
            if (jobTimeAudit == null)
                throw new ApiException(400, "Missing required parameter 'jobTimeAudit' when calling JobTimeApi->AddJobTimeAudit");

            var localVarPath = "/beta/jobTime/{jobTimeId}/audit/{jobTimeAudit}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (jobTimeId != null) localVarPathParams.Add("jobTimeId", Configuration.ApiClient.ParameterToString(jobTimeId)); // path parameter
            if (jobTimeAudit != null) localVarPathParams.Add("jobTimeAudit", Configuration.ApiClient.ParameterToString(jobTimeAudit)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddJobTimeAudit", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Attach a file to a jobTime Adds a file to an existing jobTime.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobTimeId">Id of the jobTime to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns></returns>
        public void AddJobTimeFile (int? jobTimeId, string fileName)
        {
             AddJobTimeFileWithHttpInfo(jobTimeId, fileName);
        }

        /// <summary>
        /// Attach a file to a jobTime Adds a file to an existing jobTime.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobTimeId">Id of the jobTime to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AddJobTimeFileWithHttpInfo (int? jobTimeId, string fileName)
        {
            // verify the required parameter 'jobTimeId' is set
            if (jobTimeId == null)
                throw new ApiException(400, "Missing required parameter 'jobTimeId' when calling JobTimeApi->AddJobTimeFile");
            // verify the required parameter 'fileName' is set
            if (fileName == null)
                throw new ApiException(400, "Missing required parameter 'fileName' when calling JobTimeApi->AddJobTimeFile");

            var localVarPath = "/beta/jobTime/{jobTimeId}/file/{fileName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (jobTimeId != null) localVarPathParams.Add("jobTimeId", Configuration.ApiClient.ParameterToString(jobTimeId)); // path parameter
            if (fileName != null) localVarPathParams.Add("fileName", Configuration.ApiClient.ParameterToString(fileName)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddJobTimeFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Attach a file to a jobTime Adds a file to an existing jobTime.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobTimeId">Id of the jobTime to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddJobTimeFileAsync (int? jobTimeId, string fileName)
        {
             await AddJobTimeFileAsyncWithHttpInfo(jobTimeId, fileName);

        }

        /// <summary>
        /// Attach a file to a jobTime Adds a file to an existing jobTime.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobTimeId">Id of the jobTime to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddJobTimeFileAsyncWithHttpInfo (int? jobTimeId, string fileName)
        {
            // verify the required parameter 'jobTimeId' is set
            if (jobTimeId == null)
                throw new ApiException(400, "Missing required parameter 'jobTimeId' when calling JobTimeApi->AddJobTimeFile");
            // verify the required parameter 'fileName' is set
            if (fileName == null)
                throw new ApiException(400, "Missing required parameter 'fileName' when calling JobTimeApi->AddJobTimeFile");

            var localVarPath = "/beta/jobTime/{jobTimeId}/file/{fileName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (jobTimeId != null) localVarPathParams.Add("jobTimeId", Configuration.ApiClient.ParameterToString(jobTimeId)); // path parameter
            if (fileName != null) localVarPathParams.Add("fileName", Configuration.ApiClient.ParameterToString(fileName)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddJobTimeFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Attach a file to a jobTime by URL. Adds a file to an existing jobTime by URL.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="jobTimeId">Id of the jobTime to add an file to</param>
        /// <returns></returns>
        public void AddJobTimeFileByURL (RecordFile body, int? jobTimeId)
        {
             AddJobTimeFileByURLWithHttpInfo(body, jobTimeId);
        }

        /// <summary>
        /// Attach a file to a jobTime by URL. Adds a file to an existing jobTime by URL.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="jobTimeId">Id of the jobTime to add an file to</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AddJobTimeFileByURLWithHttpInfo (RecordFile body, int? jobTimeId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling JobTimeApi->AddJobTimeFileByURL");
            // verify the required parameter 'jobTimeId' is set
            if (jobTimeId == null)
                throw new ApiException(400, "Missing required parameter 'jobTimeId' when calling JobTimeApi->AddJobTimeFileByURL");

            var localVarPath = "/beta/jobTime/{jobTimeId}/file";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (jobTimeId != null) localVarPathParams.Add("jobTimeId", Configuration.ApiClient.ParameterToString(jobTimeId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddJobTimeFileByURL", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Attach a file to a jobTime by URL. Adds a file to an existing jobTime by URL.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="jobTimeId">Id of the jobTime to add an file to</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddJobTimeFileByURLAsync (RecordFile body, int? jobTimeId)
        {
             await AddJobTimeFileByURLAsyncWithHttpInfo(body, jobTimeId);

        }

        /// <summary>
        /// Attach a file to a jobTime by URL. Adds a file to an existing jobTime by URL.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="jobTimeId">Id of the jobTime to add an file to</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddJobTimeFileByURLAsyncWithHttpInfo (RecordFile body, int? jobTimeId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling JobTimeApi->AddJobTimeFileByURL");
            // verify the required parameter 'jobTimeId' is set
            if (jobTimeId == null)
                throw new ApiException(400, "Missing required parameter 'jobTimeId' when calling JobTimeApi->AddJobTimeFileByURL");

            var localVarPath = "/beta/jobTime/{jobTimeId}/file";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (jobTimeId != null) localVarPathParams.Add("jobTimeId", Configuration.ApiClient.ParameterToString(jobTimeId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddJobTimeFileByURL", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Add new tags for a jobTime. Adds a tag to an existing jobTime.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobTimeId">Id of the jobTime to add a tag to</param>
        /// <param name="jobTimeTag">The tag to add</param>
        /// <returns></returns>
        public void AddJobTimeTag (int? jobTimeId, string jobTimeTag)
        {
             AddJobTimeTagWithHttpInfo(jobTimeId, jobTimeTag);
        }

        /// <summary>
        /// Add new tags for a jobTime. Adds a tag to an existing jobTime.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobTimeId">Id of the jobTime to add a tag to</param>
        /// <param name="jobTimeTag">The tag to add</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AddJobTimeTagWithHttpInfo (int? jobTimeId, string jobTimeTag)
        {
            // verify the required parameter 'jobTimeId' is set
            if (jobTimeId == null)
                throw new ApiException(400, "Missing required parameter 'jobTimeId' when calling JobTimeApi->AddJobTimeTag");
            // verify the required parameter 'jobTimeTag' is set
            if (jobTimeTag == null)
                throw new ApiException(400, "Missing required parameter 'jobTimeTag' when calling JobTimeApi->AddJobTimeTag");

            var localVarPath = "/beta/jobTime/{jobTimeId}/tag/{jobTimeTag}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (jobTimeId != null) localVarPathParams.Add("jobTimeId", Configuration.ApiClient.ParameterToString(jobTimeId)); // path parameter
            if (jobTimeTag != null) localVarPathParams.Add("jobTimeTag", Configuration.ApiClient.ParameterToString(jobTimeTag)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddJobTimeTag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Add new tags for a jobTime. Adds a tag to an existing jobTime.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobTimeId">Id of the jobTime to add a tag to</param>
        /// <param name="jobTimeTag">The tag to add</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddJobTimeTagAsync (int? jobTimeId, string jobTimeTag)
        {
             await AddJobTimeTagAsyncWithHttpInfo(jobTimeId, jobTimeTag);

        }

        /// <summary>
        /// Add new tags for a jobTime. Adds a tag to an existing jobTime.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobTimeId">Id of the jobTime to add a tag to</param>
        /// <param name="jobTimeTag">The tag to add</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddJobTimeTagAsyncWithHttpInfo (int? jobTimeId, string jobTimeTag)
        {
            // verify the required parameter 'jobTimeId' is set
            if (jobTimeId == null)
                throw new ApiException(400, "Missing required parameter 'jobTimeId' when calling JobTimeApi->AddJobTimeTag");
            // verify the required parameter 'jobTimeTag' is set
            if (jobTimeTag == null)
                throw new ApiException(400, "Missing required parameter 'jobTimeTag' when calling JobTimeApi->AddJobTimeTag");

            var localVarPath = "/beta/jobTime/{jobTimeId}/tag/{jobTimeTag}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (jobTimeId != null) localVarPathParams.Add("jobTimeId", Configuration.ApiClient.ParameterToString(jobTimeId)); // path parameter
            if (jobTimeTag != null) localVarPathParams.Add("jobTimeTag", Configuration.ApiClient.ParameterToString(jobTimeTag)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddJobTimeTag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a jobTime Deletes the jobTime identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobTimeId">Id of the jobTime to be deleted.</param>
        /// <returns></returns>
        public void DeleteJobTime (int? jobTimeId)
        {
             DeleteJobTimeWithHttpInfo(jobTimeId);
        }

        /// <summary>
        /// Delete a jobTime Deletes the jobTime identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobTimeId">Id of the jobTime to be deleted.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteJobTimeWithHttpInfo (int? jobTimeId)
        {
            // verify the required parameter 'jobTimeId' is set
            if (jobTimeId == null)
                throw new ApiException(400, "Missing required parameter 'jobTimeId' when calling JobTimeApi->DeleteJobTime");

            var localVarPath = "/beta/jobTime/{jobTimeId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (jobTimeId != null) localVarPathParams.Add("jobTimeId", Configuration.ApiClient.ParameterToString(jobTimeId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteJobTime", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a jobTime Deletes the jobTime identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobTimeId">Id of the jobTime to be deleted.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteJobTimeAsync (int? jobTimeId)
        {
             await DeleteJobTimeAsyncWithHttpInfo(jobTimeId);

        }

        /// <summary>
        /// Delete a jobTime Deletes the jobTime identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobTimeId">Id of the jobTime to be deleted.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteJobTimeAsyncWithHttpInfo (int? jobTimeId)
        {
            // verify the required parameter 'jobTimeId' is set
            if (jobTimeId == null)
                throw new ApiException(400, "Missing required parameter 'jobTimeId' when calling JobTimeApi->DeleteJobTime");

            var localVarPath = "/beta/jobTime/{jobTimeId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (jobTimeId != null) localVarPathParams.Add("jobTimeId", Configuration.ApiClient.ParameterToString(jobTimeId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteJobTime", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a file for a jobTime. Deletes an existing jobTime file using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobTimeId">Id of the jobTime to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns></returns>
        public void DeleteJobTimeFile (int? jobTimeId, int? fileId)
        {
             DeleteJobTimeFileWithHttpInfo(jobTimeId, fileId);
        }

        /// <summary>
        /// Delete a file for a jobTime. Deletes an existing jobTime file using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobTimeId">Id of the jobTime to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteJobTimeFileWithHttpInfo (int? jobTimeId, int? fileId)
        {
            // verify the required parameter 'jobTimeId' is set
            if (jobTimeId == null)
                throw new ApiException(400, "Missing required parameter 'jobTimeId' when calling JobTimeApi->DeleteJobTimeFile");
            // verify the required parameter 'fileId' is set
            if (fileId == null)
                throw new ApiException(400, "Missing required parameter 'fileId' when calling JobTimeApi->DeleteJobTimeFile");

            var localVarPath = "/beta/jobTime/{jobTimeId}/file/{fileId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (jobTimeId != null) localVarPathParams.Add("jobTimeId", Configuration.ApiClient.ParameterToString(jobTimeId)); // path parameter
            if (fileId != null) localVarPathParams.Add("fileId", Configuration.ApiClient.ParameterToString(fileId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteJobTimeFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a file for a jobTime. Deletes an existing jobTime file using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobTimeId">Id of the jobTime to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteJobTimeFileAsync (int? jobTimeId, int? fileId)
        {
             await DeleteJobTimeFileAsyncWithHttpInfo(jobTimeId, fileId);

        }

        /// <summary>
        /// Delete a file for a jobTime. Deletes an existing jobTime file using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobTimeId">Id of the jobTime to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteJobTimeFileAsyncWithHttpInfo (int? jobTimeId, int? fileId)
        {
            // verify the required parameter 'jobTimeId' is set
            if (jobTimeId == null)
                throw new ApiException(400, "Missing required parameter 'jobTimeId' when calling JobTimeApi->DeleteJobTimeFile");
            // verify the required parameter 'fileId' is set
            if (fileId == null)
                throw new ApiException(400, "Missing required parameter 'fileId' when calling JobTimeApi->DeleteJobTimeFile");

            var localVarPath = "/beta/jobTime/{jobTimeId}/file/{fileId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (jobTimeId != null) localVarPathParams.Add("jobTimeId", Configuration.ApiClient.ParameterToString(jobTimeId)); // path parameter
            if (fileId != null) localVarPathParams.Add("fileId", Configuration.ApiClient.ParameterToString(fileId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteJobTimeFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a tag for a jobTime. Deletes an existing jobTime tag using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobTimeId">Id of the jobTime to remove tag from</param>
        /// <param name="jobTimeTag">The tag to delete</param>
        /// <returns></returns>
        public void DeleteJobTimeTag (int? jobTimeId, string jobTimeTag)
        {
             DeleteJobTimeTagWithHttpInfo(jobTimeId, jobTimeTag);
        }

        /// <summary>
        /// Delete a tag for a jobTime. Deletes an existing jobTime tag using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobTimeId">Id of the jobTime to remove tag from</param>
        /// <param name="jobTimeTag">The tag to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteJobTimeTagWithHttpInfo (int? jobTimeId, string jobTimeTag)
        {
            // verify the required parameter 'jobTimeId' is set
            if (jobTimeId == null)
                throw new ApiException(400, "Missing required parameter 'jobTimeId' when calling JobTimeApi->DeleteJobTimeTag");
            // verify the required parameter 'jobTimeTag' is set
            if (jobTimeTag == null)
                throw new ApiException(400, "Missing required parameter 'jobTimeTag' when calling JobTimeApi->DeleteJobTimeTag");

            var localVarPath = "/beta/jobTime/{jobTimeId}/tag/{jobTimeTag}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (jobTimeId != null) localVarPathParams.Add("jobTimeId", Configuration.ApiClient.ParameterToString(jobTimeId)); // path parameter
            if (jobTimeTag != null) localVarPathParams.Add("jobTimeTag", Configuration.ApiClient.ParameterToString(jobTimeTag)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteJobTimeTag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a tag for a jobTime. Deletes an existing jobTime tag using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobTimeId">Id of the jobTime to remove tag from</param>
        /// <param name="jobTimeTag">The tag to delete</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteJobTimeTagAsync (int? jobTimeId, string jobTimeTag)
        {
             await DeleteJobTimeTagAsyncWithHttpInfo(jobTimeId, jobTimeTag);

        }

        /// <summary>
        /// Delete a tag for a jobTime. Deletes an existing jobTime tag using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobTimeId">Id of the jobTime to remove tag from</param>
        /// <param name="jobTimeTag">The tag to delete</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteJobTimeTagAsyncWithHttpInfo (int? jobTimeId, string jobTimeTag)
        {
            // verify the required parameter 'jobTimeId' is set
            if (jobTimeId == null)
                throw new ApiException(400, "Missing required parameter 'jobTimeId' when calling JobTimeApi->DeleteJobTimeTag");
            // verify the required parameter 'jobTimeTag' is set
            if (jobTimeTag == null)
                throw new ApiException(400, "Missing required parameter 'jobTimeTag' when calling JobTimeApi->DeleteJobTimeTag");

            var localVarPath = "/beta/jobTime/{jobTimeId}/tag/{jobTimeTag}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (jobTimeId != null) localVarPathParams.Add("jobTimeId", Configuration.ApiClient.ParameterToString(jobTimeId)); // path parameter
            if (jobTimeTag != null) localVarPathParams.Add("jobTimeTag", Configuration.ApiClient.ParameterToString(jobTimeTag)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteJobTimeTag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get a duplicated a jobTime by id Returns a duplicated jobTime identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobTimeId">Id of the jobTime to be duplicated.</param>
        /// <returns>JobTime</returns>
        public JobTime GetDuplicateJobTimeById (int? jobTimeId)
        {
             ApiResponse<JobTime> localVarResponse = GetDuplicateJobTimeByIdWithHttpInfo(jobTimeId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a duplicated a jobTime by id Returns a duplicated jobTime identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobTimeId">Id of the jobTime to be duplicated.</param>
        /// <returns>ApiResponse of JobTime</returns>
        public ApiResponse< JobTime > GetDuplicateJobTimeByIdWithHttpInfo (int? jobTimeId)
        {
            // verify the required parameter 'jobTimeId' is set
            if (jobTimeId == null)
                throw new ApiException(400, "Missing required parameter 'jobTimeId' when calling JobTimeApi->GetDuplicateJobTimeById");

            var localVarPath = "/beta/jobTime/duplicate/{jobTimeId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (jobTimeId != null) localVarPathParams.Add("jobTimeId", Configuration.ApiClient.ParameterToString(jobTimeId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDuplicateJobTimeById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<JobTime>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (JobTime) Configuration.ApiClient.Deserialize(localVarResponse, typeof(JobTime)));
        }

        /// <summary>
        /// Get a duplicated a jobTime by id Returns a duplicated jobTime identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobTimeId">Id of the jobTime to be duplicated.</param>
        /// <returns>Task of JobTime</returns>
        public async System.Threading.Tasks.Task<JobTime> GetDuplicateJobTimeByIdAsync (int? jobTimeId)
        {
             ApiResponse<JobTime> localVarResponse = await GetDuplicateJobTimeByIdAsyncWithHttpInfo(jobTimeId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a duplicated a jobTime by id Returns a duplicated jobTime identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobTimeId">Id of the jobTime to be duplicated.</param>
        /// <returns>Task of ApiResponse (JobTime)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<JobTime>> GetDuplicateJobTimeByIdAsyncWithHttpInfo (int? jobTimeId)
        {
            // verify the required parameter 'jobTimeId' is set
            if (jobTimeId == null)
                throw new ApiException(400, "Missing required parameter 'jobTimeId' when calling JobTimeApi->GetDuplicateJobTimeById");

            var localVarPath = "/beta/jobTime/duplicate/{jobTimeId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (jobTimeId != null) localVarPathParams.Add("jobTimeId", Configuration.ApiClient.ParameterToString(jobTimeId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDuplicateJobTimeById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<JobTime>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (JobTime) Configuration.ApiClient.Deserialize(localVarResponse, typeof(JobTime)));
        }

        /// <summary>
        /// Search jobTimes by filter Returns the list of jobTimes that match the given filter.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>List&lt;JobTime&gt;</returns>
        public List<JobTime> GetJobTimeByFilter (string filter = null, int? page = null, int? limit = null, string sort = null)
        {
             ApiResponse<List<JobTime>> localVarResponse = GetJobTimeByFilterWithHttpInfo(filter, page, limit, sort);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Search jobTimes by filter Returns the list of jobTimes that match the given filter.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>ApiResponse of List&lt;JobTime&gt;</returns>
        public ApiResponse< List<JobTime> > GetJobTimeByFilterWithHttpInfo (string filter = null, int? page = null, int? limit = null, string sort = null)
        {

            var localVarPath = "/beta/jobTime/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (filter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (page != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetJobTimeByFilter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<JobTime>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<JobTime>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<JobTime>)));
        }

        /// <summary>
        /// Search jobTimes by filter Returns the list of jobTimes that match the given filter.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>Task of List&lt;JobTime&gt;</returns>
        public async System.Threading.Tasks.Task<List<JobTime>> GetJobTimeByFilterAsync (string filter = null, int? page = null, int? limit = null, string sort = null)
        {
             ApiResponse<List<JobTime>> localVarResponse = await GetJobTimeByFilterAsyncWithHttpInfo(filter, page, limit, sort);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Search jobTimes by filter Returns the list of jobTimes that match the given filter.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;JobTime&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<JobTime>>> GetJobTimeByFilterAsyncWithHttpInfo (string filter = null, int? page = null, int? limit = null, string sort = null)
        {

            var localVarPath = "/beta/jobTime/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (filter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (page != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetJobTimeByFilter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<JobTime>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<JobTime>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<JobTime>)));
        }

        /// <summary>
        /// Get a jobTime by id Returns the jobTime identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobTimeId">Id of the jobTime to be returned.</param>
        /// <returns>JobTime</returns>
        public JobTime GetJobTimeById (int? jobTimeId)
        {
             ApiResponse<JobTime> localVarResponse = GetJobTimeByIdWithHttpInfo(jobTimeId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a jobTime by id Returns the jobTime identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobTimeId">Id of the jobTime to be returned.</param>
        /// <returns>ApiResponse of JobTime</returns>
        public ApiResponse< JobTime > GetJobTimeByIdWithHttpInfo (int? jobTimeId)
        {
            // verify the required parameter 'jobTimeId' is set
            if (jobTimeId == null)
                throw new ApiException(400, "Missing required parameter 'jobTimeId' when calling JobTimeApi->GetJobTimeById");

            var localVarPath = "/beta/jobTime/{jobTimeId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (jobTimeId != null) localVarPathParams.Add("jobTimeId", Configuration.ApiClient.ParameterToString(jobTimeId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetJobTimeById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<JobTime>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (JobTime) Configuration.ApiClient.Deserialize(localVarResponse, typeof(JobTime)));
        }

        /// <summary>
        /// Get a jobTime by id Returns the jobTime identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobTimeId">Id of the jobTime to be returned.</param>
        /// <returns>Task of JobTime</returns>
        public async System.Threading.Tasks.Task<JobTime> GetJobTimeByIdAsync (int? jobTimeId)
        {
             ApiResponse<JobTime> localVarResponse = await GetJobTimeByIdAsyncWithHttpInfo(jobTimeId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a jobTime by id Returns the jobTime identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobTimeId">Id of the jobTime to be returned.</param>
        /// <returns>Task of ApiResponse (JobTime)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<JobTime>> GetJobTimeByIdAsyncWithHttpInfo (int? jobTimeId)
        {
            // verify the required parameter 'jobTimeId' is set
            if (jobTimeId == null)
                throw new ApiException(400, "Missing required parameter 'jobTimeId' when calling JobTimeApi->GetJobTimeById");

            var localVarPath = "/beta/jobTime/{jobTimeId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (jobTimeId != null) localVarPathParams.Add("jobTimeId", Configuration.ApiClient.ParameterToString(jobTimeId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetJobTimeById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<JobTime>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (JobTime) Configuration.ApiClient.Deserialize(localVarResponse, typeof(JobTime)));
        }

        /// <summary>
        /// Get the files for a jobTime. Get all existing jobTime files.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobTimeId">Id of the jobTime to get files for</param>
        /// <returns></returns>
        public void GetJobTimeFiles (int? jobTimeId)
        {
             GetJobTimeFilesWithHttpInfo(jobTimeId);
        }

        /// <summary>
        /// Get the files for a jobTime. Get all existing jobTime files.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobTimeId">Id of the jobTime to get files for</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GetJobTimeFilesWithHttpInfo (int? jobTimeId)
        {
            // verify the required parameter 'jobTimeId' is set
            if (jobTimeId == null)
                throw new ApiException(400, "Missing required parameter 'jobTimeId' when calling JobTimeApi->GetJobTimeFiles");

            var localVarPath = "/beta/jobTime/{jobTimeId}/file";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (jobTimeId != null) localVarPathParams.Add("jobTimeId", Configuration.ApiClient.ParameterToString(jobTimeId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetJobTimeFiles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get the files for a jobTime. Get all existing jobTime files.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobTimeId">Id of the jobTime to get files for</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetJobTimeFilesAsync (int? jobTimeId)
        {
             await GetJobTimeFilesAsyncWithHttpInfo(jobTimeId);

        }

        /// <summary>
        /// Get the files for a jobTime. Get all existing jobTime files.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobTimeId">Id of the jobTime to get files for</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetJobTimeFilesAsyncWithHttpInfo (int? jobTimeId)
        {
            // verify the required parameter 'jobTimeId' is set
            if (jobTimeId == null)
                throw new ApiException(400, "Missing required parameter 'jobTimeId' when calling JobTimeApi->GetJobTimeFiles");

            var localVarPath = "/beta/jobTime/{jobTimeId}/file";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (jobTimeId != null) localVarPathParams.Add("jobTimeId", Configuration.ApiClient.ParameterToString(jobTimeId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetJobTimeFiles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get the tags for a jobTime. Get all existing jobTime tags.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobTimeId">Id of the jobTime to get tags for</param>
        /// <returns></returns>
        public void GetJobTimeTags (int? jobTimeId)
        {
             GetJobTimeTagsWithHttpInfo(jobTimeId);
        }

        /// <summary>
        /// Get the tags for a jobTime. Get all existing jobTime tags.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobTimeId">Id of the jobTime to get tags for</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GetJobTimeTagsWithHttpInfo (int? jobTimeId)
        {
            // verify the required parameter 'jobTimeId' is set
            if (jobTimeId == null)
                throw new ApiException(400, "Missing required parameter 'jobTimeId' when calling JobTimeApi->GetJobTimeTags");

            var localVarPath = "/beta/jobTime/{jobTimeId}/tag";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (jobTimeId != null) localVarPathParams.Add("jobTimeId", Configuration.ApiClient.ParameterToString(jobTimeId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetJobTimeTags", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get the tags for a jobTime. Get all existing jobTime tags.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobTimeId">Id of the jobTime to get tags for</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetJobTimeTagsAsync (int? jobTimeId)
        {
             await GetJobTimeTagsAsyncWithHttpInfo(jobTimeId);

        }

        /// <summary>
        /// Get the tags for a jobTime. Get all existing jobTime tags.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobTimeId">Id of the jobTime to get tags for</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetJobTimeTagsAsyncWithHttpInfo (int? jobTimeId)
        {
            // verify the required parameter 'jobTimeId' is set
            if (jobTimeId == null)
                throw new ApiException(400, "Missing required parameter 'jobTimeId' when calling JobTimeApi->GetJobTimeTags");

            var localVarPath = "/beta/jobTime/{jobTimeId}/tag";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (jobTimeId != null) localVarPathParams.Add("jobTimeId", Configuration.ApiClient.ParameterToString(jobTimeId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetJobTimeTags", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update a jobTime Updates an existing jobTime using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JobTime to be updated.</param>
        /// <returns></returns>
        public void UpdateJobTime (JobTime body)
        {
             UpdateJobTimeWithHttpInfo(body);
        }

        /// <summary>
        /// Update a jobTime Updates an existing jobTime using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JobTime to be updated.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateJobTimeWithHttpInfo (JobTime body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling JobTimeApi->UpdateJobTime");

            var localVarPath = "/beta/jobTime";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateJobTime", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update a jobTime Updates an existing jobTime using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JobTime to be updated.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateJobTimeAsync (JobTime body)
        {
             await UpdateJobTimeAsyncWithHttpInfo(body);

        }

        /// <summary>
        /// Update a jobTime Updates an existing jobTime using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JobTime to be updated.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateJobTimeAsyncWithHttpInfo (JobTime body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling JobTimeApi->UpdateJobTime");

            var localVarPath = "/beta/jobTime";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateJobTime", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update a jobTime custom fields Updates an existing jobTime custom fields using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JobTime to be updated.</param>
        /// <returns></returns>
        public void UpdateJobTimeCustomFields (JobTime body)
        {
             UpdateJobTimeCustomFieldsWithHttpInfo(body);
        }

        /// <summary>
        /// Update a jobTime custom fields Updates an existing jobTime custom fields using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JobTime to be updated.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateJobTimeCustomFieldsWithHttpInfo (JobTime body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling JobTimeApi->UpdateJobTimeCustomFields");

            var localVarPath = "/beta/jobTime/customFields";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateJobTimeCustomFields", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update a jobTime custom fields Updates an existing jobTime custom fields using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JobTime to be updated.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateJobTimeCustomFieldsAsync (JobTime body)
        {
             await UpdateJobTimeCustomFieldsAsyncWithHttpInfo(body);

        }

        /// <summary>
        /// Update a jobTime custom fields Updates an existing jobTime custom fields using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JobTime to be updated.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateJobTimeCustomFieldsAsyncWithHttpInfo (JobTime body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling JobTimeApi->UpdateJobTimeCustomFields");

            var localVarPath = "/beta/jobTime/customFields";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateJobTimeCustomFields", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

    }
}
