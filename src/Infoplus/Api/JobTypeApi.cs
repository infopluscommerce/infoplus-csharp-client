/* 
 * Infoplus API
 *
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Infoplus.Client;
using Infoplus.Model;

namespace Infoplus.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IJobTypeApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create a jobType
        /// </summary>
        /// <remarks>
        /// Inserts a new jobType using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JobType to be inserted.</param>
        /// <returns>JobType</returns>
        JobType AddJobType (JobType body);

        /// <summary>
        /// Create a jobType
        /// </summary>
        /// <remarks>
        /// Inserts a new jobType using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JobType to be inserted.</param>
        /// <returns>ApiResponse of JobType</returns>
        ApiResponse<JobType> AddJobTypeWithHttpInfo (JobType body);
        /// <summary>
        /// Add new audit for a jobType
        /// </summary>
        /// <remarks>
        /// Adds an audit to an existing jobType.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobTypeId">Id of the jobType to add an audit to</param>
        /// <param name="jobTypeAudit">The audit to add</param>
        /// <returns></returns>
        void AddJobTypeAudit (int? jobTypeId, string jobTypeAudit);

        /// <summary>
        /// Add new audit for a jobType
        /// </summary>
        /// <remarks>
        /// Adds an audit to an existing jobType.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobTypeId">Id of the jobType to add an audit to</param>
        /// <param name="jobTypeAudit">The audit to add</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddJobTypeAuditWithHttpInfo (int? jobTypeId, string jobTypeAudit);
        /// <summary>
        /// Attach a file to a jobType
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing jobType.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobTypeId">Id of the jobType to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns></returns>
        void AddJobTypeFile (int? jobTypeId, string fileName);

        /// <summary>
        /// Attach a file to a jobType
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing jobType.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobTypeId">Id of the jobType to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddJobTypeFileWithHttpInfo (int? jobTypeId, string fileName);
        /// <summary>
        /// Attach a file to a jobType by URL.
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing jobType by URL.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="jobTypeId">Id of the jobType to add an file to</param>
        /// <returns></returns>
        void AddJobTypeFileByURL (RecordFile body, int? jobTypeId);

        /// <summary>
        /// Attach a file to a jobType by URL.
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing jobType by URL.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="jobTypeId">Id of the jobType to add an file to</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddJobTypeFileByURLWithHttpInfo (RecordFile body, int? jobTypeId);
        /// <summary>
        /// Add new tags for a jobType.
        /// </summary>
        /// <remarks>
        /// Adds a tag to an existing jobType.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobTypeId">Id of the jobType to add a tag to</param>
        /// <param name="jobTypeTag">The tag to add</param>
        /// <returns></returns>
        void AddJobTypeTag (int? jobTypeId, string jobTypeTag);

        /// <summary>
        /// Add new tags for a jobType.
        /// </summary>
        /// <remarks>
        /// Adds a tag to an existing jobType.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobTypeId">Id of the jobType to add a tag to</param>
        /// <param name="jobTypeTag">The tag to add</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddJobTypeTagWithHttpInfo (int? jobTypeId, string jobTypeTag);
        /// <summary>
        /// Delete a jobType
        /// </summary>
        /// <remarks>
        /// Deletes the jobType identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobTypeId">Id of the jobType to be deleted.</param>
        /// <returns></returns>
        void DeleteJobType (int? jobTypeId);

        /// <summary>
        /// Delete a jobType
        /// </summary>
        /// <remarks>
        /// Deletes the jobType identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobTypeId">Id of the jobType to be deleted.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteJobTypeWithHttpInfo (int? jobTypeId);
        /// <summary>
        /// Delete a file for a jobType.
        /// </summary>
        /// <remarks>
        /// Deletes an existing jobType file using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobTypeId">Id of the jobType to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns></returns>
        void DeleteJobTypeFile (int? jobTypeId, int? fileId);

        /// <summary>
        /// Delete a file for a jobType.
        /// </summary>
        /// <remarks>
        /// Deletes an existing jobType file using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobTypeId">Id of the jobType to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteJobTypeFileWithHttpInfo (int? jobTypeId, int? fileId);
        /// <summary>
        /// Delete a tag for a jobType.
        /// </summary>
        /// <remarks>
        /// Deletes an existing jobType tag using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobTypeId">Id of the jobType to remove tag from</param>
        /// <param name="jobTypeTag">The tag to delete</param>
        /// <returns></returns>
        void DeleteJobTypeTag (int? jobTypeId, string jobTypeTag);

        /// <summary>
        /// Delete a tag for a jobType.
        /// </summary>
        /// <remarks>
        /// Deletes an existing jobType tag using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobTypeId">Id of the jobType to remove tag from</param>
        /// <param name="jobTypeTag">The tag to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteJobTypeTagWithHttpInfo (int? jobTypeId, string jobTypeTag);
        /// <summary>
        /// Get a duplicated a jobType by id
        /// </summary>
        /// <remarks>
        /// Returns a duplicated jobType identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobTypeId">Id of the jobType to be duplicated.</param>
        /// <returns>JobType</returns>
        JobType GetDuplicateJobTypeById (int? jobTypeId);

        /// <summary>
        /// Get a duplicated a jobType by id
        /// </summary>
        /// <remarks>
        /// Returns a duplicated jobType identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobTypeId">Id of the jobType to be duplicated.</param>
        /// <returns>ApiResponse of JobType</returns>
        ApiResponse<JobType> GetDuplicateJobTypeByIdWithHttpInfo (int? jobTypeId);
        /// <summary>
        /// Search jobTypes by filter
        /// </summary>
        /// <remarks>
        /// Returns the list of jobTypes that match the given filter.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>List&lt;JobType&gt;</returns>
        List<JobType> GetJobTypeByFilter (string filter = null, int? page = null, int? limit = null, string sort = null);

        /// <summary>
        /// Search jobTypes by filter
        /// </summary>
        /// <remarks>
        /// Returns the list of jobTypes that match the given filter.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>ApiResponse of List&lt;JobType&gt;</returns>
        ApiResponse<List<JobType>> GetJobTypeByFilterWithHttpInfo (string filter = null, int? page = null, int? limit = null, string sort = null);
        /// <summary>
        /// Get a jobType by id
        /// </summary>
        /// <remarks>
        /// Returns the jobType identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobTypeId">Id of the jobType to be returned.</param>
        /// <returns>JobType</returns>
        JobType GetJobTypeById (int? jobTypeId);

        /// <summary>
        /// Get a jobType by id
        /// </summary>
        /// <remarks>
        /// Returns the jobType identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobTypeId">Id of the jobType to be returned.</param>
        /// <returns>ApiResponse of JobType</returns>
        ApiResponse<JobType> GetJobTypeByIdWithHttpInfo (int? jobTypeId);
        /// <summary>
        /// Get the files for a jobType.
        /// </summary>
        /// <remarks>
        /// Get all existing jobType files.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobTypeId">Id of the jobType to get files for</param>
        /// <returns></returns>
        void GetJobTypeFiles (int? jobTypeId);

        /// <summary>
        /// Get the files for a jobType.
        /// </summary>
        /// <remarks>
        /// Get all existing jobType files.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobTypeId">Id of the jobType to get files for</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetJobTypeFilesWithHttpInfo (int? jobTypeId);
        /// <summary>
        /// Get the tags for a jobType.
        /// </summary>
        /// <remarks>
        /// Get all existing jobType tags.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobTypeId">Id of the jobType to get tags for</param>
        /// <returns></returns>
        void GetJobTypeTags (int? jobTypeId);

        /// <summary>
        /// Get the tags for a jobType.
        /// </summary>
        /// <remarks>
        /// Get all existing jobType tags.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobTypeId">Id of the jobType to get tags for</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetJobTypeTagsWithHttpInfo (int? jobTypeId);
        /// <summary>
        /// Update a jobType
        /// </summary>
        /// <remarks>
        /// Updates an existing jobType using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JobType to be updated.</param>
        /// <returns></returns>
        void UpdateJobType (JobType body);

        /// <summary>
        /// Update a jobType
        /// </summary>
        /// <remarks>
        /// Updates an existing jobType using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JobType to be updated.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateJobTypeWithHttpInfo (JobType body);
        /// <summary>
        /// Update a jobType custom fields
        /// </summary>
        /// <remarks>
        /// Updates an existing jobType custom fields using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JobType to be updated.</param>
        /// <returns></returns>
        void UpdateJobTypeCustomFields (JobType body);

        /// <summary>
        /// Update a jobType custom fields
        /// </summary>
        /// <remarks>
        /// Updates an existing jobType custom fields using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JobType to be updated.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateJobTypeCustomFieldsWithHttpInfo (JobType body);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create a jobType
        /// </summary>
        /// <remarks>
        /// Inserts a new jobType using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JobType to be inserted.</param>
        /// <returns>Task of JobType</returns>
        System.Threading.Tasks.Task<JobType> AddJobTypeAsync (JobType body);

        /// <summary>
        /// Create a jobType
        /// </summary>
        /// <remarks>
        /// Inserts a new jobType using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JobType to be inserted.</param>
        /// <returns>Task of ApiResponse (JobType)</returns>
        System.Threading.Tasks.Task<ApiResponse<JobType>> AddJobTypeAsyncWithHttpInfo (JobType body);
        /// <summary>
        /// Add new audit for a jobType
        /// </summary>
        /// <remarks>
        /// Adds an audit to an existing jobType.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobTypeId">Id of the jobType to add an audit to</param>
        /// <param name="jobTypeAudit">The audit to add</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddJobTypeAuditAsync (int? jobTypeId, string jobTypeAudit);

        /// <summary>
        /// Add new audit for a jobType
        /// </summary>
        /// <remarks>
        /// Adds an audit to an existing jobType.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobTypeId">Id of the jobType to add an audit to</param>
        /// <param name="jobTypeAudit">The audit to add</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddJobTypeAuditAsyncWithHttpInfo (int? jobTypeId, string jobTypeAudit);
        /// <summary>
        /// Attach a file to a jobType
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing jobType.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobTypeId">Id of the jobType to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddJobTypeFileAsync (int? jobTypeId, string fileName);

        /// <summary>
        /// Attach a file to a jobType
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing jobType.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobTypeId">Id of the jobType to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddJobTypeFileAsyncWithHttpInfo (int? jobTypeId, string fileName);
        /// <summary>
        /// Attach a file to a jobType by URL.
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing jobType by URL.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="jobTypeId">Id of the jobType to add an file to</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddJobTypeFileByURLAsync (RecordFile body, int? jobTypeId);

        /// <summary>
        /// Attach a file to a jobType by URL.
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing jobType by URL.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="jobTypeId">Id of the jobType to add an file to</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddJobTypeFileByURLAsyncWithHttpInfo (RecordFile body, int? jobTypeId);
        /// <summary>
        /// Add new tags for a jobType.
        /// </summary>
        /// <remarks>
        /// Adds a tag to an existing jobType.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobTypeId">Id of the jobType to add a tag to</param>
        /// <param name="jobTypeTag">The tag to add</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddJobTypeTagAsync (int? jobTypeId, string jobTypeTag);

        /// <summary>
        /// Add new tags for a jobType.
        /// </summary>
        /// <remarks>
        /// Adds a tag to an existing jobType.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobTypeId">Id of the jobType to add a tag to</param>
        /// <param name="jobTypeTag">The tag to add</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddJobTypeTagAsyncWithHttpInfo (int? jobTypeId, string jobTypeTag);
        /// <summary>
        /// Delete a jobType
        /// </summary>
        /// <remarks>
        /// Deletes the jobType identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobTypeId">Id of the jobType to be deleted.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteJobTypeAsync (int? jobTypeId);

        /// <summary>
        /// Delete a jobType
        /// </summary>
        /// <remarks>
        /// Deletes the jobType identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobTypeId">Id of the jobType to be deleted.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteJobTypeAsyncWithHttpInfo (int? jobTypeId);
        /// <summary>
        /// Delete a file for a jobType.
        /// </summary>
        /// <remarks>
        /// Deletes an existing jobType file using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobTypeId">Id of the jobType to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteJobTypeFileAsync (int? jobTypeId, int? fileId);

        /// <summary>
        /// Delete a file for a jobType.
        /// </summary>
        /// <remarks>
        /// Deletes an existing jobType file using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobTypeId">Id of the jobType to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteJobTypeFileAsyncWithHttpInfo (int? jobTypeId, int? fileId);
        /// <summary>
        /// Delete a tag for a jobType.
        /// </summary>
        /// <remarks>
        /// Deletes an existing jobType tag using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobTypeId">Id of the jobType to remove tag from</param>
        /// <param name="jobTypeTag">The tag to delete</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteJobTypeTagAsync (int? jobTypeId, string jobTypeTag);

        /// <summary>
        /// Delete a tag for a jobType.
        /// </summary>
        /// <remarks>
        /// Deletes an existing jobType tag using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobTypeId">Id of the jobType to remove tag from</param>
        /// <param name="jobTypeTag">The tag to delete</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteJobTypeTagAsyncWithHttpInfo (int? jobTypeId, string jobTypeTag);
        /// <summary>
        /// Get a duplicated a jobType by id
        /// </summary>
        /// <remarks>
        /// Returns a duplicated jobType identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobTypeId">Id of the jobType to be duplicated.</param>
        /// <returns>Task of JobType</returns>
        System.Threading.Tasks.Task<JobType> GetDuplicateJobTypeByIdAsync (int? jobTypeId);

        /// <summary>
        /// Get a duplicated a jobType by id
        /// </summary>
        /// <remarks>
        /// Returns a duplicated jobType identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobTypeId">Id of the jobType to be duplicated.</param>
        /// <returns>Task of ApiResponse (JobType)</returns>
        System.Threading.Tasks.Task<ApiResponse<JobType>> GetDuplicateJobTypeByIdAsyncWithHttpInfo (int? jobTypeId);
        /// <summary>
        /// Search jobTypes by filter
        /// </summary>
        /// <remarks>
        /// Returns the list of jobTypes that match the given filter.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>Task of List&lt;JobType&gt;</returns>
        System.Threading.Tasks.Task<List<JobType>> GetJobTypeByFilterAsync (string filter = null, int? page = null, int? limit = null, string sort = null);

        /// <summary>
        /// Search jobTypes by filter
        /// </summary>
        /// <remarks>
        /// Returns the list of jobTypes that match the given filter.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;JobType&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<JobType>>> GetJobTypeByFilterAsyncWithHttpInfo (string filter = null, int? page = null, int? limit = null, string sort = null);
        /// <summary>
        /// Get a jobType by id
        /// </summary>
        /// <remarks>
        /// Returns the jobType identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobTypeId">Id of the jobType to be returned.</param>
        /// <returns>Task of JobType</returns>
        System.Threading.Tasks.Task<JobType> GetJobTypeByIdAsync (int? jobTypeId);

        /// <summary>
        /// Get a jobType by id
        /// </summary>
        /// <remarks>
        /// Returns the jobType identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobTypeId">Id of the jobType to be returned.</param>
        /// <returns>Task of ApiResponse (JobType)</returns>
        System.Threading.Tasks.Task<ApiResponse<JobType>> GetJobTypeByIdAsyncWithHttpInfo (int? jobTypeId);
        /// <summary>
        /// Get the files for a jobType.
        /// </summary>
        /// <remarks>
        /// Get all existing jobType files.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobTypeId">Id of the jobType to get files for</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetJobTypeFilesAsync (int? jobTypeId);

        /// <summary>
        /// Get the files for a jobType.
        /// </summary>
        /// <remarks>
        /// Get all existing jobType files.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobTypeId">Id of the jobType to get files for</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetJobTypeFilesAsyncWithHttpInfo (int? jobTypeId);
        /// <summary>
        /// Get the tags for a jobType.
        /// </summary>
        /// <remarks>
        /// Get all existing jobType tags.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobTypeId">Id of the jobType to get tags for</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetJobTypeTagsAsync (int? jobTypeId);

        /// <summary>
        /// Get the tags for a jobType.
        /// </summary>
        /// <remarks>
        /// Get all existing jobType tags.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobTypeId">Id of the jobType to get tags for</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetJobTypeTagsAsyncWithHttpInfo (int? jobTypeId);
        /// <summary>
        /// Update a jobType
        /// </summary>
        /// <remarks>
        /// Updates an existing jobType using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JobType to be updated.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateJobTypeAsync (JobType body);

        /// <summary>
        /// Update a jobType
        /// </summary>
        /// <remarks>
        /// Updates an existing jobType using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JobType to be updated.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateJobTypeAsyncWithHttpInfo (JobType body);
        /// <summary>
        /// Update a jobType custom fields
        /// </summary>
        /// <remarks>
        /// Updates an existing jobType custom fields using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JobType to be updated.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateJobTypeCustomFieldsAsync (JobType body);

        /// <summary>
        /// Update a jobType custom fields
        /// </summary>
        /// <remarks>
        /// Updates an existing jobType custom fields using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JobType to be updated.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateJobTypeCustomFieldsAsyncWithHttpInfo (JobType body);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class JobTypeApi : IJobTypeApi
    {
        private Infoplus.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="JobTypeApi"/> class.
        /// </summary>
        /// <returns></returns>
        public JobTypeApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = Infoplus.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="JobTypeApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public JobTypeApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Infoplus.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Infoplus.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create a jobType Inserts a new jobType using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JobType to be inserted.</param>
        /// <returns>JobType</returns>
        public JobType AddJobType (JobType body)
        {
             ApiResponse<JobType> localVarResponse = AddJobTypeWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a jobType Inserts a new jobType using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JobType to be inserted.</param>
        /// <returns>ApiResponse of JobType</returns>
        public ApiResponse< JobType > AddJobTypeWithHttpInfo (JobType body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling JobTypeApi->AddJobType");

            var localVarPath = "/beta/jobType";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddJobType", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<JobType>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (JobType) Configuration.ApiClient.Deserialize(localVarResponse, typeof(JobType)));
        }

        /// <summary>
        /// Create a jobType Inserts a new jobType using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JobType to be inserted.</param>
        /// <returns>Task of JobType</returns>
        public async System.Threading.Tasks.Task<JobType> AddJobTypeAsync (JobType body)
        {
             ApiResponse<JobType> localVarResponse = await AddJobTypeAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a jobType Inserts a new jobType using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JobType to be inserted.</param>
        /// <returns>Task of ApiResponse (JobType)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<JobType>> AddJobTypeAsyncWithHttpInfo (JobType body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling JobTypeApi->AddJobType");

            var localVarPath = "/beta/jobType";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddJobType", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<JobType>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (JobType) Configuration.ApiClient.Deserialize(localVarResponse, typeof(JobType)));
        }

        /// <summary>
        /// Add new audit for a jobType Adds an audit to an existing jobType.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobTypeId">Id of the jobType to add an audit to</param>
        /// <param name="jobTypeAudit">The audit to add</param>
        /// <returns></returns>
        public void AddJobTypeAudit (int? jobTypeId, string jobTypeAudit)
        {
             AddJobTypeAuditWithHttpInfo(jobTypeId, jobTypeAudit);
        }

        /// <summary>
        /// Add new audit for a jobType Adds an audit to an existing jobType.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobTypeId">Id of the jobType to add an audit to</param>
        /// <param name="jobTypeAudit">The audit to add</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AddJobTypeAuditWithHttpInfo (int? jobTypeId, string jobTypeAudit)
        {
            // verify the required parameter 'jobTypeId' is set
            if (jobTypeId == null)
                throw new ApiException(400, "Missing required parameter 'jobTypeId' when calling JobTypeApi->AddJobTypeAudit");
            // verify the required parameter 'jobTypeAudit' is set
            if (jobTypeAudit == null)
                throw new ApiException(400, "Missing required parameter 'jobTypeAudit' when calling JobTypeApi->AddJobTypeAudit");

            var localVarPath = "/beta/jobType/{jobTypeId}/audit/{jobTypeAudit}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (jobTypeId != null) localVarPathParams.Add("jobTypeId", Configuration.ApiClient.ParameterToString(jobTypeId)); // path parameter
            if (jobTypeAudit != null) localVarPathParams.Add("jobTypeAudit", Configuration.ApiClient.ParameterToString(jobTypeAudit)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddJobTypeAudit", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Add new audit for a jobType Adds an audit to an existing jobType.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobTypeId">Id of the jobType to add an audit to</param>
        /// <param name="jobTypeAudit">The audit to add</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddJobTypeAuditAsync (int? jobTypeId, string jobTypeAudit)
        {
             await AddJobTypeAuditAsyncWithHttpInfo(jobTypeId, jobTypeAudit);

        }

        /// <summary>
        /// Add new audit for a jobType Adds an audit to an existing jobType.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobTypeId">Id of the jobType to add an audit to</param>
        /// <param name="jobTypeAudit">The audit to add</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddJobTypeAuditAsyncWithHttpInfo (int? jobTypeId, string jobTypeAudit)
        {
            // verify the required parameter 'jobTypeId' is set
            if (jobTypeId == null)
                throw new ApiException(400, "Missing required parameter 'jobTypeId' when calling JobTypeApi->AddJobTypeAudit");
            // verify the required parameter 'jobTypeAudit' is set
            if (jobTypeAudit == null)
                throw new ApiException(400, "Missing required parameter 'jobTypeAudit' when calling JobTypeApi->AddJobTypeAudit");

            var localVarPath = "/beta/jobType/{jobTypeId}/audit/{jobTypeAudit}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (jobTypeId != null) localVarPathParams.Add("jobTypeId", Configuration.ApiClient.ParameterToString(jobTypeId)); // path parameter
            if (jobTypeAudit != null) localVarPathParams.Add("jobTypeAudit", Configuration.ApiClient.ParameterToString(jobTypeAudit)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddJobTypeAudit", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Attach a file to a jobType Adds a file to an existing jobType.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobTypeId">Id of the jobType to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns></returns>
        public void AddJobTypeFile (int? jobTypeId, string fileName)
        {
             AddJobTypeFileWithHttpInfo(jobTypeId, fileName);
        }

        /// <summary>
        /// Attach a file to a jobType Adds a file to an existing jobType.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobTypeId">Id of the jobType to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AddJobTypeFileWithHttpInfo (int? jobTypeId, string fileName)
        {
            // verify the required parameter 'jobTypeId' is set
            if (jobTypeId == null)
                throw new ApiException(400, "Missing required parameter 'jobTypeId' when calling JobTypeApi->AddJobTypeFile");
            // verify the required parameter 'fileName' is set
            if (fileName == null)
                throw new ApiException(400, "Missing required parameter 'fileName' when calling JobTypeApi->AddJobTypeFile");

            var localVarPath = "/beta/jobType/{jobTypeId}/file/{fileName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (jobTypeId != null) localVarPathParams.Add("jobTypeId", Configuration.ApiClient.ParameterToString(jobTypeId)); // path parameter
            if (fileName != null) localVarPathParams.Add("fileName", Configuration.ApiClient.ParameterToString(fileName)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddJobTypeFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Attach a file to a jobType Adds a file to an existing jobType.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobTypeId">Id of the jobType to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddJobTypeFileAsync (int? jobTypeId, string fileName)
        {
             await AddJobTypeFileAsyncWithHttpInfo(jobTypeId, fileName);

        }

        /// <summary>
        /// Attach a file to a jobType Adds a file to an existing jobType.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobTypeId">Id of the jobType to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddJobTypeFileAsyncWithHttpInfo (int? jobTypeId, string fileName)
        {
            // verify the required parameter 'jobTypeId' is set
            if (jobTypeId == null)
                throw new ApiException(400, "Missing required parameter 'jobTypeId' when calling JobTypeApi->AddJobTypeFile");
            // verify the required parameter 'fileName' is set
            if (fileName == null)
                throw new ApiException(400, "Missing required parameter 'fileName' when calling JobTypeApi->AddJobTypeFile");

            var localVarPath = "/beta/jobType/{jobTypeId}/file/{fileName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (jobTypeId != null) localVarPathParams.Add("jobTypeId", Configuration.ApiClient.ParameterToString(jobTypeId)); // path parameter
            if (fileName != null) localVarPathParams.Add("fileName", Configuration.ApiClient.ParameterToString(fileName)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddJobTypeFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Attach a file to a jobType by URL. Adds a file to an existing jobType by URL.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="jobTypeId">Id of the jobType to add an file to</param>
        /// <returns></returns>
        public void AddJobTypeFileByURL (RecordFile body, int? jobTypeId)
        {
             AddJobTypeFileByURLWithHttpInfo(body, jobTypeId);
        }

        /// <summary>
        /// Attach a file to a jobType by URL. Adds a file to an existing jobType by URL.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="jobTypeId">Id of the jobType to add an file to</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AddJobTypeFileByURLWithHttpInfo (RecordFile body, int? jobTypeId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling JobTypeApi->AddJobTypeFileByURL");
            // verify the required parameter 'jobTypeId' is set
            if (jobTypeId == null)
                throw new ApiException(400, "Missing required parameter 'jobTypeId' when calling JobTypeApi->AddJobTypeFileByURL");

            var localVarPath = "/beta/jobType/{jobTypeId}/file";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (jobTypeId != null) localVarPathParams.Add("jobTypeId", Configuration.ApiClient.ParameterToString(jobTypeId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddJobTypeFileByURL", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Attach a file to a jobType by URL. Adds a file to an existing jobType by URL.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="jobTypeId">Id of the jobType to add an file to</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddJobTypeFileByURLAsync (RecordFile body, int? jobTypeId)
        {
             await AddJobTypeFileByURLAsyncWithHttpInfo(body, jobTypeId);

        }

        /// <summary>
        /// Attach a file to a jobType by URL. Adds a file to an existing jobType by URL.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="jobTypeId">Id of the jobType to add an file to</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddJobTypeFileByURLAsyncWithHttpInfo (RecordFile body, int? jobTypeId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling JobTypeApi->AddJobTypeFileByURL");
            // verify the required parameter 'jobTypeId' is set
            if (jobTypeId == null)
                throw new ApiException(400, "Missing required parameter 'jobTypeId' when calling JobTypeApi->AddJobTypeFileByURL");

            var localVarPath = "/beta/jobType/{jobTypeId}/file";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (jobTypeId != null) localVarPathParams.Add("jobTypeId", Configuration.ApiClient.ParameterToString(jobTypeId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddJobTypeFileByURL", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Add new tags for a jobType. Adds a tag to an existing jobType.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobTypeId">Id of the jobType to add a tag to</param>
        /// <param name="jobTypeTag">The tag to add</param>
        /// <returns></returns>
        public void AddJobTypeTag (int? jobTypeId, string jobTypeTag)
        {
             AddJobTypeTagWithHttpInfo(jobTypeId, jobTypeTag);
        }

        /// <summary>
        /// Add new tags for a jobType. Adds a tag to an existing jobType.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobTypeId">Id of the jobType to add a tag to</param>
        /// <param name="jobTypeTag">The tag to add</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AddJobTypeTagWithHttpInfo (int? jobTypeId, string jobTypeTag)
        {
            // verify the required parameter 'jobTypeId' is set
            if (jobTypeId == null)
                throw new ApiException(400, "Missing required parameter 'jobTypeId' when calling JobTypeApi->AddJobTypeTag");
            // verify the required parameter 'jobTypeTag' is set
            if (jobTypeTag == null)
                throw new ApiException(400, "Missing required parameter 'jobTypeTag' when calling JobTypeApi->AddJobTypeTag");

            var localVarPath = "/beta/jobType/{jobTypeId}/tag/{jobTypeTag}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (jobTypeId != null) localVarPathParams.Add("jobTypeId", Configuration.ApiClient.ParameterToString(jobTypeId)); // path parameter
            if (jobTypeTag != null) localVarPathParams.Add("jobTypeTag", Configuration.ApiClient.ParameterToString(jobTypeTag)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddJobTypeTag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Add new tags for a jobType. Adds a tag to an existing jobType.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobTypeId">Id of the jobType to add a tag to</param>
        /// <param name="jobTypeTag">The tag to add</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddJobTypeTagAsync (int? jobTypeId, string jobTypeTag)
        {
             await AddJobTypeTagAsyncWithHttpInfo(jobTypeId, jobTypeTag);

        }

        /// <summary>
        /// Add new tags for a jobType. Adds a tag to an existing jobType.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobTypeId">Id of the jobType to add a tag to</param>
        /// <param name="jobTypeTag">The tag to add</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddJobTypeTagAsyncWithHttpInfo (int? jobTypeId, string jobTypeTag)
        {
            // verify the required parameter 'jobTypeId' is set
            if (jobTypeId == null)
                throw new ApiException(400, "Missing required parameter 'jobTypeId' when calling JobTypeApi->AddJobTypeTag");
            // verify the required parameter 'jobTypeTag' is set
            if (jobTypeTag == null)
                throw new ApiException(400, "Missing required parameter 'jobTypeTag' when calling JobTypeApi->AddJobTypeTag");

            var localVarPath = "/beta/jobType/{jobTypeId}/tag/{jobTypeTag}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (jobTypeId != null) localVarPathParams.Add("jobTypeId", Configuration.ApiClient.ParameterToString(jobTypeId)); // path parameter
            if (jobTypeTag != null) localVarPathParams.Add("jobTypeTag", Configuration.ApiClient.ParameterToString(jobTypeTag)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddJobTypeTag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a jobType Deletes the jobType identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobTypeId">Id of the jobType to be deleted.</param>
        /// <returns></returns>
        public void DeleteJobType (int? jobTypeId)
        {
             DeleteJobTypeWithHttpInfo(jobTypeId);
        }

        /// <summary>
        /// Delete a jobType Deletes the jobType identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobTypeId">Id of the jobType to be deleted.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteJobTypeWithHttpInfo (int? jobTypeId)
        {
            // verify the required parameter 'jobTypeId' is set
            if (jobTypeId == null)
                throw new ApiException(400, "Missing required parameter 'jobTypeId' when calling JobTypeApi->DeleteJobType");

            var localVarPath = "/beta/jobType/{jobTypeId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (jobTypeId != null) localVarPathParams.Add("jobTypeId", Configuration.ApiClient.ParameterToString(jobTypeId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteJobType", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a jobType Deletes the jobType identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobTypeId">Id of the jobType to be deleted.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteJobTypeAsync (int? jobTypeId)
        {
             await DeleteJobTypeAsyncWithHttpInfo(jobTypeId);

        }

        /// <summary>
        /// Delete a jobType Deletes the jobType identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobTypeId">Id of the jobType to be deleted.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteJobTypeAsyncWithHttpInfo (int? jobTypeId)
        {
            // verify the required parameter 'jobTypeId' is set
            if (jobTypeId == null)
                throw new ApiException(400, "Missing required parameter 'jobTypeId' when calling JobTypeApi->DeleteJobType");

            var localVarPath = "/beta/jobType/{jobTypeId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (jobTypeId != null) localVarPathParams.Add("jobTypeId", Configuration.ApiClient.ParameterToString(jobTypeId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteJobType", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a file for a jobType. Deletes an existing jobType file using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobTypeId">Id of the jobType to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns></returns>
        public void DeleteJobTypeFile (int? jobTypeId, int? fileId)
        {
             DeleteJobTypeFileWithHttpInfo(jobTypeId, fileId);
        }

        /// <summary>
        /// Delete a file for a jobType. Deletes an existing jobType file using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobTypeId">Id of the jobType to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteJobTypeFileWithHttpInfo (int? jobTypeId, int? fileId)
        {
            // verify the required parameter 'jobTypeId' is set
            if (jobTypeId == null)
                throw new ApiException(400, "Missing required parameter 'jobTypeId' when calling JobTypeApi->DeleteJobTypeFile");
            // verify the required parameter 'fileId' is set
            if (fileId == null)
                throw new ApiException(400, "Missing required parameter 'fileId' when calling JobTypeApi->DeleteJobTypeFile");

            var localVarPath = "/beta/jobType/{jobTypeId}/file/{fileId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (jobTypeId != null) localVarPathParams.Add("jobTypeId", Configuration.ApiClient.ParameterToString(jobTypeId)); // path parameter
            if (fileId != null) localVarPathParams.Add("fileId", Configuration.ApiClient.ParameterToString(fileId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteJobTypeFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a file for a jobType. Deletes an existing jobType file using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobTypeId">Id of the jobType to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteJobTypeFileAsync (int? jobTypeId, int? fileId)
        {
             await DeleteJobTypeFileAsyncWithHttpInfo(jobTypeId, fileId);

        }

        /// <summary>
        /// Delete a file for a jobType. Deletes an existing jobType file using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobTypeId">Id of the jobType to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteJobTypeFileAsyncWithHttpInfo (int? jobTypeId, int? fileId)
        {
            // verify the required parameter 'jobTypeId' is set
            if (jobTypeId == null)
                throw new ApiException(400, "Missing required parameter 'jobTypeId' when calling JobTypeApi->DeleteJobTypeFile");
            // verify the required parameter 'fileId' is set
            if (fileId == null)
                throw new ApiException(400, "Missing required parameter 'fileId' when calling JobTypeApi->DeleteJobTypeFile");

            var localVarPath = "/beta/jobType/{jobTypeId}/file/{fileId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (jobTypeId != null) localVarPathParams.Add("jobTypeId", Configuration.ApiClient.ParameterToString(jobTypeId)); // path parameter
            if (fileId != null) localVarPathParams.Add("fileId", Configuration.ApiClient.ParameterToString(fileId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteJobTypeFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a tag for a jobType. Deletes an existing jobType tag using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobTypeId">Id of the jobType to remove tag from</param>
        /// <param name="jobTypeTag">The tag to delete</param>
        /// <returns></returns>
        public void DeleteJobTypeTag (int? jobTypeId, string jobTypeTag)
        {
             DeleteJobTypeTagWithHttpInfo(jobTypeId, jobTypeTag);
        }

        /// <summary>
        /// Delete a tag for a jobType. Deletes an existing jobType tag using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobTypeId">Id of the jobType to remove tag from</param>
        /// <param name="jobTypeTag">The tag to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteJobTypeTagWithHttpInfo (int? jobTypeId, string jobTypeTag)
        {
            // verify the required parameter 'jobTypeId' is set
            if (jobTypeId == null)
                throw new ApiException(400, "Missing required parameter 'jobTypeId' when calling JobTypeApi->DeleteJobTypeTag");
            // verify the required parameter 'jobTypeTag' is set
            if (jobTypeTag == null)
                throw new ApiException(400, "Missing required parameter 'jobTypeTag' when calling JobTypeApi->DeleteJobTypeTag");

            var localVarPath = "/beta/jobType/{jobTypeId}/tag/{jobTypeTag}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (jobTypeId != null) localVarPathParams.Add("jobTypeId", Configuration.ApiClient.ParameterToString(jobTypeId)); // path parameter
            if (jobTypeTag != null) localVarPathParams.Add("jobTypeTag", Configuration.ApiClient.ParameterToString(jobTypeTag)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteJobTypeTag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a tag for a jobType. Deletes an existing jobType tag using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobTypeId">Id of the jobType to remove tag from</param>
        /// <param name="jobTypeTag">The tag to delete</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteJobTypeTagAsync (int? jobTypeId, string jobTypeTag)
        {
             await DeleteJobTypeTagAsyncWithHttpInfo(jobTypeId, jobTypeTag);

        }

        /// <summary>
        /// Delete a tag for a jobType. Deletes an existing jobType tag using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobTypeId">Id of the jobType to remove tag from</param>
        /// <param name="jobTypeTag">The tag to delete</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteJobTypeTagAsyncWithHttpInfo (int? jobTypeId, string jobTypeTag)
        {
            // verify the required parameter 'jobTypeId' is set
            if (jobTypeId == null)
                throw new ApiException(400, "Missing required parameter 'jobTypeId' when calling JobTypeApi->DeleteJobTypeTag");
            // verify the required parameter 'jobTypeTag' is set
            if (jobTypeTag == null)
                throw new ApiException(400, "Missing required parameter 'jobTypeTag' when calling JobTypeApi->DeleteJobTypeTag");

            var localVarPath = "/beta/jobType/{jobTypeId}/tag/{jobTypeTag}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (jobTypeId != null) localVarPathParams.Add("jobTypeId", Configuration.ApiClient.ParameterToString(jobTypeId)); // path parameter
            if (jobTypeTag != null) localVarPathParams.Add("jobTypeTag", Configuration.ApiClient.ParameterToString(jobTypeTag)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteJobTypeTag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get a duplicated a jobType by id Returns a duplicated jobType identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobTypeId">Id of the jobType to be duplicated.</param>
        /// <returns>JobType</returns>
        public JobType GetDuplicateJobTypeById (int? jobTypeId)
        {
             ApiResponse<JobType> localVarResponse = GetDuplicateJobTypeByIdWithHttpInfo(jobTypeId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a duplicated a jobType by id Returns a duplicated jobType identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobTypeId">Id of the jobType to be duplicated.</param>
        /// <returns>ApiResponse of JobType</returns>
        public ApiResponse< JobType > GetDuplicateJobTypeByIdWithHttpInfo (int? jobTypeId)
        {
            // verify the required parameter 'jobTypeId' is set
            if (jobTypeId == null)
                throw new ApiException(400, "Missing required parameter 'jobTypeId' when calling JobTypeApi->GetDuplicateJobTypeById");

            var localVarPath = "/beta/jobType/duplicate/{jobTypeId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (jobTypeId != null) localVarPathParams.Add("jobTypeId", Configuration.ApiClient.ParameterToString(jobTypeId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDuplicateJobTypeById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<JobType>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (JobType) Configuration.ApiClient.Deserialize(localVarResponse, typeof(JobType)));
        }

        /// <summary>
        /// Get a duplicated a jobType by id Returns a duplicated jobType identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobTypeId">Id of the jobType to be duplicated.</param>
        /// <returns>Task of JobType</returns>
        public async System.Threading.Tasks.Task<JobType> GetDuplicateJobTypeByIdAsync (int? jobTypeId)
        {
             ApiResponse<JobType> localVarResponse = await GetDuplicateJobTypeByIdAsyncWithHttpInfo(jobTypeId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a duplicated a jobType by id Returns a duplicated jobType identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobTypeId">Id of the jobType to be duplicated.</param>
        /// <returns>Task of ApiResponse (JobType)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<JobType>> GetDuplicateJobTypeByIdAsyncWithHttpInfo (int? jobTypeId)
        {
            // verify the required parameter 'jobTypeId' is set
            if (jobTypeId == null)
                throw new ApiException(400, "Missing required parameter 'jobTypeId' when calling JobTypeApi->GetDuplicateJobTypeById");

            var localVarPath = "/beta/jobType/duplicate/{jobTypeId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (jobTypeId != null) localVarPathParams.Add("jobTypeId", Configuration.ApiClient.ParameterToString(jobTypeId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDuplicateJobTypeById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<JobType>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (JobType) Configuration.ApiClient.Deserialize(localVarResponse, typeof(JobType)));
        }

        /// <summary>
        /// Search jobTypes by filter Returns the list of jobTypes that match the given filter.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>List&lt;JobType&gt;</returns>
        public List<JobType> GetJobTypeByFilter (string filter = null, int? page = null, int? limit = null, string sort = null)
        {
             ApiResponse<List<JobType>> localVarResponse = GetJobTypeByFilterWithHttpInfo(filter, page, limit, sort);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Search jobTypes by filter Returns the list of jobTypes that match the given filter.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>ApiResponse of List&lt;JobType&gt;</returns>
        public ApiResponse< List<JobType> > GetJobTypeByFilterWithHttpInfo (string filter = null, int? page = null, int? limit = null, string sort = null)
        {

            var localVarPath = "/beta/jobType/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (filter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (page != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetJobTypeByFilter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<JobType>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<JobType>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<JobType>)));
        }

        /// <summary>
        /// Search jobTypes by filter Returns the list of jobTypes that match the given filter.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>Task of List&lt;JobType&gt;</returns>
        public async System.Threading.Tasks.Task<List<JobType>> GetJobTypeByFilterAsync (string filter = null, int? page = null, int? limit = null, string sort = null)
        {
             ApiResponse<List<JobType>> localVarResponse = await GetJobTypeByFilterAsyncWithHttpInfo(filter, page, limit, sort);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Search jobTypes by filter Returns the list of jobTypes that match the given filter.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;JobType&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<JobType>>> GetJobTypeByFilterAsyncWithHttpInfo (string filter = null, int? page = null, int? limit = null, string sort = null)
        {

            var localVarPath = "/beta/jobType/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (filter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (page != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetJobTypeByFilter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<JobType>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<JobType>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<JobType>)));
        }

        /// <summary>
        /// Get a jobType by id Returns the jobType identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobTypeId">Id of the jobType to be returned.</param>
        /// <returns>JobType</returns>
        public JobType GetJobTypeById (int? jobTypeId)
        {
             ApiResponse<JobType> localVarResponse = GetJobTypeByIdWithHttpInfo(jobTypeId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a jobType by id Returns the jobType identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobTypeId">Id of the jobType to be returned.</param>
        /// <returns>ApiResponse of JobType</returns>
        public ApiResponse< JobType > GetJobTypeByIdWithHttpInfo (int? jobTypeId)
        {
            // verify the required parameter 'jobTypeId' is set
            if (jobTypeId == null)
                throw new ApiException(400, "Missing required parameter 'jobTypeId' when calling JobTypeApi->GetJobTypeById");

            var localVarPath = "/beta/jobType/{jobTypeId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (jobTypeId != null) localVarPathParams.Add("jobTypeId", Configuration.ApiClient.ParameterToString(jobTypeId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetJobTypeById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<JobType>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (JobType) Configuration.ApiClient.Deserialize(localVarResponse, typeof(JobType)));
        }

        /// <summary>
        /// Get a jobType by id Returns the jobType identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobTypeId">Id of the jobType to be returned.</param>
        /// <returns>Task of JobType</returns>
        public async System.Threading.Tasks.Task<JobType> GetJobTypeByIdAsync (int? jobTypeId)
        {
             ApiResponse<JobType> localVarResponse = await GetJobTypeByIdAsyncWithHttpInfo(jobTypeId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a jobType by id Returns the jobType identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobTypeId">Id of the jobType to be returned.</param>
        /// <returns>Task of ApiResponse (JobType)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<JobType>> GetJobTypeByIdAsyncWithHttpInfo (int? jobTypeId)
        {
            // verify the required parameter 'jobTypeId' is set
            if (jobTypeId == null)
                throw new ApiException(400, "Missing required parameter 'jobTypeId' when calling JobTypeApi->GetJobTypeById");

            var localVarPath = "/beta/jobType/{jobTypeId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (jobTypeId != null) localVarPathParams.Add("jobTypeId", Configuration.ApiClient.ParameterToString(jobTypeId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetJobTypeById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<JobType>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (JobType) Configuration.ApiClient.Deserialize(localVarResponse, typeof(JobType)));
        }

        /// <summary>
        /// Get the files for a jobType. Get all existing jobType files.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobTypeId">Id of the jobType to get files for</param>
        /// <returns></returns>
        public void GetJobTypeFiles (int? jobTypeId)
        {
             GetJobTypeFilesWithHttpInfo(jobTypeId);
        }

        /// <summary>
        /// Get the files for a jobType. Get all existing jobType files.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobTypeId">Id of the jobType to get files for</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GetJobTypeFilesWithHttpInfo (int? jobTypeId)
        {
            // verify the required parameter 'jobTypeId' is set
            if (jobTypeId == null)
                throw new ApiException(400, "Missing required parameter 'jobTypeId' when calling JobTypeApi->GetJobTypeFiles");

            var localVarPath = "/beta/jobType/{jobTypeId}/file";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (jobTypeId != null) localVarPathParams.Add("jobTypeId", Configuration.ApiClient.ParameterToString(jobTypeId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetJobTypeFiles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get the files for a jobType. Get all existing jobType files.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobTypeId">Id of the jobType to get files for</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetJobTypeFilesAsync (int? jobTypeId)
        {
             await GetJobTypeFilesAsyncWithHttpInfo(jobTypeId);

        }

        /// <summary>
        /// Get the files for a jobType. Get all existing jobType files.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobTypeId">Id of the jobType to get files for</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetJobTypeFilesAsyncWithHttpInfo (int? jobTypeId)
        {
            // verify the required parameter 'jobTypeId' is set
            if (jobTypeId == null)
                throw new ApiException(400, "Missing required parameter 'jobTypeId' when calling JobTypeApi->GetJobTypeFiles");

            var localVarPath = "/beta/jobType/{jobTypeId}/file";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (jobTypeId != null) localVarPathParams.Add("jobTypeId", Configuration.ApiClient.ParameterToString(jobTypeId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetJobTypeFiles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get the tags for a jobType. Get all existing jobType tags.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobTypeId">Id of the jobType to get tags for</param>
        /// <returns></returns>
        public void GetJobTypeTags (int? jobTypeId)
        {
             GetJobTypeTagsWithHttpInfo(jobTypeId);
        }

        /// <summary>
        /// Get the tags for a jobType. Get all existing jobType tags.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobTypeId">Id of the jobType to get tags for</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GetJobTypeTagsWithHttpInfo (int? jobTypeId)
        {
            // verify the required parameter 'jobTypeId' is set
            if (jobTypeId == null)
                throw new ApiException(400, "Missing required parameter 'jobTypeId' when calling JobTypeApi->GetJobTypeTags");

            var localVarPath = "/beta/jobType/{jobTypeId}/tag";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (jobTypeId != null) localVarPathParams.Add("jobTypeId", Configuration.ApiClient.ParameterToString(jobTypeId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetJobTypeTags", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get the tags for a jobType. Get all existing jobType tags.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobTypeId">Id of the jobType to get tags for</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetJobTypeTagsAsync (int? jobTypeId)
        {
             await GetJobTypeTagsAsyncWithHttpInfo(jobTypeId);

        }

        /// <summary>
        /// Get the tags for a jobType. Get all existing jobType tags.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobTypeId">Id of the jobType to get tags for</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetJobTypeTagsAsyncWithHttpInfo (int? jobTypeId)
        {
            // verify the required parameter 'jobTypeId' is set
            if (jobTypeId == null)
                throw new ApiException(400, "Missing required parameter 'jobTypeId' when calling JobTypeApi->GetJobTypeTags");

            var localVarPath = "/beta/jobType/{jobTypeId}/tag";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (jobTypeId != null) localVarPathParams.Add("jobTypeId", Configuration.ApiClient.ParameterToString(jobTypeId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetJobTypeTags", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update a jobType Updates an existing jobType using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JobType to be updated.</param>
        /// <returns></returns>
        public void UpdateJobType (JobType body)
        {
             UpdateJobTypeWithHttpInfo(body);
        }

        /// <summary>
        /// Update a jobType Updates an existing jobType using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JobType to be updated.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateJobTypeWithHttpInfo (JobType body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling JobTypeApi->UpdateJobType");

            var localVarPath = "/beta/jobType";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateJobType", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update a jobType Updates an existing jobType using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JobType to be updated.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateJobTypeAsync (JobType body)
        {
             await UpdateJobTypeAsyncWithHttpInfo(body);

        }

        /// <summary>
        /// Update a jobType Updates an existing jobType using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JobType to be updated.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateJobTypeAsyncWithHttpInfo (JobType body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling JobTypeApi->UpdateJobType");

            var localVarPath = "/beta/jobType";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateJobType", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update a jobType custom fields Updates an existing jobType custom fields using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JobType to be updated.</param>
        /// <returns></returns>
        public void UpdateJobTypeCustomFields (JobType body)
        {
             UpdateJobTypeCustomFieldsWithHttpInfo(body);
        }

        /// <summary>
        /// Update a jobType custom fields Updates an existing jobType custom fields using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JobType to be updated.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateJobTypeCustomFieldsWithHttpInfo (JobType body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling JobTypeApi->UpdateJobTypeCustomFields");

            var localVarPath = "/beta/jobType/customFields";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateJobTypeCustomFields", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update a jobType custom fields Updates an existing jobType custom fields using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JobType to be updated.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateJobTypeCustomFieldsAsync (JobType body)
        {
             await UpdateJobTypeCustomFieldsAsyncWithHttpInfo(body);

        }

        /// <summary>
        /// Update a jobType custom fields Updates an existing jobType custom fields using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JobType to be updated.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateJobTypeCustomFieldsAsyncWithHttpInfo (JobType body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling JobTypeApi->UpdateJobTypeCustomFields");

            var localVarPath = "/beta/jobType/customFields";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateJobTypeCustomFields", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

    }
}
