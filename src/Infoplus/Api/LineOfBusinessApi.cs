/* 
 * Infoplus API
 *
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Infoplus.Client;
using Infoplus.Model;

namespace Infoplus.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ILineOfBusinessApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create a lineOfBusiness
        /// </summary>
        /// <remarks>
        /// Inserts a new lineOfBusiness using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">LineOfBusiness to be inserted.</param>
        /// <returns>LineOfBusiness</returns>
        LineOfBusiness AddLineOfBusiness (LineOfBusiness body);

        /// <summary>
        /// Create a lineOfBusiness
        /// </summary>
        /// <remarks>
        /// Inserts a new lineOfBusiness using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">LineOfBusiness to be inserted.</param>
        /// <returns>ApiResponse of LineOfBusiness</returns>
        ApiResponse<LineOfBusiness> AddLineOfBusinessWithHttpInfo (LineOfBusiness body);
        /// <summary>
        /// Add new audit for a lineOfBusiness
        /// </summary>
        /// <remarks>
        /// Adds an audit to an existing lineOfBusiness.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lineOfBusinessId">Id of the lineOfBusiness to add an audit to</param>
        /// <param name="lineOfBusinessAudit">The audit to add</param>
        /// <returns></returns>
        void AddLineOfBusinessAudit (int? lineOfBusinessId, string lineOfBusinessAudit);

        /// <summary>
        /// Add new audit for a lineOfBusiness
        /// </summary>
        /// <remarks>
        /// Adds an audit to an existing lineOfBusiness.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lineOfBusinessId">Id of the lineOfBusiness to add an audit to</param>
        /// <param name="lineOfBusinessAudit">The audit to add</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddLineOfBusinessAuditWithHttpInfo (int? lineOfBusinessId, string lineOfBusinessAudit);
        /// <summary>
        /// Attach a file to a lineOfBusiness
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing lineOfBusiness.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lineOfBusinessId">Id of the lineOfBusiness to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns></returns>
        void AddLineOfBusinessFile (int? lineOfBusinessId, string fileName);

        /// <summary>
        /// Attach a file to a lineOfBusiness
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing lineOfBusiness.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lineOfBusinessId">Id of the lineOfBusiness to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddLineOfBusinessFileWithHttpInfo (int? lineOfBusinessId, string fileName);
        /// <summary>
        /// Attach a file to a lineOfBusiness by URL.
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing lineOfBusiness by URL.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="lineOfBusinessId">Id of the lineOfBusiness to add an file to</param>
        /// <returns></returns>
        void AddLineOfBusinessFileByURL (RecordFile body, int? lineOfBusinessId);

        /// <summary>
        /// Attach a file to a lineOfBusiness by URL.
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing lineOfBusiness by URL.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="lineOfBusinessId">Id of the lineOfBusiness to add an file to</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddLineOfBusinessFileByURLWithHttpInfo (RecordFile body, int? lineOfBusinessId);
        /// <summary>
        /// Add new tags for a lineOfBusiness.
        /// </summary>
        /// <remarks>
        /// Adds a tag to an existing lineOfBusiness.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lineOfBusinessId">Id of the lineOfBusiness to add a tag to</param>
        /// <param name="lineOfBusinessTag">The tag to add</param>
        /// <returns></returns>
        void AddLineOfBusinessTag (int? lineOfBusinessId, string lineOfBusinessTag);

        /// <summary>
        /// Add new tags for a lineOfBusiness.
        /// </summary>
        /// <remarks>
        /// Adds a tag to an existing lineOfBusiness.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lineOfBusinessId">Id of the lineOfBusiness to add a tag to</param>
        /// <param name="lineOfBusinessTag">The tag to add</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddLineOfBusinessTagWithHttpInfo (int? lineOfBusinessId, string lineOfBusinessTag);
        /// <summary>
        /// Delete a file for a lineOfBusiness.
        /// </summary>
        /// <remarks>
        /// Deletes an existing lineOfBusiness file using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lineOfBusinessId">Id of the lineOfBusiness to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns></returns>
        void DeleteLineOfBusinessFile (int? lineOfBusinessId, int? fileId);

        /// <summary>
        /// Delete a file for a lineOfBusiness.
        /// </summary>
        /// <remarks>
        /// Deletes an existing lineOfBusiness file using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lineOfBusinessId">Id of the lineOfBusiness to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteLineOfBusinessFileWithHttpInfo (int? lineOfBusinessId, int? fileId);
        /// <summary>
        /// Delete a tag for a lineOfBusiness.
        /// </summary>
        /// <remarks>
        /// Deletes an existing lineOfBusiness tag using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lineOfBusinessId">Id of the lineOfBusiness to remove tag from</param>
        /// <param name="lineOfBusinessTag">The tag to delete</param>
        /// <returns></returns>
        void DeleteLineOfBusinessTag (int? lineOfBusinessId, string lineOfBusinessTag);

        /// <summary>
        /// Delete a tag for a lineOfBusiness.
        /// </summary>
        /// <remarks>
        /// Deletes an existing lineOfBusiness tag using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lineOfBusinessId">Id of the lineOfBusiness to remove tag from</param>
        /// <param name="lineOfBusinessTag">The tag to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteLineOfBusinessTagWithHttpInfo (int? lineOfBusinessId, string lineOfBusinessTag);
        /// <summary>
        /// Get a duplicated a lineOfBusiness by id
        /// </summary>
        /// <remarks>
        /// Returns a duplicated lineOfBusiness identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lineOfBusinessId">Id of the lineOfBusiness to be duplicated.</param>
        /// <returns>LineOfBusiness</returns>
        LineOfBusiness GetDuplicateLineOfBusinessById (int? lineOfBusinessId);

        /// <summary>
        /// Get a duplicated a lineOfBusiness by id
        /// </summary>
        /// <remarks>
        /// Returns a duplicated lineOfBusiness identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lineOfBusinessId">Id of the lineOfBusiness to be duplicated.</param>
        /// <returns>ApiResponse of LineOfBusiness</returns>
        ApiResponse<LineOfBusiness> GetDuplicateLineOfBusinessByIdWithHttpInfo (int? lineOfBusinessId);
        /// <summary>
        /// Search lineOfBusinesses by filter
        /// </summary>
        /// <remarks>
        /// Returns the list of lineOfBusinesses that match the given filter.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>List&lt;LineOfBusiness&gt;</returns>
        List<LineOfBusiness> GetLineOfBusinessByFilter (string filter = null, int? page = null, int? limit = null, string sort = null);

        /// <summary>
        /// Search lineOfBusinesses by filter
        /// </summary>
        /// <remarks>
        /// Returns the list of lineOfBusinesses that match the given filter.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>ApiResponse of List&lt;LineOfBusiness&gt;</returns>
        ApiResponse<List<LineOfBusiness>> GetLineOfBusinessByFilterWithHttpInfo (string filter = null, int? page = null, int? limit = null, string sort = null);
        /// <summary>
        /// Get a lineOfBusiness by id
        /// </summary>
        /// <remarks>
        /// Returns the lineOfBusiness identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lineOfBusinessId">Id of the lineOfBusiness to be returned.</param>
        /// <returns>LineOfBusiness</returns>
        LineOfBusiness GetLineOfBusinessById (int? lineOfBusinessId);

        /// <summary>
        /// Get a lineOfBusiness by id
        /// </summary>
        /// <remarks>
        /// Returns the lineOfBusiness identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lineOfBusinessId">Id of the lineOfBusiness to be returned.</param>
        /// <returns>ApiResponse of LineOfBusiness</returns>
        ApiResponse<LineOfBusiness> GetLineOfBusinessByIdWithHttpInfo (int? lineOfBusinessId);
        /// <summary>
        /// Get the files for a lineOfBusiness.
        /// </summary>
        /// <remarks>
        /// Get all existing lineOfBusiness files.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lineOfBusinessId">Id of the lineOfBusiness to get files for</param>
        /// <returns></returns>
        void GetLineOfBusinessFiles (int? lineOfBusinessId);

        /// <summary>
        /// Get the files for a lineOfBusiness.
        /// </summary>
        /// <remarks>
        /// Get all existing lineOfBusiness files.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lineOfBusinessId">Id of the lineOfBusiness to get files for</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetLineOfBusinessFilesWithHttpInfo (int? lineOfBusinessId);
        /// <summary>
        /// Get the tags for a lineOfBusiness.
        /// </summary>
        /// <remarks>
        /// Get all existing lineOfBusiness tags.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lineOfBusinessId">Id of the lineOfBusiness to get tags for</param>
        /// <returns></returns>
        void GetLineOfBusinessTags (int? lineOfBusinessId);

        /// <summary>
        /// Get the tags for a lineOfBusiness.
        /// </summary>
        /// <remarks>
        /// Get all existing lineOfBusiness tags.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lineOfBusinessId">Id of the lineOfBusiness to get tags for</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetLineOfBusinessTagsWithHttpInfo (int? lineOfBusinessId);
        /// <summary>
        /// Update a lineOfBusiness
        /// </summary>
        /// <remarks>
        /// Updates an existing lineOfBusiness using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">LineOfBusiness to be updated.</param>
        /// <returns></returns>
        void UpdateLineOfBusiness (LineOfBusiness body);

        /// <summary>
        /// Update a lineOfBusiness
        /// </summary>
        /// <remarks>
        /// Updates an existing lineOfBusiness using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">LineOfBusiness to be updated.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateLineOfBusinessWithHttpInfo (LineOfBusiness body);
        /// <summary>
        /// Update a lineOfBusiness custom fields
        /// </summary>
        /// <remarks>
        /// Updates an existing lineOfBusiness custom fields using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">LineOfBusiness to be updated.</param>
        /// <returns></returns>
        void UpdateLineOfBusinessCustomFields (LineOfBusiness body);

        /// <summary>
        /// Update a lineOfBusiness custom fields
        /// </summary>
        /// <remarks>
        /// Updates an existing lineOfBusiness custom fields using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">LineOfBusiness to be updated.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateLineOfBusinessCustomFieldsWithHttpInfo (LineOfBusiness body);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create a lineOfBusiness
        /// </summary>
        /// <remarks>
        /// Inserts a new lineOfBusiness using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">LineOfBusiness to be inserted.</param>
        /// <returns>Task of LineOfBusiness</returns>
        System.Threading.Tasks.Task<LineOfBusiness> AddLineOfBusinessAsync (LineOfBusiness body);

        /// <summary>
        /// Create a lineOfBusiness
        /// </summary>
        /// <remarks>
        /// Inserts a new lineOfBusiness using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">LineOfBusiness to be inserted.</param>
        /// <returns>Task of ApiResponse (LineOfBusiness)</returns>
        System.Threading.Tasks.Task<ApiResponse<LineOfBusiness>> AddLineOfBusinessAsyncWithHttpInfo (LineOfBusiness body);
        /// <summary>
        /// Add new audit for a lineOfBusiness
        /// </summary>
        /// <remarks>
        /// Adds an audit to an existing lineOfBusiness.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lineOfBusinessId">Id of the lineOfBusiness to add an audit to</param>
        /// <param name="lineOfBusinessAudit">The audit to add</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddLineOfBusinessAuditAsync (int? lineOfBusinessId, string lineOfBusinessAudit);

        /// <summary>
        /// Add new audit for a lineOfBusiness
        /// </summary>
        /// <remarks>
        /// Adds an audit to an existing lineOfBusiness.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lineOfBusinessId">Id of the lineOfBusiness to add an audit to</param>
        /// <param name="lineOfBusinessAudit">The audit to add</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddLineOfBusinessAuditAsyncWithHttpInfo (int? lineOfBusinessId, string lineOfBusinessAudit);
        /// <summary>
        /// Attach a file to a lineOfBusiness
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing lineOfBusiness.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lineOfBusinessId">Id of the lineOfBusiness to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddLineOfBusinessFileAsync (int? lineOfBusinessId, string fileName);

        /// <summary>
        /// Attach a file to a lineOfBusiness
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing lineOfBusiness.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lineOfBusinessId">Id of the lineOfBusiness to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddLineOfBusinessFileAsyncWithHttpInfo (int? lineOfBusinessId, string fileName);
        /// <summary>
        /// Attach a file to a lineOfBusiness by URL.
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing lineOfBusiness by URL.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="lineOfBusinessId">Id of the lineOfBusiness to add an file to</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddLineOfBusinessFileByURLAsync (RecordFile body, int? lineOfBusinessId);

        /// <summary>
        /// Attach a file to a lineOfBusiness by URL.
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing lineOfBusiness by URL.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="lineOfBusinessId">Id of the lineOfBusiness to add an file to</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddLineOfBusinessFileByURLAsyncWithHttpInfo (RecordFile body, int? lineOfBusinessId);
        /// <summary>
        /// Add new tags for a lineOfBusiness.
        /// </summary>
        /// <remarks>
        /// Adds a tag to an existing lineOfBusiness.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lineOfBusinessId">Id of the lineOfBusiness to add a tag to</param>
        /// <param name="lineOfBusinessTag">The tag to add</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddLineOfBusinessTagAsync (int? lineOfBusinessId, string lineOfBusinessTag);

        /// <summary>
        /// Add new tags for a lineOfBusiness.
        /// </summary>
        /// <remarks>
        /// Adds a tag to an existing lineOfBusiness.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lineOfBusinessId">Id of the lineOfBusiness to add a tag to</param>
        /// <param name="lineOfBusinessTag">The tag to add</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddLineOfBusinessTagAsyncWithHttpInfo (int? lineOfBusinessId, string lineOfBusinessTag);
        /// <summary>
        /// Delete a file for a lineOfBusiness.
        /// </summary>
        /// <remarks>
        /// Deletes an existing lineOfBusiness file using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lineOfBusinessId">Id of the lineOfBusiness to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteLineOfBusinessFileAsync (int? lineOfBusinessId, int? fileId);

        /// <summary>
        /// Delete a file for a lineOfBusiness.
        /// </summary>
        /// <remarks>
        /// Deletes an existing lineOfBusiness file using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lineOfBusinessId">Id of the lineOfBusiness to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteLineOfBusinessFileAsyncWithHttpInfo (int? lineOfBusinessId, int? fileId);
        /// <summary>
        /// Delete a tag for a lineOfBusiness.
        /// </summary>
        /// <remarks>
        /// Deletes an existing lineOfBusiness tag using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lineOfBusinessId">Id of the lineOfBusiness to remove tag from</param>
        /// <param name="lineOfBusinessTag">The tag to delete</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteLineOfBusinessTagAsync (int? lineOfBusinessId, string lineOfBusinessTag);

        /// <summary>
        /// Delete a tag for a lineOfBusiness.
        /// </summary>
        /// <remarks>
        /// Deletes an existing lineOfBusiness tag using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lineOfBusinessId">Id of the lineOfBusiness to remove tag from</param>
        /// <param name="lineOfBusinessTag">The tag to delete</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteLineOfBusinessTagAsyncWithHttpInfo (int? lineOfBusinessId, string lineOfBusinessTag);
        /// <summary>
        /// Get a duplicated a lineOfBusiness by id
        /// </summary>
        /// <remarks>
        /// Returns a duplicated lineOfBusiness identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lineOfBusinessId">Id of the lineOfBusiness to be duplicated.</param>
        /// <returns>Task of LineOfBusiness</returns>
        System.Threading.Tasks.Task<LineOfBusiness> GetDuplicateLineOfBusinessByIdAsync (int? lineOfBusinessId);

        /// <summary>
        /// Get a duplicated a lineOfBusiness by id
        /// </summary>
        /// <remarks>
        /// Returns a duplicated lineOfBusiness identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lineOfBusinessId">Id of the lineOfBusiness to be duplicated.</param>
        /// <returns>Task of ApiResponse (LineOfBusiness)</returns>
        System.Threading.Tasks.Task<ApiResponse<LineOfBusiness>> GetDuplicateLineOfBusinessByIdAsyncWithHttpInfo (int? lineOfBusinessId);
        /// <summary>
        /// Search lineOfBusinesses by filter
        /// </summary>
        /// <remarks>
        /// Returns the list of lineOfBusinesses that match the given filter.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>Task of List&lt;LineOfBusiness&gt;</returns>
        System.Threading.Tasks.Task<List<LineOfBusiness>> GetLineOfBusinessByFilterAsync (string filter = null, int? page = null, int? limit = null, string sort = null);

        /// <summary>
        /// Search lineOfBusinesses by filter
        /// </summary>
        /// <remarks>
        /// Returns the list of lineOfBusinesses that match the given filter.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;LineOfBusiness&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<LineOfBusiness>>> GetLineOfBusinessByFilterAsyncWithHttpInfo (string filter = null, int? page = null, int? limit = null, string sort = null);
        /// <summary>
        /// Get a lineOfBusiness by id
        /// </summary>
        /// <remarks>
        /// Returns the lineOfBusiness identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lineOfBusinessId">Id of the lineOfBusiness to be returned.</param>
        /// <returns>Task of LineOfBusiness</returns>
        System.Threading.Tasks.Task<LineOfBusiness> GetLineOfBusinessByIdAsync (int? lineOfBusinessId);

        /// <summary>
        /// Get a lineOfBusiness by id
        /// </summary>
        /// <remarks>
        /// Returns the lineOfBusiness identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lineOfBusinessId">Id of the lineOfBusiness to be returned.</param>
        /// <returns>Task of ApiResponse (LineOfBusiness)</returns>
        System.Threading.Tasks.Task<ApiResponse<LineOfBusiness>> GetLineOfBusinessByIdAsyncWithHttpInfo (int? lineOfBusinessId);
        /// <summary>
        /// Get the files for a lineOfBusiness.
        /// </summary>
        /// <remarks>
        /// Get all existing lineOfBusiness files.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lineOfBusinessId">Id of the lineOfBusiness to get files for</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetLineOfBusinessFilesAsync (int? lineOfBusinessId);

        /// <summary>
        /// Get the files for a lineOfBusiness.
        /// </summary>
        /// <remarks>
        /// Get all existing lineOfBusiness files.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lineOfBusinessId">Id of the lineOfBusiness to get files for</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetLineOfBusinessFilesAsyncWithHttpInfo (int? lineOfBusinessId);
        /// <summary>
        /// Get the tags for a lineOfBusiness.
        /// </summary>
        /// <remarks>
        /// Get all existing lineOfBusiness tags.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lineOfBusinessId">Id of the lineOfBusiness to get tags for</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetLineOfBusinessTagsAsync (int? lineOfBusinessId);

        /// <summary>
        /// Get the tags for a lineOfBusiness.
        /// </summary>
        /// <remarks>
        /// Get all existing lineOfBusiness tags.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lineOfBusinessId">Id of the lineOfBusiness to get tags for</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetLineOfBusinessTagsAsyncWithHttpInfo (int? lineOfBusinessId);
        /// <summary>
        /// Update a lineOfBusiness
        /// </summary>
        /// <remarks>
        /// Updates an existing lineOfBusiness using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">LineOfBusiness to be updated.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateLineOfBusinessAsync (LineOfBusiness body);

        /// <summary>
        /// Update a lineOfBusiness
        /// </summary>
        /// <remarks>
        /// Updates an existing lineOfBusiness using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">LineOfBusiness to be updated.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateLineOfBusinessAsyncWithHttpInfo (LineOfBusiness body);
        /// <summary>
        /// Update a lineOfBusiness custom fields
        /// </summary>
        /// <remarks>
        /// Updates an existing lineOfBusiness custom fields using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">LineOfBusiness to be updated.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateLineOfBusinessCustomFieldsAsync (LineOfBusiness body);

        /// <summary>
        /// Update a lineOfBusiness custom fields
        /// </summary>
        /// <remarks>
        /// Updates an existing lineOfBusiness custom fields using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">LineOfBusiness to be updated.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateLineOfBusinessCustomFieldsAsyncWithHttpInfo (LineOfBusiness body);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class LineOfBusinessApi : ILineOfBusinessApi
    {
        private Infoplus.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="LineOfBusinessApi"/> class.
        /// </summary>
        /// <returns></returns>
        public LineOfBusinessApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = Infoplus.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LineOfBusinessApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public LineOfBusinessApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Infoplus.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Infoplus.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create a lineOfBusiness Inserts a new lineOfBusiness using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">LineOfBusiness to be inserted.</param>
        /// <returns>LineOfBusiness</returns>
        public LineOfBusiness AddLineOfBusiness (LineOfBusiness body)
        {
             ApiResponse<LineOfBusiness> localVarResponse = AddLineOfBusinessWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a lineOfBusiness Inserts a new lineOfBusiness using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">LineOfBusiness to be inserted.</param>
        /// <returns>ApiResponse of LineOfBusiness</returns>
        public ApiResponse< LineOfBusiness > AddLineOfBusinessWithHttpInfo (LineOfBusiness body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling LineOfBusinessApi->AddLineOfBusiness");

            var localVarPath = "/beta/lineOfBusiness";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddLineOfBusiness", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LineOfBusiness>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LineOfBusiness) Configuration.ApiClient.Deserialize(localVarResponse, typeof(LineOfBusiness)));
        }

        /// <summary>
        /// Create a lineOfBusiness Inserts a new lineOfBusiness using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">LineOfBusiness to be inserted.</param>
        /// <returns>Task of LineOfBusiness</returns>
        public async System.Threading.Tasks.Task<LineOfBusiness> AddLineOfBusinessAsync (LineOfBusiness body)
        {
             ApiResponse<LineOfBusiness> localVarResponse = await AddLineOfBusinessAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a lineOfBusiness Inserts a new lineOfBusiness using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">LineOfBusiness to be inserted.</param>
        /// <returns>Task of ApiResponse (LineOfBusiness)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<LineOfBusiness>> AddLineOfBusinessAsyncWithHttpInfo (LineOfBusiness body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling LineOfBusinessApi->AddLineOfBusiness");

            var localVarPath = "/beta/lineOfBusiness";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddLineOfBusiness", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LineOfBusiness>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LineOfBusiness) Configuration.ApiClient.Deserialize(localVarResponse, typeof(LineOfBusiness)));
        }

        /// <summary>
        /// Add new audit for a lineOfBusiness Adds an audit to an existing lineOfBusiness.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lineOfBusinessId">Id of the lineOfBusiness to add an audit to</param>
        /// <param name="lineOfBusinessAudit">The audit to add</param>
        /// <returns></returns>
        public void AddLineOfBusinessAudit (int? lineOfBusinessId, string lineOfBusinessAudit)
        {
             AddLineOfBusinessAuditWithHttpInfo(lineOfBusinessId, lineOfBusinessAudit);
        }

        /// <summary>
        /// Add new audit for a lineOfBusiness Adds an audit to an existing lineOfBusiness.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lineOfBusinessId">Id of the lineOfBusiness to add an audit to</param>
        /// <param name="lineOfBusinessAudit">The audit to add</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AddLineOfBusinessAuditWithHttpInfo (int? lineOfBusinessId, string lineOfBusinessAudit)
        {
            // verify the required parameter 'lineOfBusinessId' is set
            if (lineOfBusinessId == null)
                throw new ApiException(400, "Missing required parameter 'lineOfBusinessId' when calling LineOfBusinessApi->AddLineOfBusinessAudit");
            // verify the required parameter 'lineOfBusinessAudit' is set
            if (lineOfBusinessAudit == null)
                throw new ApiException(400, "Missing required parameter 'lineOfBusinessAudit' when calling LineOfBusinessApi->AddLineOfBusinessAudit");

            var localVarPath = "/beta/lineOfBusiness/{lineOfBusinessId}/audit/{lineOfBusinessAudit}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (lineOfBusinessId != null) localVarPathParams.Add("lineOfBusinessId", Configuration.ApiClient.ParameterToString(lineOfBusinessId)); // path parameter
            if (lineOfBusinessAudit != null) localVarPathParams.Add("lineOfBusinessAudit", Configuration.ApiClient.ParameterToString(lineOfBusinessAudit)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddLineOfBusinessAudit", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Add new audit for a lineOfBusiness Adds an audit to an existing lineOfBusiness.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lineOfBusinessId">Id of the lineOfBusiness to add an audit to</param>
        /// <param name="lineOfBusinessAudit">The audit to add</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddLineOfBusinessAuditAsync (int? lineOfBusinessId, string lineOfBusinessAudit)
        {
             await AddLineOfBusinessAuditAsyncWithHttpInfo(lineOfBusinessId, lineOfBusinessAudit);

        }

        /// <summary>
        /// Add new audit for a lineOfBusiness Adds an audit to an existing lineOfBusiness.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lineOfBusinessId">Id of the lineOfBusiness to add an audit to</param>
        /// <param name="lineOfBusinessAudit">The audit to add</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddLineOfBusinessAuditAsyncWithHttpInfo (int? lineOfBusinessId, string lineOfBusinessAudit)
        {
            // verify the required parameter 'lineOfBusinessId' is set
            if (lineOfBusinessId == null)
                throw new ApiException(400, "Missing required parameter 'lineOfBusinessId' when calling LineOfBusinessApi->AddLineOfBusinessAudit");
            // verify the required parameter 'lineOfBusinessAudit' is set
            if (lineOfBusinessAudit == null)
                throw new ApiException(400, "Missing required parameter 'lineOfBusinessAudit' when calling LineOfBusinessApi->AddLineOfBusinessAudit");

            var localVarPath = "/beta/lineOfBusiness/{lineOfBusinessId}/audit/{lineOfBusinessAudit}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (lineOfBusinessId != null) localVarPathParams.Add("lineOfBusinessId", Configuration.ApiClient.ParameterToString(lineOfBusinessId)); // path parameter
            if (lineOfBusinessAudit != null) localVarPathParams.Add("lineOfBusinessAudit", Configuration.ApiClient.ParameterToString(lineOfBusinessAudit)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddLineOfBusinessAudit", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Attach a file to a lineOfBusiness Adds a file to an existing lineOfBusiness.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lineOfBusinessId">Id of the lineOfBusiness to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns></returns>
        public void AddLineOfBusinessFile (int? lineOfBusinessId, string fileName)
        {
             AddLineOfBusinessFileWithHttpInfo(lineOfBusinessId, fileName);
        }

        /// <summary>
        /// Attach a file to a lineOfBusiness Adds a file to an existing lineOfBusiness.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lineOfBusinessId">Id of the lineOfBusiness to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AddLineOfBusinessFileWithHttpInfo (int? lineOfBusinessId, string fileName)
        {
            // verify the required parameter 'lineOfBusinessId' is set
            if (lineOfBusinessId == null)
                throw new ApiException(400, "Missing required parameter 'lineOfBusinessId' when calling LineOfBusinessApi->AddLineOfBusinessFile");
            // verify the required parameter 'fileName' is set
            if (fileName == null)
                throw new ApiException(400, "Missing required parameter 'fileName' when calling LineOfBusinessApi->AddLineOfBusinessFile");

            var localVarPath = "/beta/lineOfBusiness/{lineOfBusinessId}/file/{fileName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (lineOfBusinessId != null) localVarPathParams.Add("lineOfBusinessId", Configuration.ApiClient.ParameterToString(lineOfBusinessId)); // path parameter
            if (fileName != null) localVarPathParams.Add("fileName", Configuration.ApiClient.ParameterToString(fileName)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddLineOfBusinessFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Attach a file to a lineOfBusiness Adds a file to an existing lineOfBusiness.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lineOfBusinessId">Id of the lineOfBusiness to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddLineOfBusinessFileAsync (int? lineOfBusinessId, string fileName)
        {
             await AddLineOfBusinessFileAsyncWithHttpInfo(lineOfBusinessId, fileName);

        }

        /// <summary>
        /// Attach a file to a lineOfBusiness Adds a file to an existing lineOfBusiness.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lineOfBusinessId">Id of the lineOfBusiness to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddLineOfBusinessFileAsyncWithHttpInfo (int? lineOfBusinessId, string fileName)
        {
            // verify the required parameter 'lineOfBusinessId' is set
            if (lineOfBusinessId == null)
                throw new ApiException(400, "Missing required parameter 'lineOfBusinessId' when calling LineOfBusinessApi->AddLineOfBusinessFile");
            // verify the required parameter 'fileName' is set
            if (fileName == null)
                throw new ApiException(400, "Missing required parameter 'fileName' when calling LineOfBusinessApi->AddLineOfBusinessFile");

            var localVarPath = "/beta/lineOfBusiness/{lineOfBusinessId}/file/{fileName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (lineOfBusinessId != null) localVarPathParams.Add("lineOfBusinessId", Configuration.ApiClient.ParameterToString(lineOfBusinessId)); // path parameter
            if (fileName != null) localVarPathParams.Add("fileName", Configuration.ApiClient.ParameterToString(fileName)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddLineOfBusinessFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Attach a file to a lineOfBusiness by URL. Adds a file to an existing lineOfBusiness by URL.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="lineOfBusinessId">Id of the lineOfBusiness to add an file to</param>
        /// <returns></returns>
        public void AddLineOfBusinessFileByURL (RecordFile body, int? lineOfBusinessId)
        {
             AddLineOfBusinessFileByURLWithHttpInfo(body, lineOfBusinessId);
        }

        /// <summary>
        /// Attach a file to a lineOfBusiness by URL. Adds a file to an existing lineOfBusiness by URL.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="lineOfBusinessId">Id of the lineOfBusiness to add an file to</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AddLineOfBusinessFileByURLWithHttpInfo (RecordFile body, int? lineOfBusinessId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling LineOfBusinessApi->AddLineOfBusinessFileByURL");
            // verify the required parameter 'lineOfBusinessId' is set
            if (lineOfBusinessId == null)
                throw new ApiException(400, "Missing required parameter 'lineOfBusinessId' when calling LineOfBusinessApi->AddLineOfBusinessFileByURL");

            var localVarPath = "/beta/lineOfBusiness/{lineOfBusinessId}/file";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (lineOfBusinessId != null) localVarPathParams.Add("lineOfBusinessId", Configuration.ApiClient.ParameterToString(lineOfBusinessId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddLineOfBusinessFileByURL", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Attach a file to a lineOfBusiness by URL. Adds a file to an existing lineOfBusiness by URL.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="lineOfBusinessId">Id of the lineOfBusiness to add an file to</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddLineOfBusinessFileByURLAsync (RecordFile body, int? lineOfBusinessId)
        {
             await AddLineOfBusinessFileByURLAsyncWithHttpInfo(body, lineOfBusinessId);

        }

        /// <summary>
        /// Attach a file to a lineOfBusiness by URL. Adds a file to an existing lineOfBusiness by URL.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="lineOfBusinessId">Id of the lineOfBusiness to add an file to</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddLineOfBusinessFileByURLAsyncWithHttpInfo (RecordFile body, int? lineOfBusinessId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling LineOfBusinessApi->AddLineOfBusinessFileByURL");
            // verify the required parameter 'lineOfBusinessId' is set
            if (lineOfBusinessId == null)
                throw new ApiException(400, "Missing required parameter 'lineOfBusinessId' when calling LineOfBusinessApi->AddLineOfBusinessFileByURL");

            var localVarPath = "/beta/lineOfBusiness/{lineOfBusinessId}/file";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (lineOfBusinessId != null) localVarPathParams.Add("lineOfBusinessId", Configuration.ApiClient.ParameterToString(lineOfBusinessId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddLineOfBusinessFileByURL", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Add new tags for a lineOfBusiness. Adds a tag to an existing lineOfBusiness.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lineOfBusinessId">Id of the lineOfBusiness to add a tag to</param>
        /// <param name="lineOfBusinessTag">The tag to add</param>
        /// <returns></returns>
        public void AddLineOfBusinessTag (int? lineOfBusinessId, string lineOfBusinessTag)
        {
             AddLineOfBusinessTagWithHttpInfo(lineOfBusinessId, lineOfBusinessTag);
        }

        /// <summary>
        /// Add new tags for a lineOfBusiness. Adds a tag to an existing lineOfBusiness.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lineOfBusinessId">Id of the lineOfBusiness to add a tag to</param>
        /// <param name="lineOfBusinessTag">The tag to add</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AddLineOfBusinessTagWithHttpInfo (int? lineOfBusinessId, string lineOfBusinessTag)
        {
            // verify the required parameter 'lineOfBusinessId' is set
            if (lineOfBusinessId == null)
                throw new ApiException(400, "Missing required parameter 'lineOfBusinessId' when calling LineOfBusinessApi->AddLineOfBusinessTag");
            // verify the required parameter 'lineOfBusinessTag' is set
            if (lineOfBusinessTag == null)
                throw new ApiException(400, "Missing required parameter 'lineOfBusinessTag' when calling LineOfBusinessApi->AddLineOfBusinessTag");

            var localVarPath = "/beta/lineOfBusiness/{lineOfBusinessId}/tag/{lineOfBusinessTag}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (lineOfBusinessId != null) localVarPathParams.Add("lineOfBusinessId", Configuration.ApiClient.ParameterToString(lineOfBusinessId)); // path parameter
            if (lineOfBusinessTag != null) localVarPathParams.Add("lineOfBusinessTag", Configuration.ApiClient.ParameterToString(lineOfBusinessTag)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddLineOfBusinessTag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Add new tags for a lineOfBusiness. Adds a tag to an existing lineOfBusiness.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lineOfBusinessId">Id of the lineOfBusiness to add a tag to</param>
        /// <param name="lineOfBusinessTag">The tag to add</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddLineOfBusinessTagAsync (int? lineOfBusinessId, string lineOfBusinessTag)
        {
             await AddLineOfBusinessTagAsyncWithHttpInfo(lineOfBusinessId, lineOfBusinessTag);

        }

        /// <summary>
        /// Add new tags for a lineOfBusiness. Adds a tag to an existing lineOfBusiness.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lineOfBusinessId">Id of the lineOfBusiness to add a tag to</param>
        /// <param name="lineOfBusinessTag">The tag to add</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddLineOfBusinessTagAsyncWithHttpInfo (int? lineOfBusinessId, string lineOfBusinessTag)
        {
            // verify the required parameter 'lineOfBusinessId' is set
            if (lineOfBusinessId == null)
                throw new ApiException(400, "Missing required parameter 'lineOfBusinessId' when calling LineOfBusinessApi->AddLineOfBusinessTag");
            // verify the required parameter 'lineOfBusinessTag' is set
            if (lineOfBusinessTag == null)
                throw new ApiException(400, "Missing required parameter 'lineOfBusinessTag' when calling LineOfBusinessApi->AddLineOfBusinessTag");

            var localVarPath = "/beta/lineOfBusiness/{lineOfBusinessId}/tag/{lineOfBusinessTag}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (lineOfBusinessId != null) localVarPathParams.Add("lineOfBusinessId", Configuration.ApiClient.ParameterToString(lineOfBusinessId)); // path parameter
            if (lineOfBusinessTag != null) localVarPathParams.Add("lineOfBusinessTag", Configuration.ApiClient.ParameterToString(lineOfBusinessTag)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddLineOfBusinessTag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a file for a lineOfBusiness. Deletes an existing lineOfBusiness file using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lineOfBusinessId">Id of the lineOfBusiness to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns></returns>
        public void DeleteLineOfBusinessFile (int? lineOfBusinessId, int? fileId)
        {
             DeleteLineOfBusinessFileWithHttpInfo(lineOfBusinessId, fileId);
        }

        /// <summary>
        /// Delete a file for a lineOfBusiness. Deletes an existing lineOfBusiness file using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lineOfBusinessId">Id of the lineOfBusiness to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteLineOfBusinessFileWithHttpInfo (int? lineOfBusinessId, int? fileId)
        {
            // verify the required parameter 'lineOfBusinessId' is set
            if (lineOfBusinessId == null)
                throw new ApiException(400, "Missing required parameter 'lineOfBusinessId' when calling LineOfBusinessApi->DeleteLineOfBusinessFile");
            // verify the required parameter 'fileId' is set
            if (fileId == null)
                throw new ApiException(400, "Missing required parameter 'fileId' when calling LineOfBusinessApi->DeleteLineOfBusinessFile");

            var localVarPath = "/beta/lineOfBusiness/{lineOfBusinessId}/file/{fileId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (lineOfBusinessId != null) localVarPathParams.Add("lineOfBusinessId", Configuration.ApiClient.ParameterToString(lineOfBusinessId)); // path parameter
            if (fileId != null) localVarPathParams.Add("fileId", Configuration.ApiClient.ParameterToString(fileId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteLineOfBusinessFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a file for a lineOfBusiness. Deletes an existing lineOfBusiness file using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lineOfBusinessId">Id of the lineOfBusiness to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteLineOfBusinessFileAsync (int? lineOfBusinessId, int? fileId)
        {
             await DeleteLineOfBusinessFileAsyncWithHttpInfo(lineOfBusinessId, fileId);

        }

        /// <summary>
        /// Delete a file for a lineOfBusiness. Deletes an existing lineOfBusiness file using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lineOfBusinessId">Id of the lineOfBusiness to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteLineOfBusinessFileAsyncWithHttpInfo (int? lineOfBusinessId, int? fileId)
        {
            // verify the required parameter 'lineOfBusinessId' is set
            if (lineOfBusinessId == null)
                throw new ApiException(400, "Missing required parameter 'lineOfBusinessId' when calling LineOfBusinessApi->DeleteLineOfBusinessFile");
            // verify the required parameter 'fileId' is set
            if (fileId == null)
                throw new ApiException(400, "Missing required parameter 'fileId' when calling LineOfBusinessApi->DeleteLineOfBusinessFile");

            var localVarPath = "/beta/lineOfBusiness/{lineOfBusinessId}/file/{fileId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (lineOfBusinessId != null) localVarPathParams.Add("lineOfBusinessId", Configuration.ApiClient.ParameterToString(lineOfBusinessId)); // path parameter
            if (fileId != null) localVarPathParams.Add("fileId", Configuration.ApiClient.ParameterToString(fileId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteLineOfBusinessFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a tag for a lineOfBusiness. Deletes an existing lineOfBusiness tag using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lineOfBusinessId">Id of the lineOfBusiness to remove tag from</param>
        /// <param name="lineOfBusinessTag">The tag to delete</param>
        /// <returns></returns>
        public void DeleteLineOfBusinessTag (int? lineOfBusinessId, string lineOfBusinessTag)
        {
             DeleteLineOfBusinessTagWithHttpInfo(lineOfBusinessId, lineOfBusinessTag);
        }

        /// <summary>
        /// Delete a tag for a lineOfBusiness. Deletes an existing lineOfBusiness tag using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lineOfBusinessId">Id of the lineOfBusiness to remove tag from</param>
        /// <param name="lineOfBusinessTag">The tag to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteLineOfBusinessTagWithHttpInfo (int? lineOfBusinessId, string lineOfBusinessTag)
        {
            // verify the required parameter 'lineOfBusinessId' is set
            if (lineOfBusinessId == null)
                throw new ApiException(400, "Missing required parameter 'lineOfBusinessId' when calling LineOfBusinessApi->DeleteLineOfBusinessTag");
            // verify the required parameter 'lineOfBusinessTag' is set
            if (lineOfBusinessTag == null)
                throw new ApiException(400, "Missing required parameter 'lineOfBusinessTag' when calling LineOfBusinessApi->DeleteLineOfBusinessTag");

            var localVarPath = "/beta/lineOfBusiness/{lineOfBusinessId}/tag/{lineOfBusinessTag}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (lineOfBusinessId != null) localVarPathParams.Add("lineOfBusinessId", Configuration.ApiClient.ParameterToString(lineOfBusinessId)); // path parameter
            if (lineOfBusinessTag != null) localVarPathParams.Add("lineOfBusinessTag", Configuration.ApiClient.ParameterToString(lineOfBusinessTag)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteLineOfBusinessTag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a tag for a lineOfBusiness. Deletes an existing lineOfBusiness tag using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lineOfBusinessId">Id of the lineOfBusiness to remove tag from</param>
        /// <param name="lineOfBusinessTag">The tag to delete</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteLineOfBusinessTagAsync (int? lineOfBusinessId, string lineOfBusinessTag)
        {
             await DeleteLineOfBusinessTagAsyncWithHttpInfo(lineOfBusinessId, lineOfBusinessTag);

        }

        /// <summary>
        /// Delete a tag for a lineOfBusiness. Deletes an existing lineOfBusiness tag using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lineOfBusinessId">Id of the lineOfBusiness to remove tag from</param>
        /// <param name="lineOfBusinessTag">The tag to delete</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteLineOfBusinessTagAsyncWithHttpInfo (int? lineOfBusinessId, string lineOfBusinessTag)
        {
            // verify the required parameter 'lineOfBusinessId' is set
            if (lineOfBusinessId == null)
                throw new ApiException(400, "Missing required parameter 'lineOfBusinessId' when calling LineOfBusinessApi->DeleteLineOfBusinessTag");
            // verify the required parameter 'lineOfBusinessTag' is set
            if (lineOfBusinessTag == null)
                throw new ApiException(400, "Missing required parameter 'lineOfBusinessTag' when calling LineOfBusinessApi->DeleteLineOfBusinessTag");

            var localVarPath = "/beta/lineOfBusiness/{lineOfBusinessId}/tag/{lineOfBusinessTag}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (lineOfBusinessId != null) localVarPathParams.Add("lineOfBusinessId", Configuration.ApiClient.ParameterToString(lineOfBusinessId)); // path parameter
            if (lineOfBusinessTag != null) localVarPathParams.Add("lineOfBusinessTag", Configuration.ApiClient.ParameterToString(lineOfBusinessTag)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteLineOfBusinessTag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get a duplicated a lineOfBusiness by id Returns a duplicated lineOfBusiness identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lineOfBusinessId">Id of the lineOfBusiness to be duplicated.</param>
        /// <returns>LineOfBusiness</returns>
        public LineOfBusiness GetDuplicateLineOfBusinessById (int? lineOfBusinessId)
        {
             ApiResponse<LineOfBusiness> localVarResponse = GetDuplicateLineOfBusinessByIdWithHttpInfo(lineOfBusinessId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a duplicated a lineOfBusiness by id Returns a duplicated lineOfBusiness identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lineOfBusinessId">Id of the lineOfBusiness to be duplicated.</param>
        /// <returns>ApiResponse of LineOfBusiness</returns>
        public ApiResponse< LineOfBusiness > GetDuplicateLineOfBusinessByIdWithHttpInfo (int? lineOfBusinessId)
        {
            // verify the required parameter 'lineOfBusinessId' is set
            if (lineOfBusinessId == null)
                throw new ApiException(400, "Missing required parameter 'lineOfBusinessId' when calling LineOfBusinessApi->GetDuplicateLineOfBusinessById");

            var localVarPath = "/beta/lineOfBusiness/duplicate/{lineOfBusinessId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (lineOfBusinessId != null) localVarPathParams.Add("lineOfBusinessId", Configuration.ApiClient.ParameterToString(lineOfBusinessId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDuplicateLineOfBusinessById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LineOfBusiness>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LineOfBusiness) Configuration.ApiClient.Deserialize(localVarResponse, typeof(LineOfBusiness)));
        }

        /// <summary>
        /// Get a duplicated a lineOfBusiness by id Returns a duplicated lineOfBusiness identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lineOfBusinessId">Id of the lineOfBusiness to be duplicated.</param>
        /// <returns>Task of LineOfBusiness</returns>
        public async System.Threading.Tasks.Task<LineOfBusiness> GetDuplicateLineOfBusinessByIdAsync (int? lineOfBusinessId)
        {
             ApiResponse<LineOfBusiness> localVarResponse = await GetDuplicateLineOfBusinessByIdAsyncWithHttpInfo(lineOfBusinessId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a duplicated a lineOfBusiness by id Returns a duplicated lineOfBusiness identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lineOfBusinessId">Id of the lineOfBusiness to be duplicated.</param>
        /// <returns>Task of ApiResponse (LineOfBusiness)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<LineOfBusiness>> GetDuplicateLineOfBusinessByIdAsyncWithHttpInfo (int? lineOfBusinessId)
        {
            // verify the required parameter 'lineOfBusinessId' is set
            if (lineOfBusinessId == null)
                throw new ApiException(400, "Missing required parameter 'lineOfBusinessId' when calling LineOfBusinessApi->GetDuplicateLineOfBusinessById");

            var localVarPath = "/beta/lineOfBusiness/duplicate/{lineOfBusinessId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (lineOfBusinessId != null) localVarPathParams.Add("lineOfBusinessId", Configuration.ApiClient.ParameterToString(lineOfBusinessId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDuplicateLineOfBusinessById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LineOfBusiness>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LineOfBusiness) Configuration.ApiClient.Deserialize(localVarResponse, typeof(LineOfBusiness)));
        }

        /// <summary>
        /// Search lineOfBusinesses by filter Returns the list of lineOfBusinesses that match the given filter.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>List&lt;LineOfBusiness&gt;</returns>
        public List<LineOfBusiness> GetLineOfBusinessByFilter (string filter = null, int? page = null, int? limit = null, string sort = null)
        {
             ApiResponse<List<LineOfBusiness>> localVarResponse = GetLineOfBusinessByFilterWithHttpInfo(filter, page, limit, sort);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Search lineOfBusinesses by filter Returns the list of lineOfBusinesses that match the given filter.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>ApiResponse of List&lt;LineOfBusiness&gt;</returns>
        public ApiResponse< List<LineOfBusiness> > GetLineOfBusinessByFilterWithHttpInfo (string filter = null, int? page = null, int? limit = null, string sort = null)
        {

            var localVarPath = "/beta/lineOfBusiness/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (filter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (page != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLineOfBusinessByFilter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<LineOfBusiness>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<LineOfBusiness>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<LineOfBusiness>)));
        }

        /// <summary>
        /// Search lineOfBusinesses by filter Returns the list of lineOfBusinesses that match the given filter.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>Task of List&lt;LineOfBusiness&gt;</returns>
        public async System.Threading.Tasks.Task<List<LineOfBusiness>> GetLineOfBusinessByFilterAsync (string filter = null, int? page = null, int? limit = null, string sort = null)
        {
             ApiResponse<List<LineOfBusiness>> localVarResponse = await GetLineOfBusinessByFilterAsyncWithHttpInfo(filter, page, limit, sort);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Search lineOfBusinesses by filter Returns the list of lineOfBusinesses that match the given filter.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;LineOfBusiness&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<LineOfBusiness>>> GetLineOfBusinessByFilterAsyncWithHttpInfo (string filter = null, int? page = null, int? limit = null, string sort = null)
        {

            var localVarPath = "/beta/lineOfBusiness/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (filter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (page != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLineOfBusinessByFilter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<LineOfBusiness>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<LineOfBusiness>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<LineOfBusiness>)));
        }

        /// <summary>
        /// Get a lineOfBusiness by id Returns the lineOfBusiness identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lineOfBusinessId">Id of the lineOfBusiness to be returned.</param>
        /// <returns>LineOfBusiness</returns>
        public LineOfBusiness GetLineOfBusinessById (int? lineOfBusinessId)
        {
             ApiResponse<LineOfBusiness> localVarResponse = GetLineOfBusinessByIdWithHttpInfo(lineOfBusinessId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a lineOfBusiness by id Returns the lineOfBusiness identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lineOfBusinessId">Id of the lineOfBusiness to be returned.</param>
        /// <returns>ApiResponse of LineOfBusiness</returns>
        public ApiResponse< LineOfBusiness > GetLineOfBusinessByIdWithHttpInfo (int? lineOfBusinessId)
        {
            // verify the required parameter 'lineOfBusinessId' is set
            if (lineOfBusinessId == null)
                throw new ApiException(400, "Missing required parameter 'lineOfBusinessId' when calling LineOfBusinessApi->GetLineOfBusinessById");

            var localVarPath = "/beta/lineOfBusiness/{lineOfBusinessId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (lineOfBusinessId != null) localVarPathParams.Add("lineOfBusinessId", Configuration.ApiClient.ParameterToString(lineOfBusinessId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLineOfBusinessById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LineOfBusiness>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LineOfBusiness) Configuration.ApiClient.Deserialize(localVarResponse, typeof(LineOfBusiness)));
        }

        /// <summary>
        /// Get a lineOfBusiness by id Returns the lineOfBusiness identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lineOfBusinessId">Id of the lineOfBusiness to be returned.</param>
        /// <returns>Task of LineOfBusiness</returns>
        public async System.Threading.Tasks.Task<LineOfBusiness> GetLineOfBusinessByIdAsync (int? lineOfBusinessId)
        {
             ApiResponse<LineOfBusiness> localVarResponse = await GetLineOfBusinessByIdAsyncWithHttpInfo(lineOfBusinessId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a lineOfBusiness by id Returns the lineOfBusiness identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lineOfBusinessId">Id of the lineOfBusiness to be returned.</param>
        /// <returns>Task of ApiResponse (LineOfBusiness)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<LineOfBusiness>> GetLineOfBusinessByIdAsyncWithHttpInfo (int? lineOfBusinessId)
        {
            // verify the required parameter 'lineOfBusinessId' is set
            if (lineOfBusinessId == null)
                throw new ApiException(400, "Missing required parameter 'lineOfBusinessId' when calling LineOfBusinessApi->GetLineOfBusinessById");

            var localVarPath = "/beta/lineOfBusiness/{lineOfBusinessId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (lineOfBusinessId != null) localVarPathParams.Add("lineOfBusinessId", Configuration.ApiClient.ParameterToString(lineOfBusinessId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLineOfBusinessById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LineOfBusiness>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LineOfBusiness) Configuration.ApiClient.Deserialize(localVarResponse, typeof(LineOfBusiness)));
        }

        /// <summary>
        /// Get the files for a lineOfBusiness. Get all existing lineOfBusiness files.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lineOfBusinessId">Id of the lineOfBusiness to get files for</param>
        /// <returns></returns>
        public void GetLineOfBusinessFiles (int? lineOfBusinessId)
        {
             GetLineOfBusinessFilesWithHttpInfo(lineOfBusinessId);
        }

        /// <summary>
        /// Get the files for a lineOfBusiness. Get all existing lineOfBusiness files.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lineOfBusinessId">Id of the lineOfBusiness to get files for</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GetLineOfBusinessFilesWithHttpInfo (int? lineOfBusinessId)
        {
            // verify the required parameter 'lineOfBusinessId' is set
            if (lineOfBusinessId == null)
                throw new ApiException(400, "Missing required parameter 'lineOfBusinessId' when calling LineOfBusinessApi->GetLineOfBusinessFiles");

            var localVarPath = "/beta/lineOfBusiness/{lineOfBusinessId}/file";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (lineOfBusinessId != null) localVarPathParams.Add("lineOfBusinessId", Configuration.ApiClient.ParameterToString(lineOfBusinessId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLineOfBusinessFiles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get the files for a lineOfBusiness. Get all existing lineOfBusiness files.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lineOfBusinessId">Id of the lineOfBusiness to get files for</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetLineOfBusinessFilesAsync (int? lineOfBusinessId)
        {
             await GetLineOfBusinessFilesAsyncWithHttpInfo(lineOfBusinessId);

        }

        /// <summary>
        /// Get the files for a lineOfBusiness. Get all existing lineOfBusiness files.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lineOfBusinessId">Id of the lineOfBusiness to get files for</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetLineOfBusinessFilesAsyncWithHttpInfo (int? lineOfBusinessId)
        {
            // verify the required parameter 'lineOfBusinessId' is set
            if (lineOfBusinessId == null)
                throw new ApiException(400, "Missing required parameter 'lineOfBusinessId' when calling LineOfBusinessApi->GetLineOfBusinessFiles");

            var localVarPath = "/beta/lineOfBusiness/{lineOfBusinessId}/file";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (lineOfBusinessId != null) localVarPathParams.Add("lineOfBusinessId", Configuration.ApiClient.ParameterToString(lineOfBusinessId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLineOfBusinessFiles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get the tags for a lineOfBusiness. Get all existing lineOfBusiness tags.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lineOfBusinessId">Id of the lineOfBusiness to get tags for</param>
        /// <returns></returns>
        public void GetLineOfBusinessTags (int? lineOfBusinessId)
        {
             GetLineOfBusinessTagsWithHttpInfo(lineOfBusinessId);
        }

        /// <summary>
        /// Get the tags for a lineOfBusiness. Get all existing lineOfBusiness tags.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lineOfBusinessId">Id of the lineOfBusiness to get tags for</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GetLineOfBusinessTagsWithHttpInfo (int? lineOfBusinessId)
        {
            // verify the required parameter 'lineOfBusinessId' is set
            if (lineOfBusinessId == null)
                throw new ApiException(400, "Missing required parameter 'lineOfBusinessId' when calling LineOfBusinessApi->GetLineOfBusinessTags");

            var localVarPath = "/beta/lineOfBusiness/{lineOfBusinessId}/tag";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (lineOfBusinessId != null) localVarPathParams.Add("lineOfBusinessId", Configuration.ApiClient.ParameterToString(lineOfBusinessId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLineOfBusinessTags", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get the tags for a lineOfBusiness. Get all existing lineOfBusiness tags.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lineOfBusinessId">Id of the lineOfBusiness to get tags for</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetLineOfBusinessTagsAsync (int? lineOfBusinessId)
        {
             await GetLineOfBusinessTagsAsyncWithHttpInfo(lineOfBusinessId);

        }

        /// <summary>
        /// Get the tags for a lineOfBusiness. Get all existing lineOfBusiness tags.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lineOfBusinessId">Id of the lineOfBusiness to get tags for</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetLineOfBusinessTagsAsyncWithHttpInfo (int? lineOfBusinessId)
        {
            // verify the required parameter 'lineOfBusinessId' is set
            if (lineOfBusinessId == null)
                throw new ApiException(400, "Missing required parameter 'lineOfBusinessId' when calling LineOfBusinessApi->GetLineOfBusinessTags");

            var localVarPath = "/beta/lineOfBusiness/{lineOfBusinessId}/tag";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (lineOfBusinessId != null) localVarPathParams.Add("lineOfBusinessId", Configuration.ApiClient.ParameterToString(lineOfBusinessId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLineOfBusinessTags", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update a lineOfBusiness Updates an existing lineOfBusiness using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">LineOfBusiness to be updated.</param>
        /// <returns></returns>
        public void UpdateLineOfBusiness (LineOfBusiness body)
        {
             UpdateLineOfBusinessWithHttpInfo(body);
        }

        /// <summary>
        /// Update a lineOfBusiness Updates an existing lineOfBusiness using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">LineOfBusiness to be updated.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateLineOfBusinessWithHttpInfo (LineOfBusiness body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling LineOfBusinessApi->UpdateLineOfBusiness");

            var localVarPath = "/beta/lineOfBusiness";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateLineOfBusiness", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update a lineOfBusiness Updates an existing lineOfBusiness using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">LineOfBusiness to be updated.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateLineOfBusinessAsync (LineOfBusiness body)
        {
             await UpdateLineOfBusinessAsyncWithHttpInfo(body);

        }

        /// <summary>
        /// Update a lineOfBusiness Updates an existing lineOfBusiness using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">LineOfBusiness to be updated.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateLineOfBusinessAsyncWithHttpInfo (LineOfBusiness body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling LineOfBusinessApi->UpdateLineOfBusiness");

            var localVarPath = "/beta/lineOfBusiness";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateLineOfBusiness", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update a lineOfBusiness custom fields Updates an existing lineOfBusiness custom fields using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">LineOfBusiness to be updated.</param>
        /// <returns></returns>
        public void UpdateLineOfBusinessCustomFields (LineOfBusiness body)
        {
             UpdateLineOfBusinessCustomFieldsWithHttpInfo(body);
        }

        /// <summary>
        /// Update a lineOfBusiness custom fields Updates an existing lineOfBusiness custom fields using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">LineOfBusiness to be updated.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateLineOfBusinessCustomFieldsWithHttpInfo (LineOfBusiness body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling LineOfBusinessApi->UpdateLineOfBusinessCustomFields");

            var localVarPath = "/beta/lineOfBusiness/customFields";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateLineOfBusinessCustomFields", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update a lineOfBusiness custom fields Updates an existing lineOfBusiness custom fields using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">LineOfBusiness to be updated.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateLineOfBusinessCustomFieldsAsync (LineOfBusiness body)
        {
             await UpdateLineOfBusinessCustomFieldsAsyncWithHttpInfo(body);

        }

        /// <summary>
        /// Update a lineOfBusiness custom fields Updates an existing lineOfBusiness custom fields using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">LineOfBusiness to be updated.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateLineOfBusinessCustomFieldsAsyncWithHttpInfo (LineOfBusiness body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling LineOfBusinessApi->UpdateLineOfBusinessCustomFields");

            var localVarPath = "/beta/lineOfBusiness/customFields";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateLineOfBusinessCustomFields", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

    }
}
