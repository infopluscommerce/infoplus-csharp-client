/* 
 * Infoplus API
 *
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Infoplus.Client;
using Infoplus.Model;

namespace Infoplus.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ILoadContentApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Add new audit for a loadContent
        /// </summary>
        /// <remarks>
        /// Adds an audit to an existing loadContent.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loadContentId">Id of the loadContent to add an audit to</param>
        /// <param name="loadContentAudit">The audit to add</param>
        /// <returns></returns>
        void AddLoadContentAudit (int? loadContentId, string loadContentAudit);

        /// <summary>
        /// Add new audit for a loadContent
        /// </summary>
        /// <remarks>
        /// Adds an audit to an existing loadContent.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loadContentId">Id of the loadContent to add an audit to</param>
        /// <param name="loadContentAudit">The audit to add</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddLoadContentAuditWithHttpInfo (int? loadContentId, string loadContentAudit);
        /// <summary>
        /// Attach a file to a loadContent
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing loadContent.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loadContentId">Id of the loadContent to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns></returns>
        void AddLoadContentFile (int? loadContentId, string fileName);

        /// <summary>
        /// Attach a file to a loadContent
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing loadContent.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loadContentId">Id of the loadContent to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddLoadContentFileWithHttpInfo (int? loadContentId, string fileName);
        /// <summary>
        /// Attach a file to a loadContent by URL.
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing loadContent by URL.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="loadContentId">Id of the loadContent to add an file to</param>
        /// <returns></returns>
        void AddLoadContentFileByURL (RecordFile body, int? loadContentId);

        /// <summary>
        /// Attach a file to a loadContent by URL.
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing loadContent by URL.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="loadContentId">Id of the loadContent to add an file to</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddLoadContentFileByURLWithHttpInfo (RecordFile body, int? loadContentId);
        /// <summary>
        /// Add new tags for a loadContent.
        /// </summary>
        /// <remarks>
        /// Adds a tag to an existing loadContent.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loadContentId">Id of the loadContent to add a tag to</param>
        /// <param name="loadContentTag">The tag to add</param>
        /// <returns></returns>
        void AddLoadContentTag (int? loadContentId, string loadContentTag);

        /// <summary>
        /// Add new tags for a loadContent.
        /// </summary>
        /// <remarks>
        /// Adds a tag to an existing loadContent.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loadContentId">Id of the loadContent to add a tag to</param>
        /// <param name="loadContentTag">The tag to add</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddLoadContentTagWithHttpInfo (int? loadContentId, string loadContentTag);
        /// <summary>
        /// Delete a file for a loadContent.
        /// </summary>
        /// <remarks>
        /// Deletes an existing loadContent file using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loadContentId">Id of the loadContent to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns></returns>
        void DeleteLoadContentFile (int? loadContentId, int? fileId);

        /// <summary>
        /// Delete a file for a loadContent.
        /// </summary>
        /// <remarks>
        /// Deletes an existing loadContent file using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loadContentId">Id of the loadContent to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteLoadContentFileWithHttpInfo (int? loadContentId, int? fileId);
        /// <summary>
        /// Delete a tag for a loadContent.
        /// </summary>
        /// <remarks>
        /// Deletes an existing loadContent tag using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loadContentId">Id of the loadContent to remove tag from</param>
        /// <param name="loadContentTag">The tag to delete</param>
        /// <returns></returns>
        void DeleteLoadContentTag (int? loadContentId, string loadContentTag);

        /// <summary>
        /// Delete a tag for a loadContent.
        /// </summary>
        /// <remarks>
        /// Deletes an existing loadContent tag using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loadContentId">Id of the loadContent to remove tag from</param>
        /// <param name="loadContentTag">The tag to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteLoadContentTagWithHttpInfo (int? loadContentId, string loadContentTag);
        /// <summary>
        /// Get a duplicated a loadContent by id
        /// </summary>
        /// <remarks>
        /// Returns a duplicated loadContent identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loadContentId">Id of the loadContent to be duplicated.</param>
        /// <returns>LoadContent</returns>
        LoadContent GetDuplicateLoadContentById (int? loadContentId);

        /// <summary>
        /// Get a duplicated a loadContent by id
        /// </summary>
        /// <remarks>
        /// Returns a duplicated loadContent identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loadContentId">Id of the loadContent to be duplicated.</param>
        /// <returns>ApiResponse of LoadContent</returns>
        ApiResponse<LoadContent> GetDuplicateLoadContentByIdWithHttpInfo (int? loadContentId);
        /// <summary>
        /// Search loadContents by filter
        /// </summary>
        /// <remarks>
        /// Returns the list of loadContents that match the given filter.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>List&lt;LoadContent&gt;</returns>
        List<LoadContent> GetLoadContentByFilter (string filter = null, int? page = null, int? limit = null, string sort = null);

        /// <summary>
        /// Search loadContents by filter
        /// </summary>
        /// <remarks>
        /// Returns the list of loadContents that match the given filter.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>ApiResponse of List&lt;LoadContent&gt;</returns>
        ApiResponse<List<LoadContent>> GetLoadContentByFilterWithHttpInfo (string filter = null, int? page = null, int? limit = null, string sort = null);
        /// <summary>
        /// Get a loadContent by id
        /// </summary>
        /// <remarks>
        /// Returns the loadContent identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loadContentId">Id of the loadContent to be returned.</param>
        /// <returns>LoadContent</returns>
        LoadContent GetLoadContentById (int? loadContentId);

        /// <summary>
        /// Get a loadContent by id
        /// </summary>
        /// <remarks>
        /// Returns the loadContent identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loadContentId">Id of the loadContent to be returned.</param>
        /// <returns>ApiResponse of LoadContent</returns>
        ApiResponse<LoadContent> GetLoadContentByIdWithHttpInfo (int? loadContentId);
        /// <summary>
        /// Get the files for a loadContent.
        /// </summary>
        /// <remarks>
        /// Get all existing loadContent files.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loadContentId">Id of the loadContent to get files for</param>
        /// <returns></returns>
        void GetLoadContentFiles (int? loadContentId);

        /// <summary>
        /// Get the files for a loadContent.
        /// </summary>
        /// <remarks>
        /// Get all existing loadContent files.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loadContentId">Id of the loadContent to get files for</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetLoadContentFilesWithHttpInfo (int? loadContentId);
        /// <summary>
        /// Get the tags for a loadContent.
        /// </summary>
        /// <remarks>
        /// Get all existing loadContent tags.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loadContentId">Id of the loadContent to get tags for</param>
        /// <returns></returns>
        void GetLoadContentTags (int? loadContentId);

        /// <summary>
        /// Get the tags for a loadContent.
        /// </summary>
        /// <remarks>
        /// Get all existing loadContent tags.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loadContentId">Id of the loadContent to get tags for</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetLoadContentTagsWithHttpInfo (int? loadContentId);
        /// <summary>
        /// Update a loadContent custom fields
        /// </summary>
        /// <remarks>
        /// Updates an existing loadContent custom fields using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">LoadContent to be updated.</param>
        /// <returns></returns>
        void UpdateLoadContentCustomFields (LoadContent body);

        /// <summary>
        /// Update a loadContent custom fields
        /// </summary>
        /// <remarks>
        /// Updates an existing loadContent custom fields using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">LoadContent to be updated.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateLoadContentCustomFieldsWithHttpInfo (LoadContent body);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Add new audit for a loadContent
        /// </summary>
        /// <remarks>
        /// Adds an audit to an existing loadContent.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loadContentId">Id of the loadContent to add an audit to</param>
        /// <param name="loadContentAudit">The audit to add</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddLoadContentAuditAsync (int? loadContentId, string loadContentAudit);

        /// <summary>
        /// Add new audit for a loadContent
        /// </summary>
        /// <remarks>
        /// Adds an audit to an existing loadContent.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loadContentId">Id of the loadContent to add an audit to</param>
        /// <param name="loadContentAudit">The audit to add</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddLoadContentAuditAsyncWithHttpInfo (int? loadContentId, string loadContentAudit);
        /// <summary>
        /// Attach a file to a loadContent
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing loadContent.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loadContentId">Id of the loadContent to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddLoadContentFileAsync (int? loadContentId, string fileName);

        /// <summary>
        /// Attach a file to a loadContent
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing loadContent.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loadContentId">Id of the loadContent to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddLoadContentFileAsyncWithHttpInfo (int? loadContentId, string fileName);
        /// <summary>
        /// Attach a file to a loadContent by URL.
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing loadContent by URL.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="loadContentId">Id of the loadContent to add an file to</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddLoadContentFileByURLAsync (RecordFile body, int? loadContentId);

        /// <summary>
        /// Attach a file to a loadContent by URL.
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing loadContent by URL.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="loadContentId">Id of the loadContent to add an file to</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddLoadContentFileByURLAsyncWithHttpInfo (RecordFile body, int? loadContentId);
        /// <summary>
        /// Add new tags for a loadContent.
        /// </summary>
        /// <remarks>
        /// Adds a tag to an existing loadContent.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loadContentId">Id of the loadContent to add a tag to</param>
        /// <param name="loadContentTag">The tag to add</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddLoadContentTagAsync (int? loadContentId, string loadContentTag);

        /// <summary>
        /// Add new tags for a loadContent.
        /// </summary>
        /// <remarks>
        /// Adds a tag to an existing loadContent.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loadContentId">Id of the loadContent to add a tag to</param>
        /// <param name="loadContentTag">The tag to add</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddLoadContentTagAsyncWithHttpInfo (int? loadContentId, string loadContentTag);
        /// <summary>
        /// Delete a file for a loadContent.
        /// </summary>
        /// <remarks>
        /// Deletes an existing loadContent file using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loadContentId">Id of the loadContent to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteLoadContentFileAsync (int? loadContentId, int? fileId);

        /// <summary>
        /// Delete a file for a loadContent.
        /// </summary>
        /// <remarks>
        /// Deletes an existing loadContent file using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loadContentId">Id of the loadContent to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteLoadContentFileAsyncWithHttpInfo (int? loadContentId, int? fileId);
        /// <summary>
        /// Delete a tag for a loadContent.
        /// </summary>
        /// <remarks>
        /// Deletes an existing loadContent tag using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loadContentId">Id of the loadContent to remove tag from</param>
        /// <param name="loadContentTag">The tag to delete</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteLoadContentTagAsync (int? loadContentId, string loadContentTag);

        /// <summary>
        /// Delete a tag for a loadContent.
        /// </summary>
        /// <remarks>
        /// Deletes an existing loadContent tag using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loadContentId">Id of the loadContent to remove tag from</param>
        /// <param name="loadContentTag">The tag to delete</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteLoadContentTagAsyncWithHttpInfo (int? loadContentId, string loadContentTag);
        /// <summary>
        /// Get a duplicated a loadContent by id
        /// </summary>
        /// <remarks>
        /// Returns a duplicated loadContent identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loadContentId">Id of the loadContent to be duplicated.</param>
        /// <returns>Task of LoadContent</returns>
        System.Threading.Tasks.Task<LoadContent> GetDuplicateLoadContentByIdAsync (int? loadContentId);

        /// <summary>
        /// Get a duplicated a loadContent by id
        /// </summary>
        /// <remarks>
        /// Returns a duplicated loadContent identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loadContentId">Id of the loadContent to be duplicated.</param>
        /// <returns>Task of ApiResponse (LoadContent)</returns>
        System.Threading.Tasks.Task<ApiResponse<LoadContent>> GetDuplicateLoadContentByIdAsyncWithHttpInfo (int? loadContentId);
        /// <summary>
        /// Search loadContents by filter
        /// </summary>
        /// <remarks>
        /// Returns the list of loadContents that match the given filter.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>Task of List&lt;LoadContent&gt;</returns>
        System.Threading.Tasks.Task<List<LoadContent>> GetLoadContentByFilterAsync (string filter = null, int? page = null, int? limit = null, string sort = null);

        /// <summary>
        /// Search loadContents by filter
        /// </summary>
        /// <remarks>
        /// Returns the list of loadContents that match the given filter.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;LoadContent&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<LoadContent>>> GetLoadContentByFilterAsyncWithHttpInfo (string filter = null, int? page = null, int? limit = null, string sort = null);
        /// <summary>
        /// Get a loadContent by id
        /// </summary>
        /// <remarks>
        /// Returns the loadContent identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loadContentId">Id of the loadContent to be returned.</param>
        /// <returns>Task of LoadContent</returns>
        System.Threading.Tasks.Task<LoadContent> GetLoadContentByIdAsync (int? loadContentId);

        /// <summary>
        /// Get a loadContent by id
        /// </summary>
        /// <remarks>
        /// Returns the loadContent identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loadContentId">Id of the loadContent to be returned.</param>
        /// <returns>Task of ApiResponse (LoadContent)</returns>
        System.Threading.Tasks.Task<ApiResponse<LoadContent>> GetLoadContentByIdAsyncWithHttpInfo (int? loadContentId);
        /// <summary>
        /// Get the files for a loadContent.
        /// </summary>
        /// <remarks>
        /// Get all existing loadContent files.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loadContentId">Id of the loadContent to get files for</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetLoadContentFilesAsync (int? loadContentId);

        /// <summary>
        /// Get the files for a loadContent.
        /// </summary>
        /// <remarks>
        /// Get all existing loadContent files.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loadContentId">Id of the loadContent to get files for</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetLoadContentFilesAsyncWithHttpInfo (int? loadContentId);
        /// <summary>
        /// Get the tags for a loadContent.
        /// </summary>
        /// <remarks>
        /// Get all existing loadContent tags.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loadContentId">Id of the loadContent to get tags for</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetLoadContentTagsAsync (int? loadContentId);

        /// <summary>
        /// Get the tags for a loadContent.
        /// </summary>
        /// <remarks>
        /// Get all existing loadContent tags.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loadContentId">Id of the loadContent to get tags for</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetLoadContentTagsAsyncWithHttpInfo (int? loadContentId);
        /// <summary>
        /// Update a loadContent custom fields
        /// </summary>
        /// <remarks>
        /// Updates an existing loadContent custom fields using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">LoadContent to be updated.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateLoadContentCustomFieldsAsync (LoadContent body);

        /// <summary>
        /// Update a loadContent custom fields
        /// </summary>
        /// <remarks>
        /// Updates an existing loadContent custom fields using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">LoadContent to be updated.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateLoadContentCustomFieldsAsyncWithHttpInfo (LoadContent body);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class LoadContentApi : ILoadContentApi
    {
        private Infoplus.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="LoadContentApi"/> class.
        /// </summary>
        /// <returns></returns>
        public LoadContentApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = Infoplus.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LoadContentApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public LoadContentApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Infoplus.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Infoplus.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Add new audit for a loadContent Adds an audit to an existing loadContent.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loadContentId">Id of the loadContent to add an audit to</param>
        /// <param name="loadContentAudit">The audit to add</param>
        /// <returns></returns>
        public void AddLoadContentAudit (int? loadContentId, string loadContentAudit)
        {
             AddLoadContentAuditWithHttpInfo(loadContentId, loadContentAudit);
        }

        /// <summary>
        /// Add new audit for a loadContent Adds an audit to an existing loadContent.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loadContentId">Id of the loadContent to add an audit to</param>
        /// <param name="loadContentAudit">The audit to add</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AddLoadContentAuditWithHttpInfo (int? loadContentId, string loadContentAudit)
        {
            // verify the required parameter 'loadContentId' is set
            if (loadContentId == null)
                throw new ApiException(400, "Missing required parameter 'loadContentId' when calling LoadContentApi->AddLoadContentAudit");
            // verify the required parameter 'loadContentAudit' is set
            if (loadContentAudit == null)
                throw new ApiException(400, "Missing required parameter 'loadContentAudit' when calling LoadContentApi->AddLoadContentAudit");

            var localVarPath = "/beta/loadContent/{loadContentId}/audit/{loadContentAudit}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (loadContentId != null) localVarPathParams.Add("loadContentId", Configuration.ApiClient.ParameterToString(loadContentId)); // path parameter
            if (loadContentAudit != null) localVarPathParams.Add("loadContentAudit", Configuration.ApiClient.ParameterToString(loadContentAudit)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddLoadContentAudit", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Add new audit for a loadContent Adds an audit to an existing loadContent.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loadContentId">Id of the loadContent to add an audit to</param>
        /// <param name="loadContentAudit">The audit to add</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddLoadContentAuditAsync (int? loadContentId, string loadContentAudit)
        {
             await AddLoadContentAuditAsyncWithHttpInfo(loadContentId, loadContentAudit);

        }

        /// <summary>
        /// Add new audit for a loadContent Adds an audit to an existing loadContent.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loadContentId">Id of the loadContent to add an audit to</param>
        /// <param name="loadContentAudit">The audit to add</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddLoadContentAuditAsyncWithHttpInfo (int? loadContentId, string loadContentAudit)
        {
            // verify the required parameter 'loadContentId' is set
            if (loadContentId == null)
                throw new ApiException(400, "Missing required parameter 'loadContentId' when calling LoadContentApi->AddLoadContentAudit");
            // verify the required parameter 'loadContentAudit' is set
            if (loadContentAudit == null)
                throw new ApiException(400, "Missing required parameter 'loadContentAudit' when calling LoadContentApi->AddLoadContentAudit");

            var localVarPath = "/beta/loadContent/{loadContentId}/audit/{loadContentAudit}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (loadContentId != null) localVarPathParams.Add("loadContentId", Configuration.ApiClient.ParameterToString(loadContentId)); // path parameter
            if (loadContentAudit != null) localVarPathParams.Add("loadContentAudit", Configuration.ApiClient.ParameterToString(loadContentAudit)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddLoadContentAudit", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Attach a file to a loadContent Adds a file to an existing loadContent.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loadContentId">Id of the loadContent to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns></returns>
        public void AddLoadContentFile (int? loadContentId, string fileName)
        {
             AddLoadContentFileWithHttpInfo(loadContentId, fileName);
        }

        /// <summary>
        /// Attach a file to a loadContent Adds a file to an existing loadContent.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loadContentId">Id of the loadContent to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AddLoadContentFileWithHttpInfo (int? loadContentId, string fileName)
        {
            // verify the required parameter 'loadContentId' is set
            if (loadContentId == null)
                throw new ApiException(400, "Missing required parameter 'loadContentId' when calling LoadContentApi->AddLoadContentFile");
            // verify the required parameter 'fileName' is set
            if (fileName == null)
                throw new ApiException(400, "Missing required parameter 'fileName' when calling LoadContentApi->AddLoadContentFile");

            var localVarPath = "/beta/loadContent/{loadContentId}/file/{fileName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (loadContentId != null) localVarPathParams.Add("loadContentId", Configuration.ApiClient.ParameterToString(loadContentId)); // path parameter
            if (fileName != null) localVarPathParams.Add("fileName", Configuration.ApiClient.ParameterToString(fileName)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddLoadContentFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Attach a file to a loadContent Adds a file to an existing loadContent.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loadContentId">Id of the loadContent to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddLoadContentFileAsync (int? loadContentId, string fileName)
        {
             await AddLoadContentFileAsyncWithHttpInfo(loadContentId, fileName);

        }

        /// <summary>
        /// Attach a file to a loadContent Adds a file to an existing loadContent.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loadContentId">Id of the loadContent to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddLoadContentFileAsyncWithHttpInfo (int? loadContentId, string fileName)
        {
            // verify the required parameter 'loadContentId' is set
            if (loadContentId == null)
                throw new ApiException(400, "Missing required parameter 'loadContentId' when calling LoadContentApi->AddLoadContentFile");
            // verify the required parameter 'fileName' is set
            if (fileName == null)
                throw new ApiException(400, "Missing required parameter 'fileName' when calling LoadContentApi->AddLoadContentFile");

            var localVarPath = "/beta/loadContent/{loadContentId}/file/{fileName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (loadContentId != null) localVarPathParams.Add("loadContentId", Configuration.ApiClient.ParameterToString(loadContentId)); // path parameter
            if (fileName != null) localVarPathParams.Add("fileName", Configuration.ApiClient.ParameterToString(fileName)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddLoadContentFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Attach a file to a loadContent by URL. Adds a file to an existing loadContent by URL.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="loadContentId">Id of the loadContent to add an file to</param>
        /// <returns></returns>
        public void AddLoadContentFileByURL (RecordFile body, int? loadContentId)
        {
             AddLoadContentFileByURLWithHttpInfo(body, loadContentId);
        }

        /// <summary>
        /// Attach a file to a loadContent by URL. Adds a file to an existing loadContent by URL.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="loadContentId">Id of the loadContent to add an file to</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AddLoadContentFileByURLWithHttpInfo (RecordFile body, int? loadContentId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling LoadContentApi->AddLoadContentFileByURL");
            // verify the required parameter 'loadContentId' is set
            if (loadContentId == null)
                throw new ApiException(400, "Missing required parameter 'loadContentId' when calling LoadContentApi->AddLoadContentFileByURL");

            var localVarPath = "/beta/loadContent/{loadContentId}/file";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (loadContentId != null) localVarPathParams.Add("loadContentId", Configuration.ApiClient.ParameterToString(loadContentId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddLoadContentFileByURL", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Attach a file to a loadContent by URL. Adds a file to an existing loadContent by URL.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="loadContentId">Id of the loadContent to add an file to</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddLoadContentFileByURLAsync (RecordFile body, int? loadContentId)
        {
             await AddLoadContentFileByURLAsyncWithHttpInfo(body, loadContentId);

        }

        /// <summary>
        /// Attach a file to a loadContent by URL. Adds a file to an existing loadContent by URL.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="loadContentId">Id of the loadContent to add an file to</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddLoadContentFileByURLAsyncWithHttpInfo (RecordFile body, int? loadContentId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling LoadContentApi->AddLoadContentFileByURL");
            // verify the required parameter 'loadContentId' is set
            if (loadContentId == null)
                throw new ApiException(400, "Missing required parameter 'loadContentId' when calling LoadContentApi->AddLoadContentFileByURL");

            var localVarPath = "/beta/loadContent/{loadContentId}/file";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (loadContentId != null) localVarPathParams.Add("loadContentId", Configuration.ApiClient.ParameterToString(loadContentId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddLoadContentFileByURL", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Add new tags for a loadContent. Adds a tag to an existing loadContent.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loadContentId">Id of the loadContent to add a tag to</param>
        /// <param name="loadContentTag">The tag to add</param>
        /// <returns></returns>
        public void AddLoadContentTag (int? loadContentId, string loadContentTag)
        {
             AddLoadContentTagWithHttpInfo(loadContentId, loadContentTag);
        }

        /// <summary>
        /// Add new tags for a loadContent. Adds a tag to an existing loadContent.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loadContentId">Id of the loadContent to add a tag to</param>
        /// <param name="loadContentTag">The tag to add</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AddLoadContentTagWithHttpInfo (int? loadContentId, string loadContentTag)
        {
            // verify the required parameter 'loadContentId' is set
            if (loadContentId == null)
                throw new ApiException(400, "Missing required parameter 'loadContentId' when calling LoadContentApi->AddLoadContentTag");
            // verify the required parameter 'loadContentTag' is set
            if (loadContentTag == null)
                throw new ApiException(400, "Missing required parameter 'loadContentTag' when calling LoadContentApi->AddLoadContentTag");

            var localVarPath = "/beta/loadContent/{loadContentId}/tag/{loadContentTag}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (loadContentId != null) localVarPathParams.Add("loadContentId", Configuration.ApiClient.ParameterToString(loadContentId)); // path parameter
            if (loadContentTag != null) localVarPathParams.Add("loadContentTag", Configuration.ApiClient.ParameterToString(loadContentTag)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddLoadContentTag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Add new tags for a loadContent. Adds a tag to an existing loadContent.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loadContentId">Id of the loadContent to add a tag to</param>
        /// <param name="loadContentTag">The tag to add</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddLoadContentTagAsync (int? loadContentId, string loadContentTag)
        {
             await AddLoadContentTagAsyncWithHttpInfo(loadContentId, loadContentTag);

        }

        /// <summary>
        /// Add new tags for a loadContent. Adds a tag to an existing loadContent.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loadContentId">Id of the loadContent to add a tag to</param>
        /// <param name="loadContentTag">The tag to add</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddLoadContentTagAsyncWithHttpInfo (int? loadContentId, string loadContentTag)
        {
            // verify the required parameter 'loadContentId' is set
            if (loadContentId == null)
                throw new ApiException(400, "Missing required parameter 'loadContentId' when calling LoadContentApi->AddLoadContentTag");
            // verify the required parameter 'loadContentTag' is set
            if (loadContentTag == null)
                throw new ApiException(400, "Missing required parameter 'loadContentTag' when calling LoadContentApi->AddLoadContentTag");

            var localVarPath = "/beta/loadContent/{loadContentId}/tag/{loadContentTag}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (loadContentId != null) localVarPathParams.Add("loadContentId", Configuration.ApiClient.ParameterToString(loadContentId)); // path parameter
            if (loadContentTag != null) localVarPathParams.Add("loadContentTag", Configuration.ApiClient.ParameterToString(loadContentTag)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddLoadContentTag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a file for a loadContent. Deletes an existing loadContent file using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loadContentId">Id of the loadContent to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns></returns>
        public void DeleteLoadContentFile (int? loadContentId, int? fileId)
        {
             DeleteLoadContentFileWithHttpInfo(loadContentId, fileId);
        }

        /// <summary>
        /// Delete a file for a loadContent. Deletes an existing loadContent file using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loadContentId">Id of the loadContent to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteLoadContentFileWithHttpInfo (int? loadContentId, int? fileId)
        {
            // verify the required parameter 'loadContentId' is set
            if (loadContentId == null)
                throw new ApiException(400, "Missing required parameter 'loadContentId' when calling LoadContentApi->DeleteLoadContentFile");
            // verify the required parameter 'fileId' is set
            if (fileId == null)
                throw new ApiException(400, "Missing required parameter 'fileId' when calling LoadContentApi->DeleteLoadContentFile");

            var localVarPath = "/beta/loadContent/{loadContentId}/file/{fileId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (loadContentId != null) localVarPathParams.Add("loadContentId", Configuration.ApiClient.ParameterToString(loadContentId)); // path parameter
            if (fileId != null) localVarPathParams.Add("fileId", Configuration.ApiClient.ParameterToString(fileId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteLoadContentFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a file for a loadContent. Deletes an existing loadContent file using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loadContentId">Id of the loadContent to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteLoadContentFileAsync (int? loadContentId, int? fileId)
        {
             await DeleteLoadContentFileAsyncWithHttpInfo(loadContentId, fileId);

        }

        /// <summary>
        /// Delete a file for a loadContent. Deletes an existing loadContent file using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loadContentId">Id of the loadContent to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteLoadContentFileAsyncWithHttpInfo (int? loadContentId, int? fileId)
        {
            // verify the required parameter 'loadContentId' is set
            if (loadContentId == null)
                throw new ApiException(400, "Missing required parameter 'loadContentId' when calling LoadContentApi->DeleteLoadContentFile");
            // verify the required parameter 'fileId' is set
            if (fileId == null)
                throw new ApiException(400, "Missing required parameter 'fileId' when calling LoadContentApi->DeleteLoadContentFile");

            var localVarPath = "/beta/loadContent/{loadContentId}/file/{fileId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (loadContentId != null) localVarPathParams.Add("loadContentId", Configuration.ApiClient.ParameterToString(loadContentId)); // path parameter
            if (fileId != null) localVarPathParams.Add("fileId", Configuration.ApiClient.ParameterToString(fileId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteLoadContentFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a tag for a loadContent. Deletes an existing loadContent tag using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loadContentId">Id of the loadContent to remove tag from</param>
        /// <param name="loadContentTag">The tag to delete</param>
        /// <returns></returns>
        public void DeleteLoadContentTag (int? loadContentId, string loadContentTag)
        {
             DeleteLoadContentTagWithHttpInfo(loadContentId, loadContentTag);
        }

        /// <summary>
        /// Delete a tag for a loadContent. Deletes an existing loadContent tag using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loadContentId">Id of the loadContent to remove tag from</param>
        /// <param name="loadContentTag">The tag to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteLoadContentTagWithHttpInfo (int? loadContentId, string loadContentTag)
        {
            // verify the required parameter 'loadContentId' is set
            if (loadContentId == null)
                throw new ApiException(400, "Missing required parameter 'loadContentId' when calling LoadContentApi->DeleteLoadContentTag");
            // verify the required parameter 'loadContentTag' is set
            if (loadContentTag == null)
                throw new ApiException(400, "Missing required parameter 'loadContentTag' when calling LoadContentApi->DeleteLoadContentTag");

            var localVarPath = "/beta/loadContent/{loadContentId}/tag/{loadContentTag}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (loadContentId != null) localVarPathParams.Add("loadContentId", Configuration.ApiClient.ParameterToString(loadContentId)); // path parameter
            if (loadContentTag != null) localVarPathParams.Add("loadContentTag", Configuration.ApiClient.ParameterToString(loadContentTag)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteLoadContentTag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a tag for a loadContent. Deletes an existing loadContent tag using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loadContentId">Id of the loadContent to remove tag from</param>
        /// <param name="loadContentTag">The tag to delete</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteLoadContentTagAsync (int? loadContentId, string loadContentTag)
        {
             await DeleteLoadContentTagAsyncWithHttpInfo(loadContentId, loadContentTag);

        }

        /// <summary>
        /// Delete a tag for a loadContent. Deletes an existing loadContent tag using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loadContentId">Id of the loadContent to remove tag from</param>
        /// <param name="loadContentTag">The tag to delete</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteLoadContentTagAsyncWithHttpInfo (int? loadContentId, string loadContentTag)
        {
            // verify the required parameter 'loadContentId' is set
            if (loadContentId == null)
                throw new ApiException(400, "Missing required parameter 'loadContentId' when calling LoadContentApi->DeleteLoadContentTag");
            // verify the required parameter 'loadContentTag' is set
            if (loadContentTag == null)
                throw new ApiException(400, "Missing required parameter 'loadContentTag' when calling LoadContentApi->DeleteLoadContentTag");

            var localVarPath = "/beta/loadContent/{loadContentId}/tag/{loadContentTag}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (loadContentId != null) localVarPathParams.Add("loadContentId", Configuration.ApiClient.ParameterToString(loadContentId)); // path parameter
            if (loadContentTag != null) localVarPathParams.Add("loadContentTag", Configuration.ApiClient.ParameterToString(loadContentTag)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteLoadContentTag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get a duplicated a loadContent by id Returns a duplicated loadContent identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loadContentId">Id of the loadContent to be duplicated.</param>
        /// <returns>LoadContent</returns>
        public LoadContent GetDuplicateLoadContentById (int? loadContentId)
        {
             ApiResponse<LoadContent> localVarResponse = GetDuplicateLoadContentByIdWithHttpInfo(loadContentId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a duplicated a loadContent by id Returns a duplicated loadContent identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loadContentId">Id of the loadContent to be duplicated.</param>
        /// <returns>ApiResponse of LoadContent</returns>
        public ApiResponse< LoadContent > GetDuplicateLoadContentByIdWithHttpInfo (int? loadContentId)
        {
            // verify the required parameter 'loadContentId' is set
            if (loadContentId == null)
                throw new ApiException(400, "Missing required parameter 'loadContentId' when calling LoadContentApi->GetDuplicateLoadContentById");

            var localVarPath = "/beta/loadContent/duplicate/{loadContentId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (loadContentId != null) localVarPathParams.Add("loadContentId", Configuration.ApiClient.ParameterToString(loadContentId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDuplicateLoadContentById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LoadContent>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LoadContent) Configuration.ApiClient.Deserialize(localVarResponse, typeof(LoadContent)));
        }

        /// <summary>
        /// Get a duplicated a loadContent by id Returns a duplicated loadContent identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loadContentId">Id of the loadContent to be duplicated.</param>
        /// <returns>Task of LoadContent</returns>
        public async System.Threading.Tasks.Task<LoadContent> GetDuplicateLoadContentByIdAsync (int? loadContentId)
        {
             ApiResponse<LoadContent> localVarResponse = await GetDuplicateLoadContentByIdAsyncWithHttpInfo(loadContentId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a duplicated a loadContent by id Returns a duplicated loadContent identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loadContentId">Id of the loadContent to be duplicated.</param>
        /// <returns>Task of ApiResponse (LoadContent)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<LoadContent>> GetDuplicateLoadContentByIdAsyncWithHttpInfo (int? loadContentId)
        {
            // verify the required parameter 'loadContentId' is set
            if (loadContentId == null)
                throw new ApiException(400, "Missing required parameter 'loadContentId' when calling LoadContentApi->GetDuplicateLoadContentById");

            var localVarPath = "/beta/loadContent/duplicate/{loadContentId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (loadContentId != null) localVarPathParams.Add("loadContentId", Configuration.ApiClient.ParameterToString(loadContentId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDuplicateLoadContentById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LoadContent>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LoadContent) Configuration.ApiClient.Deserialize(localVarResponse, typeof(LoadContent)));
        }

        /// <summary>
        /// Search loadContents by filter Returns the list of loadContents that match the given filter.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>List&lt;LoadContent&gt;</returns>
        public List<LoadContent> GetLoadContentByFilter (string filter = null, int? page = null, int? limit = null, string sort = null)
        {
             ApiResponse<List<LoadContent>> localVarResponse = GetLoadContentByFilterWithHttpInfo(filter, page, limit, sort);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Search loadContents by filter Returns the list of loadContents that match the given filter.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>ApiResponse of List&lt;LoadContent&gt;</returns>
        public ApiResponse< List<LoadContent> > GetLoadContentByFilterWithHttpInfo (string filter = null, int? page = null, int? limit = null, string sort = null)
        {

            var localVarPath = "/beta/loadContent/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (filter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (page != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLoadContentByFilter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<LoadContent>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<LoadContent>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<LoadContent>)));
        }

        /// <summary>
        /// Search loadContents by filter Returns the list of loadContents that match the given filter.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>Task of List&lt;LoadContent&gt;</returns>
        public async System.Threading.Tasks.Task<List<LoadContent>> GetLoadContentByFilterAsync (string filter = null, int? page = null, int? limit = null, string sort = null)
        {
             ApiResponse<List<LoadContent>> localVarResponse = await GetLoadContentByFilterAsyncWithHttpInfo(filter, page, limit, sort);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Search loadContents by filter Returns the list of loadContents that match the given filter.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;LoadContent&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<LoadContent>>> GetLoadContentByFilterAsyncWithHttpInfo (string filter = null, int? page = null, int? limit = null, string sort = null)
        {

            var localVarPath = "/beta/loadContent/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (filter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (page != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLoadContentByFilter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<LoadContent>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<LoadContent>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<LoadContent>)));
        }

        /// <summary>
        /// Get a loadContent by id Returns the loadContent identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loadContentId">Id of the loadContent to be returned.</param>
        /// <returns>LoadContent</returns>
        public LoadContent GetLoadContentById (int? loadContentId)
        {
             ApiResponse<LoadContent> localVarResponse = GetLoadContentByIdWithHttpInfo(loadContentId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a loadContent by id Returns the loadContent identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loadContentId">Id of the loadContent to be returned.</param>
        /// <returns>ApiResponse of LoadContent</returns>
        public ApiResponse< LoadContent > GetLoadContentByIdWithHttpInfo (int? loadContentId)
        {
            // verify the required parameter 'loadContentId' is set
            if (loadContentId == null)
                throw new ApiException(400, "Missing required parameter 'loadContentId' when calling LoadContentApi->GetLoadContentById");

            var localVarPath = "/beta/loadContent/{loadContentId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (loadContentId != null) localVarPathParams.Add("loadContentId", Configuration.ApiClient.ParameterToString(loadContentId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLoadContentById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LoadContent>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LoadContent) Configuration.ApiClient.Deserialize(localVarResponse, typeof(LoadContent)));
        }

        /// <summary>
        /// Get a loadContent by id Returns the loadContent identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loadContentId">Id of the loadContent to be returned.</param>
        /// <returns>Task of LoadContent</returns>
        public async System.Threading.Tasks.Task<LoadContent> GetLoadContentByIdAsync (int? loadContentId)
        {
             ApiResponse<LoadContent> localVarResponse = await GetLoadContentByIdAsyncWithHttpInfo(loadContentId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a loadContent by id Returns the loadContent identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loadContentId">Id of the loadContent to be returned.</param>
        /// <returns>Task of ApiResponse (LoadContent)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<LoadContent>> GetLoadContentByIdAsyncWithHttpInfo (int? loadContentId)
        {
            // verify the required parameter 'loadContentId' is set
            if (loadContentId == null)
                throw new ApiException(400, "Missing required parameter 'loadContentId' when calling LoadContentApi->GetLoadContentById");

            var localVarPath = "/beta/loadContent/{loadContentId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (loadContentId != null) localVarPathParams.Add("loadContentId", Configuration.ApiClient.ParameterToString(loadContentId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLoadContentById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LoadContent>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LoadContent) Configuration.ApiClient.Deserialize(localVarResponse, typeof(LoadContent)));
        }

        /// <summary>
        /// Get the files for a loadContent. Get all existing loadContent files.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loadContentId">Id of the loadContent to get files for</param>
        /// <returns></returns>
        public void GetLoadContentFiles (int? loadContentId)
        {
             GetLoadContentFilesWithHttpInfo(loadContentId);
        }

        /// <summary>
        /// Get the files for a loadContent. Get all existing loadContent files.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loadContentId">Id of the loadContent to get files for</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GetLoadContentFilesWithHttpInfo (int? loadContentId)
        {
            // verify the required parameter 'loadContentId' is set
            if (loadContentId == null)
                throw new ApiException(400, "Missing required parameter 'loadContentId' when calling LoadContentApi->GetLoadContentFiles");

            var localVarPath = "/beta/loadContent/{loadContentId}/file";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (loadContentId != null) localVarPathParams.Add("loadContentId", Configuration.ApiClient.ParameterToString(loadContentId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLoadContentFiles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get the files for a loadContent. Get all existing loadContent files.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loadContentId">Id of the loadContent to get files for</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetLoadContentFilesAsync (int? loadContentId)
        {
             await GetLoadContentFilesAsyncWithHttpInfo(loadContentId);

        }

        /// <summary>
        /// Get the files for a loadContent. Get all existing loadContent files.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loadContentId">Id of the loadContent to get files for</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetLoadContentFilesAsyncWithHttpInfo (int? loadContentId)
        {
            // verify the required parameter 'loadContentId' is set
            if (loadContentId == null)
                throw new ApiException(400, "Missing required parameter 'loadContentId' when calling LoadContentApi->GetLoadContentFiles");

            var localVarPath = "/beta/loadContent/{loadContentId}/file";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (loadContentId != null) localVarPathParams.Add("loadContentId", Configuration.ApiClient.ParameterToString(loadContentId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLoadContentFiles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get the tags for a loadContent. Get all existing loadContent tags.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loadContentId">Id of the loadContent to get tags for</param>
        /// <returns></returns>
        public void GetLoadContentTags (int? loadContentId)
        {
             GetLoadContentTagsWithHttpInfo(loadContentId);
        }

        /// <summary>
        /// Get the tags for a loadContent. Get all existing loadContent tags.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loadContentId">Id of the loadContent to get tags for</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GetLoadContentTagsWithHttpInfo (int? loadContentId)
        {
            // verify the required parameter 'loadContentId' is set
            if (loadContentId == null)
                throw new ApiException(400, "Missing required parameter 'loadContentId' when calling LoadContentApi->GetLoadContentTags");

            var localVarPath = "/beta/loadContent/{loadContentId}/tag";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (loadContentId != null) localVarPathParams.Add("loadContentId", Configuration.ApiClient.ParameterToString(loadContentId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLoadContentTags", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get the tags for a loadContent. Get all existing loadContent tags.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loadContentId">Id of the loadContent to get tags for</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetLoadContentTagsAsync (int? loadContentId)
        {
             await GetLoadContentTagsAsyncWithHttpInfo(loadContentId);

        }

        /// <summary>
        /// Get the tags for a loadContent. Get all existing loadContent tags.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loadContentId">Id of the loadContent to get tags for</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetLoadContentTagsAsyncWithHttpInfo (int? loadContentId)
        {
            // verify the required parameter 'loadContentId' is set
            if (loadContentId == null)
                throw new ApiException(400, "Missing required parameter 'loadContentId' when calling LoadContentApi->GetLoadContentTags");

            var localVarPath = "/beta/loadContent/{loadContentId}/tag";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (loadContentId != null) localVarPathParams.Add("loadContentId", Configuration.ApiClient.ParameterToString(loadContentId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLoadContentTags", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update a loadContent custom fields Updates an existing loadContent custom fields using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">LoadContent to be updated.</param>
        /// <returns></returns>
        public void UpdateLoadContentCustomFields (LoadContent body)
        {
             UpdateLoadContentCustomFieldsWithHttpInfo(body);
        }

        /// <summary>
        /// Update a loadContent custom fields Updates an existing loadContent custom fields using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">LoadContent to be updated.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateLoadContentCustomFieldsWithHttpInfo (LoadContent body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling LoadContentApi->UpdateLoadContentCustomFields");

            var localVarPath = "/beta/loadContent/customFields";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateLoadContentCustomFields", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update a loadContent custom fields Updates an existing loadContent custom fields using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">LoadContent to be updated.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateLoadContentCustomFieldsAsync (LoadContent body)
        {
             await UpdateLoadContentCustomFieldsAsyncWithHttpInfo(body);

        }

        /// <summary>
        /// Update a loadContent custom fields Updates an existing loadContent custom fields using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">LoadContent to be updated.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateLoadContentCustomFieldsAsyncWithHttpInfo (LoadContent body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling LoadContentApi->UpdateLoadContentCustomFields");

            var localVarPath = "/beta/loadContent/customFields";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateLoadContentCustomFields", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

    }
}
