/* 
 * Infoplus API
 *
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Infoplus.Client;
using Infoplus.Model;

namespace Infoplus.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface INonBusinessDayApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create a nonBusinessDay
        /// </summary>
        /// <remarks>
        /// Inserts a new nonBusinessDay using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">NonBusinessDay to be inserted.</param>
        /// <returns>NonBusinessDay</returns>
        NonBusinessDay AddNonBusinessDay (NonBusinessDay body);

        /// <summary>
        /// Create a nonBusinessDay
        /// </summary>
        /// <remarks>
        /// Inserts a new nonBusinessDay using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">NonBusinessDay to be inserted.</param>
        /// <returns>ApiResponse of NonBusinessDay</returns>
        ApiResponse<NonBusinessDay> AddNonBusinessDayWithHttpInfo (NonBusinessDay body);
        /// <summary>
        /// Add new audit for a nonBusinessDay
        /// </summary>
        /// <remarks>
        /// Adds an audit to an existing nonBusinessDay.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nonBusinessDayId">Id of the nonBusinessDay to add an audit to</param>
        /// <param name="nonBusinessDayAudit">The audit to add</param>
        /// <returns></returns>
        void AddNonBusinessDayAudit (int? nonBusinessDayId, string nonBusinessDayAudit);

        /// <summary>
        /// Add new audit for a nonBusinessDay
        /// </summary>
        /// <remarks>
        /// Adds an audit to an existing nonBusinessDay.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nonBusinessDayId">Id of the nonBusinessDay to add an audit to</param>
        /// <param name="nonBusinessDayAudit">The audit to add</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddNonBusinessDayAuditWithHttpInfo (int? nonBusinessDayId, string nonBusinessDayAudit);
        /// <summary>
        /// Attach a file to a nonBusinessDay
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing nonBusinessDay.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nonBusinessDayId">Id of the nonBusinessDay to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns></returns>
        void AddNonBusinessDayFile (int? nonBusinessDayId, string fileName);

        /// <summary>
        /// Attach a file to a nonBusinessDay
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing nonBusinessDay.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nonBusinessDayId">Id of the nonBusinessDay to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddNonBusinessDayFileWithHttpInfo (int? nonBusinessDayId, string fileName);
        /// <summary>
        /// Attach a file to a nonBusinessDay by URL.
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing nonBusinessDay by URL.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="nonBusinessDayId">Id of the nonBusinessDay to add an file to</param>
        /// <returns></returns>
        void AddNonBusinessDayFileByURL (RecordFile body, int? nonBusinessDayId);

        /// <summary>
        /// Attach a file to a nonBusinessDay by URL.
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing nonBusinessDay by URL.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="nonBusinessDayId">Id of the nonBusinessDay to add an file to</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddNonBusinessDayFileByURLWithHttpInfo (RecordFile body, int? nonBusinessDayId);
        /// <summary>
        /// Add new tags for a nonBusinessDay.
        /// </summary>
        /// <remarks>
        /// Adds a tag to an existing nonBusinessDay.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nonBusinessDayId">Id of the nonBusinessDay to add a tag to</param>
        /// <param name="nonBusinessDayTag">The tag to add</param>
        /// <returns></returns>
        void AddNonBusinessDayTag (int? nonBusinessDayId, string nonBusinessDayTag);

        /// <summary>
        /// Add new tags for a nonBusinessDay.
        /// </summary>
        /// <remarks>
        /// Adds a tag to an existing nonBusinessDay.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nonBusinessDayId">Id of the nonBusinessDay to add a tag to</param>
        /// <param name="nonBusinessDayTag">The tag to add</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddNonBusinessDayTagWithHttpInfo (int? nonBusinessDayId, string nonBusinessDayTag);
        /// <summary>
        /// Delete a nonBusinessDay
        /// </summary>
        /// <remarks>
        /// Deletes the nonBusinessDay identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nonBusinessDayId">Id of the nonBusinessDay to be deleted.</param>
        /// <returns></returns>
        void DeleteNonBusinessDay (int? nonBusinessDayId);

        /// <summary>
        /// Delete a nonBusinessDay
        /// </summary>
        /// <remarks>
        /// Deletes the nonBusinessDay identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nonBusinessDayId">Id of the nonBusinessDay to be deleted.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteNonBusinessDayWithHttpInfo (int? nonBusinessDayId);
        /// <summary>
        /// Delete a file for a nonBusinessDay.
        /// </summary>
        /// <remarks>
        /// Deletes an existing nonBusinessDay file using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nonBusinessDayId">Id of the nonBusinessDay to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns></returns>
        void DeleteNonBusinessDayFile (int? nonBusinessDayId, int? fileId);

        /// <summary>
        /// Delete a file for a nonBusinessDay.
        /// </summary>
        /// <remarks>
        /// Deletes an existing nonBusinessDay file using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nonBusinessDayId">Id of the nonBusinessDay to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteNonBusinessDayFileWithHttpInfo (int? nonBusinessDayId, int? fileId);
        /// <summary>
        /// Delete a tag for a nonBusinessDay.
        /// </summary>
        /// <remarks>
        /// Deletes an existing nonBusinessDay tag using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nonBusinessDayId">Id of the nonBusinessDay to remove tag from</param>
        /// <param name="nonBusinessDayTag">The tag to delete</param>
        /// <returns></returns>
        void DeleteNonBusinessDayTag (int? nonBusinessDayId, string nonBusinessDayTag);

        /// <summary>
        /// Delete a tag for a nonBusinessDay.
        /// </summary>
        /// <remarks>
        /// Deletes an existing nonBusinessDay tag using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nonBusinessDayId">Id of the nonBusinessDay to remove tag from</param>
        /// <param name="nonBusinessDayTag">The tag to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteNonBusinessDayTagWithHttpInfo (int? nonBusinessDayId, string nonBusinessDayTag);
        /// <summary>
        /// Get a duplicated a nonBusinessDay by id
        /// </summary>
        /// <remarks>
        /// Returns a duplicated nonBusinessDay identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nonBusinessDayId">Id of the nonBusinessDay to be duplicated.</param>
        /// <returns>NonBusinessDay</returns>
        NonBusinessDay GetDuplicateNonBusinessDayById (int? nonBusinessDayId);

        /// <summary>
        /// Get a duplicated a nonBusinessDay by id
        /// </summary>
        /// <remarks>
        /// Returns a duplicated nonBusinessDay identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nonBusinessDayId">Id of the nonBusinessDay to be duplicated.</param>
        /// <returns>ApiResponse of NonBusinessDay</returns>
        ApiResponse<NonBusinessDay> GetDuplicateNonBusinessDayByIdWithHttpInfo (int? nonBusinessDayId);
        /// <summary>
        /// Search nonBusinessDays by filter
        /// </summary>
        /// <remarks>
        /// Returns the list of nonBusinessDays that match the given filter.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>List&lt;NonBusinessDay&gt;</returns>
        List<NonBusinessDay> GetNonBusinessDayByFilter (string filter = null, int? page = null, int? limit = null, string sort = null);

        /// <summary>
        /// Search nonBusinessDays by filter
        /// </summary>
        /// <remarks>
        /// Returns the list of nonBusinessDays that match the given filter.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>ApiResponse of List&lt;NonBusinessDay&gt;</returns>
        ApiResponse<List<NonBusinessDay>> GetNonBusinessDayByFilterWithHttpInfo (string filter = null, int? page = null, int? limit = null, string sort = null);
        /// <summary>
        /// Get a nonBusinessDay by id
        /// </summary>
        /// <remarks>
        /// Returns the nonBusinessDay identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nonBusinessDayId">Id of the nonBusinessDay to be returned.</param>
        /// <returns>NonBusinessDay</returns>
        NonBusinessDay GetNonBusinessDayById (int? nonBusinessDayId);

        /// <summary>
        /// Get a nonBusinessDay by id
        /// </summary>
        /// <remarks>
        /// Returns the nonBusinessDay identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nonBusinessDayId">Id of the nonBusinessDay to be returned.</param>
        /// <returns>ApiResponse of NonBusinessDay</returns>
        ApiResponse<NonBusinessDay> GetNonBusinessDayByIdWithHttpInfo (int? nonBusinessDayId);
        /// <summary>
        /// Get the files for a nonBusinessDay.
        /// </summary>
        /// <remarks>
        /// Get all existing nonBusinessDay files.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nonBusinessDayId">Id of the nonBusinessDay to get files for</param>
        /// <returns></returns>
        void GetNonBusinessDayFiles (int? nonBusinessDayId);

        /// <summary>
        /// Get the files for a nonBusinessDay.
        /// </summary>
        /// <remarks>
        /// Get all existing nonBusinessDay files.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nonBusinessDayId">Id of the nonBusinessDay to get files for</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetNonBusinessDayFilesWithHttpInfo (int? nonBusinessDayId);
        /// <summary>
        /// Get the tags for a nonBusinessDay.
        /// </summary>
        /// <remarks>
        /// Get all existing nonBusinessDay tags.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nonBusinessDayId">Id of the nonBusinessDay to get tags for</param>
        /// <returns></returns>
        void GetNonBusinessDayTags (int? nonBusinessDayId);

        /// <summary>
        /// Get the tags for a nonBusinessDay.
        /// </summary>
        /// <remarks>
        /// Get all existing nonBusinessDay tags.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nonBusinessDayId">Id of the nonBusinessDay to get tags for</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetNonBusinessDayTagsWithHttpInfo (int? nonBusinessDayId);
        /// <summary>
        /// Update a nonBusinessDay
        /// </summary>
        /// <remarks>
        /// Updates an existing nonBusinessDay using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">NonBusinessDay to be updated.</param>
        /// <returns></returns>
        void UpdateNonBusinessDay (NonBusinessDay body);

        /// <summary>
        /// Update a nonBusinessDay
        /// </summary>
        /// <remarks>
        /// Updates an existing nonBusinessDay using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">NonBusinessDay to be updated.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateNonBusinessDayWithHttpInfo (NonBusinessDay body);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create a nonBusinessDay
        /// </summary>
        /// <remarks>
        /// Inserts a new nonBusinessDay using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">NonBusinessDay to be inserted.</param>
        /// <returns>Task of NonBusinessDay</returns>
        System.Threading.Tasks.Task<NonBusinessDay> AddNonBusinessDayAsync (NonBusinessDay body);

        /// <summary>
        /// Create a nonBusinessDay
        /// </summary>
        /// <remarks>
        /// Inserts a new nonBusinessDay using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">NonBusinessDay to be inserted.</param>
        /// <returns>Task of ApiResponse (NonBusinessDay)</returns>
        System.Threading.Tasks.Task<ApiResponse<NonBusinessDay>> AddNonBusinessDayAsyncWithHttpInfo (NonBusinessDay body);
        /// <summary>
        /// Add new audit for a nonBusinessDay
        /// </summary>
        /// <remarks>
        /// Adds an audit to an existing nonBusinessDay.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nonBusinessDayId">Id of the nonBusinessDay to add an audit to</param>
        /// <param name="nonBusinessDayAudit">The audit to add</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddNonBusinessDayAuditAsync (int? nonBusinessDayId, string nonBusinessDayAudit);

        /// <summary>
        /// Add new audit for a nonBusinessDay
        /// </summary>
        /// <remarks>
        /// Adds an audit to an existing nonBusinessDay.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nonBusinessDayId">Id of the nonBusinessDay to add an audit to</param>
        /// <param name="nonBusinessDayAudit">The audit to add</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddNonBusinessDayAuditAsyncWithHttpInfo (int? nonBusinessDayId, string nonBusinessDayAudit);
        /// <summary>
        /// Attach a file to a nonBusinessDay
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing nonBusinessDay.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nonBusinessDayId">Id of the nonBusinessDay to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddNonBusinessDayFileAsync (int? nonBusinessDayId, string fileName);

        /// <summary>
        /// Attach a file to a nonBusinessDay
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing nonBusinessDay.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nonBusinessDayId">Id of the nonBusinessDay to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddNonBusinessDayFileAsyncWithHttpInfo (int? nonBusinessDayId, string fileName);
        /// <summary>
        /// Attach a file to a nonBusinessDay by URL.
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing nonBusinessDay by URL.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="nonBusinessDayId">Id of the nonBusinessDay to add an file to</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddNonBusinessDayFileByURLAsync (RecordFile body, int? nonBusinessDayId);

        /// <summary>
        /// Attach a file to a nonBusinessDay by URL.
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing nonBusinessDay by URL.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="nonBusinessDayId">Id of the nonBusinessDay to add an file to</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddNonBusinessDayFileByURLAsyncWithHttpInfo (RecordFile body, int? nonBusinessDayId);
        /// <summary>
        /// Add new tags for a nonBusinessDay.
        /// </summary>
        /// <remarks>
        /// Adds a tag to an existing nonBusinessDay.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nonBusinessDayId">Id of the nonBusinessDay to add a tag to</param>
        /// <param name="nonBusinessDayTag">The tag to add</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddNonBusinessDayTagAsync (int? nonBusinessDayId, string nonBusinessDayTag);

        /// <summary>
        /// Add new tags for a nonBusinessDay.
        /// </summary>
        /// <remarks>
        /// Adds a tag to an existing nonBusinessDay.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nonBusinessDayId">Id of the nonBusinessDay to add a tag to</param>
        /// <param name="nonBusinessDayTag">The tag to add</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddNonBusinessDayTagAsyncWithHttpInfo (int? nonBusinessDayId, string nonBusinessDayTag);
        /// <summary>
        /// Delete a nonBusinessDay
        /// </summary>
        /// <remarks>
        /// Deletes the nonBusinessDay identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nonBusinessDayId">Id of the nonBusinessDay to be deleted.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteNonBusinessDayAsync (int? nonBusinessDayId);

        /// <summary>
        /// Delete a nonBusinessDay
        /// </summary>
        /// <remarks>
        /// Deletes the nonBusinessDay identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nonBusinessDayId">Id of the nonBusinessDay to be deleted.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteNonBusinessDayAsyncWithHttpInfo (int? nonBusinessDayId);
        /// <summary>
        /// Delete a file for a nonBusinessDay.
        /// </summary>
        /// <remarks>
        /// Deletes an existing nonBusinessDay file using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nonBusinessDayId">Id of the nonBusinessDay to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteNonBusinessDayFileAsync (int? nonBusinessDayId, int? fileId);

        /// <summary>
        /// Delete a file for a nonBusinessDay.
        /// </summary>
        /// <remarks>
        /// Deletes an existing nonBusinessDay file using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nonBusinessDayId">Id of the nonBusinessDay to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteNonBusinessDayFileAsyncWithHttpInfo (int? nonBusinessDayId, int? fileId);
        /// <summary>
        /// Delete a tag for a nonBusinessDay.
        /// </summary>
        /// <remarks>
        /// Deletes an existing nonBusinessDay tag using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nonBusinessDayId">Id of the nonBusinessDay to remove tag from</param>
        /// <param name="nonBusinessDayTag">The tag to delete</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteNonBusinessDayTagAsync (int? nonBusinessDayId, string nonBusinessDayTag);

        /// <summary>
        /// Delete a tag for a nonBusinessDay.
        /// </summary>
        /// <remarks>
        /// Deletes an existing nonBusinessDay tag using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nonBusinessDayId">Id of the nonBusinessDay to remove tag from</param>
        /// <param name="nonBusinessDayTag">The tag to delete</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteNonBusinessDayTagAsyncWithHttpInfo (int? nonBusinessDayId, string nonBusinessDayTag);
        /// <summary>
        /// Get a duplicated a nonBusinessDay by id
        /// </summary>
        /// <remarks>
        /// Returns a duplicated nonBusinessDay identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nonBusinessDayId">Id of the nonBusinessDay to be duplicated.</param>
        /// <returns>Task of NonBusinessDay</returns>
        System.Threading.Tasks.Task<NonBusinessDay> GetDuplicateNonBusinessDayByIdAsync (int? nonBusinessDayId);

        /// <summary>
        /// Get a duplicated a nonBusinessDay by id
        /// </summary>
        /// <remarks>
        /// Returns a duplicated nonBusinessDay identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nonBusinessDayId">Id of the nonBusinessDay to be duplicated.</param>
        /// <returns>Task of ApiResponse (NonBusinessDay)</returns>
        System.Threading.Tasks.Task<ApiResponse<NonBusinessDay>> GetDuplicateNonBusinessDayByIdAsyncWithHttpInfo (int? nonBusinessDayId);
        /// <summary>
        /// Search nonBusinessDays by filter
        /// </summary>
        /// <remarks>
        /// Returns the list of nonBusinessDays that match the given filter.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>Task of List&lt;NonBusinessDay&gt;</returns>
        System.Threading.Tasks.Task<List<NonBusinessDay>> GetNonBusinessDayByFilterAsync (string filter = null, int? page = null, int? limit = null, string sort = null);

        /// <summary>
        /// Search nonBusinessDays by filter
        /// </summary>
        /// <remarks>
        /// Returns the list of nonBusinessDays that match the given filter.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;NonBusinessDay&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<NonBusinessDay>>> GetNonBusinessDayByFilterAsyncWithHttpInfo (string filter = null, int? page = null, int? limit = null, string sort = null);
        /// <summary>
        /// Get a nonBusinessDay by id
        /// </summary>
        /// <remarks>
        /// Returns the nonBusinessDay identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nonBusinessDayId">Id of the nonBusinessDay to be returned.</param>
        /// <returns>Task of NonBusinessDay</returns>
        System.Threading.Tasks.Task<NonBusinessDay> GetNonBusinessDayByIdAsync (int? nonBusinessDayId);

        /// <summary>
        /// Get a nonBusinessDay by id
        /// </summary>
        /// <remarks>
        /// Returns the nonBusinessDay identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nonBusinessDayId">Id of the nonBusinessDay to be returned.</param>
        /// <returns>Task of ApiResponse (NonBusinessDay)</returns>
        System.Threading.Tasks.Task<ApiResponse<NonBusinessDay>> GetNonBusinessDayByIdAsyncWithHttpInfo (int? nonBusinessDayId);
        /// <summary>
        /// Get the files for a nonBusinessDay.
        /// </summary>
        /// <remarks>
        /// Get all existing nonBusinessDay files.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nonBusinessDayId">Id of the nonBusinessDay to get files for</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetNonBusinessDayFilesAsync (int? nonBusinessDayId);

        /// <summary>
        /// Get the files for a nonBusinessDay.
        /// </summary>
        /// <remarks>
        /// Get all existing nonBusinessDay files.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nonBusinessDayId">Id of the nonBusinessDay to get files for</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetNonBusinessDayFilesAsyncWithHttpInfo (int? nonBusinessDayId);
        /// <summary>
        /// Get the tags for a nonBusinessDay.
        /// </summary>
        /// <remarks>
        /// Get all existing nonBusinessDay tags.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nonBusinessDayId">Id of the nonBusinessDay to get tags for</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetNonBusinessDayTagsAsync (int? nonBusinessDayId);

        /// <summary>
        /// Get the tags for a nonBusinessDay.
        /// </summary>
        /// <remarks>
        /// Get all existing nonBusinessDay tags.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nonBusinessDayId">Id of the nonBusinessDay to get tags for</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetNonBusinessDayTagsAsyncWithHttpInfo (int? nonBusinessDayId);
        /// <summary>
        /// Update a nonBusinessDay
        /// </summary>
        /// <remarks>
        /// Updates an existing nonBusinessDay using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">NonBusinessDay to be updated.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateNonBusinessDayAsync (NonBusinessDay body);

        /// <summary>
        /// Update a nonBusinessDay
        /// </summary>
        /// <remarks>
        /// Updates an existing nonBusinessDay using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">NonBusinessDay to be updated.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateNonBusinessDayAsyncWithHttpInfo (NonBusinessDay body);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class NonBusinessDayApi : INonBusinessDayApi
    {
        private Infoplus.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="NonBusinessDayApi"/> class.
        /// </summary>
        /// <returns></returns>
        public NonBusinessDayApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = Infoplus.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="NonBusinessDayApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public NonBusinessDayApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Infoplus.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Infoplus.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create a nonBusinessDay Inserts a new nonBusinessDay using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">NonBusinessDay to be inserted.</param>
        /// <returns>NonBusinessDay</returns>
        public NonBusinessDay AddNonBusinessDay (NonBusinessDay body)
        {
             ApiResponse<NonBusinessDay> localVarResponse = AddNonBusinessDayWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a nonBusinessDay Inserts a new nonBusinessDay using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">NonBusinessDay to be inserted.</param>
        /// <returns>ApiResponse of NonBusinessDay</returns>
        public ApiResponse< NonBusinessDay > AddNonBusinessDayWithHttpInfo (NonBusinessDay body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling NonBusinessDayApi->AddNonBusinessDay");

            var localVarPath = "/beta/nonBusinessDay";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddNonBusinessDay", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<NonBusinessDay>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (NonBusinessDay) Configuration.ApiClient.Deserialize(localVarResponse, typeof(NonBusinessDay)));
        }

        /// <summary>
        /// Create a nonBusinessDay Inserts a new nonBusinessDay using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">NonBusinessDay to be inserted.</param>
        /// <returns>Task of NonBusinessDay</returns>
        public async System.Threading.Tasks.Task<NonBusinessDay> AddNonBusinessDayAsync (NonBusinessDay body)
        {
             ApiResponse<NonBusinessDay> localVarResponse = await AddNonBusinessDayAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a nonBusinessDay Inserts a new nonBusinessDay using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">NonBusinessDay to be inserted.</param>
        /// <returns>Task of ApiResponse (NonBusinessDay)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<NonBusinessDay>> AddNonBusinessDayAsyncWithHttpInfo (NonBusinessDay body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling NonBusinessDayApi->AddNonBusinessDay");

            var localVarPath = "/beta/nonBusinessDay";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddNonBusinessDay", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<NonBusinessDay>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (NonBusinessDay) Configuration.ApiClient.Deserialize(localVarResponse, typeof(NonBusinessDay)));
        }

        /// <summary>
        /// Add new audit for a nonBusinessDay Adds an audit to an existing nonBusinessDay.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nonBusinessDayId">Id of the nonBusinessDay to add an audit to</param>
        /// <param name="nonBusinessDayAudit">The audit to add</param>
        /// <returns></returns>
        public void AddNonBusinessDayAudit (int? nonBusinessDayId, string nonBusinessDayAudit)
        {
             AddNonBusinessDayAuditWithHttpInfo(nonBusinessDayId, nonBusinessDayAudit);
        }

        /// <summary>
        /// Add new audit for a nonBusinessDay Adds an audit to an existing nonBusinessDay.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nonBusinessDayId">Id of the nonBusinessDay to add an audit to</param>
        /// <param name="nonBusinessDayAudit">The audit to add</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AddNonBusinessDayAuditWithHttpInfo (int? nonBusinessDayId, string nonBusinessDayAudit)
        {
            // verify the required parameter 'nonBusinessDayId' is set
            if (nonBusinessDayId == null)
                throw new ApiException(400, "Missing required parameter 'nonBusinessDayId' when calling NonBusinessDayApi->AddNonBusinessDayAudit");
            // verify the required parameter 'nonBusinessDayAudit' is set
            if (nonBusinessDayAudit == null)
                throw new ApiException(400, "Missing required parameter 'nonBusinessDayAudit' when calling NonBusinessDayApi->AddNonBusinessDayAudit");

            var localVarPath = "/beta/nonBusinessDay/{nonBusinessDayId}/audit/{nonBusinessDayAudit}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (nonBusinessDayId != null) localVarPathParams.Add("nonBusinessDayId", Configuration.ApiClient.ParameterToString(nonBusinessDayId)); // path parameter
            if (nonBusinessDayAudit != null) localVarPathParams.Add("nonBusinessDayAudit", Configuration.ApiClient.ParameterToString(nonBusinessDayAudit)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddNonBusinessDayAudit", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Add new audit for a nonBusinessDay Adds an audit to an existing nonBusinessDay.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nonBusinessDayId">Id of the nonBusinessDay to add an audit to</param>
        /// <param name="nonBusinessDayAudit">The audit to add</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddNonBusinessDayAuditAsync (int? nonBusinessDayId, string nonBusinessDayAudit)
        {
             await AddNonBusinessDayAuditAsyncWithHttpInfo(nonBusinessDayId, nonBusinessDayAudit);

        }

        /// <summary>
        /// Add new audit for a nonBusinessDay Adds an audit to an existing nonBusinessDay.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nonBusinessDayId">Id of the nonBusinessDay to add an audit to</param>
        /// <param name="nonBusinessDayAudit">The audit to add</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddNonBusinessDayAuditAsyncWithHttpInfo (int? nonBusinessDayId, string nonBusinessDayAudit)
        {
            // verify the required parameter 'nonBusinessDayId' is set
            if (nonBusinessDayId == null)
                throw new ApiException(400, "Missing required parameter 'nonBusinessDayId' when calling NonBusinessDayApi->AddNonBusinessDayAudit");
            // verify the required parameter 'nonBusinessDayAudit' is set
            if (nonBusinessDayAudit == null)
                throw new ApiException(400, "Missing required parameter 'nonBusinessDayAudit' when calling NonBusinessDayApi->AddNonBusinessDayAudit");

            var localVarPath = "/beta/nonBusinessDay/{nonBusinessDayId}/audit/{nonBusinessDayAudit}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (nonBusinessDayId != null) localVarPathParams.Add("nonBusinessDayId", Configuration.ApiClient.ParameterToString(nonBusinessDayId)); // path parameter
            if (nonBusinessDayAudit != null) localVarPathParams.Add("nonBusinessDayAudit", Configuration.ApiClient.ParameterToString(nonBusinessDayAudit)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddNonBusinessDayAudit", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Attach a file to a nonBusinessDay Adds a file to an existing nonBusinessDay.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nonBusinessDayId">Id of the nonBusinessDay to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns></returns>
        public void AddNonBusinessDayFile (int? nonBusinessDayId, string fileName)
        {
             AddNonBusinessDayFileWithHttpInfo(nonBusinessDayId, fileName);
        }

        /// <summary>
        /// Attach a file to a nonBusinessDay Adds a file to an existing nonBusinessDay.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nonBusinessDayId">Id of the nonBusinessDay to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AddNonBusinessDayFileWithHttpInfo (int? nonBusinessDayId, string fileName)
        {
            // verify the required parameter 'nonBusinessDayId' is set
            if (nonBusinessDayId == null)
                throw new ApiException(400, "Missing required parameter 'nonBusinessDayId' when calling NonBusinessDayApi->AddNonBusinessDayFile");
            // verify the required parameter 'fileName' is set
            if (fileName == null)
                throw new ApiException(400, "Missing required parameter 'fileName' when calling NonBusinessDayApi->AddNonBusinessDayFile");

            var localVarPath = "/beta/nonBusinessDay/{nonBusinessDayId}/file/{fileName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (nonBusinessDayId != null) localVarPathParams.Add("nonBusinessDayId", Configuration.ApiClient.ParameterToString(nonBusinessDayId)); // path parameter
            if (fileName != null) localVarPathParams.Add("fileName", Configuration.ApiClient.ParameterToString(fileName)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddNonBusinessDayFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Attach a file to a nonBusinessDay Adds a file to an existing nonBusinessDay.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nonBusinessDayId">Id of the nonBusinessDay to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddNonBusinessDayFileAsync (int? nonBusinessDayId, string fileName)
        {
             await AddNonBusinessDayFileAsyncWithHttpInfo(nonBusinessDayId, fileName);

        }

        /// <summary>
        /// Attach a file to a nonBusinessDay Adds a file to an existing nonBusinessDay.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nonBusinessDayId">Id of the nonBusinessDay to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddNonBusinessDayFileAsyncWithHttpInfo (int? nonBusinessDayId, string fileName)
        {
            // verify the required parameter 'nonBusinessDayId' is set
            if (nonBusinessDayId == null)
                throw new ApiException(400, "Missing required parameter 'nonBusinessDayId' when calling NonBusinessDayApi->AddNonBusinessDayFile");
            // verify the required parameter 'fileName' is set
            if (fileName == null)
                throw new ApiException(400, "Missing required parameter 'fileName' when calling NonBusinessDayApi->AddNonBusinessDayFile");

            var localVarPath = "/beta/nonBusinessDay/{nonBusinessDayId}/file/{fileName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (nonBusinessDayId != null) localVarPathParams.Add("nonBusinessDayId", Configuration.ApiClient.ParameterToString(nonBusinessDayId)); // path parameter
            if (fileName != null) localVarPathParams.Add("fileName", Configuration.ApiClient.ParameterToString(fileName)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddNonBusinessDayFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Attach a file to a nonBusinessDay by URL. Adds a file to an existing nonBusinessDay by URL.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="nonBusinessDayId">Id of the nonBusinessDay to add an file to</param>
        /// <returns></returns>
        public void AddNonBusinessDayFileByURL (RecordFile body, int? nonBusinessDayId)
        {
             AddNonBusinessDayFileByURLWithHttpInfo(body, nonBusinessDayId);
        }

        /// <summary>
        /// Attach a file to a nonBusinessDay by URL. Adds a file to an existing nonBusinessDay by URL.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="nonBusinessDayId">Id of the nonBusinessDay to add an file to</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AddNonBusinessDayFileByURLWithHttpInfo (RecordFile body, int? nonBusinessDayId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling NonBusinessDayApi->AddNonBusinessDayFileByURL");
            // verify the required parameter 'nonBusinessDayId' is set
            if (nonBusinessDayId == null)
                throw new ApiException(400, "Missing required parameter 'nonBusinessDayId' when calling NonBusinessDayApi->AddNonBusinessDayFileByURL");

            var localVarPath = "/beta/nonBusinessDay/{nonBusinessDayId}/file";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (nonBusinessDayId != null) localVarPathParams.Add("nonBusinessDayId", Configuration.ApiClient.ParameterToString(nonBusinessDayId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddNonBusinessDayFileByURL", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Attach a file to a nonBusinessDay by URL. Adds a file to an existing nonBusinessDay by URL.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="nonBusinessDayId">Id of the nonBusinessDay to add an file to</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddNonBusinessDayFileByURLAsync (RecordFile body, int? nonBusinessDayId)
        {
             await AddNonBusinessDayFileByURLAsyncWithHttpInfo(body, nonBusinessDayId);

        }

        /// <summary>
        /// Attach a file to a nonBusinessDay by URL. Adds a file to an existing nonBusinessDay by URL.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="nonBusinessDayId">Id of the nonBusinessDay to add an file to</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddNonBusinessDayFileByURLAsyncWithHttpInfo (RecordFile body, int? nonBusinessDayId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling NonBusinessDayApi->AddNonBusinessDayFileByURL");
            // verify the required parameter 'nonBusinessDayId' is set
            if (nonBusinessDayId == null)
                throw new ApiException(400, "Missing required parameter 'nonBusinessDayId' when calling NonBusinessDayApi->AddNonBusinessDayFileByURL");

            var localVarPath = "/beta/nonBusinessDay/{nonBusinessDayId}/file";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (nonBusinessDayId != null) localVarPathParams.Add("nonBusinessDayId", Configuration.ApiClient.ParameterToString(nonBusinessDayId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddNonBusinessDayFileByURL", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Add new tags for a nonBusinessDay. Adds a tag to an existing nonBusinessDay.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nonBusinessDayId">Id of the nonBusinessDay to add a tag to</param>
        /// <param name="nonBusinessDayTag">The tag to add</param>
        /// <returns></returns>
        public void AddNonBusinessDayTag (int? nonBusinessDayId, string nonBusinessDayTag)
        {
             AddNonBusinessDayTagWithHttpInfo(nonBusinessDayId, nonBusinessDayTag);
        }

        /// <summary>
        /// Add new tags for a nonBusinessDay. Adds a tag to an existing nonBusinessDay.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nonBusinessDayId">Id of the nonBusinessDay to add a tag to</param>
        /// <param name="nonBusinessDayTag">The tag to add</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AddNonBusinessDayTagWithHttpInfo (int? nonBusinessDayId, string nonBusinessDayTag)
        {
            // verify the required parameter 'nonBusinessDayId' is set
            if (nonBusinessDayId == null)
                throw new ApiException(400, "Missing required parameter 'nonBusinessDayId' when calling NonBusinessDayApi->AddNonBusinessDayTag");
            // verify the required parameter 'nonBusinessDayTag' is set
            if (nonBusinessDayTag == null)
                throw new ApiException(400, "Missing required parameter 'nonBusinessDayTag' when calling NonBusinessDayApi->AddNonBusinessDayTag");

            var localVarPath = "/beta/nonBusinessDay/{nonBusinessDayId}/tag/{nonBusinessDayTag}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (nonBusinessDayId != null) localVarPathParams.Add("nonBusinessDayId", Configuration.ApiClient.ParameterToString(nonBusinessDayId)); // path parameter
            if (nonBusinessDayTag != null) localVarPathParams.Add("nonBusinessDayTag", Configuration.ApiClient.ParameterToString(nonBusinessDayTag)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddNonBusinessDayTag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Add new tags for a nonBusinessDay. Adds a tag to an existing nonBusinessDay.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nonBusinessDayId">Id of the nonBusinessDay to add a tag to</param>
        /// <param name="nonBusinessDayTag">The tag to add</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddNonBusinessDayTagAsync (int? nonBusinessDayId, string nonBusinessDayTag)
        {
             await AddNonBusinessDayTagAsyncWithHttpInfo(nonBusinessDayId, nonBusinessDayTag);

        }

        /// <summary>
        /// Add new tags for a nonBusinessDay. Adds a tag to an existing nonBusinessDay.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nonBusinessDayId">Id of the nonBusinessDay to add a tag to</param>
        /// <param name="nonBusinessDayTag">The tag to add</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddNonBusinessDayTagAsyncWithHttpInfo (int? nonBusinessDayId, string nonBusinessDayTag)
        {
            // verify the required parameter 'nonBusinessDayId' is set
            if (nonBusinessDayId == null)
                throw new ApiException(400, "Missing required parameter 'nonBusinessDayId' when calling NonBusinessDayApi->AddNonBusinessDayTag");
            // verify the required parameter 'nonBusinessDayTag' is set
            if (nonBusinessDayTag == null)
                throw new ApiException(400, "Missing required parameter 'nonBusinessDayTag' when calling NonBusinessDayApi->AddNonBusinessDayTag");

            var localVarPath = "/beta/nonBusinessDay/{nonBusinessDayId}/tag/{nonBusinessDayTag}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (nonBusinessDayId != null) localVarPathParams.Add("nonBusinessDayId", Configuration.ApiClient.ParameterToString(nonBusinessDayId)); // path parameter
            if (nonBusinessDayTag != null) localVarPathParams.Add("nonBusinessDayTag", Configuration.ApiClient.ParameterToString(nonBusinessDayTag)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddNonBusinessDayTag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a nonBusinessDay Deletes the nonBusinessDay identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nonBusinessDayId">Id of the nonBusinessDay to be deleted.</param>
        /// <returns></returns>
        public void DeleteNonBusinessDay (int? nonBusinessDayId)
        {
             DeleteNonBusinessDayWithHttpInfo(nonBusinessDayId);
        }

        /// <summary>
        /// Delete a nonBusinessDay Deletes the nonBusinessDay identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nonBusinessDayId">Id of the nonBusinessDay to be deleted.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteNonBusinessDayWithHttpInfo (int? nonBusinessDayId)
        {
            // verify the required parameter 'nonBusinessDayId' is set
            if (nonBusinessDayId == null)
                throw new ApiException(400, "Missing required parameter 'nonBusinessDayId' when calling NonBusinessDayApi->DeleteNonBusinessDay");

            var localVarPath = "/beta/nonBusinessDay/{nonBusinessDayId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (nonBusinessDayId != null) localVarPathParams.Add("nonBusinessDayId", Configuration.ApiClient.ParameterToString(nonBusinessDayId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteNonBusinessDay", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a nonBusinessDay Deletes the nonBusinessDay identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nonBusinessDayId">Id of the nonBusinessDay to be deleted.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteNonBusinessDayAsync (int? nonBusinessDayId)
        {
             await DeleteNonBusinessDayAsyncWithHttpInfo(nonBusinessDayId);

        }

        /// <summary>
        /// Delete a nonBusinessDay Deletes the nonBusinessDay identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nonBusinessDayId">Id of the nonBusinessDay to be deleted.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteNonBusinessDayAsyncWithHttpInfo (int? nonBusinessDayId)
        {
            // verify the required parameter 'nonBusinessDayId' is set
            if (nonBusinessDayId == null)
                throw new ApiException(400, "Missing required parameter 'nonBusinessDayId' when calling NonBusinessDayApi->DeleteNonBusinessDay");

            var localVarPath = "/beta/nonBusinessDay/{nonBusinessDayId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (nonBusinessDayId != null) localVarPathParams.Add("nonBusinessDayId", Configuration.ApiClient.ParameterToString(nonBusinessDayId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteNonBusinessDay", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a file for a nonBusinessDay. Deletes an existing nonBusinessDay file using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nonBusinessDayId">Id of the nonBusinessDay to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns></returns>
        public void DeleteNonBusinessDayFile (int? nonBusinessDayId, int? fileId)
        {
             DeleteNonBusinessDayFileWithHttpInfo(nonBusinessDayId, fileId);
        }

        /// <summary>
        /// Delete a file for a nonBusinessDay. Deletes an existing nonBusinessDay file using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nonBusinessDayId">Id of the nonBusinessDay to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteNonBusinessDayFileWithHttpInfo (int? nonBusinessDayId, int? fileId)
        {
            // verify the required parameter 'nonBusinessDayId' is set
            if (nonBusinessDayId == null)
                throw new ApiException(400, "Missing required parameter 'nonBusinessDayId' when calling NonBusinessDayApi->DeleteNonBusinessDayFile");
            // verify the required parameter 'fileId' is set
            if (fileId == null)
                throw new ApiException(400, "Missing required parameter 'fileId' when calling NonBusinessDayApi->DeleteNonBusinessDayFile");

            var localVarPath = "/beta/nonBusinessDay/{nonBusinessDayId}/file/{fileId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (nonBusinessDayId != null) localVarPathParams.Add("nonBusinessDayId", Configuration.ApiClient.ParameterToString(nonBusinessDayId)); // path parameter
            if (fileId != null) localVarPathParams.Add("fileId", Configuration.ApiClient.ParameterToString(fileId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteNonBusinessDayFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a file for a nonBusinessDay. Deletes an existing nonBusinessDay file using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nonBusinessDayId">Id of the nonBusinessDay to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteNonBusinessDayFileAsync (int? nonBusinessDayId, int? fileId)
        {
             await DeleteNonBusinessDayFileAsyncWithHttpInfo(nonBusinessDayId, fileId);

        }

        /// <summary>
        /// Delete a file for a nonBusinessDay. Deletes an existing nonBusinessDay file using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nonBusinessDayId">Id of the nonBusinessDay to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteNonBusinessDayFileAsyncWithHttpInfo (int? nonBusinessDayId, int? fileId)
        {
            // verify the required parameter 'nonBusinessDayId' is set
            if (nonBusinessDayId == null)
                throw new ApiException(400, "Missing required parameter 'nonBusinessDayId' when calling NonBusinessDayApi->DeleteNonBusinessDayFile");
            // verify the required parameter 'fileId' is set
            if (fileId == null)
                throw new ApiException(400, "Missing required parameter 'fileId' when calling NonBusinessDayApi->DeleteNonBusinessDayFile");

            var localVarPath = "/beta/nonBusinessDay/{nonBusinessDayId}/file/{fileId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (nonBusinessDayId != null) localVarPathParams.Add("nonBusinessDayId", Configuration.ApiClient.ParameterToString(nonBusinessDayId)); // path parameter
            if (fileId != null) localVarPathParams.Add("fileId", Configuration.ApiClient.ParameterToString(fileId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteNonBusinessDayFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a tag for a nonBusinessDay. Deletes an existing nonBusinessDay tag using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nonBusinessDayId">Id of the nonBusinessDay to remove tag from</param>
        /// <param name="nonBusinessDayTag">The tag to delete</param>
        /// <returns></returns>
        public void DeleteNonBusinessDayTag (int? nonBusinessDayId, string nonBusinessDayTag)
        {
             DeleteNonBusinessDayTagWithHttpInfo(nonBusinessDayId, nonBusinessDayTag);
        }

        /// <summary>
        /// Delete a tag for a nonBusinessDay. Deletes an existing nonBusinessDay tag using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nonBusinessDayId">Id of the nonBusinessDay to remove tag from</param>
        /// <param name="nonBusinessDayTag">The tag to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteNonBusinessDayTagWithHttpInfo (int? nonBusinessDayId, string nonBusinessDayTag)
        {
            // verify the required parameter 'nonBusinessDayId' is set
            if (nonBusinessDayId == null)
                throw new ApiException(400, "Missing required parameter 'nonBusinessDayId' when calling NonBusinessDayApi->DeleteNonBusinessDayTag");
            // verify the required parameter 'nonBusinessDayTag' is set
            if (nonBusinessDayTag == null)
                throw new ApiException(400, "Missing required parameter 'nonBusinessDayTag' when calling NonBusinessDayApi->DeleteNonBusinessDayTag");

            var localVarPath = "/beta/nonBusinessDay/{nonBusinessDayId}/tag/{nonBusinessDayTag}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (nonBusinessDayId != null) localVarPathParams.Add("nonBusinessDayId", Configuration.ApiClient.ParameterToString(nonBusinessDayId)); // path parameter
            if (nonBusinessDayTag != null) localVarPathParams.Add("nonBusinessDayTag", Configuration.ApiClient.ParameterToString(nonBusinessDayTag)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteNonBusinessDayTag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a tag for a nonBusinessDay. Deletes an existing nonBusinessDay tag using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nonBusinessDayId">Id of the nonBusinessDay to remove tag from</param>
        /// <param name="nonBusinessDayTag">The tag to delete</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteNonBusinessDayTagAsync (int? nonBusinessDayId, string nonBusinessDayTag)
        {
             await DeleteNonBusinessDayTagAsyncWithHttpInfo(nonBusinessDayId, nonBusinessDayTag);

        }

        /// <summary>
        /// Delete a tag for a nonBusinessDay. Deletes an existing nonBusinessDay tag using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nonBusinessDayId">Id of the nonBusinessDay to remove tag from</param>
        /// <param name="nonBusinessDayTag">The tag to delete</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteNonBusinessDayTagAsyncWithHttpInfo (int? nonBusinessDayId, string nonBusinessDayTag)
        {
            // verify the required parameter 'nonBusinessDayId' is set
            if (nonBusinessDayId == null)
                throw new ApiException(400, "Missing required parameter 'nonBusinessDayId' when calling NonBusinessDayApi->DeleteNonBusinessDayTag");
            // verify the required parameter 'nonBusinessDayTag' is set
            if (nonBusinessDayTag == null)
                throw new ApiException(400, "Missing required parameter 'nonBusinessDayTag' when calling NonBusinessDayApi->DeleteNonBusinessDayTag");

            var localVarPath = "/beta/nonBusinessDay/{nonBusinessDayId}/tag/{nonBusinessDayTag}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (nonBusinessDayId != null) localVarPathParams.Add("nonBusinessDayId", Configuration.ApiClient.ParameterToString(nonBusinessDayId)); // path parameter
            if (nonBusinessDayTag != null) localVarPathParams.Add("nonBusinessDayTag", Configuration.ApiClient.ParameterToString(nonBusinessDayTag)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteNonBusinessDayTag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get a duplicated a nonBusinessDay by id Returns a duplicated nonBusinessDay identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nonBusinessDayId">Id of the nonBusinessDay to be duplicated.</param>
        /// <returns>NonBusinessDay</returns>
        public NonBusinessDay GetDuplicateNonBusinessDayById (int? nonBusinessDayId)
        {
             ApiResponse<NonBusinessDay> localVarResponse = GetDuplicateNonBusinessDayByIdWithHttpInfo(nonBusinessDayId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a duplicated a nonBusinessDay by id Returns a duplicated nonBusinessDay identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nonBusinessDayId">Id of the nonBusinessDay to be duplicated.</param>
        /// <returns>ApiResponse of NonBusinessDay</returns>
        public ApiResponse< NonBusinessDay > GetDuplicateNonBusinessDayByIdWithHttpInfo (int? nonBusinessDayId)
        {
            // verify the required parameter 'nonBusinessDayId' is set
            if (nonBusinessDayId == null)
                throw new ApiException(400, "Missing required parameter 'nonBusinessDayId' when calling NonBusinessDayApi->GetDuplicateNonBusinessDayById");

            var localVarPath = "/beta/nonBusinessDay/duplicate/{nonBusinessDayId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (nonBusinessDayId != null) localVarPathParams.Add("nonBusinessDayId", Configuration.ApiClient.ParameterToString(nonBusinessDayId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDuplicateNonBusinessDayById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<NonBusinessDay>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (NonBusinessDay) Configuration.ApiClient.Deserialize(localVarResponse, typeof(NonBusinessDay)));
        }

        /// <summary>
        /// Get a duplicated a nonBusinessDay by id Returns a duplicated nonBusinessDay identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nonBusinessDayId">Id of the nonBusinessDay to be duplicated.</param>
        /// <returns>Task of NonBusinessDay</returns>
        public async System.Threading.Tasks.Task<NonBusinessDay> GetDuplicateNonBusinessDayByIdAsync (int? nonBusinessDayId)
        {
             ApiResponse<NonBusinessDay> localVarResponse = await GetDuplicateNonBusinessDayByIdAsyncWithHttpInfo(nonBusinessDayId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a duplicated a nonBusinessDay by id Returns a duplicated nonBusinessDay identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nonBusinessDayId">Id of the nonBusinessDay to be duplicated.</param>
        /// <returns>Task of ApiResponse (NonBusinessDay)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<NonBusinessDay>> GetDuplicateNonBusinessDayByIdAsyncWithHttpInfo (int? nonBusinessDayId)
        {
            // verify the required parameter 'nonBusinessDayId' is set
            if (nonBusinessDayId == null)
                throw new ApiException(400, "Missing required parameter 'nonBusinessDayId' when calling NonBusinessDayApi->GetDuplicateNonBusinessDayById");

            var localVarPath = "/beta/nonBusinessDay/duplicate/{nonBusinessDayId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (nonBusinessDayId != null) localVarPathParams.Add("nonBusinessDayId", Configuration.ApiClient.ParameterToString(nonBusinessDayId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDuplicateNonBusinessDayById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<NonBusinessDay>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (NonBusinessDay) Configuration.ApiClient.Deserialize(localVarResponse, typeof(NonBusinessDay)));
        }

        /// <summary>
        /// Search nonBusinessDays by filter Returns the list of nonBusinessDays that match the given filter.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>List&lt;NonBusinessDay&gt;</returns>
        public List<NonBusinessDay> GetNonBusinessDayByFilter (string filter = null, int? page = null, int? limit = null, string sort = null)
        {
             ApiResponse<List<NonBusinessDay>> localVarResponse = GetNonBusinessDayByFilterWithHttpInfo(filter, page, limit, sort);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Search nonBusinessDays by filter Returns the list of nonBusinessDays that match the given filter.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>ApiResponse of List&lt;NonBusinessDay&gt;</returns>
        public ApiResponse< List<NonBusinessDay> > GetNonBusinessDayByFilterWithHttpInfo (string filter = null, int? page = null, int? limit = null, string sort = null)
        {

            var localVarPath = "/beta/nonBusinessDay/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (filter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (page != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetNonBusinessDayByFilter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<NonBusinessDay>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<NonBusinessDay>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<NonBusinessDay>)));
        }

        /// <summary>
        /// Search nonBusinessDays by filter Returns the list of nonBusinessDays that match the given filter.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>Task of List&lt;NonBusinessDay&gt;</returns>
        public async System.Threading.Tasks.Task<List<NonBusinessDay>> GetNonBusinessDayByFilterAsync (string filter = null, int? page = null, int? limit = null, string sort = null)
        {
             ApiResponse<List<NonBusinessDay>> localVarResponse = await GetNonBusinessDayByFilterAsyncWithHttpInfo(filter, page, limit, sort);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Search nonBusinessDays by filter Returns the list of nonBusinessDays that match the given filter.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;NonBusinessDay&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<NonBusinessDay>>> GetNonBusinessDayByFilterAsyncWithHttpInfo (string filter = null, int? page = null, int? limit = null, string sort = null)
        {

            var localVarPath = "/beta/nonBusinessDay/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (filter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (page != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetNonBusinessDayByFilter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<NonBusinessDay>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<NonBusinessDay>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<NonBusinessDay>)));
        }

        /// <summary>
        /// Get a nonBusinessDay by id Returns the nonBusinessDay identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nonBusinessDayId">Id of the nonBusinessDay to be returned.</param>
        /// <returns>NonBusinessDay</returns>
        public NonBusinessDay GetNonBusinessDayById (int? nonBusinessDayId)
        {
             ApiResponse<NonBusinessDay> localVarResponse = GetNonBusinessDayByIdWithHttpInfo(nonBusinessDayId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a nonBusinessDay by id Returns the nonBusinessDay identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nonBusinessDayId">Id of the nonBusinessDay to be returned.</param>
        /// <returns>ApiResponse of NonBusinessDay</returns>
        public ApiResponse< NonBusinessDay > GetNonBusinessDayByIdWithHttpInfo (int? nonBusinessDayId)
        {
            // verify the required parameter 'nonBusinessDayId' is set
            if (nonBusinessDayId == null)
                throw new ApiException(400, "Missing required parameter 'nonBusinessDayId' when calling NonBusinessDayApi->GetNonBusinessDayById");

            var localVarPath = "/beta/nonBusinessDay/{nonBusinessDayId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (nonBusinessDayId != null) localVarPathParams.Add("nonBusinessDayId", Configuration.ApiClient.ParameterToString(nonBusinessDayId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetNonBusinessDayById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<NonBusinessDay>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (NonBusinessDay) Configuration.ApiClient.Deserialize(localVarResponse, typeof(NonBusinessDay)));
        }

        /// <summary>
        /// Get a nonBusinessDay by id Returns the nonBusinessDay identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nonBusinessDayId">Id of the nonBusinessDay to be returned.</param>
        /// <returns>Task of NonBusinessDay</returns>
        public async System.Threading.Tasks.Task<NonBusinessDay> GetNonBusinessDayByIdAsync (int? nonBusinessDayId)
        {
             ApiResponse<NonBusinessDay> localVarResponse = await GetNonBusinessDayByIdAsyncWithHttpInfo(nonBusinessDayId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a nonBusinessDay by id Returns the nonBusinessDay identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nonBusinessDayId">Id of the nonBusinessDay to be returned.</param>
        /// <returns>Task of ApiResponse (NonBusinessDay)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<NonBusinessDay>> GetNonBusinessDayByIdAsyncWithHttpInfo (int? nonBusinessDayId)
        {
            // verify the required parameter 'nonBusinessDayId' is set
            if (nonBusinessDayId == null)
                throw new ApiException(400, "Missing required parameter 'nonBusinessDayId' when calling NonBusinessDayApi->GetNonBusinessDayById");

            var localVarPath = "/beta/nonBusinessDay/{nonBusinessDayId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (nonBusinessDayId != null) localVarPathParams.Add("nonBusinessDayId", Configuration.ApiClient.ParameterToString(nonBusinessDayId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetNonBusinessDayById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<NonBusinessDay>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (NonBusinessDay) Configuration.ApiClient.Deserialize(localVarResponse, typeof(NonBusinessDay)));
        }

        /// <summary>
        /// Get the files for a nonBusinessDay. Get all existing nonBusinessDay files.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nonBusinessDayId">Id of the nonBusinessDay to get files for</param>
        /// <returns></returns>
        public void GetNonBusinessDayFiles (int? nonBusinessDayId)
        {
             GetNonBusinessDayFilesWithHttpInfo(nonBusinessDayId);
        }

        /// <summary>
        /// Get the files for a nonBusinessDay. Get all existing nonBusinessDay files.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nonBusinessDayId">Id of the nonBusinessDay to get files for</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GetNonBusinessDayFilesWithHttpInfo (int? nonBusinessDayId)
        {
            // verify the required parameter 'nonBusinessDayId' is set
            if (nonBusinessDayId == null)
                throw new ApiException(400, "Missing required parameter 'nonBusinessDayId' when calling NonBusinessDayApi->GetNonBusinessDayFiles");

            var localVarPath = "/beta/nonBusinessDay/{nonBusinessDayId}/file";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (nonBusinessDayId != null) localVarPathParams.Add("nonBusinessDayId", Configuration.ApiClient.ParameterToString(nonBusinessDayId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetNonBusinessDayFiles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get the files for a nonBusinessDay. Get all existing nonBusinessDay files.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nonBusinessDayId">Id of the nonBusinessDay to get files for</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetNonBusinessDayFilesAsync (int? nonBusinessDayId)
        {
             await GetNonBusinessDayFilesAsyncWithHttpInfo(nonBusinessDayId);

        }

        /// <summary>
        /// Get the files for a nonBusinessDay. Get all existing nonBusinessDay files.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nonBusinessDayId">Id of the nonBusinessDay to get files for</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetNonBusinessDayFilesAsyncWithHttpInfo (int? nonBusinessDayId)
        {
            // verify the required parameter 'nonBusinessDayId' is set
            if (nonBusinessDayId == null)
                throw new ApiException(400, "Missing required parameter 'nonBusinessDayId' when calling NonBusinessDayApi->GetNonBusinessDayFiles");

            var localVarPath = "/beta/nonBusinessDay/{nonBusinessDayId}/file";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (nonBusinessDayId != null) localVarPathParams.Add("nonBusinessDayId", Configuration.ApiClient.ParameterToString(nonBusinessDayId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetNonBusinessDayFiles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get the tags for a nonBusinessDay. Get all existing nonBusinessDay tags.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nonBusinessDayId">Id of the nonBusinessDay to get tags for</param>
        /// <returns></returns>
        public void GetNonBusinessDayTags (int? nonBusinessDayId)
        {
             GetNonBusinessDayTagsWithHttpInfo(nonBusinessDayId);
        }

        /// <summary>
        /// Get the tags for a nonBusinessDay. Get all existing nonBusinessDay tags.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nonBusinessDayId">Id of the nonBusinessDay to get tags for</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GetNonBusinessDayTagsWithHttpInfo (int? nonBusinessDayId)
        {
            // verify the required parameter 'nonBusinessDayId' is set
            if (nonBusinessDayId == null)
                throw new ApiException(400, "Missing required parameter 'nonBusinessDayId' when calling NonBusinessDayApi->GetNonBusinessDayTags");

            var localVarPath = "/beta/nonBusinessDay/{nonBusinessDayId}/tag";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (nonBusinessDayId != null) localVarPathParams.Add("nonBusinessDayId", Configuration.ApiClient.ParameterToString(nonBusinessDayId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetNonBusinessDayTags", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get the tags for a nonBusinessDay. Get all existing nonBusinessDay tags.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nonBusinessDayId">Id of the nonBusinessDay to get tags for</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetNonBusinessDayTagsAsync (int? nonBusinessDayId)
        {
             await GetNonBusinessDayTagsAsyncWithHttpInfo(nonBusinessDayId);

        }

        /// <summary>
        /// Get the tags for a nonBusinessDay. Get all existing nonBusinessDay tags.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nonBusinessDayId">Id of the nonBusinessDay to get tags for</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetNonBusinessDayTagsAsyncWithHttpInfo (int? nonBusinessDayId)
        {
            // verify the required parameter 'nonBusinessDayId' is set
            if (nonBusinessDayId == null)
                throw new ApiException(400, "Missing required parameter 'nonBusinessDayId' when calling NonBusinessDayApi->GetNonBusinessDayTags");

            var localVarPath = "/beta/nonBusinessDay/{nonBusinessDayId}/tag";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (nonBusinessDayId != null) localVarPathParams.Add("nonBusinessDayId", Configuration.ApiClient.ParameterToString(nonBusinessDayId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetNonBusinessDayTags", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update a nonBusinessDay Updates an existing nonBusinessDay using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">NonBusinessDay to be updated.</param>
        /// <returns></returns>
        public void UpdateNonBusinessDay (NonBusinessDay body)
        {
             UpdateNonBusinessDayWithHttpInfo(body);
        }

        /// <summary>
        /// Update a nonBusinessDay Updates an existing nonBusinessDay using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">NonBusinessDay to be updated.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateNonBusinessDayWithHttpInfo (NonBusinessDay body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling NonBusinessDayApi->UpdateNonBusinessDay");

            var localVarPath = "/beta/nonBusinessDay";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateNonBusinessDay", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update a nonBusinessDay Updates an existing nonBusinessDay using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">NonBusinessDay to be updated.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateNonBusinessDayAsync (NonBusinessDay body)
        {
             await UpdateNonBusinessDayAsyncWithHttpInfo(body);

        }

        /// <summary>
        /// Update a nonBusinessDay Updates an existing nonBusinessDay using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">NonBusinessDay to be updated.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateNonBusinessDayAsyncWithHttpInfo (NonBusinessDay body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling NonBusinessDayApi->UpdateNonBusinessDay");

            var localVarPath = "/beta/nonBusinessDay";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateNonBusinessDay", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

    }
}
