/* 
 * Infoplus API
 *
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Infoplus.Client;
using Infoplus.Model;

namespace Infoplus.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IOmsOrderApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create an omsOrder
        /// </summary>
        /// <remarks>
        /// Inserts a new omsOrder using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">OmsOrder to be inserted.</param>
        /// <returns>OmsOrder</returns>
        OmsOrder AddOmsOrder (OmsOrder body);

        /// <summary>
        /// Create an omsOrder
        /// </summary>
        /// <remarks>
        /// Inserts a new omsOrder using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">OmsOrder to be inserted.</param>
        /// <returns>ApiResponse of OmsOrder</returns>
        ApiResponse<OmsOrder> AddOmsOrderWithHttpInfo (OmsOrder body);
        /// <summary>
        /// Add new audit for an omsOrder
        /// </summary>
        /// <remarks>
        /// Adds an audit to an existing omsOrder.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="omsOrderId">Id of the omsOrder to add an audit to</param>
        /// <param name="omsOrderAudit">The audit to add</param>
        /// <returns></returns>
        void AddOmsOrderAudit (int? omsOrderId, string omsOrderAudit);

        /// <summary>
        /// Add new audit for an omsOrder
        /// </summary>
        /// <remarks>
        /// Adds an audit to an existing omsOrder.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="omsOrderId">Id of the omsOrder to add an audit to</param>
        /// <param name="omsOrderAudit">The audit to add</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddOmsOrderAuditWithHttpInfo (int? omsOrderId, string omsOrderAudit);
        /// <summary>
        /// Attach a file to an omsOrder
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing omsOrder.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="omsOrderId">Id of the omsOrder to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns></returns>
        void AddOmsOrderFile (int? omsOrderId, string fileName);

        /// <summary>
        /// Attach a file to an omsOrder
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing omsOrder.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="omsOrderId">Id of the omsOrder to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddOmsOrderFileWithHttpInfo (int? omsOrderId, string fileName);
        /// <summary>
        /// Attach a file to an omsOrder by URL.
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing omsOrder by URL.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="omsOrderId">Id of the omsOrder to add an file to</param>
        /// <returns></returns>
        void AddOmsOrderFileByURL (RecordFile body, int? omsOrderId);

        /// <summary>
        /// Attach a file to an omsOrder by URL.
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing omsOrder by URL.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="omsOrderId">Id of the omsOrder to add an file to</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddOmsOrderFileByURLWithHttpInfo (RecordFile body, int? omsOrderId);
        /// <summary>
        /// Add new tags for an omsOrder.
        /// </summary>
        /// <remarks>
        /// Adds a tag to an existing omsOrder.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="omsOrderId">Id of the omsOrder to add a tag to</param>
        /// <param name="omsOrderTag">The tag to add</param>
        /// <returns></returns>
        void AddOmsOrderTag (int? omsOrderId, string omsOrderTag);

        /// <summary>
        /// Add new tags for an omsOrder.
        /// </summary>
        /// <remarks>
        /// Adds a tag to an existing omsOrder.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="omsOrderId">Id of the omsOrder to add a tag to</param>
        /// <param name="omsOrderTag">The tag to add</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddOmsOrderTagWithHttpInfo (int? omsOrderId, string omsOrderTag);
        /// <summary>
        /// Delete a file for an omsOrder.
        /// </summary>
        /// <remarks>
        /// Deletes an existing omsOrder file using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="omsOrderId">Id of the omsOrder to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns></returns>
        void DeleteOmsOrderFile (int? omsOrderId, int? fileId);

        /// <summary>
        /// Delete a file for an omsOrder.
        /// </summary>
        /// <remarks>
        /// Deletes an existing omsOrder file using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="omsOrderId">Id of the omsOrder to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteOmsOrderFileWithHttpInfo (int? omsOrderId, int? fileId);
        /// <summary>
        /// Delete a tag for an omsOrder.
        /// </summary>
        /// <remarks>
        /// Deletes an existing omsOrder tag using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="omsOrderId">Id of the omsOrder to remove tag from</param>
        /// <param name="omsOrderTag">The tag to delete</param>
        /// <returns></returns>
        void DeleteOmsOrderTag (int? omsOrderId, string omsOrderTag);

        /// <summary>
        /// Delete a tag for an omsOrder.
        /// </summary>
        /// <remarks>
        /// Deletes an existing omsOrder tag using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="omsOrderId">Id of the omsOrder to remove tag from</param>
        /// <param name="omsOrderTag">The tag to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteOmsOrderTagWithHttpInfo (int? omsOrderId, string omsOrderTag);
        /// <summary>
        /// Get a duplicated an omsOrder by id
        /// </summary>
        /// <remarks>
        /// Returns a duplicated omsOrder identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="omsOrderId">Id of the omsOrder to be duplicated.</param>
        /// <returns>OmsOrder</returns>
        OmsOrder GetDuplicateOmsOrderById (int? omsOrderId);

        /// <summary>
        /// Get a duplicated an omsOrder by id
        /// </summary>
        /// <remarks>
        /// Returns a duplicated omsOrder identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="omsOrderId">Id of the omsOrder to be duplicated.</param>
        /// <returns>ApiResponse of OmsOrder</returns>
        ApiResponse<OmsOrder> GetDuplicateOmsOrderByIdWithHttpInfo (int? omsOrderId);
        /// <summary>
        /// Search omsOrders by filter
        /// </summary>
        /// <remarks>
        /// Returns the list of omsOrders that match the given filter.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>List&lt;OmsOrder&gt;</returns>
        List<OmsOrder> GetOmsOrderByFilter (string filter = null, int? page = null, int? limit = null, string sort = null);

        /// <summary>
        /// Search omsOrders by filter
        /// </summary>
        /// <remarks>
        /// Returns the list of omsOrders that match the given filter.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>ApiResponse of List&lt;OmsOrder&gt;</returns>
        ApiResponse<List<OmsOrder>> GetOmsOrderByFilterWithHttpInfo (string filter = null, int? page = null, int? limit = null, string sort = null);
        /// <summary>
        /// Get an omsOrder by id
        /// </summary>
        /// <remarks>
        /// Returns the omsOrder identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="omsOrderId">Id of the omsOrder to be returned.</param>
        /// <returns>OmsOrder</returns>
        OmsOrder GetOmsOrderById (int? omsOrderId);

        /// <summary>
        /// Get an omsOrder by id
        /// </summary>
        /// <remarks>
        /// Returns the omsOrder identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="omsOrderId">Id of the omsOrder to be returned.</param>
        /// <returns>ApiResponse of OmsOrder</returns>
        ApiResponse<OmsOrder> GetOmsOrderByIdWithHttpInfo (int? omsOrderId);
        /// <summary>
        /// Get the files for an omsOrder.
        /// </summary>
        /// <remarks>
        /// Get all existing omsOrder files.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="omsOrderId">Id of the omsOrder to get files for</param>
        /// <returns></returns>
        void GetOmsOrderFiles (int? omsOrderId);

        /// <summary>
        /// Get the files for an omsOrder.
        /// </summary>
        /// <remarks>
        /// Get all existing omsOrder files.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="omsOrderId">Id of the omsOrder to get files for</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetOmsOrderFilesWithHttpInfo (int? omsOrderId);
        /// <summary>
        /// Get the tags for an omsOrder.
        /// </summary>
        /// <remarks>
        /// Get all existing omsOrder tags.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="omsOrderId">Id of the omsOrder to get tags for</param>
        /// <returns></returns>
        void GetOmsOrderTags (int? omsOrderId);

        /// <summary>
        /// Get the tags for an omsOrder.
        /// </summary>
        /// <remarks>
        /// Get all existing omsOrder tags.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="omsOrderId">Id of the omsOrder to get tags for</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetOmsOrderTagsWithHttpInfo (int? omsOrderId);
        /// <summary>
        /// Update an omsOrder
        /// </summary>
        /// <remarks>
        /// Updates an existing omsOrder using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">OmsOrder to be updated.</param>
        /// <returns></returns>
        void UpdateOmsOrder (OmsOrder body);

        /// <summary>
        /// Update an omsOrder
        /// </summary>
        /// <remarks>
        /// Updates an existing omsOrder using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">OmsOrder to be updated.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateOmsOrderWithHttpInfo (OmsOrder body);
        /// <summary>
        /// Update an omsOrder custom fields
        /// </summary>
        /// <remarks>
        /// Updates an existing omsOrder custom fields using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">OmsOrder to be updated.</param>
        /// <returns></returns>
        void UpdateOmsOrderCustomFields (OmsOrder body);

        /// <summary>
        /// Update an omsOrder custom fields
        /// </summary>
        /// <remarks>
        /// Updates an existing omsOrder custom fields using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">OmsOrder to be updated.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateOmsOrderCustomFieldsWithHttpInfo (OmsOrder body);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create an omsOrder
        /// </summary>
        /// <remarks>
        /// Inserts a new omsOrder using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">OmsOrder to be inserted.</param>
        /// <returns>Task of OmsOrder</returns>
        System.Threading.Tasks.Task<OmsOrder> AddOmsOrderAsync (OmsOrder body);

        /// <summary>
        /// Create an omsOrder
        /// </summary>
        /// <remarks>
        /// Inserts a new omsOrder using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">OmsOrder to be inserted.</param>
        /// <returns>Task of ApiResponse (OmsOrder)</returns>
        System.Threading.Tasks.Task<ApiResponse<OmsOrder>> AddOmsOrderAsyncWithHttpInfo (OmsOrder body);
        /// <summary>
        /// Add new audit for an omsOrder
        /// </summary>
        /// <remarks>
        /// Adds an audit to an existing omsOrder.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="omsOrderId">Id of the omsOrder to add an audit to</param>
        /// <param name="omsOrderAudit">The audit to add</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddOmsOrderAuditAsync (int? omsOrderId, string omsOrderAudit);

        /// <summary>
        /// Add new audit for an omsOrder
        /// </summary>
        /// <remarks>
        /// Adds an audit to an existing omsOrder.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="omsOrderId">Id of the omsOrder to add an audit to</param>
        /// <param name="omsOrderAudit">The audit to add</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddOmsOrderAuditAsyncWithHttpInfo (int? omsOrderId, string omsOrderAudit);
        /// <summary>
        /// Attach a file to an omsOrder
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing omsOrder.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="omsOrderId">Id of the omsOrder to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddOmsOrderFileAsync (int? omsOrderId, string fileName);

        /// <summary>
        /// Attach a file to an omsOrder
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing omsOrder.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="omsOrderId">Id of the omsOrder to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddOmsOrderFileAsyncWithHttpInfo (int? omsOrderId, string fileName);
        /// <summary>
        /// Attach a file to an omsOrder by URL.
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing omsOrder by URL.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="omsOrderId">Id of the omsOrder to add an file to</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddOmsOrderFileByURLAsync (RecordFile body, int? omsOrderId);

        /// <summary>
        /// Attach a file to an omsOrder by URL.
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing omsOrder by URL.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="omsOrderId">Id of the omsOrder to add an file to</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddOmsOrderFileByURLAsyncWithHttpInfo (RecordFile body, int? omsOrderId);
        /// <summary>
        /// Add new tags for an omsOrder.
        /// </summary>
        /// <remarks>
        /// Adds a tag to an existing omsOrder.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="omsOrderId">Id of the omsOrder to add a tag to</param>
        /// <param name="omsOrderTag">The tag to add</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddOmsOrderTagAsync (int? omsOrderId, string omsOrderTag);

        /// <summary>
        /// Add new tags for an omsOrder.
        /// </summary>
        /// <remarks>
        /// Adds a tag to an existing omsOrder.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="omsOrderId">Id of the omsOrder to add a tag to</param>
        /// <param name="omsOrderTag">The tag to add</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddOmsOrderTagAsyncWithHttpInfo (int? omsOrderId, string omsOrderTag);
        /// <summary>
        /// Delete a file for an omsOrder.
        /// </summary>
        /// <remarks>
        /// Deletes an existing omsOrder file using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="omsOrderId">Id of the omsOrder to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteOmsOrderFileAsync (int? omsOrderId, int? fileId);

        /// <summary>
        /// Delete a file for an omsOrder.
        /// </summary>
        /// <remarks>
        /// Deletes an existing omsOrder file using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="omsOrderId">Id of the omsOrder to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteOmsOrderFileAsyncWithHttpInfo (int? omsOrderId, int? fileId);
        /// <summary>
        /// Delete a tag for an omsOrder.
        /// </summary>
        /// <remarks>
        /// Deletes an existing omsOrder tag using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="omsOrderId">Id of the omsOrder to remove tag from</param>
        /// <param name="omsOrderTag">The tag to delete</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteOmsOrderTagAsync (int? omsOrderId, string omsOrderTag);

        /// <summary>
        /// Delete a tag for an omsOrder.
        /// </summary>
        /// <remarks>
        /// Deletes an existing omsOrder tag using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="omsOrderId">Id of the omsOrder to remove tag from</param>
        /// <param name="omsOrderTag">The tag to delete</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteOmsOrderTagAsyncWithHttpInfo (int? omsOrderId, string omsOrderTag);
        /// <summary>
        /// Get a duplicated an omsOrder by id
        /// </summary>
        /// <remarks>
        /// Returns a duplicated omsOrder identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="omsOrderId">Id of the omsOrder to be duplicated.</param>
        /// <returns>Task of OmsOrder</returns>
        System.Threading.Tasks.Task<OmsOrder> GetDuplicateOmsOrderByIdAsync (int? omsOrderId);

        /// <summary>
        /// Get a duplicated an omsOrder by id
        /// </summary>
        /// <remarks>
        /// Returns a duplicated omsOrder identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="omsOrderId">Id of the omsOrder to be duplicated.</param>
        /// <returns>Task of ApiResponse (OmsOrder)</returns>
        System.Threading.Tasks.Task<ApiResponse<OmsOrder>> GetDuplicateOmsOrderByIdAsyncWithHttpInfo (int? omsOrderId);
        /// <summary>
        /// Search omsOrders by filter
        /// </summary>
        /// <remarks>
        /// Returns the list of omsOrders that match the given filter.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>Task of List&lt;OmsOrder&gt;</returns>
        System.Threading.Tasks.Task<List<OmsOrder>> GetOmsOrderByFilterAsync (string filter = null, int? page = null, int? limit = null, string sort = null);

        /// <summary>
        /// Search omsOrders by filter
        /// </summary>
        /// <remarks>
        /// Returns the list of omsOrders that match the given filter.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;OmsOrder&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<OmsOrder>>> GetOmsOrderByFilterAsyncWithHttpInfo (string filter = null, int? page = null, int? limit = null, string sort = null);
        /// <summary>
        /// Get an omsOrder by id
        /// </summary>
        /// <remarks>
        /// Returns the omsOrder identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="omsOrderId">Id of the omsOrder to be returned.</param>
        /// <returns>Task of OmsOrder</returns>
        System.Threading.Tasks.Task<OmsOrder> GetOmsOrderByIdAsync (int? omsOrderId);

        /// <summary>
        /// Get an omsOrder by id
        /// </summary>
        /// <remarks>
        /// Returns the omsOrder identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="omsOrderId">Id of the omsOrder to be returned.</param>
        /// <returns>Task of ApiResponse (OmsOrder)</returns>
        System.Threading.Tasks.Task<ApiResponse<OmsOrder>> GetOmsOrderByIdAsyncWithHttpInfo (int? omsOrderId);
        /// <summary>
        /// Get the files for an omsOrder.
        /// </summary>
        /// <remarks>
        /// Get all existing omsOrder files.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="omsOrderId">Id of the omsOrder to get files for</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetOmsOrderFilesAsync (int? omsOrderId);

        /// <summary>
        /// Get the files for an omsOrder.
        /// </summary>
        /// <remarks>
        /// Get all existing omsOrder files.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="omsOrderId">Id of the omsOrder to get files for</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetOmsOrderFilesAsyncWithHttpInfo (int? omsOrderId);
        /// <summary>
        /// Get the tags for an omsOrder.
        /// </summary>
        /// <remarks>
        /// Get all existing omsOrder tags.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="omsOrderId">Id of the omsOrder to get tags for</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetOmsOrderTagsAsync (int? omsOrderId);

        /// <summary>
        /// Get the tags for an omsOrder.
        /// </summary>
        /// <remarks>
        /// Get all existing omsOrder tags.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="omsOrderId">Id of the omsOrder to get tags for</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetOmsOrderTagsAsyncWithHttpInfo (int? omsOrderId);
        /// <summary>
        /// Update an omsOrder
        /// </summary>
        /// <remarks>
        /// Updates an existing omsOrder using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">OmsOrder to be updated.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateOmsOrderAsync (OmsOrder body);

        /// <summary>
        /// Update an omsOrder
        /// </summary>
        /// <remarks>
        /// Updates an existing omsOrder using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">OmsOrder to be updated.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateOmsOrderAsyncWithHttpInfo (OmsOrder body);
        /// <summary>
        /// Update an omsOrder custom fields
        /// </summary>
        /// <remarks>
        /// Updates an existing omsOrder custom fields using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">OmsOrder to be updated.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateOmsOrderCustomFieldsAsync (OmsOrder body);

        /// <summary>
        /// Update an omsOrder custom fields
        /// </summary>
        /// <remarks>
        /// Updates an existing omsOrder custom fields using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">OmsOrder to be updated.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateOmsOrderCustomFieldsAsyncWithHttpInfo (OmsOrder body);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class OmsOrderApi : IOmsOrderApi
    {
        private Infoplus.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="OmsOrderApi"/> class.
        /// </summary>
        /// <returns></returns>
        public OmsOrderApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = Infoplus.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OmsOrderApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public OmsOrderApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Infoplus.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Infoplus.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create an omsOrder Inserts a new omsOrder using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">OmsOrder to be inserted.</param>
        /// <returns>OmsOrder</returns>
        public OmsOrder AddOmsOrder (OmsOrder body)
        {
             ApiResponse<OmsOrder> localVarResponse = AddOmsOrderWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create an omsOrder Inserts a new omsOrder using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">OmsOrder to be inserted.</param>
        /// <returns>ApiResponse of OmsOrder</returns>
        public ApiResponse< OmsOrder > AddOmsOrderWithHttpInfo (OmsOrder body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling OmsOrderApi->AddOmsOrder");

            var localVarPath = "/beta/omsOrder";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddOmsOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OmsOrder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (OmsOrder) Configuration.ApiClient.Deserialize(localVarResponse, typeof(OmsOrder)));
        }

        /// <summary>
        /// Create an omsOrder Inserts a new omsOrder using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">OmsOrder to be inserted.</param>
        /// <returns>Task of OmsOrder</returns>
        public async System.Threading.Tasks.Task<OmsOrder> AddOmsOrderAsync (OmsOrder body)
        {
             ApiResponse<OmsOrder> localVarResponse = await AddOmsOrderAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create an omsOrder Inserts a new omsOrder using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">OmsOrder to be inserted.</param>
        /// <returns>Task of ApiResponse (OmsOrder)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OmsOrder>> AddOmsOrderAsyncWithHttpInfo (OmsOrder body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling OmsOrderApi->AddOmsOrder");

            var localVarPath = "/beta/omsOrder";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddOmsOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OmsOrder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (OmsOrder) Configuration.ApiClient.Deserialize(localVarResponse, typeof(OmsOrder)));
        }

        /// <summary>
        /// Add new audit for an omsOrder Adds an audit to an existing omsOrder.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="omsOrderId">Id of the omsOrder to add an audit to</param>
        /// <param name="omsOrderAudit">The audit to add</param>
        /// <returns></returns>
        public void AddOmsOrderAudit (int? omsOrderId, string omsOrderAudit)
        {
             AddOmsOrderAuditWithHttpInfo(omsOrderId, omsOrderAudit);
        }

        /// <summary>
        /// Add new audit for an omsOrder Adds an audit to an existing omsOrder.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="omsOrderId">Id of the omsOrder to add an audit to</param>
        /// <param name="omsOrderAudit">The audit to add</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AddOmsOrderAuditWithHttpInfo (int? omsOrderId, string omsOrderAudit)
        {
            // verify the required parameter 'omsOrderId' is set
            if (omsOrderId == null)
                throw new ApiException(400, "Missing required parameter 'omsOrderId' when calling OmsOrderApi->AddOmsOrderAudit");
            // verify the required parameter 'omsOrderAudit' is set
            if (omsOrderAudit == null)
                throw new ApiException(400, "Missing required parameter 'omsOrderAudit' when calling OmsOrderApi->AddOmsOrderAudit");

            var localVarPath = "/beta/omsOrder/{omsOrderId}/audit/{omsOrderAudit}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (omsOrderId != null) localVarPathParams.Add("omsOrderId", Configuration.ApiClient.ParameterToString(omsOrderId)); // path parameter
            if (omsOrderAudit != null) localVarPathParams.Add("omsOrderAudit", Configuration.ApiClient.ParameterToString(omsOrderAudit)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddOmsOrderAudit", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Add new audit for an omsOrder Adds an audit to an existing omsOrder.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="omsOrderId">Id of the omsOrder to add an audit to</param>
        /// <param name="omsOrderAudit">The audit to add</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddOmsOrderAuditAsync (int? omsOrderId, string omsOrderAudit)
        {
             await AddOmsOrderAuditAsyncWithHttpInfo(omsOrderId, omsOrderAudit);

        }

        /// <summary>
        /// Add new audit for an omsOrder Adds an audit to an existing omsOrder.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="omsOrderId">Id of the omsOrder to add an audit to</param>
        /// <param name="omsOrderAudit">The audit to add</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddOmsOrderAuditAsyncWithHttpInfo (int? omsOrderId, string omsOrderAudit)
        {
            // verify the required parameter 'omsOrderId' is set
            if (omsOrderId == null)
                throw new ApiException(400, "Missing required parameter 'omsOrderId' when calling OmsOrderApi->AddOmsOrderAudit");
            // verify the required parameter 'omsOrderAudit' is set
            if (omsOrderAudit == null)
                throw new ApiException(400, "Missing required parameter 'omsOrderAudit' when calling OmsOrderApi->AddOmsOrderAudit");

            var localVarPath = "/beta/omsOrder/{omsOrderId}/audit/{omsOrderAudit}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (omsOrderId != null) localVarPathParams.Add("omsOrderId", Configuration.ApiClient.ParameterToString(omsOrderId)); // path parameter
            if (omsOrderAudit != null) localVarPathParams.Add("omsOrderAudit", Configuration.ApiClient.ParameterToString(omsOrderAudit)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddOmsOrderAudit", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Attach a file to an omsOrder Adds a file to an existing omsOrder.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="omsOrderId">Id of the omsOrder to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns></returns>
        public void AddOmsOrderFile (int? omsOrderId, string fileName)
        {
             AddOmsOrderFileWithHttpInfo(omsOrderId, fileName);
        }

        /// <summary>
        /// Attach a file to an omsOrder Adds a file to an existing omsOrder.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="omsOrderId">Id of the omsOrder to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AddOmsOrderFileWithHttpInfo (int? omsOrderId, string fileName)
        {
            // verify the required parameter 'omsOrderId' is set
            if (omsOrderId == null)
                throw new ApiException(400, "Missing required parameter 'omsOrderId' when calling OmsOrderApi->AddOmsOrderFile");
            // verify the required parameter 'fileName' is set
            if (fileName == null)
                throw new ApiException(400, "Missing required parameter 'fileName' when calling OmsOrderApi->AddOmsOrderFile");

            var localVarPath = "/beta/omsOrder/{omsOrderId}/file/{fileName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (omsOrderId != null) localVarPathParams.Add("omsOrderId", Configuration.ApiClient.ParameterToString(omsOrderId)); // path parameter
            if (fileName != null) localVarPathParams.Add("fileName", Configuration.ApiClient.ParameterToString(fileName)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddOmsOrderFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Attach a file to an omsOrder Adds a file to an existing omsOrder.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="omsOrderId">Id of the omsOrder to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddOmsOrderFileAsync (int? omsOrderId, string fileName)
        {
             await AddOmsOrderFileAsyncWithHttpInfo(omsOrderId, fileName);

        }

        /// <summary>
        /// Attach a file to an omsOrder Adds a file to an existing omsOrder.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="omsOrderId">Id of the omsOrder to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddOmsOrderFileAsyncWithHttpInfo (int? omsOrderId, string fileName)
        {
            // verify the required parameter 'omsOrderId' is set
            if (omsOrderId == null)
                throw new ApiException(400, "Missing required parameter 'omsOrderId' when calling OmsOrderApi->AddOmsOrderFile");
            // verify the required parameter 'fileName' is set
            if (fileName == null)
                throw new ApiException(400, "Missing required parameter 'fileName' when calling OmsOrderApi->AddOmsOrderFile");

            var localVarPath = "/beta/omsOrder/{omsOrderId}/file/{fileName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (omsOrderId != null) localVarPathParams.Add("omsOrderId", Configuration.ApiClient.ParameterToString(omsOrderId)); // path parameter
            if (fileName != null) localVarPathParams.Add("fileName", Configuration.ApiClient.ParameterToString(fileName)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddOmsOrderFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Attach a file to an omsOrder by URL. Adds a file to an existing omsOrder by URL.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="omsOrderId">Id of the omsOrder to add an file to</param>
        /// <returns></returns>
        public void AddOmsOrderFileByURL (RecordFile body, int? omsOrderId)
        {
             AddOmsOrderFileByURLWithHttpInfo(body, omsOrderId);
        }

        /// <summary>
        /// Attach a file to an omsOrder by URL. Adds a file to an existing omsOrder by URL.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="omsOrderId">Id of the omsOrder to add an file to</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AddOmsOrderFileByURLWithHttpInfo (RecordFile body, int? omsOrderId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling OmsOrderApi->AddOmsOrderFileByURL");
            // verify the required parameter 'omsOrderId' is set
            if (omsOrderId == null)
                throw new ApiException(400, "Missing required parameter 'omsOrderId' when calling OmsOrderApi->AddOmsOrderFileByURL");

            var localVarPath = "/beta/omsOrder/{omsOrderId}/file";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (omsOrderId != null) localVarPathParams.Add("omsOrderId", Configuration.ApiClient.ParameterToString(omsOrderId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddOmsOrderFileByURL", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Attach a file to an omsOrder by URL. Adds a file to an existing omsOrder by URL.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="omsOrderId">Id of the omsOrder to add an file to</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddOmsOrderFileByURLAsync (RecordFile body, int? omsOrderId)
        {
             await AddOmsOrderFileByURLAsyncWithHttpInfo(body, omsOrderId);

        }

        /// <summary>
        /// Attach a file to an omsOrder by URL. Adds a file to an existing omsOrder by URL.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="omsOrderId">Id of the omsOrder to add an file to</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddOmsOrderFileByURLAsyncWithHttpInfo (RecordFile body, int? omsOrderId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling OmsOrderApi->AddOmsOrderFileByURL");
            // verify the required parameter 'omsOrderId' is set
            if (omsOrderId == null)
                throw new ApiException(400, "Missing required parameter 'omsOrderId' when calling OmsOrderApi->AddOmsOrderFileByURL");

            var localVarPath = "/beta/omsOrder/{omsOrderId}/file";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (omsOrderId != null) localVarPathParams.Add("omsOrderId", Configuration.ApiClient.ParameterToString(omsOrderId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddOmsOrderFileByURL", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Add new tags for an omsOrder. Adds a tag to an existing omsOrder.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="omsOrderId">Id of the omsOrder to add a tag to</param>
        /// <param name="omsOrderTag">The tag to add</param>
        /// <returns></returns>
        public void AddOmsOrderTag (int? omsOrderId, string omsOrderTag)
        {
             AddOmsOrderTagWithHttpInfo(omsOrderId, omsOrderTag);
        }

        /// <summary>
        /// Add new tags for an omsOrder. Adds a tag to an existing omsOrder.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="omsOrderId">Id of the omsOrder to add a tag to</param>
        /// <param name="omsOrderTag">The tag to add</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AddOmsOrderTagWithHttpInfo (int? omsOrderId, string omsOrderTag)
        {
            // verify the required parameter 'omsOrderId' is set
            if (omsOrderId == null)
                throw new ApiException(400, "Missing required parameter 'omsOrderId' when calling OmsOrderApi->AddOmsOrderTag");
            // verify the required parameter 'omsOrderTag' is set
            if (omsOrderTag == null)
                throw new ApiException(400, "Missing required parameter 'omsOrderTag' when calling OmsOrderApi->AddOmsOrderTag");

            var localVarPath = "/beta/omsOrder/{omsOrderId}/tag/{omsOrderTag}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (omsOrderId != null) localVarPathParams.Add("omsOrderId", Configuration.ApiClient.ParameterToString(omsOrderId)); // path parameter
            if (omsOrderTag != null) localVarPathParams.Add("omsOrderTag", Configuration.ApiClient.ParameterToString(omsOrderTag)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddOmsOrderTag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Add new tags for an omsOrder. Adds a tag to an existing omsOrder.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="omsOrderId">Id of the omsOrder to add a tag to</param>
        /// <param name="omsOrderTag">The tag to add</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddOmsOrderTagAsync (int? omsOrderId, string omsOrderTag)
        {
             await AddOmsOrderTagAsyncWithHttpInfo(omsOrderId, omsOrderTag);

        }

        /// <summary>
        /// Add new tags for an omsOrder. Adds a tag to an existing omsOrder.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="omsOrderId">Id of the omsOrder to add a tag to</param>
        /// <param name="omsOrderTag">The tag to add</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddOmsOrderTagAsyncWithHttpInfo (int? omsOrderId, string omsOrderTag)
        {
            // verify the required parameter 'omsOrderId' is set
            if (omsOrderId == null)
                throw new ApiException(400, "Missing required parameter 'omsOrderId' when calling OmsOrderApi->AddOmsOrderTag");
            // verify the required parameter 'omsOrderTag' is set
            if (omsOrderTag == null)
                throw new ApiException(400, "Missing required parameter 'omsOrderTag' when calling OmsOrderApi->AddOmsOrderTag");

            var localVarPath = "/beta/omsOrder/{omsOrderId}/tag/{omsOrderTag}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (omsOrderId != null) localVarPathParams.Add("omsOrderId", Configuration.ApiClient.ParameterToString(omsOrderId)); // path parameter
            if (omsOrderTag != null) localVarPathParams.Add("omsOrderTag", Configuration.ApiClient.ParameterToString(omsOrderTag)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddOmsOrderTag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a file for an omsOrder. Deletes an existing omsOrder file using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="omsOrderId">Id of the omsOrder to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns></returns>
        public void DeleteOmsOrderFile (int? omsOrderId, int? fileId)
        {
             DeleteOmsOrderFileWithHttpInfo(omsOrderId, fileId);
        }

        /// <summary>
        /// Delete a file for an omsOrder. Deletes an existing omsOrder file using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="omsOrderId">Id of the omsOrder to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteOmsOrderFileWithHttpInfo (int? omsOrderId, int? fileId)
        {
            // verify the required parameter 'omsOrderId' is set
            if (omsOrderId == null)
                throw new ApiException(400, "Missing required parameter 'omsOrderId' when calling OmsOrderApi->DeleteOmsOrderFile");
            // verify the required parameter 'fileId' is set
            if (fileId == null)
                throw new ApiException(400, "Missing required parameter 'fileId' when calling OmsOrderApi->DeleteOmsOrderFile");

            var localVarPath = "/beta/omsOrder/{omsOrderId}/file/{fileId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (omsOrderId != null) localVarPathParams.Add("omsOrderId", Configuration.ApiClient.ParameterToString(omsOrderId)); // path parameter
            if (fileId != null) localVarPathParams.Add("fileId", Configuration.ApiClient.ParameterToString(fileId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteOmsOrderFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a file for an omsOrder. Deletes an existing omsOrder file using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="omsOrderId">Id of the omsOrder to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteOmsOrderFileAsync (int? omsOrderId, int? fileId)
        {
             await DeleteOmsOrderFileAsyncWithHttpInfo(omsOrderId, fileId);

        }

        /// <summary>
        /// Delete a file for an omsOrder. Deletes an existing omsOrder file using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="omsOrderId">Id of the omsOrder to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteOmsOrderFileAsyncWithHttpInfo (int? omsOrderId, int? fileId)
        {
            // verify the required parameter 'omsOrderId' is set
            if (omsOrderId == null)
                throw new ApiException(400, "Missing required parameter 'omsOrderId' when calling OmsOrderApi->DeleteOmsOrderFile");
            // verify the required parameter 'fileId' is set
            if (fileId == null)
                throw new ApiException(400, "Missing required parameter 'fileId' when calling OmsOrderApi->DeleteOmsOrderFile");

            var localVarPath = "/beta/omsOrder/{omsOrderId}/file/{fileId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (omsOrderId != null) localVarPathParams.Add("omsOrderId", Configuration.ApiClient.ParameterToString(omsOrderId)); // path parameter
            if (fileId != null) localVarPathParams.Add("fileId", Configuration.ApiClient.ParameterToString(fileId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteOmsOrderFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a tag for an omsOrder. Deletes an existing omsOrder tag using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="omsOrderId">Id of the omsOrder to remove tag from</param>
        /// <param name="omsOrderTag">The tag to delete</param>
        /// <returns></returns>
        public void DeleteOmsOrderTag (int? omsOrderId, string omsOrderTag)
        {
             DeleteOmsOrderTagWithHttpInfo(omsOrderId, omsOrderTag);
        }

        /// <summary>
        /// Delete a tag for an omsOrder. Deletes an existing omsOrder tag using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="omsOrderId">Id of the omsOrder to remove tag from</param>
        /// <param name="omsOrderTag">The tag to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteOmsOrderTagWithHttpInfo (int? omsOrderId, string omsOrderTag)
        {
            // verify the required parameter 'omsOrderId' is set
            if (omsOrderId == null)
                throw new ApiException(400, "Missing required parameter 'omsOrderId' when calling OmsOrderApi->DeleteOmsOrderTag");
            // verify the required parameter 'omsOrderTag' is set
            if (omsOrderTag == null)
                throw new ApiException(400, "Missing required parameter 'omsOrderTag' when calling OmsOrderApi->DeleteOmsOrderTag");

            var localVarPath = "/beta/omsOrder/{omsOrderId}/tag/{omsOrderTag}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (omsOrderId != null) localVarPathParams.Add("omsOrderId", Configuration.ApiClient.ParameterToString(omsOrderId)); // path parameter
            if (omsOrderTag != null) localVarPathParams.Add("omsOrderTag", Configuration.ApiClient.ParameterToString(omsOrderTag)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteOmsOrderTag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a tag for an omsOrder. Deletes an existing omsOrder tag using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="omsOrderId">Id of the omsOrder to remove tag from</param>
        /// <param name="omsOrderTag">The tag to delete</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteOmsOrderTagAsync (int? omsOrderId, string omsOrderTag)
        {
             await DeleteOmsOrderTagAsyncWithHttpInfo(omsOrderId, omsOrderTag);

        }

        /// <summary>
        /// Delete a tag for an omsOrder. Deletes an existing omsOrder tag using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="omsOrderId">Id of the omsOrder to remove tag from</param>
        /// <param name="omsOrderTag">The tag to delete</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteOmsOrderTagAsyncWithHttpInfo (int? omsOrderId, string omsOrderTag)
        {
            // verify the required parameter 'omsOrderId' is set
            if (omsOrderId == null)
                throw new ApiException(400, "Missing required parameter 'omsOrderId' when calling OmsOrderApi->DeleteOmsOrderTag");
            // verify the required parameter 'omsOrderTag' is set
            if (omsOrderTag == null)
                throw new ApiException(400, "Missing required parameter 'omsOrderTag' when calling OmsOrderApi->DeleteOmsOrderTag");

            var localVarPath = "/beta/omsOrder/{omsOrderId}/tag/{omsOrderTag}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (omsOrderId != null) localVarPathParams.Add("omsOrderId", Configuration.ApiClient.ParameterToString(omsOrderId)); // path parameter
            if (omsOrderTag != null) localVarPathParams.Add("omsOrderTag", Configuration.ApiClient.ParameterToString(omsOrderTag)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteOmsOrderTag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get a duplicated an omsOrder by id Returns a duplicated omsOrder identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="omsOrderId">Id of the omsOrder to be duplicated.</param>
        /// <returns>OmsOrder</returns>
        public OmsOrder GetDuplicateOmsOrderById (int? omsOrderId)
        {
             ApiResponse<OmsOrder> localVarResponse = GetDuplicateOmsOrderByIdWithHttpInfo(omsOrderId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a duplicated an omsOrder by id Returns a duplicated omsOrder identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="omsOrderId">Id of the omsOrder to be duplicated.</param>
        /// <returns>ApiResponse of OmsOrder</returns>
        public ApiResponse< OmsOrder > GetDuplicateOmsOrderByIdWithHttpInfo (int? omsOrderId)
        {
            // verify the required parameter 'omsOrderId' is set
            if (omsOrderId == null)
                throw new ApiException(400, "Missing required parameter 'omsOrderId' when calling OmsOrderApi->GetDuplicateOmsOrderById");

            var localVarPath = "/beta/omsOrder/duplicate/{omsOrderId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (omsOrderId != null) localVarPathParams.Add("omsOrderId", Configuration.ApiClient.ParameterToString(omsOrderId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDuplicateOmsOrderById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OmsOrder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (OmsOrder) Configuration.ApiClient.Deserialize(localVarResponse, typeof(OmsOrder)));
        }

        /// <summary>
        /// Get a duplicated an omsOrder by id Returns a duplicated omsOrder identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="omsOrderId">Id of the omsOrder to be duplicated.</param>
        /// <returns>Task of OmsOrder</returns>
        public async System.Threading.Tasks.Task<OmsOrder> GetDuplicateOmsOrderByIdAsync (int? omsOrderId)
        {
             ApiResponse<OmsOrder> localVarResponse = await GetDuplicateOmsOrderByIdAsyncWithHttpInfo(omsOrderId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a duplicated an omsOrder by id Returns a duplicated omsOrder identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="omsOrderId">Id of the omsOrder to be duplicated.</param>
        /// <returns>Task of ApiResponse (OmsOrder)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OmsOrder>> GetDuplicateOmsOrderByIdAsyncWithHttpInfo (int? omsOrderId)
        {
            // verify the required parameter 'omsOrderId' is set
            if (omsOrderId == null)
                throw new ApiException(400, "Missing required parameter 'omsOrderId' when calling OmsOrderApi->GetDuplicateOmsOrderById");

            var localVarPath = "/beta/omsOrder/duplicate/{omsOrderId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (omsOrderId != null) localVarPathParams.Add("omsOrderId", Configuration.ApiClient.ParameterToString(omsOrderId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDuplicateOmsOrderById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OmsOrder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (OmsOrder) Configuration.ApiClient.Deserialize(localVarResponse, typeof(OmsOrder)));
        }

        /// <summary>
        /// Search omsOrders by filter Returns the list of omsOrders that match the given filter.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>List&lt;OmsOrder&gt;</returns>
        public List<OmsOrder> GetOmsOrderByFilter (string filter = null, int? page = null, int? limit = null, string sort = null)
        {
             ApiResponse<List<OmsOrder>> localVarResponse = GetOmsOrderByFilterWithHttpInfo(filter, page, limit, sort);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Search omsOrders by filter Returns the list of omsOrders that match the given filter.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>ApiResponse of List&lt;OmsOrder&gt;</returns>
        public ApiResponse< List<OmsOrder> > GetOmsOrderByFilterWithHttpInfo (string filter = null, int? page = null, int? limit = null, string sort = null)
        {

            var localVarPath = "/beta/omsOrder/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (filter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (page != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOmsOrderByFilter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<OmsOrder>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<OmsOrder>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<OmsOrder>)));
        }

        /// <summary>
        /// Search omsOrders by filter Returns the list of omsOrders that match the given filter.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>Task of List&lt;OmsOrder&gt;</returns>
        public async System.Threading.Tasks.Task<List<OmsOrder>> GetOmsOrderByFilterAsync (string filter = null, int? page = null, int? limit = null, string sort = null)
        {
             ApiResponse<List<OmsOrder>> localVarResponse = await GetOmsOrderByFilterAsyncWithHttpInfo(filter, page, limit, sort);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Search omsOrders by filter Returns the list of omsOrders that match the given filter.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;OmsOrder&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<OmsOrder>>> GetOmsOrderByFilterAsyncWithHttpInfo (string filter = null, int? page = null, int? limit = null, string sort = null)
        {

            var localVarPath = "/beta/omsOrder/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (filter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (page != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOmsOrderByFilter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<OmsOrder>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<OmsOrder>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<OmsOrder>)));
        }

        /// <summary>
        /// Get an omsOrder by id Returns the omsOrder identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="omsOrderId">Id of the omsOrder to be returned.</param>
        /// <returns>OmsOrder</returns>
        public OmsOrder GetOmsOrderById (int? omsOrderId)
        {
             ApiResponse<OmsOrder> localVarResponse = GetOmsOrderByIdWithHttpInfo(omsOrderId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get an omsOrder by id Returns the omsOrder identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="omsOrderId">Id of the omsOrder to be returned.</param>
        /// <returns>ApiResponse of OmsOrder</returns>
        public ApiResponse< OmsOrder > GetOmsOrderByIdWithHttpInfo (int? omsOrderId)
        {
            // verify the required parameter 'omsOrderId' is set
            if (omsOrderId == null)
                throw new ApiException(400, "Missing required parameter 'omsOrderId' when calling OmsOrderApi->GetOmsOrderById");

            var localVarPath = "/beta/omsOrder/{omsOrderId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (omsOrderId != null) localVarPathParams.Add("omsOrderId", Configuration.ApiClient.ParameterToString(omsOrderId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOmsOrderById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OmsOrder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (OmsOrder) Configuration.ApiClient.Deserialize(localVarResponse, typeof(OmsOrder)));
        }

        /// <summary>
        /// Get an omsOrder by id Returns the omsOrder identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="omsOrderId">Id of the omsOrder to be returned.</param>
        /// <returns>Task of OmsOrder</returns>
        public async System.Threading.Tasks.Task<OmsOrder> GetOmsOrderByIdAsync (int? omsOrderId)
        {
             ApiResponse<OmsOrder> localVarResponse = await GetOmsOrderByIdAsyncWithHttpInfo(omsOrderId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get an omsOrder by id Returns the omsOrder identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="omsOrderId">Id of the omsOrder to be returned.</param>
        /// <returns>Task of ApiResponse (OmsOrder)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OmsOrder>> GetOmsOrderByIdAsyncWithHttpInfo (int? omsOrderId)
        {
            // verify the required parameter 'omsOrderId' is set
            if (omsOrderId == null)
                throw new ApiException(400, "Missing required parameter 'omsOrderId' when calling OmsOrderApi->GetOmsOrderById");

            var localVarPath = "/beta/omsOrder/{omsOrderId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (omsOrderId != null) localVarPathParams.Add("omsOrderId", Configuration.ApiClient.ParameterToString(omsOrderId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOmsOrderById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OmsOrder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (OmsOrder) Configuration.ApiClient.Deserialize(localVarResponse, typeof(OmsOrder)));
        }

        /// <summary>
        /// Get the files for an omsOrder. Get all existing omsOrder files.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="omsOrderId">Id of the omsOrder to get files for</param>
        /// <returns></returns>
        public void GetOmsOrderFiles (int? omsOrderId)
        {
             GetOmsOrderFilesWithHttpInfo(omsOrderId);
        }

        /// <summary>
        /// Get the files for an omsOrder. Get all existing omsOrder files.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="omsOrderId">Id of the omsOrder to get files for</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GetOmsOrderFilesWithHttpInfo (int? omsOrderId)
        {
            // verify the required parameter 'omsOrderId' is set
            if (omsOrderId == null)
                throw new ApiException(400, "Missing required parameter 'omsOrderId' when calling OmsOrderApi->GetOmsOrderFiles");

            var localVarPath = "/beta/omsOrder/{omsOrderId}/file";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (omsOrderId != null) localVarPathParams.Add("omsOrderId", Configuration.ApiClient.ParameterToString(omsOrderId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOmsOrderFiles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get the files for an omsOrder. Get all existing omsOrder files.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="omsOrderId">Id of the omsOrder to get files for</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetOmsOrderFilesAsync (int? omsOrderId)
        {
             await GetOmsOrderFilesAsyncWithHttpInfo(omsOrderId);

        }

        /// <summary>
        /// Get the files for an omsOrder. Get all existing omsOrder files.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="omsOrderId">Id of the omsOrder to get files for</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetOmsOrderFilesAsyncWithHttpInfo (int? omsOrderId)
        {
            // verify the required parameter 'omsOrderId' is set
            if (omsOrderId == null)
                throw new ApiException(400, "Missing required parameter 'omsOrderId' when calling OmsOrderApi->GetOmsOrderFiles");

            var localVarPath = "/beta/omsOrder/{omsOrderId}/file";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (omsOrderId != null) localVarPathParams.Add("omsOrderId", Configuration.ApiClient.ParameterToString(omsOrderId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOmsOrderFiles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get the tags for an omsOrder. Get all existing omsOrder tags.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="omsOrderId">Id of the omsOrder to get tags for</param>
        /// <returns></returns>
        public void GetOmsOrderTags (int? omsOrderId)
        {
             GetOmsOrderTagsWithHttpInfo(omsOrderId);
        }

        /// <summary>
        /// Get the tags for an omsOrder. Get all existing omsOrder tags.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="omsOrderId">Id of the omsOrder to get tags for</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GetOmsOrderTagsWithHttpInfo (int? omsOrderId)
        {
            // verify the required parameter 'omsOrderId' is set
            if (omsOrderId == null)
                throw new ApiException(400, "Missing required parameter 'omsOrderId' when calling OmsOrderApi->GetOmsOrderTags");

            var localVarPath = "/beta/omsOrder/{omsOrderId}/tag";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (omsOrderId != null) localVarPathParams.Add("omsOrderId", Configuration.ApiClient.ParameterToString(omsOrderId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOmsOrderTags", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get the tags for an omsOrder. Get all existing omsOrder tags.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="omsOrderId">Id of the omsOrder to get tags for</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetOmsOrderTagsAsync (int? omsOrderId)
        {
             await GetOmsOrderTagsAsyncWithHttpInfo(omsOrderId);

        }

        /// <summary>
        /// Get the tags for an omsOrder. Get all existing omsOrder tags.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="omsOrderId">Id of the omsOrder to get tags for</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetOmsOrderTagsAsyncWithHttpInfo (int? omsOrderId)
        {
            // verify the required parameter 'omsOrderId' is set
            if (omsOrderId == null)
                throw new ApiException(400, "Missing required parameter 'omsOrderId' when calling OmsOrderApi->GetOmsOrderTags");

            var localVarPath = "/beta/omsOrder/{omsOrderId}/tag";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (omsOrderId != null) localVarPathParams.Add("omsOrderId", Configuration.ApiClient.ParameterToString(omsOrderId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOmsOrderTags", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update an omsOrder Updates an existing omsOrder using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">OmsOrder to be updated.</param>
        /// <returns></returns>
        public void UpdateOmsOrder (OmsOrder body)
        {
             UpdateOmsOrderWithHttpInfo(body);
        }

        /// <summary>
        /// Update an omsOrder Updates an existing omsOrder using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">OmsOrder to be updated.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateOmsOrderWithHttpInfo (OmsOrder body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling OmsOrderApi->UpdateOmsOrder");

            var localVarPath = "/beta/omsOrder";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateOmsOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update an omsOrder Updates an existing omsOrder using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">OmsOrder to be updated.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateOmsOrderAsync (OmsOrder body)
        {
             await UpdateOmsOrderAsyncWithHttpInfo(body);

        }

        /// <summary>
        /// Update an omsOrder Updates an existing omsOrder using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">OmsOrder to be updated.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateOmsOrderAsyncWithHttpInfo (OmsOrder body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling OmsOrderApi->UpdateOmsOrder");

            var localVarPath = "/beta/omsOrder";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateOmsOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update an omsOrder custom fields Updates an existing omsOrder custom fields using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">OmsOrder to be updated.</param>
        /// <returns></returns>
        public void UpdateOmsOrderCustomFields (OmsOrder body)
        {
             UpdateOmsOrderCustomFieldsWithHttpInfo(body);
        }

        /// <summary>
        /// Update an omsOrder custom fields Updates an existing omsOrder custom fields using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">OmsOrder to be updated.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateOmsOrderCustomFieldsWithHttpInfo (OmsOrder body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling OmsOrderApi->UpdateOmsOrderCustomFields");

            var localVarPath = "/beta/omsOrder/customFields";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateOmsOrderCustomFields", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update an omsOrder custom fields Updates an existing omsOrder custom fields using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">OmsOrder to be updated.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateOmsOrderCustomFieldsAsync (OmsOrder body)
        {
             await UpdateOmsOrderCustomFieldsAsyncWithHttpInfo(body);

        }

        /// <summary>
        /// Update an omsOrder custom fields Updates an existing omsOrder custom fields using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">OmsOrder to be updated.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateOmsOrderCustomFieldsAsyncWithHttpInfo (OmsOrder body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling OmsOrderApi->UpdateOmsOrderCustomFields");

            var localVarPath = "/beta/omsOrder/customFields";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateOmsOrderCustomFields", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

    }
}
