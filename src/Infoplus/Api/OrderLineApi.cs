/* 
 * Infoplus API
 *
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Infoplus.Client;
using Infoplus.Model;

namespace Infoplus.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IOrderLineApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Add new audit for an orderLine
        /// </summary>
        /// <remarks>
        /// Adds an audit to an existing orderLine.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderLineId">Id of the orderLine to add an audit to</param>
        /// <param name="orderLineAudit">The audit to add</param>
        /// <returns></returns>
        void AddOrderLineAudit (int? orderLineId, string orderLineAudit);

        /// <summary>
        /// Add new audit for an orderLine
        /// </summary>
        /// <remarks>
        /// Adds an audit to an existing orderLine.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderLineId">Id of the orderLine to add an audit to</param>
        /// <param name="orderLineAudit">The audit to add</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddOrderLineAuditWithHttpInfo (int? orderLineId, string orderLineAudit);
        /// <summary>
        /// Attach a file to an orderLine
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing orderLine.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderLineId">Id of the orderLine to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns></returns>
        void AddOrderLineFile (int? orderLineId, string fileName);

        /// <summary>
        /// Attach a file to an orderLine
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing orderLine.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderLineId">Id of the orderLine to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddOrderLineFileWithHttpInfo (int? orderLineId, string fileName);
        /// <summary>
        /// Attach a file to an orderLine by URL.
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing orderLine by URL.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="orderLineId">Id of the orderLine to add an file to</param>
        /// <returns></returns>
        void AddOrderLineFileByURL (RecordFile body, int? orderLineId);

        /// <summary>
        /// Attach a file to an orderLine by URL.
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing orderLine by URL.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="orderLineId">Id of the orderLine to add an file to</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddOrderLineFileByURLWithHttpInfo (RecordFile body, int? orderLineId);
        /// <summary>
        /// Add new tags for an orderLine.
        /// </summary>
        /// <remarks>
        /// Adds a tag to an existing orderLine.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderLineId">Id of the orderLine to add a tag to</param>
        /// <param name="orderLineTag">The tag to add</param>
        /// <returns></returns>
        void AddOrderLineTag (int? orderLineId, string orderLineTag);

        /// <summary>
        /// Add new tags for an orderLine.
        /// </summary>
        /// <remarks>
        /// Adds a tag to an existing orderLine.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderLineId">Id of the orderLine to add a tag to</param>
        /// <param name="orderLineTag">The tag to add</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddOrderLineTagWithHttpInfo (int? orderLineId, string orderLineTag);
        /// <summary>
        /// Delete a file for an orderLine.
        /// </summary>
        /// <remarks>
        /// Deletes an existing orderLine file using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderLineId">Id of the orderLine to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns></returns>
        void DeleteOrderLineFile (int? orderLineId, int? fileId);

        /// <summary>
        /// Delete a file for an orderLine.
        /// </summary>
        /// <remarks>
        /// Deletes an existing orderLine file using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderLineId">Id of the orderLine to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteOrderLineFileWithHttpInfo (int? orderLineId, int? fileId);
        /// <summary>
        /// Delete a tag for an orderLine.
        /// </summary>
        /// <remarks>
        /// Deletes an existing orderLine tag using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderLineId">Id of the orderLine to remove tag from</param>
        /// <param name="orderLineTag">The tag to delete</param>
        /// <returns></returns>
        void DeleteOrderLineTag (int? orderLineId, string orderLineTag);

        /// <summary>
        /// Delete a tag for an orderLine.
        /// </summary>
        /// <remarks>
        /// Deletes an existing orderLine tag using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderLineId">Id of the orderLine to remove tag from</param>
        /// <param name="orderLineTag">The tag to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteOrderLineTagWithHttpInfo (int? orderLineId, string orderLineTag);
        /// <summary>
        /// Get a duplicated an orderLine by id
        /// </summary>
        /// <remarks>
        /// Returns a duplicated orderLine identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderLineId">Id of the orderLine to be duplicated.</param>
        /// <returns>OrderLine</returns>
        OrderLine GetDuplicateOrderLineById (int? orderLineId);

        /// <summary>
        /// Get a duplicated an orderLine by id
        /// </summary>
        /// <remarks>
        /// Returns a duplicated orderLine identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderLineId">Id of the orderLine to be duplicated.</param>
        /// <returns>ApiResponse of OrderLine</returns>
        ApiResponse<OrderLine> GetDuplicateOrderLineByIdWithHttpInfo (int? orderLineId);
        /// <summary>
        /// Search orderLines by filter
        /// </summary>
        /// <remarks>
        /// Returns the list of orderLines that match the given filter.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>List&lt;OrderLine&gt;</returns>
        List<OrderLine> GetOrderLineByFilter (string filter = null, int? page = null, int? limit = null, string sort = null);

        /// <summary>
        /// Search orderLines by filter
        /// </summary>
        /// <remarks>
        /// Returns the list of orderLines that match the given filter.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>ApiResponse of List&lt;OrderLine&gt;</returns>
        ApiResponse<List<OrderLine>> GetOrderLineByFilterWithHttpInfo (string filter = null, int? page = null, int? limit = null, string sort = null);
        /// <summary>
        /// Get an orderLine by id
        /// </summary>
        /// <remarks>
        /// Returns the orderLine identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderLineId">Id of the orderLine to be returned.</param>
        /// <returns>OrderLine</returns>
        OrderLine GetOrderLineById (int? orderLineId);

        /// <summary>
        /// Get an orderLine by id
        /// </summary>
        /// <remarks>
        /// Returns the orderLine identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderLineId">Id of the orderLine to be returned.</param>
        /// <returns>ApiResponse of OrderLine</returns>
        ApiResponse<OrderLine> GetOrderLineByIdWithHttpInfo (int? orderLineId);
        /// <summary>
        /// Get the files for an orderLine.
        /// </summary>
        /// <remarks>
        /// Get all existing orderLine files.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderLineId">Id of the orderLine to get files for</param>
        /// <returns></returns>
        void GetOrderLineFiles (int? orderLineId);

        /// <summary>
        /// Get the files for an orderLine.
        /// </summary>
        /// <remarks>
        /// Get all existing orderLine files.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderLineId">Id of the orderLine to get files for</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetOrderLineFilesWithHttpInfo (int? orderLineId);
        /// <summary>
        /// Get the tags for an orderLine.
        /// </summary>
        /// <remarks>
        /// Get all existing orderLine tags.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderLineId">Id of the orderLine to get tags for</param>
        /// <returns></returns>
        void GetOrderLineTags (int? orderLineId);

        /// <summary>
        /// Get the tags for an orderLine.
        /// </summary>
        /// <remarks>
        /// Get all existing orderLine tags.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderLineId">Id of the orderLine to get tags for</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetOrderLineTagsWithHttpInfo (int? orderLineId);
        /// <summary>
        /// Update an orderLine custom fields
        /// </summary>
        /// <remarks>
        /// Updates an existing orderLine custom fields using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">OrderLine to be updated.</param>
        /// <returns></returns>
        void UpdateOrderLineCustomFields (OrderLine body);

        /// <summary>
        /// Update an orderLine custom fields
        /// </summary>
        /// <remarks>
        /// Updates an existing orderLine custom fields using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">OrderLine to be updated.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateOrderLineCustomFieldsWithHttpInfo (OrderLine body);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Add new audit for an orderLine
        /// </summary>
        /// <remarks>
        /// Adds an audit to an existing orderLine.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderLineId">Id of the orderLine to add an audit to</param>
        /// <param name="orderLineAudit">The audit to add</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddOrderLineAuditAsync (int? orderLineId, string orderLineAudit);

        /// <summary>
        /// Add new audit for an orderLine
        /// </summary>
        /// <remarks>
        /// Adds an audit to an existing orderLine.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderLineId">Id of the orderLine to add an audit to</param>
        /// <param name="orderLineAudit">The audit to add</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddOrderLineAuditAsyncWithHttpInfo (int? orderLineId, string orderLineAudit);
        /// <summary>
        /// Attach a file to an orderLine
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing orderLine.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderLineId">Id of the orderLine to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddOrderLineFileAsync (int? orderLineId, string fileName);

        /// <summary>
        /// Attach a file to an orderLine
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing orderLine.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderLineId">Id of the orderLine to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddOrderLineFileAsyncWithHttpInfo (int? orderLineId, string fileName);
        /// <summary>
        /// Attach a file to an orderLine by URL.
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing orderLine by URL.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="orderLineId">Id of the orderLine to add an file to</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddOrderLineFileByURLAsync (RecordFile body, int? orderLineId);

        /// <summary>
        /// Attach a file to an orderLine by URL.
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing orderLine by URL.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="orderLineId">Id of the orderLine to add an file to</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddOrderLineFileByURLAsyncWithHttpInfo (RecordFile body, int? orderLineId);
        /// <summary>
        /// Add new tags for an orderLine.
        /// </summary>
        /// <remarks>
        /// Adds a tag to an existing orderLine.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderLineId">Id of the orderLine to add a tag to</param>
        /// <param name="orderLineTag">The tag to add</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddOrderLineTagAsync (int? orderLineId, string orderLineTag);

        /// <summary>
        /// Add new tags for an orderLine.
        /// </summary>
        /// <remarks>
        /// Adds a tag to an existing orderLine.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderLineId">Id of the orderLine to add a tag to</param>
        /// <param name="orderLineTag">The tag to add</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddOrderLineTagAsyncWithHttpInfo (int? orderLineId, string orderLineTag);
        /// <summary>
        /// Delete a file for an orderLine.
        /// </summary>
        /// <remarks>
        /// Deletes an existing orderLine file using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderLineId">Id of the orderLine to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteOrderLineFileAsync (int? orderLineId, int? fileId);

        /// <summary>
        /// Delete a file for an orderLine.
        /// </summary>
        /// <remarks>
        /// Deletes an existing orderLine file using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderLineId">Id of the orderLine to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteOrderLineFileAsyncWithHttpInfo (int? orderLineId, int? fileId);
        /// <summary>
        /// Delete a tag for an orderLine.
        /// </summary>
        /// <remarks>
        /// Deletes an existing orderLine tag using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderLineId">Id of the orderLine to remove tag from</param>
        /// <param name="orderLineTag">The tag to delete</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteOrderLineTagAsync (int? orderLineId, string orderLineTag);

        /// <summary>
        /// Delete a tag for an orderLine.
        /// </summary>
        /// <remarks>
        /// Deletes an existing orderLine tag using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderLineId">Id of the orderLine to remove tag from</param>
        /// <param name="orderLineTag">The tag to delete</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteOrderLineTagAsyncWithHttpInfo (int? orderLineId, string orderLineTag);
        /// <summary>
        /// Get a duplicated an orderLine by id
        /// </summary>
        /// <remarks>
        /// Returns a duplicated orderLine identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderLineId">Id of the orderLine to be duplicated.</param>
        /// <returns>Task of OrderLine</returns>
        System.Threading.Tasks.Task<OrderLine> GetDuplicateOrderLineByIdAsync (int? orderLineId);

        /// <summary>
        /// Get a duplicated an orderLine by id
        /// </summary>
        /// <remarks>
        /// Returns a duplicated orderLine identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderLineId">Id of the orderLine to be duplicated.</param>
        /// <returns>Task of ApiResponse (OrderLine)</returns>
        System.Threading.Tasks.Task<ApiResponse<OrderLine>> GetDuplicateOrderLineByIdAsyncWithHttpInfo (int? orderLineId);
        /// <summary>
        /// Search orderLines by filter
        /// </summary>
        /// <remarks>
        /// Returns the list of orderLines that match the given filter.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>Task of List&lt;OrderLine&gt;</returns>
        System.Threading.Tasks.Task<List<OrderLine>> GetOrderLineByFilterAsync (string filter = null, int? page = null, int? limit = null, string sort = null);

        /// <summary>
        /// Search orderLines by filter
        /// </summary>
        /// <remarks>
        /// Returns the list of orderLines that match the given filter.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;OrderLine&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<OrderLine>>> GetOrderLineByFilterAsyncWithHttpInfo (string filter = null, int? page = null, int? limit = null, string sort = null);
        /// <summary>
        /// Get an orderLine by id
        /// </summary>
        /// <remarks>
        /// Returns the orderLine identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderLineId">Id of the orderLine to be returned.</param>
        /// <returns>Task of OrderLine</returns>
        System.Threading.Tasks.Task<OrderLine> GetOrderLineByIdAsync (int? orderLineId);

        /// <summary>
        /// Get an orderLine by id
        /// </summary>
        /// <remarks>
        /// Returns the orderLine identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderLineId">Id of the orderLine to be returned.</param>
        /// <returns>Task of ApiResponse (OrderLine)</returns>
        System.Threading.Tasks.Task<ApiResponse<OrderLine>> GetOrderLineByIdAsyncWithHttpInfo (int? orderLineId);
        /// <summary>
        /// Get the files for an orderLine.
        /// </summary>
        /// <remarks>
        /// Get all existing orderLine files.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderLineId">Id of the orderLine to get files for</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetOrderLineFilesAsync (int? orderLineId);

        /// <summary>
        /// Get the files for an orderLine.
        /// </summary>
        /// <remarks>
        /// Get all existing orderLine files.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderLineId">Id of the orderLine to get files for</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetOrderLineFilesAsyncWithHttpInfo (int? orderLineId);
        /// <summary>
        /// Get the tags for an orderLine.
        /// </summary>
        /// <remarks>
        /// Get all existing orderLine tags.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderLineId">Id of the orderLine to get tags for</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetOrderLineTagsAsync (int? orderLineId);

        /// <summary>
        /// Get the tags for an orderLine.
        /// </summary>
        /// <remarks>
        /// Get all existing orderLine tags.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderLineId">Id of the orderLine to get tags for</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetOrderLineTagsAsyncWithHttpInfo (int? orderLineId);
        /// <summary>
        /// Update an orderLine custom fields
        /// </summary>
        /// <remarks>
        /// Updates an existing orderLine custom fields using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">OrderLine to be updated.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateOrderLineCustomFieldsAsync (OrderLine body);

        /// <summary>
        /// Update an orderLine custom fields
        /// </summary>
        /// <remarks>
        /// Updates an existing orderLine custom fields using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">OrderLine to be updated.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateOrderLineCustomFieldsAsyncWithHttpInfo (OrderLine body);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class OrderLineApi : IOrderLineApi
    {
        private Infoplus.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="OrderLineApi"/> class.
        /// </summary>
        /// <returns></returns>
        public OrderLineApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = Infoplus.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OrderLineApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public OrderLineApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Infoplus.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Infoplus.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Add new audit for an orderLine Adds an audit to an existing orderLine.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderLineId">Id of the orderLine to add an audit to</param>
        /// <param name="orderLineAudit">The audit to add</param>
        /// <returns></returns>
        public void AddOrderLineAudit (int? orderLineId, string orderLineAudit)
        {
             AddOrderLineAuditWithHttpInfo(orderLineId, orderLineAudit);
        }

        /// <summary>
        /// Add new audit for an orderLine Adds an audit to an existing orderLine.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderLineId">Id of the orderLine to add an audit to</param>
        /// <param name="orderLineAudit">The audit to add</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AddOrderLineAuditWithHttpInfo (int? orderLineId, string orderLineAudit)
        {
            // verify the required parameter 'orderLineId' is set
            if (orderLineId == null)
                throw new ApiException(400, "Missing required parameter 'orderLineId' when calling OrderLineApi->AddOrderLineAudit");
            // verify the required parameter 'orderLineAudit' is set
            if (orderLineAudit == null)
                throw new ApiException(400, "Missing required parameter 'orderLineAudit' when calling OrderLineApi->AddOrderLineAudit");

            var localVarPath = "/beta/orderLine/{orderLineId}/audit/{orderLineAudit}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orderLineId != null) localVarPathParams.Add("orderLineId", Configuration.ApiClient.ParameterToString(orderLineId)); // path parameter
            if (orderLineAudit != null) localVarPathParams.Add("orderLineAudit", Configuration.ApiClient.ParameterToString(orderLineAudit)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddOrderLineAudit", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Add new audit for an orderLine Adds an audit to an existing orderLine.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderLineId">Id of the orderLine to add an audit to</param>
        /// <param name="orderLineAudit">The audit to add</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddOrderLineAuditAsync (int? orderLineId, string orderLineAudit)
        {
             await AddOrderLineAuditAsyncWithHttpInfo(orderLineId, orderLineAudit);

        }

        /// <summary>
        /// Add new audit for an orderLine Adds an audit to an existing orderLine.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderLineId">Id of the orderLine to add an audit to</param>
        /// <param name="orderLineAudit">The audit to add</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddOrderLineAuditAsyncWithHttpInfo (int? orderLineId, string orderLineAudit)
        {
            // verify the required parameter 'orderLineId' is set
            if (orderLineId == null)
                throw new ApiException(400, "Missing required parameter 'orderLineId' when calling OrderLineApi->AddOrderLineAudit");
            // verify the required parameter 'orderLineAudit' is set
            if (orderLineAudit == null)
                throw new ApiException(400, "Missing required parameter 'orderLineAudit' when calling OrderLineApi->AddOrderLineAudit");

            var localVarPath = "/beta/orderLine/{orderLineId}/audit/{orderLineAudit}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orderLineId != null) localVarPathParams.Add("orderLineId", Configuration.ApiClient.ParameterToString(orderLineId)); // path parameter
            if (orderLineAudit != null) localVarPathParams.Add("orderLineAudit", Configuration.ApiClient.ParameterToString(orderLineAudit)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddOrderLineAudit", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Attach a file to an orderLine Adds a file to an existing orderLine.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderLineId">Id of the orderLine to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns></returns>
        public void AddOrderLineFile (int? orderLineId, string fileName)
        {
             AddOrderLineFileWithHttpInfo(orderLineId, fileName);
        }

        /// <summary>
        /// Attach a file to an orderLine Adds a file to an existing orderLine.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderLineId">Id of the orderLine to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AddOrderLineFileWithHttpInfo (int? orderLineId, string fileName)
        {
            // verify the required parameter 'orderLineId' is set
            if (orderLineId == null)
                throw new ApiException(400, "Missing required parameter 'orderLineId' when calling OrderLineApi->AddOrderLineFile");
            // verify the required parameter 'fileName' is set
            if (fileName == null)
                throw new ApiException(400, "Missing required parameter 'fileName' when calling OrderLineApi->AddOrderLineFile");

            var localVarPath = "/beta/orderLine/{orderLineId}/file/{fileName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orderLineId != null) localVarPathParams.Add("orderLineId", Configuration.ApiClient.ParameterToString(orderLineId)); // path parameter
            if (fileName != null) localVarPathParams.Add("fileName", Configuration.ApiClient.ParameterToString(fileName)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddOrderLineFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Attach a file to an orderLine Adds a file to an existing orderLine.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderLineId">Id of the orderLine to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddOrderLineFileAsync (int? orderLineId, string fileName)
        {
             await AddOrderLineFileAsyncWithHttpInfo(orderLineId, fileName);

        }

        /// <summary>
        /// Attach a file to an orderLine Adds a file to an existing orderLine.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderLineId">Id of the orderLine to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddOrderLineFileAsyncWithHttpInfo (int? orderLineId, string fileName)
        {
            // verify the required parameter 'orderLineId' is set
            if (orderLineId == null)
                throw new ApiException(400, "Missing required parameter 'orderLineId' when calling OrderLineApi->AddOrderLineFile");
            // verify the required parameter 'fileName' is set
            if (fileName == null)
                throw new ApiException(400, "Missing required parameter 'fileName' when calling OrderLineApi->AddOrderLineFile");

            var localVarPath = "/beta/orderLine/{orderLineId}/file/{fileName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orderLineId != null) localVarPathParams.Add("orderLineId", Configuration.ApiClient.ParameterToString(orderLineId)); // path parameter
            if (fileName != null) localVarPathParams.Add("fileName", Configuration.ApiClient.ParameterToString(fileName)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddOrderLineFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Attach a file to an orderLine by URL. Adds a file to an existing orderLine by URL.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="orderLineId">Id of the orderLine to add an file to</param>
        /// <returns></returns>
        public void AddOrderLineFileByURL (RecordFile body, int? orderLineId)
        {
             AddOrderLineFileByURLWithHttpInfo(body, orderLineId);
        }

        /// <summary>
        /// Attach a file to an orderLine by URL. Adds a file to an existing orderLine by URL.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="orderLineId">Id of the orderLine to add an file to</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AddOrderLineFileByURLWithHttpInfo (RecordFile body, int? orderLineId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling OrderLineApi->AddOrderLineFileByURL");
            // verify the required parameter 'orderLineId' is set
            if (orderLineId == null)
                throw new ApiException(400, "Missing required parameter 'orderLineId' when calling OrderLineApi->AddOrderLineFileByURL");

            var localVarPath = "/beta/orderLine/{orderLineId}/file";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orderLineId != null) localVarPathParams.Add("orderLineId", Configuration.ApiClient.ParameterToString(orderLineId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddOrderLineFileByURL", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Attach a file to an orderLine by URL. Adds a file to an existing orderLine by URL.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="orderLineId">Id of the orderLine to add an file to</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddOrderLineFileByURLAsync (RecordFile body, int? orderLineId)
        {
             await AddOrderLineFileByURLAsyncWithHttpInfo(body, orderLineId);

        }

        /// <summary>
        /// Attach a file to an orderLine by URL. Adds a file to an existing orderLine by URL.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="orderLineId">Id of the orderLine to add an file to</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddOrderLineFileByURLAsyncWithHttpInfo (RecordFile body, int? orderLineId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling OrderLineApi->AddOrderLineFileByURL");
            // verify the required parameter 'orderLineId' is set
            if (orderLineId == null)
                throw new ApiException(400, "Missing required parameter 'orderLineId' when calling OrderLineApi->AddOrderLineFileByURL");

            var localVarPath = "/beta/orderLine/{orderLineId}/file";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orderLineId != null) localVarPathParams.Add("orderLineId", Configuration.ApiClient.ParameterToString(orderLineId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddOrderLineFileByURL", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Add new tags for an orderLine. Adds a tag to an existing orderLine.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderLineId">Id of the orderLine to add a tag to</param>
        /// <param name="orderLineTag">The tag to add</param>
        /// <returns></returns>
        public void AddOrderLineTag (int? orderLineId, string orderLineTag)
        {
             AddOrderLineTagWithHttpInfo(orderLineId, orderLineTag);
        }

        /// <summary>
        /// Add new tags for an orderLine. Adds a tag to an existing orderLine.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderLineId">Id of the orderLine to add a tag to</param>
        /// <param name="orderLineTag">The tag to add</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AddOrderLineTagWithHttpInfo (int? orderLineId, string orderLineTag)
        {
            // verify the required parameter 'orderLineId' is set
            if (orderLineId == null)
                throw new ApiException(400, "Missing required parameter 'orderLineId' when calling OrderLineApi->AddOrderLineTag");
            // verify the required parameter 'orderLineTag' is set
            if (orderLineTag == null)
                throw new ApiException(400, "Missing required parameter 'orderLineTag' when calling OrderLineApi->AddOrderLineTag");

            var localVarPath = "/beta/orderLine/{orderLineId}/tag/{orderLineTag}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orderLineId != null) localVarPathParams.Add("orderLineId", Configuration.ApiClient.ParameterToString(orderLineId)); // path parameter
            if (orderLineTag != null) localVarPathParams.Add("orderLineTag", Configuration.ApiClient.ParameterToString(orderLineTag)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddOrderLineTag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Add new tags for an orderLine. Adds a tag to an existing orderLine.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderLineId">Id of the orderLine to add a tag to</param>
        /// <param name="orderLineTag">The tag to add</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddOrderLineTagAsync (int? orderLineId, string orderLineTag)
        {
             await AddOrderLineTagAsyncWithHttpInfo(orderLineId, orderLineTag);

        }

        /// <summary>
        /// Add new tags for an orderLine. Adds a tag to an existing orderLine.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderLineId">Id of the orderLine to add a tag to</param>
        /// <param name="orderLineTag">The tag to add</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddOrderLineTagAsyncWithHttpInfo (int? orderLineId, string orderLineTag)
        {
            // verify the required parameter 'orderLineId' is set
            if (orderLineId == null)
                throw new ApiException(400, "Missing required parameter 'orderLineId' when calling OrderLineApi->AddOrderLineTag");
            // verify the required parameter 'orderLineTag' is set
            if (orderLineTag == null)
                throw new ApiException(400, "Missing required parameter 'orderLineTag' when calling OrderLineApi->AddOrderLineTag");

            var localVarPath = "/beta/orderLine/{orderLineId}/tag/{orderLineTag}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orderLineId != null) localVarPathParams.Add("orderLineId", Configuration.ApiClient.ParameterToString(orderLineId)); // path parameter
            if (orderLineTag != null) localVarPathParams.Add("orderLineTag", Configuration.ApiClient.ParameterToString(orderLineTag)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddOrderLineTag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a file for an orderLine. Deletes an existing orderLine file using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderLineId">Id of the orderLine to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns></returns>
        public void DeleteOrderLineFile (int? orderLineId, int? fileId)
        {
             DeleteOrderLineFileWithHttpInfo(orderLineId, fileId);
        }

        /// <summary>
        /// Delete a file for an orderLine. Deletes an existing orderLine file using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderLineId">Id of the orderLine to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteOrderLineFileWithHttpInfo (int? orderLineId, int? fileId)
        {
            // verify the required parameter 'orderLineId' is set
            if (orderLineId == null)
                throw new ApiException(400, "Missing required parameter 'orderLineId' when calling OrderLineApi->DeleteOrderLineFile");
            // verify the required parameter 'fileId' is set
            if (fileId == null)
                throw new ApiException(400, "Missing required parameter 'fileId' when calling OrderLineApi->DeleteOrderLineFile");

            var localVarPath = "/beta/orderLine/{orderLineId}/file/{fileId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orderLineId != null) localVarPathParams.Add("orderLineId", Configuration.ApiClient.ParameterToString(orderLineId)); // path parameter
            if (fileId != null) localVarPathParams.Add("fileId", Configuration.ApiClient.ParameterToString(fileId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteOrderLineFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a file for an orderLine. Deletes an existing orderLine file using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderLineId">Id of the orderLine to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteOrderLineFileAsync (int? orderLineId, int? fileId)
        {
             await DeleteOrderLineFileAsyncWithHttpInfo(orderLineId, fileId);

        }

        /// <summary>
        /// Delete a file for an orderLine. Deletes an existing orderLine file using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderLineId">Id of the orderLine to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteOrderLineFileAsyncWithHttpInfo (int? orderLineId, int? fileId)
        {
            // verify the required parameter 'orderLineId' is set
            if (orderLineId == null)
                throw new ApiException(400, "Missing required parameter 'orderLineId' when calling OrderLineApi->DeleteOrderLineFile");
            // verify the required parameter 'fileId' is set
            if (fileId == null)
                throw new ApiException(400, "Missing required parameter 'fileId' when calling OrderLineApi->DeleteOrderLineFile");

            var localVarPath = "/beta/orderLine/{orderLineId}/file/{fileId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orderLineId != null) localVarPathParams.Add("orderLineId", Configuration.ApiClient.ParameterToString(orderLineId)); // path parameter
            if (fileId != null) localVarPathParams.Add("fileId", Configuration.ApiClient.ParameterToString(fileId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteOrderLineFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a tag for an orderLine. Deletes an existing orderLine tag using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderLineId">Id of the orderLine to remove tag from</param>
        /// <param name="orderLineTag">The tag to delete</param>
        /// <returns></returns>
        public void DeleteOrderLineTag (int? orderLineId, string orderLineTag)
        {
             DeleteOrderLineTagWithHttpInfo(orderLineId, orderLineTag);
        }

        /// <summary>
        /// Delete a tag for an orderLine. Deletes an existing orderLine tag using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderLineId">Id of the orderLine to remove tag from</param>
        /// <param name="orderLineTag">The tag to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteOrderLineTagWithHttpInfo (int? orderLineId, string orderLineTag)
        {
            // verify the required parameter 'orderLineId' is set
            if (orderLineId == null)
                throw new ApiException(400, "Missing required parameter 'orderLineId' when calling OrderLineApi->DeleteOrderLineTag");
            // verify the required parameter 'orderLineTag' is set
            if (orderLineTag == null)
                throw new ApiException(400, "Missing required parameter 'orderLineTag' when calling OrderLineApi->DeleteOrderLineTag");

            var localVarPath = "/beta/orderLine/{orderLineId}/tag/{orderLineTag}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orderLineId != null) localVarPathParams.Add("orderLineId", Configuration.ApiClient.ParameterToString(orderLineId)); // path parameter
            if (orderLineTag != null) localVarPathParams.Add("orderLineTag", Configuration.ApiClient.ParameterToString(orderLineTag)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteOrderLineTag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a tag for an orderLine. Deletes an existing orderLine tag using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderLineId">Id of the orderLine to remove tag from</param>
        /// <param name="orderLineTag">The tag to delete</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteOrderLineTagAsync (int? orderLineId, string orderLineTag)
        {
             await DeleteOrderLineTagAsyncWithHttpInfo(orderLineId, orderLineTag);

        }

        /// <summary>
        /// Delete a tag for an orderLine. Deletes an existing orderLine tag using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderLineId">Id of the orderLine to remove tag from</param>
        /// <param name="orderLineTag">The tag to delete</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteOrderLineTagAsyncWithHttpInfo (int? orderLineId, string orderLineTag)
        {
            // verify the required parameter 'orderLineId' is set
            if (orderLineId == null)
                throw new ApiException(400, "Missing required parameter 'orderLineId' when calling OrderLineApi->DeleteOrderLineTag");
            // verify the required parameter 'orderLineTag' is set
            if (orderLineTag == null)
                throw new ApiException(400, "Missing required parameter 'orderLineTag' when calling OrderLineApi->DeleteOrderLineTag");

            var localVarPath = "/beta/orderLine/{orderLineId}/tag/{orderLineTag}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orderLineId != null) localVarPathParams.Add("orderLineId", Configuration.ApiClient.ParameterToString(orderLineId)); // path parameter
            if (orderLineTag != null) localVarPathParams.Add("orderLineTag", Configuration.ApiClient.ParameterToString(orderLineTag)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteOrderLineTag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get a duplicated an orderLine by id Returns a duplicated orderLine identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderLineId">Id of the orderLine to be duplicated.</param>
        /// <returns>OrderLine</returns>
        public OrderLine GetDuplicateOrderLineById (int? orderLineId)
        {
             ApiResponse<OrderLine> localVarResponse = GetDuplicateOrderLineByIdWithHttpInfo(orderLineId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a duplicated an orderLine by id Returns a duplicated orderLine identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderLineId">Id of the orderLine to be duplicated.</param>
        /// <returns>ApiResponse of OrderLine</returns>
        public ApiResponse< OrderLine > GetDuplicateOrderLineByIdWithHttpInfo (int? orderLineId)
        {
            // verify the required parameter 'orderLineId' is set
            if (orderLineId == null)
                throw new ApiException(400, "Missing required parameter 'orderLineId' when calling OrderLineApi->GetDuplicateOrderLineById");

            var localVarPath = "/beta/orderLine/duplicate/{orderLineId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orderLineId != null) localVarPathParams.Add("orderLineId", Configuration.ApiClient.ParameterToString(orderLineId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDuplicateOrderLineById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OrderLine>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (OrderLine) Configuration.ApiClient.Deserialize(localVarResponse, typeof(OrderLine)));
        }

        /// <summary>
        /// Get a duplicated an orderLine by id Returns a duplicated orderLine identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderLineId">Id of the orderLine to be duplicated.</param>
        /// <returns>Task of OrderLine</returns>
        public async System.Threading.Tasks.Task<OrderLine> GetDuplicateOrderLineByIdAsync (int? orderLineId)
        {
             ApiResponse<OrderLine> localVarResponse = await GetDuplicateOrderLineByIdAsyncWithHttpInfo(orderLineId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a duplicated an orderLine by id Returns a duplicated orderLine identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderLineId">Id of the orderLine to be duplicated.</param>
        /// <returns>Task of ApiResponse (OrderLine)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OrderLine>> GetDuplicateOrderLineByIdAsyncWithHttpInfo (int? orderLineId)
        {
            // verify the required parameter 'orderLineId' is set
            if (orderLineId == null)
                throw new ApiException(400, "Missing required parameter 'orderLineId' when calling OrderLineApi->GetDuplicateOrderLineById");

            var localVarPath = "/beta/orderLine/duplicate/{orderLineId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orderLineId != null) localVarPathParams.Add("orderLineId", Configuration.ApiClient.ParameterToString(orderLineId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDuplicateOrderLineById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OrderLine>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (OrderLine) Configuration.ApiClient.Deserialize(localVarResponse, typeof(OrderLine)));
        }

        /// <summary>
        /// Search orderLines by filter Returns the list of orderLines that match the given filter.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>List&lt;OrderLine&gt;</returns>
        public List<OrderLine> GetOrderLineByFilter (string filter = null, int? page = null, int? limit = null, string sort = null)
        {
             ApiResponse<List<OrderLine>> localVarResponse = GetOrderLineByFilterWithHttpInfo(filter, page, limit, sort);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Search orderLines by filter Returns the list of orderLines that match the given filter.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>ApiResponse of List&lt;OrderLine&gt;</returns>
        public ApiResponse< List<OrderLine> > GetOrderLineByFilterWithHttpInfo (string filter = null, int? page = null, int? limit = null, string sort = null)
        {

            var localVarPath = "/beta/orderLine/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (filter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (page != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOrderLineByFilter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<OrderLine>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<OrderLine>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<OrderLine>)));
        }

        /// <summary>
        /// Search orderLines by filter Returns the list of orderLines that match the given filter.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>Task of List&lt;OrderLine&gt;</returns>
        public async System.Threading.Tasks.Task<List<OrderLine>> GetOrderLineByFilterAsync (string filter = null, int? page = null, int? limit = null, string sort = null)
        {
             ApiResponse<List<OrderLine>> localVarResponse = await GetOrderLineByFilterAsyncWithHttpInfo(filter, page, limit, sort);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Search orderLines by filter Returns the list of orderLines that match the given filter.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;OrderLine&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<OrderLine>>> GetOrderLineByFilterAsyncWithHttpInfo (string filter = null, int? page = null, int? limit = null, string sort = null)
        {

            var localVarPath = "/beta/orderLine/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (filter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (page != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOrderLineByFilter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<OrderLine>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<OrderLine>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<OrderLine>)));
        }

        /// <summary>
        /// Get an orderLine by id Returns the orderLine identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderLineId">Id of the orderLine to be returned.</param>
        /// <returns>OrderLine</returns>
        public OrderLine GetOrderLineById (int? orderLineId)
        {
             ApiResponse<OrderLine> localVarResponse = GetOrderLineByIdWithHttpInfo(orderLineId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get an orderLine by id Returns the orderLine identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderLineId">Id of the orderLine to be returned.</param>
        /// <returns>ApiResponse of OrderLine</returns>
        public ApiResponse< OrderLine > GetOrderLineByIdWithHttpInfo (int? orderLineId)
        {
            // verify the required parameter 'orderLineId' is set
            if (orderLineId == null)
                throw new ApiException(400, "Missing required parameter 'orderLineId' when calling OrderLineApi->GetOrderLineById");

            var localVarPath = "/beta/orderLine/{orderLineId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orderLineId != null) localVarPathParams.Add("orderLineId", Configuration.ApiClient.ParameterToString(orderLineId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOrderLineById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OrderLine>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (OrderLine) Configuration.ApiClient.Deserialize(localVarResponse, typeof(OrderLine)));
        }

        /// <summary>
        /// Get an orderLine by id Returns the orderLine identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderLineId">Id of the orderLine to be returned.</param>
        /// <returns>Task of OrderLine</returns>
        public async System.Threading.Tasks.Task<OrderLine> GetOrderLineByIdAsync (int? orderLineId)
        {
             ApiResponse<OrderLine> localVarResponse = await GetOrderLineByIdAsyncWithHttpInfo(orderLineId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get an orderLine by id Returns the orderLine identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderLineId">Id of the orderLine to be returned.</param>
        /// <returns>Task of ApiResponse (OrderLine)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OrderLine>> GetOrderLineByIdAsyncWithHttpInfo (int? orderLineId)
        {
            // verify the required parameter 'orderLineId' is set
            if (orderLineId == null)
                throw new ApiException(400, "Missing required parameter 'orderLineId' when calling OrderLineApi->GetOrderLineById");

            var localVarPath = "/beta/orderLine/{orderLineId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orderLineId != null) localVarPathParams.Add("orderLineId", Configuration.ApiClient.ParameterToString(orderLineId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOrderLineById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OrderLine>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (OrderLine) Configuration.ApiClient.Deserialize(localVarResponse, typeof(OrderLine)));
        }

        /// <summary>
        /// Get the files for an orderLine. Get all existing orderLine files.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderLineId">Id of the orderLine to get files for</param>
        /// <returns></returns>
        public void GetOrderLineFiles (int? orderLineId)
        {
             GetOrderLineFilesWithHttpInfo(orderLineId);
        }

        /// <summary>
        /// Get the files for an orderLine. Get all existing orderLine files.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderLineId">Id of the orderLine to get files for</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GetOrderLineFilesWithHttpInfo (int? orderLineId)
        {
            // verify the required parameter 'orderLineId' is set
            if (orderLineId == null)
                throw new ApiException(400, "Missing required parameter 'orderLineId' when calling OrderLineApi->GetOrderLineFiles");

            var localVarPath = "/beta/orderLine/{orderLineId}/file";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orderLineId != null) localVarPathParams.Add("orderLineId", Configuration.ApiClient.ParameterToString(orderLineId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOrderLineFiles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get the files for an orderLine. Get all existing orderLine files.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderLineId">Id of the orderLine to get files for</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetOrderLineFilesAsync (int? orderLineId)
        {
             await GetOrderLineFilesAsyncWithHttpInfo(orderLineId);

        }

        /// <summary>
        /// Get the files for an orderLine. Get all existing orderLine files.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderLineId">Id of the orderLine to get files for</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetOrderLineFilesAsyncWithHttpInfo (int? orderLineId)
        {
            // verify the required parameter 'orderLineId' is set
            if (orderLineId == null)
                throw new ApiException(400, "Missing required parameter 'orderLineId' when calling OrderLineApi->GetOrderLineFiles");

            var localVarPath = "/beta/orderLine/{orderLineId}/file";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orderLineId != null) localVarPathParams.Add("orderLineId", Configuration.ApiClient.ParameterToString(orderLineId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOrderLineFiles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get the tags for an orderLine. Get all existing orderLine tags.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderLineId">Id of the orderLine to get tags for</param>
        /// <returns></returns>
        public void GetOrderLineTags (int? orderLineId)
        {
             GetOrderLineTagsWithHttpInfo(orderLineId);
        }

        /// <summary>
        /// Get the tags for an orderLine. Get all existing orderLine tags.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderLineId">Id of the orderLine to get tags for</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GetOrderLineTagsWithHttpInfo (int? orderLineId)
        {
            // verify the required parameter 'orderLineId' is set
            if (orderLineId == null)
                throw new ApiException(400, "Missing required parameter 'orderLineId' when calling OrderLineApi->GetOrderLineTags");

            var localVarPath = "/beta/orderLine/{orderLineId}/tag";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orderLineId != null) localVarPathParams.Add("orderLineId", Configuration.ApiClient.ParameterToString(orderLineId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOrderLineTags", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get the tags for an orderLine. Get all existing orderLine tags.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderLineId">Id of the orderLine to get tags for</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetOrderLineTagsAsync (int? orderLineId)
        {
             await GetOrderLineTagsAsyncWithHttpInfo(orderLineId);

        }

        /// <summary>
        /// Get the tags for an orderLine. Get all existing orderLine tags.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderLineId">Id of the orderLine to get tags for</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetOrderLineTagsAsyncWithHttpInfo (int? orderLineId)
        {
            // verify the required parameter 'orderLineId' is set
            if (orderLineId == null)
                throw new ApiException(400, "Missing required parameter 'orderLineId' when calling OrderLineApi->GetOrderLineTags");

            var localVarPath = "/beta/orderLine/{orderLineId}/tag";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orderLineId != null) localVarPathParams.Add("orderLineId", Configuration.ApiClient.ParameterToString(orderLineId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOrderLineTags", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update an orderLine custom fields Updates an existing orderLine custom fields using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">OrderLine to be updated.</param>
        /// <returns></returns>
        public void UpdateOrderLineCustomFields (OrderLine body)
        {
             UpdateOrderLineCustomFieldsWithHttpInfo(body);
        }

        /// <summary>
        /// Update an orderLine custom fields Updates an existing orderLine custom fields using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">OrderLine to be updated.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateOrderLineCustomFieldsWithHttpInfo (OrderLine body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling OrderLineApi->UpdateOrderLineCustomFields");

            var localVarPath = "/beta/orderLine/customFields";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateOrderLineCustomFields", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update an orderLine custom fields Updates an existing orderLine custom fields using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">OrderLine to be updated.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateOrderLineCustomFieldsAsync (OrderLine body)
        {
             await UpdateOrderLineCustomFieldsAsyncWithHttpInfo(body);

        }

        /// <summary>
        /// Update an orderLine custom fields Updates an existing orderLine custom fields using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">OrderLine to be updated.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateOrderLineCustomFieldsAsyncWithHttpInfo (OrderLine body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling OrderLineApi->UpdateOrderLineCustomFields");

            var localVarPath = "/beta/orderLine/customFields";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateOrderLineCustomFields", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

    }
}
