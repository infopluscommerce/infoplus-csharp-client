/* 
 * Infoplus API
 *
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Infoplus.Client;
using Infoplus.Model;

namespace Infoplus.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IOrderSourceItemSetupApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create an orderSourceItemSetup
        /// </summary>
        /// <remarks>
        /// Inserts a new orderSourceItemSetup using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">OrderSourceItemSetup to be inserted.</param>
        /// <returns>OrderSourceItemSetup</returns>
        OrderSourceItemSetup AddOrderSourceItemSetup (OrderSourceItemSetup body);

        /// <summary>
        /// Create an orderSourceItemSetup
        /// </summary>
        /// <remarks>
        /// Inserts a new orderSourceItemSetup using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">OrderSourceItemSetup to be inserted.</param>
        /// <returns>ApiResponse of OrderSourceItemSetup</returns>
        ApiResponse<OrderSourceItemSetup> AddOrderSourceItemSetupWithHttpInfo (OrderSourceItemSetup body);
        /// <summary>
        /// Add new audit for an orderSourceItemSetup
        /// </summary>
        /// <remarks>
        /// Adds an audit to an existing orderSourceItemSetup.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderSourceItemSetupId">Id of the orderSourceItemSetup to add an audit to</param>
        /// <param name="orderSourceItemSetupAudit">The audit to add</param>
        /// <returns></returns>
        void AddOrderSourceItemSetupAudit (int? orderSourceItemSetupId, string orderSourceItemSetupAudit);

        /// <summary>
        /// Add new audit for an orderSourceItemSetup
        /// </summary>
        /// <remarks>
        /// Adds an audit to an existing orderSourceItemSetup.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderSourceItemSetupId">Id of the orderSourceItemSetup to add an audit to</param>
        /// <param name="orderSourceItemSetupAudit">The audit to add</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddOrderSourceItemSetupAuditWithHttpInfo (int? orderSourceItemSetupId, string orderSourceItemSetupAudit);
        /// <summary>
        /// Attach a file to an orderSourceItemSetup
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing orderSourceItemSetup.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderSourceItemSetupId">Id of the orderSourceItemSetup to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns></returns>
        void AddOrderSourceItemSetupFile (int? orderSourceItemSetupId, string fileName);

        /// <summary>
        /// Attach a file to an orderSourceItemSetup
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing orderSourceItemSetup.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderSourceItemSetupId">Id of the orderSourceItemSetup to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddOrderSourceItemSetupFileWithHttpInfo (int? orderSourceItemSetupId, string fileName);
        /// <summary>
        /// Attach a file to an orderSourceItemSetup by URL.
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing orderSourceItemSetup by URL.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="orderSourceItemSetupId">Id of the orderSourceItemSetup to add an file to</param>
        /// <returns></returns>
        void AddOrderSourceItemSetupFileByURL (RecordFile body, int? orderSourceItemSetupId);

        /// <summary>
        /// Attach a file to an orderSourceItemSetup by URL.
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing orderSourceItemSetup by URL.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="orderSourceItemSetupId">Id of the orderSourceItemSetup to add an file to</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddOrderSourceItemSetupFileByURLWithHttpInfo (RecordFile body, int? orderSourceItemSetupId);
        /// <summary>
        /// Add new tags for an orderSourceItemSetup.
        /// </summary>
        /// <remarks>
        /// Adds a tag to an existing orderSourceItemSetup.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderSourceItemSetupId">Id of the orderSourceItemSetup to add a tag to</param>
        /// <param name="orderSourceItemSetupTag">The tag to add</param>
        /// <returns></returns>
        void AddOrderSourceItemSetupTag (int? orderSourceItemSetupId, string orderSourceItemSetupTag);

        /// <summary>
        /// Add new tags for an orderSourceItemSetup.
        /// </summary>
        /// <remarks>
        /// Adds a tag to an existing orderSourceItemSetup.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderSourceItemSetupId">Id of the orderSourceItemSetup to add a tag to</param>
        /// <param name="orderSourceItemSetupTag">The tag to add</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddOrderSourceItemSetupTagWithHttpInfo (int? orderSourceItemSetupId, string orderSourceItemSetupTag);
        /// <summary>
        /// Delete an orderSourceItemSetup
        /// </summary>
        /// <remarks>
        /// Deletes the orderSourceItemSetup identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderSourceItemSetupId">Id of the orderSourceItemSetup to be deleted.</param>
        /// <returns></returns>
        void DeleteOrderSourceItemSetup (int? orderSourceItemSetupId);

        /// <summary>
        /// Delete an orderSourceItemSetup
        /// </summary>
        /// <remarks>
        /// Deletes the orderSourceItemSetup identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderSourceItemSetupId">Id of the orderSourceItemSetup to be deleted.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteOrderSourceItemSetupWithHttpInfo (int? orderSourceItemSetupId);
        /// <summary>
        /// Delete a file for an orderSourceItemSetup.
        /// </summary>
        /// <remarks>
        /// Deletes an existing orderSourceItemSetup file using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderSourceItemSetupId">Id of the orderSourceItemSetup to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns></returns>
        void DeleteOrderSourceItemSetupFile (int? orderSourceItemSetupId, int? fileId);

        /// <summary>
        /// Delete a file for an orderSourceItemSetup.
        /// </summary>
        /// <remarks>
        /// Deletes an existing orderSourceItemSetup file using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderSourceItemSetupId">Id of the orderSourceItemSetup to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteOrderSourceItemSetupFileWithHttpInfo (int? orderSourceItemSetupId, int? fileId);
        /// <summary>
        /// Delete a tag for an orderSourceItemSetup.
        /// </summary>
        /// <remarks>
        /// Deletes an existing orderSourceItemSetup tag using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderSourceItemSetupId">Id of the orderSourceItemSetup to remove tag from</param>
        /// <param name="orderSourceItemSetupTag">The tag to delete</param>
        /// <returns></returns>
        void DeleteOrderSourceItemSetupTag (int? orderSourceItemSetupId, string orderSourceItemSetupTag);

        /// <summary>
        /// Delete a tag for an orderSourceItemSetup.
        /// </summary>
        /// <remarks>
        /// Deletes an existing orderSourceItemSetup tag using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderSourceItemSetupId">Id of the orderSourceItemSetup to remove tag from</param>
        /// <param name="orderSourceItemSetupTag">The tag to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteOrderSourceItemSetupTagWithHttpInfo (int? orderSourceItemSetupId, string orderSourceItemSetupTag);
        /// <summary>
        /// Get a duplicated an orderSourceItemSetup by id
        /// </summary>
        /// <remarks>
        /// Returns a duplicated orderSourceItemSetup identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderSourceItemSetupId">Id of the orderSourceItemSetup to be duplicated.</param>
        /// <returns>OrderSourceItemSetup</returns>
        OrderSourceItemSetup GetDuplicateOrderSourceItemSetupById (int? orderSourceItemSetupId);

        /// <summary>
        /// Get a duplicated an orderSourceItemSetup by id
        /// </summary>
        /// <remarks>
        /// Returns a duplicated orderSourceItemSetup identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderSourceItemSetupId">Id of the orderSourceItemSetup to be duplicated.</param>
        /// <returns>ApiResponse of OrderSourceItemSetup</returns>
        ApiResponse<OrderSourceItemSetup> GetDuplicateOrderSourceItemSetupByIdWithHttpInfo (int? orderSourceItemSetupId);
        /// <summary>
        /// Search orderSourceItemSetups by filter
        /// </summary>
        /// <remarks>
        /// Returns the list of orderSourceItemSetups that match the given filter.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>List&lt;OrderSourceItemSetup&gt;</returns>
        List<OrderSourceItemSetup> GetOrderSourceItemSetupByFilter (string filter = null, int? page = null, int? limit = null, string sort = null);

        /// <summary>
        /// Search orderSourceItemSetups by filter
        /// </summary>
        /// <remarks>
        /// Returns the list of orderSourceItemSetups that match the given filter.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>ApiResponse of List&lt;OrderSourceItemSetup&gt;</returns>
        ApiResponse<List<OrderSourceItemSetup>> GetOrderSourceItemSetupByFilterWithHttpInfo (string filter = null, int? page = null, int? limit = null, string sort = null);
        /// <summary>
        /// Get an orderSourceItemSetup by id
        /// </summary>
        /// <remarks>
        /// Returns the orderSourceItemSetup identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderSourceItemSetupId">Id of the orderSourceItemSetup to be returned.</param>
        /// <returns>OrderSourceItemSetup</returns>
        OrderSourceItemSetup GetOrderSourceItemSetupById (int? orderSourceItemSetupId);

        /// <summary>
        /// Get an orderSourceItemSetup by id
        /// </summary>
        /// <remarks>
        /// Returns the orderSourceItemSetup identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderSourceItemSetupId">Id of the orderSourceItemSetup to be returned.</param>
        /// <returns>ApiResponse of OrderSourceItemSetup</returns>
        ApiResponse<OrderSourceItemSetup> GetOrderSourceItemSetupByIdWithHttpInfo (int? orderSourceItemSetupId);
        /// <summary>
        /// Get the files for an orderSourceItemSetup.
        /// </summary>
        /// <remarks>
        /// Get all existing orderSourceItemSetup files.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderSourceItemSetupId">Id of the orderSourceItemSetup to get files for</param>
        /// <returns></returns>
        void GetOrderSourceItemSetupFiles (int? orderSourceItemSetupId);

        /// <summary>
        /// Get the files for an orderSourceItemSetup.
        /// </summary>
        /// <remarks>
        /// Get all existing orderSourceItemSetup files.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderSourceItemSetupId">Id of the orderSourceItemSetup to get files for</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetOrderSourceItemSetupFilesWithHttpInfo (int? orderSourceItemSetupId);
        /// <summary>
        /// Get the tags for an orderSourceItemSetup.
        /// </summary>
        /// <remarks>
        /// Get all existing orderSourceItemSetup tags.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderSourceItemSetupId">Id of the orderSourceItemSetup to get tags for</param>
        /// <returns></returns>
        void GetOrderSourceItemSetupTags (int? orderSourceItemSetupId);

        /// <summary>
        /// Get the tags for an orderSourceItemSetup.
        /// </summary>
        /// <remarks>
        /// Get all existing orderSourceItemSetup tags.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderSourceItemSetupId">Id of the orderSourceItemSetup to get tags for</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetOrderSourceItemSetupTagsWithHttpInfo (int? orderSourceItemSetupId);
        /// <summary>
        /// Update an orderSourceItemSetup
        /// </summary>
        /// <remarks>
        /// Updates an existing orderSourceItemSetup using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">OrderSourceItemSetup to be updated.</param>
        /// <returns></returns>
        void UpdateOrderSourceItemSetup (OrderSourceItemSetup body);

        /// <summary>
        /// Update an orderSourceItemSetup
        /// </summary>
        /// <remarks>
        /// Updates an existing orderSourceItemSetup using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">OrderSourceItemSetup to be updated.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateOrderSourceItemSetupWithHttpInfo (OrderSourceItemSetup body);
        /// <summary>
        /// Update an orderSourceItemSetup custom fields
        /// </summary>
        /// <remarks>
        /// Updates an existing orderSourceItemSetup custom fields using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">OrderSourceItemSetup to be updated.</param>
        /// <returns></returns>
        void UpdateOrderSourceItemSetupCustomFields (OrderSourceItemSetup body);

        /// <summary>
        /// Update an orderSourceItemSetup custom fields
        /// </summary>
        /// <remarks>
        /// Updates an existing orderSourceItemSetup custom fields using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">OrderSourceItemSetup to be updated.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateOrderSourceItemSetupCustomFieldsWithHttpInfo (OrderSourceItemSetup body);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create an orderSourceItemSetup
        /// </summary>
        /// <remarks>
        /// Inserts a new orderSourceItemSetup using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">OrderSourceItemSetup to be inserted.</param>
        /// <returns>Task of OrderSourceItemSetup</returns>
        System.Threading.Tasks.Task<OrderSourceItemSetup> AddOrderSourceItemSetupAsync (OrderSourceItemSetup body);

        /// <summary>
        /// Create an orderSourceItemSetup
        /// </summary>
        /// <remarks>
        /// Inserts a new orderSourceItemSetup using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">OrderSourceItemSetup to be inserted.</param>
        /// <returns>Task of ApiResponse (OrderSourceItemSetup)</returns>
        System.Threading.Tasks.Task<ApiResponse<OrderSourceItemSetup>> AddOrderSourceItemSetupAsyncWithHttpInfo (OrderSourceItemSetup body);
        /// <summary>
        /// Add new audit for an orderSourceItemSetup
        /// </summary>
        /// <remarks>
        /// Adds an audit to an existing orderSourceItemSetup.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderSourceItemSetupId">Id of the orderSourceItemSetup to add an audit to</param>
        /// <param name="orderSourceItemSetupAudit">The audit to add</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddOrderSourceItemSetupAuditAsync (int? orderSourceItemSetupId, string orderSourceItemSetupAudit);

        /// <summary>
        /// Add new audit for an orderSourceItemSetup
        /// </summary>
        /// <remarks>
        /// Adds an audit to an existing orderSourceItemSetup.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderSourceItemSetupId">Id of the orderSourceItemSetup to add an audit to</param>
        /// <param name="orderSourceItemSetupAudit">The audit to add</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddOrderSourceItemSetupAuditAsyncWithHttpInfo (int? orderSourceItemSetupId, string orderSourceItemSetupAudit);
        /// <summary>
        /// Attach a file to an orderSourceItemSetup
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing orderSourceItemSetup.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderSourceItemSetupId">Id of the orderSourceItemSetup to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddOrderSourceItemSetupFileAsync (int? orderSourceItemSetupId, string fileName);

        /// <summary>
        /// Attach a file to an orderSourceItemSetup
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing orderSourceItemSetup.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderSourceItemSetupId">Id of the orderSourceItemSetup to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddOrderSourceItemSetupFileAsyncWithHttpInfo (int? orderSourceItemSetupId, string fileName);
        /// <summary>
        /// Attach a file to an orderSourceItemSetup by URL.
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing orderSourceItemSetup by URL.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="orderSourceItemSetupId">Id of the orderSourceItemSetup to add an file to</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddOrderSourceItemSetupFileByURLAsync (RecordFile body, int? orderSourceItemSetupId);

        /// <summary>
        /// Attach a file to an orderSourceItemSetup by URL.
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing orderSourceItemSetup by URL.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="orderSourceItemSetupId">Id of the orderSourceItemSetup to add an file to</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddOrderSourceItemSetupFileByURLAsyncWithHttpInfo (RecordFile body, int? orderSourceItemSetupId);
        /// <summary>
        /// Add new tags for an orderSourceItemSetup.
        /// </summary>
        /// <remarks>
        /// Adds a tag to an existing orderSourceItemSetup.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderSourceItemSetupId">Id of the orderSourceItemSetup to add a tag to</param>
        /// <param name="orderSourceItemSetupTag">The tag to add</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddOrderSourceItemSetupTagAsync (int? orderSourceItemSetupId, string orderSourceItemSetupTag);

        /// <summary>
        /// Add new tags for an orderSourceItemSetup.
        /// </summary>
        /// <remarks>
        /// Adds a tag to an existing orderSourceItemSetup.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderSourceItemSetupId">Id of the orderSourceItemSetup to add a tag to</param>
        /// <param name="orderSourceItemSetupTag">The tag to add</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddOrderSourceItemSetupTagAsyncWithHttpInfo (int? orderSourceItemSetupId, string orderSourceItemSetupTag);
        /// <summary>
        /// Delete an orderSourceItemSetup
        /// </summary>
        /// <remarks>
        /// Deletes the orderSourceItemSetup identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderSourceItemSetupId">Id of the orderSourceItemSetup to be deleted.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteOrderSourceItemSetupAsync (int? orderSourceItemSetupId);

        /// <summary>
        /// Delete an orderSourceItemSetup
        /// </summary>
        /// <remarks>
        /// Deletes the orderSourceItemSetup identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderSourceItemSetupId">Id of the orderSourceItemSetup to be deleted.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteOrderSourceItemSetupAsyncWithHttpInfo (int? orderSourceItemSetupId);
        /// <summary>
        /// Delete a file for an orderSourceItemSetup.
        /// </summary>
        /// <remarks>
        /// Deletes an existing orderSourceItemSetup file using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderSourceItemSetupId">Id of the orderSourceItemSetup to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteOrderSourceItemSetupFileAsync (int? orderSourceItemSetupId, int? fileId);

        /// <summary>
        /// Delete a file for an orderSourceItemSetup.
        /// </summary>
        /// <remarks>
        /// Deletes an existing orderSourceItemSetup file using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderSourceItemSetupId">Id of the orderSourceItemSetup to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteOrderSourceItemSetupFileAsyncWithHttpInfo (int? orderSourceItemSetupId, int? fileId);
        /// <summary>
        /// Delete a tag for an orderSourceItemSetup.
        /// </summary>
        /// <remarks>
        /// Deletes an existing orderSourceItemSetup tag using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderSourceItemSetupId">Id of the orderSourceItemSetup to remove tag from</param>
        /// <param name="orderSourceItemSetupTag">The tag to delete</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteOrderSourceItemSetupTagAsync (int? orderSourceItemSetupId, string orderSourceItemSetupTag);

        /// <summary>
        /// Delete a tag for an orderSourceItemSetup.
        /// </summary>
        /// <remarks>
        /// Deletes an existing orderSourceItemSetup tag using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderSourceItemSetupId">Id of the orderSourceItemSetup to remove tag from</param>
        /// <param name="orderSourceItemSetupTag">The tag to delete</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteOrderSourceItemSetupTagAsyncWithHttpInfo (int? orderSourceItemSetupId, string orderSourceItemSetupTag);
        /// <summary>
        /// Get a duplicated an orderSourceItemSetup by id
        /// </summary>
        /// <remarks>
        /// Returns a duplicated orderSourceItemSetup identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderSourceItemSetupId">Id of the orderSourceItemSetup to be duplicated.</param>
        /// <returns>Task of OrderSourceItemSetup</returns>
        System.Threading.Tasks.Task<OrderSourceItemSetup> GetDuplicateOrderSourceItemSetupByIdAsync (int? orderSourceItemSetupId);

        /// <summary>
        /// Get a duplicated an orderSourceItemSetup by id
        /// </summary>
        /// <remarks>
        /// Returns a duplicated orderSourceItemSetup identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderSourceItemSetupId">Id of the orderSourceItemSetup to be duplicated.</param>
        /// <returns>Task of ApiResponse (OrderSourceItemSetup)</returns>
        System.Threading.Tasks.Task<ApiResponse<OrderSourceItemSetup>> GetDuplicateOrderSourceItemSetupByIdAsyncWithHttpInfo (int? orderSourceItemSetupId);
        /// <summary>
        /// Search orderSourceItemSetups by filter
        /// </summary>
        /// <remarks>
        /// Returns the list of orderSourceItemSetups that match the given filter.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>Task of List&lt;OrderSourceItemSetup&gt;</returns>
        System.Threading.Tasks.Task<List<OrderSourceItemSetup>> GetOrderSourceItemSetupByFilterAsync (string filter = null, int? page = null, int? limit = null, string sort = null);

        /// <summary>
        /// Search orderSourceItemSetups by filter
        /// </summary>
        /// <remarks>
        /// Returns the list of orderSourceItemSetups that match the given filter.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;OrderSourceItemSetup&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<OrderSourceItemSetup>>> GetOrderSourceItemSetupByFilterAsyncWithHttpInfo (string filter = null, int? page = null, int? limit = null, string sort = null);
        /// <summary>
        /// Get an orderSourceItemSetup by id
        /// </summary>
        /// <remarks>
        /// Returns the orderSourceItemSetup identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderSourceItemSetupId">Id of the orderSourceItemSetup to be returned.</param>
        /// <returns>Task of OrderSourceItemSetup</returns>
        System.Threading.Tasks.Task<OrderSourceItemSetup> GetOrderSourceItemSetupByIdAsync (int? orderSourceItemSetupId);

        /// <summary>
        /// Get an orderSourceItemSetup by id
        /// </summary>
        /// <remarks>
        /// Returns the orderSourceItemSetup identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderSourceItemSetupId">Id of the orderSourceItemSetup to be returned.</param>
        /// <returns>Task of ApiResponse (OrderSourceItemSetup)</returns>
        System.Threading.Tasks.Task<ApiResponse<OrderSourceItemSetup>> GetOrderSourceItemSetupByIdAsyncWithHttpInfo (int? orderSourceItemSetupId);
        /// <summary>
        /// Get the files for an orderSourceItemSetup.
        /// </summary>
        /// <remarks>
        /// Get all existing orderSourceItemSetup files.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderSourceItemSetupId">Id of the orderSourceItemSetup to get files for</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetOrderSourceItemSetupFilesAsync (int? orderSourceItemSetupId);

        /// <summary>
        /// Get the files for an orderSourceItemSetup.
        /// </summary>
        /// <remarks>
        /// Get all existing orderSourceItemSetup files.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderSourceItemSetupId">Id of the orderSourceItemSetup to get files for</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetOrderSourceItemSetupFilesAsyncWithHttpInfo (int? orderSourceItemSetupId);
        /// <summary>
        /// Get the tags for an orderSourceItemSetup.
        /// </summary>
        /// <remarks>
        /// Get all existing orderSourceItemSetup tags.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderSourceItemSetupId">Id of the orderSourceItemSetup to get tags for</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetOrderSourceItemSetupTagsAsync (int? orderSourceItemSetupId);

        /// <summary>
        /// Get the tags for an orderSourceItemSetup.
        /// </summary>
        /// <remarks>
        /// Get all existing orderSourceItemSetup tags.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderSourceItemSetupId">Id of the orderSourceItemSetup to get tags for</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetOrderSourceItemSetupTagsAsyncWithHttpInfo (int? orderSourceItemSetupId);
        /// <summary>
        /// Update an orderSourceItemSetup
        /// </summary>
        /// <remarks>
        /// Updates an existing orderSourceItemSetup using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">OrderSourceItemSetup to be updated.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateOrderSourceItemSetupAsync (OrderSourceItemSetup body);

        /// <summary>
        /// Update an orderSourceItemSetup
        /// </summary>
        /// <remarks>
        /// Updates an existing orderSourceItemSetup using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">OrderSourceItemSetup to be updated.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateOrderSourceItemSetupAsyncWithHttpInfo (OrderSourceItemSetup body);
        /// <summary>
        /// Update an orderSourceItemSetup custom fields
        /// </summary>
        /// <remarks>
        /// Updates an existing orderSourceItemSetup custom fields using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">OrderSourceItemSetup to be updated.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateOrderSourceItemSetupCustomFieldsAsync (OrderSourceItemSetup body);

        /// <summary>
        /// Update an orderSourceItemSetup custom fields
        /// </summary>
        /// <remarks>
        /// Updates an existing orderSourceItemSetup custom fields using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">OrderSourceItemSetup to be updated.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateOrderSourceItemSetupCustomFieldsAsyncWithHttpInfo (OrderSourceItemSetup body);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class OrderSourceItemSetupApi : IOrderSourceItemSetupApi
    {
        private Infoplus.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="OrderSourceItemSetupApi"/> class.
        /// </summary>
        /// <returns></returns>
        public OrderSourceItemSetupApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = Infoplus.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OrderSourceItemSetupApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public OrderSourceItemSetupApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Infoplus.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Infoplus.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create an orderSourceItemSetup Inserts a new orderSourceItemSetup using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">OrderSourceItemSetup to be inserted.</param>
        /// <returns>OrderSourceItemSetup</returns>
        public OrderSourceItemSetup AddOrderSourceItemSetup (OrderSourceItemSetup body)
        {
             ApiResponse<OrderSourceItemSetup> localVarResponse = AddOrderSourceItemSetupWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create an orderSourceItemSetup Inserts a new orderSourceItemSetup using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">OrderSourceItemSetup to be inserted.</param>
        /// <returns>ApiResponse of OrderSourceItemSetup</returns>
        public ApiResponse< OrderSourceItemSetup > AddOrderSourceItemSetupWithHttpInfo (OrderSourceItemSetup body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling OrderSourceItemSetupApi->AddOrderSourceItemSetup");

            var localVarPath = "/beta/orderSourceItemSetup";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddOrderSourceItemSetup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OrderSourceItemSetup>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (OrderSourceItemSetup) Configuration.ApiClient.Deserialize(localVarResponse, typeof(OrderSourceItemSetup)));
        }

        /// <summary>
        /// Create an orderSourceItemSetup Inserts a new orderSourceItemSetup using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">OrderSourceItemSetup to be inserted.</param>
        /// <returns>Task of OrderSourceItemSetup</returns>
        public async System.Threading.Tasks.Task<OrderSourceItemSetup> AddOrderSourceItemSetupAsync (OrderSourceItemSetup body)
        {
             ApiResponse<OrderSourceItemSetup> localVarResponse = await AddOrderSourceItemSetupAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create an orderSourceItemSetup Inserts a new orderSourceItemSetup using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">OrderSourceItemSetup to be inserted.</param>
        /// <returns>Task of ApiResponse (OrderSourceItemSetup)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OrderSourceItemSetup>> AddOrderSourceItemSetupAsyncWithHttpInfo (OrderSourceItemSetup body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling OrderSourceItemSetupApi->AddOrderSourceItemSetup");

            var localVarPath = "/beta/orderSourceItemSetup";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddOrderSourceItemSetup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OrderSourceItemSetup>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (OrderSourceItemSetup) Configuration.ApiClient.Deserialize(localVarResponse, typeof(OrderSourceItemSetup)));
        }

        /// <summary>
        /// Add new audit for an orderSourceItemSetup Adds an audit to an existing orderSourceItemSetup.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderSourceItemSetupId">Id of the orderSourceItemSetup to add an audit to</param>
        /// <param name="orderSourceItemSetupAudit">The audit to add</param>
        /// <returns></returns>
        public void AddOrderSourceItemSetupAudit (int? orderSourceItemSetupId, string orderSourceItemSetupAudit)
        {
             AddOrderSourceItemSetupAuditWithHttpInfo(orderSourceItemSetupId, orderSourceItemSetupAudit);
        }

        /// <summary>
        /// Add new audit for an orderSourceItemSetup Adds an audit to an existing orderSourceItemSetup.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderSourceItemSetupId">Id of the orderSourceItemSetup to add an audit to</param>
        /// <param name="orderSourceItemSetupAudit">The audit to add</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AddOrderSourceItemSetupAuditWithHttpInfo (int? orderSourceItemSetupId, string orderSourceItemSetupAudit)
        {
            // verify the required parameter 'orderSourceItemSetupId' is set
            if (orderSourceItemSetupId == null)
                throw new ApiException(400, "Missing required parameter 'orderSourceItemSetupId' when calling OrderSourceItemSetupApi->AddOrderSourceItemSetupAudit");
            // verify the required parameter 'orderSourceItemSetupAudit' is set
            if (orderSourceItemSetupAudit == null)
                throw new ApiException(400, "Missing required parameter 'orderSourceItemSetupAudit' when calling OrderSourceItemSetupApi->AddOrderSourceItemSetupAudit");

            var localVarPath = "/beta/orderSourceItemSetup/{orderSourceItemSetupId}/audit/{orderSourceItemSetupAudit}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orderSourceItemSetupId != null) localVarPathParams.Add("orderSourceItemSetupId", Configuration.ApiClient.ParameterToString(orderSourceItemSetupId)); // path parameter
            if (orderSourceItemSetupAudit != null) localVarPathParams.Add("orderSourceItemSetupAudit", Configuration.ApiClient.ParameterToString(orderSourceItemSetupAudit)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddOrderSourceItemSetupAudit", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Add new audit for an orderSourceItemSetup Adds an audit to an existing orderSourceItemSetup.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderSourceItemSetupId">Id of the orderSourceItemSetup to add an audit to</param>
        /// <param name="orderSourceItemSetupAudit">The audit to add</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddOrderSourceItemSetupAuditAsync (int? orderSourceItemSetupId, string orderSourceItemSetupAudit)
        {
             await AddOrderSourceItemSetupAuditAsyncWithHttpInfo(orderSourceItemSetupId, orderSourceItemSetupAudit);

        }

        /// <summary>
        /// Add new audit for an orderSourceItemSetup Adds an audit to an existing orderSourceItemSetup.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderSourceItemSetupId">Id of the orderSourceItemSetup to add an audit to</param>
        /// <param name="orderSourceItemSetupAudit">The audit to add</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddOrderSourceItemSetupAuditAsyncWithHttpInfo (int? orderSourceItemSetupId, string orderSourceItemSetupAudit)
        {
            // verify the required parameter 'orderSourceItemSetupId' is set
            if (orderSourceItemSetupId == null)
                throw new ApiException(400, "Missing required parameter 'orderSourceItemSetupId' when calling OrderSourceItemSetupApi->AddOrderSourceItemSetupAudit");
            // verify the required parameter 'orderSourceItemSetupAudit' is set
            if (orderSourceItemSetupAudit == null)
                throw new ApiException(400, "Missing required parameter 'orderSourceItemSetupAudit' when calling OrderSourceItemSetupApi->AddOrderSourceItemSetupAudit");

            var localVarPath = "/beta/orderSourceItemSetup/{orderSourceItemSetupId}/audit/{orderSourceItemSetupAudit}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orderSourceItemSetupId != null) localVarPathParams.Add("orderSourceItemSetupId", Configuration.ApiClient.ParameterToString(orderSourceItemSetupId)); // path parameter
            if (orderSourceItemSetupAudit != null) localVarPathParams.Add("orderSourceItemSetupAudit", Configuration.ApiClient.ParameterToString(orderSourceItemSetupAudit)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddOrderSourceItemSetupAudit", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Attach a file to an orderSourceItemSetup Adds a file to an existing orderSourceItemSetup.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderSourceItemSetupId">Id of the orderSourceItemSetup to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns></returns>
        public void AddOrderSourceItemSetupFile (int? orderSourceItemSetupId, string fileName)
        {
             AddOrderSourceItemSetupFileWithHttpInfo(orderSourceItemSetupId, fileName);
        }

        /// <summary>
        /// Attach a file to an orderSourceItemSetup Adds a file to an existing orderSourceItemSetup.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderSourceItemSetupId">Id of the orderSourceItemSetup to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AddOrderSourceItemSetupFileWithHttpInfo (int? orderSourceItemSetupId, string fileName)
        {
            // verify the required parameter 'orderSourceItemSetupId' is set
            if (orderSourceItemSetupId == null)
                throw new ApiException(400, "Missing required parameter 'orderSourceItemSetupId' when calling OrderSourceItemSetupApi->AddOrderSourceItemSetupFile");
            // verify the required parameter 'fileName' is set
            if (fileName == null)
                throw new ApiException(400, "Missing required parameter 'fileName' when calling OrderSourceItemSetupApi->AddOrderSourceItemSetupFile");

            var localVarPath = "/beta/orderSourceItemSetup/{orderSourceItemSetupId}/file/{fileName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orderSourceItemSetupId != null) localVarPathParams.Add("orderSourceItemSetupId", Configuration.ApiClient.ParameterToString(orderSourceItemSetupId)); // path parameter
            if (fileName != null) localVarPathParams.Add("fileName", Configuration.ApiClient.ParameterToString(fileName)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddOrderSourceItemSetupFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Attach a file to an orderSourceItemSetup Adds a file to an existing orderSourceItemSetup.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderSourceItemSetupId">Id of the orderSourceItemSetup to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddOrderSourceItemSetupFileAsync (int? orderSourceItemSetupId, string fileName)
        {
             await AddOrderSourceItemSetupFileAsyncWithHttpInfo(orderSourceItemSetupId, fileName);

        }

        /// <summary>
        /// Attach a file to an orderSourceItemSetup Adds a file to an existing orderSourceItemSetup.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderSourceItemSetupId">Id of the orderSourceItemSetup to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddOrderSourceItemSetupFileAsyncWithHttpInfo (int? orderSourceItemSetupId, string fileName)
        {
            // verify the required parameter 'orderSourceItemSetupId' is set
            if (orderSourceItemSetupId == null)
                throw new ApiException(400, "Missing required parameter 'orderSourceItemSetupId' when calling OrderSourceItemSetupApi->AddOrderSourceItemSetupFile");
            // verify the required parameter 'fileName' is set
            if (fileName == null)
                throw new ApiException(400, "Missing required parameter 'fileName' when calling OrderSourceItemSetupApi->AddOrderSourceItemSetupFile");

            var localVarPath = "/beta/orderSourceItemSetup/{orderSourceItemSetupId}/file/{fileName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orderSourceItemSetupId != null) localVarPathParams.Add("orderSourceItemSetupId", Configuration.ApiClient.ParameterToString(orderSourceItemSetupId)); // path parameter
            if (fileName != null) localVarPathParams.Add("fileName", Configuration.ApiClient.ParameterToString(fileName)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddOrderSourceItemSetupFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Attach a file to an orderSourceItemSetup by URL. Adds a file to an existing orderSourceItemSetup by URL.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="orderSourceItemSetupId">Id of the orderSourceItemSetup to add an file to</param>
        /// <returns></returns>
        public void AddOrderSourceItemSetupFileByURL (RecordFile body, int? orderSourceItemSetupId)
        {
             AddOrderSourceItemSetupFileByURLWithHttpInfo(body, orderSourceItemSetupId);
        }

        /// <summary>
        /// Attach a file to an orderSourceItemSetup by URL. Adds a file to an existing orderSourceItemSetup by URL.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="orderSourceItemSetupId">Id of the orderSourceItemSetup to add an file to</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AddOrderSourceItemSetupFileByURLWithHttpInfo (RecordFile body, int? orderSourceItemSetupId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling OrderSourceItemSetupApi->AddOrderSourceItemSetupFileByURL");
            // verify the required parameter 'orderSourceItemSetupId' is set
            if (orderSourceItemSetupId == null)
                throw new ApiException(400, "Missing required parameter 'orderSourceItemSetupId' when calling OrderSourceItemSetupApi->AddOrderSourceItemSetupFileByURL");

            var localVarPath = "/beta/orderSourceItemSetup/{orderSourceItemSetupId}/file";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orderSourceItemSetupId != null) localVarPathParams.Add("orderSourceItemSetupId", Configuration.ApiClient.ParameterToString(orderSourceItemSetupId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddOrderSourceItemSetupFileByURL", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Attach a file to an orderSourceItemSetup by URL. Adds a file to an existing orderSourceItemSetup by URL.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="orderSourceItemSetupId">Id of the orderSourceItemSetup to add an file to</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddOrderSourceItemSetupFileByURLAsync (RecordFile body, int? orderSourceItemSetupId)
        {
             await AddOrderSourceItemSetupFileByURLAsyncWithHttpInfo(body, orderSourceItemSetupId);

        }

        /// <summary>
        /// Attach a file to an orderSourceItemSetup by URL. Adds a file to an existing orderSourceItemSetup by URL.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="orderSourceItemSetupId">Id of the orderSourceItemSetup to add an file to</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddOrderSourceItemSetupFileByURLAsyncWithHttpInfo (RecordFile body, int? orderSourceItemSetupId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling OrderSourceItemSetupApi->AddOrderSourceItemSetupFileByURL");
            // verify the required parameter 'orderSourceItemSetupId' is set
            if (orderSourceItemSetupId == null)
                throw new ApiException(400, "Missing required parameter 'orderSourceItemSetupId' when calling OrderSourceItemSetupApi->AddOrderSourceItemSetupFileByURL");

            var localVarPath = "/beta/orderSourceItemSetup/{orderSourceItemSetupId}/file";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orderSourceItemSetupId != null) localVarPathParams.Add("orderSourceItemSetupId", Configuration.ApiClient.ParameterToString(orderSourceItemSetupId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddOrderSourceItemSetupFileByURL", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Add new tags for an orderSourceItemSetup. Adds a tag to an existing orderSourceItemSetup.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderSourceItemSetupId">Id of the orderSourceItemSetup to add a tag to</param>
        /// <param name="orderSourceItemSetupTag">The tag to add</param>
        /// <returns></returns>
        public void AddOrderSourceItemSetupTag (int? orderSourceItemSetupId, string orderSourceItemSetupTag)
        {
             AddOrderSourceItemSetupTagWithHttpInfo(orderSourceItemSetupId, orderSourceItemSetupTag);
        }

        /// <summary>
        /// Add new tags for an orderSourceItemSetup. Adds a tag to an existing orderSourceItemSetup.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderSourceItemSetupId">Id of the orderSourceItemSetup to add a tag to</param>
        /// <param name="orderSourceItemSetupTag">The tag to add</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AddOrderSourceItemSetupTagWithHttpInfo (int? orderSourceItemSetupId, string orderSourceItemSetupTag)
        {
            // verify the required parameter 'orderSourceItemSetupId' is set
            if (orderSourceItemSetupId == null)
                throw new ApiException(400, "Missing required parameter 'orderSourceItemSetupId' when calling OrderSourceItemSetupApi->AddOrderSourceItemSetupTag");
            // verify the required parameter 'orderSourceItemSetupTag' is set
            if (orderSourceItemSetupTag == null)
                throw new ApiException(400, "Missing required parameter 'orderSourceItemSetupTag' when calling OrderSourceItemSetupApi->AddOrderSourceItemSetupTag");

            var localVarPath = "/beta/orderSourceItemSetup/{orderSourceItemSetupId}/tag/{orderSourceItemSetupTag}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orderSourceItemSetupId != null) localVarPathParams.Add("orderSourceItemSetupId", Configuration.ApiClient.ParameterToString(orderSourceItemSetupId)); // path parameter
            if (orderSourceItemSetupTag != null) localVarPathParams.Add("orderSourceItemSetupTag", Configuration.ApiClient.ParameterToString(orderSourceItemSetupTag)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddOrderSourceItemSetupTag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Add new tags for an orderSourceItemSetup. Adds a tag to an existing orderSourceItemSetup.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderSourceItemSetupId">Id of the orderSourceItemSetup to add a tag to</param>
        /// <param name="orderSourceItemSetupTag">The tag to add</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddOrderSourceItemSetupTagAsync (int? orderSourceItemSetupId, string orderSourceItemSetupTag)
        {
             await AddOrderSourceItemSetupTagAsyncWithHttpInfo(orderSourceItemSetupId, orderSourceItemSetupTag);

        }

        /// <summary>
        /// Add new tags for an orderSourceItemSetup. Adds a tag to an existing orderSourceItemSetup.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderSourceItemSetupId">Id of the orderSourceItemSetup to add a tag to</param>
        /// <param name="orderSourceItemSetupTag">The tag to add</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddOrderSourceItemSetupTagAsyncWithHttpInfo (int? orderSourceItemSetupId, string orderSourceItemSetupTag)
        {
            // verify the required parameter 'orderSourceItemSetupId' is set
            if (orderSourceItemSetupId == null)
                throw new ApiException(400, "Missing required parameter 'orderSourceItemSetupId' when calling OrderSourceItemSetupApi->AddOrderSourceItemSetupTag");
            // verify the required parameter 'orderSourceItemSetupTag' is set
            if (orderSourceItemSetupTag == null)
                throw new ApiException(400, "Missing required parameter 'orderSourceItemSetupTag' when calling OrderSourceItemSetupApi->AddOrderSourceItemSetupTag");

            var localVarPath = "/beta/orderSourceItemSetup/{orderSourceItemSetupId}/tag/{orderSourceItemSetupTag}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orderSourceItemSetupId != null) localVarPathParams.Add("orderSourceItemSetupId", Configuration.ApiClient.ParameterToString(orderSourceItemSetupId)); // path parameter
            if (orderSourceItemSetupTag != null) localVarPathParams.Add("orderSourceItemSetupTag", Configuration.ApiClient.ParameterToString(orderSourceItemSetupTag)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddOrderSourceItemSetupTag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete an orderSourceItemSetup Deletes the orderSourceItemSetup identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderSourceItemSetupId">Id of the orderSourceItemSetup to be deleted.</param>
        /// <returns></returns>
        public void DeleteOrderSourceItemSetup (int? orderSourceItemSetupId)
        {
             DeleteOrderSourceItemSetupWithHttpInfo(orderSourceItemSetupId);
        }

        /// <summary>
        /// Delete an orderSourceItemSetup Deletes the orderSourceItemSetup identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderSourceItemSetupId">Id of the orderSourceItemSetup to be deleted.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteOrderSourceItemSetupWithHttpInfo (int? orderSourceItemSetupId)
        {
            // verify the required parameter 'orderSourceItemSetupId' is set
            if (orderSourceItemSetupId == null)
                throw new ApiException(400, "Missing required parameter 'orderSourceItemSetupId' when calling OrderSourceItemSetupApi->DeleteOrderSourceItemSetup");

            var localVarPath = "/beta/orderSourceItemSetup/{orderSourceItemSetupId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orderSourceItemSetupId != null) localVarPathParams.Add("orderSourceItemSetupId", Configuration.ApiClient.ParameterToString(orderSourceItemSetupId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteOrderSourceItemSetup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete an orderSourceItemSetup Deletes the orderSourceItemSetup identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderSourceItemSetupId">Id of the orderSourceItemSetup to be deleted.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteOrderSourceItemSetupAsync (int? orderSourceItemSetupId)
        {
             await DeleteOrderSourceItemSetupAsyncWithHttpInfo(orderSourceItemSetupId);

        }

        /// <summary>
        /// Delete an orderSourceItemSetup Deletes the orderSourceItemSetup identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderSourceItemSetupId">Id of the orderSourceItemSetup to be deleted.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteOrderSourceItemSetupAsyncWithHttpInfo (int? orderSourceItemSetupId)
        {
            // verify the required parameter 'orderSourceItemSetupId' is set
            if (orderSourceItemSetupId == null)
                throw new ApiException(400, "Missing required parameter 'orderSourceItemSetupId' when calling OrderSourceItemSetupApi->DeleteOrderSourceItemSetup");

            var localVarPath = "/beta/orderSourceItemSetup/{orderSourceItemSetupId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orderSourceItemSetupId != null) localVarPathParams.Add("orderSourceItemSetupId", Configuration.ApiClient.ParameterToString(orderSourceItemSetupId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteOrderSourceItemSetup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a file for an orderSourceItemSetup. Deletes an existing orderSourceItemSetup file using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderSourceItemSetupId">Id of the orderSourceItemSetup to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns></returns>
        public void DeleteOrderSourceItemSetupFile (int? orderSourceItemSetupId, int? fileId)
        {
             DeleteOrderSourceItemSetupFileWithHttpInfo(orderSourceItemSetupId, fileId);
        }

        /// <summary>
        /// Delete a file for an orderSourceItemSetup. Deletes an existing orderSourceItemSetup file using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderSourceItemSetupId">Id of the orderSourceItemSetup to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteOrderSourceItemSetupFileWithHttpInfo (int? orderSourceItemSetupId, int? fileId)
        {
            // verify the required parameter 'orderSourceItemSetupId' is set
            if (orderSourceItemSetupId == null)
                throw new ApiException(400, "Missing required parameter 'orderSourceItemSetupId' when calling OrderSourceItemSetupApi->DeleteOrderSourceItemSetupFile");
            // verify the required parameter 'fileId' is set
            if (fileId == null)
                throw new ApiException(400, "Missing required parameter 'fileId' when calling OrderSourceItemSetupApi->DeleteOrderSourceItemSetupFile");

            var localVarPath = "/beta/orderSourceItemSetup/{orderSourceItemSetupId}/file/{fileId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orderSourceItemSetupId != null) localVarPathParams.Add("orderSourceItemSetupId", Configuration.ApiClient.ParameterToString(orderSourceItemSetupId)); // path parameter
            if (fileId != null) localVarPathParams.Add("fileId", Configuration.ApiClient.ParameterToString(fileId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteOrderSourceItemSetupFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a file for an orderSourceItemSetup. Deletes an existing orderSourceItemSetup file using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderSourceItemSetupId">Id of the orderSourceItemSetup to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteOrderSourceItemSetupFileAsync (int? orderSourceItemSetupId, int? fileId)
        {
             await DeleteOrderSourceItemSetupFileAsyncWithHttpInfo(orderSourceItemSetupId, fileId);

        }

        /// <summary>
        /// Delete a file for an orderSourceItemSetup. Deletes an existing orderSourceItemSetup file using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderSourceItemSetupId">Id of the orderSourceItemSetup to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteOrderSourceItemSetupFileAsyncWithHttpInfo (int? orderSourceItemSetupId, int? fileId)
        {
            // verify the required parameter 'orderSourceItemSetupId' is set
            if (orderSourceItemSetupId == null)
                throw new ApiException(400, "Missing required parameter 'orderSourceItemSetupId' when calling OrderSourceItemSetupApi->DeleteOrderSourceItemSetupFile");
            // verify the required parameter 'fileId' is set
            if (fileId == null)
                throw new ApiException(400, "Missing required parameter 'fileId' when calling OrderSourceItemSetupApi->DeleteOrderSourceItemSetupFile");

            var localVarPath = "/beta/orderSourceItemSetup/{orderSourceItemSetupId}/file/{fileId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orderSourceItemSetupId != null) localVarPathParams.Add("orderSourceItemSetupId", Configuration.ApiClient.ParameterToString(orderSourceItemSetupId)); // path parameter
            if (fileId != null) localVarPathParams.Add("fileId", Configuration.ApiClient.ParameterToString(fileId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteOrderSourceItemSetupFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a tag for an orderSourceItemSetup. Deletes an existing orderSourceItemSetup tag using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderSourceItemSetupId">Id of the orderSourceItemSetup to remove tag from</param>
        /// <param name="orderSourceItemSetupTag">The tag to delete</param>
        /// <returns></returns>
        public void DeleteOrderSourceItemSetupTag (int? orderSourceItemSetupId, string orderSourceItemSetupTag)
        {
             DeleteOrderSourceItemSetupTagWithHttpInfo(orderSourceItemSetupId, orderSourceItemSetupTag);
        }

        /// <summary>
        /// Delete a tag for an orderSourceItemSetup. Deletes an existing orderSourceItemSetup tag using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderSourceItemSetupId">Id of the orderSourceItemSetup to remove tag from</param>
        /// <param name="orderSourceItemSetupTag">The tag to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteOrderSourceItemSetupTagWithHttpInfo (int? orderSourceItemSetupId, string orderSourceItemSetupTag)
        {
            // verify the required parameter 'orderSourceItemSetupId' is set
            if (orderSourceItemSetupId == null)
                throw new ApiException(400, "Missing required parameter 'orderSourceItemSetupId' when calling OrderSourceItemSetupApi->DeleteOrderSourceItemSetupTag");
            // verify the required parameter 'orderSourceItemSetupTag' is set
            if (orderSourceItemSetupTag == null)
                throw new ApiException(400, "Missing required parameter 'orderSourceItemSetupTag' when calling OrderSourceItemSetupApi->DeleteOrderSourceItemSetupTag");

            var localVarPath = "/beta/orderSourceItemSetup/{orderSourceItemSetupId}/tag/{orderSourceItemSetupTag}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orderSourceItemSetupId != null) localVarPathParams.Add("orderSourceItemSetupId", Configuration.ApiClient.ParameterToString(orderSourceItemSetupId)); // path parameter
            if (orderSourceItemSetupTag != null) localVarPathParams.Add("orderSourceItemSetupTag", Configuration.ApiClient.ParameterToString(orderSourceItemSetupTag)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteOrderSourceItemSetupTag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a tag for an orderSourceItemSetup. Deletes an existing orderSourceItemSetup tag using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderSourceItemSetupId">Id of the orderSourceItemSetup to remove tag from</param>
        /// <param name="orderSourceItemSetupTag">The tag to delete</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteOrderSourceItemSetupTagAsync (int? orderSourceItemSetupId, string orderSourceItemSetupTag)
        {
             await DeleteOrderSourceItemSetupTagAsyncWithHttpInfo(orderSourceItemSetupId, orderSourceItemSetupTag);

        }

        /// <summary>
        /// Delete a tag for an orderSourceItemSetup. Deletes an existing orderSourceItemSetup tag using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderSourceItemSetupId">Id of the orderSourceItemSetup to remove tag from</param>
        /// <param name="orderSourceItemSetupTag">The tag to delete</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteOrderSourceItemSetupTagAsyncWithHttpInfo (int? orderSourceItemSetupId, string orderSourceItemSetupTag)
        {
            // verify the required parameter 'orderSourceItemSetupId' is set
            if (orderSourceItemSetupId == null)
                throw new ApiException(400, "Missing required parameter 'orderSourceItemSetupId' when calling OrderSourceItemSetupApi->DeleteOrderSourceItemSetupTag");
            // verify the required parameter 'orderSourceItemSetupTag' is set
            if (orderSourceItemSetupTag == null)
                throw new ApiException(400, "Missing required parameter 'orderSourceItemSetupTag' when calling OrderSourceItemSetupApi->DeleteOrderSourceItemSetupTag");

            var localVarPath = "/beta/orderSourceItemSetup/{orderSourceItemSetupId}/tag/{orderSourceItemSetupTag}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orderSourceItemSetupId != null) localVarPathParams.Add("orderSourceItemSetupId", Configuration.ApiClient.ParameterToString(orderSourceItemSetupId)); // path parameter
            if (orderSourceItemSetupTag != null) localVarPathParams.Add("orderSourceItemSetupTag", Configuration.ApiClient.ParameterToString(orderSourceItemSetupTag)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteOrderSourceItemSetupTag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get a duplicated an orderSourceItemSetup by id Returns a duplicated orderSourceItemSetup identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderSourceItemSetupId">Id of the orderSourceItemSetup to be duplicated.</param>
        /// <returns>OrderSourceItemSetup</returns>
        public OrderSourceItemSetup GetDuplicateOrderSourceItemSetupById (int? orderSourceItemSetupId)
        {
             ApiResponse<OrderSourceItemSetup> localVarResponse = GetDuplicateOrderSourceItemSetupByIdWithHttpInfo(orderSourceItemSetupId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a duplicated an orderSourceItemSetup by id Returns a duplicated orderSourceItemSetup identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderSourceItemSetupId">Id of the orderSourceItemSetup to be duplicated.</param>
        /// <returns>ApiResponse of OrderSourceItemSetup</returns>
        public ApiResponse< OrderSourceItemSetup > GetDuplicateOrderSourceItemSetupByIdWithHttpInfo (int? orderSourceItemSetupId)
        {
            // verify the required parameter 'orderSourceItemSetupId' is set
            if (orderSourceItemSetupId == null)
                throw new ApiException(400, "Missing required parameter 'orderSourceItemSetupId' when calling OrderSourceItemSetupApi->GetDuplicateOrderSourceItemSetupById");

            var localVarPath = "/beta/orderSourceItemSetup/duplicate/{orderSourceItemSetupId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orderSourceItemSetupId != null) localVarPathParams.Add("orderSourceItemSetupId", Configuration.ApiClient.ParameterToString(orderSourceItemSetupId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDuplicateOrderSourceItemSetupById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OrderSourceItemSetup>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (OrderSourceItemSetup) Configuration.ApiClient.Deserialize(localVarResponse, typeof(OrderSourceItemSetup)));
        }

        /// <summary>
        /// Get a duplicated an orderSourceItemSetup by id Returns a duplicated orderSourceItemSetup identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderSourceItemSetupId">Id of the orderSourceItemSetup to be duplicated.</param>
        /// <returns>Task of OrderSourceItemSetup</returns>
        public async System.Threading.Tasks.Task<OrderSourceItemSetup> GetDuplicateOrderSourceItemSetupByIdAsync (int? orderSourceItemSetupId)
        {
             ApiResponse<OrderSourceItemSetup> localVarResponse = await GetDuplicateOrderSourceItemSetupByIdAsyncWithHttpInfo(orderSourceItemSetupId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a duplicated an orderSourceItemSetup by id Returns a duplicated orderSourceItemSetup identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderSourceItemSetupId">Id of the orderSourceItemSetup to be duplicated.</param>
        /// <returns>Task of ApiResponse (OrderSourceItemSetup)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OrderSourceItemSetup>> GetDuplicateOrderSourceItemSetupByIdAsyncWithHttpInfo (int? orderSourceItemSetupId)
        {
            // verify the required parameter 'orderSourceItemSetupId' is set
            if (orderSourceItemSetupId == null)
                throw new ApiException(400, "Missing required parameter 'orderSourceItemSetupId' when calling OrderSourceItemSetupApi->GetDuplicateOrderSourceItemSetupById");

            var localVarPath = "/beta/orderSourceItemSetup/duplicate/{orderSourceItemSetupId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orderSourceItemSetupId != null) localVarPathParams.Add("orderSourceItemSetupId", Configuration.ApiClient.ParameterToString(orderSourceItemSetupId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDuplicateOrderSourceItemSetupById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OrderSourceItemSetup>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (OrderSourceItemSetup) Configuration.ApiClient.Deserialize(localVarResponse, typeof(OrderSourceItemSetup)));
        }

        /// <summary>
        /// Search orderSourceItemSetups by filter Returns the list of orderSourceItemSetups that match the given filter.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>List&lt;OrderSourceItemSetup&gt;</returns>
        public List<OrderSourceItemSetup> GetOrderSourceItemSetupByFilter (string filter = null, int? page = null, int? limit = null, string sort = null)
        {
             ApiResponse<List<OrderSourceItemSetup>> localVarResponse = GetOrderSourceItemSetupByFilterWithHttpInfo(filter, page, limit, sort);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Search orderSourceItemSetups by filter Returns the list of orderSourceItemSetups that match the given filter.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>ApiResponse of List&lt;OrderSourceItemSetup&gt;</returns>
        public ApiResponse< List<OrderSourceItemSetup> > GetOrderSourceItemSetupByFilterWithHttpInfo (string filter = null, int? page = null, int? limit = null, string sort = null)
        {

            var localVarPath = "/beta/orderSourceItemSetup/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (filter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (page != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOrderSourceItemSetupByFilter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<OrderSourceItemSetup>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<OrderSourceItemSetup>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<OrderSourceItemSetup>)));
        }

        /// <summary>
        /// Search orderSourceItemSetups by filter Returns the list of orderSourceItemSetups that match the given filter.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>Task of List&lt;OrderSourceItemSetup&gt;</returns>
        public async System.Threading.Tasks.Task<List<OrderSourceItemSetup>> GetOrderSourceItemSetupByFilterAsync (string filter = null, int? page = null, int? limit = null, string sort = null)
        {
             ApiResponse<List<OrderSourceItemSetup>> localVarResponse = await GetOrderSourceItemSetupByFilterAsyncWithHttpInfo(filter, page, limit, sort);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Search orderSourceItemSetups by filter Returns the list of orderSourceItemSetups that match the given filter.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;OrderSourceItemSetup&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<OrderSourceItemSetup>>> GetOrderSourceItemSetupByFilterAsyncWithHttpInfo (string filter = null, int? page = null, int? limit = null, string sort = null)
        {

            var localVarPath = "/beta/orderSourceItemSetup/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (filter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (page != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOrderSourceItemSetupByFilter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<OrderSourceItemSetup>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<OrderSourceItemSetup>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<OrderSourceItemSetup>)));
        }

        /// <summary>
        /// Get an orderSourceItemSetup by id Returns the orderSourceItemSetup identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderSourceItemSetupId">Id of the orderSourceItemSetup to be returned.</param>
        /// <returns>OrderSourceItemSetup</returns>
        public OrderSourceItemSetup GetOrderSourceItemSetupById (int? orderSourceItemSetupId)
        {
             ApiResponse<OrderSourceItemSetup> localVarResponse = GetOrderSourceItemSetupByIdWithHttpInfo(orderSourceItemSetupId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get an orderSourceItemSetup by id Returns the orderSourceItemSetup identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderSourceItemSetupId">Id of the orderSourceItemSetup to be returned.</param>
        /// <returns>ApiResponse of OrderSourceItemSetup</returns>
        public ApiResponse< OrderSourceItemSetup > GetOrderSourceItemSetupByIdWithHttpInfo (int? orderSourceItemSetupId)
        {
            // verify the required parameter 'orderSourceItemSetupId' is set
            if (orderSourceItemSetupId == null)
                throw new ApiException(400, "Missing required parameter 'orderSourceItemSetupId' when calling OrderSourceItemSetupApi->GetOrderSourceItemSetupById");

            var localVarPath = "/beta/orderSourceItemSetup/{orderSourceItemSetupId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orderSourceItemSetupId != null) localVarPathParams.Add("orderSourceItemSetupId", Configuration.ApiClient.ParameterToString(orderSourceItemSetupId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOrderSourceItemSetupById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OrderSourceItemSetup>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (OrderSourceItemSetup) Configuration.ApiClient.Deserialize(localVarResponse, typeof(OrderSourceItemSetup)));
        }

        /// <summary>
        /// Get an orderSourceItemSetup by id Returns the orderSourceItemSetup identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderSourceItemSetupId">Id of the orderSourceItemSetup to be returned.</param>
        /// <returns>Task of OrderSourceItemSetup</returns>
        public async System.Threading.Tasks.Task<OrderSourceItemSetup> GetOrderSourceItemSetupByIdAsync (int? orderSourceItemSetupId)
        {
             ApiResponse<OrderSourceItemSetup> localVarResponse = await GetOrderSourceItemSetupByIdAsyncWithHttpInfo(orderSourceItemSetupId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get an orderSourceItemSetup by id Returns the orderSourceItemSetup identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderSourceItemSetupId">Id of the orderSourceItemSetup to be returned.</param>
        /// <returns>Task of ApiResponse (OrderSourceItemSetup)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OrderSourceItemSetup>> GetOrderSourceItemSetupByIdAsyncWithHttpInfo (int? orderSourceItemSetupId)
        {
            // verify the required parameter 'orderSourceItemSetupId' is set
            if (orderSourceItemSetupId == null)
                throw new ApiException(400, "Missing required parameter 'orderSourceItemSetupId' when calling OrderSourceItemSetupApi->GetOrderSourceItemSetupById");

            var localVarPath = "/beta/orderSourceItemSetup/{orderSourceItemSetupId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orderSourceItemSetupId != null) localVarPathParams.Add("orderSourceItemSetupId", Configuration.ApiClient.ParameterToString(orderSourceItemSetupId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOrderSourceItemSetupById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OrderSourceItemSetup>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (OrderSourceItemSetup) Configuration.ApiClient.Deserialize(localVarResponse, typeof(OrderSourceItemSetup)));
        }

        /// <summary>
        /// Get the files for an orderSourceItemSetup. Get all existing orderSourceItemSetup files.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderSourceItemSetupId">Id of the orderSourceItemSetup to get files for</param>
        /// <returns></returns>
        public void GetOrderSourceItemSetupFiles (int? orderSourceItemSetupId)
        {
             GetOrderSourceItemSetupFilesWithHttpInfo(orderSourceItemSetupId);
        }

        /// <summary>
        /// Get the files for an orderSourceItemSetup. Get all existing orderSourceItemSetup files.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderSourceItemSetupId">Id of the orderSourceItemSetup to get files for</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GetOrderSourceItemSetupFilesWithHttpInfo (int? orderSourceItemSetupId)
        {
            // verify the required parameter 'orderSourceItemSetupId' is set
            if (orderSourceItemSetupId == null)
                throw new ApiException(400, "Missing required parameter 'orderSourceItemSetupId' when calling OrderSourceItemSetupApi->GetOrderSourceItemSetupFiles");

            var localVarPath = "/beta/orderSourceItemSetup/{orderSourceItemSetupId}/file";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orderSourceItemSetupId != null) localVarPathParams.Add("orderSourceItemSetupId", Configuration.ApiClient.ParameterToString(orderSourceItemSetupId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOrderSourceItemSetupFiles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get the files for an orderSourceItemSetup. Get all existing orderSourceItemSetup files.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderSourceItemSetupId">Id of the orderSourceItemSetup to get files for</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetOrderSourceItemSetupFilesAsync (int? orderSourceItemSetupId)
        {
             await GetOrderSourceItemSetupFilesAsyncWithHttpInfo(orderSourceItemSetupId);

        }

        /// <summary>
        /// Get the files for an orderSourceItemSetup. Get all existing orderSourceItemSetup files.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderSourceItemSetupId">Id of the orderSourceItemSetup to get files for</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetOrderSourceItemSetupFilesAsyncWithHttpInfo (int? orderSourceItemSetupId)
        {
            // verify the required parameter 'orderSourceItemSetupId' is set
            if (orderSourceItemSetupId == null)
                throw new ApiException(400, "Missing required parameter 'orderSourceItemSetupId' when calling OrderSourceItemSetupApi->GetOrderSourceItemSetupFiles");

            var localVarPath = "/beta/orderSourceItemSetup/{orderSourceItemSetupId}/file";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orderSourceItemSetupId != null) localVarPathParams.Add("orderSourceItemSetupId", Configuration.ApiClient.ParameterToString(orderSourceItemSetupId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOrderSourceItemSetupFiles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get the tags for an orderSourceItemSetup. Get all existing orderSourceItemSetup tags.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderSourceItemSetupId">Id of the orderSourceItemSetup to get tags for</param>
        /// <returns></returns>
        public void GetOrderSourceItemSetupTags (int? orderSourceItemSetupId)
        {
             GetOrderSourceItemSetupTagsWithHttpInfo(orderSourceItemSetupId);
        }

        /// <summary>
        /// Get the tags for an orderSourceItemSetup. Get all existing orderSourceItemSetup tags.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderSourceItemSetupId">Id of the orderSourceItemSetup to get tags for</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GetOrderSourceItemSetupTagsWithHttpInfo (int? orderSourceItemSetupId)
        {
            // verify the required parameter 'orderSourceItemSetupId' is set
            if (orderSourceItemSetupId == null)
                throw new ApiException(400, "Missing required parameter 'orderSourceItemSetupId' when calling OrderSourceItemSetupApi->GetOrderSourceItemSetupTags");

            var localVarPath = "/beta/orderSourceItemSetup/{orderSourceItemSetupId}/tag";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orderSourceItemSetupId != null) localVarPathParams.Add("orderSourceItemSetupId", Configuration.ApiClient.ParameterToString(orderSourceItemSetupId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOrderSourceItemSetupTags", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get the tags for an orderSourceItemSetup. Get all existing orderSourceItemSetup tags.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderSourceItemSetupId">Id of the orderSourceItemSetup to get tags for</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetOrderSourceItemSetupTagsAsync (int? orderSourceItemSetupId)
        {
             await GetOrderSourceItemSetupTagsAsyncWithHttpInfo(orderSourceItemSetupId);

        }

        /// <summary>
        /// Get the tags for an orderSourceItemSetup. Get all existing orderSourceItemSetup tags.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderSourceItemSetupId">Id of the orderSourceItemSetup to get tags for</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetOrderSourceItemSetupTagsAsyncWithHttpInfo (int? orderSourceItemSetupId)
        {
            // verify the required parameter 'orderSourceItemSetupId' is set
            if (orderSourceItemSetupId == null)
                throw new ApiException(400, "Missing required parameter 'orderSourceItemSetupId' when calling OrderSourceItemSetupApi->GetOrderSourceItemSetupTags");

            var localVarPath = "/beta/orderSourceItemSetup/{orderSourceItemSetupId}/tag";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orderSourceItemSetupId != null) localVarPathParams.Add("orderSourceItemSetupId", Configuration.ApiClient.ParameterToString(orderSourceItemSetupId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOrderSourceItemSetupTags", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update an orderSourceItemSetup Updates an existing orderSourceItemSetup using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">OrderSourceItemSetup to be updated.</param>
        /// <returns></returns>
        public void UpdateOrderSourceItemSetup (OrderSourceItemSetup body)
        {
             UpdateOrderSourceItemSetupWithHttpInfo(body);
        }

        /// <summary>
        /// Update an orderSourceItemSetup Updates an existing orderSourceItemSetup using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">OrderSourceItemSetup to be updated.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateOrderSourceItemSetupWithHttpInfo (OrderSourceItemSetup body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling OrderSourceItemSetupApi->UpdateOrderSourceItemSetup");

            var localVarPath = "/beta/orderSourceItemSetup";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateOrderSourceItemSetup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update an orderSourceItemSetup Updates an existing orderSourceItemSetup using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">OrderSourceItemSetup to be updated.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateOrderSourceItemSetupAsync (OrderSourceItemSetup body)
        {
             await UpdateOrderSourceItemSetupAsyncWithHttpInfo(body);

        }

        /// <summary>
        /// Update an orderSourceItemSetup Updates an existing orderSourceItemSetup using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">OrderSourceItemSetup to be updated.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateOrderSourceItemSetupAsyncWithHttpInfo (OrderSourceItemSetup body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling OrderSourceItemSetupApi->UpdateOrderSourceItemSetup");

            var localVarPath = "/beta/orderSourceItemSetup";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateOrderSourceItemSetup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update an orderSourceItemSetup custom fields Updates an existing orderSourceItemSetup custom fields using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">OrderSourceItemSetup to be updated.</param>
        /// <returns></returns>
        public void UpdateOrderSourceItemSetupCustomFields (OrderSourceItemSetup body)
        {
             UpdateOrderSourceItemSetupCustomFieldsWithHttpInfo(body);
        }

        /// <summary>
        /// Update an orderSourceItemSetup custom fields Updates an existing orderSourceItemSetup custom fields using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">OrderSourceItemSetup to be updated.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateOrderSourceItemSetupCustomFieldsWithHttpInfo (OrderSourceItemSetup body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling OrderSourceItemSetupApi->UpdateOrderSourceItemSetupCustomFields");

            var localVarPath = "/beta/orderSourceItemSetup/customFields";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateOrderSourceItemSetupCustomFields", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update an orderSourceItemSetup custom fields Updates an existing orderSourceItemSetup custom fields using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">OrderSourceItemSetup to be updated.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateOrderSourceItemSetupCustomFieldsAsync (OrderSourceItemSetup body)
        {
             await UpdateOrderSourceItemSetupCustomFieldsAsyncWithHttpInfo(body);

        }

        /// <summary>
        /// Update an orderSourceItemSetup custom fields Updates an existing orderSourceItemSetup custom fields using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">OrderSourceItemSetup to be updated.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateOrderSourceItemSetupCustomFieldsAsyncWithHttpInfo (OrderSourceItemSetup body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling OrderSourceItemSetupApi->UpdateOrderSourceItemSetupCustomFields");

            var localVarPath = "/beta/orderSourceItemSetup/customFields";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateOrderSourceItemSetupCustomFields", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

    }
}
