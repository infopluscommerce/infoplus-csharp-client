/* 
 * Infoplus API
 *
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Infoplus.Client;
using Infoplus.Model;

namespace Infoplus.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IOrderSourceStockStatusApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Add new audit for an orderSourceStockStatus
        /// </summary>
        /// <remarks>
        /// Adds an audit to an existing orderSourceStockStatus.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderSourceStockStatusId">Id of the orderSourceStockStatus to add an audit to</param>
        /// <param name="orderSourceStockStatusAudit">The audit to add</param>
        /// <returns></returns>
        void AddOrderSourceStockStatusAudit (int? orderSourceStockStatusId, string orderSourceStockStatusAudit);

        /// <summary>
        /// Add new audit for an orderSourceStockStatus
        /// </summary>
        /// <remarks>
        /// Adds an audit to an existing orderSourceStockStatus.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderSourceStockStatusId">Id of the orderSourceStockStatus to add an audit to</param>
        /// <param name="orderSourceStockStatusAudit">The audit to add</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddOrderSourceStockStatusAuditWithHttpInfo (int? orderSourceStockStatusId, string orderSourceStockStatusAudit);
        /// <summary>
        /// Attach a file to an orderSourceStockStatus
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing orderSourceStockStatus.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderSourceStockStatusId">Id of the orderSourceStockStatus to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns></returns>
        void AddOrderSourceStockStatusFile (int? orderSourceStockStatusId, string fileName);

        /// <summary>
        /// Attach a file to an orderSourceStockStatus
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing orderSourceStockStatus.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderSourceStockStatusId">Id of the orderSourceStockStatus to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddOrderSourceStockStatusFileWithHttpInfo (int? orderSourceStockStatusId, string fileName);
        /// <summary>
        /// Attach a file to an orderSourceStockStatus by URL.
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing orderSourceStockStatus by URL.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="orderSourceStockStatusId">Id of the orderSourceStockStatus to add an file to</param>
        /// <returns></returns>
        void AddOrderSourceStockStatusFileByURL (RecordFile body, int? orderSourceStockStatusId);

        /// <summary>
        /// Attach a file to an orderSourceStockStatus by URL.
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing orderSourceStockStatus by URL.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="orderSourceStockStatusId">Id of the orderSourceStockStatus to add an file to</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddOrderSourceStockStatusFileByURLWithHttpInfo (RecordFile body, int? orderSourceStockStatusId);
        /// <summary>
        /// Add new tags for an orderSourceStockStatus.
        /// </summary>
        /// <remarks>
        /// Adds a tag to an existing orderSourceStockStatus.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderSourceStockStatusId">Id of the orderSourceStockStatus to add a tag to</param>
        /// <param name="orderSourceStockStatusTag">The tag to add</param>
        /// <returns></returns>
        void AddOrderSourceStockStatusTag (int? orderSourceStockStatusId, string orderSourceStockStatusTag);

        /// <summary>
        /// Add new tags for an orderSourceStockStatus.
        /// </summary>
        /// <remarks>
        /// Adds a tag to an existing orderSourceStockStatus.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderSourceStockStatusId">Id of the orderSourceStockStatus to add a tag to</param>
        /// <param name="orderSourceStockStatusTag">The tag to add</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddOrderSourceStockStatusTagWithHttpInfo (int? orderSourceStockStatusId, string orderSourceStockStatusTag);
        /// <summary>
        /// Delete a file for an orderSourceStockStatus.
        /// </summary>
        /// <remarks>
        /// Deletes an existing orderSourceStockStatus file using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderSourceStockStatusId">Id of the orderSourceStockStatus to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns></returns>
        void DeleteOrderSourceStockStatusFile (int? orderSourceStockStatusId, int? fileId);

        /// <summary>
        /// Delete a file for an orderSourceStockStatus.
        /// </summary>
        /// <remarks>
        /// Deletes an existing orderSourceStockStatus file using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderSourceStockStatusId">Id of the orderSourceStockStatus to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteOrderSourceStockStatusFileWithHttpInfo (int? orderSourceStockStatusId, int? fileId);
        /// <summary>
        /// Delete a tag for an orderSourceStockStatus.
        /// </summary>
        /// <remarks>
        /// Deletes an existing orderSourceStockStatus tag using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderSourceStockStatusId">Id of the orderSourceStockStatus to remove tag from</param>
        /// <param name="orderSourceStockStatusTag">The tag to delete</param>
        /// <returns></returns>
        void DeleteOrderSourceStockStatusTag (int? orderSourceStockStatusId, string orderSourceStockStatusTag);

        /// <summary>
        /// Delete a tag for an orderSourceStockStatus.
        /// </summary>
        /// <remarks>
        /// Deletes an existing orderSourceStockStatus tag using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderSourceStockStatusId">Id of the orderSourceStockStatus to remove tag from</param>
        /// <param name="orderSourceStockStatusTag">The tag to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteOrderSourceStockStatusTagWithHttpInfo (int? orderSourceStockStatusId, string orderSourceStockStatusTag);
        /// <summary>
        /// Get a duplicated an orderSourceStockStatus by id
        /// </summary>
        /// <remarks>
        /// Returns a duplicated orderSourceStockStatus identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderSourceStockStatusId">Id of the orderSourceStockStatus to be duplicated.</param>
        /// <returns>OrderSourceStockStatus</returns>
        OrderSourceStockStatus GetDuplicateOrderSourceStockStatusById (int? orderSourceStockStatusId);

        /// <summary>
        /// Get a duplicated an orderSourceStockStatus by id
        /// </summary>
        /// <remarks>
        /// Returns a duplicated orderSourceStockStatus identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderSourceStockStatusId">Id of the orderSourceStockStatus to be duplicated.</param>
        /// <returns>ApiResponse of OrderSourceStockStatus</returns>
        ApiResponse<OrderSourceStockStatus> GetDuplicateOrderSourceStockStatusByIdWithHttpInfo (int? orderSourceStockStatusId);
        /// <summary>
        /// Search orderSourceStockStatuses by filter
        /// </summary>
        /// <remarks>
        /// Returns the list of orderSourceStockStatuses that match the given filter.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>List&lt;OrderSourceStockStatus&gt;</returns>
        List<OrderSourceStockStatus> GetOrderSourceStockStatusByFilter (string filter = null, int? page = null, int? limit = null, string sort = null);

        /// <summary>
        /// Search orderSourceStockStatuses by filter
        /// </summary>
        /// <remarks>
        /// Returns the list of orderSourceStockStatuses that match the given filter.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>ApiResponse of List&lt;OrderSourceStockStatus&gt;</returns>
        ApiResponse<List<OrderSourceStockStatus>> GetOrderSourceStockStatusByFilterWithHttpInfo (string filter = null, int? page = null, int? limit = null, string sort = null);
        /// <summary>
        /// Get an orderSourceStockStatus by id
        /// </summary>
        /// <remarks>
        /// Returns the orderSourceStockStatus identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderSourceStockStatusId">Id of the orderSourceStockStatus to be returned.</param>
        /// <returns>OrderSourceStockStatus</returns>
        OrderSourceStockStatus GetOrderSourceStockStatusById (int? orderSourceStockStatusId);

        /// <summary>
        /// Get an orderSourceStockStatus by id
        /// </summary>
        /// <remarks>
        /// Returns the orderSourceStockStatus identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderSourceStockStatusId">Id of the orderSourceStockStatus to be returned.</param>
        /// <returns>ApiResponse of OrderSourceStockStatus</returns>
        ApiResponse<OrderSourceStockStatus> GetOrderSourceStockStatusByIdWithHttpInfo (int? orderSourceStockStatusId);
        /// <summary>
        /// Get the files for an orderSourceStockStatus.
        /// </summary>
        /// <remarks>
        /// Get all existing orderSourceStockStatus files.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderSourceStockStatusId">Id of the orderSourceStockStatus to get files for</param>
        /// <returns></returns>
        void GetOrderSourceStockStatusFiles (int? orderSourceStockStatusId);

        /// <summary>
        /// Get the files for an orderSourceStockStatus.
        /// </summary>
        /// <remarks>
        /// Get all existing orderSourceStockStatus files.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderSourceStockStatusId">Id of the orderSourceStockStatus to get files for</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetOrderSourceStockStatusFilesWithHttpInfo (int? orderSourceStockStatusId);
        /// <summary>
        /// Get the tags for an orderSourceStockStatus.
        /// </summary>
        /// <remarks>
        /// Get all existing orderSourceStockStatus tags.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderSourceStockStatusId">Id of the orderSourceStockStatus to get tags for</param>
        /// <returns></returns>
        void GetOrderSourceStockStatusTags (int? orderSourceStockStatusId);

        /// <summary>
        /// Get the tags for an orderSourceStockStatus.
        /// </summary>
        /// <remarks>
        /// Get all existing orderSourceStockStatus tags.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderSourceStockStatusId">Id of the orderSourceStockStatus to get tags for</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetOrderSourceStockStatusTagsWithHttpInfo (int? orderSourceStockStatusId);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Add new audit for an orderSourceStockStatus
        /// </summary>
        /// <remarks>
        /// Adds an audit to an existing orderSourceStockStatus.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderSourceStockStatusId">Id of the orderSourceStockStatus to add an audit to</param>
        /// <param name="orderSourceStockStatusAudit">The audit to add</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddOrderSourceStockStatusAuditAsync (int? orderSourceStockStatusId, string orderSourceStockStatusAudit);

        /// <summary>
        /// Add new audit for an orderSourceStockStatus
        /// </summary>
        /// <remarks>
        /// Adds an audit to an existing orderSourceStockStatus.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderSourceStockStatusId">Id of the orderSourceStockStatus to add an audit to</param>
        /// <param name="orderSourceStockStatusAudit">The audit to add</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddOrderSourceStockStatusAuditAsyncWithHttpInfo (int? orderSourceStockStatusId, string orderSourceStockStatusAudit);
        /// <summary>
        /// Attach a file to an orderSourceStockStatus
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing orderSourceStockStatus.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderSourceStockStatusId">Id of the orderSourceStockStatus to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddOrderSourceStockStatusFileAsync (int? orderSourceStockStatusId, string fileName);

        /// <summary>
        /// Attach a file to an orderSourceStockStatus
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing orderSourceStockStatus.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderSourceStockStatusId">Id of the orderSourceStockStatus to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddOrderSourceStockStatusFileAsyncWithHttpInfo (int? orderSourceStockStatusId, string fileName);
        /// <summary>
        /// Attach a file to an orderSourceStockStatus by URL.
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing orderSourceStockStatus by URL.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="orderSourceStockStatusId">Id of the orderSourceStockStatus to add an file to</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddOrderSourceStockStatusFileByURLAsync (RecordFile body, int? orderSourceStockStatusId);

        /// <summary>
        /// Attach a file to an orderSourceStockStatus by URL.
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing orderSourceStockStatus by URL.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="orderSourceStockStatusId">Id of the orderSourceStockStatus to add an file to</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddOrderSourceStockStatusFileByURLAsyncWithHttpInfo (RecordFile body, int? orderSourceStockStatusId);
        /// <summary>
        /// Add new tags for an orderSourceStockStatus.
        /// </summary>
        /// <remarks>
        /// Adds a tag to an existing orderSourceStockStatus.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderSourceStockStatusId">Id of the orderSourceStockStatus to add a tag to</param>
        /// <param name="orderSourceStockStatusTag">The tag to add</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddOrderSourceStockStatusTagAsync (int? orderSourceStockStatusId, string orderSourceStockStatusTag);

        /// <summary>
        /// Add new tags for an orderSourceStockStatus.
        /// </summary>
        /// <remarks>
        /// Adds a tag to an existing orderSourceStockStatus.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderSourceStockStatusId">Id of the orderSourceStockStatus to add a tag to</param>
        /// <param name="orderSourceStockStatusTag">The tag to add</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddOrderSourceStockStatusTagAsyncWithHttpInfo (int? orderSourceStockStatusId, string orderSourceStockStatusTag);
        /// <summary>
        /// Delete a file for an orderSourceStockStatus.
        /// </summary>
        /// <remarks>
        /// Deletes an existing orderSourceStockStatus file using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderSourceStockStatusId">Id of the orderSourceStockStatus to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteOrderSourceStockStatusFileAsync (int? orderSourceStockStatusId, int? fileId);

        /// <summary>
        /// Delete a file for an orderSourceStockStatus.
        /// </summary>
        /// <remarks>
        /// Deletes an existing orderSourceStockStatus file using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderSourceStockStatusId">Id of the orderSourceStockStatus to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteOrderSourceStockStatusFileAsyncWithHttpInfo (int? orderSourceStockStatusId, int? fileId);
        /// <summary>
        /// Delete a tag for an orderSourceStockStatus.
        /// </summary>
        /// <remarks>
        /// Deletes an existing orderSourceStockStatus tag using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderSourceStockStatusId">Id of the orderSourceStockStatus to remove tag from</param>
        /// <param name="orderSourceStockStatusTag">The tag to delete</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteOrderSourceStockStatusTagAsync (int? orderSourceStockStatusId, string orderSourceStockStatusTag);

        /// <summary>
        /// Delete a tag for an orderSourceStockStatus.
        /// </summary>
        /// <remarks>
        /// Deletes an existing orderSourceStockStatus tag using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderSourceStockStatusId">Id of the orderSourceStockStatus to remove tag from</param>
        /// <param name="orderSourceStockStatusTag">The tag to delete</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteOrderSourceStockStatusTagAsyncWithHttpInfo (int? orderSourceStockStatusId, string orderSourceStockStatusTag);
        /// <summary>
        /// Get a duplicated an orderSourceStockStatus by id
        /// </summary>
        /// <remarks>
        /// Returns a duplicated orderSourceStockStatus identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderSourceStockStatusId">Id of the orderSourceStockStatus to be duplicated.</param>
        /// <returns>Task of OrderSourceStockStatus</returns>
        System.Threading.Tasks.Task<OrderSourceStockStatus> GetDuplicateOrderSourceStockStatusByIdAsync (int? orderSourceStockStatusId);

        /// <summary>
        /// Get a duplicated an orderSourceStockStatus by id
        /// </summary>
        /// <remarks>
        /// Returns a duplicated orderSourceStockStatus identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderSourceStockStatusId">Id of the orderSourceStockStatus to be duplicated.</param>
        /// <returns>Task of ApiResponse (OrderSourceStockStatus)</returns>
        System.Threading.Tasks.Task<ApiResponse<OrderSourceStockStatus>> GetDuplicateOrderSourceStockStatusByIdAsyncWithHttpInfo (int? orderSourceStockStatusId);
        /// <summary>
        /// Search orderSourceStockStatuses by filter
        /// </summary>
        /// <remarks>
        /// Returns the list of orderSourceStockStatuses that match the given filter.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>Task of List&lt;OrderSourceStockStatus&gt;</returns>
        System.Threading.Tasks.Task<List<OrderSourceStockStatus>> GetOrderSourceStockStatusByFilterAsync (string filter = null, int? page = null, int? limit = null, string sort = null);

        /// <summary>
        /// Search orderSourceStockStatuses by filter
        /// </summary>
        /// <remarks>
        /// Returns the list of orderSourceStockStatuses that match the given filter.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;OrderSourceStockStatus&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<OrderSourceStockStatus>>> GetOrderSourceStockStatusByFilterAsyncWithHttpInfo (string filter = null, int? page = null, int? limit = null, string sort = null);
        /// <summary>
        /// Get an orderSourceStockStatus by id
        /// </summary>
        /// <remarks>
        /// Returns the orderSourceStockStatus identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderSourceStockStatusId">Id of the orderSourceStockStatus to be returned.</param>
        /// <returns>Task of OrderSourceStockStatus</returns>
        System.Threading.Tasks.Task<OrderSourceStockStatus> GetOrderSourceStockStatusByIdAsync (int? orderSourceStockStatusId);

        /// <summary>
        /// Get an orderSourceStockStatus by id
        /// </summary>
        /// <remarks>
        /// Returns the orderSourceStockStatus identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderSourceStockStatusId">Id of the orderSourceStockStatus to be returned.</param>
        /// <returns>Task of ApiResponse (OrderSourceStockStatus)</returns>
        System.Threading.Tasks.Task<ApiResponse<OrderSourceStockStatus>> GetOrderSourceStockStatusByIdAsyncWithHttpInfo (int? orderSourceStockStatusId);
        /// <summary>
        /// Get the files for an orderSourceStockStatus.
        /// </summary>
        /// <remarks>
        /// Get all existing orderSourceStockStatus files.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderSourceStockStatusId">Id of the orderSourceStockStatus to get files for</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetOrderSourceStockStatusFilesAsync (int? orderSourceStockStatusId);

        /// <summary>
        /// Get the files for an orderSourceStockStatus.
        /// </summary>
        /// <remarks>
        /// Get all existing orderSourceStockStatus files.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderSourceStockStatusId">Id of the orderSourceStockStatus to get files for</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetOrderSourceStockStatusFilesAsyncWithHttpInfo (int? orderSourceStockStatusId);
        /// <summary>
        /// Get the tags for an orderSourceStockStatus.
        /// </summary>
        /// <remarks>
        /// Get all existing orderSourceStockStatus tags.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderSourceStockStatusId">Id of the orderSourceStockStatus to get tags for</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetOrderSourceStockStatusTagsAsync (int? orderSourceStockStatusId);

        /// <summary>
        /// Get the tags for an orderSourceStockStatus.
        /// </summary>
        /// <remarks>
        /// Get all existing orderSourceStockStatus tags.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderSourceStockStatusId">Id of the orderSourceStockStatus to get tags for</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetOrderSourceStockStatusTagsAsyncWithHttpInfo (int? orderSourceStockStatusId);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class OrderSourceStockStatusApi : IOrderSourceStockStatusApi
    {
        private Infoplus.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="OrderSourceStockStatusApi"/> class.
        /// </summary>
        /// <returns></returns>
        public OrderSourceStockStatusApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = Infoplus.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OrderSourceStockStatusApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public OrderSourceStockStatusApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Infoplus.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Infoplus.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Add new audit for an orderSourceStockStatus Adds an audit to an existing orderSourceStockStatus.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderSourceStockStatusId">Id of the orderSourceStockStatus to add an audit to</param>
        /// <param name="orderSourceStockStatusAudit">The audit to add</param>
        /// <returns></returns>
        public void AddOrderSourceStockStatusAudit (int? orderSourceStockStatusId, string orderSourceStockStatusAudit)
        {
             AddOrderSourceStockStatusAuditWithHttpInfo(orderSourceStockStatusId, orderSourceStockStatusAudit);
        }

        /// <summary>
        /// Add new audit for an orderSourceStockStatus Adds an audit to an existing orderSourceStockStatus.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderSourceStockStatusId">Id of the orderSourceStockStatus to add an audit to</param>
        /// <param name="orderSourceStockStatusAudit">The audit to add</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AddOrderSourceStockStatusAuditWithHttpInfo (int? orderSourceStockStatusId, string orderSourceStockStatusAudit)
        {
            // verify the required parameter 'orderSourceStockStatusId' is set
            if (orderSourceStockStatusId == null)
                throw new ApiException(400, "Missing required parameter 'orderSourceStockStatusId' when calling OrderSourceStockStatusApi->AddOrderSourceStockStatusAudit");
            // verify the required parameter 'orderSourceStockStatusAudit' is set
            if (orderSourceStockStatusAudit == null)
                throw new ApiException(400, "Missing required parameter 'orderSourceStockStatusAudit' when calling OrderSourceStockStatusApi->AddOrderSourceStockStatusAudit");

            var localVarPath = "/beta/orderSourceStockStatus/{orderSourceStockStatusId}/audit/{orderSourceStockStatusAudit}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orderSourceStockStatusId != null) localVarPathParams.Add("orderSourceStockStatusId", Configuration.ApiClient.ParameterToString(orderSourceStockStatusId)); // path parameter
            if (orderSourceStockStatusAudit != null) localVarPathParams.Add("orderSourceStockStatusAudit", Configuration.ApiClient.ParameterToString(orderSourceStockStatusAudit)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddOrderSourceStockStatusAudit", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Add new audit for an orderSourceStockStatus Adds an audit to an existing orderSourceStockStatus.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderSourceStockStatusId">Id of the orderSourceStockStatus to add an audit to</param>
        /// <param name="orderSourceStockStatusAudit">The audit to add</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddOrderSourceStockStatusAuditAsync (int? orderSourceStockStatusId, string orderSourceStockStatusAudit)
        {
             await AddOrderSourceStockStatusAuditAsyncWithHttpInfo(orderSourceStockStatusId, orderSourceStockStatusAudit);

        }

        /// <summary>
        /// Add new audit for an orderSourceStockStatus Adds an audit to an existing orderSourceStockStatus.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderSourceStockStatusId">Id of the orderSourceStockStatus to add an audit to</param>
        /// <param name="orderSourceStockStatusAudit">The audit to add</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddOrderSourceStockStatusAuditAsyncWithHttpInfo (int? orderSourceStockStatusId, string orderSourceStockStatusAudit)
        {
            // verify the required parameter 'orderSourceStockStatusId' is set
            if (orderSourceStockStatusId == null)
                throw new ApiException(400, "Missing required parameter 'orderSourceStockStatusId' when calling OrderSourceStockStatusApi->AddOrderSourceStockStatusAudit");
            // verify the required parameter 'orderSourceStockStatusAudit' is set
            if (orderSourceStockStatusAudit == null)
                throw new ApiException(400, "Missing required parameter 'orderSourceStockStatusAudit' when calling OrderSourceStockStatusApi->AddOrderSourceStockStatusAudit");

            var localVarPath = "/beta/orderSourceStockStatus/{orderSourceStockStatusId}/audit/{orderSourceStockStatusAudit}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orderSourceStockStatusId != null) localVarPathParams.Add("orderSourceStockStatusId", Configuration.ApiClient.ParameterToString(orderSourceStockStatusId)); // path parameter
            if (orderSourceStockStatusAudit != null) localVarPathParams.Add("orderSourceStockStatusAudit", Configuration.ApiClient.ParameterToString(orderSourceStockStatusAudit)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddOrderSourceStockStatusAudit", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Attach a file to an orderSourceStockStatus Adds a file to an existing orderSourceStockStatus.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderSourceStockStatusId">Id of the orderSourceStockStatus to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns></returns>
        public void AddOrderSourceStockStatusFile (int? orderSourceStockStatusId, string fileName)
        {
             AddOrderSourceStockStatusFileWithHttpInfo(orderSourceStockStatusId, fileName);
        }

        /// <summary>
        /// Attach a file to an orderSourceStockStatus Adds a file to an existing orderSourceStockStatus.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderSourceStockStatusId">Id of the orderSourceStockStatus to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AddOrderSourceStockStatusFileWithHttpInfo (int? orderSourceStockStatusId, string fileName)
        {
            // verify the required parameter 'orderSourceStockStatusId' is set
            if (orderSourceStockStatusId == null)
                throw new ApiException(400, "Missing required parameter 'orderSourceStockStatusId' when calling OrderSourceStockStatusApi->AddOrderSourceStockStatusFile");
            // verify the required parameter 'fileName' is set
            if (fileName == null)
                throw new ApiException(400, "Missing required parameter 'fileName' when calling OrderSourceStockStatusApi->AddOrderSourceStockStatusFile");

            var localVarPath = "/beta/orderSourceStockStatus/{orderSourceStockStatusId}/file/{fileName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orderSourceStockStatusId != null) localVarPathParams.Add("orderSourceStockStatusId", Configuration.ApiClient.ParameterToString(orderSourceStockStatusId)); // path parameter
            if (fileName != null) localVarPathParams.Add("fileName", Configuration.ApiClient.ParameterToString(fileName)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddOrderSourceStockStatusFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Attach a file to an orderSourceStockStatus Adds a file to an existing orderSourceStockStatus.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderSourceStockStatusId">Id of the orderSourceStockStatus to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddOrderSourceStockStatusFileAsync (int? orderSourceStockStatusId, string fileName)
        {
             await AddOrderSourceStockStatusFileAsyncWithHttpInfo(orderSourceStockStatusId, fileName);

        }

        /// <summary>
        /// Attach a file to an orderSourceStockStatus Adds a file to an existing orderSourceStockStatus.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderSourceStockStatusId">Id of the orderSourceStockStatus to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddOrderSourceStockStatusFileAsyncWithHttpInfo (int? orderSourceStockStatusId, string fileName)
        {
            // verify the required parameter 'orderSourceStockStatusId' is set
            if (orderSourceStockStatusId == null)
                throw new ApiException(400, "Missing required parameter 'orderSourceStockStatusId' when calling OrderSourceStockStatusApi->AddOrderSourceStockStatusFile");
            // verify the required parameter 'fileName' is set
            if (fileName == null)
                throw new ApiException(400, "Missing required parameter 'fileName' when calling OrderSourceStockStatusApi->AddOrderSourceStockStatusFile");

            var localVarPath = "/beta/orderSourceStockStatus/{orderSourceStockStatusId}/file/{fileName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orderSourceStockStatusId != null) localVarPathParams.Add("orderSourceStockStatusId", Configuration.ApiClient.ParameterToString(orderSourceStockStatusId)); // path parameter
            if (fileName != null) localVarPathParams.Add("fileName", Configuration.ApiClient.ParameterToString(fileName)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddOrderSourceStockStatusFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Attach a file to an orderSourceStockStatus by URL. Adds a file to an existing orderSourceStockStatus by URL.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="orderSourceStockStatusId">Id of the orderSourceStockStatus to add an file to</param>
        /// <returns></returns>
        public void AddOrderSourceStockStatusFileByURL (RecordFile body, int? orderSourceStockStatusId)
        {
             AddOrderSourceStockStatusFileByURLWithHttpInfo(body, orderSourceStockStatusId);
        }

        /// <summary>
        /// Attach a file to an orderSourceStockStatus by URL. Adds a file to an existing orderSourceStockStatus by URL.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="orderSourceStockStatusId">Id of the orderSourceStockStatus to add an file to</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AddOrderSourceStockStatusFileByURLWithHttpInfo (RecordFile body, int? orderSourceStockStatusId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling OrderSourceStockStatusApi->AddOrderSourceStockStatusFileByURL");
            // verify the required parameter 'orderSourceStockStatusId' is set
            if (orderSourceStockStatusId == null)
                throw new ApiException(400, "Missing required parameter 'orderSourceStockStatusId' when calling OrderSourceStockStatusApi->AddOrderSourceStockStatusFileByURL");

            var localVarPath = "/beta/orderSourceStockStatus/{orderSourceStockStatusId}/file";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orderSourceStockStatusId != null) localVarPathParams.Add("orderSourceStockStatusId", Configuration.ApiClient.ParameterToString(orderSourceStockStatusId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddOrderSourceStockStatusFileByURL", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Attach a file to an orderSourceStockStatus by URL. Adds a file to an existing orderSourceStockStatus by URL.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="orderSourceStockStatusId">Id of the orderSourceStockStatus to add an file to</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddOrderSourceStockStatusFileByURLAsync (RecordFile body, int? orderSourceStockStatusId)
        {
             await AddOrderSourceStockStatusFileByURLAsyncWithHttpInfo(body, orderSourceStockStatusId);

        }

        /// <summary>
        /// Attach a file to an orderSourceStockStatus by URL. Adds a file to an existing orderSourceStockStatus by URL.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="orderSourceStockStatusId">Id of the orderSourceStockStatus to add an file to</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddOrderSourceStockStatusFileByURLAsyncWithHttpInfo (RecordFile body, int? orderSourceStockStatusId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling OrderSourceStockStatusApi->AddOrderSourceStockStatusFileByURL");
            // verify the required parameter 'orderSourceStockStatusId' is set
            if (orderSourceStockStatusId == null)
                throw new ApiException(400, "Missing required parameter 'orderSourceStockStatusId' when calling OrderSourceStockStatusApi->AddOrderSourceStockStatusFileByURL");

            var localVarPath = "/beta/orderSourceStockStatus/{orderSourceStockStatusId}/file";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orderSourceStockStatusId != null) localVarPathParams.Add("orderSourceStockStatusId", Configuration.ApiClient.ParameterToString(orderSourceStockStatusId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddOrderSourceStockStatusFileByURL", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Add new tags for an orderSourceStockStatus. Adds a tag to an existing orderSourceStockStatus.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderSourceStockStatusId">Id of the orderSourceStockStatus to add a tag to</param>
        /// <param name="orderSourceStockStatusTag">The tag to add</param>
        /// <returns></returns>
        public void AddOrderSourceStockStatusTag (int? orderSourceStockStatusId, string orderSourceStockStatusTag)
        {
             AddOrderSourceStockStatusTagWithHttpInfo(orderSourceStockStatusId, orderSourceStockStatusTag);
        }

        /// <summary>
        /// Add new tags for an orderSourceStockStatus. Adds a tag to an existing orderSourceStockStatus.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderSourceStockStatusId">Id of the orderSourceStockStatus to add a tag to</param>
        /// <param name="orderSourceStockStatusTag">The tag to add</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AddOrderSourceStockStatusTagWithHttpInfo (int? orderSourceStockStatusId, string orderSourceStockStatusTag)
        {
            // verify the required parameter 'orderSourceStockStatusId' is set
            if (orderSourceStockStatusId == null)
                throw new ApiException(400, "Missing required parameter 'orderSourceStockStatusId' when calling OrderSourceStockStatusApi->AddOrderSourceStockStatusTag");
            // verify the required parameter 'orderSourceStockStatusTag' is set
            if (orderSourceStockStatusTag == null)
                throw new ApiException(400, "Missing required parameter 'orderSourceStockStatusTag' when calling OrderSourceStockStatusApi->AddOrderSourceStockStatusTag");

            var localVarPath = "/beta/orderSourceStockStatus/{orderSourceStockStatusId}/tag/{orderSourceStockStatusTag}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orderSourceStockStatusId != null) localVarPathParams.Add("orderSourceStockStatusId", Configuration.ApiClient.ParameterToString(orderSourceStockStatusId)); // path parameter
            if (orderSourceStockStatusTag != null) localVarPathParams.Add("orderSourceStockStatusTag", Configuration.ApiClient.ParameterToString(orderSourceStockStatusTag)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddOrderSourceStockStatusTag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Add new tags for an orderSourceStockStatus. Adds a tag to an existing orderSourceStockStatus.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderSourceStockStatusId">Id of the orderSourceStockStatus to add a tag to</param>
        /// <param name="orderSourceStockStatusTag">The tag to add</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddOrderSourceStockStatusTagAsync (int? orderSourceStockStatusId, string orderSourceStockStatusTag)
        {
             await AddOrderSourceStockStatusTagAsyncWithHttpInfo(orderSourceStockStatusId, orderSourceStockStatusTag);

        }

        /// <summary>
        /// Add new tags for an orderSourceStockStatus. Adds a tag to an existing orderSourceStockStatus.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderSourceStockStatusId">Id of the orderSourceStockStatus to add a tag to</param>
        /// <param name="orderSourceStockStatusTag">The tag to add</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddOrderSourceStockStatusTagAsyncWithHttpInfo (int? orderSourceStockStatusId, string orderSourceStockStatusTag)
        {
            // verify the required parameter 'orderSourceStockStatusId' is set
            if (orderSourceStockStatusId == null)
                throw new ApiException(400, "Missing required parameter 'orderSourceStockStatusId' when calling OrderSourceStockStatusApi->AddOrderSourceStockStatusTag");
            // verify the required parameter 'orderSourceStockStatusTag' is set
            if (orderSourceStockStatusTag == null)
                throw new ApiException(400, "Missing required parameter 'orderSourceStockStatusTag' when calling OrderSourceStockStatusApi->AddOrderSourceStockStatusTag");

            var localVarPath = "/beta/orderSourceStockStatus/{orderSourceStockStatusId}/tag/{orderSourceStockStatusTag}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orderSourceStockStatusId != null) localVarPathParams.Add("orderSourceStockStatusId", Configuration.ApiClient.ParameterToString(orderSourceStockStatusId)); // path parameter
            if (orderSourceStockStatusTag != null) localVarPathParams.Add("orderSourceStockStatusTag", Configuration.ApiClient.ParameterToString(orderSourceStockStatusTag)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddOrderSourceStockStatusTag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a file for an orderSourceStockStatus. Deletes an existing orderSourceStockStatus file using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderSourceStockStatusId">Id of the orderSourceStockStatus to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns></returns>
        public void DeleteOrderSourceStockStatusFile (int? orderSourceStockStatusId, int? fileId)
        {
             DeleteOrderSourceStockStatusFileWithHttpInfo(orderSourceStockStatusId, fileId);
        }

        /// <summary>
        /// Delete a file for an orderSourceStockStatus. Deletes an existing orderSourceStockStatus file using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderSourceStockStatusId">Id of the orderSourceStockStatus to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteOrderSourceStockStatusFileWithHttpInfo (int? orderSourceStockStatusId, int? fileId)
        {
            // verify the required parameter 'orderSourceStockStatusId' is set
            if (orderSourceStockStatusId == null)
                throw new ApiException(400, "Missing required parameter 'orderSourceStockStatusId' when calling OrderSourceStockStatusApi->DeleteOrderSourceStockStatusFile");
            // verify the required parameter 'fileId' is set
            if (fileId == null)
                throw new ApiException(400, "Missing required parameter 'fileId' when calling OrderSourceStockStatusApi->DeleteOrderSourceStockStatusFile");

            var localVarPath = "/beta/orderSourceStockStatus/{orderSourceStockStatusId}/file/{fileId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orderSourceStockStatusId != null) localVarPathParams.Add("orderSourceStockStatusId", Configuration.ApiClient.ParameterToString(orderSourceStockStatusId)); // path parameter
            if (fileId != null) localVarPathParams.Add("fileId", Configuration.ApiClient.ParameterToString(fileId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteOrderSourceStockStatusFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a file for an orderSourceStockStatus. Deletes an existing orderSourceStockStatus file using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderSourceStockStatusId">Id of the orderSourceStockStatus to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteOrderSourceStockStatusFileAsync (int? orderSourceStockStatusId, int? fileId)
        {
             await DeleteOrderSourceStockStatusFileAsyncWithHttpInfo(orderSourceStockStatusId, fileId);

        }

        /// <summary>
        /// Delete a file for an orderSourceStockStatus. Deletes an existing orderSourceStockStatus file using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderSourceStockStatusId">Id of the orderSourceStockStatus to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteOrderSourceStockStatusFileAsyncWithHttpInfo (int? orderSourceStockStatusId, int? fileId)
        {
            // verify the required parameter 'orderSourceStockStatusId' is set
            if (orderSourceStockStatusId == null)
                throw new ApiException(400, "Missing required parameter 'orderSourceStockStatusId' when calling OrderSourceStockStatusApi->DeleteOrderSourceStockStatusFile");
            // verify the required parameter 'fileId' is set
            if (fileId == null)
                throw new ApiException(400, "Missing required parameter 'fileId' when calling OrderSourceStockStatusApi->DeleteOrderSourceStockStatusFile");

            var localVarPath = "/beta/orderSourceStockStatus/{orderSourceStockStatusId}/file/{fileId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orderSourceStockStatusId != null) localVarPathParams.Add("orderSourceStockStatusId", Configuration.ApiClient.ParameterToString(orderSourceStockStatusId)); // path parameter
            if (fileId != null) localVarPathParams.Add("fileId", Configuration.ApiClient.ParameterToString(fileId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteOrderSourceStockStatusFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a tag for an orderSourceStockStatus. Deletes an existing orderSourceStockStatus tag using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderSourceStockStatusId">Id of the orderSourceStockStatus to remove tag from</param>
        /// <param name="orderSourceStockStatusTag">The tag to delete</param>
        /// <returns></returns>
        public void DeleteOrderSourceStockStatusTag (int? orderSourceStockStatusId, string orderSourceStockStatusTag)
        {
             DeleteOrderSourceStockStatusTagWithHttpInfo(orderSourceStockStatusId, orderSourceStockStatusTag);
        }

        /// <summary>
        /// Delete a tag for an orderSourceStockStatus. Deletes an existing orderSourceStockStatus tag using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderSourceStockStatusId">Id of the orderSourceStockStatus to remove tag from</param>
        /// <param name="orderSourceStockStatusTag">The tag to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteOrderSourceStockStatusTagWithHttpInfo (int? orderSourceStockStatusId, string orderSourceStockStatusTag)
        {
            // verify the required parameter 'orderSourceStockStatusId' is set
            if (orderSourceStockStatusId == null)
                throw new ApiException(400, "Missing required parameter 'orderSourceStockStatusId' when calling OrderSourceStockStatusApi->DeleteOrderSourceStockStatusTag");
            // verify the required parameter 'orderSourceStockStatusTag' is set
            if (orderSourceStockStatusTag == null)
                throw new ApiException(400, "Missing required parameter 'orderSourceStockStatusTag' when calling OrderSourceStockStatusApi->DeleteOrderSourceStockStatusTag");

            var localVarPath = "/beta/orderSourceStockStatus/{orderSourceStockStatusId}/tag/{orderSourceStockStatusTag}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orderSourceStockStatusId != null) localVarPathParams.Add("orderSourceStockStatusId", Configuration.ApiClient.ParameterToString(orderSourceStockStatusId)); // path parameter
            if (orderSourceStockStatusTag != null) localVarPathParams.Add("orderSourceStockStatusTag", Configuration.ApiClient.ParameterToString(orderSourceStockStatusTag)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteOrderSourceStockStatusTag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a tag for an orderSourceStockStatus. Deletes an existing orderSourceStockStatus tag using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderSourceStockStatusId">Id of the orderSourceStockStatus to remove tag from</param>
        /// <param name="orderSourceStockStatusTag">The tag to delete</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteOrderSourceStockStatusTagAsync (int? orderSourceStockStatusId, string orderSourceStockStatusTag)
        {
             await DeleteOrderSourceStockStatusTagAsyncWithHttpInfo(orderSourceStockStatusId, orderSourceStockStatusTag);

        }

        /// <summary>
        /// Delete a tag for an orderSourceStockStatus. Deletes an existing orderSourceStockStatus tag using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderSourceStockStatusId">Id of the orderSourceStockStatus to remove tag from</param>
        /// <param name="orderSourceStockStatusTag">The tag to delete</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteOrderSourceStockStatusTagAsyncWithHttpInfo (int? orderSourceStockStatusId, string orderSourceStockStatusTag)
        {
            // verify the required parameter 'orderSourceStockStatusId' is set
            if (orderSourceStockStatusId == null)
                throw new ApiException(400, "Missing required parameter 'orderSourceStockStatusId' when calling OrderSourceStockStatusApi->DeleteOrderSourceStockStatusTag");
            // verify the required parameter 'orderSourceStockStatusTag' is set
            if (orderSourceStockStatusTag == null)
                throw new ApiException(400, "Missing required parameter 'orderSourceStockStatusTag' when calling OrderSourceStockStatusApi->DeleteOrderSourceStockStatusTag");

            var localVarPath = "/beta/orderSourceStockStatus/{orderSourceStockStatusId}/tag/{orderSourceStockStatusTag}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orderSourceStockStatusId != null) localVarPathParams.Add("orderSourceStockStatusId", Configuration.ApiClient.ParameterToString(orderSourceStockStatusId)); // path parameter
            if (orderSourceStockStatusTag != null) localVarPathParams.Add("orderSourceStockStatusTag", Configuration.ApiClient.ParameterToString(orderSourceStockStatusTag)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteOrderSourceStockStatusTag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get a duplicated an orderSourceStockStatus by id Returns a duplicated orderSourceStockStatus identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderSourceStockStatusId">Id of the orderSourceStockStatus to be duplicated.</param>
        /// <returns>OrderSourceStockStatus</returns>
        public OrderSourceStockStatus GetDuplicateOrderSourceStockStatusById (int? orderSourceStockStatusId)
        {
             ApiResponse<OrderSourceStockStatus> localVarResponse = GetDuplicateOrderSourceStockStatusByIdWithHttpInfo(orderSourceStockStatusId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a duplicated an orderSourceStockStatus by id Returns a duplicated orderSourceStockStatus identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderSourceStockStatusId">Id of the orderSourceStockStatus to be duplicated.</param>
        /// <returns>ApiResponse of OrderSourceStockStatus</returns>
        public ApiResponse< OrderSourceStockStatus > GetDuplicateOrderSourceStockStatusByIdWithHttpInfo (int? orderSourceStockStatusId)
        {
            // verify the required parameter 'orderSourceStockStatusId' is set
            if (orderSourceStockStatusId == null)
                throw new ApiException(400, "Missing required parameter 'orderSourceStockStatusId' when calling OrderSourceStockStatusApi->GetDuplicateOrderSourceStockStatusById");

            var localVarPath = "/beta/orderSourceStockStatus/duplicate/{orderSourceStockStatusId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orderSourceStockStatusId != null) localVarPathParams.Add("orderSourceStockStatusId", Configuration.ApiClient.ParameterToString(orderSourceStockStatusId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDuplicateOrderSourceStockStatusById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OrderSourceStockStatus>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (OrderSourceStockStatus) Configuration.ApiClient.Deserialize(localVarResponse, typeof(OrderSourceStockStatus)));
        }

        /// <summary>
        /// Get a duplicated an orderSourceStockStatus by id Returns a duplicated orderSourceStockStatus identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderSourceStockStatusId">Id of the orderSourceStockStatus to be duplicated.</param>
        /// <returns>Task of OrderSourceStockStatus</returns>
        public async System.Threading.Tasks.Task<OrderSourceStockStatus> GetDuplicateOrderSourceStockStatusByIdAsync (int? orderSourceStockStatusId)
        {
             ApiResponse<OrderSourceStockStatus> localVarResponse = await GetDuplicateOrderSourceStockStatusByIdAsyncWithHttpInfo(orderSourceStockStatusId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a duplicated an orderSourceStockStatus by id Returns a duplicated orderSourceStockStatus identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderSourceStockStatusId">Id of the orderSourceStockStatus to be duplicated.</param>
        /// <returns>Task of ApiResponse (OrderSourceStockStatus)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OrderSourceStockStatus>> GetDuplicateOrderSourceStockStatusByIdAsyncWithHttpInfo (int? orderSourceStockStatusId)
        {
            // verify the required parameter 'orderSourceStockStatusId' is set
            if (orderSourceStockStatusId == null)
                throw new ApiException(400, "Missing required parameter 'orderSourceStockStatusId' when calling OrderSourceStockStatusApi->GetDuplicateOrderSourceStockStatusById");

            var localVarPath = "/beta/orderSourceStockStatus/duplicate/{orderSourceStockStatusId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orderSourceStockStatusId != null) localVarPathParams.Add("orderSourceStockStatusId", Configuration.ApiClient.ParameterToString(orderSourceStockStatusId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDuplicateOrderSourceStockStatusById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OrderSourceStockStatus>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (OrderSourceStockStatus) Configuration.ApiClient.Deserialize(localVarResponse, typeof(OrderSourceStockStatus)));
        }

        /// <summary>
        /// Search orderSourceStockStatuses by filter Returns the list of orderSourceStockStatuses that match the given filter.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>List&lt;OrderSourceStockStatus&gt;</returns>
        public List<OrderSourceStockStatus> GetOrderSourceStockStatusByFilter (string filter = null, int? page = null, int? limit = null, string sort = null)
        {
             ApiResponse<List<OrderSourceStockStatus>> localVarResponse = GetOrderSourceStockStatusByFilterWithHttpInfo(filter, page, limit, sort);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Search orderSourceStockStatuses by filter Returns the list of orderSourceStockStatuses that match the given filter.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>ApiResponse of List&lt;OrderSourceStockStatus&gt;</returns>
        public ApiResponse< List<OrderSourceStockStatus> > GetOrderSourceStockStatusByFilterWithHttpInfo (string filter = null, int? page = null, int? limit = null, string sort = null)
        {

            var localVarPath = "/beta/orderSourceStockStatus/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (filter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (page != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOrderSourceStockStatusByFilter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<OrderSourceStockStatus>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<OrderSourceStockStatus>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<OrderSourceStockStatus>)));
        }

        /// <summary>
        /// Search orderSourceStockStatuses by filter Returns the list of orderSourceStockStatuses that match the given filter.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>Task of List&lt;OrderSourceStockStatus&gt;</returns>
        public async System.Threading.Tasks.Task<List<OrderSourceStockStatus>> GetOrderSourceStockStatusByFilterAsync (string filter = null, int? page = null, int? limit = null, string sort = null)
        {
             ApiResponse<List<OrderSourceStockStatus>> localVarResponse = await GetOrderSourceStockStatusByFilterAsyncWithHttpInfo(filter, page, limit, sort);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Search orderSourceStockStatuses by filter Returns the list of orderSourceStockStatuses that match the given filter.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;OrderSourceStockStatus&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<OrderSourceStockStatus>>> GetOrderSourceStockStatusByFilterAsyncWithHttpInfo (string filter = null, int? page = null, int? limit = null, string sort = null)
        {

            var localVarPath = "/beta/orderSourceStockStatus/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (filter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (page != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOrderSourceStockStatusByFilter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<OrderSourceStockStatus>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<OrderSourceStockStatus>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<OrderSourceStockStatus>)));
        }

        /// <summary>
        /// Get an orderSourceStockStatus by id Returns the orderSourceStockStatus identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderSourceStockStatusId">Id of the orderSourceStockStatus to be returned.</param>
        /// <returns>OrderSourceStockStatus</returns>
        public OrderSourceStockStatus GetOrderSourceStockStatusById (int? orderSourceStockStatusId)
        {
             ApiResponse<OrderSourceStockStatus> localVarResponse = GetOrderSourceStockStatusByIdWithHttpInfo(orderSourceStockStatusId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get an orderSourceStockStatus by id Returns the orderSourceStockStatus identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderSourceStockStatusId">Id of the orderSourceStockStatus to be returned.</param>
        /// <returns>ApiResponse of OrderSourceStockStatus</returns>
        public ApiResponse< OrderSourceStockStatus > GetOrderSourceStockStatusByIdWithHttpInfo (int? orderSourceStockStatusId)
        {
            // verify the required parameter 'orderSourceStockStatusId' is set
            if (orderSourceStockStatusId == null)
                throw new ApiException(400, "Missing required parameter 'orderSourceStockStatusId' when calling OrderSourceStockStatusApi->GetOrderSourceStockStatusById");

            var localVarPath = "/beta/orderSourceStockStatus/{orderSourceStockStatusId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orderSourceStockStatusId != null) localVarPathParams.Add("orderSourceStockStatusId", Configuration.ApiClient.ParameterToString(orderSourceStockStatusId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOrderSourceStockStatusById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OrderSourceStockStatus>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (OrderSourceStockStatus) Configuration.ApiClient.Deserialize(localVarResponse, typeof(OrderSourceStockStatus)));
        }

        /// <summary>
        /// Get an orderSourceStockStatus by id Returns the orderSourceStockStatus identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderSourceStockStatusId">Id of the orderSourceStockStatus to be returned.</param>
        /// <returns>Task of OrderSourceStockStatus</returns>
        public async System.Threading.Tasks.Task<OrderSourceStockStatus> GetOrderSourceStockStatusByIdAsync (int? orderSourceStockStatusId)
        {
             ApiResponse<OrderSourceStockStatus> localVarResponse = await GetOrderSourceStockStatusByIdAsyncWithHttpInfo(orderSourceStockStatusId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get an orderSourceStockStatus by id Returns the orderSourceStockStatus identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderSourceStockStatusId">Id of the orderSourceStockStatus to be returned.</param>
        /// <returns>Task of ApiResponse (OrderSourceStockStatus)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OrderSourceStockStatus>> GetOrderSourceStockStatusByIdAsyncWithHttpInfo (int? orderSourceStockStatusId)
        {
            // verify the required parameter 'orderSourceStockStatusId' is set
            if (orderSourceStockStatusId == null)
                throw new ApiException(400, "Missing required parameter 'orderSourceStockStatusId' when calling OrderSourceStockStatusApi->GetOrderSourceStockStatusById");

            var localVarPath = "/beta/orderSourceStockStatus/{orderSourceStockStatusId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orderSourceStockStatusId != null) localVarPathParams.Add("orderSourceStockStatusId", Configuration.ApiClient.ParameterToString(orderSourceStockStatusId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOrderSourceStockStatusById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OrderSourceStockStatus>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (OrderSourceStockStatus) Configuration.ApiClient.Deserialize(localVarResponse, typeof(OrderSourceStockStatus)));
        }

        /// <summary>
        /// Get the files for an orderSourceStockStatus. Get all existing orderSourceStockStatus files.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderSourceStockStatusId">Id of the orderSourceStockStatus to get files for</param>
        /// <returns></returns>
        public void GetOrderSourceStockStatusFiles (int? orderSourceStockStatusId)
        {
             GetOrderSourceStockStatusFilesWithHttpInfo(orderSourceStockStatusId);
        }

        /// <summary>
        /// Get the files for an orderSourceStockStatus. Get all existing orderSourceStockStatus files.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderSourceStockStatusId">Id of the orderSourceStockStatus to get files for</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GetOrderSourceStockStatusFilesWithHttpInfo (int? orderSourceStockStatusId)
        {
            // verify the required parameter 'orderSourceStockStatusId' is set
            if (orderSourceStockStatusId == null)
                throw new ApiException(400, "Missing required parameter 'orderSourceStockStatusId' when calling OrderSourceStockStatusApi->GetOrderSourceStockStatusFiles");

            var localVarPath = "/beta/orderSourceStockStatus/{orderSourceStockStatusId}/file";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orderSourceStockStatusId != null) localVarPathParams.Add("orderSourceStockStatusId", Configuration.ApiClient.ParameterToString(orderSourceStockStatusId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOrderSourceStockStatusFiles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get the files for an orderSourceStockStatus. Get all existing orderSourceStockStatus files.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderSourceStockStatusId">Id of the orderSourceStockStatus to get files for</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetOrderSourceStockStatusFilesAsync (int? orderSourceStockStatusId)
        {
             await GetOrderSourceStockStatusFilesAsyncWithHttpInfo(orderSourceStockStatusId);

        }

        /// <summary>
        /// Get the files for an orderSourceStockStatus. Get all existing orderSourceStockStatus files.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderSourceStockStatusId">Id of the orderSourceStockStatus to get files for</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetOrderSourceStockStatusFilesAsyncWithHttpInfo (int? orderSourceStockStatusId)
        {
            // verify the required parameter 'orderSourceStockStatusId' is set
            if (orderSourceStockStatusId == null)
                throw new ApiException(400, "Missing required parameter 'orderSourceStockStatusId' when calling OrderSourceStockStatusApi->GetOrderSourceStockStatusFiles");

            var localVarPath = "/beta/orderSourceStockStatus/{orderSourceStockStatusId}/file";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orderSourceStockStatusId != null) localVarPathParams.Add("orderSourceStockStatusId", Configuration.ApiClient.ParameterToString(orderSourceStockStatusId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOrderSourceStockStatusFiles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get the tags for an orderSourceStockStatus. Get all existing orderSourceStockStatus tags.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderSourceStockStatusId">Id of the orderSourceStockStatus to get tags for</param>
        /// <returns></returns>
        public void GetOrderSourceStockStatusTags (int? orderSourceStockStatusId)
        {
             GetOrderSourceStockStatusTagsWithHttpInfo(orderSourceStockStatusId);
        }

        /// <summary>
        /// Get the tags for an orderSourceStockStatus. Get all existing orderSourceStockStatus tags.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderSourceStockStatusId">Id of the orderSourceStockStatus to get tags for</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GetOrderSourceStockStatusTagsWithHttpInfo (int? orderSourceStockStatusId)
        {
            // verify the required parameter 'orderSourceStockStatusId' is set
            if (orderSourceStockStatusId == null)
                throw new ApiException(400, "Missing required parameter 'orderSourceStockStatusId' when calling OrderSourceStockStatusApi->GetOrderSourceStockStatusTags");

            var localVarPath = "/beta/orderSourceStockStatus/{orderSourceStockStatusId}/tag";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orderSourceStockStatusId != null) localVarPathParams.Add("orderSourceStockStatusId", Configuration.ApiClient.ParameterToString(orderSourceStockStatusId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOrderSourceStockStatusTags", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get the tags for an orderSourceStockStatus. Get all existing orderSourceStockStatus tags.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderSourceStockStatusId">Id of the orderSourceStockStatus to get tags for</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetOrderSourceStockStatusTagsAsync (int? orderSourceStockStatusId)
        {
             await GetOrderSourceStockStatusTagsAsyncWithHttpInfo(orderSourceStockStatusId);

        }

        /// <summary>
        /// Get the tags for an orderSourceStockStatus. Get all existing orderSourceStockStatus tags.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderSourceStockStatusId">Id of the orderSourceStockStatus to get tags for</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetOrderSourceStockStatusTagsAsyncWithHttpInfo (int? orderSourceStockStatusId)
        {
            // verify the required parameter 'orderSourceStockStatusId' is set
            if (orderSourceStockStatusId == null)
                throw new ApiException(400, "Missing required parameter 'orderSourceStockStatusId' when calling OrderSourceStockStatusApi->GetOrderSourceStockStatusTags");

            var localVarPath = "/beta/orderSourceStockStatus/{orderSourceStockStatusId}/tag";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orderSourceStockStatusId != null) localVarPathParams.Add("orderSourceStockStatusId", Configuration.ApiClient.ParameterToString(orderSourceStockStatusId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOrderSourceStockStatusTags", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

    }
}
