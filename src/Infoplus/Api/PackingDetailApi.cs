/* 
 * Infoplus API
 *
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Infoplus.Client;
using Infoplus.Model;

namespace Infoplus.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPackingDetailApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Add new audit for a packingDetail
        /// </summary>
        /// <remarks>
        /// Adds an audit to an existing packingDetail.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="packingDetailId">Id of the packingDetail to add an audit to</param>
        /// <param name="packingDetailAudit">The audit to add</param>
        /// <returns></returns>
        void AddPackingDetailAudit (int? packingDetailId, string packingDetailAudit);

        /// <summary>
        /// Add new audit for a packingDetail
        /// </summary>
        /// <remarks>
        /// Adds an audit to an existing packingDetail.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="packingDetailId">Id of the packingDetail to add an audit to</param>
        /// <param name="packingDetailAudit">The audit to add</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddPackingDetailAuditWithHttpInfo (int? packingDetailId, string packingDetailAudit);
        /// <summary>
        /// Attach a file to a packingDetail
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing packingDetail.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="packingDetailId">Id of the packingDetail to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns></returns>
        void AddPackingDetailFile (int? packingDetailId, string fileName);

        /// <summary>
        /// Attach a file to a packingDetail
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing packingDetail.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="packingDetailId">Id of the packingDetail to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddPackingDetailFileWithHttpInfo (int? packingDetailId, string fileName);
        /// <summary>
        /// Attach a file to a packingDetail by URL.
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing packingDetail by URL.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="packingDetailId">Id of the packingDetail to add an file to</param>
        /// <returns></returns>
        void AddPackingDetailFileByURL (RecordFile body, int? packingDetailId);

        /// <summary>
        /// Attach a file to a packingDetail by URL.
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing packingDetail by URL.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="packingDetailId">Id of the packingDetail to add an file to</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddPackingDetailFileByURLWithHttpInfo (RecordFile body, int? packingDetailId);
        /// <summary>
        /// Add new tags for a packingDetail.
        /// </summary>
        /// <remarks>
        /// Adds a tag to an existing packingDetail.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="packingDetailId">Id of the packingDetail to add a tag to</param>
        /// <param name="packingDetailTag">The tag to add</param>
        /// <returns></returns>
        void AddPackingDetailTag (int? packingDetailId, string packingDetailTag);

        /// <summary>
        /// Add new tags for a packingDetail.
        /// </summary>
        /// <remarks>
        /// Adds a tag to an existing packingDetail.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="packingDetailId">Id of the packingDetail to add a tag to</param>
        /// <param name="packingDetailTag">The tag to add</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddPackingDetailTagWithHttpInfo (int? packingDetailId, string packingDetailTag);
        /// <summary>
        /// Delete a file for a packingDetail.
        /// </summary>
        /// <remarks>
        /// Deletes an existing packingDetail file using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="packingDetailId">Id of the packingDetail to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns></returns>
        void DeletePackingDetailFile (int? packingDetailId, int? fileId);

        /// <summary>
        /// Delete a file for a packingDetail.
        /// </summary>
        /// <remarks>
        /// Deletes an existing packingDetail file using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="packingDetailId">Id of the packingDetail to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeletePackingDetailFileWithHttpInfo (int? packingDetailId, int? fileId);
        /// <summary>
        /// Delete a tag for a packingDetail.
        /// </summary>
        /// <remarks>
        /// Deletes an existing packingDetail tag using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="packingDetailId">Id of the packingDetail to remove tag from</param>
        /// <param name="packingDetailTag">The tag to delete</param>
        /// <returns></returns>
        void DeletePackingDetailTag (int? packingDetailId, string packingDetailTag);

        /// <summary>
        /// Delete a tag for a packingDetail.
        /// </summary>
        /// <remarks>
        /// Deletes an existing packingDetail tag using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="packingDetailId">Id of the packingDetail to remove tag from</param>
        /// <param name="packingDetailTag">The tag to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeletePackingDetailTagWithHttpInfo (int? packingDetailId, string packingDetailTag);
        /// <summary>
        /// Get a duplicated a packingDetail by id
        /// </summary>
        /// <remarks>
        /// Returns a duplicated packingDetail identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="packingDetailId">Id of the packingDetail to be duplicated.</param>
        /// <returns>PackingDetail</returns>
        PackingDetail GetDuplicatePackingDetailById (int? packingDetailId);

        /// <summary>
        /// Get a duplicated a packingDetail by id
        /// </summary>
        /// <remarks>
        /// Returns a duplicated packingDetail identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="packingDetailId">Id of the packingDetail to be duplicated.</param>
        /// <returns>ApiResponse of PackingDetail</returns>
        ApiResponse<PackingDetail> GetDuplicatePackingDetailByIdWithHttpInfo (int? packingDetailId);
        /// <summary>
        /// Search packingDetails by filter
        /// </summary>
        /// <remarks>
        /// Returns the list of packingDetails that match the given filter.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>List&lt;PackingDetail&gt;</returns>
        List<PackingDetail> GetPackingDetailByFilter (string filter = null, int? page = null, int? limit = null, string sort = null);

        /// <summary>
        /// Search packingDetails by filter
        /// </summary>
        /// <remarks>
        /// Returns the list of packingDetails that match the given filter.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>ApiResponse of List&lt;PackingDetail&gt;</returns>
        ApiResponse<List<PackingDetail>> GetPackingDetailByFilterWithHttpInfo (string filter = null, int? page = null, int? limit = null, string sort = null);
        /// <summary>
        /// Get a packingDetail by id
        /// </summary>
        /// <remarks>
        /// Returns the packingDetail identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="packingDetailId">Id of the packingDetail to be returned.</param>
        /// <returns>PackingDetail</returns>
        PackingDetail GetPackingDetailById (int? packingDetailId);

        /// <summary>
        /// Get a packingDetail by id
        /// </summary>
        /// <remarks>
        /// Returns the packingDetail identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="packingDetailId">Id of the packingDetail to be returned.</param>
        /// <returns>ApiResponse of PackingDetail</returns>
        ApiResponse<PackingDetail> GetPackingDetailByIdWithHttpInfo (int? packingDetailId);
        /// <summary>
        /// Get the files for a packingDetail.
        /// </summary>
        /// <remarks>
        /// Get all existing packingDetail files.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="packingDetailId">Id of the packingDetail to get files for</param>
        /// <returns></returns>
        void GetPackingDetailFiles (int? packingDetailId);

        /// <summary>
        /// Get the files for a packingDetail.
        /// </summary>
        /// <remarks>
        /// Get all existing packingDetail files.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="packingDetailId">Id of the packingDetail to get files for</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetPackingDetailFilesWithHttpInfo (int? packingDetailId);
        /// <summary>
        /// Get the tags for a packingDetail.
        /// </summary>
        /// <remarks>
        /// Get all existing packingDetail tags.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="packingDetailId">Id of the packingDetail to get tags for</param>
        /// <returns></returns>
        void GetPackingDetailTags (int? packingDetailId);

        /// <summary>
        /// Get the tags for a packingDetail.
        /// </summary>
        /// <remarks>
        /// Get all existing packingDetail tags.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="packingDetailId">Id of the packingDetail to get tags for</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetPackingDetailTagsWithHttpInfo (int? packingDetailId);
        /// <summary>
        /// Update a packingDetail custom fields
        /// </summary>
        /// <remarks>
        /// Updates an existing packingDetail custom fields using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">PackingDetail to be updated.</param>
        /// <returns></returns>
        void UpdatePackingDetailCustomFields (PackingDetail body);

        /// <summary>
        /// Update a packingDetail custom fields
        /// </summary>
        /// <remarks>
        /// Updates an existing packingDetail custom fields using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">PackingDetail to be updated.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdatePackingDetailCustomFieldsWithHttpInfo (PackingDetail body);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Add new audit for a packingDetail
        /// </summary>
        /// <remarks>
        /// Adds an audit to an existing packingDetail.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="packingDetailId">Id of the packingDetail to add an audit to</param>
        /// <param name="packingDetailAudit">The audit to add</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddPackingDetailAuditAsync (int? packingDetailId, string packingDetailAudit);

        /// <summary>
        /// Add new audit for a packingDetail
        /// </summary>
        /// <remarks>
        /// Adds an audit to an existing packingDetail.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="packingDetailId">Id of the packingDetail to add an audit to</param>
        /// <param name="packingDetailAudit">The audit to add</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddPackingDetailAuditAsyncWithHttpInfo (int? packingDetailId, string packingDetailAudit);
        /// <summary>
        /// Attach a file to a packingDetail
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing packingDetail.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="packingDetailId">Id of the packingDetail to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddPackingDetailFileAsync (int? packingDetailId, string fileName);

        /// <summary>
        /// Attach a file to a packingDetail
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing packingDetail.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="packingDetailId">Id of the packingDetail to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddPackingDetailFileAsyncWithHttpInfo (int? packingDetailId, string fileName);
        /// <summary>
        /// Attach a file to a packingDetail by URL.
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing packingDetail by URL.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="packingDetailId">Id of the packingDetail to add an file to</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddPackingDetailFileByURLAsync (RecordFile body, int? packingDetailId);

        /// <summary>
        /// Attach a file to a packingDetail by URL.
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing packingDetail by URL.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="packingDetailId">Id of the packingDetail to add an file to</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddPackingDetailFileByURLAsyncWithHttpInfo (RecordFile body, int? packingDetailId);
        /// <summary>
        /// Add new tags for a packingDetail.
        /// </summary>
        /// <remarks>
        /// Adds a tag to an existing packingDetail.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="packingDetailId">Id of the packingDetail to add a tag to</param>
        /// <param name="packingDetailTag">The tag to add</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddPackingDetailTagAsync (int? packingDetailId, string packingDetailTag);

        /// <summary>
        /// Add new tags for a packingDetail.
        /// </summary>
        /// <remarks>
        /// Adds a tag to an existing packingDetail.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="packingDetailId">Id of the packingDetail to add a tag to</param>
        /// <param name="packingDetailTag">The tag to add</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddPackingDetailTagAsyncWithHttpInfo (int? packingDetailId, string packingDetailTag);
        /// <summary>
        /// Delete a file for a packingDetail.
        /// </summary>
        /// <remarks>
        /// Deletes an existing packingDetail file using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="packingDetailId">Id of the packingDetail to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeletePackingDetailFileAsync (int? packingDetailId, int? fileId);

        /// <summary>
        /// Delete a file for a packingDetail.
        /// </summary>
        /// <remarks>
        /// Deletes an existing packingDetail file using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="packingDetailId">Id of the packingDetail to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeletePackingDetailFileAsyncWithHttpInfo (int? packingDetailId, int? fileId);
        /// <summary>
        /// Delete a tag for a packingDetail.
        /// </summary>
        /// <remarks>
        /// Deletes an existing packingDetail tag using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="packingDetailId">Id of the packingDetail to remove tag from</param>
        /// <param name="packingDetailTag">The tag to delete</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeletePackingDetailTagAsync (int? packingDetailId, string packingDetailTag);

        /// <summary>
        /// Delete a tag for a packingDetail.
        /// </summary>
        /// <remarks>
        /// Deletes an existing packingDetail tag using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="packingDetailId">Id of the packingDetail to remove tag from</param>
        /// <param name="packingDetailTag">The tag to delete</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeletePackingDetailTagAsyncWithHttpInfo (int? packingDetailId, string packingDetailTag);
        /// <summary>
        /// Get a duplicated a packingDetail by id
        /// </summary>
        /// <remarks>
        /// Returns a duplicated packingDetail identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="packingDetailId">Id of the packingDetail to be duplicated.</param>
        /// <returns>Task of PackingDetail</returns>
        System.Threading.Tasks.Task<PackingDetail> GetDuplicatePackingDetailByIdAsync (int? packingDetailId);

        /// <summary>
        /// Get a duplicated a packingDetail by id
        /// </summary>
        /// <remarks>
        /// Returns a duplicated packingDetail identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="packingDetailId">Id of the packingDetail to be duplicated.</param>
        /// <returns>Task of ApiResponse (PackingDetail)</returns>
        System.Threading.Tasks.Task<ApiResponse<PackingDetail>> GetDuplicatePackingDetailByIdAsyncWithHttpInfo (int? packingDetailId);
        /// <summary>
        /// Search packingDetails by filter
        /// </summary>
        /// <remarks>
        /// Returns the list of packingDetails that match the given filter.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>Task of List&lt;PackingDetail&gt;</returns>
        System.Threading.Tasks.Task<List<PackingDetail>> GetPackingDetailByFilterAsync (string filter = null, int? page = null, int? limit = null, string sort = null);

        /// <summary>
        /// Search packingDetails by filter
        /// </summary>
        /// <remarks>
        /// Returns the list of packingDetails that match the given filter.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;PackingDetail&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<PackingDetail>>> GetPackingDetailByFilterAsyncWithHttpInfo (string filter = null, int? page = null, int? limit = null, string sort = null);
        /// <summary>
        /// Get a packingDetail by id
        /// </summary>
        /// <remarks>
        /// Returns the packingDetail identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="packingDetailId">Id of the packingDetail to be returned.</param>
        /// <returns>Task of PackingDetail</returns>
        System.Threading.Tasks.Task<PackingDetail> GetPackingDetailByIdAsync (int? packingDetailId);

        /// <summary>
        /// Get a packingDetail by id
        /// </summary>
        /// <remarks>
        /// Returns the packingDetail identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="packingDetailId">Id of the packingDetail to be returned.</param>
        /// <returns>Task of ApiResponse (PackingDetail)</returns>
        System.Threading.Tasks.Task<ApiResponse<PackingDetail>> GetPackingDetailByIdAsyncWithHttpInfo (int? packingDetailId);
        /// <summary>
        /// Get the files for a packingDetail.
        /// </summary>
        /// <remarks>
        /// Get all existing packingDetail files.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="packingDetailId">Id of the packingDetail to get files for</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetPackingDetailFilesAsync (int? packingDetailId);

        /// <summary>
        /// Get the files for a packingDetail.
        /// </summary>
        /// <remarks>
        /// Get all existing packingDetail files.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="packingDetailId">Id of the packingDetail to get files for</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetPackingDetailFilesAsyncWithHttpInfo (int? packingDetailId);
        /// <summary>
        /// Get the tags for a packingDetail.
        /// </summary>
        /// <remarks>
        /// Get all existing packingDetail tags.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="packingDetailId">Id of the packingDetail to get tags for</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetPackingDetailTagsAsync (int? packingDetailId);

        /// <summary>
        /// Get the tags for a packingDetail.
        /// </summary>
        /// <remarks>
        /// Get all existing packingDetail tags.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="packingDetailId">Id of the packingDetail to get tags for</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetPackingDetailTagsAsyncWithHttpInfo (int? packingDetailId);
        /// <summary>
        /// Update a packingDetail custom fields
        /// </summary>
        /// <remarks>
        /// Updates an existing packingDetail custom fields using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">PackingDetail to be updated.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdatePackingDetailCustomFieldsAsync (PackingDetail body);

        /// <summary>
        /// Update a packingDetail custom fields
        /// </summary>
        /// <remarks>
        /// Updates an existing packingDetail custom fields using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">PackingDetail to be updated.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdatePackingDetailCustomFieldsAsyncWithHttpInfo (PackingDetail body);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class PackingDetailApi : IPackingDetailApi
    {
        private Infoplus.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="PackingDetailApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PackingDetailApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = Infoplus.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PackingDetailApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public PackingDetailApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Infoplus.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Infoplus.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Add new audit for a packingDetail Adds an audit to an existing packingDetail.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="packingDetailId">Id of the packingDetail to add an audit to</param>
        /// <param name="packingDetailAudit">The audit to add</param>
        /// <returns></returns>
        public void AddPackingDetailAudit (int? packingDetailId, string packingDetailAudit)
        {
             AddPackingDetailAuditWithHttpInfo(packingDetailId, packingDetailAudit);
        }

        /// <summary>
        /// Add new audit for a packingDetail Adds an audit to an existing packingDetail.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="packingDetailId">Id of the packingDetail to add an audit to</param>
        /// <param name="packingDetailAudit">The audit to add</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AddPackingDetailAuditWithHttpInfo (int? packingDetailId, string packingDetailAudit)
        {
            // verify the required parameter 'packingDetailId' is set
            if (packingDetailId == null)
                throw new ApiException(400, "Missing required parameter 'packingDetailId' when calling PackingDetailApi->AddPackingDetailAudit");
            // verify the required parameter 'packingDetailAudit' is set
            if (packingDetailAudit == null)
                throw new ApiException(400, "Missing required parameter 'packingDetailAudit' when calling PackingDetailApi->AddPackingDetailAudit");

            var localVarPath = "/beta/packingDetail/{packingDetailId}/audit/{packingDetailAudit}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (packingDetailId != null) localVarPathParams.Add("packingDetailId", Configuration.ApiClient.ParameterToString(packingDetailId)); // path parameter
            if (packingDetailAudit != null) localVarPathParams.Add("packingDetailAudit", Configuration.ApiClient.ParameterToString(packingDetailAudit)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddPackingDetailAudit", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Add new audit for a packingDetail Adds an audit to an existing packingDetail.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="packingDetailId">Id of the packingDetail to add an audit to</param>
        /// <param name="packingDetailAudit">The audit to add</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddPackingDetailAuditAsync (int? packingDetailId, string packingDetailAudit)
        {
             await AddPackingDetailAuditAsyncWithHttpInfo(packingDetailId, packingDetailAudit);

        }

        /// <summary>
        /// Add new audit for a packingDetail Adds an audit to an existing packingDetail.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="packingDetailId">Id of the packingDetail to add an audit to</param>
        /// <param name="packingDetailAudit">The audit to add</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddPackingDetailAuditAsyncWithHttpInfo (int? packingDetailId, string packingDetailAudit)
        {
            // verify the required parameter 'packingDetailId' is set
            if (packingDetailId == null)
                throw new ApiException(400, "Missing required parameter 'packingDetailId' when calling PackingDetailApi->AddPackingDetailAudit");
            // verify the required parameter 'packingDetailAudit' is set
            if (packingDetailAudit == null)
                throw new ApiException(400, "Missing required parameter 'packingDetailAudit' when calling PackingDetailApi->AddPackingDetailAudit");

            var localVarPath = "/beta/packingDetail/{packingDetailId}/audit/{packingDetailAudit}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (packingDetailId != null) localVarPathParams.Add("packingDetailId", Configuration.ApiClient.ParameterToString(packingDetailId)); // path parameter
            if (packingDetailAudit != null) localVarPathParams.Add("packingDetailAudit", Configuration.ApiClient.ParameterToString(packingDetailAudit)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddPackingDetailAudit", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Attach a file to a packingDetail Adds a file to an existing packingDetail.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="packingDetailId">Id of the packingDetail to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns></returns>
        public void AddPackingDetailFile (int? packingDetailId, string fileName)
        {
             AddPackingDetailFileWithHttpInfo(packingDetailId, fileName);
        }

        /// <summary>
        /// Attach a file to a packingDetail Adds a file to an existing packingDetail.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="packingDetailId">Id of the packingDetail to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AddPackingDetailFileWithHttpInfo (int? packingDetailId, string fileName)
        {
            // verify the required parameter 'packingDetailId' is set
            if (packingDetailId == null)
                throw new ApiException(400, "Missing required parameter 'packingDetailId' when calling PackingDetailApi->AddPackingDetailFile");
            // verify the required parameter 'fileName' is set
            if (fileName == null)
                throw new ApiException(400, "Missing required parameter 'fileName' when calling PackingDetailApi->AddPackingDetailFile");

            var localVarPath = "/beta/packingDetail/{packingDetailId}/file/{fileName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (packingDetailId != null) localVarPathParams.Add("packingDetailId", Configuration.ApiClient.ParameterToString(packingDetailId)); // path parameter
            if (fileName != null) localVarPathParams.Add("fileName", Configuration.ApiClient.ParameterToString(fileName)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddPackingDetailFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Attach a file to a packingDetail Adds a file to an existing packingDetail.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="packingDetailId">Id of the packingDetail to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddPackingDetailFileAsync (int? packingDetailId, string fileName)
        {
             await AddPackingDetailFileAsyncWithHttpInfo(packingDetailId, fileName);

        }

        /// <summary>
        /// Attach a file to a packingDetail Adds a file to an existing packingDetail.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="packingDetailId">Id of the packingDetail to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddPackingDetailFileAsyncWithHttpInfo (int? packingDetailId, string fileName)
        {
            // verify the required parameter 'packingDetailId' is set
            if (packingDetailId == null)
                throw new ApiException(400, "Missing required parameter 'packingDetailId' when calling PackingDetailApi->AddPackingDetailFile");
            // verify the required parameter 'fileName' is set
            if (fileName == null)
                throw new ApiException(400, "Missing required parameter 'fileName' when calling PackingDetailApi->AddPackingDetailFile");

            var localVarPath = "/beta/packingDetail/{packingDetailId}/file/{fileName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (packingDetailId != null) localVarPathParams.Add("packingDetailId", Configuration.ApiClient.ParameterToString(packingDetailId)); // path parameter
            if (fileName != null) localVarPathParams.Add("fileName", Configuration.ApiClient.ParameterToString(fileName)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddPackingDetailFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Attach a file to a packingDetail by URL. Adds a file to an existing packingDetail by URL.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="packingDetailId">Id of the packingDetail to add an file to</param>
        /// <returns></returns>
        public void AddPackingDetailFileByURL (RecordFile body, int? packingDetailId)
        {
             AddPackingDetailFileByURLWithHttpInfo(body, packingDetailId);
        }

        /// <summary>
        /// Attach a file to a packingDetail by URL. Adds a file to an existing packingDetail by URL.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="packingDetailId">Id of the packingDetail to add an file to</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AddPackingDetailFileByURLWithHttpInfo (RecordFile body, int? packingDetailId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling PackingDetailApi->AddPackingDetailFileByURL");
            // verify the required parameter 'packingDetailId' is set
            if (packingDetailId == null)
                throw new ApiException(400, "Missing required parameter 'packingDetailId' when calling PackingDetailApi->AddPackingDetailFileByURL");

            var localVarPath = "/beta/packingDetail/{packingDetailId}/file";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (packingDetailId != null) localVarPathParams.Add("packingDetailId", Configuration.ApiClient.ParameterToString(packingDetailId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddPackingDetailFileByURL", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Attach a file to a packingDetail by URL. Adds a file to an existing packingDetail by URL.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="packingDetailId">Id of the packingDetail to add an file to</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddPackingDetailFileByURLAsync (RecordFile body, int? packingDetailId)
        {
             await AddPackingDetailFileByURLAsyncWithHttpInfo(body, packingDetailId);

        }

        /// <summary>
        /// Attach a file to a packingDetail by URL. Adds a file to an existing packingDetail by URL.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="packingDetailId">Id of the packingDetail to add an file to</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddPackingDetailFileByURLAsyncWithHttpInfo (RecordFile body, int? packingDetailId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling PackingDetailApi->AddPackingDetailFileByURL");
            // verify the required parameter 'packingDetailId' is set
            if (packingDetailId == null)
                throw new ApiException(400, "Missing required parameter 'packingDetailId' when calling PackingDetailApi->AddPackingDetailFileByURL");

            var localVarPath = "/beta/packingDetail/{packingDetailId}/file";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (packingDetailId != null) localVarPathParams.Add("packingDetailId", Configuration.ApiClient.ParameterToString(packingDetailId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddPackingDetailFileByURL", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Add new tags for a packingDetail. Adds a tag to an existing packingDetail.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="packingDetailId">Id of the packingDetail to add a tag to</param>
        /// <param name="packingDetailTag">The tag to add</param>
        /// <returns></returns>
        public void AddPackingDetailTag (int? packingDetailId, string packingDetailTag)
        {
             AddPackingDetailTagWithHttpInfo(packingDetailId, packingDetailTag);
        }

        /// <summary>
        /// Add new tags for a packingDetail. Adds a tag to an existing packingDetail.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="packingDetailId">Id of the packingDetail to add a tag to</param>
        /// <param name="packingDetailTag">The tag to add</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AddPackingDetailTagWithHttpInfo (int? packingDetailId, string packingDetailTag)
        {
            // verify the required parameter 'packingDetailId' is set
            if (packingDetailId == null)
                throw new ApiException(400, "Missing required parameter 'packingDetailId' when calling PackingDetailApi->AddPackingDetailTag");
            // verify the required parameter 'packingDetailTag' is set
            if (packingDetailTag == null)
                throw new ApiException(400, "Missing required parameter 'packingDetailTag' when calling PackingDetailApi->AddPackingDetailTag");

            var localVarPath = "/beta/packingDetail/{packingDetailId}/tag/{packingDetailTag}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (packingDetailId != null) localVarPathParams.Add("packingDetailId", Configuration.ApiClient.ParameterToString(packingDetailId)); // path parameter
            if (packingDetailTag != null) localVarPathParams.Add("packingDetailTag", Configuration.ApiClient.ParameterToString(packingDetailTag)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddPackingDetailTag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Add new tags for a packingDetail. Adds a tag to an existing packingDetail.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="packingDetailId">Id of the packingDetail to add a tag to</param>
        /// <param name="packingDetailTag">The tag to add</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddPackingDetailTagAsync (int? packingDetailId, string packingDetailTag)
        {
             await AddPackingDetailTagAsyncWithHttpInfo(packingDetailId, packingDetailTag);

        }

        /// <summary>
        /// Add new tags for a packingDetail. Adds a tag to an existing packingDetail.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="packingDetailId">Id of the packingDetail to add a tag to</param>
        /// <param name="packingDetailTag">The tag to add</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddPackingDetailTagAsyncWithHttpInfo (int? packingDetailId, string packingDetailTag)
        {
            // verify the required parameter 'packingDetailId' is set
            if (packingDetailId == null)
                throw new ApiException(400, "Missing required parameter 'packingDetailId' when calling PackingDetailApi->AddPackingDetailTag");
            // verify the required parameter 'packingDetailTag' is set
            if (packingDetailTag == null)
                throw new ApiException(400, "Missing required parameter 'packingDetailTag' when calling PackingDetailApi->AddPackingDetailTag");

            var localVarPath = "/beta/packingDetail/{packingDetailId}/tag/{packingDetailTag}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (packingDetailId != null) localVarPathParams.Add("packingDetailId", Configuration.ApiClient.ParameterToString(packingDetailId)); // path parameter
            if (packingDetailTag != null) localVarPathParams.Add("packingDetailTag", Configuration.ApiClient.ParameterToString(packingDetailTag)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddPackingDetailTag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a file for a packingDetail. Deletes an existing packingDetail file using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="packingDetailId">Id of the packingDetail to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns></returns>
        public void DeletePackingDetailFile (int? packingDetailId, int? fileId)
        {
             DeletePackingDetailFileWithHttpInfo(packingDetailId, fileId);
        }

        /// <summary>
        /// Delete a file for a packingDetail. Deletes an existing packingDetail file using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="packingDetailId">Id of the packingDetail to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeletePackingDetailFileWithHttpInfo (int? packingDetailId, int? fileId)
        {
            // verify the required parameter 'packingDetailId' is set
            if (packingDetailId == null)
                throw new ApiException(400, "Missing required parameter 'packingDetailId' when calling PackingDetailApi->DeletePackingDetailFile");
            // verify the required parameter 'fileId' is set
            if (fileId == null)
                throw new ApiException(400, "Missing required parameter 'fileId' when calling PackingDetailApi->DeletePackingDetailFile");

            var localVarPath = "/beta/packingDetail/{packingDetailId}/file/{fileId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (packingDetailId != null) localVarPathParams.Add("packingDetailId", Configuration.ApiClient.ParameterToString(packingDetailId)); // path parameter
            if (fileId != null) localVarPathParams.Add("fileId", Configuration.ApiClient.ParameterToString(fileId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeletePackingDetailFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a file for a packingDetail. Deletes an existing packingDetail file using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="packingDetailId">Id of the packingDetail to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeletePackingDetailFileAsync (int? packingDetailId, int? fileId)
        {
             await DeletePackingDetailFileAsyncWithHttpInfo(packingDetailId, fileId);

        }

        /// <summary>
        /// Delete a file for a packingDetail. Deletes an existing packingDetail file using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="packingDetailId">Id of the packingDetail to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeletePackingDetailFileAsyncWithHttpInfo (int? packingDetailId, int? fileId)
        {
            // verify the required parameter 'packingDetailId' is set
            if (packingDetailId == null)
                throw new ApiException(400, "Missing required parameter 'packingDetailId' when calling PackingDetailApi->DeletePackingDetailFile");
            // verify the required parameter 'fileId' is set
            if (fileId == null)
                throw new ApiException(400, "Missing required parameter 'fileId' when calling PackingDetailApi->DeletePackingDetailFile");

            var localVarPath = "/beta/packingDetail/{packingDetailId}/file/{fileId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (packingDetailId != null) localVarPathParams.Add("packingDetailId", Configuration.ApiClient.ParameterToString(packingDetailId)); // path parameter
            if (fileId != null) localVarPathParams.Add("fileId", Configuration.ApiClient.ParameterToString(fileId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeletePackingDetailFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a tag for a packingDetail. Deletes an existing packingDetail tag using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="packingDetailId">Id of the packingDetail to remove tag from</param>
        /// <param name="packingDetailTag">The tag to delete</param>
        /// <returns></returns>
        public void DeletePackingDetailTag (int? packingDetailId, string packingDetailTag)
        {
             DeletePackingDetailTagWithHttpInfo(packingDetailId, packingDetailTag);
        }

        /// <summary>
        /// Delete a tag for a packingDetail. Deletes an existing packingDetail tag using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="packingDetailId">Id of the packingDetail to remove tag from</param>
        /// <param name="packingDetailTag">The tag to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeletePackingDetailTagWithHttpInfo (int? packingDetailId, string packingDetailTag)
        {
            // verify the required parameter 'packingDetailId' is set
            if (packingDetailId == null)
                throw new ApiException(400, "Missing required parameter 'packingDetailId' when calling PackingDetailApi->DeletePackingDetailTag");
            // verify the required parameter 'packingDetailTag' is set
            if (packingDetailTag == null)
                throw new ApiException(400, "Missing required parameter 'packingDetailTag' when calling PackingDetailApi->DeletePackingDetailTag");

            var localVarPath = "/beta/packingDetail/{packingDetailId}/tag/{packingDetailTag}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (packingDetailId != null) localVarPathParams.Add("packingDetailId", Configuration.ApiClient.ParameterToString(packingDetailId)); // path parameter
            if (packingDetailTag != null) localVarPathParams.Add("packingDetailTag", Configuration.ApiClient.ParameterToString(packingDetailTag)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeletePackingDetailTag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a tag for a packingDetail. Deletes an existing packingDetail tag using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="packingDetailId">Id of the packingDetail to remove tag from</param>
        /// <param name="packingDetailTag">The tag to delete</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeletePackingDetailTagAsync (int? packingDetailId, string packingDetailTag)
        {
             await DeletePackingDetailTagAsyncWithHttpInfo(packingDetailId, packingDetailTag);

        }

        /// <summary>
        /// Delete a tag for a packingDetail. Deletes an existing packingDetail tag using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="packingDetailId">Id of the packingDetail to remove tag from</param>
        /// <param name="packingDetailTag">The tag to delete</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeletePackingDetailTagAsyncWithHttpInfo (int? packingDetailId, string packingDetailTag)
        {
            // verify the required parameter 'packingDetailId' is set
            if (packingDetailId == null)
                throw new ApiException(400, "Missing required parameter 'packingDetailId' when calling PackingDetailApi->DeletePackingDetailTag");
            // verify the required parameter 'packingDetailTag' is set
            if (packingDetailTag == null)
                throw new ApiException(400, "Missing required parameter 'packingDetailTag' when calling PackingDetailApi->DeletePackingDetailTag");

            var localVarPath = "/beta/packingDetail/{packingDetailId}/tag/{packingDetailTag}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (packingDetailId != null) localVarPathParams.Add("packingDetailId", Configuration.ApiClient.ParameterToString(packingDetailId)); // path parameter
            if (packingDetailTag != null) localVarPathParams.Add("packingDetailTag", Configuration.ApiClient.ParameterToString(packingDetailTag)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeletePackingDetailTag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get a duplicated a packingDetail by id Returns a duplicated packingDetail identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="packingDetailId">Id of the packingDetail to be duplicated.</param>
        /// <returns>PackingDetail</returns>
        public PackingDetail GetDuplicatePackingDetailById (int? packingDetailId)
        {
             ApiResponse<PackingDetail> localVarResponse = GetDuplicatePackingDetailByIdWithHttpInfo(packingDetailId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a duplicated a packingDetail by id Returns a duplicated packingDetail identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="packingDetailId">Id of the packingDetail to be duplicated.</param>
        /// <returns>ApiResponse of PackingDetail</returns>
        public ApiResponse< PackingDetail > GetDuplicatePackingDetailByIdWithHttpInfo (int? packingDetailId)
        {
            // verify the required parameter 'packingDetailId' is set
            if (packingDetailId == null)
                throw new ApiException(400, "Missing required parameter 'packingDetailId' when calling PackingDetailApi->GetDuplicatePackingDetailById");

            var localVarPath = "/beta/packingDetail/duplicate/{packingDetailId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (packingDetailId != null) localVarPathParams.Add("packingDetailId", Configuration.ApiClient.ParameterToString(packingDetailId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDuplicatePackingDetailById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PackingDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PackingDetail) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PackingDetail)));
        }

        /// <summary>
        /// Get a duplicated a packingDetail by id Returns a duplicated packingDetail identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="packingDetailId">Id of the packingDetail to be duplicated.</param>
        /// <returns>Task of PackingDetail</returns>
        public async System.Threading.Tasks.Task<PackingDetail> GetDuplicatePackingDetailByIdAsync (int? packingDetailId)
        {
             ApiResponse<PackingDetail> localVarResponse = await GetDuplicatePackingDetailByIdAsyncWithHttpInfo(packingDetailId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a duplicated a packingDetail by id Returns a duplicated packingDetail identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="packingDetailId">Id of the packingDetail to be duplicated.</param>
        /// <returns>Task of ApiResponse (PackingDetail)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PackingDetail>> GetDuplicatePackingDetailByIdAsyncWithHttpInfo (int? packingDetailId)
        {
            // verify the required parameter 'packingDetailId' is set
            if (packingDetailId == null)
                throw new ApiException(400, "Missing required parameter 'packingDetailId' when calling PackingDetailApi->GetDuplicatePackingDetailById");

            var localVarPath = "/beta/packingDetail/duplicate/{packingDetailId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (packingDetailId != null) localVarPathParams.Add("packingDetailId", Configuration.ApiClient.ParameterToString(packingDetailId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDuplicatePackingDetailById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PackingDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PackingDetail) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PackingDetail)));
        }

        /// <summary>
        /// Search packingDetails by filter Returns the list of packingDetails that match the given filter.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>List&lt;PackingDetail&gt;</returns>
        public List<PackingDetail> GetPackingDetailByFilter (string filter = null, int? page = null, int? limit = null, string sort = null)
        {
             ApiResponse<List<PackingDetail>> localVarResponse = GetPackingDetailByFilterWithHttpInfo(filter, page, limit, sort);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Search packingDetails by filter Returns the list of packingDetails that match the given filter.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>ApiResponse of List&lt;PackingDetail&gt;</returns>
        public ApiResponse< List<PackingDetail> > GetPackingDetailByFilterWithHttpInfo (string filter = null, int? page = null, int? limit = null, string sort = null)
        {

            var localVarPath = "/beta/packingDetail/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (filter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (page != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPackingDetailByFilter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<PackingDetail>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<PackingDetail>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<PackingDetail>)));
        }

        /// <summary>
        /// Search packingDetails by filter Returns the list of packingDetails that match the given filter.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>Task of List&lt;PackingDetail&gt;</returns>
        public async System.Threading.Tasks.Task<List<PackingDetail>> GetPackingDetailByFilterAsync (string filter = null, int? page = null, int? limit = null, string sort = null)
        {
             ApiResponse<List<PackingDetail>> localVarResponse = await GetPackingDetailByFilterAsyncWithHttpInfo(filter, page, limit, sort);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Search packingDetails by filter Returns the list of packingDetails that match the given filter.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;PackingDetail&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<PackingDetail>>> GetPackingDetailByFilterAsyncWithHttpInfo (string filter = null, int? page = null, int? limit = null, string sort = null)
        {

            var localVarPath = "/beta/packingDetail/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (filter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (page != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPackingDetailByFilter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<PackingDetail>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<PackingDetail>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<PackingDetail>)));
        }

        /// <summary>
        /// Get a packingDetail by id Returns the packingDetail identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="packingDetailId">Id of the packingDetail to be returned.</param>
        /// <returns>PackingDetail</returns>
        public PackingDetail GetPackingDetailById (int? packingDetailId)
        {
             ApiResponse<PackingDetail> localVarResponse = GetPackingDetailByIdWithHttpInfo(packingDetailId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a packingDetail by id Returns the packingDetail identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="packingDetailId">Id of the packingDetail to be returned.</param>
        /// <returns>ApiResponse of PackingDetail</returns>
        public ApiResponse< PackingDetail > GetPackingDetailByIdWithHttpInfo (int? packingDetailId)
        {
            // verify the required parameter 'packingDetailId' is set
            if (packingDetailId == null)
                throw new ApiException(400, "Missing required parameter 'packingDetailId' when calling PackingDetailApi->GetPackingDetailById");

            var localVarPath = "/beta/packingDetail/{packingDetailId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (packingDetailId != null) localVarPathParams.Add("packingDetailId", Configuration.ApiClient.ParameterToString(packingDetailId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPackingDetailById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PackingDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PackingDetail) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PackingDetail)));
        }

        /// <summary>
        /// Get a packingDetail by id Returns the packingDetail identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="packingDetailId">Id of the packingDetail to be returned.</param>
        /// <returns>Task of PackingDetail</returns>
        public async System.Threading.Tasks.Task<PackingDetail> GetPackingDetailByIdAsync (int? packingDetailId)
        {
             ApiResponse<PackingDetail> localVarResponse = await GetPackingDetailByIdAsyncWithHttpInfo(packingDetailId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a packingDetail by id Returns the packingDetail identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="packingDetailId">Id of the packingDetail to be returned.</param>
        /// <returns>Task of ApiResponse (PackingDetail)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PackingDetail>> GetPackingDetailByIdAsyncWithHttpInfo (int? packingDetailId)
        {
            // verify the required parameter 'packingDetailId' is set
            if (packingDetailId == null)
                throw new ApiException(400, "Missing required parameter 'packingDetailId' when calling PackingDetailApi->GetPackingDetailById");

            var localVarPath = "/beta/packingDetail/{packingDetailId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (packingDetailId != null) localVarPathParams.Add("packingDetailId", Configuration.ApiClient.ParameterToString(packingDetailId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPackingDetailById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PackingDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PackingDetail) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PackingDetail)));
        }

        /// <summary>
        /// Get the files for a packingDetail. Get all existing packingDetail files.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="packingDetailId">Id of the packingDetail to get files for</param>
        /// <returns></returns>
        public void GetPackingDetailFiles (int? packingDetailId)
        {
             GetPackingDetailFilesWithHttpInfo(packingDetailId);
        }

        /// <summary>
        /// Get the files for a packingDetail. Get all existing packingDetail files.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="packingDetailId">Id of the packingDetail to get files for</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GetPackingDetailFilesWithHttpInfo (int? packingDetailId)
        {
            // verify the required parameter 'packingDetailId' is set
            if (packingDetailId == null)
                throw new ApiException(400, "Missing required parameter 'packingDetailId' when calling PackingDetailApi->GetPackingDetailFiles");

            var localVarPath = "/beta/packingDetail/{packingDetailId}/file";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (packingDetailId != null) localVarPathParams.Add("packingDetailId", Configuration.ApiClient.ParameterToString(packingDetailId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPackingDetailFiles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get the files for a packingDetail. Get all existing packingDetail files.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="packingDetailId">Id of the packingDetail to get files for</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetPackingDetailFilesAsync (int? packingDetailId)
        {
             await GetPackingDetailFilesAsyncWithHttpInfo(packingDetailId);

        }

        /// <summary>
        /// Get the files for a packingDetail. Get all existing packingDetail files.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="packingDetailId">Id of the packingDetail to get files for</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetPackingDetailFilesAsyncWithHttpInfo (int? packingDetailId)
        {
            // verify the required parameter 'packingDetailId' is set
            if (packingDetailId == null)
                throw new ApiException(400, "Missing required parameter 'packingDetailId' when calling PackingDetailApi->GetPackingDetailFiles");

            var localVarPath = "/beta/packingDetail/{packingDetailId}/file";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (packingDetailId != null) localVarPathParams.Add("packingDetailId", Configuration.ApiClient.ParameterToString(packingDetailId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPackingDetailFiles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get the tags for a packingDetail. Get all existing packingDetail tags.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="packingDetailId">Id of the packingDetail to get tags for</param>
        /// <returns></returns>
        public void GetPackingDetailTags (int? packingDetailId)
        {
             GetPackingDetailTagsWithHttpInfo(packingDetailId);
        }

        /// <summary>
        /// Get the tags for a packingDetail. Get all existing packingDetail tags.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="packingDetailId">Id of the packingDetail to get tags for</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GetPackingDetailTagsWithHttpInfo (int? packingDetailId)
        {
            // verify the required parameter 'packingDetailId' is set
            if (packingDetailId == null)
                throw new ApiException(400, "Missing required parameter 'packingDetailId' when calling PackingDetailApi->GetPackingDetailTags");

            var localVarPath = "/beta/packingDetail/{packingDetailId}/tag";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (packingDetailId != null) localVarPathParams.Add("packingDetailId", Configuration.ApiClient.ParameterToString(packingDetailId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPackingDetailTags", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get the tags for a packingDetail. Get all existing packingDetail tags.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="packingDetailId">Id of the packingDetail to get tags for</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetPackingDetailTagsAsync (int? packingDetailId)
        {
             await GetPackingDetailTagsAsyncWithHttpInfo(packingDetailId);

        }

        /// <summary>
        /// Get the tags for a packingDetail. Get all existing packingDetail tags.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="packingDetailId">Id of the packingDetail to get tags for</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetPackingDetailTagsAsyncWithHttpInfo (int? packingDetailId)
        {
            // verify the required parameter 'packingDetailId' is set
            if (packingDetailId == null)
                throw new ApiException(400, "Missing required parameter 'packingDetailId' when calling PackingDetailApi->GetPackingDetailTags");

            var localVarPath = "/beta/packingDetail/{packingDetailId}/tag";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (packingDetailId != null) localVarPathParams.Add("packingDetailId", Configuration.ApiClient.ParameterToString(packingDetailId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPackingDetailTags", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update a packingDetail custom fields Updates an existing packingDetail custom fields using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">PackingDetail to be updated.</param>
        /// <returns></returns>
        public void UpdatePackingDetailCustomFields (PackingDetail body)
        {
             UpdatePackingDetailCustomFieldsWithHttpInfo(body);
        }

        /// <summary>
        /// Update a packingDetail custom fields Updates an existing packingDetail custom fields using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">PackingDetail to be updated.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdatePackingDetailCustomFieldsWithHttpInfo (PackingDetail body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling PackingDetailApi->UpdatePackingDetailCustomFields");

            var localVarPath = "/beta/packingDetail/customFields";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdatePackingDetailCustomFields", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update a packingDetail custom fields Updates an existing packingDetail custom fields using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">PackingDetail to be updated.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdatePackingDetailCustomFieldsAsync (PackingDetail body)
        {
             await UpdatePackingDetailCustomFieldsAsyncWithHttpInfo(body);

        }

        /// <summary>
        /// Update a packingDetail custom fields Updates an existing packingDetail custom fields using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">PackingDetail to be updated.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdatePackingDetailCustomFieldsAsyncWithHttpInfo (PackingDetail body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling PackingDetailApi->UpdatePackingDetailCustomFields");

            var localVarPath = "/beta/packingDetail/customFields";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdatePackingDetailCustomFields", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

    }
}
