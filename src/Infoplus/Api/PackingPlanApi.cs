/* 
 * Infoplus API
 *
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Infoplus.Client;
using Infoplus.Model;

namespace Infoplus.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPackingPlanApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create a packingPlan
        /// </summary>
        /// <remarks>
        /// Inserts a new packingPlan using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">PackingPlan to be inserted.</param>
        /// <returns>PackingPlan</returns>
        PackingPlan AddPackingPlan (PackingPlan body);

        /// <summary>
        /// Create a packingPlan
        /// </summary>
        /// <remarks>
        /// Inserts a new packingPlan using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">PackingPlan to be inserted.</param>
        /// <returns>ApiResponse of PackingPlan</returns>
        ApiResponse<PackingPlan> AddPackingPlanWithHttpInfo (PackingPlan body);
        /// <summary>
        /// Add new audit for a packingPlan
        /// </summary>
        /// <remarks>
        /// Adds an audit to an existing packingPlan.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="packingPlanId">Id of the packingPlan to add an audit to</param>
        /// <param name="packingPlanAudit">The audit to add</param>
        /// <returns></returns>
        void AddPackingPlanAudit (int? packingPlanId, string packingPlanAudit);

        /// <summary>
        /// Add new audit for a packingPlan
        /// </summary>
        /// <remarks>
        /// Adds an audit to an existing packingPlan.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="packingPlanId">Id of the packingPlan to add an audit to</param>
        /// <param name="packingPlanAudit">The audit to add</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddPackingPlanAuditWithHttpInfo (int? packingPlanId, string packingPlanAudit);
        /// <summary>
        /// Attach a file to a packingPlan
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing packingPlan.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="packingPlanId">Id of the packingPlan to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns></returns>
        void AddPackingPlanFile (int? packingPlanId, string fileName);

        /// <summary>
        /// Attach a file to a packingPlan
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing packingPlan.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="packingPlanId">Id of the packingPlan to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddPackingPlanFileWithHttpInfo (int? packingPlanId, string fileName);
        /// <summary>
        /// Attach a file to a packingPlan by URL.
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing packingPlan by URL.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="packingPlanId">Id of the packingPlan to add an file to</param>
        /// <returns></returns>
        void AddPackingPlanFileByURL (RecordFile body, int? packingPlanId);

        /// <summary>
        /// Attach a file to a packingPlan by URL.
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing packingPlan by URL.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="packingPlanId">Id of the packingPlan to add an file to</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddPackingPlanFileByURLWithHttpInfo (RecordFile body, int? packingPlanId);
        /// <summary>
        /// Add new tags for a packingPlan.
        /// </summary>
        /// <remarks>
        /// Adds a tag to an existing packingPlan.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="packingPlanId">Id of the packingPlan to add a tag to</param>
        /// <param name="packingPlanTag">The tag to add</param>
        /// <returns></returns>
        void AddPackingPlanTag (int? packingPlanId, string packingPlanTag);

        /// <summary>
        /// Add new tags for a packingPlan.
        /// </summary>
        /// <remarks>
        /// Adds a tag to an existing packingPlan.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="packingPlanId">Id of the packingPlan to add a tag to</param>
        /// <param name="packingPlanTag">The tag to add</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddPackingPlanTagWithHttpInfo (int? packingPlanId, string packingPlanTag);
        /// <summary>
        /// Delete a packingPlan
        /// </summary>
        /// <remarks>
        /// Deletes the packingPlan identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="packingPlanId">Id of the packingPlan to be deleted.</param>
        /// <returns></returns>
        void DeletePackingPlan (int? packingPlanId);

        /// <summary>
        /// Delete a packingPlan
        /// </summary>
        /// <remarks>
        /// Deletes the packingPlan identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="packingPlanId">Id of the packingPlan to be deleted.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeletePackingPlanWithHttpInfo (int? packingPlanId);
        /// <summary>
        /// Delete a file for a packingPlan.
        /// </summary>
        /// <remarks>
        /// Deletes an existing packingPlan file using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="packingPlanId">Id of the packingPlan to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns></returns>
        void DeletePackingPlanFile (int? packingPlanId, int? fileId);

        /// <summary>
        /// Delete a file for a packingPlan.
        /// </summary>
        /// <remarks>
        /// Deletes an existing packingPlan file using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="packingPlanId">Id of the packingPlan to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeletePackingPlanFileWithHttpInfo (int? packingPlanId, int? fileId);
        /// <summary>
        /// Delete a tag for a packingPlan.
        /// </summary>
        /// <remarks>
        /// Deletes an existing packingPlan tag using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="packingPlanId">Id of the packingPlan to remove tag from</param>
        /// <param name="packingPlanTag">The tag to delete</param>
        /// <returns></returns>
        void DeletePackingPlanTag (int? packingPlanId, string packingPlanTag);

        /// <summary>
        /// Delete a tag for a packingPlan.
        /// </summary>
        /// <remarks>
        /// Deletes an existing packingPlan tag using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="packingPlanId">Id of the packingPlan to remove tag from</param>
        /// <param name="packingPlanTag">The tag to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeletePackingPlanTagWithHttpInfo (int? packingPlanId, string packingPlanTag);
        /// <summary>
        /// Get a duplicated a packingPlan by id
        /// </summary>
        /// <remarks>
        /// Returns a duplicated packingPlan identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="packingPlanId">Id of the packingPlan to be duplicated.</param>
        /// <returns>PackingPlan</returns>
        PackingPlan GetDuplicatePackingPlanById (int? packingPlanId);

        /// <summary>
        /// Get a duplicated a packingPlan by id
        /// </summary>
        /// <remarks>
        /// Returns a duplicated packingPlan identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="packingPlanId">Id of the packingPlan to be duplicated.</param>
        /// <returns>ApiResponse of PackingPlan</returns>
        ApiResponse<PackingPlan> GetDuplicatePackingPlanByIdWithHttpInfo (int? packingPlanId);
        /// <summary>
        /// Search packingPlans by filter
        /// </summary>
        /// <remarks>
        /// Returns the list of packingPlans that match the given filter.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>List&lt;PackingPlan&gt;</returns>
        List<PackingPlan> GetPackingPlanByFilter (string filter = null, int? page = null, int? limit = null, string sort = null);

        /// <summary>
        /// Search packingPlans by filter
        /// </summary>
        /// <remarks>
        /// Returns the list of packingPlans that match the given filter.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>ApiResponse of List&lt;PackingPlan&gt;</returns>
        ApiResponse<List<PackingPlan>> GetPackingPlanByFilterWithHttpInfo (string filter = null, int? page = null, int? limit = null, string sort = null);
        /// <summary>
        /// Get a packingPlan by id
        /// </summary>
        /// <remarks>
        /// Returns the packingPlan identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="packingPlanId">Id of the packingPlan to be returned.</param>
        /// <returns>PackingPlan</returns>
        PackingPlan GetPackingPlanById (int? packingPlanId);

        /// <summary>
        /// Get a packingPlan by id
        /// </summary>
        /// <remarks>
        /// Returns the packingPlan identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="packingPlanId">Id of the packingPlan to be returned.</param>
        /// <returns>ApiResponse of PackingPlan</returns>
        ApiResponse<PackingPlan> GetPackingPlanByIdWithHttpInfo (int? packingPlanId);
        /// <summary>
        /// Get the files for a packingPlan.
        /// </summary>
        /// <remarks>
        /// Get all existing packingPlan files.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="packingPlanId">Id of the packingPlan to get files for</param>
        /// <returns></returns>
        void GetPackingPlanFiles (int? packingPlanId);

        /// <summary>
        /// Get the files for a packingPlan.
        /// </summary>
        /// <remarks>
        /// Get all existing packingPlan files.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="packingPlanId">Id of the packingPlan to get files for</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetPackingPlanFilesWithHttpInfo (int? packingPlanId);
        /// <summary>
        /// Get the tags for a packingPlan.
        /// </summary>
        /// <remarks>
        /// Get all existing packingPlan tags.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="packingPlanId">Id of the packingPlan to get tags for</param>
        /// <returns></returns>
        void GetPackingPlanTags (int? packingPlanId);

        /// <summary>
        /// Get the tags for a packingPlan.
        /// </summary>
        /// <remarks>
        /// Get all existing packingPlan tags.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="packingPlanId">Id of the packingPlan to get tags for</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetPackingPlanTagsWithHttpInfo (int? packingPlanId);
        /// <summary>
        /// Update a packingPlan
        /// </summary>
        /// <remarks>
        /// Updates an existing packingPlan using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">PackingPlan to be updated.</param>
        /// <returns></returns>
        void UpdatePackingPlan (PackingPlan body);

        /// <summary>
        /// Update a packingPlan
        /// </summary>
        /// <remarks>
        /// Updates an existing packingPlan using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">PackingPlan to be updated.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdatePackingPlanWithHttpInfo (PackingPlan body);
        /// <summary>
        /// Update a packingPlan custom fields
        /// </summary>
        /// <remarks>
        /// Updates an existing packingPlan custom fields using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">PackingPlan to be updated.</param>
        /// <returns></returns>
        void UpdatePackingPlanCustomFields (PackingPlan body);

        /// <summary>
        /// Update a packingPlan custom fields
        /// </summary>
        /// <remarks>
        /// Updates an existing packingPlan custom fields using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">PackingPlan to be updated.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdatePackingPlanCustomFieldsWithHttpInfo (PackingPlan body);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create a packingPlan
        /// </summary>
        /// <remarks>
        /// Inserts a new packingPlan using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">PackingPlan to be inserted.</param>
        /// <returns>Task of PackingPlan</returns>
        System.Threading.Tasks.Task<PackingPlan> AddPackingPlanAsync (PackingPlan body);

        /// <summary>
        /// Create a packingPlan
        /// </summary>
        /// <remarks>
        /// Inserts a new packingPlan using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">PackingPlan to be inserted.</param>
        /// <returns>Task of ApiResponse (PackingPlan)</returns>
        System.Threading.Tasks.Task<ApiResponse<PackingPlan>> AddPackingPlanAsyncWithHttpInfo (PackingPlan body);
        /// <summary>
        /// Add new audit for a packingPlan
        /// </summary>
        /// <remarks>
        /// Adds an audit to an existing packingPlan.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="packingPlanId">Id of the packingPlan to add an audit to</param>
        /// <param name="packingPlanAudit">The audit to add</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddPackingPlanAuditAsync (int? packingPlanId, string packingPlanAudit);

        /// <summary>
        /// Add new audit for a packingPlan
        /// </summary>
        /// <remarks>
        /// Adds an audit to an existing packingPlan.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="packingPlanId">Id of the packingPlan to add an audit to</param>
        /// <param name="packingPlanAudit">The audit to add</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddPackingPlanAuditAsyncWithHttpInfo (int? packingPlanId, string packingPlanAudit);
        /// <summary>
        /// Attach a file to a packingPlan
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing packingPlan.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="packingPlanId">Id of the packingPlan to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddPackingPlanFileAsync (int? packingPlanId, string fileName);

        /// <summary>
        /// Attach a file to a packingPlan
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing packingPlan.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="packingPlanId">Id of the packingPlan to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddPackingPlanFileAsyncWithHttpInfo (int? packingPlanId, string fileName);
        /// <summary>
        /// Attach a file to a packingPlan by URL.
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing packingPlan by URL.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="packingPlanId">Id of the packingPlan to add an file to</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddPackingPlanFileByURLAsync (RecordFile body, int? packingPlanId);

        /// <summary>
        /// Attach a file to a packingPlan by URL.
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing packingPlan by URL.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="packingPlanId">Id of the packingPlan to add an file to</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddPackingPlanFileByURLAsyncWithHttpInfo (RecordFile body, int? packingPlanId);
        /// <summary>
        /// Add new tags for a packingPlan.
        /// </summary>
        /// <remarks>
        /// Adds a tag to an existing packingPlan.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="packingPlanId">Id of the packingPlan to add a tag to</param>
        /// <param name="packingPlanTag">The tag to add</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddPackingPlanTagAsync (int? packingPlanId, string packingPlanTag);

        /// <summary>
        /// Add new tags for a packingPlan.
        /// </summary>
        /// <remarks>
        /// Adds a tag to an existing packingPlan.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="packingPlanId">Id of the packingPlan to add a tag to</param>
        /// <param name="packingPlanTag">The tag to add</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddPackingPlanTagAsyncWithHttpInfo (int? packingPlanId, string packingPlanTag);
        /// <summary>
        /// Delete a packingPlan
        /// </summary>
        /// <remarks>
        /// Deletes the packingPlan identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="packingPlanId">Id of the packingPlan to be deleted.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeletePackingPlanAsync (int? packingPlanId);

        /// <summary>
        /// Delete a packingPlan
        /// </summary>
        /// <remarks>
        /// Deletes the packingPlan identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="packingPlanId">Id of the packingPlan to be deleted.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeletePackingPlanAsyncWithHttpInfo (int? packingPlanId);
        /// <summary>
        /// Delete a file for a packingPlan.
        /// </summary>
        /// <remarks>
        /// Deletes an existing packingPlan file using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="packingPlanId">Id of the packingPlan to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeletePackingPlanFileAsync (int? packingPlanId, int? fileId);

        /// <summary>
        /// Delete a file for a packingPlan.
        /// </summary>
        /// <remarks>
        /// Deletes an existing packingPlan file using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="packingPlanId">Id of the packingPlan to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeletePackingPlanFileAsyncWithHttpInfo (int? packingPlanId, int? fileId);
        /// <summary>
        /// Delete a tag for a packingPlan.
        /// </summary>
        /// <remarks>
        /// Deletes an existing packingPlan tag using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="packingPlanId">Id of the packingPlan to remove tag from</param>
        /// <param name="packingPlanTag">The tag to delete</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeletePackingPlanTagAsync (int? packingPlanId, string packingPlanTag);

        /// <summary>
        /// Delete a tag for a packingPlan.
        /// </summary>
        /// <remarks>
        /// Deletes an existing packingPlan tag using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="packingPlanId">Id of the packingPlan to remove tag from</param>
        /// <param name="packingPlanTag">The tag to delete</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeletePackingPlanTagAsyncWithHttpInfo (int? packingPlanId, string packingPlanTag);
        /// <summary>
        /// Get a duplicated a packingPlan by id
        /// </summary>
        /// <remarks>
        /// Returns a duplicated packingPlan identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="packingPlanId">Id of the packingPlan to be duplicated.</param>
        /// <returns>Task of PackingPlan</returns>
        System.Threading.Tasks.Task<PackingPlan> GetDuplicatePackingPlanByIdAsync (int? packingPlanId);

        /// <summary>
        /// Get a duplicated a packingPlan by id
        /// </summary>
        /// <remarks>
        /// Returns a duplicated packingPlan identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="packingPlanId">Id of the packingPlan to be duplicated.</param>
        /// <returns>Task of ApiResponse (PackingPlan)</returns>
        System.Threading.Tasks.Task<ApiResponse<PackingPlan>> GetDuplicatePackingPlanByIdAsyncWithHttpInfo (int? packingPlanId);
        /// <summary>
        /// Search packingPlans by filter
        /// </summary>
        /// <remarks>
        /// Returns the list of packingPlans that match the given filter.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>Task of List&lt;PackingPlan&gt;</returns>
        System.Threading.Tasks.Task<List<PackingPlan>> GetPackingPlanByFilterAsync (string filter = null, int? page = null, int? limit = null, string sort = null);

        /// <summary>
        /// Search packingPlans by filter
        /// </summary>
        /// <remarks>
        /// Returns the list of packingPlans that match the given filter.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;PackingPlan&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<PackingPlan>>> GetPackingPlanByFilterAsyncWithHttpInfo (string filter = null, int? page = null, int? limit = null, string sort = null);
        /// <summary>
        /// Get a packingPlan by id
        /// </summary>
        /// <remarks>
        /// Returns the packingPlan identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="packingPlanId">Id of the packingPlan to be returned.</param>
        /// <returns>Task of PackingPlan</returns>
        System.Threading.Tasks.Task<PackingPlan> GetPackingPlanByIdAsync (int? packingPlanId);

        /// <summary>
        /// Get a packingPlan by id
        /// </summary>
        /// <remarks>
        /// Returns the packingPlan identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="packingPlanId">Id of the packingPlan to be returned.</param>
        /// <returns>Task of ApiResponse (PackingPlan)</returns>
        System.Threading.Tasks.Task<ApiResponse<PackingPlan>> GetPackingPlanByIdAsyncWithHttpInfo (int? packingPlanId);
        /// <summary>
        /// Get the files for a packingPlan.
        /// </summary>
        /// <remarks>
        /// Get all existing packingPlan files.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="packingPlanId">Id of the packingPlan to get files for</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetPackingPlanFilesAsync (int? packingPlanId);

        /// <summary>
        /// Get the files for a packingPlan.
        /// </summary>
        /// <remarks>
        /// Get all existing packingPlan files.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="packingPlanId">Id of the packingPlan to get files for</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetPackingPlanFilesAsyncWithHttpInfo (int? packingPlanId);
        /// <summary>
        /// Get the tags for a packingPlan.
        /// </summary>
        /// <remarks>
        /// Get all existing packingPlan tags.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="packingPlanId">Id of the packingPlan to get tags for</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetPackingPlanTagsAsync (int? packingPlanId);

        /// <summary>
        /// Get the tags for a packingPlan.
        /// </summary>
        /// <remarks>
        /// Get all existing packingPlan tags.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="packingPlanId">Id of the packingPlan to get tags for</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetPackingPlanTagsAsyncWithHttpInfo (int? packingPlanId);
        /// <summary>
        /// Update a packingPlan
        /// </summary>
        /// <remarks>
        /// Updates an existing packingPlan using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">PackingPlan to be updated.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdatePackingPlanAsync (PackingPlan body);

        /// <summary>
        /// Update a packingPlan
        /// </summary>
        /// <remarks>
        /// Updates an existing packingPlan using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">PackingPlan to be updated.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdatePackingPlanAsyncWithHttpInfo (PackingPlan body);
        /// <summary>
        /// Update a packingPlan custom fields
        /// </summary>
        /// <remarks>
        /// Updates an existing packingPlan custom fields using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">PackingPlan to be updated.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdatePackingPlanCustomFieldsAsync (PackingPlan body);

        /// <summary>
        /// Update a packingPlan custom fields
        /// </summary>
        /// <remarks>
        /// Updates an existing packingPlan custom fields using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">PackingPlan to be updated.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdatePackingPlanCustomFieldsAsyncWithHttpInfo (PackingPlan body);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class PackingPlanApi : IPackingPlanApi
    {
        private Infoplus.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="PackingPlanApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PackingPlanApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = Infoplus.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PackingPlanApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public PackingPlanApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Infoplus.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Infoplus.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create a packingPlan Inserts a new packingPlan using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">PackingPlan to be inserted.</param>
        /// <returns>PackingPlan</returns>
        public PackingPlan AddPackingPlan (PackingPlan body)
        {
             ApiResponse<PackingPlan> localVarResponse = AddPackingPlanWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a packingPlan Inserts a new packingPlan using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">PackingPlan to be inserted.</param>
        /// <returns>ApiResponse of PackingPlan</returns>
        public ApiResponse< PackingPlan > AddPackingPlanWithHttpInfo (PackingPlan body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling PackingPlanApi->AddPackingPlan");

            var localVarPath = "/beta/packingPlan";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddPackingPlan", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PackingPlan>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PackingPlan) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PackingPlan)));
        }

        /// <summary>
        /// Create a packingPlan Inserts a new packingPlan using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">PackingPlan to be inserted.</param>
        /// <returns>Task of PackingPlan</returns>
        public async System.Threading.Tasks.Task<PackingPlan> AddPackingPlanAsync (PackingPlan body)
        {
             ApiResponse<PackingPlan> localVarResponse = await AddPackingPlanAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a packingPlan Inserts a new packingPlan using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">PackingPlan to be inserted.</param>
        /// <returns>Task of ApiResponse (PackingPlan)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PackingPlan>> AddPackingPlanAsyncWithHttpInfo (PackingPlan body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling PackingPlanApi->AddPackingPlan");

            var localVarPath = "/beta/packingPlan";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddPackingPlan", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PackingPlan>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PackingPlan) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PackingPlan)));
        }

        /// <summary>
        /// Add new audit for a packingPlan Adds an audit to an existing packingPlan.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="packingPlanId">Id of the packingPlan to add an audit to</param>
        /// <param name="packingPlanAudit">The audit to add</param>
        /// <returns></returns>
        public void AddPackingPlanAudit (int? packingPlanId, string packingPlanAudit)
        {
             AddPackingPlanAuditWithHttpInfo(packingPlanId, packingPlanAudit);
        }

        /// <summary>
        /// Add new audit for a packingPlan Adds an audit to an existing packingPlan.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="packingPlanId">Id of the packingPlan to add an audit to</param>
        /// <param name="packingPlanAudit">The audit to add</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AddPackingPlanAuditWithHttpInfo (int? packingPlanId, string packingPlanAudit)
        {
            // verify the required parameter 'packingPlanId' is set
            if (packingPlanId == null)
                throw new ApiException(400, "Missing required parameter 'packingPlanId' when calling PackingPlanApi->AddPackingPlanAudit");
            // verify the required parameter 'packingPlanAudit' is set
            if (packingPlanAudit == null)
                throw new ApiException(400, "Missing required parameter 'packingPlanAudit' when calling PackingPlanApi->AddPackingPlanAudit");

            var localVarPath = "/beta/packingPlan/{packingPlanId}/audit/{packingPlanAudit}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (packingPlanId != null) localVarPathParams.Add("packingPlanId", Configuration.ApiClient.ParameterToString(packingPlanId)); // path parameter
            if (packingPlanAudit != null) localVarPathParams.Add("packingPlanAudit", Configuration.ApiClient.ParameterToString(packingPlanAudit)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddPackingPlanAudit", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Add new audit for a packingPlan Adds an audit to an existing packingPlan.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="packingPlanId">Id of the packingPlan to add an audit to</param>
        /// <param name="packingPlanAudit">The audit to add</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddPackingPlanAuditAsync (int? packingPlanId, string packingPlanAudit)
        {
             await AddPackingPlanAuditAsyncWithHttpInfo(packingPlanId, packingPlanAudit);

        }

        /// <summary>
        /// Add new audit for a packingPlan Adds an audit to an existing packingPlan.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="packingPlanId">Id of the packingPlan to add an audit to</param>
        /// <param name="packingPlanAudit">The audit to add</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddPackingPlanAuditAsyncWithHttpInfo (int? packingPlanId, string packingPlanAudit)
        {
            // verify the required parameter 'packingPlanId' is set
            if (packingPlanId == null)
                throw new ApiException(400, "Missing required parameter 'packingPlanId' when calling PackingPlanApi->AddPackingPlanAudit");
            // verify the required parameter 'packingPlanAudit' is set
            if (packingPlanAudit == null)
                throw new ApiException(400, "Missing required parameter 'packingPlanAudit' when calling PackingPlanApi->AddPackingPlanAudit");

            var localVarPath = "/beta/packingPlan/{packingPlanId}/audit/{packingPlanAudit}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (packingPlanId != null) localVarPathParams.Add("packingPlanId", Configuration.ApiClient.ParameterToString(packingPlanId)); // path parameter
            if (packingPlanAudit != null) localVarPathParams.Add("packingPlanAudit", Configuration.ApiClient.ParameterToString(packingPlanAudit)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddPackingPlanAudit", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Attach a file to a packingPlan Adds a file to an existing packingPlan.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="packingPlanId">Id of the packingPlan to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns></returns>
        public void AddPackingPlanFile (int? packingPlanId, string fileName)
        {
             AddPackingPlanFileWithHttpInfo(packingPlanId, fileName);
        }

        /// <summary>
        /// Attach a file to a packingPlan Adds a file to an existing packingPlan.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="packingPlanId">Id of the packingPlan to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AddPackingPlanFileWithHttpInfo (int? packingPlanId, string fileName)
        {
            // verify the required parameter 'packingPlanId' is set
            if (packingPlanId == null)
                throw new ApiException(400, "Missing required parameter 'packingPlanId' when calling PackingPlanApi->AddPackingPlanFile");
            // verify the required parameter 'fileName' is set
            if (fileName == null)
                throw new ApiException(400, "Missing required parameter 'fileName' when calling PackingPlanApi->AddPackingPlanFile");

            var localVarPath = "/beta/packingPlan/{packingPlanId}/file/{fileName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (packingPlanId != null) localVarPathParams.Add("packingPlanId", Configuration.ApiClient.ParameterToString(packingPlanId)); // path parameter
            if (fileName != null) localVarPathParams.Add("fileName", Configuration.ApiClient.ParameterToString(fileName)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddPackingPlanFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Attach a file to a packingPlan Adds a file to an existing packingPlan.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="packingPlanId">Id of the packingPlan to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddPackingPlanFileAsync (int? packingPlanId, string fileName)
        {
             await AddPackingPlanFileAsyncWithHttpInfo(packingPlanId, fileName);

        }

        /// <summary>
        /// Attach a file to a packingPlan Adds a file to an existing packingPlan.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="packingPlanId">Id of the packingPlan to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddPackingPlanFileAsyncWithHttpInfo (int? packingPlanId, string fileName)
        {
            // verify the required parameter 'packingPlanId' is set
            if (packingPlanId == null)
                throw new ApiException(400, "Missing required parameter 'packingPlanId' when calling PackingPlanApi->AddPackingPlanFile");
            // verify the required parameter 'fileName' is set
            if (fileName == null)
                throw new ApiException(400, "Missing required parameter 'fileName' when calling PackingPlanApi->AddPackingPlanFile");

            var localVarPath = "/beta/packingPlan/{packingPlanId}/file/{fileName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (packingPlanId != null) localVarPathParams.Add("packingPlanId", Configuration.ApiClient.ParameterToString(packingPlanId)); // path parameter
            if (fileName != null) localVarPathParams.Add("fileName", Configuration.ApiClient.ParameterToString(fileName)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddPackingPlanFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Attach a file to a packingPlan by URL. Adds a file to an existing packingPlan by URL.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="packingPlanId">Id of the packingPlan to add an file to</param>
        /// <returns></returns>
        public void AddPackingPlanFileByURL (RecordFile body, int? packingPlanId)
        {
             AddPackingPlanFileByURLWithHttpInfo(body, packingPlanId);
        }

        /// <summary>
        /// Attach a file to a packingPlan by URL. Adds a file to an existing packingPlan by URL.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="packingPlanId">Id of the packingPlan to add an file to</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AddPackingPlanFileByURLWithHttpInfo (RecordFile body, int? packingPlanId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling PackingPlanApi->AddPackingPlanFileByURL");
            // verify the required parameter 'packingPlanId' is set
            if (packingPlanId == null)
                throw new ApiException(400, "Missing required parameter 'packingPlanId' when calling PackingPlanApi->AddPackingPlanFileByURL");

            var localVarPath = "/beta/packingPlan/{packingPlanId}/file";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (packingPlanId != null) localVarPathParams.Add("packingPlanId", Configuration.ApiClient.ParameterToString(packingPlanId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddPackingPlanFileByURL", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Attach a file to a packingPlan by URL. Adds a file to an existing packingPlan by URL.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="packingPlanId">Id of the packingPlan to add an file to</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddPackingPlanFileByURLAsync (RecordFile body, int? packingPlanId)
        {
             await AddPackingPlanFileByURLAsyncWithHttpInfo(body, packingPlanId);

        }

        /// <summary>
        /// Attach a file to a packingPlan by URL. Adds a file to an existing packingPlan by URL.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="packingPlanId">Id of the packingPlan to add an file to</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddPackingPlanFileByURLAsyncWithHttpInfo (RecordFile body, int? packingPlanId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling PackingPlanApi->AddPackingPlanFileByURL");
            // verify the required parameter 'packingPlanId' is set
            if (packingPlanId == null)
                throw new ApiException(400, "Missing required parameter 'packingPlanId' when calling PackingPlanApi->AddPackingPlanFileByURL");

            var localVarPath = "/beta/packingPlan/{packingPlanId}/file";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (packingPlanId != null) localVarPathParams.Add("packingPlanId", Configuration.ApiClient.ParameterToString(packingPlanId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddPackingPlanFileByURL", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Add new tags for a packingPlan. Adds a tag to an existing packingPlan.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="packingPlanId">Id of the packingPlan to add a tag to</param>
        /// <param name="packingPlanTag">The tag to add</param>
        /// <returns></returns>
        public void AddPackingPlanTag (int? packingPlanId, string packingPlanTag)
        {
             AddPackingPlanTagWithHttpInfo(packingPlanId, packingPlanTag);
        }

        /// <summary>
        /// Add new tags for a packingPlan. Adds a tag to an existing packingPlan.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="packingPlanId">Id of the packingPlan to add a tag to</param>
        /// <param name="packingPlanTag">The tag to add</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AddPackingPlanTagWithHttpInfo (int? packingPlanId, string packingPlanTag)
        {
            // verify the required parameter 'packingPlanId' is set
            if (packingPlanId == null)
                throw new ApiException(400, "Missing required parameter 'packingPlanId' when calling PackingPlanApi->AddPackingPlanTag");
            // verify the required parameter 'packingPlanTag' is set
            if (packingPlanTag == null)
                throw new ApiException(400, "Missing required parameter 'packingPlanTag' when calling PackingPlanApi->AddPackingPlanTag");

            var localVarPath = "/beta/packingPlan/{packingPlanId}/tag/{packingPlanTag}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (packingPlanId != null) localVarPathParams.Add("packingPlanId", Configuration.ApiClient.ParameterToString(packingPlanId)); // path parameter
            if (packingPlanTag != null) localVarPathParams.Add("packingPlanTag", Configuration.ApiClient.ParameterToString(packingPlanTag)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddPackingPlanTag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Add new tags for a packingPlan. Adds a tag to an existing packingPlan.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="packingPlanId">Id of the packingPlan to add a tag to</param>
        /// <param name="packingPlanTag">The tag to add</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddPackingPlanTagAsync (int? packingPlanId, string packingPlanTag)
        {
             await AddPackingPlanTagAsyncWithHttpInfo(packingPlanId, packingPlanTag);

        }

        /// <summary>
        /// Add new tags for a packingPlan. Adds a tag to an existing packingPlan.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="packingPlanId">Id of the packingPlan to add a tag to</param>
        /// <param name="packingPlanTag">The tag to add</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddPackingPlanTagAsyncWithHttpInfo (int? packingPlanId, string packingPlanTag)
        {
            // verify the required parameter 'packingPlanId' is set
            if (packingPlanId == null)
                throw new ApiException(400, "Missing required parameter 'packingPlanId' when calling PackingPlanApi->AddPackingPlanTag");
            // verify the required parameter 'packingPlanTag' is set
            if (packingPlanTag == null)
                throw new ApiException(400, "Missing required parameter 'packingPlanTag' when calling PackingPlanApi->AddPackingPlanTag");

            var localVarPath = "/beta/packingPlan/{packingPlanId}/tag/{packingPlanTag}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (packingPlanId != null) localVarPathParams.Add("packingPlanId", Configuration.ApiClient.ParameterToString(packingPlanId)); // path parameter
            if (packingPlanTag != null) localVarPathParams.Add("packingPlanTag", Configuration.ApiClient.ParameterToString(packingPlanTag)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddPackingPlanTag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a packingPlan Deletes the packingPlan identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="packingPlanId">Id of the packingPlan to be deleted.</param>
        /// <returns></returns>
        public void DeletePackingPlan (int? packingPlanId)
        {
             DeletePackingPlanWithHttpInfo(packingPlanId);
        }

        /// <summary>
        /// Delete a packingPlan Deletes the packingPlan identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="packingPlanId">Id of the packingPlan to be deleted.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeletePackingPlanWithHttpInfo (int? packingPlanId)
        {
            // verify the required parameter 'packingPlanId' is set
            if (packingPlanId == null)
                throw new ApiException(400, "Missing required parameter 'packingPlanId' when calling PackingPlanApi->DeletePackingPlan");

            var localVarPath = "/beta/packingPlan/{packingPlanId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (packingPlanId != null) localVarPathParams.Add("packingPlanId", Configuration.ApiClient.ParameterToString(packingPlanId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeletePackingPlan", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a packingPlan Deletes the packingPlan identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="packingPlanId">Id of the packingPlan to be deleted.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeletePackingPlanAsync (int? packingPlanId)
        {
             await DeletePackingPlanAsyncWithHttpInfo(packingPlanId);

        }

        /// <summary>
        /// Delete a packingPlan Deletes the packingPlan identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="packingPlanId">Id of the packingPlan to be deleted.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeletePackingPlanAsyncWithHttpInfo (int? packingPlanId)
        {
            // verify the required parameter 'packingPlanId' is set
            if (packingPlanId == null)
                throw new ApiException(400, "Missing required parameter 'packingPlanId' when calling PackingPlanApi->DeletePackingPlan");

            var localVarPath = "/beta/packingPlan/{packingPlanId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (packingPlanId != null) localVarPathParams.Add("packingPlanId", Configuration.ApiClient.ParameterToString(packingPlanId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeletePackingPlan", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a file for a packingPlan. Deletes an existing packingPlan file using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="packingPlanId">Id of the packingPlan to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns></returns>
        public void DeletePackingPlanFile (int? packingPlanId, int? fileId)
        {
             DeletePackingPlanFileWithHttpInfo(packingPlanId, fileId);
        }

        /// <summary>
        /// Delete a file for a packingPlan. Deletes an existing packingPlan file using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="packingPlanId">Id of the packingPlan to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeletePackingPlanFileWithHttpInfo (int? packingPlanId, int? fileId)
        {
            // verify the required parameter 'packingPlanId' is set
            if (packingPlanId == null)
                throw new ApiException(400, "Missing required parameter 'packingPlanId' when calling PackingPlanApi->DeletePackingPlanFile");
            // verify the required parameter 'fileId' is set
            if (fileId == null)
                throw new ApiException(400, "Missing required parameter 'fileId' when calling PackingPlanApi->DeletePackingPlanFile");

            var localVarPath = "/beta/packingPlan/{packingPlanId}/file/{fileId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (packingPlanId != null) localVarPathParams.Add("packingPlanId", Configuration.ApiClient.ParameterToString(packingPlanId)); // path parameter
            if (fileId != null) localVarPathParams.Add("fileId", Configuration.ApiClient.ParameterToString(fileId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeletePackingPlanFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a file for a packingPlan. Deletes an existing packingPlan file using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="packingPlanId">Id of the packingPlan to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeletePackingPlanFileAsync (int? packingPlanId, int? fileId)
        {
             await DeletePackingPlanFileAsyncWithHttpInfo(packingPlanId, fileId);

        }

        /// <summary>
        /// Delete a file for a packingPlan. Deletes an existing packingPlan file using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="packingPlanId">Id of the packingPlan to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeletePackingPlanFileAsyncWithHttpInfo (int? packingPlanId, int? fileId)
        {
            // verify the required parameter 'packingPlanId' is set
            if (packingPlanId == null)
                throw new ApiException(400, "Missing required parameter 'packingPlanId' when calling PackingPlanApi->DeletePackingPlanFile");
            // verify the required parameter 'fileId' is set
            if (fileId == null)
                throw new ApiException(400, "Missing required parameter 'fileId' when calling PackingPlanApi->DeletePackingPlanFile");

            var localVarPath = "/beta/packingPlan/{packingPlanId}/file/{fileId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (packingPlanId != null) localVarPathParams.Add("packingPlanId", Configuration.ApiClient.ParameterToString(packingPlanId)); // path parameter
            if (fileId != null) localVarPathParams.Add("fileId", Configuration.ApiClient.ParameterToString(fileId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeletePackingPlanFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a tag for a packingPlan. Deletes an existing packingPlan tag using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="packingPlanId">Id of the packingPlan to remove tag from</param>
        /// <param name="packingPlanTag">The tag to delete</param>
        /// <returns></returns>
        public void DeletePackingPlanTag (int? packingPlanId, string packingPlanTag)
        {
             DeletePackingPlanTagWithHttpInfo(packingPlanId, packingPlanTag);
        }

        /// <summary>
        /// Delete a tag for a packingPlan. Deletes an existing packingPlan tag using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="packingPlanId">Id of the packingPlan to remove tag from</param>
        /// <param name="packingPlanTag">The tag to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeletePackingPlanTagWithHttpInfo (int? packingPlanId, string packingPlanTag)
        {
            // verify the required parameter 'packingPlanId' is set
            if (packingPlanId == null)
                throw new ApiException(400, "Missing required parameter 'packingPlanId' when calling PackingPlanApi->DeletePackingPlanTag");
            // verify the required parameter 'packingPlanTag' is set
            if (packingPlanTag == null)
                throw new ApiException(400, "Missing required parameter 'packingPlanTag' when calling PackingPlanApi->DeletePackingPlanTag");

            var localVarPath = "/beta/packingPlan/{packingPlanId}/tag/{packingPlanTag}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (packingPlanId != null) localVarPathParams.Add("packingPlanId", Configuration.ApiClient.ParameterToString(packingPlanId)); // path parameter
            if (packingPlanTag != null) localVarPathParams.Add("packingPlanTag", Configuration.ApiClient.ParameterToString(packingPlanTag)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeletePackingPlanTag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a tag for a packingPlan. Deletes an existing packingPlan tag using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="packingPlanId">Id of the packingPlan to remove tag from</param>
        /// <param name="packingPlanTag">The tag to delete</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeletePackingPlanTagAsync (int? packingPlanId, string packingPlanTag)
        {
             await DeletePackingPlanTagAsyncWithHttpInfo(packingPlanId, packingPlanTag);

        }

        /// <summary>
        /// Delete a tag for a packingPlan. Deletes an existing packingPlan tag using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="packingPlanId">Id of the packingPlan to remove tag from</param>
        /// <param name="packingPlanTag">The tag to delete</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeletePackingPlanTagAsyncWithHttpInfo (int? packingPlanId, string packingPlanTag)
        {
            // verify the required parameter 'packingPlanId' is set
            if (packingPlanId == null)
                throw new ApiException(400, "Missing required parameter 'packingPlanId' when calling PackingPlanApi->DeletePackingPlanTag");
            // verify the required parameter 'packingPlanTag' is set
            if (packingPlanTag == null)
                throw new ApiException(400, "Missing required parameter 'packingPlanTag' when calling PackingPlanApi->DeletePackingPlanTag");

            var localVarPath = "/beta/packingPlan/{packingPlanId}/tag/{packingPlanTag}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (packingPlanId != null) localVarPathParams.Add("packingPlanId", Configuration.ApiClient.ParameterToString(packingPlanId)); // path parameter
            if (packingPlanTag != null) localVarPathParams.Add("packingPlanTag", Configuration.ApiClient.ParameterToString(packingPlanTag)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeletePackingPlanTag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get a duplicated a packingPlan by id Returns a duplicated packingPlan identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="packingPlanId">Id of the packingPlan to be duplicated.</param>
        /// <returns>PackingPlan</returns>
        public PackingPlan GetDuplicatePackingPlanById (int? packingPlanId)
        {
             ApiResponse<PackingPlan> localVarResponse = GetDuplicatePackingPlanByIdWithHttpInfo(packingPlanId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a duplicated a packingPlan by id Returns a duplicated packingPlan identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="packingPlanId">Id of the packingPlan to be duplicated.</param>
        /// <returns>ApiResponse of PackingPlan</returns>
        public ApiResponse< PackingPlan > GetDuplicatePackingPlanByIdWithHttpInfo (int? packingPlanId)
        {
            // verify the required parameter 'packingPlanId' is set
            if (packingPlanId == null)
                throw new ApiException(400, "Missing required parameter 'packingPlanId' when calling PackingPlanApi->GetDuplicatePackingPlanById");

            var localVarPath = "/beta/packingPlan/duplicate/{packingPlanId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (packingPlanId != null) localVarPathParams.Add("packingPlanId", Configuration.ApiClient.ParameterToString(packingPlanId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDuplicatePackingPlanById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PackingPlan>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PackingPlan) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PackingPlan)));
        }

        /// <summary>
        /// Get a duplicated a packingPlan by id Returns a duplicated packingPlan identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="packingPlanId">Id of the packingPlan to be duplicated.</param>
        /// <returns>Task of PackingPlan</returns>
        public async System.Threading.Tasks.Task<PackingPlan> GetDuplicatePackingPlanByIdAsync (int? packingPlanId)
        {
             ApiResponse<PackingPlan> localVarResponse = await GetDuplicatePackingPlanByIdAsyncWithHttpInfo(packingPlanId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a duplicated a packingPlan by id Returns a duplicated packingPlan identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="packingPlanId">Id of the packingPlan to be duplicated.</param>
        /// <returns>Task of ApiResponse (PackingPlan)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PackingPlan>> GetDuplicatePackingPlanByIdAsyncWithHttpInfo (int? packingPlanId)
        {
            // verify the required parameter 'packingPlanId' is set
            if (packingPlanId == null)
                throw new ApiException(400, "Missing required parameter 'packingPlanId' when calling PackingPlanApi->GetDuplicatePackingPlanById");

            var localVarPath = "/beta/packingPlan/duplicate/{packingPlanId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (packingPlanId != null) localVarPathParams.Add("packingPlanId", Configuration.ApiClient.ParameterToString(packingPlanId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDuplicatePackingPlanById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PackingPlan>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PackingPlan) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PackingPlan)));
        }

        /// <summary>
        /// Search packingPlans by filter Returns the list of packingPlans that match the given filter.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>List&lt;PackingPlan&gt;</returns>
        public List<PackingPlan> GetPackingPlanByFilter (string filter = null, int? page = null, int? limit = null, string sort = null)
        {
             ApiResponse<List<PackingPlan>> localVarResponse = GetPackingPlanByFilterWithHttpInfo(filter, page, limit, sort);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Search packingPlans by filter Returns the list of packingPlans that match the given filter.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>ApiResponse of List&lt;PackingPlan&gt;</returns>
        public ApiResponse< List<PackingPlan> > GetPackingPlanByFilterWithHttpInfo (string filter = null, int? page = null, int? limit = null, string sort = null)
        {

            var localVarPath = "/beta/packingPlan/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (filter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (page != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPackingPlanByFilter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<PackingPlan>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<PackingPlan>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<PackingPlan>)));
        }

        /// <summary>
        /// Search packingPlans by filter Returns the list of packingPlans that match the given filter.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>Task of List&lt;PackingPlan&gt;</returns>
        public async System.Threading.Tasks.Task<List<PackingPlan>> GetPackingPlanByFilterAsync (string filter = null, int? page = null, int? limit = null, string sort = null)
        {
             ApiResponse<List<PackingPlan>> localVarResponse = await GetPackingPlanByFilterAsyncWithHttpInfo(filter, page, limit, sort);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Search packingPlans by filter Returns the list of packingPlans that match the given filter.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;PackingPlan&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<PackingPlan>>> GetPackingPlanByFilterAsyncWithHttpInfo (string filter = null, int? page = null, int? limit = null, string sort = null)
        {

            var localVarPath = "/beta/packingPlan/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (filter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (page != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPackingPlanByFilter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<PackingPlan>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<PackingPlan>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<PackingPlan>)));
        }

        /// <summary>
        /// Get a packingPlan by id Returns the packingPlan identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="packingPlanId">Id of the packingPlan to be returned.</param>
        /// <returns>PackingPlan</returns>
        public PackingPlan GetPackingPlanById (int? packingPlanId)
        {
             ApiResponse<PackingPlan> localVarResponse = GetPackingPlanByIdWithHttpInfo(packingPlanId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a packingPlan by id Returns the packingPlan identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="packingPlanId">Id of the packingPlan to be returned.</param>
        /// <returns>ApiResponse of PackingPlan</returns>
        public ApiResponse< PackingPlan > GetPackingPlanByIdWithHttpInfo (int? packingPlanId)
        {
            // verify the required parameter 'packingPlanId' is set
            if (packingPlanId == null)
                throw new ApiException(400, "Missing required parameter 'packingPlanId' when calling PackingPlanApi->GetPackingPlanById");

            var localVarPath = "/beta/packingPlan/{packingPlanId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (packingPlanId != null) localVarPathParams.Add("packingPlanId", Configuration.ApiClient.ParameterToString(packingPlanId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPackingPlanById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PackingPlan>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PackingPlan) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PackingPlan)));
        }

        /// <summary>
        /// Get a packingPlan by id Returns the packingPlan identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="packingPlanId">Id of the packingPlan to be returned.</param>
        /// <returns>Task of PackingPlan</returns>
        public async System.Threading.Tasks.Task<PackingPlan> GetPackingPlanByIdAsync (int? packingPlanId)
        {
             ApiResponse<PackingPlan> localVarResponse = await GetPackingPlanByIdAsyncWithHttpInfo(packingPlanId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a packingPlan by id Returns the packingPlan identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="packingPlanId">Id of the packingPlan to be returned.</param>
        /// <returns>Task of ApiResponse (PackingPlan)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PackingPlan>> GetPackingPlanByIdAsyncWithHttpInfo (int? packingPlanId)
        {
            // verify the required parameter 'packingPlanId' is set
            if (packingPlanId == null)
                throw new ApiException(400, "Missing required parameter 'packingPlanId' when calling PackingPlanApi->GetPackingPlanById");

            var localVarPath = "/beta/packingPlan/{packingPlanId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (packingPlanId != null) localVarPathParams.Add("packingPlanId", Configuration.ApiClient.ParameterToString(packingPlanId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPackingPlanById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PackingPlan>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PackingPlan) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PackingPlan)));
        }

        /// <summary>
        /// Get the files for a packingPlan. Get all existing packingPlan files.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="packingPlanId">Id of the packingPlan to get files for</param>
        /// <returns></returns>
        public void GetPackingPlanFiles (int? packingPlanId)
        {
             GetPackingPlanFilesWithHttpInfo(packingPlanId);
        }

        /// <summary>
        /// Get the files for a packingPlan. Get all existing packingPlan files.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="packingPlanId">Id of the packingPlan to get files for</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GetPackingPlanFilesWithHttpInfo (int? packingPlanId)
        {
            // verify the required parameter 'packingPlanId' is set
            if (packingPlanId == null)
                throw new ApiException(400, "Missing required parameter 'packingPlanId' when calling PackingPlanApi->GetPackingPlanFiles");

            var localVarPath = "/beta/packingPlan/{packingPlanId}/file";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (packingPlanId != null) localVarPathParams.Add("packingPlanId", Configuration.ApiClient.ParameterToString(packingPlanId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPackingPlanFiles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get the files for a packingPlan. Get all existing packingPlan files.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="packingPlanId">Id of the packingPlan to get files for</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetPackingPlanFilesAsync (int? packingPlanId)
        {
             await GetPackingPlanFilesAsyncWithHttpInfo(packingPlanId);

        }

        /// <summary>
        /// Get the files for a packingPlan. Get all existing packingPlan files.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="packingPlanId">Id of the packingPlan to get files for</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetPackingPlanFilesAsyncWithHttpInfo (int? packingPlanId)
        {
            // verify the required parameter 'packingPlanId' is set
            if (packingPlanId == null)
                throw new ApiException(400, "Missing required parameter 'packingPlanId' when calling PackingPlanApi->GetPackingPlanFiles");

            var localVarPath = "/beta/packingPlan/{packingPlanId}/file";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (packingPlanId != null) localVarPathParams.Add("packingPlanId", Configuration.ApiClient.ParameterToString(packingPlanId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPackingPlanFiles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get the tags for a packingPlan. Get all existing packingPlan tags.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="packingPlanId">Id of the packingPlan to get tags for</param>
        /// <returns></returns>
        public void GetPackingPlanTags (int? packingPlanId)
        {
             GetPackingPlanTagsWithHttpInfo(packingPlanId);
        }

        /// <summary>
        /// Get the tags for a packingPlan. Get all existing packingPlan tags.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="packingPlanId">Id of the packingPlan to get tags for</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GetPackingPlanTagsWithHttpInfo (int? packingPlanId)
        {
            // verify the required parameter 'packingPlanId' is set
            if (packingPlanId == null)
                throw new ApiException(400, "Missing required parameter 'packingPlanId' when calling PackingPlanApi->GetPackingPlanTags");

            var localVarPath = "/beta/packingPlan/{packingPlanId}/tag";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (packingPlanId != null) localVarPathParams.Add("packingPlanId", Configuration.ApiClient.ParameterToString(packingPlanId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPackingPlanTags", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get the tags for a packingPlan. Get all existing packingPlan tags.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="packingPlanId">Id of the packingPlan to get tags for</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetPackingPlanTagsAsync (int? packingPlanId)
        {
             await GetPackingPlanTagsAsyncWithHttpInfo(packingPlanId);

        }

        /// <summary>
        /// Get the tags for a packingPlan. Get all existing packingPlan tags.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="packingPlanId">Id of the packingPlan to get tags for</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetPackingPlanTagsAsyncWithHttpInfo (int? packingPlanId)
        {
            // verify the required parameter 'packingPlanId' is set
            if (packingPlanId == null)
                throw new ApiException(400, "Missing required parameter 'packingPlanId' when calling PackingPlanApi->GetPackingPlanTags");

            var localVarPath = "/beta/packingPlan/{packingPlanId}/tag";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (packingPlanId != null) localVarPathParams.Add("packingPlanId", Configuration.ApiClient.ParameterToString(packingPlanId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPackingPlanTags", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update a packingPlan Updates an existing packingPlan using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">PackingPlan to be updated.</param>
        /// <returns></returns>
        public void UpdatePackingPlan (PackingPlan body)
        {
             UpdatePackingPlanWithHttpInfo(body);
        }

        /// <summary>
        /// Update a packingPlan Updates an existing packingPlan using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">PackingPlan to be updated.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdatePackingPlanWithHttpInfo (PackingPlan body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling PackingPlanApi->UpdatePackingPlan");

            var localVarPath = "/beta/packingPlan";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdatePackingPlan", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update a packingPlan Updates an existing packingPlan using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">PackingPlan to be updated.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdatePackingPlanAsync (PackingPlan body)
        {
             await UpdatePackingPlanAsyncWithHttpInfo(body);

        }

        /// <summary>
        /// Update a packingPlan Updates an existing packingPlan using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">PackingPlan to be updated.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdatePackingPlanAsyncWithHttpInfo (PackingPlan body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling PackingPlanApi->UpdatePackingPlan");

            var localVarPath = "/beta/packingPlan";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdatePackingPlan", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update a packingPlan custom fields Updates an existing packingPlan custom fields using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">PackingPlan to be updated.</param>
        /// <returns></returns>
        public void UpdatePackingPlanCustomFields (PackingPlan body)
        {
             UpdatePackingPlanCustomFieldsWithHttpInfo(body);
        }

        /// <summary>
        /// Update a packingPlan custom fields Updates an existing packingPlan custom fields using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">PackingPlan to be updated.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdatePackingPlanCustomFieldsWithHttpInfo (PackingPlan body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling PackingPlanApi->UpdatePackingPlanCustomFields");

            var localVarPath = "/beta/packingPlan/customFields";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdatePackingPlanCustomFields", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update a packingPlan custom fields Updates an existing packingPlan custom fields using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">PackingPlan to be updated.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdatePackingPlanCustomFieldsAsync (PackingPlan body)
        {
             await UpdatePackingPlanCustomFieldsAsyncWithHttpInfo(body);

        }

        /// <summary>
        /// Update a packingPlan custom fields Updates an existing packingPlan custom fields using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">PackingPlan to be updated.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdatePackingPlanCustomFieldsAsyncWithHttpInfo (PackingPlan body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling PackingPlanApi->UpdatePackingPlanCustomFields");

            var localVarPath = "/beta/packingPlan/customFields";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdatePackingPlanCustomFields", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

    }
}
