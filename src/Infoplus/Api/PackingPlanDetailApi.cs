/* 
 * Infoplus API
 *
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Infoplus.Client;
using Infoplus.Model;

namespace Infoplus.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPackingPlanDetailApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Add new audit for a packingPlanDetail
        /// </summary>
        /// <remarks>
        /// Adds an audit to an existing packingPlanDetail.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="packingPlanDetailId">Id of the packingPlanDetail to add an audit to</param>
        /// <param name="packingPlanDetailAudit">The audit to add</param>
        /// <returns></returns>
        void AddPackingPlanDetailAudit (int? packingPlanDetailId, string packingPlanDetailAudit);

        /// <summary>
        /// Add new audit for a packingPlanDetail
        /// </summary>
        /// <remarks>
        /// Adds an audit to an existing packingPlanDetail.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="packingPlanDetailId">Id of the packingPlanDetail to add an audit to</param>
        /// <param name="packingPlanDetailAudit">The audit to add</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddPackingPlanDetailAuditWithHttpInfo (int? packingPlanDetailId, string packingPlanDetailAudit);
        /// <summary>
        /// Attach a file to a packingPlanDetail
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing packingPlanDetail.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="packingPlanDetailId">Id of the packingPlanDetail to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns></returns>
        void AddPackingPlanDetailFile (int? packingPlanDetailId, string fileName);

        /// <summary>
        /// Attach a file to a packingPlanDetail
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing packingPlanDetail.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="packingPlanDetailId">Id of the packingPlanDetail to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddPackingPlanDetailFileWithHttpInfo (int? packingPlanDetailId, string fileName);
        /// <summary>
        /// Attach a file to a packingPlanDetail by URL.
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing packingPlanDetail by URL.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="packingPlanDetailId">Id of the packingPlanDetail to add an file to</param>
        /// <returns></returns>
        void AddPackingPlanDetailFileByURL (RecordFile body, int? packingPlanDetailId);

        /// <summary>
        /// Attach a file to a packingPlanDetail by URL.
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing packingPlanDetail by URL.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="packingPlanDetailId">Id of the packingPlanDetail to add an file to</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddPackingPlanDetailFileByURLWithHttpInfo (RecordFile body, int? packingPlanDetailId);
        /// <summary>
        /// Add new tags for a packingPlanDetail.
        /// </summary>
        /// <remarks>
        /// Adds a tag to an existing packingPlanDetail.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="packingPlanDetailId">Id of the packingPlanDetail to add a tag to</param>
        /// <param name="packingPlanDetailTag">The tag to add</param>
        /// <returns></returns>
        void AddPackingPlanDetailTag (int? packingPlanDetailId, string packingPlanDetailTag);

        /// <summary>
        /// Add new tags for a packingPlanDetail.
        /// </summary>
        /// <remarks>
        /// Adds a tag to an existing packingPlanDetail.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="packingPlanDetailId">Id of the packingPlanDetail to add a tag to</param>
        /// <param name="packingPlanDetailTag">The tag to add</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddPackingPlanDetailTagWithHttpInfo (int? packingPlanDetailId, string packingPlanDetailTag);
        /// <summary>
        /// Delete a file for a packingPlanDetail.
        /// </summary>
        /// <remarks>
        /// Deletes an existing packingPlanDetail file using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="packingPlanDetailId">Id of the packingPlanDetail to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns></returns>
        void DeletePackingPlanDetailFile (int? packingPlanDetailId, int? fileId);

        /// <summary>
        /// Delete a file for a packingPlanDetail.
        /// </summary>
        /// <remarks>
        /// Deletes an existing packingPlanDetail file using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="packingPlanDetailId">Id of the packingPlanDetail to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeletePackingPlanDetailFileWithHttpInfo (int? packingPlanDetailId, int? fileId);
        /// <summary>
        /// Delete a tag for a packingPlanDetail.
        /// </summary>
        /// <remarks>
        /// Deletes an existing packingPlanDetail tag using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="packingPlanDetailId">Id of the packingPlanDetail to remove tag from</param>
        /// <param name="packingPlanDetailTag">The tag to delete</param>
        /// <returns></returns>
        void DeletePackingPlanDetailTag (int? packingPlanDetailId, string packingPlanDetailTag);

        /// <summary>
        /// Delete a tag for a packingPlanDetail.
        /// </summary>
        /// <remarks>
        /// Deletes an existing packingPlanDetail tag using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="packingPlanDetailId">Id of the packingPlanDetail to remove tag from</param>
        /// <param name="packingPlanDetailTag">The tag to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeletePackingPlanDetailTagWithHttpInfo (int? packingPlanDetailId, string packingPlanDetailTag);
        /// <summary>
        /// Get a duplicated a packingPlanDetail by id
        /// </summary>
        /// <remarks>
        /// Returns a duplicated packingPlanDetail identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="packingPlanDetailId">Id of the packingPlanDetail to be duplicated.</param>
        /// <returns>PackingPlanDetail</returns>
        PackingPlanDetail GetDuplicatePackingPlanDetailById (int? packingPlanDetailId);

        /// <summary>
        /// Get a duplicated a packingPlanDetail by id
        /// </summary>
        /// <remarks>
        /// Returns a duplicated packingPlanDetail identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="packingPlanDetailId">Id of the packingPlanDetail to be duplicated.</param>
        /// <returns>ApiResponse of PackingPlanDetail</returns>
        ApiResponse<PackingPlanDetail> GetDuplicatePackingPlanDetailByIdWithHttpInfo (int? packingPlanDetailId);
        /// <summary>
        /// Search packingPlanDetails by filter
        /// </summary>
        /// <remarks>
        /// Returns the list of packingPlanDetails that match the given filter.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>List&lt;PackingPlanDetail&gt;</returns>
        List<PackingPlanDetail> GetPackingPlanDetailByFilter (string filter = null, int? page = null, int? limit = null, string sort = null);

        /// <summary>
        /// Search packingPlanDetails by filter
        /// </summary>
        /// <remarks>
        /// Returns the list of packingPlanDetails that match the given filter.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>ApiResponse of List&lt;PackingPlanDetail&gt;</returns>
        ApiResponse<List<PackingPlanDetail>> GetPackingPlanDetailByFilterWithHttpInfo (string filter = null, int? page = null, int? limit = null, string sort = null);
        /// <summary>
        /// Get a packingPlanDetail by id
        /// </summary>
        /// <remarks>
        /// Returns the packingPlanDetail identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="packingPlanDetailId">Id of the packingPlanDetail to be returned.</param>
        /// <returns>PackingPlanDetail</returns>
        PackingPlanDetail GetPackingPlanDetailById (int? packingPlanDetailId);

        /// <summary>
        /// Get a packingPlanDetail by id
        /// </summary>
        /// <remarks>
        /// Returns the packingPlanDetail identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="packingPlanDetailId">Id of the packingPlanDetail to be returned.</param>
        /// <returns>ApiResponse of PackingPlanDetail</returns>
        ApiResponse<PackingPlanDetail> GetPackingPlanDetailByIdWithHttpInfo (int? packingPlanDetailId);
        /// <summary>
        /// Get the files for a packingPlanDetail.
        /// </summary>
        /// <remarks>
        /// Get all existing packingPlanDetail files.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="packingPlanDetailId">Id of the packingPlanDetail to get files for</param>
        /// <returns></returns>
        void GetPackingPlanDetailFiles (int? packingPlanDetailId);

        /// <summary>
        /// Get the files for a packingPlanDetail.
        /// </summary>
        /// <remarks>
        /// Get all existing packingPlanDetail files.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="packingPlanDetailId">Id of the packingPlanDetail to get files for</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetPackingPlanDetailFilesWithHttpInfo (int? packingPlanDetailId);
        /// <summary>
        /// Get the tags for a packingPlanDetail.
        /// </summary>
        /// <remarks>
        /// Get all existing packingPlanDetail tags.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="packingPlanDetailId">Id of the packingPlanDetail to get tags for</param>
        /// <returns></returns>
        void GetPackingPlanDetailTags (int? packingPlanDetailId);

        /// <summary>
        /// Get the tags for a packingPlanDetail.
        /// </summary>
        /// <remarks>
        /// Get all existing packingPlanDetail tags.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="packingPlanDetailId">Id of the packingPlanDetail to get tags for</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetPackingPlanDetailTagsWithHttpInfo (int? packingPlanDetailId);
        /// <summary>
        /// Update a packingPlanDetail custom fields
        /// </summary>
        /// <remarks>
        /// Updates an existing packingPlanDetail custom fields using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">PackingPlanDetail to be updated.</param>
        /// <returns></returns>
        void UpdatePackingPlanDetailCustomFields (PackingPlanDetail body);

        /// <summary>
        /// Update a packingPlanDetail custom fields
        /// </summary>
        /// <remarks>
        /// Updates an existing packingPlanDetail custom fields using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">PackingPlanDetail to be updated.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdatePackingPlanDetailCustomFieldsWithHttpInfo (PackingPlanDetail body);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Add new audit for a packingPlanDetail
        /// </summary>
        /// <remarks>
        /// Adds an audit to an existing packingPlanDetail.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="packingPlanDetailId">Id of the packingPlanDetail to add an audit to</param>
        /// <param name="packingPlanDetailAudit">The audit to add</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddPackingPlanDetailAuditAsync (int? packingPlanDetailId, string packingPlanDetailAudit);

        /// <summary>
        /// Add new audit for a packingPlanDetail
        /// </summary>
        /// <remarks>
        /// Adds an audit to an existing packingPlanDetail.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="packingPlanDetailId">Id of the packingPlanDetail to add an audit to</param>
        /// <param name="packingPlanDetailAudit">The audit to add</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddPackingPlanDetailAuditAsyncWithHttpInfo (int? packingPlanDetailId, string packingPlanDetailAudit);
        /// <summary>
        /// Attach a file to a packingPlanDetail
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing packingPlanDetail.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="packingPlanDetailId">Id of the packingPlanDetail to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddPackingPlanDetailFileAsync (int? packingPlanDetailId, string fileName);

        /// <summary>
        /// Attach a file to a packingPlanDetail
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing packingPlanDetail.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="packingPlanDetailId">Id of the packingPlanDetail to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddPackingPlanDetailFileAsyncWithHttpInfo (int? packingPlanDetailId, string fileName);
        /// <summary>
        /// Attach a file to a packingPlanDetail by URL.
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing packingPlanDetail by URL.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="packingPlanDetailId">Id of the packingPlanDetail to add an file to</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddPackingPlanDetailFileByURLAsync (RecordFile body, int? packingPlanDetailId);

        /// <summary>
        /// Attach a file to a packingPlanDetail by URL.
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing packingPlanDetail by URL.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="packingPlanDetailId">Id of the packingPlanDetail to add an file to</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddPackingPlanDetailFileByURLAsyncWithHttpInfo (RecordFile body, int? packingPlanDetailId);
        /// <summary>
        /// Add new tags for a packingPlanDetail.
        /// </summary>
        /// <remarks>
        /// Adds a tag to an existing packingPlanDetail.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="packingPlanDetailId">Id of the packingPlanDetail to add a tag to</param>
        /// <param name="packingPlanDetailTag">The tag to add</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddPackingPlanDetailTagAsync (int? packingPlanDetailId, string packingPlanDetailTag);

        /// <summary>
        /// Add new tags for a packingPlanDetail.
        /// </summary>
        /// <remarks>
        /// Adds a tag to an existing packingPlanDetail.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="packingPlanDetailId">Id of the packingPlanDetail to add a tag to</param>
        /// <param name="packingPlanDetailTag">The tag to add</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddPackingPlanDetailTagAsyncWithHttpInfo (int? packingPlanDetailId, string packingPlanDetailTag);
        /// <summary>
        /// Delete a file for a packingPlanDetail.
        /// </summary>
        /// <remarks>
        /// Deletes an existing packingPlanDetail file using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="packingPlanDetailId">Id of the packingPlanDetail to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeletePackingPlanDetailFileAsync (int? packingPlanDetailId, int? fileId);

        /// <summary>
        /// Delete a file for a packingPlanDetail.
        /// </summary>
        /// <remarks>
        /// Deletes an existing packingPlanDetail file using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="packingPlanDetailId">Id of the packingPlanDetail to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeletePackingPlanDetailFileAsyncWithHttpInfo (int? packingPlanDetailId, int? fileId);
        /// <summary>
        /// Delete a tag for a packingPlanDetail.
        /// </summary>
        /// <remarks>
        /// Deletes an existing packingPlanDetail tag using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="packingPlanDetailId">Id of the packingPlanDetail to remove tag from</param>
        /// <param name="packingPlanDetailTag">The tag to delete</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeletePackingPlanDetailTagAsync (int? packingPlanDetailId, string packingPlanDetailTag);

        /// <summary>
        /// Delete a tag for a packingPlanDetail.
        /// </summary>
        /// <remarks>
        /// Deletes an existing packingPlanDetail tag using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="packingPlanDetailId">Id of the packingPlanDetail to remove tag from</param>
        /// <param name="packingPlanDetailTag">The tag to delete</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeletePackingPlanDetailTagAsyncWithHttpInfo (int? packingPlanDetailId, string packingPlanDetailTag);
        /// <summary>
        /// Get a duplicated a packingPlanDetail by id
        /// </summary>
        /// <remarks>
        /// Returns a duplicated packingPlanDetail identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="packingPlanDetailId">Id of the packingPlanDetail to be duplicated.</param>
        /// <returns>Task of PackingPlanDetail</returns>
        System.Threading.Tasks.Task<PackingPlanDetail> GetDuplicatePackingPlanDetailByIdAsync (int? packingPlanDetailId);

        /// <summary>
        /// Get a duplicated a packingPlanDetail by id
        /// </summary>
        /// <remarks>
        /// Returns a duplicated packingPlanDetail identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="packingPlanDetailId">Id of the packingPlanDetail to be duplicated.</param>
        /// <returns>Task of ApiResponse (PackingPlanDetail)</returns>
        System.Threading.Tasks.Task<ApiResponse<PackingPlanDetail>> GetDuplicatePackingPlanDetailByIdAsyncWithHttpInfo (int? packingPlanDetailId);
        /// <summary>
        /// Search packingPlanDetails by filter
        /// </summary>
        /// <remarks>
        /// Returns the list of packingPlanDetails that match the given filter.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>Task of List&lt;PackingPlanDetail&gt;</returns>
        System.Threading.Tasks.Task<List<PackingPlanDetail>> GetPackingPlanDetailByFilterAsync (string filter = null, int? page = null, int? limit = null, string sort = null);

        /// <summary>
        /// Search packingPlanDetails by filter
        /// </summary>
        /// <remarks>
        /// Returns the list of packingPlanDetails that match the given filter.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;PackingPlanDetail&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<PackingPlanDetail>>> GetPackingPlanDetailByFilterAsyncWithHttpInfo (string filter = null, int? page = null, int? limit = null, string sort = null);
        /// <summary>
        /// Get a packingPlanDetail by id
        /// </summary>
        /// <remarks>
        /// Returns the packingPlanDetail identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="packingPlanDetailId">Id of the packingPlanDetail to be returned.</param>
        /// <returns>Task of PackingPlanDetail</returns>
        System.Threading.Tasks.Task<PackingPlanDetail> GetPackingPlanDetailByIdAsync (int? packingPlanDetailId);

        /// <summary>
        /// Get a packingPlanDetail by id
        /// </summary>
        /// <remarks>
        /// Returns the packingPlanDetail identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="packingPlanDetailId">Id of the packingPlanDetail to be returned.</param>
        /// <returns>Task of ApiResponse (PackingPlanDetail)</returns>
        System.Threading.Tasks.Task<ApiResponse<PackingPlanDetail>> GetPackingPlanDetailByIdAsyncWithHttpInfo (int? packingPlanDetailId);
        /// <summary>
        /// Get the files for a packingPlanDetail.
        /// </summary>
        /// <remarks>
        /// Get all existing packingPlanDetail files.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="packingPlanDetailId">Id of the packingPlanDetail to get files for</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetPackingPlanDetailFilesAsync (int? packingPlanDetailId);

        /// <summary>
        /// Get the files for a packingPlanDetail.
        /// </summary>
        /// <remarks>
        /// Get all existing packingPlanDetail files.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="packingPlanDetailId">Id of the packingPlanDetail to get files for</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetPackingPlanDetailFilesAsyncWithHttpInfo (int? packingPlanDetailId);
        /// <summary>
        /// Get the tags for a packingPlanDetail.
        /// </summary>
        /// <remarks>
        /// Get all existing packingPlanDetail tags.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="packingPlanDetailId">Id of the packingPlanDetail to get tags for</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetPackingPlanDetailTagsAsync (int? packingPlanDetailId);

        /// <summary>
        /// Get the tags for a packingPlanDetail.
        /// </summary>
        /// <remarks>
        /// Get all existing packingPlanDetail tags.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="packingPlanDetailId">Id of the packingPlanDetail to get tags for</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetPackingPlanDetailTagsAsyncWithHttpInfo (int? packingPlanDetailId);
        /// <summary>
        /// Update a packingPlanDetail custom fields
        /// </summary>
        /// <remarks>
        /// Updates an existing packingPlanDetail custom fields using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">PackingPlanDetail to be updated.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdatePackingPlanDetailCustomFieldsAsync (PackingPlanDetail body);

        /// <summary>
        /// Update a packingPlanDetail custom fields
        /// </summary>
        /// <remarks>
        /// Updates an existing packingPlanDetail custom fields using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">PackingPlanDetail to be updated.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdatePackingPlanDetailCustomFieldsAsyncWithHttpInfo (PackingPlanDetail body);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class PackingPlanDetailApi : IPackingPlanDetailApi
    {
        private Infoplus.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="PackingPlanDetailApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PackingPlanDetailApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = Infoplus.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PackingPlanDetailApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public PackingPlanDetailApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Infoplus.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Infoplus.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Add new audit for a packingPlanDetail Adds an audit to an existing packingPlanDetail.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="packingPlanDetailId">Id of the packingPlanDetail to add an audit to</param>
        /// <param name="packingPlanDetailAudit">The audit to add</param>
        /// <returns></returns>
        public void AddPackingPlanDetailAudit (int? packingPlanDetailId, string packingPlanDetailAudit)
        {
             AddPackingPlanDetailAuditWithHttpInfo(packingPlanDetailId, packingPlanDetailAudit);
        }

        /// <summary>
        /// Add new audit for a packingPlanDetail Adds an audit to an existing packingPlanDetail.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="packingPlanDetailId">Id of the packingPlanDetail to add an audit to</param>
        /// <param name="packingPlanDetailAudit">The audit to add</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AddPackingPlanDetailAuditWithHttpInfo (int? packingPlanDetailId, string packingPlanDetailAudit)
        {
            // verify the required parameter 'packingPlanDetailId' is set
            if (packingPlanDetailId == null)
                throw new ApiException(400, "Missing required parameter 'packingPlanDetailId' when calling PackingPlanDetailApi->AddPackingPlanDetailAudit");
            // verify the required parameter 'packingPlanDetailAudit' is set
            if (packingPlanDetailAudit == null)
                throw new ApiException(400, "Missing required parameter 'packingPlanDetailAudit' when calling PackingPlanDetailApi->AddPackingPlanDetailAudit");

            var localVarPath = "/beta/packingPlanDetail/{packingPlanDetailId}/audit/{packingPlanDetailAudit}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (packingPlanDetailId != null) localVarPathParams.Add("packingPlanDetailId", Configuration.ApiClient.ParameterToString(packingPlanDetailId)); // path parameter
            if (packingPlanDetailAudit != null) localVarPathParams.Add("packingPlanDetailAudit", Configuration.ApiClient.ParameterToString(packingPlanDetailAudit)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddPackingPlanDetailAudit", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Add new audit for a packingPlanDetail Adds an audit to an existing packingPlanDetail.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="packingPlanDetailId">Id of the packingPlanDetail to add an audit to</param>
        /// <param name="packingPlanDetailAudit">The audit to add</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddPackingPlanDetailAuditAsync (int? packingPlanDetailId, string packingPlanDetailAudit)
        {
             await AddPackingPlanDetailAuditAsyncWithHttpInfo(packingPlanDetailId, packingPlanDetailAudit);

        }

        /// <summary>
        /// Add new audit for a packingPlanDetail Adds an audit to an existing packingPlanDetail.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="packingPlanDetailId">Id of the packingPlanDetail to add an audit to</param>
        /// <param name="packingPlanDetailAudit">The audit to add</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddPackingPlanDetailAuditAsyncWithHttpInfo (int? packingPlanDetailId, string packingPlanDetailAudit)
        {
            // verify the required parameter 'packingPlanDetailId' is set
            if (packingPlanDetailId == null)
                throw new ApiException(400, "Missing required parameter 'packingPlanDetailId' when calling PackingPlanDetailApi->AddPackingPlanDetailAudit");
            // verify the required parameter 'packingPlanDetailAudit' is set
            if (packingPlanDetailAudit == null)
                throw new ApiException(400, "Missing required parameter 'packingPlanDetailAudit' when calling PackingPlanDetailApi->AddPackingPlanDetailAudit");

            var localVarPath = "/beta/packingPlanDetail/{packingPlanDetailId}/audit/{packingPlanDetailAudit}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (packingPlanDetailId != null) localVarPathParams.Add("packingPlanDetailId", Configuration.ApiClient.ParameterToString(packingPlanDetailId)); // path parameter
            if (packingPlanDetailAudit != null) localVarPathParams.Add("packingPlanDetailAudit", Configuration.ApiClient.ParameterToString(packingPlanDetailAudit)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddPackingPlanDetailAudit", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Attach a file to a packingPlanDetail Adds a file to an existing packingPlanDetail.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="packingPlanDetailId">Id of the packingPlanDetail to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns></returns>
        public void AddPackingPlanDetailFile (int? packingPlanDetailId, string fileName)
        {
             AddPackingPlanDetailFileWithHttpInfo(packingPlanDetailId, fileName);
        }

        /// <summary>
        /// Attach a file to a packingPlanDetail Adds a file to an existing packingPlanDetail.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="packingPlanDetailId">Id of the packingPlanDetail to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AddPackingPlanDetailFileWithHttpInfo (int? packingPlanDetailId, string fileName)
        {
            // verify the required parameter 'packingPlanDetailId' is set
            if (packingPlanDetailId == null)
                throw new ApiException(400, "Missing required parameter 'packingPlanDetailId' when calling PackingPlanDetailApi->AddPackingPlanDetailFile");
            // verify the required parameter 'fileName' is set
            if (fileName == null)
                throw new ApiException(400, "Missing required parameter 'fileName' when calling PackingPlanDetailApi->AddPackingPlanDetailFile");

            var localVarPath = "/beta/packingPlanDetail/{packingPlanDetailId}/file/{fileName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (packingPlanDetailId != null) localVarPathParams.Add("packingPlanDetailId", Configuration.ApiClient.ParameterToString(packingPlanDetailId)); // path parameter
            if (fileName != null) localVarPathParams.Add("fileName", Configuration.ApiClient.ParameterToString(fileName)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddPackingPlanDetailFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Attach a file to a packingPlanDetail Adds a file to an existing packingPlanDetail.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="packingPlanDetailId">Id of the packingPlanDetail to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddPackingPlanDetailFileAsync (int? packingPlanDetailId, string fileName)
        {
             await AddPackingPlanDetailFileAsyncWithHttpInfo(packingPlanDetailId, fileName);

        }

        /// <summary>
        /// Attach a file to a packingPlanDetail Adds a file to an existing packingPlanDetail.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="packingPlanDetailId">Id of the packingPlanDetail to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddPackingPlanDetailFileAsyncWithHttpInfo (int? packingPlanDetailId, string fileName)
        {
            // verify the required parameter 'packingPlanDetailId' is set
            if (packingPlanDetailId == null)
                throw new ApiException(400, "Missing required parameter 'packingPlanDetailId' when calling PackingPlanDetailApi->AddPackingPlanDetailFile");
            // verify the required parameter 'fileName' is set
            if (fileName == null)
                throw new ApiException(400, "Missing required parameter 'fileName' when calling PackingPlanDetailApi->AddPackingPlanDetailFile");

            var localVarPath = "/beta/packingPlanDetail/{packingPlanDetailId}/file/{fileName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (packingPlanDetailId != null) localVarPathParams.Add("packingPlanDetailId", Configuration.ApiClient.ParameterToString(packingPlanDetailId)); // path parameter
            if (fileName != null) localVarPathParams.Add("fileName", Configuration.ApiClient.ParameterToString(fileName)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddPackingPlanDetailFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Attach a file to a packingPlanDetail by URL. Adds a file to an existing packingPlanDetail by URL.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="packingPlanDetailId">Id of the packingPlanDetail to add an file to</param>
        /// <returns></returns>
        public void AddPackingPlanDetailFileByURL (RecordFile body, int? packingPlanDetailId)
        {
             AddPackingPlanDetailFileByURLWithHttpInfo(body, packingPlanDetailId);
        }

        /// <summary>
        /// Attach a file to a packingPlanDetail by URL. Adds a file to an existing packingPlanDetail by URL.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="packingPlanDetailId">Id of the packingPlanDetail to add an file to</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AddPackingPlanDetailFileByURLWithHttpInfo (RecordFile body, int? packingPlanDetailId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling PackingPlanDetailApi->AddPackingPlanDetailFileByURL");
            // verify the required parameter 'packingPlanDetailId' is set
            if (packingPlanDetailId == null)
                throw new ApiException(400, "Missing required parameter 'packingPlanDetailId' when calling PackingPlanDetailApi->AddPackingPlanDetailFileByURL");

            var localVarPath = "/beta/packingPlanDetail/{packingPlanDetailId}/file";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (packingPlanDetailId != null) localVarPathParams.Add("packingPlanDetailId", Configuration.ApiClient.ParameterToString(packingPlanDetailId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddPackingPlanDetailFileByURL", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Attach a file to a packingPlanDetail by URL. Adds a file to an existing packingPlanDetail by URL.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="packingPlanDetailId">Id of the packingPlanDetail to add an file to</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddPackingPlanDetailFileByURLAsync (RecordFile body, int? packingPlanDetailId)
        {
             await AddPackingPlanDetailFileByURLAsyncWithHttpInfo(body, packingPlanDetailId);

        }

        /// <summary>
        /// Attach a file to a packingPlanDetail by URL. Adds a file to an existing packingPlanDetail by URL.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="packingPlanDetailId">Id of the packingPlanDetail to add an file to</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddPackingPlanDetailFileByURLAsyncWithHttpInfo (RecordFile body, int? packingPlanDetailId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling PackingPlanDetailApi->AddPackingPlanDetailFileByURL");
            // verify the required parameter 'packingPlanDetailId' is set
            if (packingPlanDetailId == null)
                throw new ApiException(400, "Missing required parameter 'packingPlanDetailId' when calling PackingPlanDetailApi->AddPackingPlanDetailFileByURL");

            var localVarPath = "/beta/packingPlanDetail/{packingPlanDetailId}/file";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (packingPlanDetailId != null) localVarPathParams.Add("packingPlanDetailId", Configuration.ApiClient.ParameterToString(packingPlanDetailId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddPackingPlanDetailFileByURL", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Add new tags for a packingPlanDetail. Adds a tag to an existing packingPlanDetail.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="packingPlanDetailId">Id of the packingPlanDetail to add a tag to</param>
        /// <param name="packingPlanDetailTag">The tag to add</param>
        /// <returns></returns>
        public void AddPackingPlanDetailTag (int? packingPlanDetailId, string packingPlanDetailTag)
        {
             AddPackingPlanDetailTagWithHttpInfo(packingPlanDetailId, packingPlanDetailTag);
        }

        /// <summary>
        /// Add new tags for a packingPlanDetail. Adds a tag to an existing packingPlanDetail.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="packingPlanDetailId">Id of the packingPlanDetail to add a tag to</param>
        /// <param name="packingPlanDetailTag">The tag to add</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AddPackingPlanDetailTagWithHttpInfo (int? packingPlanDetailId, string packingPlanDetailTag)
        {
            // verify the required parameter 'packingPlanDetailId' is set
            if (packingPlanDetailId == null)
                throw new ApiException(400, "Missing required parameter 'packingPlanDetailId' when calling PackingPlanDetailApi->AddPackingPlanDetailTag");
            // verify the required parameter 'packingPlanDetailTag' is set
            if (packingPlanDetailTag == null)
                throw new ApiException(400, "Missing required parameter 'packingPlanDetailTag' when calling PackingPlanDetailApi->AddPackingPlanDetailTag");

            var localVarPath = "/beta/packingPlanDetail/{packingPlanDetailId}/tag/{packingPlanDetailTag}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (packingPlanDetailId != null) localVarPathParams.Add("packingPlanDetailId", Configuration.ApiClient.ParameterToString(packingPlanDetailId)); // path parameter
            if (packingPlanDetailTag != null) localVarPathParams.Add("packingPlanDetailTag", Configuration.ApiClient.ParameterToString(packingPlanDetailTag)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddPackingPlanDetailTag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Add new tags for a packingPlanDetail. Adds a tag to an existing packingPlanDetail.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="packingPlanDetailId">Id of the packingPlanDetail to add a tag to</param>
        /// <param name="packingPlanDetailTag">The tag to add</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddPackingPlanDetailTagAsync (int? packingPlanDetailId, string packingPlanDetailTag)
        {
             await AddPackingPlanDetailTagAsyncWithHttpInfo(packingPlanDetailId, packingPlanDetailTag);

        }

        /// <summary>
        /// Add new tags for a packingPlanDetail. Adds a tag to an existing packingPlanDetail.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="packingPlanDetailId">Id of the packingPlanDetail to add a tag to</param>
        /// <param name="packingPlanDetailTag">The tag to add</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddPackingPlanDetailTagAsyncWithHttpInfo (int? packingPlanDetailId, string packingPlanDetailTag)
        {
            // verify the required parameter 'packingPlanDetailId' is set
            if (packingPlanDetailId == null)
                throw new ApiException(400, "Missing required parameter 'packingPlanDetailId' when calling PackingPlanDetailApi->AddPackingPlanDetailTag");
            // verify the required parameter 'packingPlanDetailTag' is set
            if (packingPlanDetailTag == null)
                throw new ApiException(400, "Missing required parameter 'packingPlanDetailTag' when calling PackingPlanDetailApi->AddPackingPlanDetailTag");

            var localVarPath = "/beta/packingPlanDetail/{packingPlanDetailId}/tag/{packingPlanDetailTag}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (packingPlanDetailId != null) localVarPathParams.Add("packingPlanDetailId", Configuration.ApiClient.ParameterToString(packingPlanDetailId)); // path parameter
            if (packingPlanDetailTag != null) localVarPathParams.Add("packingPlanDetailTag", Configuration.ApiClient.ParameterToString(packingPlanDetailTag)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddPackingPlanDetailTag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a file for a packingPlanDetail. Deletes an existing packingPlanDetail file using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="packingPlanDetailId">Id of the packingPlanDetail to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns></returns>
        public void DeletePackingPlanDetailFile (int? packingPlanDetailId, int? fileId)
        {
             DeletePackingPlanDetailFileWithHttpInfo(packingPlanDetailId, fileId);
        }

        /// <summary>
        /// Delete a file for a packingPlanDetail. Deletes an existing packingPlanDetail file using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="packingPlanDetailId">Id of the packingPlanDetail to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeletePackingPlanDetailFileWithHttpInfo (int? packingPlanDetailId, int? fileId)
        {
            // verify the required parameter 'packingPlanDetailId' is set
            if (packingPlanDetailId == null)
                throw new ApiException(400, "Missing required parameter 'packingPlanDetailId' when calling PackingPlanDetailApi->DeletePackingPlanDetailFile");
            // verify the required parameter 'fileId' is set
            if (fileId == null)
                throw new ApiException(400, "Missing required parameter 'fileId' when calling PackingPlanDetailApi->DeletePackingPlanDetailFile");

            var localVarPath = "/beta/packingPlanDetail/{packingPlanDetailId}/file/{fileId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (packingPlanDetailId != null) localVarPathParams.Add("packingPlanDetailId", Configuration.ApiClient.ParameterToString(packingPlanDetailId)); // path parameter
            if (fileId != null) localVarPathParams.Add("fileId", Configuration.ApiClient.ParameterToString(fileId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeletePackingPlanDetailFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a file for a packingPlanDetail. Deletes an existing packingPlanDetail file using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="packingPlanDetailId">Id of the packingPlanDetail to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeletePackingPlanDetailFileAsync (int? packingPlanDetailId, int? fileId)
        {
             await DeletePackingPlanDetailFileAsyncWithHttpInfo(packingPlanDetailId, fileId);

        }

        /// <summary>
        /// Delete a file for a packingPlanDetail. Deletes an existing packingPlanDetail file using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="packingPlanDetailId">Id of the packingPlanDetail to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeletePackingPlanDetailFileAsyncWithHttpInfo (int? packingPlanDetailId, int? fileId)
        {
            // verify the required parameter 'packingPlanDetailId' is set
            if (packingPlanDetailId == null)
                throw new ApiException(400, "Missing required parameter 'packingPlanDetailId' when calling PackingPlanDetailApi->DeletePackingPlanDetailFile");
            // verify the required parameter 'fileId' is set
            if (fileId == null)
                throw new ApiException(400, "Missing required parameter 'fileId' when calling PackingPlanDetailApi->DeletePackingPlanDetailFile");

            var localVarPath = "/beta/packingPlanDetail/{packingPlanDetailId}/file/{fileId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (packingPlanDetailId != null) localVarPathParams.Add("packingPlanDetailId", Configuration.ApiClient.ParameterToString(packingPlanDetailId)); // path parameter
            if (fileId != null) localVarPathParams.Add("fileId", Configuration.ApiClient.ParameterToString(fileId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeletePackingPlanDetailFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a tag for a packingPlanDetail. Deletes an existing packingPlanDetail tag using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="packingPlanDetailId">Id of the packingPlanDetail to remove tag from</param>
        /// <param name="packingPlanDetailTag">The tag to delete</param>
        /// <returns></returns>
        public void DeletePackingPlanDetailTag (int? packingPlanDetailId, string packingPlanDetailTag)
        {
             DeletePackingPlanDetailTagWithHttpInfo(packingPlanDetailId, packingPlanDetailTag);
        }

        /// <summary>
        /// Delete a tag for a packingPlanDetail. Deletes an existing packingPlanDetail tag using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="packingPlanDetailId">Id of the packingPlanDetail to remove tag from</param>
        /// <param name="packingPlanDetailTag">The tag to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeletePackingPlanDetailTagWithHttpInfo (int? packingPlanDetailId, string packingPlanDetailTag)
        {
            // verify the required parameter 'packingPlanDetailId' is set
            if (packingPlanDetailId == null)
                throw new ApiException(400, "Missing required parameter 'packingPlanDetailId' when calling PackingPlanDetailApi->DeletePackingPlanDetailTag");
            // verify the required parameter 'packingPlanDetailTag' is set
            if (packingPlanDetailTag == null)
                throw new ApiException(400, "Missing required parameter 'packingPlanDetailTag' when calling PackingPlanDetailApi->DeletePackingPlanDetailTag");

            var localVarPath = "/beta/packingPlanDetail/{packingPlanDetailId}/tag/{packingPlanDetailTag}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (packingPlanDetailId != null) localVarPathParams.Add("packingPlanDetailId", Configuration.ApiClient.ParameterToString(packingPlanDetailId)); // path parameter
            if (packingPlanDetailTag != null) localVarPathParams.Add("packingPlanDetailTag", Configuration.ApiClient.ParameterToString(packingPlanDetailTag)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeletePackingPlanDetailTag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a tag for a packingPlanDetail. Deletes an existing packingPlanDetail tag using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="packingPlanDetailId">Id of the packingPlanDetail to remove tag from</param>
        /// <param name="packingPlanDetailTag">The tag to delete</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeletePackingPlanDetailTagAsync (int? packingPlanDetailId, string packingPlanDetailTag)
        {
             await DeletePackingPlanDetailTagAsyncWithHttpInfo(packingPlanDetailId, packingPlanDetailTag);

        }

        /// <summary>
        /// Delete a tag for a packingPlanDetail. Deletes an existing packingPlanDetail tag using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="packingPlanDetailId">Id of the packingPlanDetail to remove tag from</param>
        /// <param name="packingPlanDetailTag">The tag to delete</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeletePackingPlanDetailTagAsyncWithHttpInfo (int? packingPlanDetailId, string packingPlanDetailTag)
        {
            // verify the required parameter 'packingPlanDetailId' is set
            if (packingPlanDetailId == null)
                throw new ApiException(400, "Missing required parameter 'packingPlanDetailId' when calling PackingPlanDetailApi->DeletePackingPlanDetailTag");
            // verify the required parameter 'packingPlanDetailTag' is set
            if (packingPlanDetailTag == null)
                throw new ApiException(400, "Missing required parameter 'packingPlanDetailTag' when calling PackingPlanDetailApi->DeletePackingPlanDetailTag");

            var localVarPath = "/beta/packingPlanDetail/{packingPlanDetailId}/tag/{packingPlanDetailTag}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (packingPlanDetailId != null) localVarPathParams.Add("packingPlanDetailId", Configuration.ApiClient.ParameterToString(packingPlanDetailId)); // path parameter
            if (packingPlanDetailTag != null) localVarPathParams.Add("packingPlanDetailTag", Configuration.ApiClient.ParameterToString(packingPlanDetailTag)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeletePackingPlanDetailTag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get a duplicated a packingPlanDetail by id Returns a duplicated packingPlanDetail identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="packingPlanDetailId">Id of the packingPlanDetail to be duplicated.</param>
        /// <returns>PackingPlanDetail</returns>
        public PackingPlanDetail GetDuplicatePackingPlanDetailById (int? packingPlanDetailId)
        {
             ApiResponse<PackingPlanDetail> localVarResponse = GetDuplicatePackingPlanDetailByIdWithHttpInfo(packingPlanDetailId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a duplicated a packingPlanDetail by id Returns a duplicated packingPlanDetail identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="packingPlanDetailId">Id of the packingPlanDetail to be duplicated.</param>
        /// <returns>ApiResponse of PackingPlanDetail</returns>
        public ApiResponse< PackingPlanDetail > GetDuplicatePackingPlanDetailByIdWithHttpInfo (int? packingPlanDetailId)
        {
            // verify the required parameter 'packingPlanDetailId' is set
            if (packingPlanDetailId == null)
                throw new ApiException(400, "Missing required parameter 'packingPlanDetailId' when calling PackingPlanDetailApi->GetDuplicatePackingPlanDetailById");

            var localVarPath = "/beta/packingPlanDetail/duplicate/{packingPlanDetailId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (packingPlanDetailId != null) localVarPathParams.Add("packingPlanDetailId", Configuration.ApiClient.ParameterToString(packingPlanDetailId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDuplicatePackingPlanDetailById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PackingPlanDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PackingPlanDetail) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PackingPlanDetail)));
        }

        /// <summary>
        /// Get a duplicated a packingPlanDetail by id Returns a duplicated packingPlanDetail identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="packingPlanDetailId">Id of the packingPlanDetail to be duplicated.</param>
        /// <returns>Task of PackingPlanDetail</returns>
        public async System.Threading.Tasks.Task<PackingPlanDetail> GetDuplicatePackingPlanDetailByIdAsync (int? packingPlanDetailId)
        {
             ApiResponse<PackingPlanDetail> localVarResponse = await GetDuplicatePackingPlanDetailByIdAsyncWithHttpInfo(packingPlanDetailId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a duplicated a packingPlanDetail by id Returns a duplicated packingPlanDetail identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="packingPlanDetailId">Id of the packingPlanDetail to be duplicated.</param>
        /// <returns>Task of ApiResponse (PackingPlanDetail)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PackingPlanDetail>> GetDuplicatePackingPlanDetailByIdAsyncWithHttpInfo (int? packingPlanDetailId)
        {
            // verify the required parameter 'packingPlanDetailId' is set
            if (packingPlanDetailId == null)
                throw new ApiException(400, "Missing required parameter 'packingPlanDetailId' when calling PackingPlanDetailApi->GetDuplicatePackingPlanDetailById");

            var localVarPath = "/beta/packingPlanDetail/duplicate/{packingPlanDetailId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (packingPlanDetailId != null) localVarPathParams.Add("packingPlanDetailId", Configuration.ApiClient.ParameterToString(packingPlanDetailId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDuplicatePackingPlanDetailById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PackingPlanDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PackingPlanDetail) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PackingPlanDetail)));
        }

        /// <summary>
        /// Search packingPlanDetails by filter Returns the list of packingPlanDetails that match the given filter.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>List&lt;PackingPlanDetail&gt;</returns>
        public List<PackingPlanDetail> GetPackingPlanDetailByFilter (string filter = null, int? page = null, int? limit = null, string sort = null)
        {
             ApiResponse<List<PackingPlanDetail>> localVarResponse = GetPackingPlanDetailByFilterWithHttpInfo(filter, page, limit, sort);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Search packingPlanDetails by filter Returns the list of packingPlanDetails that match the given filter.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>ApiResponse of List&lt;PackingPlanDetail&gt;</returns>
        public ApiResponse< List<PackingPlanDetail> > GetPackingPlanDetailByFilterWithHttpInfo (string filter = null, int? page = null, int? limit = null, string sort = null)
        {

            var localVarPath = "/beta/packingPlanDetail/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (filter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (page != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPackingPlanDetailByFilter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<PackingPlanDetail>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<PackingPlanDetail>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<PackingPlanDetail>)));
        }

        /// <summary>
        /// Search packingPlanDetails by filter Returns the list of packingPlanDetails that match the given filter.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>Task of List&lt;PackingPlanDetail&gt;</returns>
        public async System.Threading.Tasks.Task<List<PackingPlanDetail>> GetPackingPlanDetailByFilterAsync (string filter = null, int? page = null, int? limit = null, string sort = null)
        {
             ApiResponse<List<PackingPlanDetail>> localVarResponse = await GetPackingPlanDetailByFilterAsyncWithHttpInfo(filter, page, limit, sort);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Search packingPlanDetails by filter Returns the list of packingPlanDetails that match the given filter.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;PackingPlanDetail&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<PackingPlanDetail>>> GetPackingPlanDetailByFilterAsyncWithHttpInfo (string filter = null, int? page = null, int? limit = null, string sort = null)
        {

            var localVarPath = "/beta/packingPlanDetail/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (filter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (page != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPackingPlanDetailByFilter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<PackingPlanDetail>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<PackingPlanDetail>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<PackingPlanDetail>)));
        }

        /// <summary>
        /// Get a packingPlanDetail by id Returns the packingPlanDetail identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="packingPlanDetailId">Id of the packingPlanDetail to be returned.</param>
        /// <returns>PackingPlanDetail</returns>
        public PackingPlanDetail GetPackingPlanDetailById (int? packingPlanDetailId)
        {
             ApiResponse<PackingPlanDetail> localVarResponse = GetPackingPlanDetailByIdWithHttpInfo(packingPlanDetailId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a packingPlanDetail by id Returns the packingPlanDetail identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="packingPlanDetailId">Id of the packingPlanDetail to be returned.</param>
        /// <returns>ApiResponse of PackingPlanDetail</returns>
        public ApiResponse< PackingPlanDetail > GetPackingPlanDetailByIdWithHttpInfo (int? packingPlanDetailId)
        {
            // verify the required parameter 'packingPlanDetailId' is set
            if (packingPlanDetailId == null)
                throw new ApiException(400, "Missing required parameter 'packingPlanDetailId' when calling PackingPlanDetailApi->GetPackingPlanDetailById");

            var localVarPath = "/beta/packingPlanDetail/{packingPlanDetailId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (packingPlanDetailId != null) localVarPathParams.Add("packingPlanDetailId", Configuration.ApiClient.ParameterToString(packingPlanDetailId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPackingPlanDetailById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PackingPlanDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PackingPlanDetail) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PackingPlanDetail)));
        }

        /// <summary>
        /// Get a packingPlanDetail by id Returns the packingPlanDetail identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="packingPlanDetailId">Id of the packingPlanDetail to be returned.</param>
        /// <returns>Task of PackingPlanDetail</returns>
        public async System.Threading.Tasks.Task<PackingPlanDetail> GetPackingPlanDetailByIdAsync (int? packingPlanDetailId)
        {
             ApiResponse<PackingPlanDetail> localVarResponse = await GetPackingPlanDetailByIdAsyncWithHttpInfo(packingPlanDetailId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a packingPlanDetail by id Returns the packingPlanDetail identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="packingPlanDetailId">Id of the packingPlanDetail to be returned.</param>
        /// <returns>Task of ApiResponse (PackingPlanDetail)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PackingPlanDetail>> GetPackingPlanDetailByIdAsyncWithHttpInfo (int? packingPlanDetailId)
        {
            // verify the required parameter 'packingPlanDetailId' is set
            if (packingPlanDetailId == null)
                throw new ApiException(400, "Missing required parameter 'packingPlanDetailId' when calling PackingPlanDetailApi->GetPackingPlanDetailById");

            var localVarPath = "/beta/packingPlanDetail/{packingPlanDetailId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (packingPlanDetailId != null) localVarPathParams.Add("packingPlanDetailId", Configuration.ApiClient.ParameterToString(packingPlanDetailId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPackingPlanDetailById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PackingPlanDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PackingPlanDetail) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PackingPlanDetail)));
        }

        /// <summary>
        /// Get the files for a packingPlanDetail. Get all existing packingPlanDetail files.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="packingPlanDetailId">Id of the packingPlanDetail to get files for</param>
        /// <returns></returns>
        public void GetPackingPlanDetailFiles (int? packingPlanDetailId)
        {
             GetPackingPlanDetailFilesWithHttpInfo(packingPlanDetailId);
        }

        /// <summary>
        /// Get the files for a packingPlanDetail. Get all existing packingPlanDetail files.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="packingPlanDetailId">Id of the packingPlanDetail to get files for</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GetPackingPlanDetailFilesWithHttpInfo (int? packingPlanDetailId)
        {
            // verify the required parameter 'packingPlanDetailId' is set
            if (packingPlanDetailId == null)
                throw new ApiException(400, "Missing required parameter 'packingPlanDetailId' when calling PackingPlanDetailApi->GetPackingPlanDetailFiles");

            var localVarPath = "/beta/packingPlanDetail/{packingPlanDetailId}/file";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (packingPlanDetailId != null) localVarPathParams.Add("packingPlanDetailId", Configuration.ApiClient.ParameterToString(packingPlanDetailId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPackingPlanDetailFiles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get the files for a packingPlanDetail. Get all existing packingPlanDetail files.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="packingPlanDetailId">Id of the packingPlanDetail to get files for</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetPackingPlanDetailFilesAsync (int? packingPlanDetailId)
        {
             await GetPackingPlanDetailFilesAsyncWithHttpInfo(packingPlanDetailId);

        }

        /// <summary>
        /// Get the files for a packingPlanDetail. Get all existing packingPlanDetail files.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="packingPlanDetailId">Id of the packingPlanDetail to get files for</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetPackingPlanDetailFilesAsyncWithHttpInfo (int? packingPlanDetailId)
        {
            // verify the required parameter 'packingPlanDetailId' is set
            if (packingPlanDetailId == null)
                throw new ApiException(400, "Missing required parameter 'packingPlanDetailId' when calling PackingPlanDetailApi->GetPackingPlanDetailFiles");

            var localVarPath = "/beta/packingPlanDetail/{packingPlanDetailId}/file";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (packingPlanDetailId != null) localVarPathParams.Add("packingPlanDetailId", Configuration.ApiClient.ParameterToString(packingPlanDetailId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPackingPlanDetailFiles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get the tags for a packingPlanDetail. Get all existing packingPlanDetail tags.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="packingPlanDetailId">Id of the packingPlanDetail to get tags for</param>
        /// <returns></returns>
        public void GetPackingPlanDetailTags (int? packingPlanDetailId)
        {
             GetPackingPlanDetailTagsWithHttpInfo(packingPlanDetailId);
        }

        /// <summary>
        /// Get the tags for a packingPlanDetail. Get all existing packingPlanDetail tags.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="packingPlanDetailId">Id of the packingPlanDetail to get tags for</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GetPackingPlanDetailTagsWithHttpInfo (int? packingPlanDetailId)
        {
            // verify the required parameter 'packingPlanDetailId' is set
            if (packingPlanDetailId == null)
                throw new ApiException(400, "Missing required parameter 'packingPlanDetailId' when calling PackingPlanDetailApi->GetPackingPlanDetailTags");

            var localVarPath = "/beta/packingPlanDetail/{packingPlanDetailId}/tag";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (packingPlanDetailId != null) localVarPathParams.Add("packingPlanDetailId", Configuration.ApiClient.ParameterToString(packingPlanDetailId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPackingPlanDetailTags", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get the tags for a packingPlanDetail. Get all existing packingPlanDetail tags.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="packingPlanDetailId">Id of the packingPlanDetail to get tags for</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetPackingPlanDetailTagsAsync (int? packingPlanDetailId)
        {
             await GetPackingPlanDetailTagsAsyncWithHttpInfo(packingPlanDetailId);

        }

        /// <summary>
        /// Get the tags for a packingPlanDetail. Get all existing packingPlanDetail tags.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="packingPlanDetailId">Id of the packingPlanDetail to get tags for</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetPackingPlanDetailTagsAsyncWithHttpInfo (int? packingPlanDetailId)
        {
            // verify the required parameter 'packingPlanDetailId' is set
            if (packingPlanDetailId == null)
                throw new ApiException(400, "Missing required parameter 'packingPlanDetailId' when calling PackingPlanDetailApi->GetPackingPlanDetailTags");

            var localVarPath = "/beta/packingPlanDetail/{packingPlanDetailId}/tag";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (packingPlanDetailId != null) localVarPathParams.Add("packingPlanDetailId", Configuration.ApiClient.ParameterToString(packingPlanDetailId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPackingPlanDetailTags", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update a packingPlanDetail custom fields Updates an existing packingPlanDetail custom fields using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">PackingPlanDetail to be updated.</param>
        /// <returns></returns>
        public void UpdatePackingPlanDetailCustomFields (PackingPlanDetail body)
        {
             UpdatePackingPlanDetailCustomFieldsWithHttpInfo(body);
        }

        /// <summary>
        /// Update a packingPlanDetail custom fields Updates an existing packingPlanDetail custom fields using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">PackingPlanDetail to be updated.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdatePackingPlanDetailCustomFieldsWithHttpInfo (PackingPlanDetail body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling PackingPlanDetailApi->UpdatePackingPlanDetailCustomFields");

            var localVarPath = "/beta/packingPlanDetail/customFields";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdatePackingPlanDetailCustomFields", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update a packingPlanDetail custom fields Updates an existing packingPlanDetail custom fields using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">PackingPlanDetail to be updated.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdatePackingPlanDetailCustomFieldsAsync (PackingPlanDetail body)
        {
             await UpdatePackingPlanDetailCustomFieldsAsyncWithHttpInfo(body);

        }

        /// <summary>
        /// Update a packingPlanDetail custom fields Updates an existing packingPlanDetail custom fields using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">PackingPlanDetail to be updated.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdatePackingPlanDetailCustomFieldsAsyncWithHttpInfo (PackingPlanDetail body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling PackingPlanDetailApi->UpdatePackingPlanDetailCustomFields");

            var localVarPath = "/beta/packingPlanDetail/customFields";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdatePackingPlanDetailCustomFields", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

    }
}
