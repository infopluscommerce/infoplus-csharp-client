/* 
 * Infoplus API
 *
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Infoplus.Client;
using Infoplus.Model;

namespace Infoplus.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPalletTypeApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create a palletType
        /// </summary>
        /// <remarks>
        /// Inserts a new palletType using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">PalletType to be inserted.</param>
        /// <returns>PalletType</returns>
        PalletType AddPalletType (PalletType body);

        /// <summary>
        /// Create a palletType
        /// </summary>
        /// <remarks>
        /// Inserts a new palletType using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">PalletType to be inserted.</param>
        /// <returns>ApiResponse of PalletType</returns>
        ApiResponse<PalletType> AddPalletTypeWithHttpInfo (PalletType body);
        /// <summary>
        /// Add new audit for a palletType
        /// </summary>
        /// <remarks>
        /// Adds an audit to an existing palletType.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="palletTypeId">Id of the palletType to add an audit to</param>
        /// <param name="palletTypeAudit">The audit to add</param>
        /// <returns></returns>
        void AddPalletTypeAudit (int? palletTypeId, string palletTypeAudit);

        /// <summary>
        /// Add new audit for a palletType
        /// </summary>
        /// <remarks>
        /// Adds an audit to an existing palletType.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="palletTypeId">Id of the palletType to add an audit to</param>
        /// <param name="palletTypeAudit">The audit to add</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddPalletTypeAuditWithHttpInfo (int? palletTypeId, string palletTypeAudit);
        /// <summary>
        /// Attach a file to a palletType
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing palletType.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="palletTypeId">Id of the palletType to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns></returns>
        void AddPalletTypeFile (int? palletTypeId, string fileName);

        /// <summary>
        /// Attach a file to a palletType
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing palletType.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="palletTypeId">Id of the palletType to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddPalletTypeFileWithHttpInfo (int? palletTypeId, string fileName);
        /// <summary>
        /// Attach a file to a palletType by URL.
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing palletType by URL.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="palletTypeId">Id of the palletType to add an file to</param>
        /// <returns></returns>
        void AddPalletTypeFileByURL (RecordFile body, int? palletTypeId);

        /// <summary>
        /// Attach a file to a palletType by URL.
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing palletType by URL.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="palletTypeId">Id of the palletType to add an file to</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddPalletTypeFileByURLWithHttpInfo (RecordFile body, int? palletTypeId);
        /// <summary>
        /// Add new tags for a palletType.
        /// </summary>
        /// <remarks>
        /// Adds a tag to an existing palletType.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="palletTypeId">Id of the palletType to add a tag to</param>
        /// <param name="palletTypeTag">The tag to add</param>
        /// <returns></returns>
        void AddPalletTypeTag (int? palletTypeId, string palletTypeTag);

        /// <summary>
        /// Add new tags for a palletType.
        /// </summary>
        /// <remarks>
        /// Adds a tag to an existing palletType.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="palletTypeId">Id of the palletType to add a tag to</param>
        /// <param name="palletTypeTag">The tag to add</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddPalletTypeTagWithHttpInfo (int? palletTypeId, string palletTypeTag);
        /// <summary>
        /// Delete a palletType
        /// </summary>
        /// <remarks>
        /// Deletes the palletType identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="palletTypeId">Id of the palletType to be deleted.</param>
        /// <returns></returns>
        void DeletePalletType (int? palletTypeId);

        /// <summary>
        /// Delete a palletType
        /// </summary>
        /// <remarks>
        /// Deletes the palletType identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="palletTypeId">Id of the palletType to be deleted.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeletePalletTypeWithHttpInfo (int? palletTypeId);
        /// <summary>
        /// Delete a file for a palletType.
        /// </summary>
        /// <remarks>
        /// Deletes an existing palletType file using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="palletTypeId">Id of the palletType to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns></returns>
        void DeletePalletTypeFile (int? palletTypeId, int? fileId);

        /// <summary>
        /// Delete a file for a palletType.
        /// </summary>
        /// <remarks>
        /// Deletes an existing palletType file using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="palletTypeId">Id of the palletType to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeletePalletTypeFileWithHttpInfo (int? palletTypeId, int? fileId);
        /// <summary>
        /// Delete a tag for a palletType.
        /// </summary>
        /// <remarks>
        /// Deletes an existing palletType tag using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="palletTypeId">Id of the palletType to remove tag from</param>
        /// <param name="palletTypeTag">The tag to delete</param>
        /// <returns></returns>
        void DeletePalletTypeTag (int? palletTypeId, string palletTypeTag);

        /// <summary>
        /// Delete a tag for a palletType.
        /// </summary>
        /// <remarks>
        /// Deletes an existing palletType tag using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="palletTypeId">Id of the palletType to remove tag from</param>
        /// <param name="palletTypeTag">The tag to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeletePalletTypeTagWithHttpInfo (int? palletTypeId, string palletTypeTag);
        /// <summary>
        /// Get a duplicated a palletType by id
        /// </summary>
        /// <remarks>
        /// Returns a duplicated palletType identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="palletTypeId">Id of the palletType to be duplicated.</param>
        /// <returns>PalletType</returns>
        PalletType GetDuplicatePalletTypeById (int? palletTypeId);

        /// <summary>
        /// Get a duplicated a palletType by id
        /// </summary>
        /// <remarks>
        /// Returns a duplicated palletType identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="palletTypeId">Id of the palletType to be duplicated.</param>
        /// <returns>ApiResponse of PalletType</returns>
        ApiResponse<PalletType> GetDuplicatePalletTypeByIdWithHttpInfo (int? palletTypeId);
        /// <summary>
        /// Search palletTypes by filter
        /// </summary>
        /// <remarks>
        /// Returns the list of palletTypes that match the given filter.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>List&lt;PalletType&gt;</returns>
        List<PalletType> GetPalletTypeByFilter (string filter = null, int? page = null, int? limit = null, string sort = null);

        /// <summary>
        /// Search palletTypes by filter
        /// </summary>
        /// <remarks>
        /// Returns the list of palletTypes that match the given filter.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>ApiResponse of List&lt;PalletType&gt;</returns>
        ApiResponse<List<PalletType>> GetPalletTypeByFilterWithHttpInfo (string filter = null, int? page = null, int? limit = null, string sort = null);
        /// <summary>
        /// Get a palletType by id
        /// </summary>
        /// <remarks>
        /// Returns the palletType identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="palletTypeId">Id of the palletType to be returned.</param>
        /// <returns>PalletType</returns>
        PalletType GetPalletTypeById (int? palletTypeId);

        /// <summary>
        /// Get a palletType by id
        /// </summary>
        /// <remarks>
        /// Returns the palletType identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="palletTypeId">Id of the palletType to be returned.</param>
        /// <returns>ApiResponse of PalletType</returns>
        ApiResponse<PalletType> GetPalletTypeByIdWithHttpInfo (int? palletTypeId);
        /// <summary>
        /// Get the files for a palletType.
        /// </summary>
        /// <remarks>
        /// Get all existing palletType files.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="palletTypeId">Id of the palletType to get files for</param>
        /// <returns></returns>
        void GetPalletTypeFiles (int? palletTypeId);

        /// <summary>
        /// Get the files for a palletType.
        /// </summary>
        /// <remarks>
        /// Get all existing palletType files.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="palletTypeId">Id of the palletType to get files for</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetPalletTypeFilesWithHttpInfo (int? palletTypeId);
        /// <summary>
        /// Get the tags for a palletType.
        /// </summary>
        /// <remarks>
        /// Get all existing palletType tags.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="palletTypeId">Id of the palletType to get tags for</param>
        /// <returns></returns>
        void GetPalletTypeTags (int? palletTypeId);

        /// <summary>
        /// Get the tags for a palletType.
        /// </summary>
        /// <remarks>
        /// Get all existing palletType tags.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="palletTypeId">Id of the palletType to get tags for</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetPalletTypeTagsWithHttpInfo (int? palletTypeId);
        /// <summary>
        /// Update a palletType
        /// </summary>
        /// <remarks>
        /// Updates an existing palletType using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">PalletType to be updated.</param>
        /// <returns></returns>
        void UpdatePalletType (PalletType body);

        /// <summary>
        /// Update a palletType
        /// </summary>
        /// <remarks>
        /// Updates an existing palletType using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">PalletType to be updated.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdatePalletTypeWithHttpInfo (PalletType body);
        /// <summary>
        /// Update a palletType custom fields
        /// </summary>
        /// <remarks>
        /// Updates an existing palletType custom fields using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">PalletType to be updated.</param>
        /// <returns></returns>
        void UpdatePalletTypeCustomFields (PalletType body);

        /// <summary>
        /// Update a palletType custom fields
        /// </summary>
        /// <remarks>
        /// Updates an existing palletType custom fields using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">PalletType to be updated.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdatePalletTypeCustomFieldsWithHttpInfo (PalletType body);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create a palletType
        /// </summary>
        /// <remarks>
        /// Inserts a new palletType using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">PalletType to be inserted.</param>
        /// <returns>Task of PalletType</returns>
        System.Threading.Tasks.Task<PalletType> AddPalletTypeAsync (PalletType body);

        /// <summary>
        /// Create a palletType
        /// </summary>
        /// <remarks>
        /// Inserts a new palletType using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">PalletType to be inserted.</param>
        /// <returns>Task of ApiResponse (PalletType)</returns>
        System.Threading.Tasks.Task<ApiResponse<PalletType>> AddPalletTypeAsyncWithHttpInfo (PalletType body);
        /// <summary>
        /// Add new audit for a palletType
        /// </summary>
        /// <remarks>
        /// Adds an audit to an existing palletType.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="palletTypeId">Id of the palletType to add an audit to</param>
        /// <param name="palletTypeAudit">The audit to add</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddPalletTypeAuditAsync (int? palletTypeId, string palletTypeAudit);

        /// <summary>
        /// Add new audit for a palletType
        /// </summary>
        /// <remarks>
        /// Adds an audit to an existing palletType.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="palletTypeId">Id of the palletType to add an audit to</param>
        /// <param name="palletTypeAudit">The audit to add</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddPalletTypeAuditAsyncWithHttpInfo (int? palletTypeId, string palletTypeAudit);
        /// <summary>
        /// Attach a file to a palletType
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing palletType.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="palletTypeId">Id of the palletType to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddPalletTypeFileAsync (int? palletTypeId, string fileName);

        /// <summary>
        /// Attach a file to a palletType
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing palletType.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="palletTypeId">Id of the palletType to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddPalletTypeFileAsyncWithHttpInfo (int? palletTypeId, string fileName);
        /// <summary>
        /// Attach a file to a palletType by URL.
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing palletType by URL.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="palletTypeId">Id of the palletType to add an file to</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddPalletTypeFileByURLAsync (RecordFile body, int? palletTypeId);

        /// <summary>
        /// Attach a file to a palletType by URL.
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing palletType by URL.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="palletTypeId">Id of the palletType to add an file to</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddPalletTypeFileByURLAsyncWithHttpInfo (RecordFile body, int? palletTypeId);
        /// <summary>
        /// Add new tags for a palletType.
        /// </summary>
        /// <remarks>
        /// Adds a tag to an existing palletType.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="palletTypeId">Id of the palletType to add a tag to</param>
        /// <param name="palletTypeTag">The tag to add</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddPalletTypeTagAsync (int? palletTypeId, string palletTypeTag);

        /// <summary>
        /// Add new tags for a palletType.
        /// </summary>
        /// <remarks>
        /// Adds a tag to an existing palletType.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="palletTypeId">Id of the palletType to add a tag to</param>
        /// <param name="palletTypeTag">The tag to add</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddPalletTypeTagAsyncWithHttpInfo (int? palletTypeId, string palletTypeTag);
        /// <summary>
        /// Delete a palletType
        /// </summary>
        /// <remarks>
        /// Deletes the palletType identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="palletTypeId">Id of the palletType to be deleted.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeletePalletTypeAsync (int? palletTypeId);

        /// <summary>
        /// Delete a palletType
        /// </summary>
        /// <remarks>
        /// Deletes the palletType identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="palletTypeId">Id of the palletType to be deleted.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeletePalletTypeAsyncWithHttpInfo (int? palletTypeId);
        /// <summary>
        /// Delete a file for a palletType.
        /// </summary>
        /// <remarks>
        /// Deletes an existing palletType file using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="palletTypeId">Id of the palletType to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeletePalletTypeFileAsync (int? palletTypeId, int? fileId);

        /// <summary>
        /// Delete a file for a palletType.
        /// </summary>
        /// <remarks>
        /// Deletes an existing palletType file using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="palletTypeId">Id of the palletType to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeletePalletTypeFileAsyncWithHttpInfo (int? palletTypeId, int? fileId);
        /// <summary>
        /// Delete a tag for a palletType.
        /// </summary>
        /// <remarks>
        /// Deletes an existing palletType tag using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="palletTypeId">Id of the palletType to remove tag from</param>
        /// <param name="palletTypeTag">The tag to delete</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeletePalletTypeTagAsync (int? palletTypeId, string palletTypeTag);

        /// <summary>
        /// Delete a tag for a palletType.
        /// </summary>
        /// <remarks>
        /// Deletes an existing palletType tag using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="palletTypeId">Id of the palletType to remove tag from</param>
        /// <param name="palletTypeTag">The tag to delete</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeletePalletTypeTagAsyncWithHttpInfo (int? palletTypeId, string palletTypeTag);
        /// <summary>
        /// Get a duplicated a palletType by id
        /// </summary>
        /// <remarks>
        /// Returns a duplicated palletType identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="palletTypeId">Id of the palletType to be duplicated.</param>
        /// <returns>Task of PalletType</returns>
        System.Threading.Tasks.Task<PalletType> GetDuplicatePalletTypeByIdAsync (int? palletTypeId);

        /// <summary>
        /// Get a duplicated a palletType by id
        /// </summary>
        /// <remarks>
        /// Returns a duplicated palletType identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="palletTypeId">Id of the palletType to be duplicated.</param>
        /// <returns>Task of ApiResponse (PalletType)</returns>
        System.Threading.Tasks.Task<ApiResponse<PalletType>> GetDuplicatePalletTypeByIdAsyncWithHttpInfo (int? palletTypeId);
        /// <summary>
        /// Search palletTypes by filter
        /// </summary>
        /// <remarks>
        /// Returns the list of palletTypes that match the given filter.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>Task of List&lt;PalletType&gt;</returns>
        System.Threading.Tasks.Task<List<PalletType>> GetPalletTypeByFilterAsync (string filter = null, int? page = null, int? limit = null, string sort = null);

        /// <summary>
        /// Search palletTypes by filter
        /// </summary>
        /// <remarks>
        /// Returns the list of palletTypes that match the given filter.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;PalletType&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<PalletType>>> GetPalletTypeByFilterAsyncWithHttpInfo (string filter = null, int? page = null, int? limit = null, string sort = null);
        /// <summary>
        /// Get a palletType by id
        /// </summary>
        /// <remarks>
        /// Returns the palletType identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="palletTypeId">Id of the palletType to be returned.</param>
        /// <returns>Task of PalletType</returns>
        System.Threading.Tasks.Task<PalletType> GetPalletTypeByIdAsync (int? palletTypeId);

        /// <summary>
        /// Get a palletType by id
        /// </summary>
        /// <remarks>
        /// Returns the palletType identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="palletTypeId">Id of the palletType to be returned.</param>
        /// <returns>Task of ApiResponse (PalletType)</returns>
        System.Threading.Tasks.Task<ApiResponse<PalletType>> GetPalletTypeByIdAsyncWithHttpInfo (int? palletTypeId);
        /// <summary>
        /// Get the files for a palletType.
        /// </summary>
        /// <remarks>
        /// Get all existing palletType files.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="palletTypeId">Id of the palletType to get files for</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetPalletTypeFilesAsync (int? palletTypeId);

        /// <summary>
        /// Get the files for a palletType.
        /// </summary>
        /// <remarks>
        /// Get all existing palletType files.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="palletTypeId">Id of the palletType to get files for</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetPalletTypeFilesAsyncWithHttpInfo (int? palletTypeId);
        /// <summary>
        /// Get the tags for a palletType.
        /// </summary>
        /// <remarks>
        /// Get all existing palletType tags.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="palletTypeId">Id of the palletType to get tags for</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetPalletTypeTagsAsync (int? palletTypeId);

        /// <summary>
        /// Get the tags for a palletType.
        /// </summary>
        /// <remarks>
        /// Get all existing palletType tags.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="palletTypeId">Id of the palletType to get tags for</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetPalletTypeTagsAsyncWithHttpInfo (int? palletTypeId);
        /// <summary>
        /// Update a palletType
        /// </summary>
        /// <remarks>
        /// Updates an existing palletType using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">PalletType to be updated.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdatePalletTypeAsync (PalletType body);

        /// <summary>
        /// Update a palletType
        /// </summary>
        /// <remarks>
        /// Updates an existing palletType using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">PalletType to be updated.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdatePalletTypeAsyncWithHttpInfo (PalletType body);
        /// <summary>
        /// Update a palletType custom fields
        /// </summary>
        /// <remarks>
        /// Updates an existing palletType custom fields using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">PalletType to be updated.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdatePalletTypeCustomFieldsAsync (PalletType body);

        /// <summary>
        /// Update a palletType custom fields
        /// </summary>
        /// <remarks>
        /// Updates an existing palletType custom fields using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">PalletType to be updated.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdatePalletTypeCustomFieldsAsyncWithHttpInfo (PalletType body);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class PalletTypeApi : IPalletTypeApi
    {
        private Infoplus.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="PalletTypeApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PalletTypeApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = Infoplus.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PalletTypeApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public PalletTypeApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Infoplus.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Infoplus.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create a palletType Inserts a new palletType using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">PalletType to be inserted.</param>
        /// <returns>PalletType</returns>
        public PalletType AddPalletType (PalletType body)
        {
             ApiResponse<PalletType> localVarResponse = AddPalletTypeWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a palletType Inserts a new palletType using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">PalletType to be inserted.</param>
        /// <returns>ApiResponse of PalletType</returns>
        public ApiResponse< PalletType > AddPalletTypeWithHttpInfo (PalletType body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling PalletTypeApi->AddPalletType");

            var localVarPath = "/beta/palletType";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddPalletType", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PalletType>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PalletType) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PalletType)));
        }

        /// <summary>
        /// Create a palletType Inserts a new palletType using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">PalletType to be inserted.</param>
        /// <returns>Task of PalletType</returns>
        public async System.Threading.Tasks.Task<PalletType> AddPalletTypeAsync (PalletType body)
        {
             ApiResponse<PalletType> localVarResponse = await AddPalletTypeAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a palletType Inserts a new palletType using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">PalletType to be inserted.</param>
        /// <returns>Task of ApiResponse (PalletType)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PalletType>> AddPalletTypeAsyncWithHttpInfo (PalletType body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling PalletTypeApi->AddPalletType");

            var localVarPath = "/beta/palletType";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddPalletType", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PalletType>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PalletType) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PalletType)));
        }

        /// <summary>
        /// Add new audit for a palletType Adds an audit to an existing palletType.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="palletTypeId">Id of the palletType to add an audit to</param>
        /// <param name="palletTypeAudit">The audit to add</param>
        /// <returns></returns>
        public void AddPalletTypeAudit (int? palletTypeId, string palletTypeAudit)
        {
             AddPalletTypeAuditWithHttpInfo(palletTypeId, palletTypeAudit);
        }

        /// <summary>
        /// Add new audit for a palletType Adds an audit to an existing palletType.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="palletTypeId">Id of the palletType to add an audit to</param>
        /// <param name="palletTypeAudit">The audit to add</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AddPalletTypeAuditWithHttpInfo (int? palletTypeId, string palletTypeAudit)
        {
            // verify the required parameter 'palletTypeId' is set
            if (palletTypeId == null)
                throw new ApiException(400, "Missing required parameter 'palletTypeId' when calling PalletTypeApi->AddPalletTypeAudit");
            // verify the required parameter 'palletTypeAudit' is set
            if (palletTypeAudit == null)
                throw new ApiException(400, "Missing required parameter 'palletTypeAudit' when calling PalletTypeApi->AddPalletTypeAudit");

            var localVarPath = "/beta/palletType/{palletTypeId}/audit/{palletTypeAudit}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (palletTypeId != null) localVarPathParams.Add("palletTypeId", Configuration.ApiClient.ParameterToString(palletTypeId)); // path parameter
            if (palletTypeAudit != null) localVarPathParams.Add("palletTypeAudit", Configuration.ApiClient.ParameterToString(palletTypeAudit)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddPalletTypeAudit", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Add new audit for a palletType Adds an audit to an existing palletType.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="palletTypeId">Id of the palletType to add an audit to</param>
        /// <param name="palletTypeAudit">The audit to add</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddPalletTypeAuditAsync (int? palletTypeId, string palletTypeAudit)
        {
             await AddPalletTypeAuditAsyncWithHttpInfo(palletTypeId, palletTypeAudit);

        }

        /// <summary>
        /// Add new audit for a palletType Adds an audit to an existing palletType.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="palletTypeId">Id of the palletType to add an audit to</param>
        /// <param name="palletTypeAudit">The audit to add</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddPalletTypeAuditAsyncWithHttpInfo (int? palletTypeId, string palletTypeAudit)
        {
            // verify the required parameter 'palletTypeId' is set
            if (palletTypeId == null)
                throw new ApiException(400, "Missing required parameter 'palletTypeId' when calling PalletTypeApi->AddPalletTypeAudit");
            // verify the required parameter 'palletTypeAudit' is set
            if (palletTypeAudit == null)
                throw new ApiException(400, "Missing required parameter 'palletTypeAudit' when calling PalletTypeApi->AddPalletTypeAudit");

            var localVarPath = "/beta/palletType/{palletTypeId}/audit/{palletTypeAudit}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (palletTypeId != null) localVarPathParams.Add("palletTypeId", Configuration.ApiClient.ParameterToString(palletTypeId)); // path parameter
            if (palletTypeAudit != null) localVarPathParams.Add("palletTypeAudit", Configuration.ApiClient.ParameterToString(palletTypeAudit)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddPalletTypeAudit", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Attach a file to a palletType Adds a file to an existing palletType.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="palletTypeId">Id of the palletType to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns></returns>
        public void AddPalletTypeFile (int? palletTypeId, string fileName)
        {
             AddPalletTypeFileWithHttpInfo(palletTypeId, fileName);
        }

        /// <summary>
        /// Attach a file to a palletType Adds a file to an existing palletType.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="palletTypeId">Id of the palletType to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AddPalletTypeFileWithHttpInfo (int? palletTypeId, string fileName)
        {
            // verify the required parameter 'palletTypeId' is set
            if (palletTypeId == null)
                throw new ApiException(400, "Missing required parameter 'palletTypeId' when calling PalletTypeApi->AddPalletTypeFile");
            // verify the required parameter 'fileName' is set
            if (fileName == null)
                throw new ApiException(400, "Missing required parameter 'fileName' when calling PalletTypeApi->AddPalletTypeFile");

            var localVarPath = "/beta/palletType/{palletTypeId}/file/{fileName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (palletTypeId != null) localVarPathParams.Add("palletTypeId", Configuration.ApiClient.ParameterToString(palletTypeId)); // path parameter
            if (fileName != null) localVarPathParams.Add("fileName", Configuration.ApiClient.ParameterToString(fileName)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddPalletTypeFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Attach a file to a palletType Adds a file to an existing palletType.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="palletTypeId">Id of the palletType to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddPalletTypeFileAsync (int? palletTypeId, string fileName)
        {
             await AddPalletTypeFileAsyncWithHttpInfo(palletTypeId, fileName);

        }

        /// <summary>
        /// Attach a file to a palletType Adds a file to an existing palletType.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="palletTypeId">Id of the palletType to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddPalletTypeFileAsyncWithHttpInfo (int? palletTypeId, string fileName)
        {
            // verify the required parameter 'palletTypeId' is set
            if (palletTypeId == null)
                throw new ApiException(400, "Missing required parameter 'palletTypeId' when calling PalletTypeApi->AddPalletTypeFile");
            // verify the required parameter 'fileName' is set
            if (fileName == null)
                throw new ApiException(400, "Missing required parameter 'fileName' when calling PalletTypeApi->AddPalletTypeFile");

            var localVarPath = "/beta/palletType/{palletTypeId}/file/{fileName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (palletTypeId != null) localVarPathParams.Add("palletTypeId", Configuration.ApiClient.ParameterToString(palletTypeId)); // path parameter
            if (fileName != null) localVarPathParams.Add("fileName", Configuration.ApiClient.ParameterToString(fileName)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddPalletTypeFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Attach a file to a palletType by URL. Adds a file to an existing palletType by URL.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="palletTypeId">Id of the palletType to add an file to</param>
        /// <returns></returns>
        public void AddPalletTypeFileByURL (RecordFile body, int? palletTypeId)
        {
             AddPalletTypeFileByURLWithHttpInfo(body, palletTypeId);
        }

        /// <summary>
        /// Attach a file to a palletType by URL. Adds a file to an existing palletType by URL.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="palletTypeId">Id of the palletType to add an file to</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AddPalletTypeFileByURLWithHttpInfo (RecordFile body, int? palletTypeId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling PalletTypeApi->AddPalletTypeFileByURL");
            // verify the required parameter 'palletTypeId' is set
            if (palletTypeId == null)
                throw new ApiException(400, "Missing required parameter 'palletTypeId' when calling PalletTypeApi->AddPalletTypeFileByURL");

            var localVarPath = "/beta/palletType/{palletTypeId}/file";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (palletTypeId != null) localVarPathParams.Add("palletTypeId", Configuration.ApiClient.ParameterToString(palletTypeId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddPalletTypeFileByURL", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Attach a file to a palletType by URL. Adds a file to an existing palletType by URL.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="palletTypeId">Id of the palletType to add an file to</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddPalletTypeFileByURLAsync (RecordFile body, int? palletTypeId)
        {
             await AddPalletTypeFileByURLAsyncWithHttpInfo(body, palletTypeId);

        }

        /// <summary>
        /// Attach a file to a palletType by URL. Adds a file to an existing palletType by URL.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="palletTypeId">Id of the palletType to add an file to</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddPalletTypeFileByURLAsyncWithHttpInfo (RecordFile body, int? palletTypeId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling PalletTypeApi->AddPalletTypeFileByURL");
            // verify the required parameter 'palletTypeId' is set
            if (palletTypeId == null)
                throw new ApiException(400, "Missing required parameter 'palletTypeId' when calling PalletTypeApi->AddPalletTypeFileByURL");

            var localVarPath = "/beta/palletType/{palletTypeId}/file";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (palletTypeId != null) localVarPathParams.Add("palletTypeId", Configuration.ApiClient.ParameterToString(palletTypeId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddPalletTypeFileByURL", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Add new tags for a palletType. Adds a tag to an existing palletType.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="palletTypeId">Id of the palletType to add a tag to</param>
        /// <param name="palletTypeTag">The tag to add</param>
        /// <returns></returns>
        public void AddPalletTypeTag (int? palletTypeId, string palletTypeTag)
        {
             AddPalletTypeTagWithHttpInfo(palletTypeId, palletTypeTag);
        }

        /// <summary>
        /// Add new tags for a palletType. Adds a tag to an existing palletType.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="palletTypeId">Id of the palletType to add a tag to</param>
        /// <param name="palletTypeTag">The tag to add</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AddPalletTypeTagWithHttpInfo (int? palletTypeId, string palletTypeTag)
        {
            // verify the required parameter 'palletTypeId' is set
            if (palletTypeId == null)
                throw new ApiException(400, "Missing required parameter 'palletTypeId' when calling PalletTypeApi->AddPalletTypeTag");
            // verify the required parameter 'palletTypeTag' is set
            if (palletTypeTag == null)
                throw new ApiException(400, "Missing required parameter 'palletTypeTag' when calling PalletTypeApi->AddPalletTypeTag");

            var localVarPath = "/beta/palletType/{palletTypeId}/tag/{palletTypeTag}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (palletTypeId != null) localVarPathParams.Add("palletTypeId", Configuration.ApiClient.ParameterToString(palletTypeId)); // path parameter
            if (palletTypeTag != null) localVarPathParams.Add("palletTypeTag", Configuration.ApiClient.ParameterToString(palletTypeTag)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddPalletTypeTag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Add new tags for a palletType. Adds a tag to an existing palletType.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="palletTypeId">Id of the palletType to add a tag to</param>
        /// <param name="palletTypeTag">The tag to add</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddPalletTypeTagAsync (int? palletTypeId, string palletTypeTag)
        {
             await AddPalletTypeTagAsyncWithHttpInfo(palletTypeId, palletTypeTag);

        }

        /// <summary>
        /// Add new tags for a palletType. Adds a tag to an existing palletType.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="palletTypeId">Id of the palletType to add a tag to</param>
        /// <param name="palletTypeTag">The tag to add</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddPalletTypeTagAsyncWithHttpInfo (int? palletTypeId, string palletTypeTag)
        {
            // verify the required parameter 'palletTypeId' is set
            if (palletTypeId == null)
                throw new ApiException(400, "Missing required parameter 'palletTypeId' when calling PalletTypeApi->AddPalletTypeTag");
            // verify the required parameter 'palletTypeTag' is set
            if (palletTypeTag == null)
                throw new ApiException(400, "Missing required parameter 'palletTypeTag' when calling PalletTypeApi->AddPalletTypeTag");

            var localVarPath = "/beta/palletType/{palletTypeId}/tag/{palletTypeTag}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (palletTypeId != null) localVarPathParams.Add("palletTypeId", Configuration.ApiClient.ParameterToString(palletTypeId)); // path parameter
            if (palletTypeTag != null) localVarPathParams.Add("palletTypeTag", Configuration.ApiClient.ParameterToString(palletTypeTag)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddPalletTypeTag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a palletType Deletes the palletType identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="palletTypeId">Id of the palletType to be deleted.</param>
        /// <returns></returns>
        public void DeletePalletType (int? palletTypeId)
        {
             DeletePalletTypeWithHttpInfo(palletTypeId);
        }

        /// <summary>
        /// Delete a palletType Deletes the palletType identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="palletTypeId">Id of the palletType to be deleted.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeletePalletTypeWithHttpInfo (int? palletTypeId)
        {
            // verify the required parameter 'palletTypeId' is set
            if (palletTypeId == null)
                throw new ApiException(400, "Missing required parameter 'palletTypeId' when calling PalletTypeApi->DeletePalletType");

            var localVarPath = "/beta/palletType/{palletTypeId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (palletTypeId != null) localVarPathParams.Add("palletTypeId", Configuration.ApiClient.ParameterToString(palletTypeId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeletePalletType", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a palletType Deletes the palletType identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="palletTypeId">Id of the palletType to be deleted.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeletePalletTypeAsync (int? palletTypeId)
        {
             await DeletePalletTypeAsyncWithHttpInfo(palletTypeId);

        }

        /// <summary>
        /// Delete a palletType Deletes the palletType identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="palletTypeId">Id of the palletType to be deleted.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeletePalletTypeAsyncWithHttpInfo (int? palletTypeId)
        {
            // verify the required parameter 'palletTypeId' is set
            if (palletTypeId == null)
                throw new ApiException(400, "Missing required parameter 'palletTypeId' when calling PalletTypeApi->DeletePalletType");

            var localVarPath = "/beta/palletType/{palletTypeId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (palletTypeId != null) localVarPathParams.Add("palletTypeId", Configuration.ApiClient.ParameterToString(palletTypeId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeletePalletType", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a file for a palletType. Deletes an existing palletType file using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="palletTypeId">Id of the palletType to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns></returns>
        public void DeletePalletTypeFile (int? palletTypeId, int? fileId)
        {
             DeletePalletTypeFileWithHttpInfo(palletTypeId, fileId);
        }

        /// <summary>
        /// Delete a file for a palletType. Deletes an existing palletType file using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="palletTypeId">Id of the palletType to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeletePalletTypeFileWithHttpInfo (int? palletTypeId, int? fileId)
        {
            // verify the required parameter 'palletTypeId' is set
            if (palletTypeId == null)
                throw new ApiException(400, "Missing required parameter 'palletTypeId' when calling PalletTypeApi->DeletePalletTypeFile");
            // verify the required parameter 'fileId' is set
            if (fileId == null)
                throw new ApiException(400, "Missing required parameter 'fileId' when calling PalletTypeApi->DeletePalletTypeFile");

            var localVarPath = "/beta/palletType/{palletTypeId}/file/{fileId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (palletTypeId != null) localVarPathParams.Add("palletTypeId", Configuration.ApiClient.ParameterToString(palletTypeId)); // path parameter
            if (fileId != null) localVarPathParams.Add("fileId", Configuration.ApiClient.ParameterToString(fileId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeletePalletTypeFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a file for a palletType. Deletes an existing palletType file using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="palletTypeId">Id of the palletType to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeletePalletTypeFileAsync (int? palletTypeId, int? fileId)
        {
             await DeletePalletTypeFileAsyncWithHttpInfo(palletTypeId, fileId);

        }

        /// <summary>
        /// Delete a file for a palletType. Deletes an existing palletType file using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="palletTypeId">Id of the palletType to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeletePalletTypeFileAsyncWithHttpInfo (int? palletTypeId, int? fileId)
        {
            // verify the required parameter 'palletTypeId' is set
            if (palletTypeId == null)
                throw new ApiException(400, "Missing required parameter 'palletTypeId' when calling PalletTypeApi->DeletePalletTypeFile");
            // verify the required parameter 'fileId' is set
            if (fileId == null)
                throw new ApiException(400, "Missing required parameter 'fileId' when calling PalletTypeApi->DeletePalletTypeFile");

            var localVarPath = "/beta/palletType/{palletTypeId}/file/{fileId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (palletTypeId != null) localVarPathParams.Add("palletTypeId", Configuration.ApiClient.ParameterToString(palletTypeId)); // path parameter
            if (fileId != null) localVarPathParams.Add("fileId", Configuration.ApiClient.ParameterToString(fileId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeletePalletTypeFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a tag for a palletType. Deletes an existing palletType tag using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="palletTypeId">Id of the palletType to remove tag from</param>
        /// <param name="palletTypeTag">The tag to delete</param>
        /// <returns></returns>
        public void DeletePalletTypeTag (int? palletTypeId, string palletTypeTag)
        {
             DeletePalletTypeTagWithHttpInfo(palletTypeId, palletTypeTag);
        }

        /// <summary>
        /// Delete a tag for a palletType. Deletes an existing palletType tag using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="palletTypeId">Id of the palletType to remove tag from</param>
        /// <param name="palletTypeTag">The tag to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeletePalletTypeTagWithHttpInfo (int? palletTypeId, string palletTypeTag)
        {
            // verify the required parameter 'palletTypeId' is set
            if (palletTypeId == null)
                throw new ApiException(400, "Missing required parameter 'palletTypeId' when calling PalletTypeApi->DeletePalletTypeTag");
            // verify the required parameter 'palletTypeTag' is set
            if (palletTypeTag == null)
                throw new ApiException(400, "Missing required parameter 'palletTypeTag' when calling PalletTypeApi->DeletePalletTypeTag");

            var localVarPath = "/beta/palletType/{palletTypeId}/tag/{palletTypeTag}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (palletTypeId != null) localVarPathParams.Add("palletTypeId", Configuration.ApiClient.ParameterToString(palletTypeId)); // path parameter
            if (palletTypeTag != null) localVarPathParams.Add("palletTypeTag", Configuration.ApiClient.ParameterToString(palletTypeTag)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeletePalletTypeTag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a tag for a palletType. Deletes an existing palletType tag using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="palletTypeId">Id of the palletType to remove tag from</param>
        /// <param name="palletTypeTag">The tag to delete</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeletePalletTypeTagAsync (int? palletTypeId, string palletTypeTag)
        {
             await DeletePalletTypeTagAsyncWithHttpInfo(palletTypeId, palletTypeTag);

        }

        /// <summary>
        /// Delete a tag for a palletType. Deletes an existing palletType tag using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="palletTypeId">Id of the palletType to remove tag from</param>
        /// <param name="palletTypeTag">The tag to delete</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeletePalletTypeTagAsyncWithHttpInfo (int? palletTypeId, string palletTypeTag)
        {
            // verify the required parameter 'palletTypeId' is set
            if (palletTypeId == null)
                throw new ApiException(400, "Missing required parameter 'palletTypeId' when calling PalletTypeApi->DeletePalletTypeTag");
            // verify the required parameter 'palletTypeTag' is set
            if (palletTypeTag == null)
                throw new ApiException(400, "Missing required parameter 'palletTypeTag' when calling PalletTypeApi->DeletePalletTypeTag");

            var localVarPath = "/beta/palletType/{palletTypeId}/tag/{palletTypeTag}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (palletTypeId != null) localVarPathParams.Add("palletTypeId", Configuration.ApiClient.ParameterToString(palletTypeId)); // path parameter
            if (palletTypeTag != null) localVarPathParams.Add("palletTypeTag", Configuration.ApiClient.ParameterToString(palletTypeTag)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeletePalletTypeTag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get a duplicated a palletType by id Returns a duplicated palletType identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="palletTypeId">Id of the palletType to be duplicated.</param>
        /// <returns>PalletType</returns>
        public PalletType GetDuplicatePalletTypeById (int? palletTypeId)
        {
             ApiResponse<PalletType> localVarResponse = GetDuplicatePalletTypeByIdWithHttpInfo(palletTypeId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a duplicated a palletType by id Returns a duplicated palletType identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="palletTypeId">Id of the palletType to be duplicated.</param>
        /// <returns>ApiResponse of PalletType</returns>
        public ApiResponse< PalletType > GetDuplicatePalletTypeByIdWithHttpInfo (int? palletTypeId)
        {
            // verify the required parameter 'palletTypeId' is set
            if (palletTypeId == null)
                throw new ApiException(400, "Missing required parameter 'palletTypeId' when calling PalletTypeApi->GetDuplicatePalletTypeById");

            var localVarPath = "/beta/palletType/duplicate/{palletTypeId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (palletTypeId != null) localVarPathParams.Add("palletTypeId", Configuration.ApiClient.ParameterToString(palletTypeId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDuplicatePalletTypeById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PalletType>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PalletType) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PalletType)));
        }

        /// <summary>
        /// Get a duplicated a palletType by id Returns a duplicated palletType identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="palletTypeId">Id of the palletType to be duplicated.</param>
        /// <returns>Task of PalletType</returns>
        public async System.Threading.Tasks.Task<PalletType> GetDuplicatePalletTypeByIdAsync (int? palletTypeId)
        {
             ApiResponse<PalletType> localVarResponse = await GetDuplicatePalletTypeByIdAsyncWithHttpInfo(palletTypeId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a duplicated a palletType by id Returns a duplicated palletType identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="palletTypeId">Id of the palletType to be duplicated.</param>
        /// <returns>Task of ApiResponse (PalletType)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PalletType>> GetDuplicatePalletTypeByIdAsyncWithHttpInfo (int? palletTypeId)
        {
            // verify the required parameter 'palletTypeId' is set
            if (palletTypeId == null)
                throw new ApiException(400, "Missing required parameter 'palletTypeId' when calling PalletTypeApi->GetDuplicatePalletTypeById");

            var localVarPath = "/beta/palletType/duplicate/{palletTypeId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (palletTypeId != null) localVarPathParams.Add("palletTypeId", Configuration.ApiClient.ParameterToString(palletTypeId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDuplicatePalletTypeById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PalletType>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PalletType) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PalletType)));
        }

        /// <summary>
        /// Search palletTypes by filter Returns the list of palletTypes that match the given filter.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>List&lt;PalletType&gt;</returns>
        public List<PalletType> GetPalletTypeByFilter (string filter = null, int? page = null, int? limit = null, string sort = null)
        {
             ApiResponse<List<PalletType>> localVarResponse = GetPalletTypeByFilterWithHttpInfo(filter, page, limit, sort);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Search palletTypes by filter Returns the list of palletTypes that match the given filter.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>ApiResponse of List&lt;PalletType&gt;</returns>
        public ApiResponse< List<PalletType> > GetPalletTypeByFilterWithHttpInfo (string filter = null, int? page = null, int? limit = null, string sort = null)
        {

            var localVarPath = "/beta/palletType/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (filter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (page != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPalletTypeByFilter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<PalletType>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<PalletType>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<PalletType>)));
        }

        /// <summary>
        /// Search palletTypes by filter Returns the list of palletTypes that match the given filter.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>Task of List&lt;PalletType&gt;</returns>
        public async System.Threading.Tasks.Task<List<PalletType>> GetPalletTypeByFilterAsync (string filter = null, int? page = null, int? limit = null, string sort = null)
        {
             ApiResponse<List<PalletType>> localVarResponse = await GetPalletTypeByFilterAsyncWithHttpInfo(filter, page, limit, sort);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Search palletTypes by filter Returns the list of palletTypes that match the given filter.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;PalletType&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<PalletType>>> GetPalletTypeByFilterAsyncWithHttpInfo (string filter = null, int? page = null, int? limit = null, string sort = null)
        {

            var localVarPath = "/beta/palletType/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (filter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (page != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPalletTypeByFilter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<PalletType>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<PalletType>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<PalletType>)));
        }

        /// <summary>
        /// Get a palletType by id Returns the palletType identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="palletTypeId">Id of the palletType to be returned.</param>
        /// <returns>PalletType</returns>
        public PalletType GetPalletTypeById (int? palletTypeId)
        {
             ApiResponse<PalletType> localVarResponse = GetPalletTypeByIdWithHttpInfo(palletTypeId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a palletType by id Returns the palletType identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="palletTypeId">Id of the palletType to be returned.</param>
        /// <returns>ApiResponse of PalletType</returns>
        public ApiResponse< PalletType > GetPalletTypeByIdWithHttpInfo (int? palletTypeId)
        {
            // verify the required parameter 'palletTypeId' is set
            if (palletTypeId == null)
                throw new ApiException(400, "Missing required parameter 'palletTypeId' when calling PalletTypeApi->GetPalletTypeById");

            var localVarPath = "/beta/palletType/{palletTypeId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (palletTypeId != null) localVarPathParams.Add("palletTypeId", Configuration.ApiClient.ParameterToString(palletTypeId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPalletTypeById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PalletType>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PalletType) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PalletType)));
        }

        /// <summary>
        /// Get a palletType by id Returns the palletType identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="palletTypeId">Id of the palletType to be returned.</param>
        /// <returns>Task of PalletType</returns>
        public async System.Threading.Tasks.Task<PalletType> GetPalletTypeByIdAsync (int? palletTypeId)
        {
             ApiResponse<PalletType> localVarResponse = await GetPalletTypeByIdAsyncWithHttpInfo(palletTypeId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a palletType by id Returns the palletType identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="palletTypeId">Id of the palletType to be returned.</param>
        /// <returns>Task of ApiResponse (PalletType)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PalletType>> GetPalletTypeByIdAsyncWithHttpInfo (int? palletTypeId)
        {
            // verify the required parameter 'palletTypeId' is set
            if (palletTypeId == null)
                throw new ApiException(400, "Missing required parameter 'palletTypeId' when calling PalletTypeApi->GetPalletTypeById");

            var localVarPath = "/beta/palletType/{palletTypeId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (palletTypeId != null) localVarPathParams.Add("palletTypeId", Configuration.ApiClient.ParameterToString(palletTypeId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPalletTypeById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PalletType>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PalletType) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PalletType)));
        }

        /// <summary>
        /// Get the files for a palletType. Get all existing palletType files.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="palletTypeId">Id of the palletType to get files for</param>
        /// <returns></returns>
        public void GetPalletTypeFiles (int? palletTypeId)
        {
             GetPalletTypeFilesWithHttpInfo(palletTypeId);
        }

        /// <summary>
        /// Get the files for a palletType. Get all existing palletType files.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="palletTypeId">Id of the palletType to get files for</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GetPalletTypeFilesWithHttpInfo (int? palletTypeId)
        {
            // verify the required parameter 'palletTypeId' is set
            if (palletTypeId == null)
                throw new ApiException(400, "Missing required parameter 'palletTypeId' when calling PalletTypeApi->GetPalletTypeFiles");

            var localVarPath = "/beta/palletType/{palletTypeId}/file";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (palletTypeId != null) localVarPathParams.Add("palletTypeId", Configuration.ApiClient.ParameterToString(palletTypeId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPalletTypeFiles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get the files for a palletType. Get all existing palletType files.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="palletTypeId">Id of the palletType to get files for</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetPalletTypeFilesAsync (int? palletTypeId)
        {
             await GetPalletTypeFilesAsyncWithHttpInfo(palletTypeId);

        }

        /// <summary>
        /// Get the files for a palletType. Get all existing palletType files.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="palletTypeId">Id of the palletType to get files for</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetPalletTypeFilesAsyncWithHttpInfo (int? palletTypeId)
        {
            // verify the required parameter 'palletTypeId' is set
            if (palletTypeId == null)
                throw new ApiException(400, "Missing required parameter 'palletTypeId' when calling PalletTypeApi->GetPalletTypeFiles");

            var localVarPath = "/beta/palletType/{palletTypeId}/file";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (palletTypeId != null) localVarPathParams.Add("palletTypeId", Configuration.ApiClient.ParameterToString(palletTypeId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPalletTypeFiles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get the tags for a palletType. Get all existing palletType tags.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="palletTypeId">Id of the palletType to get tags for</param>
        /// <returns></returns>
        public void GetPalletTypeTags (int? palletTypeId)
        {
             GetPalletTypeTagsWithHttpInfo(palletTypeId);
        }

        /// <summary>
        /// Get the tags for a palletType. Get all existing palletType tags.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="palletTypeId">Id of the palletType to get tags for</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GetPalletTypeTagsWithHttpInfo (int? palletTypeId)
        {
            // verify the required parameter 'palletTypeId' is set
            if (palletTypeId == null)
                throw new ApiException(400, "Missing required parameter 'palletTypeId' when calling PalletTypeApi->GetPalletTypeTags");

            var localVarPath = "/beta/palletType/{palletTypeId}/tag";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (palletTypeId != null) localVarPathParams.Add("palletTypeId", Configuration.ApiClient.ParameterToString(palletTypeId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPalletTypeTags", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get the tags for a palletType. Get all existing palletType tags.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="palletTypeId">Id of the palletType to get tags for</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetPalletTypeTagsAsync (int? palletTypeId)
        {
             await GetPalletTypeTagsAsyncWithHttpInfo(palletTypeId);

        }

        /// <summary>
        /// Get the tags for a palletType. Get all existing palletType tags.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="palletTypeId">Id of the palletType to get tags for</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetPalletTypeTagsAsyncWithHttpInfo (int? palletTypeId)
        {
            // verify the required parameter 'palletTypeId' is set
            if (palletTypeId == null)
                throw new ApiException(400, "Missing required parameter 'palletTypeId' when calling PalletTypeApi->GetPalletTypeTags");

            var localVarPath = "/beta/palletType/{palletTypeId}/tag";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (palletTypeId != null) localVarPathParams.Add("palletTypeId", Configuration.ApiClient.ParameterToString(palletTypeId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPalletTypeTags", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update a palletType Updates an existing palletType using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">PalletType to be updated.</param>
        /// <returns></returns>
        public void UpdatePalletType (PalletType body)
        {
             UpdatePalletTypeWithHttpInfo(body);
        }

        /// <summary>
        /// Update a palletType Updates an existing palletType using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">PalletType to be updated.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdatePalletTypeWithHttpInfo (PalletType body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling PalletTypeApi->UpdatePalletType");

            var localVarPath = "/beta/palletType";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdatePalletType", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update a palletType Updates an existing palletType using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">PalletType to be updated.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdatePalletTypeAsync (PalletType body)
        {
             await UpdatePalletTypeAsyncWithHttpInfo(body);

        }

        /// <summary>
        /// Update a palletType Updates an existing palletType using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">PalletType to be updated.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdatePalletTypeAsyncWithHttpInfo (PalletType body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling PalletTypeApi->UpdatePalletType");

            var localVarPath = "/beta/palletType";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdatePalletType", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update a palletType custom fields Updates an existing palletType custom fields using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">PalletType to be updated.</param>
        /// <returns></returns>
        public void UpdatePalletTypeCustomFields (PalletType body)
        {
             UpdatePalletTypeCustomFieldsWithHttpInfo(body);
        }

        /// <summary>
        /// Update a palletType custom fields Updates an existing palletType custom fields using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">PalletType to be updated.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdatePalletTypeCustomFieldsWithHttpInfo (PalletType body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling PalletTypeApi->UpdatePalletTypeCustomFields");

            var localVarPath = "/beta/palletType/customFields";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdatePalletTypeCustomFields", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update a palletType custom fields Updates an existing palletType custom fields using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">PalletType to be updated.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdatePalletTypeCustomFieldsAsync (PalletType body)
        {
             await UpdatePalletTypeCustomFieldsAsyncWithHttpInfo(body);

        }

        /// <summary>
        /// Update a palletType custom fields Updates an existing palletType custom fields using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">PalletType to be updated.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdatePalletTypeCustomFieldsAsyncWithHttpInfo (PalletType body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling PalletTypeApi->UpdatePalletTypeCustomFields");

            var localVarPath = "/beta/palletType/customFields";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdatePalletTypeCustomFields", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

    }
}
