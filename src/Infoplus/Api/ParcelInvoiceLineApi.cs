/* 
 * Infoplus API
 *
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Infoplus.Client;
using Infoplus.Model;

namespace Infoplus.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IParcelInvoiceLineApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Add new audit for a parcelInvoiceLine
        /// </summary>
        /// <remarks>
        /// Adds an audit to an existing parcelInvoiceLine.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parcelInvoiceLineId">Id of the parcelInvoiceLine to add an audit to</param>
        /// <param name="parcelInvoiceLineAudit">The audit to add</param>
        /// <returns></returns>
        void AddParcelInvoiceLineAudit (int? parcelInvoiceLineId, string parcelInvoiceLineAudit);

        /// <summary>
        /// Add new audit for a parcelInvoiceLine
        /// </summary>
        /// <remarks>
        /// Adds an audit to an existing parcelInvoiceLine.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parcelInvoiceLineId">Id of the parcelInvoiceLine to add an audit to</param>
        /// <param name="parcelInvoiceLineAudit">The audit to add</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddParcelInvoiceLineAuditWithHttpInfo (int? parcelInvoiceLineId, string parcelInvoiceLineAudit);
        /// <summary>
        /// Attach a file to a parcelInvoiceLine
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing parcelInvoiceLine.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parcelInvoiceLineId">Id of the parcelInvoiceLine to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns></returns>
        void AddParcelInvoiceLineFile (int? parcelInvoiceLineId, string fileName);

        /// <summary>
        /// Attach a file to a parcelInvoiceLine
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing parcelInvoiceLine.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parcelInvoiceLineId">Id of the parcelInvoiceLine to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddParcelInvoiceLineFileWithHttpInfo (int? parcelInvoiceLineId, string fileName);
        /// <summary>
        /// Attach a file to a parcelInvoiceLine by URL.
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing parcelInvoiceLine by URL.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="parcelInvoiceLineId">Id of the parcelInvoiceLine to add an file to</param>
        /// <returns></returns>
        void AddParcelInvoiceLineFileByURL (RecordFile body, int? parcelInvoiceLineId);

        /// <summary>
        /// Attach a file to a parcelInvoiceLine by URL.
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing parcelInvoiceLine by URL.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="parcelInvoiceLineId">Id of the parcelInvoiceLine to add an file to</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddParcelInvoiceLineFileByURLWithHttpInfo (RecordFile body, int? parcelInvoiceLineId);
        /// <summary>
        /// Add new tags for a parcelInvoiceLine.
        /// </summary>
        /// <remarks>
        /// Adds a tag to an existing parcelInvoiceLine.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parcelInvoiceLineId">Id of the parcelInvoiceLine to add a tag to</param>
        /// <param name="parcelInvoiceLineTag">The tag to add</param>
        /// <returns></returns>
        void AddParcelInvoiceLineTag (int? parcelInvoiceLineId, string parcelInvoiceLineTag);

        /// <summary>
        /// Add new tags for a parcelInvoiceLine.
        /// </summary>
        /// <remarks>
        /// Adds a tag to an existing parcelInvoiceLine.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parcelInvoiceLineId">Id of the parcelInvoiceLine to add a tag to</param>
        /// <param name="parcelInvoiceLineTag">The tag to add</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddParcelInvoiceLineTagWithHttpInfo (int? parcelInvoiceLineId, string parcelInvoiceLineTag);
        /// <summary>
        /// Delete a file for a parcelInvoiceLine.
        /// </summary>
        /// <remarks>
        /// Deletes an existing parcelInvoiceLine file using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parcelInvoiceLineId">Id of the parcelInvoiceLine to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns></returns>
        void DeleteParcelInvoiceLineFile (int? parcelInvoiceLineId, int? fileId);

        /// <summary>
        /// Delete a file for a parcelInvoiceLine.
        /// </summary>
        /// <remarks>
        /// Deletes an existing parcelInvoiceLine file using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parcelInvoiceLineId">Id of the parcelInvoiceLine to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteParcelInvoiceLineFileWithHttpInfo (int? parcelInvoiceLineId, int? fileId);
        /// <summary>
        /// Delete a tag for a parcelInvoiceLine.
        /// </summary>
        /// <remarks>
        /// Deletes an existing parcelInvoiceLine tag using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parcelInvoiceLineId">Id of the parcelInvoiceLine to remove tag from</param>
        /// <param name="parcelInvoiceLineTag">The tag to delete</param>
        /// <returns></returns>
        void DeleteParcelInvoiceLineTag (int? parcelInvoiceLineId, string parcelInvoiceLineTag);

        /// <summary>
        /// Delete a tag for a parcelInvoiceLine.
        /// </summary>
        /// <remarks>
        /// Deletes an existing parcelInvoiceLine tag using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parcelInvoiceLineId">Id of the parcelInvoiceLine to remove tag from</param>
        /// <param name="parcelInvoiceLineTag">The tag to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteParcelInvoiceLineTagWithHttpInfo (int? parcelInvoiceLineId, string parcelInvoiceLineTag);
        /// <summary>
        /// Get a duplicated a parcelInvoiceLine by id
        /// </summary>
        /// <remarks>
        /// Returns a duplicated parcelInvoiceLine identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parcelInvoiceLineId">Id of the parcelInvoiceLine to be duplicated.</param>
        /// <returns>ParcelInvoiceLine</returns>
        ParcelInvoiceLine GetDuplicateParcelInvoiceLineById (int? parcelInvoiceLineId);

        /// <summary>
        /// Get a duplicated a parcelInvoiceLine by id
        /// </summary>
        /// <remarks>
        /// Returns a duplicated parcelInvoiceLine identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parcelInvoiceLineId">Id of the parcelInvoiceLine to be duplicated.</param>
        /// <returns>ApiResponse of ParcelInvoiceLine</returns>
        ApiResponse<ParcelInvoiceLine> GetDuplicateParcelInvoiceLineByIdWithHttpInfo (int? parcelInvoiceLineId);
        /// <summary>
        /// Search parcelInvoiceLines by filter
        /// </summary>
        /// <remarks>
        /// Returns the list of parcelInvoiceLines that match the given filter.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>List&lt;ParcelInvoiceLine&gt;</returns>
        List<ParcelInvoiceLine> GetParcelInvoiceLineByFilter (string filter = null, int? page = null, int? limit = null, string sort = null);

        /// <summary>
        /// Search parcelInvoiceLines by filter
        /// </summary>
        /// <remarks>
        /// Returns the list of parcelInvoiceLines that match the given filter.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>ApiResponse of List&lt;ParcelInvoiceLine&gt;</returns>
        ApiResponse<List<ParcelInvoiceLine>> GetParcelInvoiceLineByFilterWithHttpInfo (string filter = null, int? page = null, int? limit = null, string sort = null);
        /// <summary>
        /// Get a parcelInvoiceLine by id
        /// </summary>
        /// <remarks>
        /// Returns the parcelInvoiceLine identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parcelInvoiceLineId">Id of the parcelInvoiceLine to be returned.</param>
        /// <returns>ParcelInvoiceLine</returns>
        ParcelInvoiceLine GetParcelInvoiceLineById (int? parcelInvoiceLineId);

        /// <summary>
        /// Get a parcelInvoiceLine by id
        /// </summary>
        /// <remarks>
        /// Returns the parcelInvoiceLine identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parcelInvoiceLineId">Id of the parcelInvoiceLine to be returned.</param>
        /// <returns>ApiResponse of ParcelInvoiceLine</returns>
        ApiResponse<ParcelInvoiceLine> GetParcelInvoiceLineByIdWithHttpInfo (int? parcelInvoiceLineId);
        /// <summary>
        /// Get the files for a parcelInvoiceLine.
        /// </summary>
        /// <remarks>
        /// Get all existing parcelInvoiceLine files.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parcelInvoiceLineId">Id of the parcelInvoiceLine to get files for</param>
        /// <returns></returns>
        void GetParcelInvoiceLineFiles (int? parcelInvoiceLineId);

        /// <summary>
        /// Get the files for a parcelInvoiceLine.
        /// </summary>
        /// <remarks>
        /// Get all existing parcelInvoiceLine files.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parcelInvoiceLineId">Id of the parcelInvoiceLine to get files for</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetParcelInvoiceLineFilesWithHttpInfo (int? parcelInvoiceLineId);
        /// <summary>
        /// Get the tags for a parcelInvoiceLine.
        /// </summary>
        /// <remarks>
        /// Get all existing parcelInvoiceLine tags.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parcelInvoiceLineId">Id of the parcelInvoiceLine to get tags for</param>
        /// <returns></returns>
        void GetParcelInvoiceLineTags (int? parcelInvoiceLineId);

        /// <summary>
        /// Get the tags for a parcelInvoiceLine.
        /// </summary>
        /// <remarks>
        /// Get all existing parcelInvoiceLine tags.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parcelInvoiceLineId">Id of the parcelInvoiceLine to get tags for</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetParcelInvoiceLineTagsWithHttpInfo (int? parcelInvoiceLineId);
        /// <summary>
        /// Update a parcelInvoiceLine
        /// </summary>
        /// <remarks>
        /// Updates an existing parcelInvoiceLine using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">ParcelInvoiceLine to be updated.</param>
        /// <returns></returns>
        void UpdateParcelInvoiceLine (ParcelInvoiceLine body);

        /// <summary>
        /// Update a parcelInvoiceLine
        /// </summary>
        /// <remarks>
        /// Updates an existing parcelInvoiceLine using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">ParcelInvoiceLine to be updated.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateParcelInvoiceLineWithHttpInfo (ParcelInvoiceLine body);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Add new audit for a parcelInvoiceLine
        /// </summary>
        /// <remarks>
        /// Adds an audit to an existing parcelInvoiceLine.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parcelInvoiceLineId">Id of the parcelInvoiceLine to add an audit to</param>
        /// <param name="parcelInvoiceLineAudit">The audit to add</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddParcelInvoiceLineAuditAsync (int? parcelInvoiceLineId, string parcelInvoiceLineAudit);

        /// <summary>
        /// Add new audit for a parcelInvoiceLine
        /// </summary>
        /// <remarks>
        /// Adds an audit to an existing parcelInvoiceLine.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parcelInvoiceLineId">Id of the parcelInvoiceLine to add an audit to</param>
        /// <param name="parcelInvoiceLineAudit">The audit to add</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddParcelInvoiceLineAuditAsyncWithHttpInfo (int? parcelInvoiceLineId, string parcelInvoiceLineAudit);
        /// <summary>
        /// Attach a file to a parcelInvoiceLine
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing parcelInvoiceLine.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parcelInvoiceLineId">Id of the parcelInvoiceLine to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddParcelInvoiceLineFileAsync (int? parcelInvoiceLineId, string fileName);

        /// <summary>
        /// Attach a file to a parcelInvoiceLine
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing parcelInvoiceLine.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parcelInvoiceLineId">Id of the parcelInvoiceLine to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddParcelInvoiceLineFileAsyncWithHttpInfo (int? parcelInvoiceLineId, string fileName);
        /// <summary>
        /// Attach a file to a parcelInvoiceLine by URL.
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing parcelInvoiceLine by URL.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="parcelInvoiceLineId">Id of the parcelInvoiceLine to add an file to</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddParcelInvoiceLineFileByURLAsync (RecordFile body, int? parcelInvoiceLineId);

        /// <summary>
        /// Attach a file to a parcelInvoiceLine by URL.
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing parcelInvoiceLine by URL.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="parcelInvoiceLineId">Id of the parcelInvoiceLine to add an file to</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddParcelInvoiceLineFileByURLAsyncWithHttpInfo (RecordFile body, int? parcelInvoiceLineId);
        /// <summary>
        /// Add new tags for a parcelInvoiceLine.
        /// </summary>
        /// <remarks>
        /// Adds a tag to an existing parcelInvoiceLine.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parcelInvoiceLineId">Id of the parcelInvoiceLine to add a tag to</param>
        /// <param name="parcelInvoiceLineTag">The tag to add</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddParcelInvoiceLineTagAsync (int? parcelInvoiceLineId, string parcelInvoiceLineTag);

        /// <summary>
        /// Add new tags for a parcelInvoiceLine.
        /// </summary>
        /// <remarks>
        /// Adds a tag to an existing parcelInvoiceLine.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parcelInvoiceLineId">Id of the parcelInvoiceLine to add a tag to</param>
        /// <param name="parcelInvoiceLineTag">The tag to add</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddParcelInvoiceLineTagAsyncWithHttpInfo (int? parcelInvoiceLineId, string parcelInvoiceLineTag);
        /// <summary>
        /// Delete a file for a parcelInvoiceLine.
        /// </summary>
        /// <remarks>
        /// Deletes an existing parcelInvoiceLine file using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parcelInvoiceLineId">Id of the parcelInvoiceLine to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteParcelInvoiceLineFileAsync (int? parcelInvoiceLineId, int? fileId);

        /// <summary>
        /// Delete a file for a parcelInvoiceLine.
        /// </summary>
        /// <remarks>
        /// Deletes an existing parcelInvoiceLine file using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parcelInvoiceLineId">Id of the parcelInvoiceLine to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteParcelInvoiceLineFileAsyncWithHttpInfo (int? parcelInvoiceLineId, int? fileId);
        /// <summary>
        /// Delete a tag for a parcelInvoiceLine.
        /// </summary>
        /// <remarks>
        /// Deletes an existing parcelInvoiceLine tag using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parcelInvoiceLineId">Id of the parcelInvoiceLine to remove tag from</param>
        /// <param name="parcelInvoiceLineTag">The tag to delete</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteParcelInvoiceLineTagAsync (int? parcelInvoiceLineId, string parcelInvoiceLineTag);

        /// <summary>
        /// Delete a tag for a parcelInvoiceLine.
        /// </summary>
        /// <remarks>
        /// Deletes an existing parcelInvoiceLine tag using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parcelInvoiceLineId">Id of the parcelInvoiceLine to remove tag from</param>
        /// <param name="parcelInvoiceLineTag">The tag to delete</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteParcelInvoiceLineTagAsyncWithHttpInfo (int? parcelInvoiceLineId, string parcelInvoiceLineTag);
        /// <summary>
        /// Get a duplicated a parcelInvoiceLine by id
        /// </summary>
        /// <remarks>
        /// Returns a duplicated parcelInvoiceLine identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parcelInvoiceLineId">Id of the parcelInvoiceLine to be duplicated.</param>
        /// <returns>Task of ParcelInvoiceLine</returns>
        System.Threading.Tasks.Task<ParcelInvoiceLine> GetDuplicateParcelInvoiceLineByIdAsync (int? parcelInvoiceLineId);

        /// <summary>
        /// Get a duplicated a parcelInvoiceLine by id
        /// </summary>
        /// <remarks>
        /// Returns a duplicated parcelInvoiceLine identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parcelInvoiceLineId">Id of the parcelInvoiceLine to be duplicated.</param>
        /// <returns>Task of ApiResponse (ParcelInvoiceLine)</returns>
        System.Threading.Tasks.Task<ApiResponse<ParcelInvoiceLine>> GetDuplicateParcelInvoiceLineByIdAsyncWithHttpInfo (int? parcelInvoiceLineId);
        /// <summary>
        /// Search parcelInvoiceLines by filter
        /// </summary>
        /// <remarks>
        /// Returns the list of parcelInvoiceLines that match the given filter.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>Task of List&lt;ParcelInvoiceLine&gt;</returns>
        System.Threading.Tasks.Task<List<ParcelInvoiceLine>> GetParcelInvoiceLineByFilterAsync (string filter = null, int? page = null, int? limit = null, string sort = null);

        /// <summary>
        /// Search parcelInvoiceLines by filter
        /// </summary>
        /// <remarks>
        /// Returns the list of parcelInvoiceLines that match the given filter.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ParcelInvoiceLine&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ParcelInvoiceLine>>> GetParcelInvoiceLineByFilterAsyncWithHttpInfo (string filter = null, int? page = null, int? limit = null, string sort = null);
        /// <summary>
        /// Get a parcelInvoiceLine by id
        /// </summary>
        /// <remarks>
        /// Returns the parcelInvoiceLine identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parcelInvoiceLineId">Id of the parcelInvoiceLine to be returned.</param>
        /// <returns>Task of ParcelInvoiceLine</returns>
        System.Threading.Tasks.Task<ParcelInvoiceLine> GetParcelInvoiceLineByIdAsync (int? parcelInvoiceLineId);

        /// <summary>
        /// Get a parcelInvoiceLine by id
        /// </summary>
        /// <remarks>
        /// Returns the parcelInvoiceLine identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parcelInvoiceLineId">Id of the parcelInvoiceLine to be returned.</param>
        /// <returns>Task of ApiResponse (ParcelInvoiceLine)</returns>
        System.Threading.Tasks.Task<ApiResponse<ParcelInvoiceLine>> GetParcelInvoiceLineByIdAsyncWithHttpInfo (int? parcelInvoiceLineId);
        /// <summary>
        /// Get the files for a parcelInvoiceLine.
        /// </summary>
        /// <remarks>
        /// Get all existing parcelInvoiceLine files.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parcelInvoiceLineId">Id of the parcelInvoiceLine to get files for</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetParcelInvoiceLineFilesAsync (int? parcelInvoiceLineId);

        /// <summary>
        /// Get the files for a parcelInvoiceLine.
        /// </summary>
        /// <remarks>
        /// Get all existing parcelInvoiceLine files.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parcelInvoiceLineId">Id of the parcelInvoiceLine to get files for</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetParcelInvoiceLineFilesAsyncWithHttpInfo (int? parcelInvoiceLineId);
        /// <summary>
        /// Get the tags for a parcelInvoiceLine.
        /// </summary>
        /// <remarks>
        /// Get all existing parcelInvoiceLine tags.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parcelInvoiceLineId">Id of the parcelInvoiceLine to get tags for</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetParcelInvoiceLineTagsAsync (int? parcelInvoiceLineId);

        /// <summary>
        /// Get the tags for a parcelInvoiceLine.
        /// </summary>
        /// <remarks>
        /// Get all existing parcelInvoiceLine tags.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parcelInvoiceLineId">Id of the parcelInvoiceLine to get tags for</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetParcelInvoiceLineTagsAsyncWithHttpInfo (int? parcelInvoiceLineId);
        /// <summary>
        /// Update a parcelInvoiceLine
        /// </summary>
        /// <remarks>
        /// Updates an existing parcelInvoiceLine using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">ParcelInvoiceLine to be updated.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateParcelInvoiceLineAsync (ParcelInvoiceLine body);

        /// <summary>
        /// Update a parcelInvoiceLine
        /// </summary>
        /// <remarks>
        /// Updates an existing parcelInvoiceLine using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">ParcelInvoiceLine to be updated.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateParcelInvoiceLineAsyncWithHttpInfo (ParcelInvoiceLine body);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ParcelInvoiceLineApi : IParcelInvoiceLineApi
    {
        private Infoplus.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ParcelInvoiceLineApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ParcelInvoiceLineApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = Infoplus.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ParcelInvoiceLineApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ParcelInvoiceLineApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Infoplus.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Infoplus.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Add new audit for a parcelInvoiceLine Adds an audit to an existing parcelInvoiceLine.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parcelInvoiceLineId">Id of the parcelInvoiceLine to add an audit to</param>
        /// <param name="parcelInvoiceLineAudit">The audit to add</param>
        /// <returns></returns>
        public void AddParcelInvoiceLineAudit (int? parcelInvoiceLineId, string parcelInvoiceLineAudit)
        {
             AddParcelInvoiceLineAuditWithHttpInfo(parcelInvoiceLineId, parcelInvoiceLineAudit);
        }

        /// <summary>
        /// Add new audit for a parcelInvoiceLine Adds an audit to an existing parcelInvoiceLine.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parcelInvoiceLineId">Id of the parcelInvoiceLine to add an audit to</param>
        /// <param name="parcelInvoiceLineAudit">The audit to add</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AddParcelInvoiceLineAuditWithHttpInfo (int? parcelInvoiceLineId, string parcelInvoiceLineAudit)
        {
            // verify the required parameter 'parcelInvoiceLineId' is set
            if (parcelInvoiceLineId == null)
                throw new ApiException(400, "Missing required parameter 'parcelInvoiceLineId' when calling ParcelInvoiceLineApi->AddParcelInvoiceLineAudit");
            // verify the required parameter 'parcelInvoiceLineAudit' is set
            if (parcelInvoiceLineAudit == null)
                throw new ApiException(400, "Missing required parameter 'parcelInvoiceLineAudit' when calling ParcelInvoiceLineApi->AddParcelInvoiceLineAudit");

            var localVarPath = "/beta/parcelInvoiceLine/{parcelInvoiceLineId}/audit/{parcelInvoiceLineAudit}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (parcelInvoiceLineId != null) localVarPathParams.Add("parcelInvoiceLineId", Configuration.ApiClient.ParameterToString(parcelInvoiceLineId)); // path parameter
            if (parcelInvoiceLineAudit != null) localVarPathParams.Add("parcelInvoiceLineAudit", Configuration.ApiClient.ParameterToString(parcelInvoiceLineAudit)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddParcelInvoiceLineAudit", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Add new audit for a parcelInvoiceLine Adds an audit to an existing parcelInvoiceLine.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parcelInvoiceLineId">Id of the parcelInvoiceLine to add an audit to</param>
        /// <param name="parcelInvoiceLineAudit">The audit to add</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddParcelInvoiceLineAuditAsync (int? parcelInvoiceLineId, string parcelInvoiceLineAudit)
        {
             await AddParcelInvoiceLineAuditAsyncWithHttpInfo(parcelInvoiceLineId, parcelInvoiceLineAudit);

        }

        /// <summary>
        /// Add new audit for a parcelInvoiceLine Adds an audit to an existing parcelInvoiceLine.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parcelInvoiceLineId">Id of the parcelInvoiceLine to add an audit to</param>
        /// <param name="parcelInvoiceLineAudit">The audit to add</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddParcelInvoiceLineAuditAsyncWithHttpInfo (int? parcelInvoiceLineId, string parcelInvoiceLineAudit)
        {
            // verify the required parameter 'parcelInvoiceLineId' is set
            if (parcelInvoiceLineId == null)
                throw new ApiException(400, "Missing required parameter 'parcelInvoiceLineId' when calling ParcelInvoiceLineApi->AddParcelInvoiceLineAudit");
            // verify the required parameter 'parcelInvoiceLineAudit' is set
            if (parcelInvoiceLineAudit == null)
                throw new ApiException(400, "Missing required parameter 'parcelInvoiceLineAudit' when calling ParcelInvoiceLineApi->AddParcelInvoiceLineAudit");

            var localVarPath = "/beta/parcelInvoiceLine/{parcelInvoiceLineId}/audit/{parcelInvoiceLineAudit}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (parcelInvoiceLineId != null) localVarPathParams.Add("parcelInvoiceLineId", Configuration.ApiClient.ParameterToString(parcelInvoiceLineId)); // path parameter
            if (parcelInvoiceLineAudit != null) localVarPathParams.Add("parcelInvoiceLineAudit", Configuration.ApiClient.ParameterToString(parcelInvoiceLineAudit)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddParcelInvoiceLineAudit", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Attach a file to a parcelInvoiceLine Adds a file to an existing parcelInvoiceLine.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parcelInvoiceLineId">Id of the parcelInvoiceLine to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns></returns>
        public void AddParcelInvoiceLineFile (int? parcelInvoiceLineId, string fileName)
        {
             AddParcelInvoiceLineFileWithHttpInfo(parcelInvoiceLineId, fileName);
        }

        /// <summary>
        /// Attach a file to a parcelInvoiceLine Adds a file to an existing parcelInvoiceLine.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parcelInvoiceLineId">Id of the parcelInvoiceLine to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AddParcelInvoiceLineFileWithHttpInfo (int? parcelInvoiceLineId, string fileName)
        {
            // verify the required parameter 'parcelInvoiceLineId' is set
            if (parcelInvoiceLineId == null)
                throw new ApiException(400, "Missing required parameter 'parcelInvoiceLineId' when calling ParcelInvoiceLineApi->AddParcelInvoiceLineFile");
            // verify the required parameter 'fileName' is set
            if (fileName == null)
                throw new ApiException(400, "Missing required parameter 'fileName' when calling ParcelInvoiceLineApi->AddParcelInvoiceLineFile");

            var localVarPath = "/beta/parcelInvoiceLine/{parcelInvoiceLineId}/file/{fileName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (parcelInvoiceLineId != null) localVarPathParams.Add("parcelInvoiceLineId", Configuration.ApiClient.ParameterToString(parcelInvoiceLineId)); // path parameter
            if (fileName != null) localVarPathParams.Add("fileName", Configuration.ApiClient.ParameterToString(fileName)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddParcelInvoiceLineFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Attach a file to a parcelInvoiceLine Adds a file to an existing parcelInvoiceLine.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parcelInvoiceLineId">Id of the parcelInvoiceLine to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddParcelInvoiceLineFileAsync (int? parcelInvoiceLineId, string fileName)
        {
             await AddParcelInvoiceLineFileAsyncWithHttpInfo(parcelInvoiceLineId, fileName);

        }

        /// <summary>
        /// Attach a file to a parcelInvoiceLine Adds a file to an existing parcelInvoiceLine.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parcelInvoiceLineId">Id of the parcelInvoiceLine to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddParcelInvoiceLineFileAsyncWithHttpInfo (int? parcelInvoiceLineId, string fileName)
        {
            // verify the required parameter 'parcelInvoiceLineId' is set
            if (parcelInvoiceLineId == null)
                throw new ApiException(400, "Missing required parameter 'parcelInvoiceLineId' when calling ParcelInvoiceLineApi->AddParcelInvoiceLineFile");
            // verify the required parameter 'fileName' is set
            if (fileName == null)
                throw new ApiException(400, "Missing required parameter 'fileName' when calling ParcelInvoiceLineApi->AddParcelInvoiceLineFile");

            var localVarPath = "/beta/parcelInvoiceLine/{parcelInvoiceLineId}/file/{fileName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (parcelInvoiceLineId != null) localVarPathParams.Add("parcelInvoiceLineId", Configuration.ApiClient.ParameterToString(parcelInvoiceLineId)); // path parameter
            if (fileName != null) localVarPathParams.Add("fileName", Configuration.ApiClient.ParameterToString(fileName)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddParcelInvoiceLineFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Attach a file to a parcelInvoiceLine by URL. Adds a file to an existing parcelInvoiceLine by URL.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="parcelInvoiceLineId">Id of the parcelInvoiceLine to add an file to</param>
        /// <returns></returns>
        public void AddParcelInvoiceLineFileByURL (RecordFile body, int? parcelInvoiceLineId)
        {
             AddParcelInvoiceLineFileByURLWithHttpInfo(body, parcelInvoiceLineId);
        }

        /// <summary>
        /// Attach a file to a parcelInvoiceLine by URL. Adds a file to an existing parcelInvoiceLine by URL.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="parcelInvoiceLineId">Id of the parcelInvoiceLine to add an file to</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AddParcelInvoiceLineFileByURLWithHttpInfo (RecordFile body, int? parcelInvoiceLineId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ParcelInvoiceLineApi->AddParcelInvoiceLineFileByURL");
            // verify the required parameter 'parcelInvoiceLineId' is set
            if (parcelInvoiceLineId == null)
                throw new ApiException(400, "Missing required parameter 'parcelInvoiceLineId' when calling ParcelInvoiceLineApi->AddParcelInvoiceLineFileByURL");

            var localVarPath = "/beta/parcelInvoiceLine/{parcelInvoiceLineId}/file";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (parcelInvoiceLineId != null) localVarPathParams.Add("parcelInvoiceLineId", Configuration.ApiClient.ParameterToString(parcelInvoiceLineId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddParcelInvoiceLineFileByURL", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Attach a file to a parcelInvoiceLine by URL. Adds a file to an existing parcelInvoiceLine by URL.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="parcelInvoiceLineId">Id of the parcelInvoiceLine to add an file to</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddParcelInvoiceLineFileByURLAsync (RecordFile body, int? parcelInvoiceLineId)
        {
             await AddParcelInvoiceLineFileByURLAsyncWithHttpInfo(body, parcelInvoiceLineId);

        }

        /// <summary>
        /// Attach a file to a parcelInvoiceLine by URL. Adds a file to an existing parcelInvoiceLine by URL.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="parcelInvoiceLineId">Id of the parcelInvoiceLine to add an file to</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddParcelInvoiceLineFileByURLAsyncWithHttpInfo (RecordFile body, int? parcelInvoiceLineId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ParcelInvoiceLineApi->AddParcelInvoiceLineFileByURL");
            // verify the required parameter 'parcelInvoiceLineId' is set
            if (parcelInvoiceLineId == null)
                throw new ApiException(400, "Missing required parameter 'parcelInvoiceLineId' when calling ParcelInvoiceLineApi->AddParcelInvoiceLineFileByURL");

            var localVarPath = "/beta/parcelInvoiceLine/{parcelInvoiceLineId}/file";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (parcelInvoiceLineId != null) localVarPathParams.Add("parcelInvoiceLineId", Configuration.ApiClient.ParameterToString(parcelInvoiceLineId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddParcelInvoiceLineFileByURL", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Add new tags for a parcelInvoiceLine. Adds a tag to an existing parcelInvoiceLine.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parcelInvoiceLineId">Id of the parcelInvoiceLine to add a tag to</param>
        /// <param name="parcelInvoiceLineTag">The tag to add</param>
        /// <returns></returns>
        public void AddParcelInvoiceLineTag (int? parcelInvoiceLineId, string parcelInvoiceLineTag)
        {
             AddParcelInvoiceLineTagWithHttpInfo(parcelInvoiceLineId, parcelInvoiceLineTag);
        }

        /// <summary>
        /// Add new tags for a parcelInvoiceLine. Adds a tag to an existing parcelInvoiceLine.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parcelInvoiceLineId">Id of the parcelInvoiceLine to add a tag to</param>
        /// <param name="parcelInvoiceLineTag">The tag to add</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AddParcelInvoiceLineTagWithHttpInfo (int? parcelInvoiceLineId, string parcelInvoiceLineTag)
        {
            // verify the required parameter 'parcelInvoiceLineId' is set
            if (parcelInvoiceLineId == null)
                throw new ApiException(400, "Missing required parameter 'parcelInvoiceLineId' when calling ParcelInvoiceLineApi->AddParcelInvoiceLineTag");
            // verify the required parameter 'parcelInvoiceLineTag' is set
            if (parcelInvoiceLineTag == null)
                throw new ApiException(400, "Missing required parameter 'parcelInvoiceLineTag' when calling ParcelInvoiceLineApi->AddParcelInvoiceLineTag");

            var localVarPath = "/beta/parcelInvoiceLine/{parcelInvoiceLineId}/tag/{parcelInvoiceLineTag}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (parcelInvoiceLineId != null) localVarPathParams.Add("parcelInvoiceLineId", Configuration.ApiClient.ParameterToString(parcelInvoiceLineId)); // path parameter
            if (parcelInvoiceLineTag != null) localVarPathParams.Add("parcelInvoiceLineTag", Configuration.ApiClient.ParameterToString(parcelInvoiceLineTag)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddParcelInvoiceLineTag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Add new tags for a parcelInvoiceLine. Adds a tag to an existing parcelInvoiceLine.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parcelInvoiceLineId">Id of the parcelInvoiceLine to add a tag to</param>
        /// <param name="parcelInvoiceLineTag">The tag to add</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddParcelInvoiceLineTagAsync (int? parcelInvoiceLineId, string parcelInvoiceLineTag)
        {
             await AddParcelInvoiceLineTagAsyncWithHttpInfo(parcelInvoiceLineId, parcelInvoiceLineTag);

        }

        /// <summary>
        /// Add new tags for a parcelInvoiceLine. Adds a tag to an existing parcelInvoiceLine.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parcelInvoiceLineId">Id of the parcelInvoiceLine to add a tag to</param>
        /// <param name="parcelInvoiceLineTag">The tag to add</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddParcelInvoiceLineTagAsyncWithHttpInfo (int? parcelInvoiceLineId, string parcelInvoiceLineTag)
        {
            // verify the required parameter 'parcelInvoiceLineId' is set
            if (parcelInvoiceLineId == null)
                throw new ApiException(400, "Missing required parameter 'parcelInvoiceLineId' when calling ParcelInvoiceLineApi->AddParcelInvoiceLineTag");
            // verify the required parameter 'parcelInvoiceLineTag' is set
            if (parcelInvoiceLineTag == null)
                throw new ApiException(400, "Missing required parameter 'parcelInvoiceLineTag' when calling ParcelInvoiceLineApi->AddParcelInvoiceLineTag");

            var localVarPath = "/beta/parcelInvoiceLine/{parcelInvoiceLineId}/tag/{parcelInvoiceLineTag}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (parcelInvoiceLineId != null) localVarPathParams.Add("parcelInvoiceLineId", Configuration.ApiClient.ParameterToString(parcelInvoiceLineId)); // path parameter
            if (parcelInvoiceLineTag != null) localVarPathParams.Add("parcelInvoiceLineTag", Configuration.ApiClient.ParameterToString(parcelInvoiceLineTag)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddParcelInvoiceLineTag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a file for a parcelInvoiceLine. Deletes an existing parcelInvoiceLine file using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parcelInvoiceLineId">Id of the parcelInvoiceLine to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns></returns>
        public void DeleteParcelInvoiceLineFile (int? parcelInvoiceLineId, int? fileId)
        {
             DeleteParcelInvoiceLineFileWithHttpInfo(parcelInvoiceLineId, fileId);
        }

        /// <summary>
        /// Delete a file for a parcelInvoiceLine. Deletes an existing parcelInvoiceLine file using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parcelInvoiceLineId">Id of the parcelInvoiceLine to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteParcelInvoiceLineFileWithHttpInfo (int? parcelInvoiceLineId, int? fileId)
        {
            // verify the required parameter 'parcelInvoiceLineId' is set
            if (parcelInvoiceLineId == null)
                throw new ApiException(400, "Missing required parameter 'parcelInvoiceLineId' when calling ParcelInvoiceLineApi->DeleteParcelInvoiceLineFile");
            // verify the required parameter 'fileId' is set
            if (fileId == null)
                throw new ApiException(400, "Missing required parameter 'fileId' when calling ParcelInvoiceLineApi->DeleteParcelInvoiceLineFile");

            var localVarPath = "/beta/parcelInvoiceLine/{parcelInvoiceLineId}/file/{fileId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (parcelInvoiceLineId != null) localVarPathParams.Add("parcelInvoiceLineId", Configuration.ApiClient.ParameterToString(parcelInvoiceLineId)); // path parameter
            if (fileId != null) localVarPathParams.Add("fileId", Configuration.ApiClient.ParameterToString(fileId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteParcelInvoiceLineFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a file for a parcelInvoiceLine. Deletes an existing parcelInvoiceLine file using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parcelInvoiceLineId">Id of the parcelInvoiceLine to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteParcelInvoiceLineFileAsync (int? parcelInvoiceLineId, int? fileId)
        {
             await DeleteParcelInvoiceLineFileAsyncWithHttpInfo(parcelInvoiceLineId, fileId);

        }

        /// <summary>
        /// Delete a file for a parcelInvoiceLine. Deletes an existing parcelInvoiceLine file using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parcelInvoiceLineId">Id of the parcelInvoiceLine to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteParcelInvoiceLineFileAsyncWithHttpInfo (int? parcelInvoiceLineId, int? fileId)
        {
            // verify the required parameter 'parcelInvoiceLineId' is set
            if (parcelInvoiceLineId == null)
                throw new ApiException(400, "Missing required parameter 'parcelInvoiceLineId' when calling ParcelInvoiceLineApi->DeleteParcelInvoiceLineFile");
            // verify the required parameter 'fileId' is set
            if (fileId == null)
                throw new ApiException(400, "Missing required parameter 'fileId' when calling ParcelInvoiceLineApi->DeleteParcelInvoiceLineFile");

            var localVarPath = "/beta/parcelInvoiceLine/{parcelInvoiceLineId}/file/{fileId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (parcelInvoiceLineId != null) localVarPathParams.Add("parcelInvoiceLineId", Configuration.ApiClient.ParameterToString(parcelInvoiceLineId)); // path parameter
            if (fileId != null) localVarPathParams.Add("fileId", Configuration.ApiClient.ParameterToString(fileId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteParcelInvoiceLineFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a tag for a parcelInvoiceLine. Deletes an existing parcelInvoiceLine tag using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parcelInvoiceLineId">Id of the parcelInvoiceLine to remove tag from</param>
        /// <param name="parcelInvoiceLineTag">The tag to delete</param>
        /// <returns></returns>
        public void DeleteParcelInvoiceLineTag (int? parcelInvoiceLineId, string parcelInvoiceLineTag)
        {
             DeleteParcelInvoiceLineTagWithHttpInfo(parcelInvoiceLineId, parcelInvoiceLineTag);
        }

        /// <summary>
        /// Delete a tag for a parcelInvoiceLine. Deletes an existing parcelInvoiceLine tag using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parcelInvoiceLineId">Id of the parcelInvoiceLine to remove tag from</param>
        /// <param name="parcelInvoiceLineTag">The tag to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteParcelInvoiceLineTagWithHttpInfo (int? parcelInvoiceLineId, string parcelInvoiceLineTag)
        {
            // verify the required parameter 'parcelInvoiceLineId' is set
            if (parcelInvoiceLineId == null)
                throw new ApiException(400, "Missing required parameter 'parcelInvoiceLineId' when calling ParcelInvoiceLineApi->DeleteParcelInvoiceLineTag");
            // verify the required parameter 'parcelInvoiceLineTag' is set
            if (parcelInvoiceLineTag == null)
                throw new ApiException(400, "Missing required parameter 'parcelInvoiceLineTag' when calling ParcelInvoiceLineApi->DeleteParcelInvoiceLineTag");

            var localVarPath = "/beta/parcelInvoiceLine/{parcelInvoiceLineId}/tag/{parcelInvoiceLineTag}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (parcelInvoiceLineId != null) localVarPathParams.Add("parcelInvoiceLineId", Configuration.ApiClient.ParameterToString(parcelInvoiceLineId)); // path parameter
            if (parcelInvoiceLineTag != null) localVarPathParams.Add("parcelInvoiceLineTag", Configuration.ApiClient.ParameterToString(parcelInvoiceLineTag)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteParcelInvoiceLineTag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a tag for a parcelInvoiceLine. Deletes an existing parcelInvoiceLine tag using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parcelInvoiceLineId">Id of the parcelInvoiceLine to remove tag from</param>
        /// <param name="parcelInvoiceLineTag">The tag to delete</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteParcelInvoiceLineTagAsync (int? parcelInvoiceLineId, string parcelInvoiceLineTag)
        {
             await DeleteParcelInvoiceLineTagAsyncWithHttpInfo(parcelInvoiceLineId, parcelInvoiceLineTag);

        }

        /// <summary>
        /// Delete a tag for a parcelInvoiceLine. Deletes an existing parcelInvoiceLine tag using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parcelInvoiceLineId">Id of the parcelInvoiceLine to remove tag from</param>
        /// <param name="parcelInvoiceLineTag">The tag to delete</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteParcelInvoiceLineTagAsyncWithHttpInfo (int? parcelInvoiceLineId, string parcelInvoiceLineTag)
        {
            // verify the required parameter 'parcelInvoiceLineId' is set
            if (parcelInvoiceLineId == null)
                throw new ApiException(400, "Missing required parameter 'parcelInvoiceLineId' when calling ParcelInvoiceLineApi->DeleteParcelInvoiceLineTag");
            // verify the required parameter 'parcelInvoiceLineTag' is set
            if (parcelInvoiceLineTag == null)
                throw new ApiException(400, "Missing required parameter 'parcelInvoiceLineTag' when calling ParcelInvoiceLineApi->DeleteParcelInvoiceLineTag");

            var localVarPath = "/beta/parcelInvoiceLine/{parcelInvoiceLineId}/tag/{parcelInvoiceLineTag}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (parcelInvoiceLineId != null) localVarPathParams.Add("parcelInvoiceLineId", Configuration.ApiClient.ParameterToString(parcelInvoiceLineId)); // path parameter
            if (parcelInvoiceLineTag != null) localVarPathParams.Add("parcelInvoiceLineTag", Configuration.ApiClient.ParameterToString(parcelInvoiceLineTag)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteParcelInvoiceLineTag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get a duplicated a parcelInvoiceLine by id Returns a duplicated parcelInvoiceLine identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parcelInvoiceLineId">Id of the parcelInvoiceLine to be duplicated.</param>
        /// <returns>ParcelInvoiceLine</returns>
        public ParcelInvoiceLine GetDuplicateParcelInvoiceLineById (int? parcelInvoiceLineId)
        {
             ApiResponse<ParcelInvoiceLine> localVarResponse = GetDuplicateParcelInvoiceLineByIdWithHttpInfo(parcelInvoiceLineId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a duplicated a parcelInvoiceLine by id Returns a duplicated parcelInvoiceLine identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parcelInvoiceLineId">Id of the parcelInvoiceLine to be duplicated.</param>
        /// <returns>ApiResponse of ParcelInvoiceLine</returns>
        public ApiResponse< ParcelInvoiceLine > GetDuplicateParcelInvoiceLineByIdWithHttpInfo (int? parcelInvoiceLineId)
        {
            // verify the required parameter 'parcelInvoiceLineId' is set
            if (parcelInvoiceLineId == null)
                throw new ApiException(400, "Missing required parameter 'parcelInvoiceLineId' when calling ParcelInvoiceLineApi->GetDuplicateParcelInvoiceLineById");

            var localVarPath = "/beta/parcelInvoiceLine/duplicate/{parcelInvoiceLineId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (parcelInvoiceLineId != null) localVarPathParams.Add("parcelInvoiceLineId", Configuration.ApiClient.ParameterToString(parcelInvoiceLineId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDuplicateParcelInvoiceLineById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ParcelInvoiceLine>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ParcelInvoiceLine) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ParcelInvoiceLine)));
        }

        /// <summary>
        /// Get a duplicated a parcelInvoiceLine by id Returns a duplicated parcelInvoiceLine identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parcelInvoiceLineId">Id of the parcelInvoiceLine to be duplicated.</param>
        /// <returns>Task of ParcelInvoiceLine</returns>
        public async System.Threading.Tasks.Task<ParcelInvoiceLine> GetDuplicateParcelInvoiceLineByIdAsync (int? parcelInvoiceLineId)
        {
             ApiResponse<ParcelInvoiceLine> localVarResponse = await GetDuplicateParcelInvoiceLineByIdAsyncWithHttpInfo(parcelInvoiceLineId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a duplicated a parcelInvoiceLine by id Returns a duplicated parcelInvoiceLine identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parcelInvoiceLineId">Id of the parcelInvoiceLine to be duplicated.</param>
        /// <returns>Task of ApiResponse (ParcelInvoiceLine)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ParcelInvoiceLine>> GetDuplicateParcelInvoiceLineByIdAsyncWithHttpInfo (int? parcelInvoiceLineId)
        {
            // verify the required parameter 'parcelInvoiceLineId' is set
            if (parcelInvoiceLineId == null)
                throw new ApiException(400, "Missing required parameter 'parcelInvoiceLineId' when calling ParcelInvoiceLineApi->GetDuplicateParcelInvoiceLineById");

            var localVarPath = "/beta/parcelInvoiceLine/duplicate/{parcelInvoiceLineId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (parcelInvoiceLineId != null) localVarPathParams.Add("parcelInvoiceLineId", Configuration.ApiClient.ParameterToString(parcelInvoiceLineId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDuplicateParcelInvoiceLineById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ParcelInvoiceLine>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ParcelInvoiceLine) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ParcelInvoiceLine)));
        }

        /// <summary>
        /// Search parcelInvoiceLines by filter Returns the list of parcelInvoiceLines that match the given filter.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>List&lt;ParcelInvoiceLine&gt;</returns>
        public List<ParcelInvoiceLine> GetParcelInvoiceLineByFilter (string filter = null, int? page = null, int? limit = null, string sort = null)
        {
             ApiResponse<List<ParcelInvoiceLine>> localVarResponse = GetParcelInvoiceLineByFilterWithHttpInfo(filter, page, limit, sort);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Search parcelInvoiceLines by filter Returns the list of parcelInvoiceLines that match the given filter.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>ApiResponse of List&lt;ParcelInvoiceLine&gt;</returns>
        public ApiResponse< List<ParcelInvoiceLine> > GetParcelInvoiceLineByFilterWithHttpInfo (string filter = null, int? page = null, int? limit = null, string sort = null)
        {

            var localVarPath = "/beta/parcelInvoiceLine/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (filter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (page != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetParcelInvoiceLineByFilter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ParcelInvoiceLine>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ParcelInvoiceLine>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ParcelInvoiceLine>)));
        }

        /// <summary>
        /// Search parcelInvoiceLines by filter Returns the list of parcelInvoiceLines that match the given filter.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>Task of List&lt;ParcelInvoiceLine&gt;</returns>
        public async System.Threading.Tasks.Task<List<ParcelInvoiceLine>> GetParcelInvoiceLineByFilterAsync (string filter = null, int? page = null, int? limit = null, string sort = null)
        {
             ApiResponse<List<ParcelInvoiceLine>> localVarResponse = await GetParcelInvoiceLineByFilterAsyncWithHttpInfo(filter, page, limit, sort);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Search parcelInvoiceLines by filter Returns the list of parcelInvoiceLines that match the given filter.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ParcelInvoiceLine&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ParcelInvoiceLine>>> GetParcelInvoiceLineByFilterAsyncWithHttpInfo (string filter = null, int? page = null, int? limit = null, string sort = null)
        {

            var localVarPath = "/beta/parcelInvoiceLine/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (filter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (page != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetParcelInvoiceLineByFilter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ParcelInvoiceLine>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ParcelInvoiceLine>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ParcelInvoiceLine>)));
        }

        /// <summary>
        /// Get a parcelInvoiceLine by id Returns the parcelInvoiceLine identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parcelInvoiceLineId">Id of the parcelInvoiceLine to be returned.</param>
        /// <returns>ParcelInvoiceLine</returns>
        public ParcelInvoiceLine GetParcelInvoiceLineById (int? parcelInvoiceLineId)
        {
             ApiResponse<ParcelInvoiceLine> localVarResponse = GetParcelInvoiceLineByIdWithHttpInfo(parcelInvoiceLineId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a parcelInvoiceLine by id Returns the parcelInvoiceLine identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parcelInvoiceLineId">Id of the parcelInvoiceLine to be returned.</param>
        /// <returns>ApiResponse of ParcelInvoiceLine</returns>
        public ApiResponse< ParcelInvoiceLine > GetParcelInvoiceLineByIdWithHttpInfo (int? parcelInvoiceLineId)
        {
            // verify the required parameter 'parcelInvoiceLineId' is set
            if (parcelInvoiceLineId == null)
                throw new ApiException(400, "Missing required parameter 'parcelInvoiceLineId' when calling ParcelInvoiceLineApi->GetParcelInvoiceLineById");

            var localVarPath = "/beta/parcelInvoiceLine/{parcelInvoiceLineId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (parcelInvoiceLineId != null) localVarPathParams.Add("parcelInvoiceLineId", Configuration.ApiClient.ParameterToString(parcelInvoiceLineId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetParcelInvoiceLineById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ParcelInvoiceLine>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ParcelInvoiceLine) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ParcelInvoiceLine)));
        }

        /// <summary>
        /// Get a parcelInvoiceLine by id Returns the parcelInvoiceLine identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parcelInvoiceLineId">Id of the parcelInvoiceLine to be returned.</param>
        /// <returns>Task of ParcelInvoiceLine</returns>
        public async System.Threading.Tasks.Task<ParcelInvoiceLine> GetParcelInvoiceLineByIdAsync (int? parcelInvoiceLineId)
        {
             ApiResponse<ParcelInvoiceLine> localVarResponse = await GetParcelInvoiceLineByIdAsyncWithHttpInfo(parcelInvoiceLineId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a parcelInvoiceLine by id Returns the parcelInvoiceLine identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parcelInvoiceLineId">Id of the parcelInvoiceLine to be returned.</param>
        /// <returns>Task of ApiResponse (ParcelInvoiceLine)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ParcelInvoiceLine>> GetParcelInvoiceLineByIdAsyncWithHttpInfo (int? parcelInvoiceLineId)
        {
            // verify the required parameter 'parcelInvoiceLineId' is set
            if (parcelInvoiceLineId == null)
                throw new ApiException(400, "Missing required parameter 'parcelInvoiceLineId' when calling ParcelInvoiceLineApi->GetParcelInvoiceLineById");

            var localVarPath = "/beta/parcelInvoiceLine/{parcelInvoiceLineId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (parcelInvoiceLineId != null) localVarPathParams.Add("parcelInvoiceLineId", Configuration.ApiClient.ParameterToString(parcelInvoiceLineId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetParcelInvoiceLineById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ParcelInvoiceLine>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ParcelInvoiceLine) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ParcelInvoiceLine)));
        }

        /// <summary>
        /// Get the files for a parcelInvoiceLine. Get all existing parcelInvoiceLine files.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parcelInvoiceLineId">Id of the parcelInvoiceLine to get files for</param>
        /// <returns></returns>
        public void GetParcelInvoiceLineFiles (int? parcelInvoiceLineId)
        {
             GetParcelInvoiceLineFilesWithHttpInfo(parcelInvoiceLineId);
        }

        /// <summary>
        /// Get the files for a parcelInvoiceLine. Get all existing parcelInvoiceLine files.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parcelInvoiceLineId">Id of the parcelInvoiceLine to get files for</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GetParcelInvoiceLineFilesWithHttpInfo (int? parcelInvoiceLineId)
        {
            // verify the required parameter 'parcelInvoiceLineId' is set
            if (parcelInvoiceLineId == null)
                throw new ApiException(400, "Missing required parameter 'parcelInvoiceLineId' when calling ParcelInvoiceLineApi->GetParcelInvoiceLineFiles");

            var localVarPath = "/beta/parcelInvoiceLine/{parcelInvoiceLineId}/file";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (parcelInvoiceLineId != null) localVarPathParams.Add("parcelInvoiceLineId", Configuration.ApiClient.ParameterToString(parcelInvoiceLineId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetParcelInvoiceLineFiles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get the files for a parcelInvoiceLine. Get all existing parcelInvoiceLine files.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parcelInvoiceLineId">Id of the parcelInvoiceLine to get files for</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetParcelInvoiceLineFilesAsync (int? parcelInvoiceLineId)
        {
             await GetParcelInvoiceLineFilesAsyncWithHttpInfo(parcelInvoiceLineId);

        }

        /// <summary>
        /// Get the files for a parcelInvoiceLine. Get all existing parcelInvoiceLine files.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parcelInvoiceLineId">Id of the parcelInvoiceLine to get files for</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetParcelInvoiceLineFilesAsyncWithHttpInfo (int? parcelInvoiceLineId)
        {
            // verify the required parameter 'parcelInvoiceLineId' is set
            if (parcelInvoiceLineId == null)
                throw new ApiException(400, "Missing required parameter 'parcelInvoiceLineId' when calling ParcelInvoiceLineApi->GetParcelInvoiceLineFiles");

            var localVarPath = "/beta/parcelInvoiceLine/{parcelInvoiceLineId}/file";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (parcelInvoiceLineId != null) localVarPathParams.Add("parcelInvoiceLineId", Configuration.ApiClient.ParameterToString(parcelInvoiceLineId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetParcelInvoiceLineFiles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get the tags for a parcelInvoiceLine. Get all existing parcelInvoiceLine tags.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parcelInvoiceLineId">Id of the parcelInvoiceLine to get tags for</param>
        /// <returns></returns>
        public void GetParcelInvoiceLineTags (int? parcelInvoiceLineId)
        {
             GetParcelInvoiceLineTagsWithHttpInfo(parcelInvoiceLineId);
        }

        /// <summary>
        /// Get the tags for a parcelInvoiceLine. Get all existing parcelInvoiceLine tags.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parcelInvoiceLineId">Id of the parcelInvoiceLine to get tags for</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GetParcelInvoiceLineTagsWithHttpInfo (int? parcelInvoiceLineId)
        {
            // verify the required parameter 'parcelInvoiceLineId' is set
            if (parcelInvoiceLineId == null)
                throw new ApiException(400, "Missing required parameter 'parcelInvoiceLineId' when calling ParcelInvoiceLineApi->GetParcelInvoiceLineTags");

            var localVarPath = "/beta/parcelInvoiceLine/{parcelInvoiceLineId}/tag";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (parcelInvoiceLineId != null) localVarPathParams.Add("parcelInvoiceLineId", Configuration.ApiClient.ParameterToString(parcelInvoiceLineId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetParcelInvoiceLineTags", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get the tags for a parcelInvoiceLine. Get all existing parcelInvoiceLine tags.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parcelInvoiceLineId">Id of the parcelInvoiceLine to get tags for</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetParcelInvoiceLineTagsAsync (int? parcelInvoiceLineId)
        {
             await GetParcelInvoiceLineTagsAsyncWithHttpInfo(parcelInvoiceLineId);

        }

        /// <summary>
        /// Get the tags for a parcelInvoiceLine. Get all existing parcelInvoiceLine tags.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parcelInvoiceLineId">Id of the parcelInvoiceLine to get tags for</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetParcelInvoiceLineTagsAsyncWithHttpInfo (int? parcelInvoiceLineId)
        {
            // verify the required parameter 'parcelInvoiceLineId' is set
            if (parcelInvoiceLineId == null)
                throw new ApiException(400, "Missing required parameter 'parcelInvoiceLineId' when calling ParcelInvoiceLineApi->GetParcelInvoiceLineTags");

            var localVarPath = "/beta/parcelInvoiceLine/{parcelInvoiceLineId}/tag";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (parcelInvoiceLineId != null) localVarPathParams.Add("parcelInvoiceLineId", Configuration.ApiClient.ParameterToString(parcelInvoiceLineId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetParcelInvoiceLineTags", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update a parcelInvoiceLine Updates an existing parcelInvoiceLine using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">ParcelInvoiceLine to be updated.</param>
        /// <returns></returns>
        public void UpdateParcelInvoiceLine (ParcelInvoiceLine body)
        {
             UpdateParcelInvoiceLineWithHttpInfo(body);
        }

        /// <summary>
        /// Update a parcelInvoiceLine Updates an existing parcelInvoiceLine using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">ParcelInvoiceLine to be updated.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateParcelInvoiceLineWithHttpInfo (ParcelInvoiceLine body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ParcelInvoiceLineApi->UpdateParcelInvoiceLine");

            var localVarPath = "/beta/parcelInvoiceLine";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateParcelInvoiceLine", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update a parcelInvoiceLine Updates an existing parcelInvoiceLine using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">ParcelInvoiceLine to be updated.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateParcelInvoiceLineAsync (ParcelInvoiceLine body)
        {
             await UpdateParcelInvoiceLineAsyncWithHttpInfo(body);

        }

        /// <summary>
        /// Update a parcelInvoiceLine Updates an existing parcelInvoiceLine using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">ParcelInvoiceLine to be updated.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateParcelInvoiceLineAsyncWithHttpInfo (ParcelInvoiceLine body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ParcelInvoiceLineApi->UpdateParcelInvoiceLine");

            var localVarPath = "/beta/parcelInvoiceLine";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateParcelInvoiceLine", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

    }
}
