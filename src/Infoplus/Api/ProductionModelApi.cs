/* 
 * Infoplus API
 *
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Infoplus.Client;
using Infoplus.Model;

namespace Infoplus.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IProductionModelApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create a productionModel
        /// </summary>
        /// <remarks>
        /// Inserts a new productionModel using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">ProductionModel to be inserted.</param>
        /// <returns>ProductionModel</returns>
        ProductionModel AddProductionModel (ProductionModel body);

        /// <summary>
        /// Create a productionModel
        /// </summary>
        /// <remarks>
        /// Inserts a new productionModel using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">ProductionModel to be inserted.</param>
        /// <returns>ApiResponse of ProductionModel</returns>
        ApiResponse<ProductionModel> AddProductionModelWithHttpInfo (ProductionModel body);
        /// <summary>
        /// Add new audit for a productionModel
        /// </summary>
        /// <remarks>
        /// Adds an audit to an existing productionModel.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productionModelId">Id of the productionModel to add an audit to</param>
        /// <param name="productionModelAudit">The audit to add</param>
        /// <returns></returns>
        void AddProductionModelAudit (int? productionModelId, string productionModelAudit);

        /// <summary>
        /// Add new audit for a productionModel
        /// </summary>
        /// <remarks>
        /// Adds an audit to an existing productionModel.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productionModelId">Id of the productionModel to add an audit to</param>
        /// <param name="productionModelAudit">The audit to add</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddProductionModelAuditWithHttpInfo (int? productionModelId, string productionModelAudit);
        /// <summary>
        /// Attach a file to a productionModel
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing productionModel.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productionModelId">Id of the productionModel to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns></returns>
        void AddProductionModelFile (int? productionModelId, string fileName);

        /// <summary>
        /// Attach a file to a productionModel
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing productionModel.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productionModelId">Id of the productionModel to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddProductionModelFileWithHttpInfo (int? productionModelId, string fileName);
        /// <summary>
        /// Attach a file to a productionModel by URL.
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing productionModel by URL.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="productionModelId">Id of the productionModel to add an file to</param>
        /// <returns></returns>
        void AddProductionModelFileByURL (RecordFile body, int? productionModelId);

        /// <summary>
        /// Attach a file to a productionModel by URL.
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing productionModel by URL.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="productionModelId">Id of the productionModel to add an file to</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddProductionModelFileByURLWithHttpInfo (RecordFile body, int? productionModelId);
        /// <summary>
        /// Add new tags for a productionModel.
        /// </summary>
        /// <remarks>
        /// Adds a tag to an existing productionModel.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productionModelId">Id of the productionModel to add a tag to</param>
        /// <param name="productionModelTag">The tag to add</param>
        /// <returns></returns>
        void AddProductionModelTag (int? productionModelId, string productionModelTag);

        /// <summary>
        /// Add new tags for a productionModel.
        /// </summary>
        /// <remarks>
        /// Adds a tag to an existing productionModel.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productionModelId">Id of the productionModel to add a tag to</param>
        /// <param name="productionModelTag">The tag to add</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddProductionModelTagWithHttpInfo (int? productionModelId, string productionModelTag);
        /// <summary>
        /// Delete a productionModel
        /// </summary>
        /// <remarks>
        /// Deletes the productionModel identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productionModelId">Id of the productionModel to be deleted.</param>
        /// <returns></returns>
        void DeleteProductionModel (int? productionModelId);

        /// <summary>
        /// Delete a productionModel
        /// </summary>
        /// <remarks>
        /// Deletes the productionModel identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productionModelId">Id of the productionModel to be deleted.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteProductionModelWithHttpInfo (int? productionModelId);
        /// <summary>
        /// Delete a file for a productionModel.
        /// </summary>
        /// <remarks>
        /// Deletes an existing productionModel file using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productionModelId">Id of the productionModel to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns></returns>
        void DeleteProductionModelFile (int? productionModelId, int? fileId);

        /// <summary>
        /// Delete a file for a productionModel.
        /// </summary>
        /// <remarks>
        /// Deletes an existing productionModel file using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productionModelId">Id of the productionModel to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteProductionModelFileWithHttpInfo (int? productionModelId, int? fileId);
        /// <summary>
        /// Delete a tag for a productionModel.
        /// </summary>
        /// <remarks>
        /// Deletes an existing productionModel tag using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productionModelId">Id of the productionModel to remove tag from</param>
        /// <param name="productionModelTag">The tag to delete</param>
        /// <returns></returns>
        void DeleteProductionModelTag (int? productionModelId, string productionModelTag);

        /// <summary>
        /// Delete a tag for a productionModel.
        /// </summary>
        /// <remarks>
        /// Deletes an existing productionModel tag using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productionModelId">Id of the productionModel to remove tag from</param>
        /// <param name="productionModelTag">The tag to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteProductionModelTagWithHttpInfo (int? productionModelId, string productionModelTag);
        /// <summary>
        /// Get a duplicated a productionModel by id
        /// </summary>
        /// <remarks>
        /// Returns a duplicated productionModel identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productionModelId">Id of the productionModel to be duplicated.</param>
        /// <returns>ProductionModel</returns>
        ProductionModel GetDuplicateProductionModelById (int? productionModelId);

        /// <summary>
        /// Get a duplicated a productionModel by id
        /// </summary>
        /// <remarks>
        /// Returns a duplicated productionModel identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productionModelId">Id of the productionModel to be duplicated.</param>
        /// <returns>ApiResponse of ProductionModel</returns>
        ApiResponse<ProductionModel> GetDuplicateProductionModelByIdWithHttpInfo (int? productionModelId);
        /// <summary>
        /// Search productionModels by filter
        /// </summary>
        /// <remarks>
        /// Returns the list of productionModels that match the given filter.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>List&lt;ProductionModel&gt;</returns>
        List<ProductionModel> GetProductionModelByFilter (string filter = null, int? page = null, int? limit = null, string sort = null);

        /// <summary>
        /// Search productionModels by filter
        /// </summary>
        /// <remarks>
        /// Returns the list of productionModels that match the given filter.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>ApiResponse of List&lt;ProductionModel&gt;</returns>
        ApiResponse<List<ProductionModel>> GetProductionModelByFilterWithHttpInfo (string filter = null, int? page = null, int? limit = null, string sort = null);
        /// <summary>
        /// Get a productionModel by id
        /// </summary>
        /// <remarks>
        /// Returns the productionModel identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productionModelId">Id of the productionModel to be returned.</param>
        /// <returns>ProductionModel</returns>
        ProductionModel GetProductionModelById (int? productionModelId);

        /// <summary>
        /// Get a productionModel by id
        /// </summary>
        /// <remarks>
        /// Returns the productionModel identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productionModelId">Id of the productionModel to be returned.</param>
        /// <returns>ApiResponse of ProductionModel</returns>
        ApiResponse<ProductionModel> GetProductionModelByIdWithHttpInfo (int? productionModelId);
        /// <summary>
        /// Get the files for a productionModel.
        /// </summary>
        /// <remarks>
        /// Get all existing productionModel files.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productionModelId">Id of the productionModel to get files for</param>
        /// <returns></returns>
        void GetProductionModelFiles (int? productionModelId);

        /// <summary>
        /// Get the files for a productionModel.
        /// </summary>
        /// <remarks>
        /// Get all existing productionModel files.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productionModelId">Id of the productionModel to get files for</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetProductionModelFilesWithHttpInfo (int? productionModelId);
        /// <summary>
        /// Get the tags for a productionModel.
        /// </summary>
        /// <remarks>
        /// Get all existing productionModel tags.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productionModelId">Id of the productionModel to get tags for</param>
        /// <returns></returns>
        void GetProductionModelTags (int? productionModelId);

        /// <summary>
        /// Get the tags for a productionModel.
        /// </summary>
        /// <remarks>
        /// Get all existing productionModel tags.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productionModelId">Id of the productionModel to get tags for</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetProductionModelTagsWithHttpInfo (int? productionModelId);
        /// <summary>
        /// Update a productionModel
        /// </summary>
        /// <remarks>
        /// Updates an existing productionModel using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">ProductionModel to be updated.</param>
        /// <returns></returns>
        void UpdateProductionModel (ProductionModel body);

        /// <summary>
        /// Update a productionModel
        /// </summary>
        /// <remarks>
        /// Updates an existing productionModel using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">ProductionModel to be updated.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateProductionModelWithHttpInfo (ProductionModel body);
        /// <summary>
        /// Update a productionModel custom fields
        /// </summary>
        /// <remarks>
        /// Updates an existing productionModel custom fields using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">ProductionModel to be updated.</param>
        /// <returns></returns>
        void UpdateProductionModelCustomFields (ProductionModel body);

        /// <summary>
        /// Update a productionModel custom fields
        /// </summary>
        /// <remarks>
        /// Updates an existing productionModel custom fields using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">ProductionModel to be updated.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateProductionModelCustomFieldsWithHttpInfo (ProductionModel body);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create a productionModel
        /// </summary>
        /// <remarks>
        /// Inserts a new productionModel using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">ProductionModel to be inserted.</param>
        /// <returns>Task of ProductionModel</returns>
        System.Threading.Tasks.Task<ProductionModel> AddProductionModelAsync (ProductionModel body);

        /// <summary>
        /// Create a productionModel
        /// </summary>
        /// <remarks>
        /// Inserts a new productionModel using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">ProductionModel to be inserted.</param>
        /// <returns>Task of ApiResponse (ProductionModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProductionModel>> AddProductionModelAsyncWithHttpInfo (ProductionModel body);
        /// <summary>
        /// Add new audit for a productionModel
        /// </summary>
        /// <remarks>
        /// Adds an audit to an existing productionModel.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productionModelId">Id of the productionModel to add an audit to</param>
        /// <param name="productionModelAudit">The audit to add</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddProductionModelAuditAsync (int? productionModelId, string productionModelAudit);

        /// <summary>
        /// Add new audit for a productionModel
        /// </summary>
        /// <remarks>
        /// Adds an audit to an existing productionModel.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productionModelId">Id of the productionModel to add an audit to</param>
        /// <param name="productionModelAudit">The audit to add</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddProductionModelAuditAsyncWithHttpInfo (int? productionModelId, string productionModelAudit);
        /// <summary>
        /// Attach a file to a productionModel
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing productionModel.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productionModelId">Id of the productionModel to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddProductionModelFileAsync (int? productionModelId, string fileName);

        /// <summary>
        /// Attach a file to a productionModel
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing productionModel.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productionModelId">Id of the productionModel to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddProductionModelFileAsyncWithHttpInfo (int? productionModelId, string fileName);
        /// <summary>
        /// Attach a file to a productionModel by URL.
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing productionModel by URL.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="productionModelId">Id of the productionModel to add an file to</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddProductionModelFileByURLAsync (RecordFile body, int? productionModelId);

        /// <summary>
        /// Attach a file to a productionModel by URL.
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing productionModel by URL.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="productionModelId">Id of the productionModel to add an file to</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddProductionModelFileByURLAsyncWithHttpInfo (RecordFile body, int? productionModelId);
        /// <summary>
        /// Add new tags for a productionModel.
        /// </summary>
        /// <remarks>
        /// Adds a tag to an existing productionModel.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productionModelId">Id of the productionModel to add a tag to</param>
        /// <param name="productionModelTag">The tag to add</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddProductionModelTagAsync (int? productionModelId, string productionModelTag);

        /// <summary>
        /// Add new tags for a productionModel.
        /// </summary>
        /// <remarks>
        /// Adds a tag to an existing productionModel.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productionModelId">Id of the productionModel to add a tag to</param>
        /// <param name="productionModelTag">The tag to add</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddProductionModelTagAsyncWithHttpInfo (int? productionModelId, string productionModelTag);
        /// <summary>
        /// Delete a productionModel
        /// </summary>
        /// <remarks>
        /// Deletes the productionModel identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productionModelId">Id of the productionModel to be deleted.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteProductionModelAsync (int? productionModelId);

        /// <summary>
        /// Delete a productionModel
        /// </summary>
        /// <remarks>
        /// Deletes the productionModel identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productionModelId">Id of the productionModel to be deleted.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteProductionModelAsyncWithHttpInfo (int? productionModelId);
        /// <summary>
        /// Delete a file for a productionModel.
        /// </summary>
        /// <remarks>
        /// Deletes an existing productionModel file using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productionModelId">Id of the productionModel to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteProductionModelFileAsync (int? productionModelId, int? fileId);

        /// <summary>
        /// Delete a file for a productionModel.
        /// </summary>
        /// <remarks>
        /// Deletes an existing productionModel file using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productionModelId">Id of the productionModel to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteProductionModelFileAsyncWithHttpInfo (int? productionModelId, int? fileId);
        /// <summary>
        /// Delete a tag for a productionModel.
        /// </summary>
        /// <remarks>
        /// Deletes an existing productionModel tag using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productionModelId">Id of the productionModel to remove tag from</param>
        /// <param name="productionModelTag">The tag to delete</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteProductionModelTagAsync (int? productionModelId, string productionModelTag);

        /// <summary>
        /// Delete a tag for a productionModel.
        /// </summary>
        /// <remarks>
        /// Deletes an existing productionModel tag using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productionModelId">Id of the productionModel to remove tag from</param>
        /// <param name="productionModelTag">The tag to delete</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteProductionModelTagAsyncWithHttpInfo (int? productionModelId, string productionModelTag);
        /// <summary>
        /// Get a duplicated a productionModel by id
        /// </summary>
        /// <remarks>
        /// Returns a duplicated productionModel identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productionModelId">Id of the productionModel to be duplicated.</param>
        /// <returns>Task of ProductionModel</returns>
        System.Threading.Tasks.Task<ProductionModel> GetDuplicateProductionModelByIdAsync (int? productionModelId);

        /// <summary>
        /// Get a duplicated a productionModel by id
        /// </summary>
        /// <remarks>
        /// Returns a duplicated productionModel identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productionModelId">Id of the productionModel to be duplicated.</param>
        /// <returns>Task of ApiResponse (ProductionModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProductionModel>> GetDuplicateProductionModelByIdAsyncWithHttpInfo (int? productionModelId);
        /// <summary>
        /// Search productionModels by filter
        /// </summary>
        /// <remarks>
        /// Returns the list of productionModels that match the given filter.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>Task of List&lt;ProductionModel&gt;</returns>
        System.Threading.Tasks.Task<List<ProductionModel>> GetProductionModelByFilterAsync (string filter = null, int? page = null, int? limit = null, string sort = null);

        /// <summary>
        /// Search productionModels by filter
        /// </summary>
        /// <remarks>
        /// Returns the list of productionModels that match the given filter.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ProductionModel&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ProductionModel>>> GetProductionModelByFilterAsyncWithHttpInfo (string filter = null, int? page = null, int? limit = null, string sort = null);
        /// <summary>
        /// Get a productionModel by id
        /// </summary>
        /// <remarks>
        /// Returns the productionModel identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productionModelId">Id of the productionModel to be returned.</param>
        /// <returns>Task of ProductionModel</returns>
        System.Threading.Tasks.Task<ProductionModel> GetProductionModelByIdAsync (int? productionModelId);

        /// <summary>
        /// Get a productionModel by id
        /// </summary>
        /// <remarks>
        /// Returns the productionModel identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productionModelId">Id of the productionModel to be returned.</param>
        /// <returns>Task of ApiResponse (ProductionModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProductionModel>> GetProductionModelByIdAsyncWithHttpInfo (int? productionModelId);
        /// <summary>
        /// Get the files for a productionModel.
        /// </summary>
        /// <remarks>
        /// Get all existing productionModel files.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productionModelId">Id of the productionModel to get files for</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetProductionModelFilesAsync (int? productionModelId);

        /// <summary>
        /// Get the files for a productionModel.
        /// </summary>
        /// <remarks>
        /// Get all existing productionModel files.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productionModelId">Id of the productionModel to get files for</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetProductionModelFilesAsyncWithHttpInfo (int? productionModelId);
        /// <summary>
        /// Get the tags for a productionModel.
        /// </summary>
        /// <remarks>
        /// Get all existing productionModel tags.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productionModelId">Id of the productionModel to get tags for</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetProductionModelTagsAsync (int? productionModelId);

        /// <summary>
        /// Get the tags for a productionModel.
        /// </summary>
        /// <remarks>
        /// Get all existing productionModel tags.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productionModelId">Id of the productionModel to get tags for</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetProductionModelTagsAsyncWithHttpInfo (int? productionModelId);
        /// <summary>
        /// Update a productionModel
        /// </summary>
        /// <remarks>
        /// Updates an existing productionModel using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">ProductionModel to be updated.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateProductionModelAsync (ProductionModel body);

        /// <summary>
        /// Update a productionModel
        /// </summary>
        /// <remarks>
        /// Updates an existing productionModel using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">ProductionModel to be updated.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateProductionModelAsyncWithHttpInfo (ProductionModel body);
        /// <summary>
        /// Update a productionModel custom fields
        /// </summary>
        /// <remarks>
        /// Updates an existing productionModel custom fields using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">ProductionModel to be updated.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateProductionModelCustomFieldsAsync (ProductionModel body);

        /// <summary>
        /// Update a productionModel custom fields
        /// </summary>
        /// <remarks>
        /// Updates an existing productionModel custom fields using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">ProductionModel to be updated.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateProductionModelCustomFieldsAsyncWithHttpInfo (ProductionModel body);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ProductionModelApi : IProductionModelApi
    {
        private Infoplus.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ProductionModelApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ProductionModelApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = Infoplus.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ProductionModelApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ProductionModelApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Infoplus.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Infoplus.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create a productionModel Inserts a new productionModel using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">ProductionModel to be inserted.</param>
        /// <returns>ProductionModel</returns>
        public ProductionModel AddProductionModel (ProductionModel body)
        {
             ApiResponse<ProductionModel> localVarResponse = AddProductionModelWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a productionModel Inserts a new productionModel using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">ProductionModel to be inserted.</param>
        /// <returns>ApiResponse of ProductionModel</returns>
        public ApiResponse< ProductionModel > AddProductionModelWithHttpInfo (ProductionModel body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ProductionModelApi->AddProductionModel");

            var localVarPath = "/beta/productionModel";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddProductionModel", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProductionModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProductionModel) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProductionModel)));
        }

        /// <summary>
        /// Create a productionModel Inserts a new productionModel using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">ProductionModel to be inserted.</param>
        /// <returns>Task of ProductionModel</returns>
        public async System.Threading.Tasks.Task<ProductionModel> AddProductionModelAsync (ProductionModel body)
        {
             ApiResponse<ProductionModel> localVarResponse = await AddProductionModelAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a productionModel Inserts a new productionModel using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">ProductionModel to be inserted.</param>
        /// <returns>Task of ApiResponse (ProductionModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ProductionModel>> AddProductionModelAsyncWithHttpInfo (ProductionModel body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ProductionModelApi->AddProductionModel");

            var localVarPath = "/beta/productionModel";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddProductionModel", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProductionModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProductionModel) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProductionModel)));
        }

        /// <summary>
        /// Add new audit for a productionModel Adds an audit to an existing productionModel.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productionModelId">Id of the productionModel to add an audit to</param>
        /// <param name="productionModelAudit">The audit to add</param>
        /// <returns></returns>
        public void AddProductionModelAudit (int? productionModelId, string productionModelAudit)
        {
             AddProductionModelAuditWithHttpInfo(productionModelId, productionModelAudit);
        }

        /// <summary>
        /// Add new audit for a productionModel Adds an audit to an existing productionModel.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productionModelId">Id of the productionModel to add an audit to</param>
        /// <param name="productionModelAudit">The audit to add</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AddProductionModelAuditWithHttpInfo (int? productionModelId, string productionModelAudit)
        {
            // verify the required parameter 'productionModelId' is set
            if (productionModelId == null)
                throw new ApiException(400, "Missing required parameter 'productionModelId' when calling ProductionModelApi->AddProductionModelAudit");
            // verify the required parameter 'productionModelAudit' is set
            if (productionModelAudit == null)
                throw new ApiException(400, "Missing required parameter 'productionModelAudit' when calling ProductionModelApi->AddProductionModelAudit");

            var localVarPath = "/beta/productionModel/{productionModelId}/audit/{productionModelAudit}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (productionModelId != null) localVarPathParams.Add("productionModelId", Configuration.ApiClient.ParameterToString(productionModelId)); // path parameter
            if (productionModelAudit != null) localVarPathParams.Add("productionModelAudit", Configuration.ApiClient.ParameterToString(productionModelAudit)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddProductionModelAudit", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Add new audit for a productionModel Adds an audit to an existing productionModel.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productionModelId">Id of the productionModel to add an audit to</param>
        /// <param name="productionModelAudit">The audit to add</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddProductionModelAuditAsync (int? productionModelId, string productionModelAudit)
        {
             await AddProductionModelAuditAsyncWithHttpInfo(productionModelId, productionModelAudit);

        }

        /// <summary>
        /// Add new audit for a productionModel Adds an audit to an existing productionModel.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productionModelId">Id of the productionModel to add an audit to</param>
        /// <param name="productionModelAudit">The audit to add</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddProductionModelAuditAsyncWithHttpInfo (int? productionModelId, string productionModelAudit)
        {
            // verify the required parameter 'productionModelId' is set
            if (productionModelId == null)
                throw new ApiException(400, "Missing required parameter 'productionModelId' when calling ProductionModelApi->AddProductionModelAudit");
            // verify the required parameter 'productionModelAudit' is set
            if (productionModelAudit == null)
                throw new ApiException(400, "Missing required parameter 'productionModelAudit' when calling ProductionModelApi->AddProductionModelAudit");

            var localVarPath = "/beta/productionModel/{productionModelId}/audit/{productionModelAudit}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (productionModelId != null) localVarPathParams.Add("productionModelId", Configuration.ApiClient.ParameterToString(productionModelId)); // path parameter
            if (productionModelAudit != null) localVarPathParams.Add("productionModelAudit", Configuration.ApiClient.ParameterToString(productionModelAudit)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddProductionModelAudit", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Attach a file to a productionModel Adds a file to an existing productionModel.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productionModelId">Id of the productionModel to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns></returns>
        public void AddProductionModelFile (int? productionModelId, string fileName)
        {
             AddProductionModelFileWithHttpInfo(productionModelId, fileName);
        }

        /// <summary>
        /// Attach a file to a productionModel Adds a file to an existing productionModel.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productionModelId">Id of the productionModel to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AddProductionModelFileWithHttpInfo (int? productionModelId, string fileName)
        {
            // verify the required parameter 'productionModelId' is set
            if (productionModelId == null)
                throw new ApiException(400, "Missing required parameter 'productionModelId' when calling ProductionModelApi->AddProductionModelFile");
            // verify the required parameter 'fileName' is set
            if (fileName == null)
                throw new ApiException(400, "Missing required parameter 'fileName' when calling ProductionModelApi->AddProductionModelFile");

            var localVarPath = "/beta/productionModel/{productionModelId}/file/{fileName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (productionModelId != null) localVarPathParams.Add("productionModelId", Configuration.ApiClient.ParameterToString(productionModelId)); // path parameter
            if (fileName != null) localVarPathParams.Add("fileName", Configuration.ApiClient.ParameterToString(fileName)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddProductionModelFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Attach a file to a productionModel Adds a file to an existing productionModel.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productionModelId">Id of the productionModel to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddProductionModelFileAsync (int? productionModelId, string fileName)
        {
             await AddProductionModelFileAsyncWithHttpInfo(productionModelId, fileName);

        }

        /// <summary>
        /// Attach a file to a productionModel Adds a file to an existing productionModel.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productionModelId">Id of the productionModel to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddProductionModelFileAsyncWithHttpInfo (int? productionModelId, string fileName)
        {
            // verify the required parameter 'productionModelId' is set
            if (productionModelId == null)
                throw new ApiException(400, "Missing required parameter 'productionModelId' when calling ProductionModelApi->AddProductionModelFile");
            // verify the required parameter 'fileName' is set
            if (fileName == null)
                throw new ApiException(400, "Missing required parameter 'fileName' when calling ProductionModelApi->AddProductionModelFile");

            var localVarPath = "/beta/productionModel/{productionModelId}/file/{fileName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (productionModelId != null) localVarPathParams.Add("productionModelId", Configuration.ApiClient.ParameterToString(productionModelId)); // path parameter
            if (fileName != null) localVarPathParams.Add("fileName", Configuration.ApiClient.ParameterToString(fileName)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddProductionModelFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Attach a file to a productionModel by URL. Adds a file to an existing productionModel by URL.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="productionModelId">Id of the productionModel to add an file to</param>
        /// <returns></returns>
        public void AddProductionModelFileByURL (RecordFile body, int? productionModelId)
        {
             AddProductionModelFileByURLWithHttpInfo(body, productionModelId);
        }

        /// <summary>
        /// Attach a file to a productionModel by URL. Adds a file to an existing productionModel by URL.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="productionModelId">Id of the productionModel to add an file to</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AddProductionModelFileByURLWithHttpInfo (RecordFile body, int? productionModelId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ProductionModelApi->AddProductionModelFileByURL");
            // verify the required parameter 'productionModelId' is set
            if (productionModelId == null)
                throw new ApiException(400, "Missing required parameter 'productionModelId' when calling ProductionModelApi->AddProductionModelFileByURL");

            var localVarPath = "/beta/productionModel/{productionModelId}/file";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (productionModelId != null) localVarPathParams.Add("productionModelId", Configuration.ApiClient.ParameterToString(productionModelId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddProductionModelFileByURL", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Attach a file to a productionModel by URL. Adds a file to an existing productionModel by URL.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="productionModelId">Id of the productionModel to add an file to</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddProductionModelFileByURLAsync (RecordFile body, int? productionModelId)
        {
             await AddProductionModelFileByURLAsyncWithHttpInfo(body, productionModelId);

        }

        /// <summary>
        /// Attach a file to a productionModel by URL. Adds a file to an existing productionModel by URL.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="productionModelId">Id of the productionModel to add an file to</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddProductionModelFileByURLAsyncWithHttpInfo (RecordFile body, int? productionModelId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ProductionModelApi->AddProductionModelFileByURL");
            // verify the required parameter 'productionModelId' is set
            if (productionModelId == null)
                throw new ApiException(400, "Missing required parameter 'productionModelId' when calling ProductionModelApi->AddProductionModelFileByURL");

            var localVarPath = "/beta/productionModel/{productionModelId}/file";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (productionModelId != null) localVarPathParams.Add("productionModelId", Configuration.ApiClient.ParameterToString(productionModelId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddProductionModelFileByURL", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Add new tags for a productionModel. Adds a tag to an existing productionModel.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productionModelId">Id of the productionModel to add a tag to</param>
        /// <param name="productionModelTag">The tag to add</param>
        /// <returns></returns>
        public void AddProductionModelTag (int? productionModelId, string productionModelTag)
        {
             AddProductionModelTagWithHttpInfo(productionModelId, productionModelTag);
        }

        /// <summary>
        /// Add new tags for a productionModel. Adds a tag to an existing productionModel.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productionModelId">Id of the productionModel to add a tag to</param>
        /// <param name="productionModelTag">The tag to add</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AddProductionModelTagWithHttpInfo (int? productionModelId, string productionModelTag)
        {
            // verify the required parameter 'productionModelId' is set
            if (productionModelId == null)
                throw new ApiException(400, "Missing required parameter 'productionModelId' when calling ProductionModelApi->AddProductionModelTag");
            // verify the required parameter 'productionModelTag' is set
            if (productionModelTag == null)
                throw new ApiException(400, "Missing required parameter 'productionModelTag' when calling ProductionModelApi->AddProductionModelTag");

            var localVarPath = "/beta/productionModel/{productionModelId}/tag/{productionModelTag}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (productionModelId != null) localVarPathParams.Add("productionModelId", Configuration.ApiClient.ParameterToString(productionModelId)); // path parameter
            if (productionModelTag != null) localVarPathParams.Add("productionModelTag", Configuration.ApiClient.ParameterToString(productionModelTag)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddProductionModelTag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Add new tags for a productionModel. Adds a tag to an existing productionModel.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productionModelId">Id of the productionModel to add a tag to</param>
        /// <param name="productionModelTag">The tag to add</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddProductionModelTagAsync (int? productionModelId, string productionModelTag)
        {
             await AddProductionModelTagAsyncWithHttpInfo(productionModelId, productionModelTag);

        }

        /// <summary>
        /// Add new tags for a productionModel. Adds a tag to an existing productionModel.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productionModelId">Id of the productionModel to add a tag to</param>
        /// <param name="productionModelTag">The tag to add</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddProductionModelTagAsyncWithHttpInfo (int? productionModelId, string productionModelTag)
        {
            // verify the required parameter 'productionModelId' is set
            if (productionModelId == null)
                throw new ApiException(400, "Missing required parameter 'productionModelId' when calling ProductionModelApi->AddProductionModelTag");
            // verify the required parameter 'productionModelTag' is set
            if (productionModelTag == null)
                throw new ApiException(400, "Missing required parameter 'productionModelTag' when calling ProductionModelApi->AddProductionModelTag");

            var localVarPath = "/beta/productionModel/{productionModelId}/tag/{productionModelTag}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (productionModelId != null) localVarPathParams.Add("productionModelId", Configuration.ApiClient.ParameterToString(productionModelId)); // path parameter
            if (productionModelTag != null) localVarPathParams.Add("productionModelTag", Configuration.ApiClient.ParameterToString(productionModelTag)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddProductionModelTag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a productionModel Deletes the productionModel identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productionModelId">Id of the productionModel to be deleted.</param>
        /// <returns></returns>
        public void DeleteProductionModel (int? productionModelId)
        {
             DeleteProductionModelWithHttpInfo(productionModelId);
        }

        /// <summary>
        /// Delete a productionModel Deletes the productionModel identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productionModelId">Id of the productionModel to be deleted.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteProductionModelWithHttpInfo (int? productionModelId)
        {
            // verify the required parameter 'productionModelId' is set
            if (productionModelId == null)
                throw new ApiException(400, "Missing required parameter 'productionModelId' when calling ProductionModelApi->DeleteProductionModel");

            var localVarPath = "/beta/productionModel/{productionModelId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (productionModelId != null) localVarPathParams.Add("productionModelId", Configuration.ApiClient.ParameterToString(productionModelId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteProductionModel", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a productionModel Deletes the productionModel identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productionModelId">Id of the productionModel to be deleted.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteProductionModelAsync (int? productionModelId)
        {
             await DeleteProductionModelAsyncWithHttpInfo(productionModelId);

        }

        /// <summary>
        /// Delete a productionModel Deletes the productionModel identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productionModelId">Id of the productionModel to be deleted.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteProductionModelAsyncWithHttpInfo (int? productionModelId)
        {
            // verify the required parameter 'productionModelId' is set
            if (productionModelId == null)
                throw new ApiException(400, "Missing required parameter 'productionModelId' when calling ProductionModelApi->DeleteProductionModel");

            var localVarPath = "/beta/productionModel/{productionModelId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (productionModelId != null) localVarPathParams.Add("productionModelId", Configuration.ApiClient.ParameterToString(productionModelId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteProductionModel", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a file for a productionModel. Deletes an existing productionModel file using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productionModelId">Id of the productionModel to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns></returns>
        public void DeleteProductionModelFile (int? productionModelId, int? fileId)
        {
             DeleteProductionModelFileWithHttpInfo(productionModelId, fileId);
        }

        /// <summary>
        /// Delete a file for a productionModel. Deletes an existing productionModel file using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productionModelId">Id of the productionModel to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteProductionModelFileWithHttpInfo (int? productionModelId, int? fileId)
        {
            // verify the required parameter 'productionModelId' is set
            if (productionModelId == null)
                throw new ApiException(400, "Missing required parameter 'productionModelId' when calling ProductionModelApi->DeleteProductionModelFile");
            // verify the required parameter 'fileId' is set
            if (fileId == null)
                throw new ApiException(400, "Missing required parameter 'fileId' when calling ProductionModelApi->DeleteProductionModelFile");

            var localVarPath = "/beta/productionModel/{productionModelId}/file/{fileId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (productionModelId != null) localVarPathParams.Add("productionModelId", Configuration.ApiClient.ParameterToString(productionModelId)); // path parameter
            if (fileId != null) localVarPathParams.Add("fileId", Configuration.ApiClient.ParameterToString(fileId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteProductionModelFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a file for a productionModel. Deletes an existing productionModel file using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productionModelId">Id of the productionModel to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteProductionModelFileAsync (int? productionModelId, int? fileId)
        {
             await DeleteProductionModelFileAsyncWithHttpInfo(productionModelId, fileId);

        }

        /// <summary>
        /// Delete a file for a productionModel. Deletes an existing productionModel file using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productionModelId">Id of the productionModel to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteProductionModelFileAsyncWithHttpInfo (int? productionModelId, int? fileId)
        {
            // verify the required parameter 'productionModelId' is set
            if (productionModelId == null)
                throw new ApiException(400, "Missing required parameter 'productionModelId' when calling ProductionModelApi->DeleteProductionModelFile");
            // verify the required parameter 'fileId' is set
            if (fileId == null)
                throw new ApiException(400, "Missing required parameter 'fileId' when calling ProductionModelApi->DeleteProductionModelFile");

            var localVarPath = "/beta/productionModel/{productionModelId}/file/{fileId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (productionModelId != null) localVarPathParams.Add("productionModelId", Configuration.ApiClient.ParameterToString(productionModelId)); // path parameter
            if (fileId != null) localVarPathParams.Add("fileId", Configuration.ApiClient.ParameterToString(fileId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteProductionModelFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a tag for a productionModel. Deletes an existing productionModel tag using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productionModelId">Id of the productionModel to remove tag from</param>
        /// <param name="productionModelTag">The tag to delete</param>
        /// <returns></returns>
        public void DeleteProductionModelTag (int? productionModelId, string productionModelTag)
        {
             DeleteProductionModelTagWithHttpInfo(productionModelId, productionModelTag);
        }

        /// <summary>
        /// Delete a tag for a productionModel. Deletes an existing productionModel tag using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productionModelId">Id of the productionModel to remove tag from</param>
        /// <param name="productionModelTag">The tag to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteProductionModelTagWithHttpInfo (int? productionModelId, string productionModelTag)
        {
            // verify the required parameter 'productionModelId' is set
            if (productionModelId == null)
                throw new ApiException(400, "Missing required parameter 'productionModelId' when calling ProductionModelApi->DeleteProductionModelTag");
            // verify the required parameter 'productionModelTag' is set
            if (productionModelTag == null)
                throw new ApiException(400, "Missing required parameter 'productionModelTag' when calling ProductionModelApi->DeleteProductionModelTag");

            var localVarPath = "/beta/productionModel/{productionModelId}/tag/{productionModelTag}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (productionModelId != null) localVarPathParams.Add("productionModelId", Configuration.ApiClient.ParameterToString(productionModelId)); // path parameter
            if (productionModelTag != null) localVarPathParams.Add("productionModelTag", Configuration.ApiClient.ParameterToString(productionModelTag)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteProductionModelTag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a tag for a productionModel. Deletes an existing productionModel tag using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productionModelId">Id of the productionModel to remove tag from</param>
        /// <param name="productionModelTag">The tag to delete</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteProductionModelTagAsync (int? productionModelId, string productionModelTag)
        {
             await DeleteProductionModelTagAsyncWithHttpInfo(productionModelId, productionModelTag);

        }

        /// <summary>
        /// Delete a tag for a productionModel. Deletes an existing productionModel tag using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productionModelId">Id of the productionModel to remove tag from</param>
        /// <param name="productionModelTag">The tag to delete</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteProductionModelTagAsyncWithHttpInfo (int? productionModelId, string productionModelTag)
        {
            // verify the required parameter 'productionModelId' is set
            if (productionModelId == null)
                throw new ApiException(400, "Missing required parameter 'productionModelId' when calling ProductionModelApi->DeleteProductionModelTag");
            // verify the required parameter 'productionModelTag' is set
            if (productionModelTag == null)
                throw new ApiException(400, "Missing required parameter 'productionModelTag' when calling ProductionModelApi->DeleteProductionModelTag");

            var localVarPath = "/beta/productionModel/{productionModelId}/tag/{productionModelTag}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (productionModelId != null) localVarPathParams.Add("productionModelId", Configuration.ApiClient.ParameterToString(productionModelId)); // path parameter
            if (productionModelTag != null) localVarPathParams.Add("productionModelTag", Configuration.ApiClient.ParameterToString(productionModelTag)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteProductionModelTag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get a duplicated a productionModel by id Returns a duplicated productionModel identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productionModelId">Id of the productionModel to be duplicated.</param>
        /// <returns>ProductionModel</returns>
        public ProductionModel GetDuplicateProductionModelById (int? productionModelId)
        {
             ApiResponse<ProductionModel> localVarResponse = GetDuplicateProductionModelByIdWithHttpInfo(productionModelId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a duplicated a productionModel by id Returns a duplicated productionModel identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productionModelId">Id of the productionModel to be duplicated.</param>
        /// <returns>ApiResponse of ProductionModel</returns>
        public ApiResponse< ProductionModel > GetDuplicateProductionModelByIdWithHttpInfo (int? productionModelId)
        {
            // verify the required parameter 'productionModelId' is set
            if (productionModelId == null)
                throw new ApiException(400, "Missing required parameter 'productionModelId' when calling ProductionModelApi->GetDuplicateProductionModelById");

            var localVarPath = "/beta/productionModel/duplicate/{productionModelId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (productionModelId != null) localVarPathParams.Add("productionModelId", Configuration.ApiClient.ParameterToString(productionModelId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDuplicateProductionModelById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProductionModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProductionModel) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProductionModel)));
        }

        /// <summary>
        /// Get a duplicated a productionModel by id Returns a duplicated productionModel identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productionModelId">Id of the productionModel to be duplicated.</param>
        /// <returns>Task of ProductionModel</returns>
        public async System.Threading.Tasks.Task<ProductionModel> GetDuplicateProductionModelByIdAsync (int? productionModelId)
        {
             ApiResponse<ProductionModel> localVarResponse = await GetDuplicateProductionModelByIdAsyncWithHttpInfo(productionModelId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a duplicated a productionModel by id Returns a duplicated productionModel identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productionModelId">Id of the productionModel to be duplicated.</param>
        /// <returns>Task of ApiResponse (ProductionModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ProductionModel>> GetDuplicateProductionModelByIdAsyncWithHttpInfo (int? productionModelId)
        {
            // verify the required parameter 'productionModelId' is set
            if (productionModelId == null)
                throw new ApiException(400, "Missing required parameter 'productionModelId' when calling ProductionModelApi->GetDuplicateProductionModelById");

            var localVarPath = "/beta/productionModel/duplicate/{productionModelId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (productionModelId != null) localVarPathParams.Add("productionModelId", Configuration.ApiClient.ParameterToString(productionModelId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDuplicateProductionModelById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProductionModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProductionModel) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProductionModel)));
        }

        /// <summary>
        /// Search productionModels by filter Returns the list of productionModels that match the given filter.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>List&lt;ProductionModel&gt;</returns>
        public List<ProductionModel> GetProductionModelByFilter (string filter = null, int? page = null, int? limit = null, string sort = null)
        {
             ApiResponse<List<ProductionModel>> localVarResponse = GetProductionModelByFilterWithHttpInfo(filter, page, limit, sort);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Search productionModels by filter Returns the list of productionModels that match the given filter.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>ApiResponse of List&lt;ProductionModel&gt;</returns>
        public ApiResponse< List<ProductionModel> > GetProductionModelByFilterWithHttpInfo (string filter = null, int? page = null, int? limit = null, string sort = null)
        {

            var localVarPath = "/beta/productionModel/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (filter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (page != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetProductionModelByFilter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ProductionModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ProductionModel>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ProductionModel>)));
        }

        /// <summary>
        /// Search productionModels by filter Returns the list of productionModels that match the given filter.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>Task of List&lt;ProductionModel&gt;</returns>
        public async System.Threading.Tasks.Task<List<ProductionModel>> GetProductionModelByFilterAsync (string filter = null, int? page = null, int? limit = null, string sort = null)
        {
             ApiResponse<List<ProductionModel>> localVarResponse = await GetProductionModelByFilterAsyncWithHttpInfo(filter, page, limit, sort);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Search productionModels by filter Returns the list of productionModels that match the given filter.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ProductionModel&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ProductionModel>>> GetProductionModelByFilterAsyncWithHttpInfo (string filter = null, int? page = null, int? limit = null, string sort = null)
        {

            var localVarPath = "/beta/productionModel/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (filter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (page != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetProductionModelByFilter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ProductionModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ProductionModel>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ProductionModel>)));
        }

        /// <summary>
        /// Get a productionModel by id Returns the productionModel identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productionModelId">Id of the productionModel to be returned.</param>
        /// <returns>ProductionModel</returns>
        public ProductionModel GetProductionModelById (int? productionModelId)
        {
             ApiResponse<ProductionModel> localVarResponse = GetProductionModelByIdWithHttpInfo(productionModelId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a productionModel by id Returns the productionModel identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productionModelId">Id of the productionModel to be returned.</param>
        /// <returns>ApiResponse of ProductionModel</returns>
        public ApiResponse< ProductionModel > GetProductionModelByIdWithHttpInfo (int? productionModelId)
        {
            // verify the required parameter 'productionModelId' is set
            if (productionModelId == null)
                throw new ApiException(400, "Missing required parameter 'productionModelId' when calling ProductionModelApi->GetProductionModelById");

            var localVarPath = "/beta/productionModel/{productionModelId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (productionModelId != null) localVarPathParams.Add("productionModelId", Configuration.ApiClient.ParameterToString(productionModelId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetProductionModelById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProductionModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProductionModel) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProductionModel)));
        }

        /// <summary>
        /// Get a productionModel by id Returns the productionModel identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productionModelId">Id of the productionModel to be returned.</param>
        /// <returns>Task of ProductionModel</returns>
        public async System.Threading.Tasks.Task<ProductionModel> GetProductionModelByIdAsync (int? productionModelId)
        {
             ApiResponse<ProductionModel> localVarResponse = await GetProductionModelByIdAsyncWithHttpInfo(productionModelId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a productionModel by id Returns the productionModel identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productionModelId">Id of the productionModel to be returned.</param>
        /// <returns>Task of ApiResponse (ProductionModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ProductionModel>> GetProductionModelByIdAsyncWithHttpInfo (int? productionModelId)
        {
            // verify the required parameter 'productionModelId' is set
            if (productionModelId == null)
                throw new ApiException(400, "Missing required parameter 'productionModelId' when calling ProductionModelApi->GetProductionModelById");

            var localVarPath = "/beta/productionModel/{productionModelId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (productionModelId != null) localVarPathParams.Add("productionModelId", Configuration.ApiClient.ParameterToString(productionModelId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetProductionModelById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProductionModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProductionModel) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProductionModel)));
        }

        /// <summary>
        /// Get the files for a productionModel. Get all existing productionModel files.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productionModelId">Id of the productionModel to get files for</param>
        /// <returns></returns>
        public void GetProductionModelFiles (int? productionModelId)
        {
             GetProductionModelFilesWithHttpInfo(productionModelId);
        }

        /// <summary>
        /// Get the files for a productionModel. Get all existing productionModel files.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productionModelId">Id of the productionModel to get files for</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GetProductionModelFilesWithHttpInfo (int? productionModelId)
        {
            // verify the required parameter 'productionModelId' is set
            if (productionModelId == null)
                throw new ApiException(400, "Missing required parameter 'productionModelId' when calling ProductionModelApi->GetProductionModelFiles");

            var localVarPath = "/beta/productionModel/{productionModelId}/file";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (productionModelId != null) localVarPathParams.Add("productionModelId", Configuration.ApiClient.ParameterToString(productionModelId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetProductionModelFiles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get the files for a productionModel. Get all existing productionModel files.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productionModelId">Id of the productionModel to get files for</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetProductionModelFilesAsync (int? productionModelId)
        {
             await GetProductionModelFilesAsyncWithHttpInfo(productionModelId);

        }

        /// <summary>
        /// Get the files for a productionModel. Get all existing productionModel files.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productionModelId">Id of the productionModel to get files for</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetProductionModelFilesAsyncWithHttpInfo (int? productionModelId)
        {
            // verify the required parameter 'productionModelId' is set
            if (productionModelId == null)
                throw new ApiException(400, "Missing required parameter 'productionModelId' when calling ProductionModelApi->GetProductionModelFiles");

            var localVarPath = "/beta/productionModel/{productionModelId}/file";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (productionModelId != null) localVarPathParams.Add("productionModelId", Configuration.ApiClient.ParameterToString(productionModelId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetProductionModelFiles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get the tags for a productionModel. Get all existing productionModel tags.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productionModelId">Id of the productionModel to get tags for</param>
        /// <returns></returns>
        public void GetProductionModelTags (int? productionModelId)
        {
             GetProductionModelTagsWithHttpInfo(productionModelId);
        }

        /// <summary>
        /// Get the tags for a productionModel. Get all existing productionModel tags.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productionModelId">Id of the productionModel to get tags for</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GetProductionModelTagsWithHttpInfo (int? productionModelId)
        {
            // verify the required parameter 'productionModelId' is set
            if (productionModelId == null)
                throw new ApiException(400, "Missing required parameter 'productionModelId' when calling ProductionModelApi->GetProductionModelTags");

            var localVarPath = "/beta/productionModel/{productionModelId}/tag";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (productionModelId != null) localVarPathParams.Add("productionModelId", Configuration.ApiClient.ParameterToString(productionModelId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetProductionModelTags", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get the tags for a productionModel. Get all existing productionModel tags.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productionModelId">Id of the productionModel to get tags for</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetProductionModelTagsAsync (int? productionModelId)
        {
             await GetProductionModelTagsAsyncWithHttpInfo(productionModelId);

        }

        /// <summary>
        /// Get the tags for a productionModel. Get all existing productionModel tags.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productionModelId">Id of the productionModel to get tags for</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetProductionModelTagsAsyncWithHttpInfo (int? productionModelId)
        {
            // verify the required parameter 'productionModelId' is set
            if (productionModelId == null)
                throw new ApiException(400, "Missing required parameter 'productionModelId' when calling ProductionModelApi->GetProductionModelTags");

            var localVarPath = "/beta/productionModel/{productionModelId}/tag";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (productionModelId != null) localVarPathParams.Add("productionModelId", Configuration.ApiClient.ParameterToString(productionModelId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetProductionModelTags", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update a productionModel Updates an existing productionModel using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">ProductionModel to be updated.</param>
        /// <returns></returns>
        public void UpdateProductionModel (ProductionModel body)
        {
             UpdateProductionModelWithHttpInfo(body);
        }

        /// <summary>
        /// Update a productionModel Updates an existing productionModel using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">ProductionModel to be updated.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateProductionModelWithHttpInfo (ProductionModel body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ProductionModelApi->UpdateProductionModel");

            var localVarPath = "/beta/productionModel";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateProductionModel", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update a productionModel Updates an existing productionModel using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">ProductionModel to be updated.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateProductionModelAsync (ProductionModel body)
        {
             await UpdateProductionModelAsyncWithHttpInfo(body);

        }

        /// <summary>
        /// Update a productionModel Updates an existing productionModel using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">ProductionModel to be updated.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateProductionModelAsyncWithHttpInfo (ProductionModel body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ProductionModelApi->UpdateProductionModel");

            var localVarPath = "/beta/productionModel";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateProductionModel", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update a productionModel custom fields Updates an existing productionModel custom fields using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">ProductionModel to be updated.</param>
        /// <returns></returns>
        public void UpdateProductionModelCustomFields (ProductionModel body)
        {
             UpdateProductionModelCustomFieldsWithHttpInfo(body);
        }

        /// <summary>
        /// Update a productionModel custom fields Updates an existing productionModel custom fields using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">ProductionModel to be updated.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateProductionModelCustomFieldsWithHttpInfo (ProductionModel body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ProductionModelApi->UpdateProductionModelCustomFields");

            var localVarPath = "/beta/productionModel/customFields";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateProductionModelCustomFields", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update a productionModel custom fields Updates an existing productionModel custom fields using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">ProductionModel to be updated.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateProductionModelCustomFieldsAsync (ProductionModel body)
        {
             await UpdateProductionModelCustomFieldsAsyncWithHttpInfo(body);

        }

        /// <summary>
        /// Update a productionModel custom fields Updates an existing productionModel custom fields using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">ProductionModel to be updated.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateProductionModelCustomFieldsAsyncWithHttpInfo (ProductionModel body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ProductionModelApi->UpdateProductionModelCustomFields");

            var localVarPath = "/beta/productionModel/customFields";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateProductionModelCustomFields", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

    }
}
