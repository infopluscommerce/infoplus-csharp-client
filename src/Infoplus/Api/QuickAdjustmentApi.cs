/* 
 * Infoplus API
 *
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Infoplus.Client;
using Infoplus.Model;

namespace Infoplus.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IQuickAdjustmentApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create a quickAdjustment
        /// </summary>
        /// <remarks>
        /// Inserts a new quickAdjustment using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">QuickAdjustment to be inserted.</param>
        /// <returns>QuickAdjustment</returns>
        QuickAdjustment AddQuickAdjustment (QuickAdjustment body);

        /// <summary>
        /// Create a quickAdjustment
        /// </summary>
        /// <remarks>
        /// Inserts a new quickAdjustment using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">QuickAdjustment to be inserted.</param>
        /// <returns>ApiResponse of QuickAdjustment</returns>
        ApiResponse<QuickAdjustment> AddQuickAdjustmentWithHttpInfo (QuickAdjustment body);
        /// <summary>
        /// Add new audit for a quickAdjustment
        /// </summary>
        /// <remarks>
        /// Adds an audit to an existing quickAdjustment.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quickAdjustmentId">Id of the quickAdjustment to add an audit to</param>
        /// <param name="quickAdjustmentAudit">The audit to add</param>
        /// <returns></returns>
        void AddQuickAdjustmentAudit (int? quickAdjustmentId, string quickAdjustmentAudit);

        /// <summary>
        /// Add new audit for a quickAdjustment
        /// </summary>
        /// <remarks>
        /// Adds an audit to an existing quickAdjustment.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quickAdjustmentId">Id of the quickAdjustment to add an audit to</param>
        /// <param name="quickAdjustmentAudit">The audit to add</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddQuickAdjustmentAuditWithHttpInfo (int? quickAdjustmentId, string quickAdjustmentAudit);
        /// <summary>
        /// Attach a file to a quickAdjustment
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing quickAdjustment.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quickAdjustmentId">Id of the quickAdjustment to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns></returns>
        void AddQuickAdjustmentFile (int? quickAdjustmentId, string fileName);

        /// <summary>
        /// Attach a file to a quickAdjustment
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing quickAdjustment.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quickAdjustmentId">Id of the quickAdjustment to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddQuickAdjustmentFileWithHttpInfo (int? quickAdjustmentId, string fileName);
        /// <summary>
        /// Attach a file to a quickAdjustment by URL.
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing quickAdjustment by URL.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="quickAdjustmentId">Id of the quickAdjustment to add an file to</param>
        /// <returns></returns>
        void AddQuickAdjustmentFileByURL (RecordFile body, int? quickAdjustmentId);

        /// <summary>
        /// Attach a file to a quickAdjustment by URL.
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing quickAdjustment by URL.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="quickAdjustmentId">Id of the quickAdjustment to add an file to</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddQuickAdjustmentFileByURLWithHttpInfo (RecordFile body, int? quickAdjustmentId);
        /// <summary>
        /// Add new tags for a quickAdjustment.
        /// </summary>
        /// <remarks>
        /// Adds a tag to an existing quickAdjustment.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quickAdjustmentId">Id of the quickAdjustment to add a tag to</param>
        /// <param name="quickAdjustmentTag">The tag to add</param>
        /// <returns></returns>
        void AddQuickAdjustmentTag (int? quickAdjustmentId, string quickAdjustmentTag);

        /// <summary>
        /// Add new tags for a quickAdjustment.
        /// </summary>
        /// <remarks>
        /// Adds a tag to an existing quickAdjustment.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quickAdjustmentId">Id of the quickAdjustment to add a tag to</param>
        /// <param name="quickAdjustmentTag">The tag to add</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddQuickAdjustmentTagWithHttpInfo (int? quickAdjustmentId, string quickAdjustmentTag);
        /// <summary>
        /// Delete a quickAdjustment
        /// </summary>
        /// <remarks>
        /// Deletes the quickAdjustment identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quickAdjustmentId">Id of the quickAdjustment to be deleted.</param>
        /// <returns></returns>
        void DeleteQuickAdjustment (int? quickAdjustmentId);

        /// <summary>
        /// Delete a quickAdjustment
        /// </summary>
        /// <remarks>
        /// Deletes the quickAdjustment identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quickAdjustmentId">Id of the quickAdjustment to be deleted.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteQuickAdjustmentWithHttpInfo (int? quickAdjustmentId);
        /// <summary>
        /// Delete a file for a quickAdjustment.
        /// </summary>
        /// <remarks>
        /// Deletes an existing quickAdjustment file using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quickAdjustmentId">Id of the quickAdjustment to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns></returns>
        void DeleteQuickAdjustmentFile (int? quickAdjustmentId, int? fileId);

        /// <summary>
        /// Delete a file for a quickAdjustment.
        /// </summary>
        /// <remarks>
        /// Deletes an existing quickAdjustment file using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quickAdjustmentId">Id of the quickAdjustment to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteQuickAdjustmentFileWithHttpInfo (int? quickAdjustmentId, int? fileId);
        /// <summary>
        /// Delete a tag for a quickAdjustment.
        /// </summary>
        /// <remarks>
        /// Deletes an existing quickAdjustment tag using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quickAdjustmentId">Id of the quickAdjustment to remove tag from</param>
        /// <param name="quickAdjustmentTag">The tag to delete</param>
        /// <returns></returns>
        void DeleteQuickAdjustmentTag (int? quickAdjustmentId, string quickAdjustmentTag);

        /// <summary>
        /// Delete a tag for a quickAdjustment.
        /// </summary>
        /// <remarks>
        /// Deletes an existing quickAdjustment tag using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quickAdjustmentId">Id of the quickAdjustment to remove tag from</param>
        /// <param name="quickAdjustmentTag">The tag to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteQuickAdjustmentTagWithHttpInfo (int? quickAdjustmentId, string quickAdjustmentTag);
        /// <summary>
        /// Run the ExecuteQuickAdjustment process.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Input data for ExecuteQuickAdjustment process.</param>
        /// <returns>List&lt;ProcessOutputAPIModel&gt;</returns>
        List<ProcessOutputAPIModel> ExecuteQuickAdjustment (ExecuteQuickAdjustmentInputAPIModel body);

        /// <summary>
        /// Run the ExecuteQuickAdjustment process.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Input data for ExecuteQuickAdjustment process.</param>
        /// <returns>ApiResponse of List&lt;ProcessOutputAPIModel&gt;</returns>
        ApiResponse<List<ProcessOutputAPIModel>> ExecuteQuickAdjustmentWithHttpInfo (ExecuteQuickAdjustmentInputAPIModel body);
        /// <summary>
        /// Get a duplicated a quickAdjustment by id
        /// </summary>
        /// <remarks>
        /// Returns a duplicated quickAdjustment identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quickAdjustmentId">Id of the quickAdjustment to be duplicated.</param>
        /// <returns>QuickAdjustment</returns>
        QuickAdjustment GetDuplicateQuickAdjustmentById (int? quickAdjustmentId);

        /// <summary>
        /// Get a duplicated a quickAdjustment by id
        /// </summary>
        /// <remarks>
        /// Returns a duplicated quickAdjustment identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quickAdjustmentId">Id of the quickAdjustment to be duplicated.</param>
        /// <returns>ApiResponse of QuickAdjustment</returns>
        ApiResponse<QuickAdjustment> GetDuplicateQuickAdjustmentByIdWithHttpInfo (int? quickAdjustmentId);
        /// <summary>
        /// Search quickAdjustments by filter
        /// </summary>
        /// <remarks>
        /// Returns the list of quickAdjustments that match the given filter.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>List&lt;QuickAdjustment&gt;</returns>
        List<QuickAdjustment> GetQuickAdjustmentByFilter (string filter = null, int? page = null, int? limit = null, string sort = null);

        /// <summary>
        /// Search quickAdjustments by filter
        /// </summary>
        /// <remarks>
        /// Returns the list of quickAdjustments that match the given filter.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>ApiResponse of List&lt;QuickAdjustment&gt;</returns>
        ApiResponse<List<QuickAdjustment>> GetQuickAdjustmentByFilterWithHttpInfo (string filter = null, int? page = null, int? limit = null, string sort = null);
        /// <summary>
        /// Get a quickAdjustment by id
        /// </summary>
        /// <remarks>
        /// Returns the quickAdjustment identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quickAdjustmentId">Id of the quickAdjustment to be returned.</param>
        /// <returns>QuickAdjustment</returns>
        QuickAdjustment GetQuickAdjustmentById (int? quickAdjustmentId);

        /// <summary>
        /// Get a quickAdjustment by id
        /// </summary>
        /// <remarks>
        /// Returns the quickAdjustment identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quickAdjustmentId">Id of the quickAdjustment to be returned.</param>
        /// <returns>ApiResponse of QuickAdjustment</returns>
        ApiResponse<QuickAdjustment> GetQuickAdjustmentByIdWithHttpInfo (int? quickAdjustmentId);
        /// <summary>
        /// Get the files for a quickAdjustment.
        /// </summary>
        /// <remarks>
        /// Get all existing quickAdjustment files.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quickAdjustmentId">Id of the quickAdjustment to get files for</param>
        /// <returns></returns>
        void GetQuickAdjustmentFiles (int? quickAdjustmentId);

        /// <summary>
        /// Get the files for a quickAdjustment.
        /// </summary>
        /// <remarks>
        /// Get all existing quickAdjustment files.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quickAdjustmentId">Id of the quickAdjustment to get files for</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetQuickAdjustmentFilesWithHttpInfo (int? quickAdjustmentId);
        /// <summary>
        /// Get the tags for a quickAdjustment.
        /// </summary>
        /// <remarks>
        /// Get all existing quickAdjustment tags.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quickAdjustmentId">Id of the quickAdjustment to get tags for</param>
        /// <returns></returns>
        void GetQuickAdjustmentTags (int? quickAdjustmentId);

        /// <summary>
        /// Get the tags for a quickAdjustment.
        /// </summary>
        /// <remarks>
        /// Get all existing quickAdjustment tags.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quickAdjustmentId">Id of the quickAdjustment to get tags for</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetQuickAdjustmentTagsWithHttpInfo (int? quickAdjustmentId);
        /// <summary>
        /// Update a quickAdjustment
        /// </summary>
        /// <remarks>
        /// Updates an existing quickAdjustment using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">QuickAdjustment to be updated.</param>
        /// <returns></returns>
        void UpdateQuickAdjustment (QuickAdjustment body);

        /// <summary>
        /// Update a quickAdjustment
        /// </summary>
        /// <remarks>
        /// Updates an existing quickAdjustment using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">QuickAdjustment to be updated.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateQuickAdjustmentWithHttpInfo (QuickAdjustment body);
        /// <summary>
        /// Update a quickAdjustment custom fields
        /// </summary>
        /// <remarks>
        /// Updates an existing quickAdjustment custom fields using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">QuickAdjustment to be updated.</param>
        /// <returns></returns>
        void UpdateQuickAdjustmentCustomFields (QuickAdjustment body);

        /// <summary>
        /// Update a quickAdjustment custom fields
        /// </summary>
        /// <remarks>
        /// Updates an existing quickAdjustment custom fields using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">QuickAdjustment to be updated.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateQuickAdjustmentCustomFieldsWithHttpInfo (QuickAdjustment body);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create a quickAdjustment
        /// </summary>
        /// <remarks>
        /// Inserts a new quickAdjustment using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">QuickAdjustment to be inserted.</param>
        /// <returns>Task of QuickAdjustment</returns>
        System.Threading.Tasks.Task<QuickAdjustment> AddQuickAdjustmentAsync (QuickAdjustment body);

        /// <summary>
        /// Create a quickAdjustment
        /// </summary>
        /// <remarks>
        /// Inserts a new quickAdjustment using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">QuickAdjustment to be inserted.</param>
        /// <returns>Task of ApiResponse (QuickAdjustment)</returns>
        System.Threading.Tasks.Task<ApiResponse<QuickAdjustment>> AddQuickAdjustmentAsyncWithHttpInfo (QuickAdjustment body);
        /// <summary>
        /// Add new audit for a quickAdjustment
        /// </summary>
        /// <remarks>
        /// Adds an audit to an existing quickAdjustment.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quickAdjustmentId">Id of the quickAdjustment to add an audit to</param>
        /// <param name="quickAdjustmentAudit">The audit to add</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddQuickAdjustmentAuditAsync (int? quickAdjustmentId, string quickAdjustmentAudit);

        /// <summary>
        /// Add new audit for a quickAdjustment
        /// </summary>
        /// <remarks>
        /// Adds an audit to an existing quickAdjustment.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quickAdjustmentId">Id of the quickAdjustment to add an audit to</param>
        /// <param name="quickAdjustmentAudit">The audit to add</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddQuickAdjustmentAuditAsyncWithHttpInfo (int? quickAdjustmentId, string quickAdjustmentAudit);
        /// <summary>
        /// Attach a file to a quickAdjustment
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing quickAdjustment.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quickAdjustmentId">Id of the quickAdjustment to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddQuickAdjustmentFileAsync (int? quickAdjustmentId, string fileName);

        /// <summary>
        /// Attach a file to a quickAdjustment
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing quickAdjustment.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quickAdjustmentId">Id of the quickAdjustment to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddQuickAdjustmentFileAsyncWithHttpInfo (int? quickAdjustmentId, string fileName);
        /// <summary>
        /// Attach a file to a quickAdjustment by URL.
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing quickAdjustment by URL.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="quickAdjustmentId">Id of the quickAdjustment to add an file to</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddQuickAdjustmentFileByURLAsync (RecordFile body, int? quickAdjustmentId);

        /// <summary>
        /// Attach a file to a quickAdjustment by URL.
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing quickAdjustment by URL.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="quickAdjustmentId">Id of the quickAdjustment to add an file to</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddQuickAdjustmentFileByURLAsyncWithHttpInfo (RecordFile body, int? quickAdjustmentId);
        /// <summary>
        /// Add new tags for a quickAdjustment.
        /// </summary>
        /// <remarks>
        /// Adds a tag to an existing quickAdjustment.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quickAdjustmentId">Id of the quickAdjustment to add a tag to</param>
        /// <param name="quickAdjustmentTag">The tag to add</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddQuickAdjustmentTagAsync (int? quickAdjustmentId, string quickAdjustmentTag);

        /// <summary>
        /// Add new tags for a quickAdjustment.
        /// </summary>
        /// <remarks>
        /// Adds a tag to an existing quickAdjustment.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quickAdjustmentId">Id of the quickAdjustment to add a tag to</param>
        /// <param name="quickAdjustmentTag">The tag to add</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddQuickAdjustmentTagAsyncWithHttpInfo (int? quickAdjustmentId, string quickAdjustmentTag);
        /// <summary>
        /// Delete a quickAdjustment
        /// </summary>
        /// <remarks>
        /// Deletes the quickAdjustment identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quickAdjustmentId">Id of the quickAdjustment to be deleted.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteQuickAdjustmentAsync (int? quickAdjustmentId);

        /// <summary>
        /// Delete a quickAdjustment
        /// </summary>
        /// <remarks>
        /// Deletes the quickAdjustment identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quickAdjustmentId">Id of the quickAdjustment to be deleted.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteQuickAdjustmentAsyncWithHttpInfo (int? quickAdjustmentId);
        /// <summary>
        /// Delete a file for a quickAdjustment.
        /// </summary>
        /// <remarks>
        /// Deletes an existing quickAdjustment file using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quickAdjustmentId">Id of the quickAdjustment to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteQuickAdjustmentFileAsync (int? quickAdjustmentId, int? fileId);

        /// <summary>
        /// Delete a file for a quickAdjustment.
        /// </summary>
        /// <remarks>
        /// Deletes an existing quickAdjustment file using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quickAdjustmentId">Id of the quickAdjustment to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteQuickAdjustmentFileAsyncWithHttpInfo (int? quickAdjustmentId, int? fileId);
        /// <summary>
        /// Delete a tag for a quickAdjustment.
        /// </summary>
        /// <remarks>
        /// Deletes an existing quickAdjustment tag using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quickAdjustmentId">Id of the quickAdjustment to remove tag from</param>
        /// <param name="quickAdjustmentTag">The tag to delete</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteQuickAdjustmentTagAsync (int? quickAdjustmentId, string quickAdjustmentTag);

        /// <summary>
        /// Delete a tag for a quickAdjustment.
        /// </summary>
        /// <remarks>
        /// Deletes an existing quickAdjustment tag using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quickAdjustmentId">Id of the quickAdjustment to remove tag from</param>
        /// <param name="quickAdjustmentTag">The tag to delete</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteQuickAdjustmentTagAsyncWithHttpInfo (int? quickAdjustmentId, string quickAdjustmentTag);
        /// <summary>
        /// Run the ExecuteQuickAdjustment process.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Input data for ExecuteQuickAdjustment process.</param>
        /// <returns>Task of List&lt;ProcessOutputAPIModel&gt;</returns>
        System.Threading.Tasks.Task<List<ProcessOutputAPIModel>> ExecuteQuickAdjustmentAsync (ExecuteQuickAdjustmentInputAPIModel body);

        /// <summary>
        /// Run the ExecuteQuickAdjustment process.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Input data for ExecuteQuickAdjustment process.</param>
        /// <returns>Task of ApiResponse (List&lt;ProcessOutputAPIModel&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ProcessOutputAPIModel>>> ExecuteQuickAdjustmentAsyncWithHttpInfo (ExecuteQuickAdjustmentInputAPIModel body);
        /// <summary>
        /// Get a duplicated a quickAdjustment by id
        /// </summary>
        /// <remarks>
        /// Returns a duplicated quickAdjustment identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quickAdjustmentId">Id of the quickAdjustment to be duplicated.</param>
        /// <returns>Task of QuickAdjustment</returns>
        System.Threading.Tasks.Task<QuickAdjustment> GetDuplicateQuickAdjustmentByIdAsync (int? quickAdjustmentId);

        /// <summary>
        /// Get a duplicated a quickAdjustment by id
        /// </summary>
        /// <remarks>
        /// Returns a duplicated quickAdjustment identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quickAdjustmentId">Id of the quickAdjustment to be duplicated.</param>
        /// <returns>Task of ApiResponse (QuickAdjustment)</returns>
        System.Threading.Tasks.Task<ApiResponse<QuickAdjustment>> GetDuplicateQuickAdjustmentByIdAsyncWithHttpInfo (int? quickAdjustmentId);
        /// <summary>
        /// Search quickAdjustments by filter
        /// </summary>
        /// <remarks>
        /// Returns the list of quickAdjustments that match the given filter.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>Task of List&lt;QuickAdjustment&gt;</returns>
        System.Threading.Tasks.Task<List<QuickAdjustment>> GetQuickAdjustmentByFilterAsync (string filter = null, int? page = null, int? limit = null, string sort = null);

        /// <summary>
        /// Search quickAdjustments by filter
        /// </summary>
        /// <remarks>
        /// Returns the list of quickAdjustments that match the given filter.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;QuickAdjustment&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<QuickAdjustment>>> GetQuickAdjustmentByFilterAsyncWithHttpInfo (string filter = null, int? page = null, int? limit = null, string sort = null);
        /// <summary>
        /// Get a quickAdjustment by id
        /// </summary>
        /// <remarks>
        /// Returns the quickAdjustment identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quickAdjustmentId">Id of the quickAdjustment to be returned.</param>
        /// <returns>Task of QuickAdjustment</returns>
        System.Threading.Tasks.Task<QuickAdjustment> GetQuickAdjustmentByIdAsync (int? quickAdjustmentId);

        /// <summary>
        /// Get a quickAdjustment by id
        /// </summary>
        /// <remarks>
        /// Returns the quickAdjustment identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quickAdjustmentId">Id of the quickAdjustment to be returned.</param>
        /// <returns>Task of ApiResponse (QuickAdjustment)</returns>
        System.Threading.Tasks.Task<ApiResponse<QuickAdjustment>> GetQuickAdjustmentByIdAsyncWithHttpInfo (int? quickAdjustmentId);
        /// <summary>
        /// Get the files for a quickAdjustment.
        /// </summary>
        /// <remarks>
        /// Get all existing quickAdjustment files.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quickAdjustmentId">Id of the quickAdjustment to get files for</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetQuickAdjustmentFilesAsync (int? quickAdjustmentId);

        /// <summary>
        /// Get the files for a quickAdjustment.
        /// </summary>
        /// <remarks>
        /// Get all existing quickAdjustment files.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quickAdjustmentId">Id of the quickAdjustment to get files for</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetQuickAdjustmentFilesAsyncWithHttpInfo (int? quickAdjustmentId);
        /// <summary>
        /// Get the tags for a quickAdjustment.
        /// </summary>
        /// <remarks>
        /// Get all existing quickAdjustment tags.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quickAdjustmentId">Id of the quickAdjustment to get tags for</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetQuickAdjustmentTagsAsync (int? quickAdjustmentId);

        /// <summary>
        /// Get the tags for a quickAdjustment.
        /// </summary>
        /// <remarks>
        /// Get all existing quickAdjustment tags.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quickAdjustmentId">Id of the quickAdjustment to get tags for</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetQuickAdjustmentTagsAsyncWithHttpInfo (int? quickAdjustmentId);
        /// <summary>
        /// Update a quickAdjustment
        /// </summary>
        /// <remarks>
        /// Updates an existing quickAdjustment using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">QuickAdjustment to be updated.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateQuickAdjustmentAsync (QuickAdjustment body);

        /// <summary>
        /// Update a quickAdjustment
        /// </summary>
        /// <remarks>
        /// Updates an existing quickAdjustment using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">QuickAdjustment to be updated.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateQuickAdjustmentAsyncWithHttpInfo (QuickAdjustment body);
        /// <summary>
        /// Update a quickAdjustment custom fields
        /// </summary>
        /// <remarks>
        /// Updates an existing quickAdjustment custom fields using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">QuickAdjustment to be updated.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateQuickAdjustmentCustomFieldsAsync (QuickAdjustment body);

        /// <summary>
        /// Update a quickAdjustment custom fields
        /// </summary>
        /// <remarks>
        /// Updates an existing quickAdjustment custom fields using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">QuickAdjustment to be updated.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateQuickAdjustmentCustomFieldsAsyncWithHttpInfo (QuickAdjustment body);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class QuickAdjustmentApi : IQuickAdjustmentApi
    {
        private Infoplus.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="QuickAdjustmentApi"/> class.
        /// </summary>
        /// <returns></returns>
        public QuickAdjustmentApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = Infoplus.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="QuickAdjustmentApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public QuickAdjustmentApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Infoplus.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Infoplus.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create a quickAdjustment Inserts a new quickAdjustment using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">QuickAdjustment to be inserted.</param>
        /// <returns>QuickAdjustment</returns>
        public QuickAdjustment AddQuickAdjustment (QuickAdjustment body)
        {
             ApiResponse<QuickAdjustment> localVarResponse = AddQuickAdjustmentWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a quickAdjustment Inserts a new quickAdjustment using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">QuickAdjustment to be inserted.</param>
        /// <returns>ApiResponse of QuickAdjustment</returns>
        public ApiResponse< QuickAdjustment > AddQuickAdjustmentWithHttpInfo (QuickAdjustment body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling QuickAdjustmentApi->AddQuickAdjustment");

            var localVarPath = "/beta/quickAdjustment";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddQuickAdjustment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<QuickAdjustment>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (QuickAdjustment) Configuration.ApiClient.Deserialize(localVarResponse, typeof(QuickAdjustment)));
        }

        /// <summary>
        /// Create a quickAdjustment Inserts a new quickAdjustment using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">QuickAdjustment to be inserted.</param>
        /// <returns>Task of QuickAdjustment</returns>
        public async System.Threading.Tasks.Task<QuickAdjustment> AddQuickAdjustmentAsync (QuickAdjustment body)
        {
             ApiResponse<QuickAdjustment> localVarResponse = await AddQuickAdjustmentAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a quickAdjustment Inserts a new quickAdjustment using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">QuickAdjustment to be inserted.</param>
        /// <returns>Task of ApiResponse (QuickAdjustment)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<QuickAdjustment>> AddQuickAdjustmentAsyncWithHttpInfo (QuickAdjustment body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling QuickAdjustmentApi->AddQuickAdjustment");

            var localVarPath = "/beta/quickAdjustment";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddQuickAdjustment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<QuickAdjustment>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (QuickAdjustment) Configuration.ApiClient.Deserialize(localVarResponse, typeof(QuickAdjustment)));
        }

        /// <summary>
        /// Add new audit for a quickAdjustment Adds an audit to an existing quickAdjustment.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quickAdjustmentId">Id of the quickAdjustment to add an audit to</param>
        /// <param name="quickAdjustmentAudit">The audit to add</param>
        /// <returns></returns>
        public void AddQuickAdjustmentAudit (int? quickAdjustmentId, string quickAdjustmentAudit)
        {
             AddQuickAdjustmentAuditWithHttpInfo(quickAdjustmentId, quickAdjustmentAudit);
        }

        /// <summary>
        /// Add new audit for a quickAdjustment Adds an audit to an existing quickAdjustment.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quickAdjustmentId">Id of the quickAdjustment to add an audit to</param>
        /// <param name="quickAdjustmentAudit">The audit to add</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AddQuickAdjustmentAuditWithHttpInfo (int? quickAdjustmentId, string quickAdjustmentAudit)
        {
            // verify the required parameter 'quickAdjustmentId' is set
            if (quickAdjustmentId == null)
                throw new ApiException(400, "Missing required parameter 'quickAdjustmentId' when calling QuickAdjustmentApi->AddQuickAdjustmentAudit");
            // verify the required parameter 'quickAdjustmentAudit' is set
            if (quickAdjustmentAudit == null)
                throw new ApiException(400, "Missing required parameter 'quickAdjustmentAudit' when calling QuickAdjustmentApi->AddQuickAdjustmentAudit");

            var localVarPath = "/beta/quickAdjustment/{quickAdjustmentId}/audit/{quickAdjustmentAudit}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (quickAdjustmentId != null) localVarPathParams.Add("quickAdjustmentId", Configuration.ApiClient.ParameterToString(quickAdjustmentId)); // path parameter
            if (quickAdjustmentAudit != null) localVarPathParams.Add("quickAdjustmentAudit", Configuration.ApiClient.ParameterToString(quickAdjustmentAudit)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddQuickAdjustmentAudit", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Add new audit for a quickAdjustment Adds an audit to an existing quickAdjustment.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quickAdjustmentId">Id of the quickAdjustment to add an audit to</param>
        /// <param name="quickAdjustmentAudit">The audit to add</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddQuickAdjustmentAuditAsync (int? quickAdjustmentId, string quickAdjustmentAudit)
        {
             await AddQuickAdjustmentAuditAsyncWithHttpInfo(quickAdjustmentId, quickAdjustmentAudit);

        }

        /// <summary>
        /// Add new audit for a quickAdjustment Adds an audit to an existing quickAdjustment.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quickAdjustmentId">Id of the quickAdjustment to add an audit to</param>
        /// <param name="quickAdjustmentAudit">The audit to add</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddQuickAdjustmentAuditAsyncWithHttpInfo (int? quickAdjustmentId, string quickAdjustmentAudit)
        {
            // verify the required parameter 'quickAdjustmentId' is set
            if (quickAdjustmentId == null)
                throw new ApiException(400, "Missing required parameter 'quickAdjustmentId' when calling QuickAdjustmentApi->AddQuickAdjustmentAudit");
            // verify the required parameter 'quickAdjustmentAudit' is set
            if (quickAdjustmentAudit == null)
                throw new ApiException(400, "Missing required parameter 'quickAdjustmentAudit' when calling QuickAdjustmentApi->AddQuickAdjustmentAudit");

            var localVarPath = "/beta/quickAdjustment/{quickAdjustmentId}/audit/{quickAdjustmentAudit}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (quickAdjustmentId != null) localVarPathParams.Add("quickAdjustmentId", Configuration.ApiClient.ParameterToString(quickAdjustmentId)); // path parameter
            if (quickAdjustmentAudit != null) localVarPathParams.Add("quickAdjustmentAudit", Configuration.ApiClient.ParameterToString(quickAdjustmentAudit)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddQuickAdjustmentAudit", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Attach a file to a quickAdjustment Adds a file to an existing quickAdjustment.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quickAdjustmentId">Id of the quickAdjustment to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns></returns>
        public void AddQuickAdjustmentFile (int? quickAdjustmentId, string fileName)
        {
             AddQuickAdjustmentFileWithHttpInfo(quickAdjustmentId, fileName);
        }

        /// <summary>
        /// Attach a file to a quickAdjustment Adds a file to an existing quickAdjustment.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quickAdjustmentId">Id of the quickAdjustment to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AddQuickAdjustmentFileWithHttpInfo (int? quickAdjustmentId, string fileName)
        {
            // verify the required parameter 'quickAdjustmentId' is set
            if (quickAdjustmentId == null)
                throw new ApiException(400, "Missing required parameter 'quickAdjustmentId' when calling QuickAdjustmentApi->AddQuickAdjustmentFile");
            // verify the required parameter 'fileName' is set
            if (fileName == null)
                throw new ApiException(400, "Missing required parameter 'fileName' when calling QuickAdjustmentApi->AddQuickAdjustmentFile");

            var localVarPath = "/beta/quickAdjustment/{quickAdjustmentId}/file/{fileName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (quickAdjustmentId != null) localVarPathParams.Add("quickAdjustmentId", Configuration.ApiClient.ParameterToString(quickAdjustmentId)); // path parameter
            if (fileName != null) localVarPathParams.Add("fileName", Configuration.ApiClient.ParameterToString(fileName)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddQuickAdjustmentFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Attach a file to a quickAdjustment Adds a file to an existing quickAdjustment.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quickAdjustmentId">Id of the quickAdjustment to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddQuickAdjustmentFileAsync (int? quickAdjustmentId, string fileName)
        {
             await AddQuickAdjustmentFileAsyncWithHttpInfo(quickAdjustmentId, fileName);

        }

        /// <summary>
        /// Attach a file to a quickAdjustment Adds a file to an existing quickAdjustment.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quickAdjustmentId">Id of the quickAdjustment to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddQuickAdjustmentFileAsyncWithHttpInfo (int? quickAdjustmentId, string fileName)
        {
            // verify the required parameter 'quickAdjustmentId' is set
            if (quickAdjustmentId == null)
                throw new ApiException(400, "Missing required parameter 'quickAdjustmentId' when calling QuickAdjustmentApi->AddQuickAdjustmentFile");
            // verify the required parameter 'fileName' is set
            if (fileName == null)
                throw new ApiException(400, "Missing required parameter 'fileName' when calling QuickAdjustmentApi->AddQuickAdjustmentFile");

            var localVarPath = "/beta/quickAdjustment/{quickAdjustmentId}/file/{fileName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (quickAdjustmentId != null) localVarPathParams.Add("quickAdjustmentId", Configuration.ApiClient.ParameterToString(quickAdjustmentId)); // path parameter
            if (fileName != null) localVarPathParams.Add("fileName", Configuration.ApiClient.ParameterToString(fileName)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddQuickAdjustmentFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Attach a file to a quickAdjustment by URL. Adds a file to an existing quickAdjustment by URL.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="quickAdjustmentId">Id of the quickAdjustment to add an file to</param>
        /// <returns></returns>
        public void AddQuickAdjustmentFileByURL (RecordFile body, int? quickAdjustmentId)
        {
             AddQuickAdjustmentFileByURLWithHttpInfo(body, quickAdjustmentId);
        }

        /// <summary>
        /// Attach a file to a quickAdjustment by URL. Adds a file to an existing quickAdjustment by URL.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="quickAdjustmentId">Id of the quickAdjustment to add an file to</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AddQuickAdjustmentFileByURLWithHttpInfo (RecordFile body, int? quickAdjustmentId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling QuickAdjustmentApi->AddQuickAdjustmentFileByURL");
            // verify the required parameter 'quickAdjustmentId' is set
            if (quickAdjustmentId == null)
                throw new ApiException(400, "Missing required parameter 'quickAdjustmentId' when calling QuickAdjustmentApi->AddQuickAdjustmentFileByURL");

            var localVarPath = "/beta/quickAdjustment/{quickAdjustmentId}/file";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (quickAdjustmentId != null) localVarPathParams.Add("quickAdjustmentId", Configuration.ApiClient.ParameterToString(quickAdjustmentId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddQuickAdjustmentFileByURL", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Attach a file to a quickAdjustment by URL. Adds a file to an existing quickAdjustment by URL.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="quickAdjustmentId">Id of the quickAdjustment to add an file to</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddQuickAdjustmentFileByURLAsync (RecordFile body, int? quickAdjustmentId)
        {
             await AddQuickAdjustmentFileByURLAsyncWithHttpInfo(body, quickAdjustmentId);

        }

        /// <summary>
        /// Attach a file to a quickAdjustment by URL. Adds a file to an existing quickAdjustment by URL.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="quickAdjustmentId">Id of the quickAdjustment to add an file to</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddQuickAdjustmentFileByURLAsyncWithHttpInfo (RecordFile body, int? quickAdjustmentId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling QuickAdjustmentApi->AddQuickAdjustmentFileByURL");
            // verify the required parameter 'quickAdjustmentId' is set
            if (quickAdjustmentId == null)
                throw new ApiException(400, "Missing required parameter 'quickAdjustmentId' when calling QuickAdjustmentApi->AddQuickAdjustmentFileByURL");

            var localVarPath = "/beta/quickAdjustment/{quickAdjustmentId}/file";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (quickAdjustmentId != null) localVarPathParams.Add("quickAdjustmentId", Configuration.ApiClient.ParameterToString(quickAdjustmentId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddQuickAdjustmentFileByURL", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Add new tags for a quickAdjustment. Adds a tag to an existing quickAdjustment.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quickAdjustmentId">Id of the quickAdjustment to add a tag to</param>
        /// <param name="quickAdjustmentTag">The tag to add</param>
        /// <returns></returns>
        public void AddQuickAdjustmentTag (int? quickAdjustmentId, string quickAdjustmentTag)
        {
             AddQuickAdjustmentTagWithHttpInfo(quickAdjustmentId, quickAdjustmentTag);
        }

        /// <summary>
        /// Add new tags for a quickAdjustment. Adds a tag to an existing quickAdjustment.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quickAdjustmentId">Id of the quickAdjustment to add a tag to</param>
        /// <param name="quickAdjustmentTag">The tag to add</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AddQuickAdjustmentTagWithHttpInfo (int? quickAdjustmentId, string quickAdjustmentTag)
        {
            // verify the required parameter 'quickAdjustmentId' is set
            if (quickAdjustmentId == null)
                throw new ApiException(400, "Missing required parameter 'quickAdjustmentId' when calling QuickAdjustmentApi->AddQuickAdjustmentTag");
            // verify the required parameter 'quickAdjustmentTag' is set
            if (quickAdjustmentTag == null)
                throw new ApiException(400, "Missing required parameter 'quickAdjustmentTag' when calling QuickAdjustmentApi->AddQuickAdjustmentTag");

            var localVarPath = "/beta/quickAdjustment/{quickAdjustmentId}/tag/{quickAdjustmentTag}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (quickAdjustmentId != null) localVarPathParams.Add("quickAdjustmentId", Configuration.ApiClient.ParameterToString(quickAdjustmentId)); // path parameter
            if (quickAdjustmentTag != null) localVarPathParams.Add("quickAdjustmentTag", Configuration.ApiClient.ParameterToString(quickAdjustmentTag)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddQuickAdjustmentTag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Add new tags for a quickAdjustment. Adds a tag to an existing quickAdjustment.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quickAdjustmentId">Id of the quickAdjustment to add a tag to</param>
        /// <param name="quickAdjustmentTag">The tag to add</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddQuickAdjustmentTagAsync (int? quickAdjustmentId, string quickAdjustmentTag)
        {
             await AddQuickAdjustmentTagAsyncWithHttpInfo(quickAdjustmentId, quickAdjustmentTag);

        }

        /// <summary>
        /// Add new tags for a quickAdjustment. Adds a tag to an existing quickAdjustment.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quickAdjustmentId">Id of the quickAdjustment to add a tag to</param>
        /// <param name="quickAdjustmentTag">The tag to add</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddQuickAdjustmentTagAsyncWithHttpInfo (int? quickAdjustmentId, string quickAdjustmentTag)
        {
            // verify the required parameter 'quickAdjustmentId' is set
            if (quickAdjustmentId == null)
                throw new ApiException(400, "Missing required parameter 'quickAdjustmentId' when calling QuickAdjustmentApi->AddQuickAdjustmentTag");
            // verify the required parameter 'quickAdjustmentTag' is set
            if (quickAdjustmentTag == null)
                throw new ApiException(400, "Missing required parameter 'quickAdjustmentTag' when calling QuickAdjustmentApi->AddQuickAdjustmentTag");

            var localVarPath = "/beta/quickAdjustment/{quickAdjustmentId}/tag/{quickAdjustmentTag}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (quickAdjustmentId != null) localVarPathParams.Add("quickAdjustmentId", Configuration.ApiClient.ParameterToString(quickAdjustmentId)); // path parameter
            if (quickAdjustmentTag != null) localVarPathParams.Add("quickAdjustmentTag", Configuration.ApiClient.ParameterToString(quickAdjustmentTag)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddQuickAdjustmentTag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a quickAdjustment Deletes the quickAdjustment identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quickAdjustmentId">Id of the quickAdjustment to be deleted.</param>
        /// <returns></returns>
        public void DeleteQuickAdjustment (int? quickAdjustmentId)
        {
             DeleteQuickAdjustmentWithHttpInfo(quickAdjustmentId);
        }

        /// <summary>
        /// Delete a quickAdjustment Deletes the quickAdjustment identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quickAdjustmentId">Id of the quickAdjustment to be deleted.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteQuickAdjustmentWithHttpInfo (int? quickAdjustmentId)
        {
            // verify the required parameter 'quickAdjustmentId' is set
            if (quickAdjustmentId == null)
                throw new ApiException(400, "Missing required parameter 'quickAdjustmentId' when calling QuickAdjustmentApi->DeleteQuickAdjustment");

            var localVarPath = "/beta/quickAdjustment/{quickAdjustmentId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (quickAdjustmentId != null) localVarPathParams.Add("quickAdjustmentId", Configuration.ApiClient.ParameterToString(quickAdjustmentId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteQuickAdjustment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a quickAdjustment Deletes the quickAdjustment identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quickAdjustmentId">Id of the quickAdjustment to be deleted.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteQuickAdjustmentAsync (int? quickAdjustmentId)
        {
             await DeleteQuickAdjustmentAsyncWithHttpInfo(quickAdjustmentId);

        }

        /// <summary>
        /// Delete a quickAdjustment Deletes the quickAdjustment identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quickAdjustmentId">Id of the quickAdjustment to be deleted.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteQuickAdjustmentAsyncWithHttpInfo (int? quickAdjustmentId)
        {
            // verify the required parameter 'quickAdjustmentId' is set
            if (quickAdjustmentId == null)
                throw new ApiException(400, "Missing required parameter 'quickAdjustmentId' when calling QuickAdjustmentApi->DeleteQuickAdjustment");

            var localVarPath = "/beta/quickAdjustment/{quickAdjustmentId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (quickAdjustmentId != null) localVarPathParams.Add("quickAdjustmentId", Configuration.ApiClient.ParameterToString(quickAdjustmentId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteQuickAdjustment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a file for a quickAdjustment. Deletes an existing quickAdjustment file using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quickAdjustmentId">Id of the quickAdjustment to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns></returns>
        public void DeleteQuickAdjustmentFile (int? quickAdjustmentId, int? fileId)
        {
             DeleteQuickAdjustmentFileWithHttpInfo(quickAdjustmentId, fileId);
        }

        /// <summary>
        /// Delete a file for a quickAdjustment. Deletes an existing quickAdjustment file using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quickAdjustmentId">Id of the quickAdjustment to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteQuickAdjustmentFileWithHttpInfo (int? quickAdjustmentId, int? fileId)
        {
            // verify the required parameter 'quickAdjustmentId' is set
            if (quickAdjustmentId == null)
                throw new ApiException(400, "Missing required parameter 'quickAdjustmentId' when calling QuickAdjustmentApi->DeleteQuickAdjustmentFile");
            // verify the required parameter 'fileId' is set
            if (fileId == null)
                throw new ApiException(400, "Missing required parameter 'fileId' when calling QuickAdjustmentApi->DeleteQuickAdjustmentFile");

            var localVarPath = "/beta/quickAdjustment/{quickAdjustmentId}/file/{fileId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (quickAdjustmentId != null) localVarPathParams.Add("quickAdjustmentId", Configuration.ApiClient.ParameterToString(quickAdjustmentId)); // path parameter
            if (fileId != null) localVarPathParams.Add("fileId", Configuration.ApiClient.ParameterToString(fileId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteQuickAdjustmentFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a file for a quickAdjustment. Deletes an existing quickAdjustment file using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quickAdjustmentId">Id of the quickAdjustment to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteQuickAdjustmentFileAsync (int? quickAdjustmentId, int? fileId)
        {
             await DeleteQuickAdjustmentFileAsyncWithHttpInfo(quickAdjustmentId, fileId);

        }

        /// <summary>
        /// Delete a file for a quickAdjustment. Deletes an existing quickAdjustment file using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quickAdjustmentId">Id of the quickAdjustment to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteQuickAdjustmentFileAsyncWithHttpInfo (int? quickAdjustmentId, int? fileId)
        {
            // verify the required parameter 'quickAdjustmentId' is set
            if (quickAdjustmentId == null)
                throw new ApiException(400, "Missing required parameter 'quickAdjustmentId' when calling QuickAdjustmentApi->DeleteQuickAdjustmentFile");
            // verify the required parameter 'fileId' is set
            if (fileId == null)
                throw new ApiException(400, "Missing required parameter 'fileId' when calling QuickAdjustmentApi->DeleteQuickAdjustmentFile");

            var localVarPath = "/beta/quickAdjustment/{quickAdjustmentId}/file/{fileId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (quickAdjustmentId != null) localVarPathParams.Add("quickAdjustmentId", Configuration.ApiClient.ParameterToString(quickAdjustmentId)); // path parameter
            if (fileId != null) localVarPathParams.Add("fileId", Configuration.ApiClient.ParameterToString(fileId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteQuickAdjustmentFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a tag for a quickAdjustment. Deletes an existing quickAdjustment tag using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quickAdjustmentId">Id of the quickAdjustment to remove tag from</param>
        /// <param name="quickAdjustmentTag">The tag to delete</param>
        /// <returns></returns>
        public void DeleteQuickAdjustmentTag (int? quickAdjustmentId, string quickAdjustmentTag)
        {
             DeleteQuickAdjustmentTagWithHttpInfo(quickAdjustmentId, quickAdjustmentTag);
        }

        /// <summary>
        /// Delete a tag for a quickAdjustment. Deletes an existing quickAdjustment tag using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quickAdjustmentId">Id of the quickAdjustment to remove tag from</param>
        /// <param name="quickAdjustmentTag">The tag to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteQuickAdjustmentTagWithHttpInfo (int? quickAdjustmentId, string quickAdjustmentTag)
        {
            // verify the required parameter 'quickAdjustmentId' is set
            if (quickAdjustmentId == null)
                throw new ApiException(400, "Missing required parameter 'quickAdjustmentId' when calling QuickAdjustmentApi->DeleteQuickAdjustmentTag");
            // verify the required parameter 'quickAdjustmentTag' is set
            if (quickAdjustmentTag == null)
                throw new ApiException(400, "Missing required parameter 'quickAdjustmentTag' when calling QuickAdjustmentApi->DeleteQuickAdjustmentTag");

            var localVarPath = "/beta/quickAdjustment/{quickAdjustmentId}/tag/{quickAdjustmentTag}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (quickAdjustmentId != null) localVarPathParams.Add("quickAdjustmentId", Configuration.ApiClient.ParameterToString(quickAdjustmentId)); // path parameter
            if (quickAdjustmentTag != null) localVarPathParams.Add("quickAdjustmentTag", Configuration.ApiClient.ParameterToString(quickAdjustmentTag)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteQuickAdjustmentTag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a tag for a quickAdjustment. Deletes an existing quickAdjustment tag using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quickAdjustmentId">Id of the quickAdjustment to remove tag from</param>
        /// <param name="quickAdjustmentTag">The tag to delete</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteQuickAdjustmentTagAsync (int? quickAdjustmentId, string quickAdjustmentTag)
        {
             await DeleteQuickAdjustmentTagAsyncWithHttpInfo(quickAdjustmentId, quickAdjustmentTag);

        }

        /// <summary>
        /// Delete a tag for a quickAdjustment. Deletes an existing quickAdjustment tag using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quickAdjustmentId">Id of the quickAdjustment to remove tag from</param>
        /// <param name="quickAdjustmentTag">The tag to delete</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteQuickAdjustmentTagAsyncWithHttpInfo (int? quickAdjustmentId, string quickAdjustmentTag)
        {
            // verify the required parameter 'quickAdjustmentId' is set
            if (quickAdjustmentId == null)
                throw new ApiException(400, "Missing required parameter 'quickAdjustmentId' when calling QuickAdjustmentApi->DeleteQuickAdjustmentTag");
            // verify the required parameter 'quickAdjustmentTag' is set
            if (quickAdjustmentTag == null)
                throw new ApiException(400, "Missing required parameter 'quickAdjustmentTag' when calling QuickAdjustmentApi->DeleteQuickAdjustmentTag");

            var localVarPath = "/beta/quickAdjustment/{quickAdjustmentId}/tag/{quickAdjustmentTag}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (quickAdjustmentId != null) localVarPathParams.Add("quickAdjustmentId", Configuration.ApiClient.ParameterToString(quickAdjustmentId)); // path parameter
            if (quickAdjustmentTag != null) localVarPathParams.Add("quickAdjustmentTag", Configuration.ApiClient.ParameterToString(quickAdjustmentTag)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteQuickAdjustmentTag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Run the ExecuteQuickAdjustment process. 
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Input data for ExecuteQuickAdjustment process.</param>
        /// <returns>List&lt;ProcessOutputAPIModel&gt;</returns>
        public List<ProcessOutputAPIModel> ExecuteQuickAdjustment (ExecuteQuickAdjustmentInputAPIModel body)
        {
             ApiResponse<List<ProcessOutputAPIModel>> localVarResponse = ExecuteQuickAdjustmentWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Run the ExecuteQuickAdjustment process. 
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Input data for ExecuteQuickAdjustment process.</param>
        /// <returns>ApiResponse of List&lt;ProcessOutputAPIModel&gt;</returns>
        public ApiResponse< List<ProcessOutputAPIModel> > ExecuteQuickAdjustmentWithHttpInfo (ExecuteQuickAdjustmentInputAPIModel body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling QuickAdjustmentApi->ExecuteQuickAdjustment");

            var localVarPath = "/beta/quickAdjustment/executeQuickAdjustment";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExecuteQuickAdjustment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ProcessOutputAPIModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ProcessOutputAPIModel>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ProcessOutputAPIModel>)));
        }

        /// <summary>
        /// Run the ExecuteQuickAdjustment process. 
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Input data for ExecuteQuickAdjustment process.</param>
        /// <returns>Task of List&lt;ProcessOutputAPIModel&gt;</returns>
        public async System.Threading.Tasks.Task<List<ProcessOutputAPIModel>> ExecuteQuickAdjustmentAsync (ExecuteQuickAdjustmentInputAPIModel body)
        {
             ApiResponse<List<ProcessOutputAPIModel>> localVarResponse = await ExecuteQuickAdjustmentAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Run the ExecuteQuickAdjustment process. 
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Input data for ExecuteQuickAdjustment process.</param>
        /// <returns>Task of ApiResponse (List&lt;ProcessOutputAPIModel&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ProcessOutputAPIModel>>> ExecuteQuickAdjustmentAsyncWithHttpInfo (ExecuteQuickAdjustmentInputAPIModel body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling QuickAdjustmentApi->ExecuteQuickAdjustment");

            var localVarPath = "/beta/quickAdjustment/executeQuickAdjustment";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExecuteQuickAdjustment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ProcessOutputAPIModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ProcessOutputAPIModel>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ProcessOutputAPIModel>)));
        }

        /// <summary>
        /// Get a duplicated a quickAdjustment by id Returns a duplicated quickAdjustment identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quickAdjustmentId">Id of the quickAdjustment to be duplicated.</param>
        /// <returns>QuickAdjustment</returns>
        public QuickAdjustment GetDuplicateQuickAdjustmentById (int? quickAdjustmentId)
        {
             ApiResponse<QuickAdjustment> localVarResponse = GetDuplicateQuickAdjustmentByIdWithHttpInfo(quickAdjustmentId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a duplicated a quickAdjustment by id Returns a duplicated quickAdjustment identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quickAdjustmentId">Id of the quickAdjustment to be duplicated.</param>
        /// <returns>ApiResponse of QuickAdjustment</returns>
        public ApiResponse< QuickAdjustment > GetDuplicateQuickAdjustmentByIdWithHttpInfo (int? quickAdjustmentId)
        {
            // verify the required parameter 'quickAdjustmentId' is set
            if (quickAdjustmentId == null)
                throw new ApiException(400, "Missing required parameter 'quickAdjustmentId' when calling QuickAdjustmentApi->GetDuplicateQuickAdjustmentById");

            var localVarPath = "/beta/quickAdjustment/duplicate/{quickAdjustmentId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (quickAdjustmentId != null) localVarPathParams.Add("quickAdjustmentId", Configuration.ApiClient.ParameterToString(quickAdjustmentId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDuplicateQuickAdjustmentById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<QuickAdjustment>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (QuickAdjustment) Configuration.ApiClient.Deserialize(localVarResponse, typeof(QuickAdjustment)));
        }

        /// <summary>
        /// Get a duplicated a quickAdjustment by id Returns a duplicated quickAdjustment identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quickAdjustmentId">Id of the quickAdjustment to be duplicated.</param>
        /// <returns>Task of QuickAdjustment</returns>
        public async System.Threading.Tasks.Task<QuickAdjustment> GetDuplicateQuickAdjustmentByIdAsync (int? quickAdjustmentId)
        {
             ApiResponse<QuickAdjustment> localVarResponse = await GetDuplicateQuickAdjustmentByIdAsyncWithHttpInfo(quickAdjustmentId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a duplicated a quickAdjustment by id Returns a duplicated quickAdjustment identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quickAdjustmentId">Id of the quickAdjustment to be duplicated.</param>
        /// <returns>Task of ApiResponse (QuickAdjustment)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<QuickAdjustment>> GetDuplicateQuickAdjustmentByIdAsyncWithHttpInfo (int? quickAdjustmentId)
        {
            // verify the required parameter 'quickAdjustmentId' is set
            if (quickAdjustmentId == null)
                throw new ApiException(400, "Missing required parameter 'quickAdjustmentId' when calling QuickAdjustmentApi->GetDuplicateQuickAdjustmentById");

            var localVarPath = "/beta/quickAdjustment/duplicate/{quickAdjustmentId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (quickAdjustmentId != null) localVarPathParams.Add("quickAdjustmentId", Configuration.ApiClient.ParameterToString(quickAdjustmentId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDuplicateQuickAdjustmentById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<QuickAdjustment>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (QuickAdjustment) Configuration.ApiClient.Deserialize(localVarResponse, typeof(QuickAdjustment)));
        }

        /// <summary>
        /// Search quickAdjustments by filter Returns the list of quickAdjustments that match the given filter.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>List&lt;QuickAdjustment&gt;</returns>
        public List<QuickAdjustment> GetQuickAdjustmentByFilter (string filter = null, int? page = null, int? limit = null, string sort = null)
        {
             ApiResponse<List<QuickAdjustment>> localVarResponse = GetQuickAdjustmentByFilterWithHttpInfo(filter, page, limit, sort);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Search quickAdjustments by filter Returns the list of quickAdjustments that match the given filter.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>ApiResponse of List&lt;QuickAdjustment&gt;</returns>
        public ApiResponse< List<QuickAdjustment> > GetQuickAdjustmentByFilterWithHttpInfo (string filter = null, int? page = null, int? limit = null, string sort = null)
        {

            var localVarPath = "/beta/quickAdjustment/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (filter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (page != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetQuickAdjustmentByFilter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<QuickAdjustment>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<QuickAdjustment>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<QuickAdjustment>)));
        }

        /// <summary>
        /// Search quickAdjustments by filter Returns the list of quickAdjustments that match the given filter.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>Task of List&lt;QuickAdjustment&gt;</returns>
        public async System.Threading.Tasks.Task<List<QuickAdjustment>> GetQuickAdjustmentByFilterAsync (string filter = null, int? page = null, int? limit = null, string sort = null)
        {
             ApiResponse<List<QuickAdjustment>> localVarResponse = await GetQuickAdjustmentByFilterAsyncWithHttpInfo(filter, page, limit, sort);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Search quickAdjustments by filter Returns the list of quickAdjustments that match the given filter.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;QuickAdjustment&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<QuickAdjustment>>> GetQuickAdjustmentByFilterAsyncWithHttpInfo (string filter = null, int? page = null, int? limit = null, string sort = null)
        {

            var localVarPath = "/beta/quickAdjustment/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (filter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (page != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetQuickAdjustmentByFilter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<QuickAdjustment>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<QuickAdjustment>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<QuickAdjustment>)));
        }

        /// <summary>
        /// Get a quickAdjustment by id Returns the quickAdjustment identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quickAdjustmentId">Id of the quickAdjustment to be returned.</param>
        /// <returns>QuickAdjustment</returns>
        public QuickAdjustment GetQuickAdjustmentById (int? quickAdjustmentId)
        {
             ApiResponse<QuickAdjustment> localVarResponse = GetQuickAdjustmentByIdWithHttpInfo(quickAdjustmentId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a quickAdjustment by id Returns the quickAdjustment identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quickAdjustmentId">Id of the quickAdjustment to be returned.</param>
        /// <returns>ApiResponse of QuickAdjustment</returns>
        public ApiResponse< QuickAdjustment > GetQuickAdjustmentByIdWithHttpInfo (int? quickAdjustmentId)
        {
            // verify the required parameter 'quickAdjustmentId' is set
            if (quickAdjustmentId == null)
                throw new ApiException(400, "Missing required parameter 'quickAdjustmentId' when calling QuickAdjustmentApi->GetQuickAdjustmentById");

            var localVarPath = "/beta/quickAdjustment/{quickAdjustmentId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (quickAdjustmentId != null) localVarPathParams.Add("quickAdjustmentId", Configuration.ApiClient.ParameterToString(quickAdjustmentId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetQuickAdjustmentById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<QuickAdjustment>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (QuickAdjustment) Configuration.ApiClient.Deserialize(localVarResponse, typeof(QuickAdjustment)));
        }

        /// <summary>
        /// Get a quickAdjustment by id Returns the quickAdjustment identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quickAdjustmentId">Id of the quickAdjustment to be returned.</param>
        /// <returns>Task of QuickAdjustment</returns>
        public async System.Threading.Tasks.Task<QuickAdjustment> GetQuickAdjustmentByIdAsync (int? quickAdjustmentId)
        {
             ApiResponse<QuickAdjustment> localVarResponse = await GetQuickAdjustmentByIdAsyncWithHttpInfo(quickAdjustmentId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a quickAdjustment by id Returns the quickAdjustment identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quickAdjustmentId">Id of the quickAdjustment to be returned.</param>
        /// <returns>Task of ApiResponse (QuickAdjustment)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<QuickAdjustment>> GetQuickAdjustmentByIdAsyncWithHttpInfo (int? quickAdjustmentId)
        {
            // verify the required parameter 'quickAdjustmentId' is set
            if (quickAdjustmentId == null)
                throw new ApiException(400, "Missing required parameter 'quickAdjustmentId' when calling QuickAdjustmentApi->GetQuickAdjustmentById");

            var localVarPath = "/beta/quickAdjustment/{quickAdjustmentId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (quickAdjustmentId != null) localVarPathParams.Add("quickAdjustmentId", Configuration.ApiClient.ParameterToString(quickAdjustmentId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetQuickAdjustmentById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<QuickAdjustment>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (QuickAdjustment) Configuration.ApiClient.Deserialize(localVarResponse, typeof(QuickAdjustment)));
        }

        /// <summary>
        /// Get the files for a quickAdjustment. Get all existing quickAdjustment files.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quickAdjustmentId">Id of the quickAdjustment to get files for</param>
        /// <returns></returns>
        public void GetQuickAdjustmentFiles (int? quickAdjustmentId)
        {
             GetQuickAdjustmentFilesWithHttpInfo(quickAdjustmentId);
        }

        /// <summary>
        /// Get the files for a quickAdjustment. Get all existing quickAdjustment files.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quickAdjustmentId">Id of the quickAdjustment to get files for</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GetQuickAdjustmentFilesWithHttpInfo (int? quickAdjustmentId)
        {
            // verify the required parameter 'quickAdjustmentId' is set
            if (quickAdjustmentId == null)
                throw new ApiException(400, "Missing required parameter 'quickAdjustmentId' when calling QuickAdjustmentApi->GetQuickAdjustmentFiles");

            var localVarPath = "/beta/quickAdjustment/{quickAdjustmentId}/file";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (quickAdjustmentId != null) localVarPathParams.Add("quickAdjustmentId", Configuration.ApiClient.ParameterToString(quickAdjustmentId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetQuickAdjustmentFiles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get the files for a quickAdjustment. Get all existing quickAdjustment files.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quickAdjustmentId">Id of the quickAdjustment to get files for</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetQuickAdjustmentFilesAsync (int? quickAdjustmentId)
        {
             await GetQuickAdjustmentFilesAsyncWithHttpInfo(quickAdjustmentId);

        }

        /// <summary>
        /// Get the files for a quickAdjustment. Get all existing quickAdjustment files.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quickAdjustmentId">Id of the quickAdjustment to get files for</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetQuickAdjustmentFilesAsyncWithHttpInfo (int? quickAdjustmentId)
        {
            // verify the required parameter 'quickAdjustmentId' is set
            if (quickAdjustmentId == null)
                throw new ApiException(400, "Missing required parameter 'quickAdjustmentId' when calling QuickAdjustmentApi->GetQuickAdjustmentFiles");

            var localVarPath = "/beta/quickAdjustment/{quickAdjustmentId}/file";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (quickAdjustmentId != null) localVarPathParams.Add("quickAdjustmentId", Configuration.ApiClient.ParameterToString(quickAdjustmentId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetQuickAdjustmentFiles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get the tags for a quickAdjustment. Get all existing quickAdjustment tags.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quickAdjustmentId">Id of the quickAdjustment to get tags for</param>
        /// <returns></returns>
        public void GetQuickAdjustmentTags (int? quickAdjustmentId)
        {
             GetQuickAdjustmentTagsWithHttpInfo(quickAdjustmentId);
        }

        /// <summary>
        /// Get the tags for a quickAdjustment. Get all existing quickAdjustment tags.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quickAdjustmentId">Id of the quickAdjustment to get tags for</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GetQuickAdjustmentTagsWithHttpInfo (int? quickAdjustmentId)
        {
            // verify the required parameter 'quickAdjustmentId' is set
            if (quickAdjustmentId == null)
                throw new ApiException(400, "Missing required parameter 'quickAdjustmentId' when calling QuickAdjustmentApi->GetQuickAdjustmentTags");

            var localVarPath = "/beta/quickAdjustment/{quickAdjustmentId}/tag";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (quickAdjustmentId != null) localVarPathParams.Add("quickAdjustmentId", Configuration.ApiClient.ParameterToString(quickAdjustmentId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetQuickAdjustmentTags", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get the tags for a quickAdjustment. Get all existing quickAdjustment tags.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quickAdjustmentId">Id of the quickAdjustment to get tags for</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetQuickAdjustmentTagsAsync (int? quickAdjustmentId)
        {
             await GetQuickAdjustmentTagsAsyncWithHttpInfo(quickAdjustmentId);

        }

        /// <summary>
        /// Get the tags for a quickAdjustment. Get all existing quickAdjustment tags.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quickAdjustmentId">Id of the quickAdjustment to get tags for</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetQuickAdjustmentTagsAsyncWithHttpInfo (int? quickAdjustmentId)
        {
            // verify the required parameter 'quickAdjustmentId' is set
            if (quickAdjustmentId == null)
                throw new ApiException(400, "Missing required parameter 'quickAdjustmentId' when calling QuickAdjustmentApi->GetQuickAdjustmentTags");

            var localVarPath = "/beta/quickAdjustment/{quickAdjustmentId}/tag";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (quickAdjustmentId != null) localVarPathParams.Add("quickAdjustmentId", Configuration.ApiClient.ParameterToString(quickAdjustmentId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetQuickAdjustmentTags", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update a quickAdjustment Updates an existing quickAdjustment using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">QuickAdjustment to be updated.</param>
        /// <returns></returns>
        public void UpdateQuickAdjustment (QuickAdjustment body)
        {
             UpdateQuickAdjustmentWithHttpInfo(body);
        }

        /// <summary>
        /// Update a quickAdjustment Updates an existing quickAdjustment using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">QuickAdjustment to be updated.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateQuickAdjustmentWithHttpInfo (QuickAdjustment body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling QuickAdjustmentApi->UpdateQuickAdjustment");

            var localVarPath = "/beta/quickAdjustment";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateQuickAdjustment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update a quickAdjustment Updates an existing quickAdjustment using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">QuickAdjustment to be updated.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateQuickAdjustmentAsync (QuickAdjustment body)
        {
             await UpdateQuickAdjustmentAsyncWithHttpInfo(body);

        }

        /// <summary>
        /// Update a quickAdjustment Updates an existing quickAdjustment using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">QuickAdjustment to be updated.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateQuickAdjustmentAsyncWithHttpInfo (QuickAdjustment body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling QuickAdjustmentApi->UpdateQuickAdjustment");

            var localVarPath = "/beta/quickAdjustment";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateQuickAdjustment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update a quickAdjustment custom fields Updates an existing quickAdjustment custom fields using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">QuickAdjustment to be updated.</param>
        /// <returns></returns>
        public void UpdateQuickAdjustmentCustomFields (QuickAdjustment body)
        {
             UpdateQuickAdjustmentCustomFieldsWithHttpInfo(body);
        }

        /// <summary>
        /// Update a quickAdjustment custom fields Updates an existing quickAdjustment custom fields using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">QuickAdjustment to be updated.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateQuickAdjustmentCustomFieldsWithHttpInfo (QuickAdjustment body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling QuickAdjustmentApi->UpdateQuickAdjustmentCustomFields");

            var localVarPath = "/beta/quickAdjustment/customFields";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateQuickAdjustmentCustomFields", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update a quickAdjustment custom fields Updates an existing quickAdjustment custom fields using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">QuickAdjustment to be updated.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateQuickAdjustmentCustomFieldsAsync (QuickAdjustment body)
        {
             await UpdateQuickAdjustmentCustomFieldsAsyncWithHttpInfo(body);

        }

        /// <summary>
        /// Update a quickAdjustment custom fields Updates an existing quickAdjustment custom fields using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">QuickAdjustment to be updated.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateQuickAdjustmentCustomFieldsAsyncWithHttpInfo (QuickAdjustment body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling QuickAdjustmentApi->UpdateQuickAdjustmentCustomFields");

            var localVarPath = "/beta/quickAdjustment/customFields";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateQuickAdjustmentCustomFields", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

    }
}
