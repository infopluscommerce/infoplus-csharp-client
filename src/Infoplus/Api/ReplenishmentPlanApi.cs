/* 
 * Infoplus API
 *
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Infoplus.Client;
using Infoplus.Model;

namespace Infoplus.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IReplenishmentPlanApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create a replenishmentPlan
        /// </summary>
        /// <remarks>
        /// Inserts a new replenishmentPlan using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">ReplenishmentPlan to be inserted.</param>
        /// <returns>ReplenishmentPlan</returns>
        ReplenishmentPlan AddReplenishmentPlan (ReplenishmentPlan body);

        /// <summary>
        /// Create a replenishmentPlan
        /// </summary>
        /// <remarks>
        /// Inserts a new replenishmentPlan using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">ReplenishmentPlan to be inserted.</param>
        /// <returns>ApiResponse of ReplenishmentPlan</returns>
        ApiResponse<ReplenishmentPlan> AddReplenishmentPlanWithHttpInfo (ReplenishmentPlan body);
        /// <summary>
        /// Add new audit for a replenishmentPlan
        /// </summary>
        /// <remarks>
        /// Adds an audit to an existing replenishmentPlan.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replenishmentPlanId">Id of the replenishmentPlan to add an audit to</param>
        /// <param name="replenishmentPlanAudit">The audit to add</param>
        /// <returns></returns>
        void AddReplenishmentPlanAudit (int? replenishmentPlanId, string replenishmentPlanAudit);

        /// <summary>
        /// Add new audit for a replenishmentPlan
        /// </summary>
        /// <remarks>
        /// Adds an audit to an existing replenishmentPlan.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replenishmentPlanId">Id of the replenishmentPlan to add an audit to</param>
        /// <param name="replenishmentPlanAudit">The audit to add</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddReplenishmentPlanAuditWithHttpInfo (int? replenishmentPlanId, string replenishmentPlanAudit);
        /// <summary>
        /// Attach a file to a replenishmentPlan
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing replenishmentPlan.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replenishmentPlanId">Id of the replenishmentPlan to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns></returns>
        void AddReplenishmentPlanFile (int? replenishmentPlanId, string fileName);

        /// <summary>
        /// Attach a file to a replenishmentPlan
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing replenishmentPlan.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replenishmentPlanId">Id of the replenishmentPlan to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddReplenishmentPlanFileWithHttpInfo (int? replenishmentPlanId, string fileName);
        /// <summary>
        /// Attach a file to a replenishmentPlan by URL.
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing replenishmentPlan by URL.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="replenishmentPlanId">Id of the replenishmentPlan to add an file to</param>
        /// <returns></returns>
        void AddReplenishmentPlanFileByURL (RecordFile body, int? replenishmentPlanId);

        /// <summary>
        /// Attach a file to a replenishmentPlan by URL.
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing replenishmentPlan by URL.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="replenishmentPlanId">Id of the replenishmentPlan to add an file to</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddReplenishmentPlanFileByURLWithHttpInfo (RecordFile body, int? replenishmentPlanId);
        /// <summary>
        /// Add new tags for a replenishmentPlan.
        /// </summary>
        /// <remarks>
        /// Adds a tag to an existing replenishmentPlan.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replenishmentPlanId">Id of the replenishmentPlan to add a tag to</param>
        /// <param name="replenishmentPlanTag">The tag to add</param>
        /// <returns></returns>
        void AddReplenishmentPlanTag (int? replenishmentPlanId, string replenishmentPlanTag);

        /// <summary>
        /// Add new tags for a replenishmentPlan.
        /// </summary>
        /// <remarks>
        /// Adds a tag to an existing replenishmentPlan.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replenishmentPlanId">Id of the replenishmentPlan to add a tag to</param>
        /// <param name="replenishmentPlanTag">The tag to add</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddReplenishmentPlanTagWithHttpInfo (int? replenishmentPlanId, string replenishmentPlanTag);
        /// <summary>
        /// Delete a replenishmentPlan
        /// </summary>
        /// <remarks>
        /// Deletes the replenishmentPlan identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replenishmentPlanId">Id of the replenishmentPlan to be deleted.</param>
        /// <returns></returns>
        void DeleteReplenishmentPlan (int? replenishmentPlanId);

        /// <summary>
        /// Delete a replenishmentPlan
        /// </summary>
        /// <remarks>
        /// Deletes the replenishmentPlan identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replenishmentPlanId">Id of the replenishmentPlan to be deleted.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteReplenishmentPlanWithHttpInfo (int? replenishmentPlanId);
        /// <summary>
        /// Delete a file for a replenishmentPlan.
        /// </summary>
        /// <remarks>
        /// Deletes an existing replenishmentPlan file using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replenishmentPlanId">Id of the replenishmentPlan to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns></returns>
        void DeleteReplenishmentPlanFile (int? replenishmentPlanId, int? fileId);

        /// <summary>
        /// Delete a file for a replenishmentPlan.
        /// </summary>
        /// <remarks>
        /// Deletes an existing replenishmentPlan file using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replenishmentPlanId">Id of the replenishmentPlan to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteReplenishmentPlanFileWithHttpInfo (int? replenishmentPlanId, int? fileId);
        /// <summary>
        /// Delete a tag for a replenishmentPlan.
        /// </summary>
        /// <remarks>
        /// Deletes an existing replenishmentPlan tag using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replenishmentPlanId">Id of the replenishmentPlan to remove tag from</param>
        /// <param name="replenishmentPlanTag">The tag to delete</param>
        /// <returns></returns>
        void DeleteReplenishmentPlanTag (int? replenishmentPlanId, string replenishmentPlanTag);

        /// <summary>
        /// Delete a tag for a replenishmentPlan.
        /// </summary>
        /// <remarks>
        /// Deletes an existing replenishmentPlan tag using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replenishmentPlanId">Id of the replenishmentPlan to remove tag from</param>
        /// <param name="replenishmentPlanTag">The tag to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteReplenishmentPlanTagWithHttpInfo (int? replenishmentPlanId, string replenishmentPlanTag);
        /// <summary>
        /// Get a duplicated a replenishmentPlan by id
        /// </summary>
        /// <remarks>
        /// Returns a duplicated replenishmentPlan identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replenishmentPlanId">Id of the replenishmentPlan to be duplicated.</param>
        /// <returns>ReplenishmentPlan</returns>
        ReplenishmentPlan GetDuplicateReplenishmentPlanById (int? replenishmentPlanId);

        /// <summary>
        /// Get a duplicated a replenishmentPlan by id
        /// </summary>
        /// <remarks>
        /// Returns a duplicated replenishmentPlan identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replenishmentPlanId">Id of the replenishmentPlan to be duplicated.</param>
        /// <returns>ApiResponse of ReplenishmentPlan</returns>
        ApiResponse<ReplenishmentPlan> GetDuplicateReplenishmentPlanByIdWithHttpInfo (int? replenishmentPlanId);
        /// <summary>
        /// Search replenishmentPlans by filter
        /// </summary>
        /// <remarks>
        /// Returns the list of replenishmentPlans that match the given filter.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>List&lt;ReplenishmentPlan&gt;</returns>
        List<ReplenishmentPlan> GetReplenishmentPlanByFilter (string filter = null, int? page = null, int? limit = null, string sort = null);

        /// <summary>
        /// Search replenishmentPlans by filter
        /// </summary>
        /// <remarks>
        /// Returns the list of replenishmentPlans that match the given filter.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>ApiResponse of List&lt;ReplenishmentPlan&gt;</returns>
        ApiResponse<List<ReplenishmentPlan>> GetReplenishmentPlanByFilterWithHttpInfo (string filter = null, int? page = null, int? limit = null, string sort = null);
        /// <summary>
        /// Get a replenishmentPlan by id
        /// </summary>
        /// <remarks>
        /// Returns the replenishmentPlan identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replenishmentPlanId">Id of the replenishmentPlan to be returned.</param>
        /// <returns>ReplenishmentPlan</returns>
        ReplenishmentPlan GetReplenishmentPlanById (int? replenishmentPlanId);

        /// <summary>
        /// Get a replenishmentPlan by id
        /// </summary>
        /// <remarks>
        /// Returns the replenishmentPlan identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replenishmentPlanId">Id of the replenishmentPlan to be returned.</param>
        /// <returns>ApiResponse of ReplenishmentPlan</returns>
        ApiResponse<ReplenishmentPlan> GetReplenishmentPlanByIdWithHttpInfo (int? replenishmentPlanId);
        /// <summary>
        /// Get the files for a replenishmentPlan.
        /// </summary>
        /// <remarks>
        /// Get all existing replenishmentPlan files.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replenishmentPlanId">Id of the replenishmentPlan to get files for</param>
        /// <returns></returns>
        void GetReplenishmentPlanFiles (int? replenishmentPlanId);

        /// <summary>
        /// Get the files for a replenishmentPlan.
        /// </summary>
        /// <remarks>
        /// Get all existing replenishmentPlan files.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replenishmentPlanId">Id of the replenishmentPlan to get files for</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetReplenishmentPlanFilesWithHttpInfo (int? replenishmentPlanId);
        /// <summary>
        /// Get the tags for a replenishmentPlan.
        /// </summary>
        /// <remarks>
        /// Get all existing replenishmentPlan tags.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replenishmentPlanId">Id of the replenishmentPlan to get tags for</param>
        /// <returns></returns>
        void GetReplenishmentPlanTags (int? replenishmentPlanId);

        /// <summary>
        /// Get the tags for a replenishmentPlan.
        /// </summary>
        /// <remarks>
        /// Get all existing replenishmentPlan tags.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replenishmentPlanId">Id of the replenishmentPlan to get tags for</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetReplenishmentPlanTagsWithHttpInfo (int? replenishmentPlanId);
        /// <summary>
        /// Update a replenishmentPlan
        /// </summary>
        /// <remarks>
        /// Updates an existing replenishmentPlan using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">ReplenishmentPlan to be updated.</param>
        /// <returns></returns>
        void UpdateReplenishmentPlan (ReplenishmentPlan body);

        /// <summary>
        /// Update a replenishmentPlan
        /// </summary>
        /// <remarks>
        /// Updates an existing replenishmentPlan using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">ReplenishmentPlan to be updated.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateReplenishmentPlanWithHttpInfo (ReplenishmentPlan body);
        /// <summary>
        /// Update a replenishmentPlan custom fields
        /// </summary>
        /// <remarks>
        /// Updates an existing replenishmentPlan custom fields using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">ReplenishmentPlan to be updated.</param>
        /// <returns></returns>
        void UpdateReplenishmentPlanCustomFields (ReplenishmentPlan body);

        /// <summary>
        /// Update a replenishmentPlan custom fields
        /// </summary>
        /// <remarks>
        /// Updates an existing replenishmentPlan custom fields using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">ReplenishmentPlan to be updated.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateReplenishmentPlanCustomFieldsWithHttpInfo (ReplenishmentPlan body);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create a replenishmentPlan
        /// </summary>
        /// <remarks>
        /// Inserts a new replenishmentPlan using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">ReplenishmentPlan to be inserted.</param>
        /// <returns>Task of ReplenishmentPlan</returns>
        System.Threading.Tasks.Task<ReplenishmentPlan> AddReplenishmentPlanAsync (ReplenishmentPlan body);

        /// <summary>
        /// Create a replenishmentPlan
        /// </summary>
        /// <remarks>
        /// Inserts a new replenishmentPlan using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">ReplenishmentPlan to be inserted.</param>
        /// <returns>Task of ApiResponse (ReplenishmentPlan)</returns>
        System.Threading.Tasks.Task<ApiResponse<ReplenishmentPlan>> AddReplenishmentPlanAsyncWithHttpInfo (ReplenishmentPlan body);
        /// <summary>
        /// Add new audit for a replenishmentPlan
        /// </summary>
        /// <remarks>
        /// Adds an audit to an existing replenishmentPlan.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replenishmentPlanId">Id of the replenishmentPlan to add an audit to</param>
        /// <param name="replenishmentPlanAudit">The audit to add</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddReplenishmentPlanAuditAsync (int? replenishmentPlanId, string replenishmentPlanAudit);

        /// <summary>
        /// Add new audit for a replenishmentPlan
        /// </summary>
        /// <remarks>
        /// Adds an audit to an existing replenishmentPlan.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replenishmentPlanId">Id of the replenishmentPlan to add an audit to</param>
        /// <param name="replenishmentPlanAudit">The audit to add</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddReplenishmentPlanAuditAsyncWithHttpInfo (int? replenishmentPlanId, string replenishmentPlanAudit);
        /// <summary>
        /// Attach a file to a replenishmentPlan
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing replenishmentPlan.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replenishmentPlanId">Id of the replenishmentPlan to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddReplenishmentPlanFileAsync (int? replenishmentPlanId, string fileName);

        /// <summary>
        /// Attach a file to a replenishmentPlan
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing replenishmentPlan.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replenishmentPlanId">Id of the replenishmentPlan to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddReplenishmentPlanFileAsyncWithHttpInfo (int? replenishmentPlanId, string fileName);
        /// <summary>
        /// Attach a file to a replenishmentPlan by URL.
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing replenishmentPlan by URL.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="replenishmentPlanId">Id of the replenishmentPlan to add an file to</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddReplenishmentPlanFileByURLAsync (RecordFile body, int? replenishmentPlanId);

        /// <summary>
        /// Attach a file to a replenishmentPlan by URL.
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing replenishmentPlan by URL.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="replenishmentPlanId">Id of the replenishmentPlan to add an file to</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddReplenishmentPlanFileByURLAsyncWithHttpInfo (RecordFile body, int? replenishmentPlanId);
        /// <summary>
        /// Add new tags for a replenishmentPlan.
        /// </summary>
        /// <remarks>
        /// Adds a tag to an existing replenishmentPlan.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replenishmentPlanId">Id of the replenishmentPlan to add a tag to</param>
        /// <param name="replenishmentPlanTag">The tag to add</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddReplenishmentPlanTagAsync (int? replenishmentPlanId, string replenishmentPlanTag);

        /// <summary>
        /// Add new tags for a replenishmentPlan.
        /// </summary>
        /// <remarks>
        /// Adds a tag to an existing replenishmentPlan.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replenishmentPlanId">Id of the replenishmentPlan to add a tag to</param>
        /// <param name="replenishmentPlanTag">The tag to add</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddReplenishmentPlanTagAsyncWithHttpInfo (int? replenishmentPlanId, string replenishmentPlanTag);
        /// <summary>
        /// Delete a replenishmentPlan
        /// </summary>
        /// <remarks>
        /// Deletes the replenishmentPlan identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replenishmentPlanId">Id of the replenishmentPlan to be deleted.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteReplenishmentPlanAsync (int? replenishmentPlanId);

        /// <summary>
        /// Delete a replenishmentPlan
        /// </summary>
        /// <remarks>
        /// Deletes the replenishmentPlan identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replenishmentPlanId">Id of the replenishmentPlan to be deleted.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteReplenishmentPlanAsyncWithHttpInfo (int? replenishmentPlanId);
        /// <summary>
        /// Delete a file for a replenishmentPlan.
        /// </summary>
        /// <remarks>
        /// Deletes an existing replenishmentPlan file using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replenishmentPlanId">Id of the replenishmentPlan to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteReplenishmentPlanFileAsync (int? replenishmentPlanId, int? fileId);

        /// <summary>
        /// Delete a file for a replenishmentPlan.
        /// </summary>
        /// <remarks>
        /// Deletes an existing replenishmentPlan file using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replenishmentPlanId">Id of the replenishmentPlan to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteReplenishmentPlanFileAsyncWithHttpInfo (int? replenishmentPlanId, int? fileId);
        /// <summary>
        /// Delete a tag for a replenishmentPlan.
        /// </summary>
        /// <remarks>
        /// Deletes an existing replenishmentPlan tag using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replenishmentPlanId">Id of the replenishmentPlan to remove tag from</param>
        /// <param name="replenishmentPlanTag">The tag to delete</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteReplenishmentPlanTagAsync (int? replenishmentPlanId, string replenishmentPlanTag);

        /// <summary>
        /// Delete a tag for a replenishmentPlan.
        /// </summary>
        /// <remarks>
        /// Deletes an existing replenishmentPlan tag using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replenishmentPlanId">Id of the replenishmentPlan to remove tag from</param>
        /// <param name="replenishmentPlanTag">The tag to delete</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteReplenishmentPlanTagAsyncWithHttpInfo (int? replenishmentPlanId, string replenishmentPlanTag);
        /// <summary>
        /// Get a duplicated a replenishmentPlan by id
        /// </summary>
        /// <remarks>
        /// Returns a duplicated replenishmentPlan identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replenishmentPlanId">Id of the replenishmentPlan to be duplicated.</param>
        /// <returns>Task of ReplenishmentPlan</returns>
        System.Threading.Tasks.Task<ReplenishmentPlan> GetDuplicateReplenishmentPlanByIdAsync (int? replenishmentPlanId);

        /// <summary>
        /// Get a duplicated a replenishmentPlan by id
        /// </summary>
        /// <remarks>
        /// Returns a duplicated replenishmentPlan identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replenishmentPlanId">Id of the replenishmentPlan to be duplicated.</param>
        /// <returns>Task of ApiResponse (ReplenishmentPlan)</returns>
        System.Threading.Tasks.Task<ApiResponse<ReplenishmentPlan>> GetDuplicateReplenishmentPlanByIdAsyncWithHttpInfo (int? replenishmentPlanId);
        /// <summary>
        /// Search replenishmentPlans by filter
        /// </summary>
        /// <remarks>
        /// Returns the list of replenishmentPlans that match the given filter.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>Task of List&lt;ReplenishmentPlan&gt;</returns>
        System.Threading.Tasks.Task<List<ReplenishmentPlan>> GetReplenishmentPlanByFilterAsync (string filter = null, int? page = null, int? limit = null, string sort = null);

        /// <summary>
        /// Search replenishmentPlans by filter
        /// </summary>
        /// <remarks>
        /// Returns the list of replenishmentPlans that match the given filter.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ReplenishmentPlan&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ReplenishmentPlan>>> GetReplenishmentPlanByFilterAsyncWithHttpInfo (string filter = null, int? page = null, int? limit = null, string sort = null);
        /// <summary>
        /// Get a replenishmentPlan by id
        /// </summary>
        /// <remarks>
        /// Returns the replenishmentPlan identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replenishmentPlanId">Id of the replenishmentPlan to be returned.</param>
        /// <returns>Task of ReplenishmentPlan</returns>
        System.Threading.Tasks.Task<ReplenishmentPlan> GetReplenishmentPlanByIdAsync (int? replenishmentPlanId);

        /// <summary>
        /// Get a replenishmentPlan by id
        /// </summary>
        /// <remarks>
        /// Returns the replenishmentPlan identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replenishmentPlanId">Id of the replenishmentPlan to be returned.</param>
        /// <returns>Task of ApiResponse (ReplenishmentPlan)</returns>
        System.Threading.Tasks.Task<ApiResponse<ReplenishmentPlan>> GetReplenishmentPlanByIdAsyncWithHttpInfo (int? replenishmentPlanId);
        /// <summary>
        /// Get the files for a replenishmentPlan.
        /// </summary>
        /// <remarks>
        /// Get all existing replenishmentPlan files.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replenishmentPlanId">Id of the replenishmentPlan to get files for</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetReplenishmentPlanFilesAsync (int? replenishmentPlanId);

        /// <summary>
        /// Get the files for a replenishmentPlan.
        /// </summary>
        /// <remarks>
        /// Get all existing replenishmentPlan files.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replenishmentPlanId">Id of the replenishmentPlan to get files for</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetReplenishmentPlanFilesAsyncWithHttpInfo (int? replenishmentPlanId);
        /// <summary>
        /// Get the tags for a replenishmentPlan.
        /// </summary>
        /// <remarks>
        /// Get all existing replenishmentPlan tags.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replenishmentPlanId">Id of the replenishmentPlan to get tags for</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetReplenishmentPlanTagsAsync (int? replenishmentPlanId);

        /// <summary>
        /// Get the tags for a replenishmentPlan.
        /// </summary>
        /// <remarks>
        /// Get all existing replenishmentPlan tags.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replenishmentPlanId">Id of the replenishmentPlan to get tags for</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetReplenishmentPlanTagsAsyncWithHttpInfo (int? replenishmentPlanId);
        /// <summary>
        /// Update a replenishmentPlan
        /// </summary>
        /// <remarks>
        /// Updates an existing replenishmentPlan using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">ReplenishmentPlan to be updated.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateReplenishmentPlanAsync (ReplenishmentPlan body);

        /// <summary>
        /// Update a replenishmentPlan
        /// </summary>
        /// <remarks>
        /// Updates an existing replenishmentPlan using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">ReplenishmentPlan to be updated.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateReplenishmentPlanAsyncWithHttpInfo (ReplenishmentPlan body);
        /// <summary>
        /// Update a replenishmentPlan custom fields
        /// </summary>
        /// <remarks>
        /// Updates an existing replenishmentPlan custom fields using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">ReplenishmentPlan to be updated.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateReplenishmentPlanCustomFieldsAsync (ReplenishmentPlan body);

        /// <summary>
        /// Update a replenishmentPlan custom fields
        /// </summary>
        /// <remarks>
        /// Updates an existing replenishmentPlan custom fields using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">ReplenishmentPlan to be updated.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateReplenishmentPlanCustomFieldsAsyncWithHttpInfo (ReplenishmentPlan body);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ReplenishmentPlanApi : IReplenishmentPlanApi
    {
        private Infoplus.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ReplenishmentPlanApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ReplenishmentPlanApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = Infoplus.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ReplenishmentPlanApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ReplenishmentPlanApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Infoplus.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Infoplus.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create a replenishmentPlan Inserts a new replenishmentPlan using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">ReplenishmentPlan to be inserted.</param>
        /// <returns>ReplenishmentPlan</returns>
        public ReplenishmentPlan AddReplenishmentPlan (ReplenishmentPlan body)
        {
             ApiResponse<ReplenishmentPlan> localVarResponse = AddReplenishmentPlanWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a replenishmentPlan Inserts a new replenishmentPlan using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">ReplenishmentPlan to be inserted.</param>
        /// <returns>ApiResponse of ReplenishmentPlan</returns>
        public ApiResponse< ReplenishmentPlan > AddReplenishmentPlanWithHttpInfo (ReplenishmentPlan body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ReplenishmentPlanApi->AddReplenishmentPlan");

            var localVarPath = "/beta/replenishmentPlan";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddReplenishmentPlan", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ReplenishmentPlan>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ReplenishmentPlan) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ReplenishmentPlan)));
        }

        /// <summary>
        /// Create a replenishmentPlan Inserts a new replenishmentPlan using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">ReplenishmentPlan to be inserted.</param>
        /// <returns>Task of ReplenishmentPlan</returns>
        public async System.Threading.Tasks.Task<ReplenishmentPlan> AddReplenishmentPlanAsync (ReplenishmentPlan body)
        {
             ApiResponse<ReplenishmentPlan> localVarResponse = await AddReplenishmentPlanAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a replenishmentPlan Inserts a new replenishmentPlan using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">ReplenishmentPlan to be inserted.</param>
        /// <returns>Task of ApiResponse (ReplenishmentPlan)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ReplenishmentPlan>> AddReplenishmentPlanAsyncWithHttpInfo (ReplenishmentPlan body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ReplenishmentPlanApi->AddReplenishmentPlan");

            var localVarPath = "/beta/replenishmentPlan";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddReplenishmentPlan", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ReplenishmentPlan>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ReplenishmentPlan) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ReplenishmentPlan)));
        }

        /// <summary>
        /// Add new audit for a replenishmentPlan Adds an audit to an existing replenishmentPlan.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replenishmentPlanId">Id of the replenishmentPlan to add an audit to</param>
        /// <param name="replenishmentPlanAudit">The audit to add</param>
        /// <returns></returns>
        public void AddReplenishmentPlanAudit (int? replenishmentPlanId, string replenishmentPlanAudit)
        {
             AddReplenishmentPlanAuditWithHttpInfo(replenishmentPlanId, replenishmentPlanAudit);
        }

        /// <summary>
        /// Add new audit for a replenishmentPlan Adds an audit to an existing replenishmentPlan.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replenishmentPlanId">Id of the replenishmentPlan to add an audit to</param>
        /// <param name="replenishmentPlanAudit">The audit to add</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AddReplenishmentPlanAuditWithHttpInfo (int? replenishmentPlanId, string replenishmentPlanAudit)
        {
            // verify the required parameter 'replenishmentPlanId' is set
            if (replenishmentPlanId == null)
                throw new ApiException(400, "Missing required parameter 'replenishmentPlanId' when calling ReplenishmentPlanApi->AddReplenishmentPlanAudit");
            // verify the required parameter 'replenishmentPlanAudit' is set
            if (replenishmentPlanAudit == null)
                throw new ApiException(400, "Missing required parameter 'replenishmentPlanAudit' when calling ReplenishmentPlanApi->AddReplenishmentPlanAudit");

            var localVarPath = "/beta/replenishmentPlan/{replenishmentPlanId}/audit/{replenishmentPlanAudit}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (replenishmentPlanId != null) localVarPathParams.Add("replenishmentPlanId", Configuration.ApiClient.ParameterToString(replenishmentPlanId)); // path parameter
            if (replenishmentPlanAudit != null) localVarPathParams.Add("replenishmentPlanAudit", Configuration.ApiClient.ParameterToString(replenishmentPlanAudit)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddReplenishmentPlanAudit", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Add new audit for a replenishmentPlan Adds an audit to an existing replenishmentPlan.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replenishmentPlanId">Id of the replenishmentPlan to add an audit to</param>
        /// <param name="replenishmentPlanAudit">The audit to add</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddReplenishmentPlanAuditAsync (int? replenishmentPlanId, string replenishmentPlanAudit)
        {
             await AddReplenishmentPlanAuditAsyncWithHttpInfo(replenishmentPlanId, replenishmentPlanAudit);

        }

        /// <summary>
        /// Add new audit for a replenishmentPlan Adds an audit to an existing replenishmentPlan.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replenishmentPlanId">Id of the replenishmentPlan to add an audit to</param>
        /// <param name="replenishmentPlanAudit">The audit to add</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddReplenishmentPlanAuditAsyncWithHttpInfo (int? replenishmentPlanId, string replenishmentPlanAudit)
        {
            // verify the required parameter 'replenishmentPlanId' is set
            if (replenishmentPlanId == null)
                throw new ApiException(400, "Missing required parameter 'replenishmentPlanId' when calling ReplenishmentPlanApi->AddReplenishmentPlanAudit");
            // verify the required parameter 'replenishmentPlanAudit' is set
            if (replenishmentPlanAudit == null)
                throw new ApiException(400, "Missing required parameter 'replenishmentPlanAudit' when calling ReplenishmentPlanApi->AddReplenishmentPlanAudit");

            var localVarPath = "/beta/replenishmentPlan/{replenishmentPlanId}/audit/{replenishmentPlanAudit}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (replenishmentPlanId != null) localVarPathParams.Add("replenishmentPlanId", Configuration.ApiClient.ParameterToString(replenishmentPlanId)); // path parameter
            if (replenishmentPlanAudit != null) localVarPathParams.Add("replenishmentPlanAudit", Configuration.ApiClient.ParameterToString(replenishmentPlanAudit)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddReplenishmentPlanAudit", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Attach a file to a replenishmentPlan Adds a file to an existing replenishmentPlan.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replenishmentPlanId">Id of the replenishmentPlan to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns></returns>
        public void AddReplenishmentPlanFile (int? replenishmentPlanId, string fileName)
        {
             AddReplenishmentPlanFileWithHttpInfo(replenishmentPlanId, fileName);
        }

        /// <summary>
        /// Attach a file to a replenishmentPlan Adds a file to an existing replenishmentPlan.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replenishmentPlanId">Id of the replenishmentPlan to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AddReplenishmentPlanFileWithHttpInfo (int? replenishmentPlanId, string fileName)
        {
            // verify the required parameter 'replenishmentPlanId' is set
            if (replenishmentPlanId == null)
                throw new ApiException(400, "Missing required parameter 'replenishmentPlanId' when calling ReplenishmentPlanApi->AddReplenishmentPlanFile");
            // verify the required parameter 'fileName' is set
            if (fileName == null)
                throw new ApiException(400, "Missing required parameter 'fileName' when calling ReplenishmentPlanApi->AddReplenishmentPlanFile");

            var localVarPath = "/beta/replenishmentPlan/{replenishmentPlanId}/file/{fileName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (replenishmentPlanId != null) localVarPathParams.Add("replenishmentPlanId", Configuration.ApiClient.ParameterToString(replenishmentPlanId)); // path parameter
            if (fileName != null) localVarPathParams.Add("fileName", Configuration.ApiClient.ParameterToString(fileName)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddReplenishmentPlanFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Attach a file to a replenishmentPlan Adds a file to an existing replenishmentPlan.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replenishmentPlanId">Id of the replenishmentPlan to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddReplenishmentPlanFileAsync (int? replenishmentPlanId, string fileName)
        {
             await AddReplenishmentPlanFileAsyncWithHttpInfo(replenishmentPlanId, fileName);

        }

        /// <summary>
        /// Attach a file to a replenishmentPlan Adds a file to an existing replenishmentPlan.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replenishmentPlanId">Id of the replenishmentPlan to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddReplenishmentPlanFileAsyncWithHttpInfo (int? replenishmentPlanId, string fileName)
        {
            // verify the required parameter 'replenishmentPlanId' is set
            if (replenishmentPlanId == null)
                throw new ApiException(400, "Missing required parameter 'replenishmentPlanId' when calling ReplenishmentPlanApi->AddReplenishmentPlanFile");
            // verify the required parameter 'fileName' is set
            if (fileName == null)
                throw new ApiException(400, "Missing required parameter 'fileName' when calling ReplenishmentPlanApi->AddReplenishmentPlanFile");

            var localVarPath = "/beta/replenishmentPlan/{replenishmentPlanId}/file/{fileName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (replenishmentPlanId != null) localVarPathParams.Add("replenishmentPlanId", Configuration.ApiClient.ParameterToString(replenishmentPlanId)); // path parameter
            if (fileName != null) localVarPathParams.Add("fileName", Configuration.ApiClient.ParameterToString(fileName)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddReplenishmentPlanFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Attach a file to a replenishmentPlan by URL. Adds a file to an existing replenishmentPlan by URL.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="replenishmentPlanId">Id of the replenishmentPlan to add an file to</param>
        /// <returns></returns>
        public void AddReplenishmentPlanFileByURL (RecordFile body, int? replenishmentPlanId)
        {
             AddReplenishmentPlanFileByURLWithHttpInfo(body, replenishmentPlanId);
        }

        /// <summary>
        /// Attach a file to a replenishmentPlan by URL. Adds a file to an existing replenishmentPlan by URL.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="replenishmentPlanId">Id of the replenishmentPlan to add an file to</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AddReplenishmentPlanFileByURLWithHttpInfo (RecordFile body, int? replenishmentPlanId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ReplenishmentPlanApi->AddReplenishmentPlanFileByURL");
            // verify the required parameter 'replenishmentPlanId' is set
            if (replenishmentPlanId == null)
                throw new ApiException(400, "Missing required parameter 'replenishmentPlanId' when calling ReplenishmentPlanApi->AddReplenishmentPlanFileByURL");

            var localVarPath = "/beta/replenishmentPlan/{replenishmentPlanId}/file";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (replenishmentPlanId != null) localVarPathParams.Add("replenishmentPlanId", Configuration.ApiClient.ParameterToString(replenishmentPlanId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddReplenishmentPlanFileByURL", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Attach a file to a replenishmentPlan by URL. Adds a file to an existing replenishmentPlan by URL.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="replenishmentPlanId">Id of the replenishmentPlan to add an file to</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddReplenishmentPlanFileByURLAsync (RecordFile body, int? replenishmentPlanId)
        {
             await AddReplenishmentPlanFileByURLAsyncWithHttpInfo(body, replenishmentPlanId);

        }

        /// <summary>
        /// Attach a file to a replenishmentPlan by URL. Adds a file to an existing replenishmentPlan by URL.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="replenishmentPlanId">Id of the replenishmentPlan to add an file to</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddReplenishmentPlanFileByURLAsyncWithHttpInfo (RecordFile body, int? replenishmentPlanId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ReplenishmentPlanApi->AddReplenishmentPlanFileByURL");
            // verify the required parameter 'replenishmentPlanId' is set
            if (replenishmentPlanId == null)
                throw new ApiException(400, "Missing required parameter 'replenishmentPlanId' when calling ReplenishmentPlanApi->AddReplenishmentPlanFileByURL");

            var localVarPath = "/beta/replenishmentPlan/{replenishmentPlanId}/file";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (replenishmentPlanId != null) localVarPathParams.Add("replenishmentPlanId", Configuration.ApiClient.ParameterToString(replenishmentPlanId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddReplenishmentPlanFileByURL", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Add new tags for a replenishmentPlan. Adds a tag to an existing replenishmentPlan.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replenishmentPlanId">Id of the replenishmentPlan to add a tag to</param>
        /// <param name="replenishmentPlanTag">The tag to add</param>
        /// <returns></returns>
        public void AddReplenishmentPlanTag (int? replenishmentPlanId, string replenishmentPlanTag)
        {
             AddReplenishmentPlanTagWithHttpInfo(replenishmentPlanId, replenishmentPlanTag);
        }

        /// <summary>
        /// Add new tags for a replenishmentPlan. Adds a tag to an existing replenishmentPlan.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replenishmentPlanId">Id of the replenishmentPlan to add a tag to</param>
        /// <param name="replenishmentPlanTag">The tag to add</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AddReplenishmentPlanTagWithHttpInfo (int? replenishmentPlanId, string replenishmentPlanTag)
        {
            // verify the required parameter 'replenishmentPlanId' is set
            if (replenishmentPlanId == null)
                throw new ApiException(400, "Missing required parameter 'replenishmentPlanId' when calling ReplenishmentPlanApi->AddReplenishmentPlanTag");
            // verify the required parameter 'replenishmentPlanTag' is set
            if (replenishmentPlanTag == null)
                throw new ApiException(400, "Missing required parameter 'replenishmentPlanTag' when calling ReplenishmentPlanApi->AddReplenishmentPlanTag");

            var localVarPath = "/beta/replenishmentPlan/{replenishmentPlanId}/tag/{replenishmentPlanTag}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (replenishmentPlanId != null) localVarPathParams.Add("replenishmentPlanId", Configuration.ApiClient.ParameterToString(replenishmentPlanId)); // path parameter
            if (replenishmentPlanTag != null) localVarPathParams.Add("replenishmentPlanTag", Configuration.ApiClient.ParameterToString(replenishmentPlanTag)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddReplenishmentPlanTag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Add new tags for a replenishmentPlan. Adds a tag to an existing replenishmentPlan.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replenishmentPlanId">Id of the replenishmentPlan to add a tag to</param>
        /// <param name="replenishmentPlanTag">The tag to add</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddReplenishmentPlanTagAsync (int? replenishmentPlanId, string replenishmentPlanTag)
        {
             await AddReplenishmentPlanTagAsyncWithHttpInfo(replenishmentPlanId, replenishmentPlanTag);

        }

        /// <summary>
        /// Add new tags for a replenishmentPlan. Adds a tag to an existing replenishmentPlan.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replenishmentPlanId">Id of the replenishmentPlan to add a tag to</param>
        /// <param name="replenishmentPlanTag">The tag to add</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddReplenishmentPlanTagAsyncWithHttpInfo (int? replenishmentPlanId, string replenishmentPlanTag)
        {
            // verify the required parameter 'replenishmentPlanId' is set
            if (replenishmentPlanId == null)
                throw new ApiException(400, "Missing required parameter 'replenishmentPlanId' when calling ReplenishmentPlanApi->AddReplenishmentPlanTag");
            // verify the required parameter 'replenishmentPlanTag' is set
            if (replenishmentPlanTag == null)
                throw new ApiException(400, "Missing required parameter 'replenishmentPlanTag' when calling ReplenishmentPlanApi->AddReplenishmentPlanTag");

            var localVarPath = "/beta/replenishmentPlan/{replenishmentPlanId}/tag/{replenishmentPlanTag}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (replenishmentPlanId != null) localVarPathParams.Add("replenishmentPlanId", Configuration.ApiClient.ParameterToString(replenishmentPlanId)); // path parameter
            if (replenishmentPlanTag != null) localVarPathParams.Add("replenishmentPlanTag", Configuration.ApiClient.ParameterToString(replenishmentPlanTag)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddReplenishmentPlanTag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a replenishmentPlan Deletes the replenishmentPlan identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replenishmentPlanId">Id of the replenishmentPlan to be deleted.</param>
        /// <returns></returns>
        public void DeleteReplenishmentPlan (int? replenishmentPlanId)
        {
             DeleteReplenishmentPlanWithHttpInfo(replenishmentPlanId);
        }

        /// <summary>
        /// Delete a replenishmentPlan Deletes the replenishmentPlan identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replenishmentPlanId">Id of the replenishmentPlan to be deleted.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteReplenishmentPlanWithHttpInfo (int? replenishmentPlanId)
        {
            // verify the required parameter 'replenishmentPlanId' is set
            if (replenishmentPlanId == null)
                throw new ApiException(400, "Missing required parameter 'replenishmentPlanId' when calling ReplenishmentPlanApi->DeleteReplenishmentPlan");

            var localVarPath = "/beta/replenishmentPlan/{replenishmentPlanId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (replenishmentPlanId != null) localVarPathParams.Add("replenishmentPlanId", Configuration.ApiClient.ParameterToString(replenishmentPlanId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteReplenishmentPlan", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a replenishmentPlan Deletes the replenishmentPlan identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replenishmentPlanId">Id of the replenishmentPlan to be deleted.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteReplenishmentPlanAsync (int? replenishmentPlanId)
        {
             await DeleteReplenishmentPlanAsyncWithHttpInfo(replenishmentPlanId);

        }

        /// <summary>
        /// Delete a replenishmentPlan Deletes the replenishmentPlan identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replenishmentPlanId">Id of the replenishmentPlan to be deleted.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteReplenishmentPlanAsyncWithHttpInfo (int? replenishmentPlanId)
        {
            // verify the required parameter 'replenishmentPlanId' is set
            if (replenishmentPlanId == null)
                throw new ApiException(400, "Missing required parameter 'replenishmentPlanId' when calling ReplenishmentPlanApi->DeleteReplenishmentPlan");

            var localVarPath = "/beta/replenishmentPlan/{replenishmentPlanId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (replenishmentPlanId != null) localVarPathParams.Add("replenishmentPlanId", Configuration.ApiClient.ParameterToString(replenishmentPlanId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteReplenishmentPlan", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a file for a replenishmentPlan. Deletes an existing replenishmentPlan file using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replenishmentPlanId">Id of the replenishmentPlan to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns></returns>
        public void DeleteReplenishmentPlanFile (int? replenishmentPlanId, int? fileId)
        {
             DeleteReplenishmentPlanFileWithHttpInfo(replenishmentPlanId, fileId);
        }

        /// <summary>
        /// Delete a file for a replenishmentPlan. Deletes an existing replenishmentPlan file using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replenishmentPlanId">Id of the replenishmentPlan to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteReplenishmentPlanFileWithHttpInfo (int? replenishmentPlanId, int? fileId)
        {
            // verify the required parameter 'replenishmentPlanId' is set
            if (replenishmentPlanId == null)
                throw new ApiException(400, "Missing required parameter 'replenishmentPlanId' when calling ReplenishmentPlanApi->DeleteReplenishmentPlanFile");
            // verify the required parameter 'fileId' is set
            if (fileId == null)
                throw new ApiException(400, "Missing required parameter 'fileId' when calling ReplenishmentPlanApi->DeleteReplenishmentPlanFile");

            var localVarPath = "/beta/replenishmentPlan/{replenishmentPlanId}/file/{fileId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (replenishmentPlanId != null) localVarPathParams.Add("replenishmentPlanId", Configuration.ApiClient.ParameterToString(replenishmentPlanId)); // path parameter
            if (fileId != null) localVarPathParams.Add("fileId", Configuration.ApiClient.ParameterToString(fileId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteReplenishmentPlanFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a file for a replenishmentPlan. Deletes an existing replenishmentPlan file using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replenishmentPlanId">Id of the replenishmentPlan to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteReplenishmentPlanFileAsync (int? replenishmentPlanId, int? fileId)
        {
             await DeleteReplenishmentPlanFileAsyncWithHttpInfo(replenishmentPlanId, fileId);

        }

        /// <summary>
        /// Delete a file for a replenishmentPlan. Deletes an existing replenishmentPlan file using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replenishmentPlanId">Id of the replenishmentPlan to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteReplenishmentPlanFileAsyncWithHttpInfo (int? replenishmentPlanId, int? fileId)
        {
            // verify the required parameter 'replenishmentPlanId' is set
            if (replenishmentPlanId == null)
                throw new ApiException(400, "Missing required parameter 'replenishmentPlanId' when calling ReplenishmentPlanApi->DeleteReplenishmentPlanFile");
            // verify the required parameter 'fileId' is set
            if (fileId == null)
                throw new ApiException(400, "Missing required parameter 'fileId' when calling ReplenishmentPlanApi->DeleteReplenishmentPlanFile");

            var localVarPath = "/beta/replenishmentPlan/{replenishmentPlanId}/file/{fileId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (replenishmentPlanId != null) localVarPathParams.Add("replenishmentPlanId", Configuration.ApiClient.ParameterToString(replenishmentPlanId)); // path parameter
            if (fileId != null) localVarPathParams.Add("fileId", Configuration.ApiClient.ParameterToString(fileId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteReplenishmentPlanFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a tag for a replenishmentPlan. Deletes an existing replenishmentPlan tag using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replenishmentPlanId">Id of the replenishmentPlan to remove tag from</param>
        /// <param name="replenishmentPlanTag">The tag to delete</param>
        /// <returns></returns>
        public void DeleteReplenishmentPlanTag (int? replenishmentPlanId, string replenishmentPlanTag)
        {
             DeleteReplenishmentPlanTagWithHttpInfo(replenishmentPlanId, replenishmentPlanTag);
        }

        /// <summary>
        /// Delete a tag for a replenishmentPlan. Deletes an existing replenishmentPlan tag using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replenishmentPlanId">Id of the replenishmentPlan to remove tag from</param>
        /// <param name="replenishmentPlanTag">The tag to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteReplenishmentPlanTagWithHttpInfo (int? replenishmentPlanId, string replenishmentPlanTag)
        {
            // verify the required parameter 'replenishmentPlanId' is set
            if (replenishmentPlanId == null)
                throw new ApiException(400, "Missing required parameter 'replenishmentPlanId' when calling ReplenishmentPlanApi->DeleteReplenishmentPlanTag");
            // verify the required parameter 'replenishmentPlanTag' is set
            if (replenishmentPlanTag == null)
                throw new ApiException(400, "Missing required parameter 'replenishmentPlanTag' when calling ReplenishmentPlanApi->DeleteReplenishmentPlanTag");

            var localVarPath = "/beta/replenishmentPlan/{replenishmentPlanId}/tag/{replenishmentPlanTag}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (replenishmentPlanId != null) localVarPathParams.Add("replenishmentPlanId", Configuration.ApiClient.ParameterToString(replenishmentPlanId)); // path parameter
            if (replenishmentPlanTag != null) localVarPathParams.Add("replenishmentPlanTag", Configuration.ApiClient.ParameterToString(replenishmentPlanTag)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteReplenishmentPlanTag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a tag for a replenishmentPlan. Deletes an existing replenishmentPlan tag using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replenishmentPlanId">Id of the replenishmentPlan to remove tag from</param>
        /// <param name="replenishmentPlanTag">The tag to delete</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteReplenishmentPlanTagAsync (int? replenishmentPlanId, string replenishmentPlanTag)
        {
             await DeleteReplenishmentPlanTagAsyncWithHttpInfo(replenishmentPlanId, replenishmentPlanTag);

        }

        /// <summary>
        /// Delete a tag for a replenishmentPlan. Deletes an existing replenishmentPlan tag using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replenishmentPlanId">Id of the replenishmentPlan to remove tag from</param>
        /// <param name="replenishmentPlanTag">The tag to delete</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteReplenishmentPlanTagAsyncWithHttpInfo (int? replenishmentPlanId, string replenishmentPlanTag)
        {
            // verify the required parameter 'replenishmentPlanId' is set
            if (replenishmentPlanId == null)
                throw new ApiException(400, "Missing required parameter 'replenishmentPlanId' when calling ReplenishmentPlanApi->DeleteReplenishmentPlanTag");
            // verify the required parameter 'replenishmentPlanTag' is set
            if (replenishmentPlanTag == null)
                throw new ApiException(400, "Missing required parameter 'replenishmentPlanTag' when calling ReplenishmentPlanApi->DeleteReplenishmentPlanTag");

            var localVarPath = "/beta/replenishmentPlan/{replenishmentPlanId}/tag/{replenishmentPlanTag}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (replenishmentPlanId != null) localVarPathParams.Add("replenishmentPlanId", Configuration.ApiClient.ParameterToString(replenishmentPlanId)); // path parameter
            if (replenishmentPlanTag != null) localVarPathParams.Add("replenishmentPlanTag", Configuration.ApiClient.ParameterToString(replenishmentPlanTag)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteReplenishmentPlanTag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get a duplicated a replenishmentPlan by id Returns a duplicated replenishmentPlan identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replenishmentPlanId">Id of the replenishmentPlan to be duplicated.</param>
        /// <returns>ReplenishmentPlan</returns>
        public ReplenishmentPlan GetDuplicateReplenishmentPlanById (int? replenishmentPlanId)
        {
             ApiResponse<ReplenishmentPlan> localVarResponse = GetDuplicateReplenishmentPlanByIdWithHttpInfo(replenishmentPlanId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a duplicated a replenishmentPlan by id Returns a duplicated replenishmentPlan identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replenishmentPlanId">Id of the replenishmentPlan to be duplicated.</param>
        /// <returns>ApiResponse of ReplenishmentPlan</returns>
        public ApiResponse< ReplenishmentPlan > GetDuplicateReplenishmentPlanByIdWithHttpInfo (int? replenishmentPlanId)
        {
            // verify the required parameter 'replenishmentPlanId' is set
            if (replenishmentPlanId == null)
                throw new ApiException(400, "Missing required parameter 'replenishmentPlanId' when calling ReplenishmentPlanApi->GetDuplicateReplenishmentPlanById");

            var localVarPath = "/beta/replenishmentPlan/duplicate/{replenishmentPlanId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (replenishmentPlanId != null) localVarPathParams.Add("replenishmentPlanId", Configuration.ApiClient.ParameterToString(replenishmentPlanId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDuplicateReplenishmentPlanById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ReplenishmentPlan>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ReplenishmentPlan) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ReplenishmentPlan)));
        }

        /// <summary>
        /// Get a duplicated a replenishmentPlan by id Returns a duplicated replenishmentPlan identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replenishmentPlanId">Id of the replenishmentPlan to be duplicated.</param>
        /// <returns>Task of ReplenishmentPlan</returns>
        public async System.Threading.Tasks.Task<ReplenishmentPlan> GetDuplicateReplenishmentPlanByIdAsync (int? replenishmentPlanId)
        {
             ApiResponse<ReplenishmentPlan> localVarResponse = await GetDuplicateReplenishmentPlanByIdAsyncWithHttpInfo(replenishmentPlanId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a duplicated a replenishmentPlan by id Returns a duplicated replenishmentPlan identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replenishmentPlanId">Id of the replenishmentPlan to be duplicated.</param>
        /// <returns>Task of ApiResponse (ReplenishmentPlan)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ReplenishmentPlan>> GetDuplicateReplenishmentPlanByIdAsyncWithHttpInfo (int? replenishmentPlanId)
        {
            // verify the required parameter 'replenishmentPlanId' is set
            if (replenishmentPlanId == null)
                throw new ApiException(400, "Missing required parameter 'replenishmentPlanId' when calling ReplenishmentPlanApi->GetDuplicateReplenishmentPlanById");

            var localVarPath = "/beta/replenishmentPlan/duplicate/{replenishmentPlanId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (replenishmentPlanId != null) localVarPathParams.Add("replenishmentPlanId", Configuration.ApiClient.ParameterToString(replenishmentPlanId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDuplicateReplenishmentPlanById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ReplenishmentPlan>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ReplenishmentPlan) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ReplenishmentPlan)));
        }

        /// <summary>
        /// Search replenishmentPlans by filter Returns the list of replenishmentPlans that match the given filter.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>List&lt;ReplenishmentPlan&gt;</returns>
        public List<ReplenishmentPlan> GetReplenishmentPlanByFilter (string filter = null, int? page = null, int? limit = null, string sort = null)
        {
             ApiResponse<List<ReplenishmentPlan>> localVarResponse = GetReplenishmentPlanByFilterWithHttpInfo(filter, page, limit, sort);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Search replenishmentPlans by filter Returns the list of replenishmentPlans that match the given filter.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>ApiResponse of List&lt;ReplenishmentPlan&gt;</returns>
        public ApiResponse< List<ReplenishmentPlan> > GetReplenishmentPlanByFilterWithHttpInfo (string filter = null, int? page = null, int? limit = null, string sort = null)
        {

            var localVarPath = "/beta/replenishmentPlan/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (filter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (page != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetReplenishmentPlanByFilter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ReplenishmentPlan>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ReplenishmentPlan>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ReplenishmentPlan>)));
        }

        /// <summary>
        /// Search replenishmentPlans by filter Returns the list of replenishmentPlans that match the given filter.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>Task of List&lt;ReplenishmentPlan&gt;</returns>
        public async System.Threading.Tasks.Task<List<ReplenishmentPlan>> GetReplenishmentPlanByFilterAsync (string filter = null, int? page = null, int? limit = null, string sort = null)
        {
             ApiResponse<List<ReplenishmentPlan>> localVarResponse = await GetReplenishmentPlanByFilterAsyncWithHttpInfo(filter, page, limit, sort);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Search replenishmentPlans by filter Returns the list of replenishmentPlans that match the given filter.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ReplenishmentPlan&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ReplenishmentPlan>>> GetReplenishmentPlanByFilterAsyncWithHttpInfo (string filter = null, int? page = null, int? limit = null, string sort = null)
        {

            var localVarPath = "/beta/replenishmentPlan/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (filter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (page != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetReplenishmentPlanByFilter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ReplenishmentPlan>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ReplenishmentPlan>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ReplenishmentPlan>)));
        }

        /// <summary>
        /// Get a replenishmentPlan by id Returns the replenishmentPlan identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replenishmentPlanId">Id of the replenishmentPlan to be returned.</param>
        /// <returns>ReplenishmentPlan</returns>
        public ReplenishmentPlan GetReplenishmentPlanById (int? replenishmentPlanId)
        {
             ApiResponse<ReplenishmentPlan> localVarResponse = GetReplenishmentPlanByIdWithHttpInfo(replenishmentPlanId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a replenishmentPlan by id Returns the replenishmentPlan identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replenishmentPlanId">Id of the replenishmentPlan to be returned.</param>
        /// <returns>ApiResponse of ReplenishmentPlan</returns>
        public ApiResponse< ReplenishmentPlan > GetReplenishmentPlanByIdWithHttpInfo (int? replenishmentPlanId)
        {
            // verify the required parameter 'replenishmentPlanId' is set
            if (replenishmentPlanId == null)
                throw new ApiException(400, "Missing required parameter 'replenishmentPlanId' when calling ReplenishmentPlanApi->GetReplenishmentPlanById");

            var localVarPath = "/beta/replenishmentPlan/{replenishmentPlanId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (replenishmentPlanId != null) localVarPathParams.Add("replenishmentPlanId", Configuration.ApiClient.ParameterToString(replenishmentPlanId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetReplenishmentPlanById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ReplenishmentPlan>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ReplenishmentPlan) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ReplenishmentPlan)));
        }

        /// <summary>
        /// Get a replenishmentPlan by id Returns the replenishmentPlan identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replenishmentPlanId">Id of the replenishmentPlan to be returned.</param>
        /// <returns>Task of ReplenishmentPlan</returns>
        public async System.Threading.Tasks.Task<ReplenishmentPlan> GetReplenishmentPlanByIdAsync (int? replenishmentPlanId)
        {
             ApiResponse<ReplenishmentPlan> localVarResponse = await GetReplenishmentPlanByIdAsyncWithHttpInfo(replenishmentPlanId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a replenishmentPlan by id Returns the replenishmentPlan identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replenishmentPlanId">Id of the replenishmentPlan to be returned.</param>
        /// <returns>Task of ApiResponse (ReplenishmentPlan)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ReplenishmentPlan>> GetReplenishmentPlanByIdAsyncWithHttpInfo (int? replenishmentPlanId)
        {
            // verify the required parameter 'replenishmentPlanId' is set
            if (replenishmentPlanId == null)
                throw new ApiException(400, "Missing required parameter 'replenishmentPlanId' when calling ReplenishmentPlanApi->GetReplenishmentPlanById");

            var localVarPath = "/beta/replenishmentPlan/{replenishmentPlanId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (replenishmentPlanId != null) localVarPathParams.Add("replenishmentPlanId", Configuration.ApiClient.ParameterToString(replenishmentPlanId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetReplenishmentPlanById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ReplenishmentPlan>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ReplenishmentPlan) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ReplenishmentPlan)));
        }

        /// <summary>
        /// Get the files for a replenishmentPlan. Get all existing replenishmentPlan files.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replenishmentPlanId">Id of the replenishmentPlan to get files for</param>
        /// <returns></returns>
        public void GetReplenishmentPlanFiles (int? replenishmentPlanId)
        {
             GetReplenishmentPlanFilesWithHttpInfo(replenishmentPlanId);
        }

        /// <summary>
        /// Get the files for a replenishmentPlan. Get all existing replenishmentPlan files.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replenishmentPlanId">Id of the replenishmentPlan to get files for</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GetReplenishmentPlanFilesWithHttpInfo (int? replenishmentPlanId)
        {
            // verify the required parameter 'replenishmentPlanId' is set
            if (replenishmentPlanId == null)
                throw new ApiException(400, "Missing required parameter 'replenishmentPlanId' when calling ReplenishmentPlanApi->GetReplenishmentPlanFiles");

            var localVarPath = "/beta/replenishmentPlan/{replenishmentPlanId}/file";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (replenishmentPlanId != null) localVarPathParams.Add("replenishmentPlanId", Configuration.ApiClient.ParameterToString(replenishmentPlanId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetReplenishmentPlanFiles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get the files for a replenishmentPlan. Get all existing replenishmentPlan files.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replenishmentPlanId">Id of the replenishmentPlan to get files for</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetReplenishmentPlanFilesAsync (int? replenishmentPlanId)
        {
             await GetReplenishmentPlanFilesAsyncWithHttpInfo(replenishmentPlanId);

        }

        /// <summary>
        /// Get the files for a replenishmentPlan. Get all existing replenishmentPlan files.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replenishmentPlanId">Id of the replenishmentPlan to get files for</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetReplenishmentPlanFilesAsyncWithHttpInfo (int? replenishmentPlanId)
        {
            // verify the required parameter 'replenishmentPlanId' is set
            if (replenishmentPlanId == null)
                throw new ApiException(400, "Missing required parameter 'replenishmentPlanId' when calling ReplenishmentPlanApi->GetReplenishmentPlanFiles");

            var localVarPath = "/beta/replenishmentPlan/{replenishmentPlanId}/file";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (replenishmentPlanId != null) localVarPathParams.Add("replenishmentPlanId", Configuration.ApiClient.ParameterToString(replenishmentPlanId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetReplenishmentPlanFiles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get the tags for a replenishmentPlan. Get all existing replenishmentPlan tags.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replenishmentPlanId">Id of the replenishmentPlan to get tags for</param>
        /// <returns></returns>
        public void GetReplenishmentPlanTags (int? replenishmentPlanId)
        {
             GetReplenishmentPlanTagsWithHttpInfo(replenishmentPlanId);
        }

        /// <summary>
        /// Get the tags for a replenishmentPlan. Get all existing replenishmentPlan tags.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replenishmentPlanId">Id of the replenishmentPlan to get tags for</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GetReplenishmentPlanTagsWithHttpInfo (int? replenishmentPlanId)
        {
            // verify the required parameter 'replenishmentPlanId' is set
            if (replenishmentPlanId == null)
                throw new ApiException(400, "Missing required parameter 'replenishmentPlanId' when calling ReplenishmentPlanApi->GetReplenishmentPlanTags");

            var localVarPath = "/beta/replenishmentPlan/{replenishmentPlanId}/tag";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (replenishmentPlanId != null) localVarPathParams.Add("replenishmentPlanId", Configuration.ApiClient.ParameterToString(replenishmentPlanId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetReplenishmentPlanTags", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get the tags for a replenishmentPlan. Get all existing replenishmentPlan tags.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replenishmentPlanId">Id of the replenishmentPlan to get tags for</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetReplenishmentPlanTagsAsync (int? replenishmentPlanId)
        {
             await GetReplenishmentPlanTagsAsyncWithHttpInfo(replenishmentPlanId);

        }

        /// <summary>
        /// Get the tags for a replenishmentPlan. Get all existing replenishmentPlan tags.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replenishmentPlanId">Id of the replenishmentPlan to get tags for</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetReplenishmentPlanTagsAsyncWithHttpInfo (int? replenishmentPlanId)
        {
            // verify the required parameter 'replenishmentPlanId' is set
            if (replenishmentPlanId == null)
                throw new ApiException(400, "Missing required parameter 'replenishmentPlanId' when calling ReplenishmentPlanApi->GetReplenishmentPlanTags");

            var localVarPath = "/beta/replenishmentPlan/{replenishmentPlanId}/tag";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (replenishmentPlanId != null) localVarPathParams.Add("replenishmentPlanId", Configuration.ApiClient.ParameterToString(replenishmentPlanId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetReplenishmentPlanTags", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update a replenishmentPlan Updates an existing replenishmentPlan using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">ReplenishmentPlan to be updated.</param>
        /// <returns></returns>
        public void UpdateReplenishmentPlan (ReplenishmentPlan body)
        {
             UpdateReplenishmentPlanWithHttpInfo(body);
        }

        /// <summary>
        /// Update a replenishmentPlan Updates an existing replenishmentPlan using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">ReplenishmentPlan to be updated.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateReplenishmentPlanWithHttpInfo (ReplenishmentPlan body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ReplenishmentPlanApi->UpdateReplenishmentPlan");

            var localVarPath = "/beta/replenishmentPlan";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateReplenishmentPlan", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update a replenishmentPlan Updates an existing replenishmentPlan using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">ReplenishmentPlan to be updated.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateReplenishmentPlanAsync (ReplenishmentPlan body)
        {
             await UpdateReplenishmentPlanAsyncWithHttpInfo(body);

        }

        /// <summary>
        /// Update a replenishmentPlan Updates an existing replenishmentPlan using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">ReplenishmentPlan to be updated.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateReplenishmentPlanAsyncWithHttpInfo (ReplenishmentPlan body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ReplenishmentPlanApi->UpdateReplenishmentPlan");

            var localVarPath = "/beta/replenishmentPlan";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateReplenishmentPlan", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update a replenishmentPlan custom fields Updates an existing replenishmentPlan custom fields using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">ReplenishmentPlan to be updated.</param>
        /// <returns></returns>
        public void UpdateReplenishmentPlanCustomFields (ReplenishmentPlan body)
        {
             UpdateReplenishmentPlanCustomFieldsWithHttpInfo(body);
        }

        /// <summary>
        /// Update a replenishmentPlan custom fields Updates an existing replenishmentPlan custom fields using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">ReplenishmentPlan to be updated.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateReplenishmentPlanCustomFieldsWithHttpInfo (ReplenishmentPlan body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ReplenishmentPlanApi->UpdateReplenishmentPlanCustomFields");

            var localVarPath = "/beta/replenishmentPlan/customFields";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateReplenishmentPlanCustomFields", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update a replenishmentPlan custom fields Updates an existing replenishmentPlan custom fields using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">ReplenishmentPlan to be updated.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateReplenishmentPlanCustomFieldsAsync (ReplenishmentPlan body)
        {
             await UpdateReplenishmentPlanCustomFieldsAsyncWithHttpInfo(body);

        }

        /// <summary>
        /// Update a replenishmentPlan custom fields Updates an existing replenishmentPlan custom fields using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">ReplenishmentPlan to be updated.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateReplenishmentPlanCustomFieldsAsyncWithHttpInfo (ReplenishmentPlan body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ReplenishmentPlanApi->UpdateReplenishmentPlanCustomFields");

            var localVarPath = "/beta/replenishmentPlan/customFields";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateReplenishmentPlanCustomFields", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

    }
}
