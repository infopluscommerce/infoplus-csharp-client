/* 
 * Infoplus API
 *
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Infoplus.Client;
using Infoplus.Model;

namespace Infoplus.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IReturnShipmentApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Add new audit for a returnShipment
        /// </summary>
        /// <remarks>
        /// Adds an audit to an existing returnShipment.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="returnShipmentId">Id of the returnShipment to add an audit to</param>
        /// <param name="returnShipmentAudit">The audit to add</param>
        /// <returns></returns>
        void AddReturnShipmentAudit (int? returnShipmentId, string returnShipmentAudit);

        /// <summary>
        /// Add new audit for a returnShipment
        /// </summary>
        /// <remarks>
        /// Adds an audit to an existing returnShipment.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="returnShipmentId">Id of the returnShipment to add an audit to</param>
        /// <param name="returnShipmentAudit">The audit to add</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddReturnShipmentAuditWithHttpInfo (int? returnShipmentId, string returnShipmentAudit);
        /// <summary>
        /// Attach a file to a returnShipment
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing returnShipment.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="returnShipmentId">Id of the returnShipment to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns></returns>
        void AddReturnShipmentFile (int? returnShipmentId, string fileName);

        /// <summary>
        /// Attach a file to a returnShipment
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing returnShipment.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="returnShipmentId">Id of the returnShipment to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddReturnShipmentFileWithHttpInfo (int? returnShipmentId, string fileName);
        /// <summary>
        /// Attach a file to a returnShipment by URL.
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing returnShipment by URL.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="returnShipmentId">Id of the returnShipment to add an file to</param>
        /// <returns></returns>
        void AddReturnShipmentFileByURL (RecordFile body, int? returnShipmentId);

        /// <summary>
        /// Attach a file to a returnShipment by URL.
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing returnShipment by URL.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="returnShipmentId">Id of the returnShipment to add an file to</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddReturnShipmentFileByURLWithHttpInfo (RecordFile body, int? returnShipmentId);
        /// <summary>
        /// Add new tags for a returnShipment.
        /// </summary>
        /// <remarks>
        /// Adds a tag to an existing returnShipment.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="returnShipmentId">Id of the returnShipment to add a tag to</param>
        /// <param name="returnShipmentTag">The tag to add</param>
        /// <returns></returns>
        void AddReturnShipmentTag (int? returnShipmentId, string returnShipmentTag);

        /// <summary>
        /// Add new tags for a returnShipment.
        /// </summary>
        /// <remarks>
        /// Adds a tag to an existing returnShipment.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="returnShipmentId">Id of the returnShipment to add a tag to</param>
        /// <param name="returnShipmentTag">The tag to add</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddReturnShipmentTagWithHttpInfo (int? returnShipmentId, string returnShipmentTag);
        /// <summary>
        /// Delete a file for a returnShipment.
        /// </summary>
        /// <remarks>
        /// Deletes an existing returnShipment file using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="returnShipmentId">Id of the returnShipment to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns></returns>
        void DeleteReturnShipmentFile (int? returnShipmentId, int? fileId);

        /// <summary>
        /// Delete a file for a returnShipment.
        /// </summary>
        /// <remarks>
        /// Deletes an existing returnShipment file using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="returnShipmentId">Id of the returnShipment to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteReturnShipmentFileWithHttpInfo (int? returnShipmentId, int? fileId);
        /// <summary>
        /// Delete a tag for a returnShipment.
        /// </summary>
        /// <remarks>
        /// Deletes an existing returnShipment tag using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="returnShipmentId">Id of the returnShipment to remove tag from</param>
        /// <param name="returnShipmentTag">The tag to delete</param>
        /// <returns></returns>
        void DeleteReturnShipmentTag (int? returnShipmentId, string returnShipmentTag);

        /// <summary>
        /// Delete a tag for a returnShipment.
        /// </summary>
        /// <remarks>
        /// Deletes an existing returnShipment tag using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="returnShipmentId">Id of the returnShipment to remove tag from</param>
        /// <param name="returnShipmentTag">The tag to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteReturnShipmentTagWithHttpInfo (int? returnShipmentId, string returnShipmentTag);
        /// <summary>
        /// Get a duplicated a returnShipment by id
        /// </summary>
        /// <remarks>
        /// Returns a duplicated returnShipment identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="returnShipmentId">Id of the returnShipment to be duplicated.</param>
        /// <returns>ReturnShipment</returns>
        ReturnShipment GetDuplicateReturnShipmentById (int? returnShipmentId);

        /// <summary>
        /// Get a duplicated a returnShipment by id
        /// </summary>
        /// <remarks>
        /// Returns a duplicated returnShipment identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="returnShipmentId">Id of the returnShipment to be duplicated.</param>
        /// <returns>ApiResponse of ReturnShipment</returns>
        ApiResponse<ReturnShipment> GetDuplicateReturnShipmentByIdWithHttpInfo (int? returnShipmentId);
        /// <summary>
        /// Search returnShipments by filter
        /// </summary>
        /// <remarks>
        /// Returns the list of returnShipments that match the given filter.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>List&lt;ReturnShipment&gt;</returns>
        List<ReturnShipment> GetReturnShipmentByFilter (string filter = null, int? page = null, int? limit = null, string sort = null);

        /// <summary>
        /// Search returnShipments by filter
        /// </summary>
        /// <remarks>
        /// Returns the list of returnShipments that match the given filter.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>ApiResponse of List&lt;ReturnShipment&gt;</returns>
        ApiResponse<List<ReturnShipment>> GetReturnShipmentByFilterWithHttpInfo (string filter = null, int? page = null, int? limit = null, string sort = null);
        /// <summary>
        /// Get a returnShipment by id
        /// </summary>
        /// <remarks>
        /// Returns the returnShipment identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="returnShipmentId">Id of the returnShipment to be returned.</param>
        /// <returns>ReturnShipment</returns>
        ReturnShipment GetReturnShipmentById (int? returnShipmentId);

        /// <summary>
        /// Get a returnShipment by id
        /// </summary>
        /// <remarks>
        /// Returns the returnShipment identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="returnShipmentId">Id of the returnShipment to be returned.</param>
        /// <returns>ApiResponse of ReturnShipment</returns>
        ApiResponse<ReturnShipment> GetReturnShipmentByIdWithHttpInfo (int? returnShipmentId);
        /// <summary>
        /// Get the files for a returnShipment.
        /// </summary>
        /// <remarks>
        /// Get all existing returnShipment files.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="returnShipmentId">Id of the returnShipment to get files for</param>
        /// <returns></returns>
        void GetReturnShipmentFiles (int? returnShipmentId);

        /// <summary>
        /// Get the files for a returnShipment.
        /// </summary>
        /// <remarks>
        /// Get all existing returnShipment files.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="returnShipmentId">Id of the returnShipment to get files for</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetReturnShipmentFilesWithHttpInfo (int? returnShipmentId);
        /// <summary>
        /// Get the tags for a returnShipment.
        /// </summary>
        /// <remarks>
        /// Get all existing returnShipment tags.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="returnShipmentId">Id of the returnShipment to get tags for</param>
        /// <returns></returns>
        void GetReturnShipmentTags (int? returnShipmentId);

        /// <summary>
        /// Get the tags for a returnShipment.
        /// </summary>
        /// <remarks>
        /// Get all existing returnShipment tags.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="returnShipmentId">Id of the returnShipment to get tags for</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetReturnShipmentTagsWithHttpInfo (int? returnShipmentId);
        /// <summary>
        /// Update a returnShipment custom fields
        /// </summary>
        /// <remarks>
        /// Updates an existing returnShipment custom fields using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">ReturnShipment to be updated.</param>
        /// <returns></returns>
        void UpdateReturnShipmentCustomFields (ReturnShipment body);

        /// <summary>
        /// Update a returnShipment custom fields
        /// </summary>
        /// <remarks>
        /// Updates an existing returnShipment custom fields using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">ReturnShipment to be updated.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateReturnShipmentCustomFieldsWithHttpInfo (ReturnShipment body);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Add new audit for a returnShipment
        /// </summary>
        /// <remarks>
        /// Adds an audit to an existing returnShipment.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="returnShipmentId">Id of the returnShipment to add an audit to</param>
        /// <param name="returnShipmentAudit">The audit to add</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddReturnShipmentAuditAsync (int? returnShipmentId, string returnShipmentAudit);

        /// <summary>
        /// Add new audit for a returnShipment
        /// </summary>
        /// <remarks>
        /// Adds an audit to an existing returnShipment.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="returnShipmentId">Id of the returnShipment to add an audit to</param>
        /// <param name="returnShipmentAudit">The audit to add</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddReturnShipmentAuditAsyncWithHttpInfo (int? returnShipmentId, string returnShipmentAudit);
        /// <summary>
        /// Attach a file to a returnShipment
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing returnShipment.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="returnShipmentId">Id of the returnShipment to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddReturnShipmentFileAsync (int? returnShipmentId, string fileName);

        /// <summary>
        /// Attach a file to a returnShipment
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing returnShipment.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="returnShipmentId">Id of the returnShipment to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddReturnShipmentFileAsyncWithHttpInfo (int? returnShipmentId, string fileName);
        /// <summary>
        /// Attach a file to a returnShipment by URL.
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing returnShipment by URL.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="returnShipmentId">Id of the returnShipment to add an file to</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddReturnShipmentFileByURLAsync (RecordFile body, int? returnShipmentId);

        /// <summary>
        /// Attach a file to a returnShipment by URL.
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing returnShipment by URL.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="returnShipmentId">Id of the returnShipment to add an file to</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddReturnShipmentFileByURLAsyncWithHttpInfo (RecordFile body, int? returnShipmentId);
        /// <summary>
        /// Add new tags for a returnShipment.
        /// </summary>
        /// <remarks>
        /// Adds a tag to an existing returnShipment.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="returnShipmentId">Id of the returnShipment to add a tag to</param>
        /// <param name="returnShipmentTag">The tag to add</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddReturnShipmentTagAsync (int? returnShipmentId, string returnShipmentTag);

        /// <summary>
        /// Add new tags for a returnShipment.
        /// </summary>
        /// <remarks>
        /// Adds a tag to an existing returnShipment.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="returnShipmentId">Id of the returnShipment to add a tag to</param>
        /// <param name="returnShipmentTag">The tag to add</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddReturnShipmentTagAsyncWithHttpInfo (int? returnShipmentId, string returnShipmentTag);
        /// <summary>
        /// Delete a file for a returnShipment.
        /// </summary>
        /// <remarks>
        /// Deletes an existing returnShipment file using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="returnShipmentId">Id of the returnShipment to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteReturnShipmentFileAsync (int? returnShipmentId, int? fileId);

        /// <summary>
        /// Delete a file for a returnShipment.
        /// </summary>
        /// <remarks>
        /// Deletes an existing returnShipment file using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="returnShipmentId">Id of the returnShipment to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteReturnShipmentFileAsyncWithHttpInfo (int? returnShipmentId, int? fileId);
        /// <summary>
        /// Delete a tag for a returnShipment.
        /// </summary>
        /// <remarks>
        /// Deletes an existing returnShipment tag using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="returnShipmentId">Id of the returnShipment to remove tag from</param>
        /// <param name="returnShipmentTag">The tag to delete</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteReturnShipmentTagAsync (int? returnShipmentId, string returnShipmentTag);

        /// <summary>
        /// Delete a tag for a returnShipment.
        /// </summary>
        /// <remarks>
        /// Deletes an existing returnShipment tag using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="returnShipmentId">Id of the returnShipment to remove tag from</param>
        /// <param name="returnShipmentTag">The tag to delete</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteReturnShipmentTagAsyncWithHttpInfo (int? returnShipmentId, string returnShipmentTag);
        /// <summary>
        /// Get a duplicated a returnShipment by id
        /// </summary>
        /// <remarks>
        /// Returns a duplicated returnShipment identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="returnShipmentId">Id of the returnShipment to be duplicated.</param>
        /// <returns>Task of ReturnShipment</returns>
        System.Threading.Tasks.Task<ReturnShipment> GetDuplicateReturnShipmentByIdAsync (int? returnShipmentId);

        /// <summary>
        /// Get a duplicated a returnShipment by id
        /// </summary>
        /// <remarks>
        /// Returns a duplicated returnShipment identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="returnShipmentId">Id of the returnShipment to be duplicated.</param>
        /// <returns>Task of ApiResponse (ReturnShipment)</returns>
        System.Threading.Tasks.Task<ApiResponse<ReturnShipment>> GetDuplicateReturnShipmentByIdAsyncWithHttpInfo (int? returnShipmentId);
        /// <summary>
        /// Search returnShipments by filter
        /// </summary>
        /// <remarks>
        /// Returns the list of returnShipments that match the given filter.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>Task of List&lt;ReturnShipment&gt;</returns>
        System.Threading.Tasks.Task<List<ReturnShipment>> GetReturnShipmentByFilterAsync (string filter = null, int? page = null, int? limit = null, string sort = null);

        /// <summary>
        /// Search returnShipments by filter
        /// </summary>
        /// <remarks>
        /// Returns the list of returnShipments that match the given filter.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ReturnShipment&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ReturnShipment>>> GetReturnShipmentByFilterAsyncWithHttpInfo (string filter = null, int? page = null, int? limit = null, string sort = null);
        /// <summary>
        /// Get a returnShipment by id
        /// </summary>
        /// <remarks>
        /// Returns the returnShipment identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="returnShipmentId">Id of the returnShipment to be returned.</param>
        /// <returns>Task of ReturnShipment</returns>
        System.Threading.Tasks.Task<ReturnShipment> GetReturnShipmentByIdAsync (int? returnShipmentId);

        /// <summary>
        /// Get a returnShipment by id
        /// </summary>
        /// <remarks>
        /// Returns the returnShipment identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="returnShipmentId">Id of the returnShipment to be returned.</param>
        /// <returns>Task of ApiResponse (ReturnShipment)</returns>
        System.Threading.Tasks.Task<ApiResponse<ReturnShipment>> GetReturnShipmentByIdAsyncWithHttpInfo (int? returnShipmentId);
        /// <summary>
        /// Get the files for a returnShipment.
        /// </summary>
        /// <remarks>
        /// Get all existing returnShipment files.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="returnShipmentId">Id of the returnShipment to get files for</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetReturnShipmentFilesAsync (int? returnShipmentId);

        /// <summary>
        /// Get the files for a returnShipment.
        /// </summary>
        /// <remarks>
        /// Get all existing returnShipment files.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="returnShipmentId">Id of the returnShipment to get files for</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetReturnShipmentFilesAsyncWithHttpInfo (int? returnShipmentId);
        /// <summary>
        /// Get the tags for a returnShipment.
        /// </summary>
        /// <remarks>
        /// Get all existing returnShipment tags.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="returnShipmentId">Id of the returnShipment to get tags for</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetReturnShipmentTagsAsync (int? returnShipmentId);

        /// <summary>
        /// Get the tags for a returnShipment.
        /// </summary>
        /// <remarks>
        /// Get all existing returnShipment tags.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="returnShipmentId">Id of the returnShipment to get tags for</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetReturnShipmentTagsAsyncWithHttpInfo (int? returnShipmentId);
        /// <summary>
        /// Update a returnShipment custom fields
        /// </summary>
        /// <remarks>
        /// Updates an existing returnShipment custom fields using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">ReturnShipment to be updated.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateReturnShipmentCustomFieldsAsync (ReturnShipment body);

        /// <summary>
        /// Update a returnShipment custom fields
        /// </summary>
        /// <remarks>
        /// Updates an existing returnShipment custom fields using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">ReturnShipment to be updated.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateReturnShipmentCustomFieldsAsyncWithHttpInfo (ReturnShipment body);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ReturnShipmentApi : IReturnShipmentApi
    {
        private Infoplus.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ReturnShipmentApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ReturnShipmentApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = Infoplus.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ReturnShipmentApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ReturnShipmentApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Infoplus.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Infoplus.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Add new audit for a returnShipment Adds an audit to an existing returnShipment.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="returnShipmentId">Id of the returnShipment to add an audit to</param>
        /// <param name="returnShipmentAudit">The audit to add</param>
        /// <returns></returns>
        public void AddReturnShipmentAudit (int? returnShipmentId, string returnShipmentAudit)
        {
             AddReturnShipmentAuditWithHttpInfo(returnShipmentId, returnShipmentAudit);
        }

        /// <summary>
        /// Add new audit for a returnShipment Adds an audit to an existing returnShipment.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="returnShipmentId">Id of the returnShipment to add an audit to</param>
        /// <param name="returnShipmentAudit">The audit to add</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AddReturnShipmentAuditWithHttpInfo (int? returnShipmentId, string returnShipmentAudit)
        {
            // verify the required parameter 'returnShipmentId' is set
            if (returnShipmentId == null)
                throw new ApiException(400, "Missing required parameter 'returnShipmentId' when calling ReturnShipmentApi->AddReturnShipmentAudit");
            // verify the required parameter 'returnShipmentAudit' is set
            if (returnShipmentAudit == null)
                throw new ApiException(400, "Missing required parameter 'returnShipmentAudit' when calling ReturnShipmentApi->AddReturnShipmentAudit");

            var localVarPath = "/beta/returnShipment/{returnShipmentId}/audit/{returnShipmentAudit}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (returnShipmentId != null) localVarPathParams.Add("returnShipmentId", Configuration.ApiClient.ParameterToString(returnShipmentId)); // path parameter
            if (returnShipmentAudit != null) localVarPathParams.Add("returnShipmentAudit", Configuration.ApiClient.ParameterToString(returnShipmentAudit)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddReturnShipmentAudit", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Add new audit for a returnShipment Adds an audit to an existing returnShipment.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="returnShipmentId">Id of the returnShipment to add an audit to</param>
        /// <param name="returnShipmentAudit">The audit to add</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddReturnShipmentAuditAsync (int? returnShipmentId, string returnShipmentAudit)
        {
             await AddReturnShipmentAuditAsyncWithHttpInfo(returnShipmentId, returnShipmentAudit);

        }

        /// <summary>
        /// Add new audit for a returnShipment Adds an audit to an existing returnShipment.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="returnShipmentId">Id of the returnShipment to add an audit to</param>
        /// <param name="returnShipmentAudit">The audit to add</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddReturnShipmentAuditAsyncWithHttpInfo (int? returnShipmentId, string returnShipmentAudit)
        {
            // verify the required parameter 'returnShipmentId' is set
            if (returnShipmentId == null)
                throw new ApiException(400, "Missing required parameter 'returnShipmentId' when calling ReturnShipmentApi->AddReturnShipmentAudit");
            // verify the required parameter 'returnShipmentAudit' is set
            if (returnShipmentAudit == null)
                throw new ApiException(400, "Missing required parameter 'returnShipmentAudit' when calling ReturnShipmentApi->AddReturnShipmentAudit");

            var localVarPath = "/beta/returnShipment/{returnShipmentId}/audit/{returnShipmentAudit}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (returnShipmentId != null) localVarPathParams.Add("returnShipmentId", Configuration.ApiClient.ParameterToString(returnShipmentId)); // path parameter
            if (returnShipmentAudit != null) localVarPathParams.Add("returnShipmentAudit", Configuration.ApiClient.ParameterToString(returnShipmentAudit)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddReturnShipmentAudit", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Attach a file to a returnShipment Adds a file to an existing returnShipment.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="returnShipmentId">Id of the returnShipment to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns></returns>
        public void AddReturnShipmentFile (int? returnShipmentId, string fileName)
        {
             AddReturnShipmentFileWithHttpInfo(returnShipmentId, fileName);
        }

        /// <summary>
        /// Attach a file to a returnShipment Adds a file to an existing returnShipment.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="returnShipmentId">Id of the returnShipment to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AddReturnShipmentFileWithHttpInfo (int? returnShipmentId, string fileName)
        {
            // verify the required parameter 'returnShipmentId' is set
            if (returnShipmentId == null)
                throw new ApiException(400, "Missing required parameter 'returnShipmentId' when calling ReturnShipmentApi->AddReturnShipmentFile");
            // verify the required parameter 'fileName' is set
            if (fileName == null)
                throw new ApiException(400, "Missing required parameter 'fileName' when calling ReturnShipmentApi->AddReturnShipmentFile");

            var localVarPath = "/beta/returnShipment/{returnShipmentId}/file/{fileName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (returnShipmentId != null) localVarPathParams.Add("returnShipmentId", Configuration.ApiClient.ParameterToString(returnShipmentId)); // path parameter
            if (fileName != null) localVarPathParams.Add("fileName", Configuration.ApiClient.ParameterToString(fileName)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddReturnShipmentFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Attach a file to a returnShipment Adds a file to an existing returnShipment.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="returnShipmentId">Id of the returnShipment to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddReturnShipmentFileAsync (int? returnShipmentId, string fileName)
        {
             await AddReturnShipmentFileAsyncWithHttpInfo(returnShipmentId, fileName);

        }

        /// <summary>
        /// Attach a file to a returnShipment Adds a file to an existing returnShipment.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="returnShipmentId">Id of the returnShipment to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddReturnShipmentFileAsyncWithHttpInfo (int? returnShipmentId, string fileName)
        {
            // verify the required parameter 'returnShipmentId' is set
            if (returnShipmentId == null)
                throw new ApiException(400, "Missing required parameter 'returnShipmentId' when calling ReturnShipmentApi->AddReturnShipmentFile");
            // verify the required parameter 'fileName' is set
            if (fileName == null)
                throw new ApiException(400, "Missing required parameter 'fileName' when calling ReturnShipmentApi->AddReturnShipmentFile");

            var localVarPath = "/beta/returnShipment/{returnShipmentId}/file/{fileName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (returnShipmentId != null) localVarPathParams.Add("returnShipmentId", Configuration.ApiClient.ParameterToString(returnShipmentId)); // path parameter
            if (fileName != null) localVarPathParams.Add("fileName", Configuration.ApiClient.ParameterToString(fileName)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddReturnShipmentFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Attach a file to a returnShipment by URL. Adds a file to an existing returnShipment by URL.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="returnShipmentId">Id of the returnShipment to add an file to</param>
        /// <returns></returns>
        public void AddReturnShipmentFileByURL (RecordFile body, int? returnShipmentId)
        {
             AddReturnShipmentFileByURLWithHttpInfo(body, returnShipmentId);
        }

        /// <summary>
        /// Attach a file to a returnShipment by URL. Adds a file to an existing returnShipment by URL.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="returnShipmentId">Id of the returnShipment to add an file to</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AddReturnShipmentFileByURLWithHttpInfo (RecordFile body, int? returnShipmentId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ReturnShipmentApi->AddReturnShipmentFileByURL");
            // verify the required parameter 'returnShipmentId' is set
            if (returnShipmentId == null)
                throw new ApiException(400, "Missing required parameter 'returnShipmentId' when calling ReturnShipmentApi->AddReturnShipmentFileByURL");

            var localVarPath = "/beta/returnShipment/{returnShipmentId}/file";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (returnShipmentId != null) localVarPathParams.Add("returnShipmentId", Configuration.ApiClient.ParameterToString(returnShipmentId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddReturnShipmentFileByURL", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Attach a file to a returnShipment by URL. Adds a file to an existing returnShipment by URL.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="returnShipmentId">Id of the returnShipment to add an file to</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddReturnShipmentFileByURLAsync (RecordFile body, int? returnShipmentId)
        {
             await AddReturnShipmentFileByURLAsyncWithHttpInfo(body, returnShipmentId);

        }

        /// <summary>
        /// Attach a file to a returnShipment by URL. Adds a file to an existing returnShipment by URL.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="returnShipmentId">Id of the returnShipment to add an file to</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddReturnShipmentFileByURLAsyncWithHttpInfo (RecordFile body, int? returnShipmentId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ReturnShipmentApi->AddReturnShipmentFileByURL");
            // verify the required parameter 'returnShipmentId' is set
            if (returnShipmentId == null)
                throw new ApiException(400, "Missing required parameter 'returnShipmentId' when calling ReturnShipmentApi->AddReturnShipmentFileByURL");

            var localVarPath = "/beta/returnShipment/{returnShipmentId}/file";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (returnShipmentId != null) localVarPathParams.Add("returnShipmentId", Configuration.ApiClient.ParameterToString(returnShipmentId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddReturnShipmentFileByURL", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Add new tags for a returnShipment. Adds a tag to an existing returnShipment.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="returnShipmentId">Id of the returnShipment to add a tag to</param>
        /// <param name="returnShipmentTag">The tag to add</param>
        /// <returns></returns>
        public void AddReturnShipmentTag (int? returnShipmentId, string returnShipmentTag)
        {
             AddReturnShipmentTagWithHttpInfo(returnShipmentId, returnShipmentTag);
        }

        /// <summary>
        /// Add new tags for a returnShipment. Adds a tag to an existing returnShipment.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="returnShipmentId">Id of the returnShipment to add a tag to</param>
        /// <param name="returnShipmentTag">The tag to add</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AddReturnShipmentTagWithHttpInfo (int? returnShipmentId, string returnShipmentTag)
        {
            // verify the required parameter 'returnShipmentId' is set
            if (returnShipmentId == null)
                throw new ApiException(400, "Missing required parameter 'returnShipmentId' when calling ReturnShipmentApi->AddReturnShipmentTag");
            // verify the required parameter 'returnShipmentTag' is set
            if (returnShipmentTag == null)
                throw new ApiException(400, "Missing required parameter 'returnShipmentTag' when calling ReturnShipmentApi->AddReturnShipmentTag");

            var localVarPath = "/beta/returnShipment/{returnShipmentId}/tag/{returnShipmentTag}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (returnShipmentId != null) localVarPathParams.Add("returnShipmentId", Configuration.ApiClient.ParameterToString(returnShipmentId)); // path parameter
            if (returnShipmentTag != null) localVarPathParams.Add("returnShipmentTag", Configuration.ApiClient.ParameterToString(returnShipmentTag)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddReturnShipmentTag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Add new tags for a returnShipment. Adds a tag to an existing returnShipment.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="returnShipmentId">Id of the returnShipment to add a tag to</param>
        /// <param name="returnShipmentTag">The tag to add</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddReturnShipmentTagAsync (int? returnShipmentId, string returnShipmentTag)
        {
             await AddReturnShipmentTagAsyncWithHttpInfo(returnShipmentId, returnShipmentTag);

        }

        /// <summary>
        /// Add new tags for a returnShipment. Adds a tag to an existing returnShipment.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="returnShipmentId">Id of the returnShipment to add a tag to</param>
        /// <param name="returnShipmentTag">The tag to add</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddReturnShipmentTagAsyncWithHttpInfo (int? returnShipmentId, string returnShipmentTag)
        {
            // verify the required parameter 'returnShipmentId' is set
            if (returnShipmentId == null)
                throw new ApiException(400, "Missing required parameter 'returnShipmentId' when calling ReturnShipmentApi->AddReturnShipmentTag");
            // verify the required parameter 'returnShipmentTag' is set
            if (returnShipmentTag == null)
                throw new ApiException(400, "Missing required parameter 'returnShipmentTag' when calling ReturnShipmentApi->AddReturnShipmentTag");

            var localVarPath = "/beta/returnShipment/{returnShipmentId}/tag/{returnShipmentTag}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (returnShipmentId != null) localVarPathParams.Add("returnShipmentId", Configuration.ApiClient.ParameterToString(returnShipmentId)); // path parameter
            if (returnShipmentTag != null) localVarPathParams.Add("returnShipmentTag", Configuration.ApiClient.ParameterToString(returnShipmentTag)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddReturnShipmentTag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a file for a returnShipment. Deletes an existing returnShipment file using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="returnShipmentId">Id of the returnShipment to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns></returns>
        public void DeleteReturnShipmentFile (int? returnShipmentId, int? fileId)
        {
             DeleteReturnShipmentFileWithHttpInfo(returnShipmentId, fileId);
        }

        /// <summary>
        /// Delete a file for a returnShipment. Deletes an existing returnShipment file using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="returnShipmentId">Id of the returnShipment to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteReturnShipmentFileWithHttpInfo (int? returnShipmentId, int? fileId)
        {
            // verify the required parameter 'returnShipmentId' is set
            if (returnShipmentId == null)
                throw new ApiException(400, "Missing required parameter 'returnShipmentId' when calling ReturnShipmentApi->DeleteReturnShipmentFile");
            // verify the required parameter 'fileId' is set
            if (fileId == null)
                throw new ApiException(400, "Missing required parameter 'fileId' when calling ReturnShipmentApi->DeleteReturnShipmentFile");

            var localVarPath = "/beta/returnShipment/{returnShipmentId}/file/{fileId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (returnShipmentId != null) localVarPathParams.Add("returnShipmentId", Configuration.ApiClient.ParameterToString(returnShipmentId)); // path parameter
            if (fileId != null) localVarPathParams.Add("fileId", Configuration.ApiClient.ParameterToString(fileId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteReturnShipmentFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a file for a returnShipment. Deletes an existing returnShipment file using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="returnShipmentId">Id of the returnShipment to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteReturnShipmentFileAsync (int? returnShipmentId, int? fileId)
        {
             await DeleteReturnShipmentFileAsyncWithHttpInfo(returnShipmentId, fileId);

        }

        /// <summary>
        /// Delete a file for a returnShipment. Deletes an existing returnShipment file using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="returnShipmentId">Id of the returnShipment to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteReturnShipmentFileAsyncWithHttpInfo (int? returnShipmentId, int? fileId)
        {
            // verify the required parameter 'returnShipmentId' is set
            if (returnShipmentId == null)
                throw new ApiException(400, "Missing required parameter 'returnShipmentId' when calling ReturnShipmentApi->DeleteReturnShipmentFile");
            // verify the required parameter 'fileId' is set
            if (fileId == null)
                throw new ApiException(400, "Missing required parameter 'fileId' when calling ReturnShipmentApi->DeleteReturnShipmentFile");

            var localVarPath = "/beta/returnShipment/{returnShipmentId}/file/{fileId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (returnShipmentId != null) localVarPathParams.Add("returnShipmentId", Configuration.ApiClient.ParameterToString(returnShipmentId)); // path parameter
            if (fileId != null) localVarPathParams.Add("fileId", Configuration.ApiClient.ParameterToString(fileId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteReturnShipmentFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a tag for a returnShipment. Deletes an existing returnShipment tag using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="returnShipmentId">Id of the returnShipment to remove tag from</param>
        /// <param name="returnShipmentTag">The tag to delete</param>
        /// <returns></returns>
        public void DeleteReturnShipmentTag (int? returnShipmentId, string returnShipmentTag)
        {
             DeleteReturnShipmentTagWithHttpInfo(returnShipmentId, returnShipmentTag);
        }

        /// <summary>
        /// Delete a tag for a returnShipment. Deletes an existing returnShipment tag using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="returnShipmentId">Id of the returnShipment to remove tag from</param>
        /// <param name="returnShipmentTag">The tag to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteReturnShipmentTagWithHttpInfo (int? returnShipmentId, string returnShipmentTag)
        {
            // verify the required parameter 'returnShipmentId' is set
            if (returnShipmentId == null)
                throw new ApiException(400, "Missing required parameter 'returnShipmentId' when calling ReturnShipmentApi->DeleteReturnShipmentTag");
            // verify the required parameter 'returnShipmentTag' is set
            if (returnShipmentTag == null)
                throw new ApiException(400, "Missing required parameter 'returnShipmentTag' when calling ReturnShipmentApi->DeleteReturnShipmentTag");

            var localVarPath = "/beta/returnShipment/{returnShipmentId}/tag/{returnShipmentTag}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (returnShipmentId != null) localVarPathParams.Add("returnShipmentId", Configuration.ApiClient.ParameterToString(returnShipmentId)); // path parameter
            if (returnShipmentTag != null) localVarPathParams.Add("returnShipmentTag", Configuration.ApiClient.ParameterToString(returnShipmentTag)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteReturnShipmentTag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a tag for a returnShipment. Deletes an existing returnShipment tag using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="returnShipmentId">Id of the returnShipment to remove tag from</param>
        /// <param name="returnShipmentTag">The tag to delete</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteReturnShipmentTagAsync (int? returnShipmentId, string returnShipmentTag)
        {
             await DeleteReturnShipmentTagAsyncWithHttpInfo(returnShipmentId, returnShipmentTag);

        }

        /// <summary>
        /// Delete a tag for a returnShipment. Deletes an existing returnShipment tag using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="returnShipmentId">Id of the returnShipment to remove tag from</param>
        /// <param name="returnShipmentTag">The tag to delete</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteReturnShipmentTagAsyncWithHttpInfo (int? returnShipmentId, string returnShipmentTag)
        {
            // verify the required parameter 'returnShipmentId' is set
            if (returnShipmentId == null)
                throw new ApiException(400, "Missing required parameter 'returnShipmentId' when calling ReturnShipmentApi->DeleteReturnShipmentTag");
            // verify the required parameter 'returnShipmentTag' is set
            if (returnShipmentTag == null)
                throw new ApiException(400, "Missing required parameter 'returnShipmentTag' when calling ReturnShipmentApi->DeleteReturnShipmentTag");

            var localVarPath = "/beta/returnShipment/{returnShipmentId}/tag/{returnShipmentTag}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (returnShipmentId != null) localVarPathParams.Add("returnShipmentId", Configuration.ApiClient.ParameterToString(returnShipmentId)); // path parameter
            if (returnShipmentTag != null) localVarPathParams.Add("returnShipmentTag", Configuration.ApiClient.ParameterToString(returnShipmentTag)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteReturnShipmentTag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get a duplicated a returnShipment by id Returns a duplicated returnShipment identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="returnShipmentId">Id of the returnShipment to be duplicated.</param>
        /// <returns>ReturnShipment</returns>
        public ReturnShipment GetDuplicateReturnShipmentById (int? returnShipmentId)
        {
             ApiResponse<ReturnShipment> localVarResponse = GetDuplicateReturnShipmentByIdWithHttpInfo(returnShipmentId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a duplicated a returnShipment by id Returns a duplicated returnShipment identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="returnShipmentId">Id of the returnShipment to be duplicated.</param>
        /// <returns>ApiResponse of ReturnShipment</returns>
        public ApiResponse< ReturnShipment > GetDuplicateReturnShipmentByIdWithHttpInfo (int? returnShipmentId)
        {
            // verify the required parameter 'returnShipmentId' is set
            if (returnShipmentId == null)
                throw new ApiException(400, "Missing required parameter 'returnShipmentId' when calling ReturnShipmentApi->GetDuplicateReturnShipmentById");

            var localVarPath = "/beta/returnShipment/duplicate/{returnShipmentId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (returnShipmentId != null) localVarPathParams.Add("returnShipmentId", Configuration.ApiClient.ParameterToString(returnShipmentId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDuplicateReturnShipmentById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ReturnShipment>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ReturnShipment) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ReturnShipment)));
        }

        /// <summary>
        /// Get a duplicated a returnShipment by id Returns a duplicated returnShipment identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="returnShipmentId">Id of the returnShipment to be duplicated.</param>
        /// <returns>Task of ReturnShipment</returns>
        public async System.Threading.Tasks.Task<ReturnShipment> GetDuplicateReturnShipmentByIdAsync (int? returnShipmentId)
        {
             ApiResponse<ReturnShipment> localVarResponse = await GetDuplicateReturnShipmentByIdAsyncWithHttpInfo(returnShipmentId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a duplicated a returnShipment by id Returns a duplicated returnShipment identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="returnShipmentId">Id of the returnShipment to be duplicated.</param>
        /// <returns>Task of ApiResponse (ReturnShipment)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ReturnShipment>> GetDuplicateReturnShipmentByIdAsyncWithHttpInfo (int? returnShipmentId)
        {
            // verify the required parameter 'returnShipmentId' is set
            if (returnShipmentId == null)
                throw new ApiException(400, "Missing required parameter 'returnShipmentId' when calling ReturnShipmentApi->GetDuplicateReturnShipmentById");

            var localVarPath = "/beta/returnShipment/duplicate/{returnShipmentId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (returnShipmentId != null) localVarPathParams.Add("returnShipmentId", Configuration.ApiClient.ParameterToString(returnShipmentId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDuplicateReturnShipmentById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ReturnShipment>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ReturnShipment) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ReturnShipment)));
        }

        /// <summary>
        /// Search returnShipments by filter Returns the list of returnShipments that match the given filter.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>List&lt;ReturnShipment&gt;</returns>
        public List<ReturnShipment> GetReturnShipmentByFilter (string filter = null, int? page = null, int? limit = null, string sort = null)
        {
             ApiResponse<List<ReturnShipment>> localVarResponse = GetReturnShipmentByFilterWithHttpInfo(filter, page, limit, sort);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Search returnShipments by filter Returns the list of returnShipments that match the given filter.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>ApiResponse of List&lt;ReturnShipment&gt;</returns>
        public ApiResponse< List<ReturnShipment> > GetReturnShipmentByFilterWithHttpInfo (string filter = null, int? page = null, int? limit = null, string sort = null)
        {

            var localVarPath = "/beta/returnShipment/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (filter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (page != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetReturnShipmentByFilter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ReturnShipment>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ReturnShipment>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ReturnShipment>)));
        }

        /// <summary>
        /// Search returnShipments by filter Returns the list of returnShipments that match the given filter.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>Task of List&lt;ReturnShipment&gt;</returns>
        public async System.Threading.Tasks.Task<List<ReturnShipment>> GetReturnShipmentByFilterAsync (string filter = null, int? page = null, int? limit = null, string sort = null)
        {
             ApiResponse<List<ReturnShipment>> localVarResponse = await GetReturnShipmentByFilterAsyncWithHttpInfo(filter, page, limit, sort);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Search returnShipments by filter Returns the list of returnShipments that match the given filter.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ReturnShipment&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ReturnShipment>>> GetReturnShipmentByFilterAsyncWithHttpInfo (string filter = null, int? page = null, int? limit = null, string sort = null)
        {

            var localVarPath = "/beta/returnShipment/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (filter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (page != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetReturnShipmentByFilter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ReturnShipment>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ReturnShipment>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ReturnShipment>)));
        }

        /// <summary>
        /// Get a returnShipment by id Returns the returnShipment identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="returnShipmentId">Id of the returnShipment to be returned.</param>
        /// <returns>ReturnShipment</returns>
        public ReturnShipment GetReturnShipmentById (int? returnShipmentId)
        {
             ApiResponse<ReturnShipment> localVarResponse = GetReturnShipmentByIdWithHttpInfo(returnShipmentId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a returnShipment by id Returns the returnShipment identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="returnShipmentId">Id of the returnShipment to be returned.</param>
        /// <returns>ApiResponse of ReturnShipment</returns>
        public ApiResponse< ReturnShipment > GetReturnShipmentByIdWithHttpInfo (int? returnShipmentId)
        {
            // verify the required parameter 'returnShipmentId' is set
            if (returnShipmentId == null)
                throw new ApiException(400, "Missing required parameter 'returnShipmentId' when calling ReturnShipmentApi->GetReturnShipmentById");

            var localVarPath = "/beta/returnShipment/{returnShipmentId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (returnShipmentId != null) localVarPathParams.Add("returnShipmentId", Configuration.ApiClient.ParameterToString(returnShipmentId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetReturnShipmentById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ReturnShipment>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ReturnShipment) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ReturnShipment)));
        }

        /// <summary>
        /// Get a returnShipment by id Returns the returnShipment identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="returnShipmentId">Id of the returnShipment to be returned.</param>
        /// <returns>Task of ReturnShipment</returns>
        public async System.Threading.Tasks.Task<ReturnShipment> GetReturnShipmentByIdAsync (int? returnShipmentId)
        {
             ApiResponse<ReturnShipment> localVarResponse = await GetReturnShipmentByIdAsyncWithHttpInfo(returnShipmentId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a returnShipment by id Returns the returnShipment identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="returnShipmentId">Id of the returnShipment to be returned.</param>
        /// <returns>Task of ApiResponse (ReturnShipment)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ReturnShipment>> GetReturnShipmentByIdAsyncWithHttpInfo (int? returnShipmentId)
        {
            // verify the required parameter 'returnShipmentId' is set
            if (returnShipmentId == null)
                throw new ApiException(400, "Missing required parameter 'returnShipmentId' when calling ReturnShipmentApi->GetReturnShipmentById");

            var localVarPath = "/beta/returnShipment/{returnShipmentId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (returnShipmentId != null) localVarPathParams.Add("returnShipmentId", Configuration.ApiClient.ParameterToString(returnShipmentId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetReturnShipmentById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ReturnShipment>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ReturnShipment) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ReturnShipment)));
        }

        /// <summary>
        /// Get the files for a returnShipment. Get all existing returnShipment files.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="returnShipmentId">Id of the returnShipment to get files for</param>
        /// <returns></returns>
        public void GetReturnShipmentFiles (int? returnShipmentId)
        {
             GetReturnShipmentFilesWithHttpInfo(returnShipmentId);
        }

        /// <summary>
        /// Get the files for a returnShipment. Get all existing returnShipment files.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="returnShipmentId">Id of the returnShipment to get files for</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GetReturnShipmentFilesWithHttpInfo (int? returnShipmentId)
        {
            // verify the required parameter 'returnShipmentId' is set
            if (returnShipmentId == null)
                throw new ApiException(400, "Missing required parameter 'returnShipmentId' when calling ReturnShipmentApi->GetReturnShipmentFiles");

            var localVarPath = "/beta/returnShipment/{returnShipmentId}/file";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (returnShipmentId != null) localVarPathParams.Add("returnShipmentId", Configuration.ApiClient.ParameterToString(returnShipmentId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetReturnShipmentFiles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get the files for a returnShipment. Get all existing returnShipment files.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="returnShipmentId">Id of the returnShipment to get files for</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetReturnShipmentFilesAsync (int? returnShipmentId)
        {
             await GetReturnShipmentFilesAsyncWithHttpInfo(returnShipmentId);

        }

        /// <summary>
        /// Get the files for a returnShipment. Get all existing returnShipment files.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="returnShipmentId">Id of the returnShipment to get files for</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetReturnShipmentFilesAsyncWithHttpInfo (int? returnShipmentId)
        {
            // verify the required parameter 'returnShipmentId' is set
            if (returnShipmentId == null)
                throw new ApiException(400, "Missing required parameter 'returnShipmentId' when calling ReturnShipmentApi->GetReturnShipmentFiles");

            var localVarPath = "/beta/returnShipment/{returnShipmentId}/file";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (returnShipmentId != null) localVarPathParams.Add("returnShipmentId", Configuration.ApiClient.ParameterToString(returnShipmentId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetReturnShipmentFiles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get the tags for a returnShipment. Get all existing returnShipment tags.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="returnShipmentId">Id of the returnShipment to get tags for</param>
        /// <returns></returns>
        public void GetReturnShipmentTags (int? returnShipmentId)
        {
             GetReturnShipmentTagsWithHttpInfo(returnShipmentId);
        }

        /// <summary>
        /// Get the tags for a returnShipment. Get all existing returnShipment tags.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="returnShipmentId">Id of the returnShipment to get tags for</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GetReturnShipmentTagsWithHttpInfo (int? returnShipmentId)
        {
            // verify the required parameter 'returnShipmentId' is set
            if (returnShipmentId == null)
                throw new ApiException(400, "Missing required parameter 'returnShipmentId' when calling ReturnShipmentApi->GetReturnShipmentTags");

            var localVarPath = "/beta/returnShipment/{returnShipmentId}/tag";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (returnShipmentId != null) localVarPathParams.Add("returnShipmentId", Configuration.ApiClient.ParameterToString(returnShipmentId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetReturnShipmentTags", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get the tags for a returnShipment. Get all existing returnShipment tags.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="returnShipmentId">Id of the returnShipment to get tags for</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetReturnShipmentTagsAsync (int? returnShipmentId)
        {
             await GetReturnShipmentTagsAsyncWithHttpInfo(returnShipmentId);

        }

        /// <summary>
        /// Get the tags for a returnShipment. Get all existing returnShipment tags.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="returnShipmentId">Id of the returnShipment to get tags for</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetReturnShipmentTagsAsyncWithHttpInfo (int? returnShipmentId)
        {
            // verify the required parameter 'returnShipmentId' is set
            if (returnShipmentId == null)
                throw new ApiException(400, "Missing required parameter 'returnShipmentId' when calling ReturnShipmentApi->GetReturnShipmentTags");

            var localVarPath = "/beta/returnShipment/{returnShipmentId}/tag";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (returnShipmentId != null) localVarPathParams.Add("returnShipmentId", Configuration.ApiClient.ParameterToString(returnShipmentId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetReturnShipmentTags", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update a returnShipment custom fields Updates an existing returnShipment custom fields using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">ReturnShipment to be updated.</param>
        /// <returns></returns>
        public void UpdateReturnShipmentCustomFields (ReturnShipment body)
        {
             UpdateReturnShipmentCustomFieldsWithHttpInfo(body);
        }

        /// <summary>
        /// Update a returnShipment custom fields Updates an existing returnShipment custom fields using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">ReturnShipment to be updated.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateReturnShipmentCustomFieldsWithHttpInfo (ReturnShipment body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ReturnShipmentApi->UpdateReturnShipmentCustomFields");

            var localVarPath = "/beta/returnShipment/customFields";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateReturnShipmentCustomFields", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update a returnShipment custom fields Updates an existing returnShipment custom fields using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">ReturnShipment to be updated.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateReturnShipmentCustomFieldsAsync (ReturnShipment body)
        {
             await UpdateReturnShipmentCustomFieldsAsyncWithHttpInfo(body);

        }

        /// <summary>
        /// Update a returnShipment custom fields Updates an existing returnShipment custom fields using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">ReturnShipment to be updated.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateReturnShipmentCustomFieldsAsyncWithHttpInfo (ReturnShipment body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ReturnShipmentApi->UpdateReturnShipmentCustomFields");

            var localVarPath = "/beta/returnShipment/customFields";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateReturnShipmentCustomFields", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

    }
}
