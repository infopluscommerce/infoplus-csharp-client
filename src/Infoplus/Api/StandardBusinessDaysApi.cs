/* 
 * Infoplus API
 *
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Infoplus.Client;
using Infoplus.Model;

namespace Infoplus.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IStandardBusinessDaysApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create a standardBusinessDays
        /// </summary>
        /// <remarks>
        /// Inserts a new standardBusinessDays using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">StandardBusinessDays to be inserted.</param>
        /// <returns>StandardBusinessDays</returns>
        StandardBusinessDays AddStandardBusinessDays (StandardBusinessDays body);

        /// <summary>
        /// Create a standardBusinessDays
        /// </summary>
        /// <remarks>
        /// Inserts a new standardBusinessDays using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">StandardBusinessDays to be inserted.</param>
        /// <returns>ApiResponse of StandardBusinessDays</returns>
        ApiResponse<StandardBusinessDays> AddStandardBusinessDaysWithHttpInfo (StandardBusinessDays body);
        /// <summary>
        /// Add new audit for a standardBusinessDays
        /// </summary>
        /// <remarks>
        /// Adds an audit to an existing standardBusinessDays.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="standardBusinessDaysId">Id of the standardBusinessDays to add an audit to</param>
        /// <param name="standardBusinessDaysAudit">The audit to add</param>
        /// <returns></returns>
        void AddStandardBusinessDaysAudit (int? standardBusinessDaysId, string standardBusinessDaysAudit);

        /// <summary>
        /// Add new audit for a standardBusinessDays
        /// </summary>
        /// <remarks>
        /// Adds an audit to an existing standardBusinessDays.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="standardBusinessDaysId">Id of the standardBusinessDays to add an audit to</param>
        /// <param name="standardBusinessDaysAudit">The audit to add</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddStandardBusinessDaysAuditWithHttpInfo (int? standardBusinessDaysId, string standardBusinessDaysAudit);
        /// <summary>
        /// Attach a file to a standardBusinessDays
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing standardBusinessDays.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="standardBusinessDaysId">Id of the standardBusinessDays to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns></returns>
        void AddStandardBusinessDaysFile (int? standardBusinessDaysId, string fileName);

        /// <summary>
        /// Attach a file to a standardBusinessDays
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing standardBusinessDays.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="standardBusinessDaysId">Id of the standardBusinessDays to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddStandardBusinessDaysFileWithHttpInfo (int? standardBusinessDaysId, string fileName);
        /// <summary>
        /// Attach a file to a standardBusinessDays by URL.
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing standardBusinessDays by URL.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="standardBusinessDaysId">Id of the standardBusinessDays to add an file to</param>
        /// <returns></returns>
        void AddStandardBusinessDaysFileByURL (RecordFile body, int? standardBusinessDaysId);

        /// <summary>
        /// Attach a file to a standardBusinessDays by URL.
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing standardBusinessDays by URL.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="standardBusinessDaysId">Id of the standardBusinessDays to add an file to</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddStandardBusinessDaysFileByURLWithHttpInfo (RecordFile body, int? standardBusinessDaysId);
        /// <summary>
        /// Add new tags for a standardBusinessDays.
        /// </summary>
        /// <remarks>
        /// Adds a tag to an existing standardBusinessDays.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="standardBusinessDaysId">Id of the standardBusinessDays to add a tag to</param>
        /// <param name="standardBusinessDaysTag">The tag to add</param>
        /// <returns></returns>
        void AddStandardBusinessDaysTag (int? standardBusinessDaysId, string standardBusinessDaysTag);

        /// <summary>
        /// Add new tags for a standardBusinessDays.
        /// </summary>
        /// <remarks>
        /// Adds a tag to an existing standardBusinessDays.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="standardBusinessDaysId">Id of the standardBusinessDays to add a tag to</param>
        /// <param name="standardBusinessDaysTag">The tag to add</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddStandardBusinessDaysTagWithHttpInfo (int? standardBusinessDaysId, string standardBusinessDaysTag);
        /// <summary>
        /// Delete a standardBusinessDays
        /// </summary>
        /// <remarks>
        /// Deletes the standardBusinessDays identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="standardBusinessDaysId">Id of the standardBusinessDays to be deleted.</param>
        /// <returns></returns>
        void DeleteStandardBusinessDays (int? standardBusinessDaysId);

        /// <summary>
        /// Delete a standardBusinessDays
        /// </summary>
        /// <remarks>
        /// Deletes the standardBusinessDays identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="standardBusinessDaysId">Id of the standardBusinessDays to be deleted.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteStandardBusinessDaysWithHttpInfo (int? standardBusinessDaysId);
        /// <summary>
        /// Delete a file for a standardBusinessDays.
        /// </summary>
        /// <remarks>
        /// Deletes an existing standardBusinessDays file using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="standardBusinessDaysId">Id of the standardBusinessDays to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns></returns>
        void DeleteStandardBusinessDaysFile (int? standardBusinessDaysId, int? fileId);

        /// <summary>
        /// Delete a file for a standardBusinessDays.
        /// </summary>
        /// <remarks>
        /// Deletes an existing standardBusinessDays file using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="standardBusinessDaysId">Id of the standardBusinessDays to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteStandardBusinessDaysFileWithHttpInfo (int? standardBusinessDaysId, int? fileId);
        /// <summary>
        /// Delete a tag for a standardBusinessDays.
        /// </summary>
        /// <remarks>
        /// Deletes an existing standardBusinessDays tag using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="standardBusinessDaysId">Id of the standardBusinessDays to remove tag from</param>
        /// <param name="standardBusinessDaysTag">The tag to delete</param>
        /// <returns></returns>
        void DeleteStandardBusinessDaysTag (int? standardBusinessDaysId, string standardBusinessDaysTag);

        /// <summary>
        /// Delete a tag for a standardBusinessDays.
        /// </summary>
        /// <remarks>
        /// Deletes an existing standardBusinessDays tag using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="standardBusinessDaysId">Id of the standardBusinessDays to remove tag from</param>
        /// <param name="standardBusinessDaysTag">The tag to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteStandardBusinessDaysTagWithHttpInfo (int? standardBusinessDaysId, string standardBusinessDaysTag);
        /// <summary>
        /// Get a duplicated a standardBusinessDays by id
        /// </summary>
        /// <remarks>
        /// Returns a duplicated standardBusinessDays identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="standardBusinessDaysId">Id of the standardBusinessDays to be duplicated.</param>
        /// <returns>StandardBusinessDays</returns>
        StandardBusinessDays GetDuplicateStandardBusinessDaysById (int? standardBusinessDaysId);

        /// <summary>
        /// Get a duplicated a standardBusinessDays by id
        /// </summary>
        /// <remarks>
        /// Returns a duplicated standardBusinessDays identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="standardBusinessDaysId">Id of the standardBusinessDays to be duplicated.</param>
        /// <returns>ApiResponse of StandardBusinessDays</returns>
        ApiResponse<StandardBusinessDays> GetDuplicateStandardBusinessDaysByIdWithHttpInfo (int? standardBusinessDaysId);
        /// <summary>
        /// Search standardBusinessDayses by filter
        /// </summary>
        /// <remarks>
        /// Returns the list of standardBusinessDayses that match the given filter.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>List&lt;StandardBusinessDays&gt;</returns>
        List<StandardBusinessDays> GetStandardBusinessDaysByFilter (string filter = null, int? page = null, int? limit = null, string sort = null);

        /// <summary>
        /// Search standardBusinessDayses by filter
        /// </summary>
        /// <remarks>
        /// Returns the list of standardBusinessDayses that match the given filter.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>ApiResponse of List&lt;StandardBusinessDays&gt;</returns>
        ApiResponse<List<StandardBusinessDays>> GetStandardBusinessDaysByFilterWithHttpInfo (string filter = null, int? page = null, int? limit = null, string sort = null);
        /// <summary>
        /// Get a standardBusinessDays by id
        /// </summary>
        /// <remarks>
        /// Returns the standardBusinessDays identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="standardBusinessDaysId">Id of the standardBusinessDays to be returned.</param>
        /// <returns>StandardBusinessDays</returns>
        StandardBusinessDays GetStandardBusinessDaysById (int? standardBusinessDaysId);

        /// <summary>
        /// Get a standardBusinessDays by id
        /// </summary>
        /// <remarks>
        /// Returns the standardBusinessDays identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="standardBusinessDaysId">Id of the standardBusinessDays to be returned.</param>
        /// <returns>ApiResponse of StandardBusinessDays</returns>
        ApiResponse<StandardBusinessDays> GetStandardBusinessDaysByIdWithHttpInfo (int? standardBusinessDaysId);
        /// <summary>
        /// Get the files for a standardBusinessDays.
        /// </summary>
        /// <remarks>
        /// Get all existing standardBusinessDays files.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="standardBusinessDaysId">Id of the standardBusinessDays to get files for</param>
        /// <returns></returns>
        void GetStandardBusinessDaysFiles (int? standardBusinessDaysId);

        /// <summary>
        /// Get the files for a standardBusinessDays.
        /// </summary>
        /// <remarks>
        /// Get all existing standardBusinessDays files.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="standardBusinessDaysId">Id of the standardBusinessDays to get files for</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetStandardBusinessDaysFilesWithHttpInfo (int? standardBusinessDaysId);
        /// <summary>
        /// Get the tags for a standardBusinessDays.
        /// </summary>
        /// <remarks>
        /// Get all existing standardBusinessDays tags.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="standardBusinessDaysId">Id of the standardBusinessDays to get tags for</param>
        /// <returns></returns>
        void GetStandardBusinessDaysTags (int? standardBusinessDaysId);

        /// <summary>
        /// Get the tags for a standardBusinessDays.
        /// </summary>
        /// <remarks>
        /// Get all existing standardBusinessDays tags.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="standardBusinessDaysId">Id of the standardBusinessDays to get tags for</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetStandardBusinessDaysTagsWithHttpInfo (int? standardBusinessDaysId);
        /// <summary>
        /// Update a standardBusinessDays
        /// </summary>
        /// <remarks>
        /// Updates an existing standardBusinessDays using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">StandardBusinessDays to be updated.</param>
        /// <returns></returns>
        void UpdateStandardBusinessDays (StandardBusinessDays body);

        /// <summary>
        /// Update a standardBusinessDays
        /// </summary>
        /// <remarks>
        /// Updates an existing standardBusinessDays using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">StandardBusinessDays to be updated.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateStandardBusinessDaysWithHttpInfo (StandardBusinessDays body);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create a standardBusinessDays
        /// </summary>
        /// <remarks>
        /// Inserts a new standardBusinessDays using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">StandardBusinessDays to be inserted.</param>
        /// <returns>Task of StandardBusinessDays</returns>
        System.Threading.Tasks.Task<StandardBusinessDays> AddStandardBusinessDaysAsync (StandardBusinessDays body);

        /// <summary>
        /// Create a standardBusinessDays
        /// </summary>
        /// <remarks>
        /// Inserts a new standardBusinessDays using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">StandardBusinessDays to be inserted.</param>
        /// <returns>Task of ApiResponse (StandardBusinessDays)</returns>
        System.Threading.Tasks.Task<ApiResponse<StandardBusinessDays>> AddStandardBusinessDaysAsyncWithHttpInfo (StandardBusinessDays body);
        /// <summary>
        /// Add new audit for a standardBusinessDays
        /// </summary>
        /// <remarks>
        /// Adds an audit to an existing standardBusinessDays.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="standardBusinessDaysId">Id of the standardBusinessDays to add an audit to</param>
        /// <param name="standardBusinessDaysAudit">The audit to add</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddStandardBusinessDaysAuditAsync (int? standardBusinessDaysId, string standardBusinessDaysAudit);

        /// <summary>
        /// Add new audit for a standardBusinessDays
        /// </summary>
        /// <remarks>
        /// Adds an audit to an existing standardBusinessDays.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="standardBusinessDaysId">Id of the standardBusinessDays to add an audit to</param>
        /// <param name="standardBusinessDaysAudit">The audit to add</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddStandardBusinessDaysAuditAsyncWithHttpInfo (int? standardBusinessDaysId, string standardBusinessDaysAudit);
        /// <summary>
        /// Attach a file to a standardBusinessDays
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing standardBusinessDays.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="standardBusinessDaysId">Id of the standardBusinessDays to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddStandardBusinessDaysFileAsync (int? standardBusinessDaysId, string fileName);

        /// <summary>
        /// Attach a file to a standardBusinessDays
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing standardBusinessDays.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="standardBusinessDaysId">Id of the standardBusinessDays to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddStandardBusinessDaysFileAsyncWithHttpInfo (int? standardBusinessDaysId, string fileName);
        /// <summary>
        /// Attach a file to a standardBusinessDays by URL.
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing standardBusinessDays by URL.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="standardBusinessDaysId">Id of the standardBusinessDays to add an file to</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddStandardBusinessDaysFileByURLAsync (RecordFile body, int? standardBusinessDaysId);

        /// <summary>
        /// Attach a file to a standardBusinessDays by URL.
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing standardBusinessDays by URL.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="standardBusinessDaysId">Id of the standardBusinessDays to add an file to</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddStandardBusinessDaysFileByURLAsyncWithHttpInfo (RecordFile body, int? standardBusinessDaysId);
        /// <summary>
        /// Add new tags for a standardBusinessDays.
        /// </summary>
        /// <remarks>
        /// Adds a tag to an existing standardBusinessDays.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="standardBusinessDaysId">Id of the standardBusinessDays to add a tag to</param>
        /// <param name="standardBusinessDaysTag">The tag to add</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddStandardBusinessDaysTagAsync (int? standardBusinessDaysId, string standardBusinessDaysTag);

        /// <summary>
        /// Add new tags for a standardBusinessDays.
        /// </summary>
        /// <remarks>
        /// Adds a tag to an existing standardBusinessDays.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="standardBusinessDaysId">Id of the standardBusinessDays to add a tag to</param>
        /// <param name="standardBusinessDaysTag">The tag to add</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddStandardBusinessDaysTagAsyncWithHttpInfo (int? standardBusinessDaysId, string standardBusinessDaysTag);
        /// <summary>
        /// Delete a standardBusinessDays
        /// </summary>
        /// <remarks>
        /// Deletes the standardBusinessDays identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="standardBusinessDaysId">Id of the standardBusinessDays to be deleted.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteStandardBusinessDaysAsync (int? standardBusinessDaysId);

        /// <summary>
        /// Delete a standardBusinessDays
        /// </summary>
        /// <remarks>
        /// Deletes the standardBusinessDays identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="standardBusinessDaysId">Id of the standardBusinessDays to be deleted.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteStandardBusinessDaysAsyncWithHttpInfo (int? standardBusinessDaysId);
        /// <summary>
        /// Delete a file for a standardBusinessDays.
        /// </summary>
        /// <remarks>
        /// Deletes an existing standardBusinessDays file using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="standardBusinessDaysId">Id of the standardBusinessDays to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteStandardBusinessDaysFileAsync (int? standardBusinessDaysId, int? fileId);

        /// <summary>
        /// Delete a file for a standardBusinessDays.
        /// </summary>
        /// <remarks>
        /// Deletes an existing standardBusinessDays file using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="standardBusinessDaysId">Id of the standardBusinessDays to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteStandardBusinessDaysFileAsyncWithHttpInfo (int? standardBusinessDaysId, int? fileId);
        /// <summary>
        /// Delete a tag for a standardBusinessDays.
        /// </summary>
        /// <remarks>
        /// Deletes an existing standardBusinessDays tag using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="standardBusinessDaysId">Id of the standardBusinessDays to remove tag from</param>
        /// <param name="standardBusinessDaysTag">The tag to delete</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteStandardBusinessDaysTagAsync (int? standardBusinessDaysId, string standardBusinessDaysTag);

        /// <summary>
        /// Delete a tag for a standardBusinessDays.
        /// </summary>
        /// <remarks>
        /// Deletes an existing standardBusinessDays tag using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="standardBusinessDaysId">Id of the standardBusinessDays to remove tag from</param>
        /// <param name="standardBusinessDaysTag">The tag to delete</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteStandardBusinessDaysTagAsyncWithHttpInfo (int? standardBusinessDaysId, string standardBusinessDaysTag);
        /// <summary>
        /// Get a duplicated a standardBusinessDays by id
        /// </summary>
        /// <remarks>
        /// Returns a duplicated standardBusinessDays identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="standardBusinessDaysId">Id of the standardBusinessDays to be duplicated.</param>
        /// <returns>Task of StandardBusinessDays</returns>
        System.Threading.Tasks.Task<StandardBusinessDays> GetDuplicateStandardBusinessDaysByIdAsync (int? standardBusinessDaysId);

        /// <summary>
        /// Get a duplicated a standardBusinessDays by id
        /// </summary>
        /// <remarks>
        /// Returns a duplicated standardBusinessDays identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="standardBusinessDaysId">Id of the standardBusinessDays to be duplicated.</param>
        /// <returns>Task of ApiResponse (StandardBusinessDays)</returns>
        System.Threading.Tasks.Task<ApiResponse<StandardBusinessDays>> GetDuplicateStandardBusinessDaysByIdAsyncWithHttpInfo (int? standardBusinessDaysId);
        /// <summary>
        /// Search standardBusinessDayses by filter
        /// </summary>
        /// <remarks>
        /// Returns the list of standardBusinessDayses that match the given filter.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>Task of List&lt;StandardBusinessDays&gt;</returns>
        System.Threading.Tasks.Task<List<StandardBusinessDays>> GetStandardBusinessDaysByFilterAsync (string filter = null, int? page = null, int? limit = null, string sort = null);

        /// <summary>
        /// Search standardBusinessDayses by filter
        /// </summary>
        /// <remarks>
        /// Returns the list of standardBusinessDayses that match the given filter.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;StandardBusinessDays&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<StandardBusinessDays>>> GetStandardBusinessDaysByFilterAsyncWithHttpInfo (string filter = null, int? page = null, int? limit = null, string sort = null);
        /// <summary>
        /// Get a standardBusinessDays by id
        /// </summary>
        /// <remarks>
        /// Returns the standardBusinessDays identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="standardBusinessDaysId">Id of the standardBusinessDays to be returned.</param>
        /// <returns>Task of StandardBusinessDays</returns>
        System.Threading.Tasks.Task<StandardBusinessDays> GetStandardBusinessDaysByIdAsync (int? standardBusinessDaysId);

        /// <summary>
        /// Get a standardBusinessDays by id
        /// </summary>
        /// <remarks>
        /// Returns the standardBusinessDays identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="standardBusinessDaysId">Id of the standardBusinessDays to be returned.</param>
        /// <returns>Task of ApiResponse (StandardBusinessDays)</returns>
        System.Threading.Tasks.Task<ApiResponse<StandardBusinessDays>> GetStandardBusinessDaysByIdAsyncWithHttpInfo (int? standardBusinessDaysId);
        /// <summary>
        /// Get the files for a standardBusinessDays.
        /// </summary>
        /// <remarks>
        /// Get all existing standardBusinessDays files.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="standardBusinessDaysId">Id of the standardBusinessDays to get files for</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetStandardBusinessDaysFilesAsync (int? standardBusinessDaysId);

        /// <summary>
        /// Get the files for a standardBusinessDays.
        /// </summary>
        /// <remarks>
        /// Get all existing standardBusinessDays files.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="standardBusinessDaysId">Id of the standardBusinessDays to get files for</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetStandardBusinessDaysFilesAsyncWithHttpInfo (int? standardBusinessDaysId);
        /// <summary>
        /// Get the tags for a standardBusinessDays.
        /// </summary>
        /// <remarks>
        /// Get all existing standardBusinessDays tags.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="standardBusinessDaysId">Id of the standardBusinessDays to get tags for</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetStandardBusinessDaysTagsAsync (int? standardBusinessDaysId);

        /// <summary>
        /// Get the tags for a standardBusinessDays.
        /// </summary>
        /// <remarks>
        /// Get all existing standardBusinessDays tags.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="standardBusinessDaysId">Id of the standardBusinessDays to get tags for</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetStandardBusinessDaysTagsAsyncWithHttpInfo (int? standardBusinessDaysId);
        /// <summary>
        /// Update a standardBusinessDays
        /// </summary>
        /// <remarks>
        /// Updates an existing standardBusinessDays using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">StandardBusinessDays to be updated.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateStandardBusinessDaysAsync (StandardBusinessDays body);

        /// <summary>
        /// Update a standardBusinessDays
        /// </summary>
        /// <remarks>
        /// Updates an existing standardBusinessDays using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">StandardBusinessDays to be updated.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateStandardBusinessDaysAsyncWithHttpInfo (StandardBusinessDays body);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class StandardBusinessDaysApi : IStandardBusinessDaysApi
    {
        private Infoplus.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="StandardBusinessDaysApi"/> class.
        /// </summary>
        /// <returns></returns>
        public StandardBusinessDaysApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = Infoplus.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="StandardBusinessDaysApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public StandardBusinessDaysApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Infoplus.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Infoplus.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create a standardBusinessDays Inserts a new standardBusinessDays using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">StandardBusinessDays to be inserted.</param>
        /// <returns>StandardBusinessDays</returns>
        public StandardBusinessDays AddStandardBusinessDays (StandardBusinessDays body)
        {
             ApiResponse<StandardBusinessDays> localVarResponse = AddStandardBusinessDaysWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a standardBusinessDays Inserts a new standardBusinessDays using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">StandardBusinessDays to be inserted.</param>
        /// <returns>ApiResponse of StandardBusinessDays</returns>
        public ApiResponse< StandardBusinessDays > AddStandardBusinessDaysWithHttpInfo (StandardBusinessDays body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling StandardBusinessDaysApi->AddStandardBusinessDays");

            var localVarPath = "/beta/standardBusinessDays";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddStandardBusinessDays", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StandardBusinessDays>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (StandardBusinessDays) Configuration.ApiClient.Deserialize(localVarResponse, typeof(StandardBusinessDays)));
        }

        /// <summary>
        /// Create a standardBusinessDays Inserts a new standardBusinessDays using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">StandardBusinessDays to be inserted.</param>
        /// <returns>Task of StandardBusinessDays</returns>
        public async System.Threading.Tasks.Task<StandardBusinessDays> AddStandardBusinessDaysAsync (StandardBusinessDays body)
        {
             ApiResponse<StandardBusinessDays> localVarResponse = await AddStandardBusinessDaysAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a standardBusinessDays Inserts a new standardBusinessDays using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">StandardBusinessDays to be inserted.</param>
        /// <returns>Task of ApiResponse (StandardBusinessDays)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<StandardBusinessDays>> AddStandardBusinessDaysAsyncWithHttpInfo (StandardBusinessDays body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling StandardBusinessDaysApi->AddStandardBusinessDays");

            var localVarPath = "/beta/standardBusinessDays";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddStandardBusinessDays", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StandardBusinessDays>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (StandardBusinessDays) Configuration.ApiClient.Deserialize(localVarResponse, typeof(StandardBusinessDays)));
        }

        /// <summary>
        /// Add new audit for a standardBusinessDays Adds an audit to an existing standardBusinessDays.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="standardBusinessDaysId">Id of the standardBusinessDays to add an audit to</param>
        /// <param name="standardBusinessDaysAudit">The audit to add</param>
        /// <returns></returns>
        public void AddStandardBusinessDaysAudit (int? standardBusinessDaysId, string standardBusinessDaysAudit)
        {
             AddStandardBusinessDaysAuditWithHttpInfo(standardBusinessDaysId, standardBusinessDaysAudit);
        }

        /// <summary>
        /// Add new audit for a standardBusinessDays Adds an audit to an existing standardBusinessDays.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="standardBusinessDaysId">Id of the standardBusinessDays to add an audit to</param>
        /// <param name="standardBusinessDaysAudit">The audit to add</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AddStandardBusinessDaysAuditWithHttpInfo (int? standardBusinessDaysId, string standardBusinessDaysAudit)
        {
            // verify the required parameter 'standardBusinessDaysId' is set
            if (standardBusinessDaysId == null)
                throw new ApiException(400, "Missing required parameter 'standardBusinessDaysId' when calling StandardBusinessDaysApi->AddStandardBusinessDaysAudit");
            // verify the required parameter 'standardBusinessDaysAudit' is set
            if (standardBusinessDaysAudit == null)
                throw new ApiException(400, "Missing required parameter 'standardBusinessDaysAudit' when calling StandardBusinessDaysApi->AddStandardBusinessDaysAudit");

            var localVarPath = "/beta/standardBusinessDays/{standardBusinessDaysId}/audit/{standardBusinessDaysAudit}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (standardBusinessDaysId != null) localVarPathParams.Add("standardBusinessDaysId", Configuration.ApiClient.ParameterToString(standardBusinessDaysId)); // path parameter
            if (standardBusinessDaysAudit != null) localVarPathParams.Add("standardBusinessDaysAudit", Configuration.ApiClient.ParameterToString(standardBusinessDaysAudit)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddStandardBusinessDaysAudit", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Add new audit for a standardBusinessDays Adds an audit to an existing standardBusinessDays.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="standardBusinessDaysId">Id of the standardBusinessDays to add an audit to</param>
        /// <param name="standardBusinessDaysAudit">The audit to add</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddStandardBusinessDaysAuditAsync (int? standardBusinessDaysId, string standardBusinessDaysAudit)
        {
             await AddStandardBusinessDaysAuditAsyncWithHttpInfo(standardBusinessDaysId, standardBusinessDaysAudit);

        }

        /// <summary>
        /// Add new audit for a standardBusinessDays Adds an audit to an existing standardBusinessDays.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="standardBusinessDaysId">Id of the standardBusinessDays to add an audit to</param>
        /// <param name="standardBusinessDaysAudit">The audit to add</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddStandardBusinessDaysAuditAsyncWithHttpInfo (int? standardBusinessDaysId, string standardBusinessDaysAudit)
        {
            // verify the required parameter 'standardBusinessDaysId' is set
            if (standardBusinessDaysId == null)
                throw new ApiException(400, "Missing required parameter 'standardBusinessDaysId' when calling StandardBusinessDaysApi->AddStandardBusinessDaysAudit");
            // verify the required parameter 'standardBusinessDaysAudit' is set
            if (standardBusinessDaysAudit == null)
                throw new ApiException(400, "Missing required parameter 'standardBusinessDaysAudit' when calling StandardBusinessDaysApi->AddStandardBusinessDaysAudit");

            var localVarPath = "/beta/standardBusinessDays/{standardBusinessDaysId}/audit/{standardBusinessDaysAudit}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (standardBusinessDaysId != null) localVarPathParams.Add("standardBusinessDaysId", Configuration.ApiClient.ParameterToString(standardBusinessDaysId)); // path parameter
            if (standardBusinessDaysAudit != null) localVarPathParams.Add("standardBusinessDaysAudit", Configuration.ApiClient.ParameterToString(standardBusinessDaysAudit)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddStandardBusinessDaysAudit", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Attach a file to a standardBusinessDays Adds a file to an existing standardBusinessDays.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="standardBusinessDaysId">Id of the standardBusinessDays to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns></returns>
        public void AddStandardBusinessDaysFile (int? standardBusinessDaysId, string fileName)
        {
             AddStandardBusinessDaysFileWithHttpInfo(standardBusinessDaysId, fileName);
        }

        /// <summary>
        /// Attach a file to a standardBusinessDays Adds a file to an existing standardBusinessDays.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="standardBusinessDaysId">Id of the standardBusinessDays to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AddStandardBusinessDaysFileWithHttpInfo (int? standardBusinessDaysId, string fileName)
        {
            // verify the required parameter 'standardBusinessDaysId' is set
            if (standardBusinessDaysId == null)
                throw new ApiException(400, "Missing required parameter 'standardBusinessDaysId' when calling StandardBusinessDaysApi->AddStandardBusinessDaysFile");
            // verify the required parameter 'fileName' is set
            if (fileName == null)
                throw new ApiException(400, "Missing required parameter 'fileName' when calling StandardBusinessDaysApi->AddStandardBusinessDaysFile");

            var localVarPath = "/beta/standardBusinessDays/{standardBusinessDaysId}/file/{fileName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (standardBusinessDaysId != null) localVarPathParams.Add("standardBusinessDaysId", Configuration.ApiClient.ParameterToString(standardBusinessDaysId)); // path parameter
            if (fileName != null) localVarPathParams.Add("fileName", Configuration.ApiClient.ParameterToString(fileName)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddStandardBusinessDaysFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Attach a file to a standardBusinessDays Adds a file to an existing standardBusinessDays.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="standardBusinessDaysId">Id of the standardBusinessDays to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddStandardBusinessDaysFileAsync (int? standardBusinessDaysId, string fileName)
        {
             await AddStandardBusinessDaysFileAsyncWithHttpInfo(standardBusinessDaysId, fileName);

        }

        /// <summary>
        /// Attach a file to a standardBusinessDays Adds a file to an existing standardBusinessDays.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="standardBusinessDaysId">Id of the standardBusinessDays to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddStandardBusinessDaysFileAsyncWithHttpInfo (int? standardBusinessDaysId, string fileName)
        {
            // verify the required parameter 'standardBusinessDaysId' is set
            if (standardBusinessDaysId == null)
                throw new ApiException(400, "Missing required parameter 'standardBusinessDaysId' when calling StandardBusinessDaysApi->AddStandardBusinessDaysFile");
            // verify the required parameter 'fileName' is set
            if (fileName == null)
                throw new ApiException(400, "Missing required parameter 'fileName' when calling StandardBusinessDaysApi->AddStandardBusinessDaysFile");

            var localVarPath = "/beta/standardBusinessDays/{standardBusinessDaysId}/file/{fileName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (standardBusinessDaysId != null) localVarPathParams.Add("standardBusinessDaysId", Configuration.ApiClient.ParameterToString(standardBusinessDaysId)); // path parameter
            if (fileName != null) localVarPathParams.Add("fileName", Configuration.ApiClient.ParameterToString(fileName)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddStandardBusinessDaysFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Attach a file to a standardBusinessDays by URL. Adds a file to an existing standardBusinessDays by URL.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="standardBusinessDaysId">Id of the standardBusinessDays to add an file to</param>
        /// <returns></returns>
        public void AddStandardBusinessDaysFileByURL (RecordFile body, int? standardBusinessDaysId)
        {
             AddStandardBusinessDaysFileByURLWithHttpInfo(body, standardBusinessDaysId);
        }

        /// <summary>
        /// Attach a file to a standardBusinessDays by URL. Adds a file to an existing standardBusinessDays by URL.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="standardBusinessDaysId">Id of the standardBusinessDays to add an file to</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AddStandardBusinessDaysFileByURLWithHttpInfo (RecordFile body, int? standardBusinessDaysId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling StandardBusinessDaysApi->AddStandardBusinessDaysFileByURL");
            // verify the required parameter 'standardBusinessDaysId' is set
            if (standardBusinessDaysId == null)
                throw new ApiException(400, "Missing required parameter 'standardBusinessDaysId' when calling StandardBusinessDaysApi->AddStandardBusinessDaysFileByURL");

            var localVarPath = "/beta/standardBusinessDays/{standardBusinessDaysId}/file";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (standardBusinessDaysId != null) localVarPathParams.Add("standardBusinessDaysId", Configuration.ApiClient.ParameterToString(standardBusinessDaysId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddStandardBusinessDaysFileByURL", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Attach a file to a standardBusinessDays by URL. Adds a file to an existing standardBusinessDays by URL.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="standardBusinessDaysId">Id of the standardBusinessDays to add an file to</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddStandardBusinessDaysFileByURLAsync (RecordFile body, int? standardBusinessDaysId)
        {
             await AddStandardBusinessDaysFileByURLAsyncWithHttpInfo(body, standardBusinessDaysId);

        }

        /// <summary>
        /// Attach a file to a standardBusinessDays by URL. Adds a file to an existing standardBusinessDays by URL.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="standardBusinessDaysId">Id of the standardBusinessDays to add an file to</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddStandardBusinessDaysFileByURLAsyncWithHttpInfo (RecordFile body, int? standardBusinessDaysId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling StandardBusinessDaysApi->AddStandardBusinessDaysFileByURL");
            // verify the required parameter 'standardBusinessDaysId' is set
            if (standardBusinessDaysId == null)
                throw new ApiException(400, "Missing required parameter 'standardBusinessDaysId' when calling StandardBusinessDaysApi->AddStandardBusinessDaysFileByURL");

            var localVarPath = "/beta/standardBusinessDays/{standardBusinessDaysId}/file";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (standardBusinessDaysId != null) localVarPathParams.Add("standardBusinessDaysId", Configuration.ApiClient.ParameterToString(standardBusinessDaysId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddStandardBusinessDaysFileByURL", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Add new tags for a standardBusinessDays. Adds a tag to an existing standardBusinessDays.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="standardBusinessDaysId">Id of the standardBusinessDays to add a tag to</param>
        /// <param name="standardBusinessDaysTag">The tag to add</param>
        /// <returns></returns>
        public void AddStandardBusinessDaysTag (int? standardBusinessDaysId, string standardBusinessDaysTag)
        {
             AddStandardBusinessDaysTagWithHttpInfo(standardBusinessDaysId, standardBusinessDaysTag);
        }

        /// <summary>
        /// Add new tags for a standardBusinessDays. Adds a tag to an existing standardBusinessDays.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="standardBusinessDaysId">Id of the standardBusinessDays to add a tag to</param>
        /// <param name="standardBusinessDaysTag">The tag to add</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AddStandardBusinessDaysTagWithHttpInfo (int? standardBusinessDaysId, string standardBusinessDaysTag)
        {
            // verify the required parameter 'standardBusinessDaysId' is set
            if (standardBusinessDaysId == null)
                throw new ApiException(400, "Missing required parameter 'standardBusinessDaysId' when calling StandardBusinessDaysApi->AddStandardBusinessDaysTag");
            // verify the required parameter 'standardBusinessDaysTag' is set
            if (standardBusinessDaysTag == null)
                throw new ApiException(400, "Missing required parameter 'standardBusinessDaysTag' when calling StandardBusinessDaysApi->AddStandardBusinessDaysTag");

            var localVarPath = "/beta/standardBusinessDays/{standardBusinessDaysId}/tag/{standardBusinessDaysTag}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (standardBusinessDaysId != null) localVarPathParams.Add("standardBusinessDaysId", Configuration.ApiClient.ParameterToString(standardBusinessDaysId)); // path parameter
            if (standardBusinessDaysTag != null) localVarPathParams.Add("standardBusinessDaysTag", Configuration.ApiClient.ParameterToString(standardBusinessDaysTag)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddStandardBusinessDaysTag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Add new tags for a standardBusinessDays. Adds a tag to an existing standardBusinessDays.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="standardBusinessDaysId">Id of the standardBusinessDays to add a tag to</param>
        /// <param name="standardBusinessDaysTag">The tag to add</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddStandardBusinessDaysTagAsync (int? standardBusinessDaysId, string standardBusinessDaysTag)
        {
             await AddStandardBusinessDaysTagAsyncWithHttpInfo(standardBusinessDaysId, standardBusinessDaysTag);

        }

        /// <summary>
        /// Add new tags for a standardBusinessDays. Adds a tag to an existing standardBusinessDays.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="standardBusinessDaysId">Id of the standardBusinessDays to add a tag to</param>
        /// <param name="standardBusinessDaysTag">The tag to add</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddStandardBusinessDaysTagAsyncWithHttpInfo (int? standardBusinessDaysId, string standardBusinessDaysTag)
        {
            // verify the required parameter 'standardBusinessDaysId' is set
            if (standardBusinessDaysId == null)
                throw new ApiException(400, "Missing required parameter 'standardBusinessDaysId' when calling StandardBusinessDaysApi->AddStandardBusinessDaysTag");
            // verify the required parameter 'standardBusinessDaysTag' is set
            if (standardBusinessDaysTag == null)
                throw new ApiException(400, "Missing required parameter 'standardBusinessDaysTag' when calling StandardBusinessDaysApi->AddStandardBusinessDaysTag");

            var localVarPath = "/beta/standardBusinessDays/{standardBusinessDaysId}/tag/{standardBusinessDaysTag}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (standardBusinessDaysId != null) localVarPathParams.Add("standardBusinessDaysId", Configuration.ApiClient.ParameterToString(standardBusinessDaysId)); // path parameter
            if (standardBusinessDaysTag != null) localVarPathParams.Add("standardBusinessDaysTag", Configuration.ApiClient.ParameterToString(standardBusinessDaysTag)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddStandardBusinessDaysTag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a standardBusinessDays Deletes the standardBusinessDays identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="standardBusinessDaysId">Id of the standardBusinessDays to be deleted.</param>
        /// <returns></returns>
        public void DeleteStandardBusinessDays (int? standardBusinessDaysId)
        {
             DeleteStandardBusinessDaysWithHttpInfo(standardBusinessDaysId);
        }

        /// <summary>
        /// Delete a standardBusinessDays Deletes the standardBusinessDays identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="standardBusinessDaysId">Id of the standardBusinessDays to be deleted.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteStandardBusinessDaysWithHttpInfo (int? standardBusinessDaysId)
        {
            // verify the required parameter 'standardBusinessDaysId' is set
            if (standardBusinessDaysId == null)
                throw new ApiException(400, "Missing required parameter 'standardBusinessDaysId' when calling StandardBusinessDaysApi->DeleteStandardBusinessDays");

            var localVarPath = "/beta/standardBusinessDays/{standardBusinessDaysId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (standardBusinessDaysId != null) localVarPathParams.Add("standardBusinessDaysId", Configuration.ApiClient.ParameterToString(standardBusinessDaysId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteStandardBusinessDays", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a standardBusinessDays Deletes the standardBusinessDays identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="standardBusinessDaysId">Id of the standardBusinessDays to be deleted.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteStandardBusinessDaysAsync (int? standardBusinessDaysId)
        {
             await DeleteStandardBusinessDaysAsyncWithHttpInfo(standardBusinessDaysId);

        }

        /// <summary>
        /// Delete a standardBusinessDays Deletes the standardBusinessDays identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="standardBusinessDaysId">Id of the standardBusinessDays to be deleted.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteStandardBusinessDaysAsyncWithHttpInfo (int? standardBusinessDaysId)
        {
            // verify the required parameter 'standardBusinessDaysId' is set
            if (standardBusinessDaysId == null)
                throw new ApiException(400, "Missing required parameter 'standardBusinessDaysId' when calling StandardBusinessDaysApi->DeleteStandardBusinessDays");

            var localVarPath = "/beta/standardBusinessDays/{standardBusinessDaysId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (standardBusinessDaysId != null) localVarPathParams.Add("standardBusinessDaysId", Configuration.ApiClient.ParameterToString(standardBusinessDaysId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteStandardBusinessDays", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a file for a standardBusinessDays. Deletes an existing standardBusinessDays file using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="standardBusinessDaysId">Id of the standardBusinessDays to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns></returns>
        public void DeleteStandardBusinessDaysFile (int? standardBusinessDaysId, int? fileId)
        {
             DeleteStandardBusinessDaysFileWithHttpInfo(standardBusinessDaysId, fileId);
        }

        /// <summary>
        /// Delete a file for a standardBusinessDays. Deletes an existing standardBusinessDays file using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="standardBusinessDaysId">Id of the standardBusinessDays to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteStandardBusinessDaysFileWithHttpInfo (int? standardBusinessDaysId, int? fileId)
        {
            // verify the required parameter 'standardBusinessDaysId' is set
            if (standardBusinessDaysId == null)
                throw new ApiException(400, "Missing required parameter 'standardBusinessDaysId' when calling StandardBusinessDaysApi->DeleteStandardBusinessDaysFile");
            // verify the required parameter 'fileId' is set
            if (fileId == null)
                throw new ApiException(400, "Missing required parameter 'fileId' when calling StandardBusinessDaysApi->DeleteStandardBusinessDaysFile");

            var localVarPath = "/beta/standardBusinessDays/{standardBusinessDaysId}/file/{fileId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (standardBusinessDaysId != null) localVarPathParams.Add("standardBusinessDaysId", Configuration.ApiClient.ParameterToString(standardBusinessDaysId)); // path parameter
            if (fileId != null) localVarPathParams.Add("fileId", Configuration.ApiClient.ParameterToString(fileId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteStandardBusinessDaysFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a file for a standardBusinessDays. Deletes an existing standardBusinessDays file using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="standardBusinessDaysId">Id of the standardBusinessDays to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteStandardBusinessDaysFileAsync (int? standardBusinessDaysId, int? fileId)
        {
             await DeleteStandardBusinessDaysFileAsyncWithHttpInfo(standardBusinessDaysId, fileId);

        }

        /// <summary>
        /// Delete a file for a standardBusinessDays. Deletes an existing standardBusinessDays file using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="standardBusinessDaysId">Id of the standardBusinessDays to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteStandardBusinessDaysFileAsyncWithHttpInfo (int? standardBusinessDaysId, int? fileId)
        {
            // verify the required parameter 'standardBusinessDaysId' is set
            if (standardBusinessDaysId == null)
                throw new ApiException(400, "Missing required parameter 'standardBusinessDaysId' when calling StandardBusinessDaysApi->DeleteStandardBusinessDaysFile");
            // verify the required parameter 'fileId' is set
            if (fileId == null)
                throw new ApiException(400, "Missing required parameter 'fileId' when calling StandardBusinessDaysApi->DeleteStandardBusinessDaysFile");

            var localVarPath = "/beta/standardBusinessDays/{standardBusinessDaysId}/file/{fileId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (standardBusinessDaysId != null) localVarPathParams.Add("standardBusinessDaysId", Configuration.ApiClient.ParameterToString(standardBusinessDaysId)); // path parameter
            if (fileId != null) localVarPathParams.Add("fileId", Configuration.ApiClient.ParameterToString(fileId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteStandardBusinessDaysFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a tag for a standardBusinessDays. Deletes an existing standardBusinessDays tag using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="standardBusinessDaysId">Id of the standardBusinessDays to remove tag from</param>
        /// <param name="standardBusinessDaysTag">The tag to delete</param>
        /// <returns></returns>
        public void DeleteStandardBusinessDaysTag (int? standardBusinessDaysId, string standardBusinessDaysTag)
        {
             DeleteStandardBusinessDaysTagWithHttpInfo(standardBusinessDaysId, standardBusinessDaysTag);
        }

        /// <summary>
        /// Delete a tag for a standardBusinessDays. Deletes an existing standardBusinessDays tag using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="standardBusinessDaysId">Id of the standardBusinessDays to remove tag from</param>
        /// <param name="standardBusinessDaysTag">The tag to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteStandardBusinessDaysTagWithHttpInfo (int? standardBusinessDaysId, string standardBusinessDaysTag)
        {
            // verify the required parameter 'standardBusinessDaysId' is set
            if (standardBusinessDaysId == null)
                throw new ApiException(400, "Missing required parameter 'standardBusinessDaysId' when calling StandardBusinessDaysApi->DeleteStandardBusinessDaysTag");
            // verify the required parameter 'standardBusinessDaysTag' is set
            if (standardBusinessDaysTag == null)
                throw new ApiException(400, "Missing required parameter 'standardBusinessDaysTag' when calling StandardBusinessDaysApi->DeleteStandardBusinessDaysTag");

            var localVarPath = "/beta/standardBusinessDays/{standardBusinessDaysId}/tag/{standardBusinessDaysTag}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (standardBusinessDaysId != null) localVarPathParams.Add("standardBusinessDaysId", Configuration.ApiClient.ParameterToString(standardBusinessDaysId)); // path parameter
            if (standardBusinessDaysTag != null) localVarPathParams.Add("standardBusinessDaysTag", Configuration.ApiClient.ParameterToString(standardBusinessDaysTag)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteStandardBusinessDaysTag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a tag for a standardBusinessDays. Deletes an existing standardBusinessDays tag using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="standardBusinessDaysId">Id of the standardBusinessDays to remove tag from</param>
        /// <param name="standardBusinessDaysTag">The tag to delete</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteStandardBusinessDaysTagAsync (int? standardBusinessDaysId, string standardBusinessDaysTag)
        {
             await DeleteStandardBusinessDaysTagAsyncWithHttpInfo(standardBusinessDaysId, standardBusinessDaysTag);

        }

        /// <summary>
        /// Delete a tag for a standardBusinessDays. Deletes an existing standardBusinessDays tag using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="standardBusinessDaysId">Id of the standardBusinessDays to remove tag from</param>
        /// <param name="standardBusinessDaysTag">The tag to delete</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteStandardBusinessDaysTagAsyncWithHttpInfo (int? standardBusinessDaysId, string standardBusinessDaysTag)
        {
            // verify the required parameter 'standardBusinessDaysId' is set
            if (standardBusinessDaysId == null)
                throw new ApiException(400, "Missing required parameter 'standardBusinessDaysId' when calling StandardBusinessDaysApi->DeleteStandardBusinessDaysTag");
            // verify the required parameter 'standardBusinessDaysTag' is set
            if (standardBusinessDaysTag == null)
                throw new ApiException(400, "Missing required parameter 'standardBusinessDaysTag' when calling StandardBusinessDaysApi->DeleteStandardBusinessDaysTag");

            var localVarPath = "/beta/standardBusinessDays/{standardBusinessDaysId}/tag/{standardBusinessDaysTag}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (standardBusinessDaysId != null) localVarPathParams.Add("standardBusinessDaysId", Configuration.ApiClient.ParameterToString(standardBusinessDaysId)); // path parameter
            if (standardBusinessDaysTag != null) localVarPathParams.Add("standardBusinessDaysTag", Configuration.ApiClient.ParameterToString(standardBusinessDaysTag)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteStandardBusinessDaysTag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get a duplicated a standardBusinessDays by id Returns a duplicated standardBusinessDays identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="standardBusinessDaysId">Id of the standardBusinessDays to be duplicated.</param>
        /// <returns>StandardBusinessDays</returns>
        public StandardBusinessDays GetDuplicateStandardBusinessDaysById (int? standardBusinessDaysId)
        {
             ApiResponse<StandardBusinessDays> localVarResponse = GetDuplicateStandardBusinessDaysByIdWithHttpInfo(standardBusinessDaysId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a duplicated a standardBusinessDays by id Returns a duplicated standardBusinessDays identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="standardBusinessDaysId">Id of the standardBusinessDays to be duplicated.</param>
        /// <returns>ApiResponse of StandardBusinessDays</returns>
        public ApiResponse< StandardBusinessDays > GetDuplicateStandardBusinessDaysByIdWithHttpInfo (int? standardBusinessDaysId)
        {
            // verify the required parameter 'standardBusinessDaysId' is set
            if (standardBusinessDaysId == null)
                throw new ApiException(400, "Missing required parameter 'standardBusinessDaysId' when calling StandardBusinessDaysApi->GetDuplicateStandardBusinessDaysById");

            var localVarPath = "/beta/standardBusinessDays/duplicate/{standardBusinessDaysId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (standardBusinessDaysId != null) localVarPathParams.Add("standardBusinessDaysId", Configuration.ApiClient.ParameterToString(standardBusinessDaysId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDuplicateStandardBusinessDaysById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StandardBusinessDays>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (StandardBusinessDays) Configuration.ApiClient.Deserialize(localVarResponse, typeof(StandardBusinessDays)));
        }

        /// <summary>
        /// Get a duplicated a standardBusinessDays by id Returns a duplicated standardBusinessDays identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="standardBusinessDaysId">Id of the standardBusinessDays to be duplicated.</param>
        /// <returns>Task of StandardBusinessDays</returns>
        public async System.Threading.Tasks.Task<StandardBusinessDays> GetDuplicateStandardBusinessDaysByIdAsync (int? standardBusinessDaysId)
        {
             ApiResponse<StandardBusinessDays> localVarResponse = await GetDuplicateStandardBusinessDaysByIdAsyncWithHttpInfo(standardBusinessDaysId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a duplicated a standardBusinessDays by id Returns a duplicated standardBusinessDays identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="standardBusinessDaysId">Id of the standardBusinessDays to be duplicated.</param>
        /// <returns>Task of ApiResponse (StandardBusinessDays)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<StandardBusinessDays>> GetDuplicateStandardBusinessDaysByIdAsyncWithHttpInfo (int? standardBusinessDaysId)
        {
            // verify the required parameter 'standardBusinessDaysId' is set
            if (standardBusinessDaysId == null)
                throw new ApiException(400, "Missing required parameter 'standardBusinessDaysId' when calling StandardBusinessDaysApi->GetDuplicateStandardBusinessDaysById");

            var localVarPath = "/beta/standardBusinessDays/duplicate/{standardBusinessDaysId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (standardBusinessDaysId != null) localVarPathParams.Add("standardBusinessDaysId", Configuration.ApiClient.ParameterToString(standardBusinessDaysId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDuplicateStandardBusinessDaysById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StandardBusinessDays>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (StandardBusinessDays) Configuration.ApiClient.Deserialize(localVarResponse, typeof(StandardBusinessDays)));
        }

        /// <summary>
        /// Search standardBusinessDayses by filter Returns the list of standardBusinessDayses that match the given filter.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>List&lt;StandardBusinessDays&gt;</returns>
        public List<StandardBusinessDays> GetStandardBusinessDaysByFilter (string filter = null, int? page = null, int? limit = null, string sort = null)
        {
             ApiResponse<List<StandardBusinessDays>> localVarResponse = GetStandardBusinessDaysByFilterWithHttpInfo(filter, page, limit, sort);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Search standardBusinessDayses by filter Returns the list of standardBusinessDayses that match the given filter.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>ApiResponse of List&lt;StandardBusinessDays&gt;</returns>
        public ApiResponse< List<StandardBusinessDays> > GetStandardBusinessDaysByFilterWithHttpInfo (string filter = null, int? page = null, int? limit = null, string sort = null)
        {

            var localVarPath = "/beta/standardBusinessDays/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (filter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (page != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStandardBusinessDaysByFilter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<StandardBusinessDays>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<StandardBusinessDays>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<StandardBusinessDays>)));
        }

        /// <summary>
        /// Search standardBusinessDayses by filter Returns the list of standardBusinessDayses that match the given filter.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>Task of List&lt;StandardBusinessDays&gt;</returns>
        public async System.Threading.Tasks.Task<List<StandardBusinessDays>> GetStandardBusinessDaysByFilterAsync (string filter = null, int? page = null, int? limit = null, string sort = null)
        {
             ApiResponse<List<StandardBusinessDays>> localVarResponse = await GetStandardBusinessDaysByFilterAsyncWithHttpInfo(filter, page, limit, sort);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Search standardBusinessDayses by filter Returns the list of standardBusinessDayses that match the given filter.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;StandardBusinessDays&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<StandardBusinessDays>>> GetStandardBusinessDaysByFilterAsyncWithHttpInfo (string filter = null, int? page = null, int? limit = null, string sort = null)
        {

            var localVarPath = "/beta/standardBusinessDays/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (filter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (page != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStandardBusinessDaysByFilter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<StandardBusinessDays>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<StandardBusinessDays>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<StandardBusinessDays>)));
        }

        /// <summary>
        /// Get a standardBusinessDays by id Returns the standardBusinessDays identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="standardBusinessDaysId">Id of the standardBusinessDays to be returned.</param>
        /// <returns>StandardBusinessDays</returns>
        public StandardBusinessDays GetStandardBusinessDaysById (int? standardBusinessDaysId)
        {
             ApiResponse<StandardBusinessDays> localVarResponse = GetStandardBusinessDaysByIdWithHttpInfo(standardBusinessDaysId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a standardBusinessDays by id Returns the standardBusinessDays identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="standardBusinessDaysId">Id of the standardBusinessDays to be returned.</param>
        /// <returns>ApiResponse of StandardBusinessDays</returns>
        public ApiResponse< StandardBusinessDays > GetStandardBusinessDaysByIdWithHttpInfo (int? standardBusinessDaysId)
        {
            // verify the required parameter 'standardBusinessDaysId' is set
            if (standardBusinessDaysId == null)
                throw new ApiException(400, "Missing required parameter 'standardBusinessDaysId' when calling StandardBusinessDaysApi->GetStandardBusinessDaysById");

            var localVarPath = "/beta/standardBusinessDays/{standardBusinessDaysId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (standardBusinessDaysId != null) localVarPathParams.Add("standardBusinessDaysId", Configuration.ApiClient.ParameterToString(standardBusinessDaysId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStandardBusinessDaysById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StandardBusinessDays>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (StandardBusinessDays) Configuration.ApiClient.Deserialize(localVarResponse, typeof(StandardBusinessDays)));
        }

        /// <summary>
        /// Get a standardBusinessDays by id Returns the standardBusinessDays identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="standardBusinessDaysId">Id of the standardBusinessDays to be returned.</param>
        /// <returns>Task of StandardBusinessDays</returns>
        public async System.Threading.Tasks.Task<StandardBusinessDays> GetStandardBusinessDaysByIdAsync (int? standardBusinessDaysId)
        {
             ApiResponse<StandardBusinessDays> localVarResponse = await GetStandardBusinessDaysByIdAsyncWithHttpInfo(standardBusinessDaysId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a standardBusinessDays by id Returns the standardBusinessDays identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="standardBusinessDaysId">Id of the standardBusinessDays to be returned.</param>
        /// <returns>Task of ApiResponse (StandardBusinessDays)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<StandardBusinessDays>> GetStandardBusinessDaysByIdAsyncWithHttpInfo (int? standardBusinessDaysId)
        {
            // verify the required parameter 'standardBusinessDaysId' is set
            if (standardBusinessDaysId == null)
                throw new ApiException(400, "Missing required parameter 'standardBusinessDaysId' when calling StandardBusinessDaysApi->GetStandardBusinessDaysById");

            var localVarPath = "/beta/standardBusinessDays/{standardBusinessDaysId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (standardBusinessDaysId != null) localVarPathParams.Add("standardBusinessDaysId", Configuration.ApiClient.ParameterToString(standardBusinessDaysId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStandardBusinessDaysById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StandardBusinessDays>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (StandardBusinessDays) Configuration.ApiClient.Deserialize(localVarResponse, typeof(StandardBusinessDays)));
        }

        /// <summary>
        /// Get the files for a standardBusinessDays. Get all existing standardBusinessDays files.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="standardBusinessDaysId">Id of the standardBusinessDays to get files for</param>
        /// <returns></returns>
        public void GetStandardBusinessDaysFiles (int? standardBusinessDaysId)
        {
             GetStandardBusinessDaysFilesWithHttpInfo(standardBusinessDaysId);
        }

        /// <summary>
        /// Get the files for a standardBusinessDays. Get all existing standardBusinessDays files.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="standardBusinessDaysId">Id of the standardBusinessDays to get files for</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GetStandardBusinessDaysFilesWithHttpInfo (int? standardBusinessDaysId)
        {
            // verify the required parameter 'standardBusinessDaysId' is set
            if (standardBusinessDaysId == null)
                throw new ApiException(400, "Missing required parameter 'standardBusinessDaysId' when calling StandardBusinessDaysApi->GetStandardBusinessDaysFiles");

            var localVarPath = "/beta/standardBusinessDays/{standardBusinessDaysId}/file";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (standardBusinessDaysId != null) localVarPathParams.Add("standardBusinessDaysId", Configuration.ApiClient.ParameterToString(standardBusinessDaysId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStandardBusinessDaysFiles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get the files for a standardBusinessDays. Get all existing standardBusinessDays files.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="standardBusinessDaysId">Id of the standardBusinessDays to get files for</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetStandardBusinessDaysFilesAsync (int? standardBusinessDaysId)
        {
             await GetStandardBusinessDaysFilesAsyncWithHttpInfo(standardBusinessDaysId);

        }

        /// <summary>
        /// Get the files for a standardBusinessDays. Get all existing standardBusinessDays files.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="standardBusinessDaysId">Id of the standardBusinessDays to get files for</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetStandardBusinessDaysFilesAsyncWithHttpInfo (int? standardBusinessDaysId)
        {
            // verify the required parameter 'standardBusinessDaysId' is set
            if (standardBusinessDaysId == null)
                throw new ApiException(400, "Missing required parameter 'standardBusinessDaysId' when calling StandardBusinessDaysApi->GetStandardBusinessDaysFiles");

            var localVarPath = "/beta/standardBusinessDays/{standardBusinessDaysId}/file";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (standardBusinessDaysId != null) localVarPathParams.Add("standardBusinessDaysId", Configuration.ApiClient.ParameterToString(standardBusinessDaysId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStandardBusinessDaysFiles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get the tags for a standardBusinessDays. Get all existing standardBusinessDays tags.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="standardBusinessDaysId">Id of the standardBusinessDays to get tags for</param>
        /// <returns></returns>
        public void GetStandardBusinessDaysTags (int? standardBusinessDaysId)
        {
             GetStandardBusinessDaysTagsWithHttpInfo(standardBusinessDaysId);
        }

        /// <summary>
        /// Get the tags for a standardBusinessDays. Get all existing standardBusinessDays tags.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="standardBusinessDaysId">Id of the standardBusinessDays to get tags for</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GetStandardBusinessDaysTagsWithHttpInfo (int? standardBusinessDaysId)
        {
            // verify the required parameter 'standardBusinessDaysId' is set
            if (standardBusinessDaysId == null)
                throw new ApiException(400, "Missing required parameter 'standardBusinessDaysId' when calling StandardBusinessDaysApi->GetStandardBusinessDaysTags");

            var localVarPath = "/beta/standardBusinessDays/{standardBusinessDaysId}/tag";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (standardBusinessDaysId != null) localVarPathParams.Add("standardBusinessDaysId", Configuration.ApiClient.ParameterToString(standardBusinessDaysId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStandardBusinessDaysTags", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get the tags for a standardBusinessDays. Get all existing standardBusinessDays tags.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="standardBusinessDaysId">Id of the standardBusinessDays to get tags for</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetStandardBusinessDaysTagsAsync (int? standardBusinessDaysId)
        {
             await GetStandardBusinessDaysTagsAsyncWithHttpInfo(standardBusinessDaysId);

        }

        /// <summary>
        /// Get the tags for a standardBusinessDays. Get all existing standardBusinessDays tags.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="standardBusinessDaysId">Id of the standardBusinessDays to get tags for</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetStandardBusinessDaysTagsAsyncWithHttpInfo (int? standardBusinessDaysId)
        {
            // verify the required parameter 'standardBusinessDaysId' is set
            if (standardBusinessDaysId == null)
                throw new ApiException(400, "Missing required parameter 'standardBusinessDaysId' when calling StandardBusinessDaysApi->GetStandardBusinessDaysTags");

            var localVarPath = "/beta/standardBusinessDays/{standardBusinessDaysId}/tag";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (standardBusinessDaysId != null) localVarPathParams.Add("standardBusinessDaysId", Configuration.ApiClient.ParameterToString(standardBusinessDaysId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStandardBusinessDaysTags", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update a standardBusinessDays Updates an existing standardBusinessDays using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">StandardBusinessDays to be updated.</param>
        /// <returns></returns>
        public void UpdateStandardBusinessDays (StandardBusinessDays body)
        {
             UpdateStandardBusinessDaysWithHttpInfo(body);
        }

        /// <summary>
        /// Update a standardBusinessDays Updates an existing standardBusinessDays using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">StandardBusinessDays to be updated.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateStandardBusinessDaysWithHttpInfo (StandardBusinessDays body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling StandardBusinessDaysApi->UpdateStandardBusinessDays");

            var localVarPath = "/beta/standardBusinessDays";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateStandardBusinessDays", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update a standardBusinessDays Updates an existing standardBusinessDays using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">StandardBusinessDays to be updated.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateStandardBusinessDaysAsync (StandardBusinessDays body)
        {
             await UpdateStandardBusinessDaysAsyncWithHttpInfo(body);

        }

        /// <summary>
        /// Update a standardBusinessDays Updates an existing standardBusinessDays using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">StandardBusinessDays to be updated.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateStandardBusinessDaysAsyncWithHttpInfo (StandardBusinessDays body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling StandardBusinessDaysApi->UpdateStandardBusinessDays");

            var localVarPath = "/beta/standardBusinessDays";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateStandardBusinessDays", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

    }
}
