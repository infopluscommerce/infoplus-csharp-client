/* 
 * Infoplus API
 *
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Infoplus.Client;
using Infoplus.Model;

namespace Infoplus.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISupplementApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create a supplement
        /// </summary>
        /// <remarks>
        /// Inserts a new supplement using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Supplement to be inserted.</param>
        /// <returns>Supplement</returns>
        Supplement AddSupplement (Supplement body);

        /// <summary>
        /// Create a supplement
        /// </summary>
        /// <remarks>
        /// Inserts a new supplement using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Supplement to be inserted.</param>
        /// <returns>ApiResponse of Supplement</returns>
        ApiResponse<Supplement> AddSupplementWithHttpInfo (Supplement body);
        /// <summary>
        /// Add new audit for a supplement
        /// </summary>
        /// <remarks>
        /// Adds an audit to an existing supplement.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="supplementId">Id of the supplement to add an audit to</param>
        /// <param name="supplementAudit">The audit to add</param>
        /// <returns></returns>
        void AddSupplementAudit (int? supplementId, string supplementAudit);

        /// <summary>
        /// Add new audit for a supplement
        /// </summary>
        /// <remarks>
        /// Adds an audit to an existing supplement.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="supplementId">Id of the supplement to add an audit to</param>
        /// <param name="supplementAudit">The audit to add</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddSupplementAuditWithHttpInfo (int? supplementId, string supplementAudit);
        /// <summary>
        /// Attach a file to a supplement
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing supplement.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="supplementId">Id of the supplement to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns></returns>
        void AddSupplementFile (int? supplementId, string fileName);

        /// <summary>
        /// Attach a file to a supplement
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing supplement.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="supplementId">Id of the supplement to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddSupplementFileWithHttpInfo (int? supplementId, string fileName);
        /// <summary>
        /// Attach a file to a supplement by URL.
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing supplement by URL.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="supplementId">Id of the supplement to add an file to</param>
        /// <returns></returns>
        void AddSupplementFileByURL (RecordFile body, int? supplementId);

        /// <summary>
        /// Attach a file to a supplement by URL.
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing supplement by URL.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="supplementId">Id of the supplement to add an file to</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddSupplementFileByURLWithHttpInfo (RecordFile body, int? supplementId);
        /// <summary>
        /// Add new tags for a supplement.
        /// </summary>
        /// <remarks>
        /// Adds a tag to an existing supplement.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="supplementId">Id of the supplement to add a tag to</param>
        /// <param name="supplementTag">The tag to add</param>
        /// <returns></returns>
        void AddSupplementTag (int? supplementId, string supplementTag);

        /// <summary>
        /// Add new tags for a supplement.
        /// </summary>
        /// <remarks>
        /// Adds a tag to an existing supplement.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="supplementId">Id of the supplement to add a tag to</param>
        /// <param name="supplementTag">The tag to add</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddSupplementTagWithHttpInfo (int? supplementId, string supplementTag);
        /// <summary>
        /// Delete a supplement
        /// </summary>
        /// <remarks>
        /// Deletes the supplement identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="supplementId">Id of the supplement to be deleted.</param>
        /// <returns></returns>
        void DeleteSupplement (int? supplementId);

        /// <summary>
        /// Delete a supplement
        /// </summary>
        /// <remarks>
        /// Deletes the supplement identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="supplementId">Id of the supplement to be deleted.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteSupplementWithHttpInfo (int? supplementId);
        /// <summary>
        /// Delete a file for a supplement.
        /// </summary>
        /// <remarks>
        /// Deletes an existing supplement file using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="supplementId">Id of the supplement to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns></returns>
        void DeleteSupplementFile (int? supplementId, int? fileId);

        /// <summary>
        /// Delete a file for a supplement.
        /// </summary>
        /// <remarks>
        /// Deletes an existing supplement file using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="supplementId">Id of the supplement to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteSupplementFileWithHttpInfo (int? supplementId, int? fileId);
        /// <summary>
        /// Delete a tag for a supplement.
        /// </summary>
        /// <remarks>
        /// Deletes an existing supplement tag using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="supplementId">Id of the supplement to remove tag from</param>
        /// <param name="supplementTag">The tag to delete</param>
        /// <returns></returns>
        void DeleteSupplementTag (int? supplementId, string supplementTag);

        /// <summary>
        /// Delete a tag for a supplement.
        /// </summary>
        /// <remarks>
        /// Deletes an existing supplement tag using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="supplementId">Id of the supplement to remove tag from</param>
        /// <param name="supplementTag">The tag to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteSupplementTagWithHttpInfo (int? supplementId, string supplementTag);
        /// <summary>
        /// Get a duplicated a supplement by id
        /// </summary>
        /// <remarks>
        /// Returns a duplicated supplement identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="supplementId">Id of the supplement to be duplicated.</param>
        /// <returns>Supplement</returns>
        Supplement GetDuplicateSupplementById (int? supplementId);

        /// <summary>
        /// Get a duplicated a supplement by id
        /// </summary>
        /// <remarks>
        /// Returns a duplicated supplement identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="supplementId">Id of the supplement to be duplicated.</param>
        /// <returns>ApiResponse of Supplement</returns>
        ApiResponse<Supplement> GetDuplicateSupplementByIdWithHttpInfo (int? supplementId);
        /// <summary>
        /// Search supplements by filter
        /// </summary>
        /// <remarks>
        /// Returns the list of supplements that match the given filter.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>List&lt;Supplement&gt;</returns>
        List<Supplement> GetSupplementByFilter (string filter = null, int? page = null, int? limit = null, string sort = null);

        /// <summary>
        /// Search supplements by filter
        /// </summary>
        /// <remarks>
        /// Returns the list of supplements that match the given filter.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>ApiResponse of List&lt;Supplement&gt;</returns>
        ApiResponse<List<Supplement>> GetSupplementByFilterWithHttpInfo (string filter = null, int? page = null, int? limit = null, string sort = null);
        /// <summary>
        /// Get a supplement by id
        /// </summary>
        /// <remarks>
        /// Returns the supplement identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="supplementId">Id of the supplement to be returned.</param>
        /// <returns>Supplement</returns>
        Supplement GetSupplementById (int? supplementId);

        /// <summary>
        /// Get a supplement by id
        /// </summary>
        /// <remarks>
        /// Returns the supplement identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="supplementId">Id of the supplement to be returned.</param>
        /// <returns>ApiResponse of Supplement</returns>
        ApiResponse<Supplement> GetSupplementByIdWithHttpInfo (int? supplementId);
        /// <summary>
        /// Get the files for a supplement.
        /// </summary>
        /// <remarks>
        /// Get all existing supplement files.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="supplementId">Id of the supplement to get files for</param>
        /// <returns></returns>
        void GetSupplementFiles (int? supplementId);

        /// <summary>
        /// Get the files for a supplement.
        /// </summary>
        /// <remarks>
        /// Get all existing supplement files.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="supplementId">Id of the supplement to get files for</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetSupplementFilesWithHttpInfo (int? supplementId);
        /// <summary>
        /// Get the tags for a supplement.
        /// </summary>
        /// <remarks>
        /// Get all existing supplement tags.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="supplementId">Id of the supplement to get tags for</param>
        /// <returns></returns>
        void GetSupplementTags (int? supplementId);

        /// <summary>
        /// Get the tags for a supplement.
        /// </summary>
        /// <remarks>
        /// Get all existing supplement tags.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="supplementId">Id of the supplement to get tags for</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetSupplementTagsWithHttpInfo (int? supplementId);
        /// <summary>
        /// Update a supplement
        /// </summary>
        /// <remarks>
        /// Updates an existing supplement using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Supplement to be updated.</param>
        /// <returns></returns>
        void UpdateSupplement (Supplement body);

        /// <summary>
        /// Update a supplement
        /// </summary>
        /// <remarks>
        /// Updates an existing supplement using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Supplement to be updated.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateSupplementWithHttpInfo (Supplement body);
        /// <summary>
        /// Update a supplement custom fields
        /// </summary>
        /// <remarks>
        /// Updates an existing supplement custom fields using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Supplement to be updated.</param>
        /// <returns></returns>
        void UpdateSupplementCustomFields (Supplement body);

        /// <summary>
        /// Update a supplement custom fields
        /// </summary>
        /// <remarks>
        /// Updates an existing supplement custom fields using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Supplement to be updated.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateSupplementCustomFieldsWithHttpInfo (Supplement body);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create a supplement
        /// </summary>
        /// <remarks>
        /// Inserts a new supplement using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Supplement to be inserted.</param>
        /// <returns>Task of Supplement</returns>
        System.Threading.Tasks.Task<Supplement> AddSupplementAsync (Supplement body);

        /// <summary>
        /// Create a supplement
        /// </summary>
        /// <remarks>
        /// Inserts a new supplement using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Supplement to be inserted.</param>
        /// <returns>Task of ApiResponse (Supplement)</returns>
        System.Threading.Tasks.Task<ApiResponse<Supplement>> AddSupplementAsyncWithHttpInfo (Supplement body);
        /// <summary>
        /// Add new audit for a supplement
        /// </summary>
        /// <remarks>
        /// Adds an audit to an existing supplement.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="supplementId">Id of the supplement to add an audit to</param>
        /// <param name="supplementAudit">The audit to add</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddSupplementAuditAsync (int? supplementId, string supplementAudit);

        /// <summary>
        /// Add new audit for a supplement
        /// </summary>
        /// <remarks>
        /// Adds an audit to an existing supplement.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="supplementId">Id of the supplement to add an audit to</param>
        /// <param name="supplementAudit">The audit to add</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddSupplementAuditAsyncWithHttpInfo (int? supplementId, string supplementAudit);
        /// <summary>
        /// Attach a file to a supplement
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing supplement.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="supplementId">Id of the supplement to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddSupplementFileAsync (int? supplementId, string fileName);

        /// <summary>
        /// Attach a file to a supplement
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing supplement.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="supplementId">Id of the supplement to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddSupplementFileAsyncWithHttpInfo (int? supplementId, string fileName);
        /// <summary>
        /// Attach a file to a supplement by URL.
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing supplement by URL.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="supplementId">Id of the supplement to add an file to</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddSupplementFileByURLAsync (RecordFile body, int? supplementId);

        /// <summary>
        /// Attach a file to a supplement by URL.
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing supplement by URL.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="supplementId">Id of the supplement to add an file to</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddSupplementFileByURLAsyncWithHttpInfo (RecordFile body, int? supplementId);
        /// <summary>
        /// Add new tags for a supplement.
        /// </summary>
        /// <remarks>
        /// Adds a tag to an existing supplement.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="supplementId">Id of the supplement to add a tag to</param>
        /// <param name="supplementTag">The tag to add</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddSupplementTagAsync (int? supplementId, string supplementTag);

        /// <summary>
        /// Add new tags for a supplement.
        /// </summary>
        /// <remarks>
        /// Adds a tag to an existing supplement.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="supplementId">Id of the supplement to add a tag to</param>
        /// <param name="supplementTag">The tag to add</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddSupplementTagAsyncWithHttpInfo (int? supplementId, string supplementTag);
        /// <summary>
        /// Delete a supplement
        /// </summary>
        /// <remarks>
        /// Deletes the supplement identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="supplementId">Id of the supplement to be deleted.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteSupplementAsync (int? supplementId);

        /// <summary>
        /// Delete a supplement
        /// </summary>
        /// <remarks>
        /// Deletes the supplement identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="supplementId">Id of the supplement to be deleted.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteSupplementAsyncWithHttpInfo (int? supplementId);
        /// <summary>
        /// Delete a file for a supplement.
        /// </summary>
        /// <remarks>
        /// Deletes an existing supplement file using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="supplementId">Id of the supplement to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteSupplementFileAsync (int? supplementId, int? fileId);

        /// <summary>
        /// Delete a file for a supplement.
        /// </summary>
        /// <remarks>
        /// Deletes an existing supplement file using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="supplementId">Id of the supplement to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteSupplementFileAsyncWithHttpInfo (int? supplementId, int? fileId);
        /// <summary>
        /// Delete a tag for a supplement.
        /// </summary>
        /// <remarks>
        /// Deletes an existing supplement tag using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="supplementId">Id of the supplement to remove tag from</param>
        /// <param name="supplementTag">The tag to delete</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteSupplementTagAsync (int? supplementId, string supplementTag);

        /// <summary>
        /// Delete a tag for a supplement.
        /// </summary>
        /// <remarks>
        /// Deletes an existing supplement tag using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="supplementId">Id of the supplement to remove tag from</param>
        /// <param name="supplementTag">The tag to delete</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteSupplementTagAsyncWithHttpInfo (int? supplementId, string supplementTag);
        /// <summary>
        /// Get a duplicated a supplement by id
        /// </summary>
        /// <remarks>
        /// Returns a duplicated supplement identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="supplementId">Id of the supplement to be duplicated.</param>
        /// <returns>Task of Supplement</returns>
        System.Threading.Tasks.Task<Supplement> GetDuplicateSupplementByIdAsync (int? supplementId);

        /// <summary>
        /// Get a duplicated a supplement by id
        /// </summary>
        /// <remarks>
        /// Returns a duplicated supplement identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="supplementId">Id of the supplement to be duplicated.</param>
        /// <returns>Task of ApiResponse (Supplement)</returns>
        System.Threading.Tasks.Task<ApiResponse<Supplement>> GetDuplicateSupplementByIdAsyncWithHttpInfo (int? supplementId);
        /// <summary>
        /// Search supplements by filter
        /// </summary>
        /// <remarks>
        /// Returns the list of supplements that match the given filter.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>Task of List&lt;Supplement&gt;</returns>
        System.Threading.Tasks.Task<List<Supplement>> GetSupplementByFilterAsync (string filter = null, int? page = null, int? limit = null, string sort = null);

        /// <summary>
        /// Search supplements by filter
        /// </summary>
        /// <remarks>
        /// Returns the list of supplements that match the given filter.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Supplement&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Supplement>>> GetSupplementByFilterAsyncWithHttpInfo (string filter = null, int? page = null, int? limit = null, string sort = null);
        /// <summary>
        /// Get a supplement by id
        /// </summary>
        /// <remarks>
        /// Returns the supplement identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="supplementId">Id of the supplement to be returned.</param>
        /// <returns>Task of Supplement</returns>
        System.Threading.Tasks.Task<Supplement> GetSupplementByIdAsync (int? supplementId);

        /// <summary>
        /// Get a supplement by id
        /// </summary>
        /// <remarks>
        /// Returns the supplement identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="supplementId">Id of the supplement to be returned.</param>
        /// <returns>Task of ApiResponse (Supplement)</returns>
        System.Threading.Tasks.Task<ApiResponse<Supplement>> GetSupplementByIdAsyncWithHttpInfo (int? supplementId);
        /// <summary>
        /// Get the files for a supplement.
        /// </summary>
        /// <remarks>
        /// Get all existing supplement files.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="supplementId">Id of the supplement to get files for</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetSupplementFilesAsync (int? supplementId);

        /// <summary>
        /// Get the files for a supplement.
        /// </summary>
        /// <remarks>
        /// Get all existing supplement files.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="supplementId">Id of the supplement to get files for</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetSupplementFilesAsyncWithHttpInfo (int? supplementId);
        /// <summary>
        /// Get the tags for a supplement.
        /// </summary>
        /// <remarks>
        /// Get all existing supplement tags.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="supplementId">Id of the supplement to get tags for</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetSupplementTagsAsync (int? supplementId);

        /// <summary>
        /// Get the tags for a supplement.
        /// </summary>
        /// <remarks>
        /// Get all existing supplement tags.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="supplementId">Id of the supplement to get tags for</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetSupplementTagsAsyncWithHttpInfo (int? supplementId);
        /// <summary>
        /// Update a supplement
        /// </summary>
        /// <remarks>
        /// Updates an existing supplement using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Supplement to be updated.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateSupplementAsync (Supplement body);

        /// <summary>
        /// Update a supplement
        /// </summary>
        /// <remarks>
        /// Updates an existing supplement using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Supplement to be updated.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateSupplementAsyncWithHttpInfo (Supplement body);
        /// <summary>
        /// Update a supplement custom fields
        /// </summary>
        /// <remarks>
        /// Updates an existing supplement custom fields using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Supplement to be updated.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateSupplementCustomFieldsAsync (Supplement body);

        /// <summary>
        /// Update a supplement custom fields
        /// </summary>
        /// <remarks>
        /// Updates an existing supplement custom fields using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Supplement to be updated.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateSupplementCustomFieldsAsyncWithHttpInfo (Supplement body);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class SupplementApi : ISupplementApi
    {
        private Infoplus.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SupplementApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SupplementApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = Infoplus.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SupplementApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SupplementApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Infoplus.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Infoplus.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create a supplement Inserts a new supplement using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Supplement to be inserted.</param>
        /// <returns>Supplement</returns>
        public Supplement AddSupplement (Supplement body)
        {
             ApiResponse<Supplement> localVarResponse = AddSupplementWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a supplement Inserts a new supplement using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Supplement to be inserted.</param>
        /// <returns>ApiResponse of Supplement</returns>
        public ApiResponse< Supplement > AddSupplementWithHttpInfo (Supplement body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling SupplementApi->AddSupplement");

            var localVarPath = "/beta/supplement";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddSupplement", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Supplement>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Supplement) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Supplement)));
        }

        /// <summary>
        /// Create a supplement Inserts a new supplement using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Supplement to be inserted.</param>
        /// <returns>Task of Supplement</returns>
        public async System.Threading.Tasks.Task<Supplement> AddSupplementAsync (Supplement body)
        {
             ApiResponse<Supplement> localVarResponse = await AddSupplementAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a supplement Inserts a new supplement using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Supplement to be inserted.</param>
        /// <returns>Task of ApiResponse (Supplement)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Supplement>> AddSupplementAsyncWithHttpInfo (Supplement body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling SupplementApi->AddSupplement");

            var localVarPath = "/beta/supplement";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddSupplement", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Supplement>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Supplement) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Supplement)));
        }

        /// <summary>
        /// Add new audit for a supplement Adds an audit to an existing supplement.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="supplementId">Id of the supplement to add an audit to</param>
        /// <param name="supplementAudit">The audit to add</param>
        /// <returns></returns>
        public void AddSupplementAudit (int? supplementId, string supplementAudit)
        {
             AddSupplementAuditWithHttpInfo(supplementId, supplementAudit);
        }

        /// <summary>
        /// Add new audit for a supplement Adds an audit to an existing supplement.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="supplementId">Id of the supplement to add an audit to</param>
        /// <param name="supplementAudit">The audit to add</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AddSupplementAuditWithHttpInfo (int? supplementId, string supplementAudit)
        {
            // verify the required parameter 'supplementId' is set
            if (supplementId == null)
                throw new ApiException(400, "Missing required parameter 'supplementId' when calling SupplementApi->AddSupplementAudit");
            // verify the required parameter 'supplementAudit' is set
            if (supplementAudit == null)
                throw new ApiException(400, "Missing required parameter 'supplementAudit' when calling SupplementApi->AddSupplementAudit");

            var localVarPath = "/beta/supplement/{supplementId}/audit/{supplementAudit}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (supplementId != null) localVarPathParams.Add("supplementId", Configuration.ApiClient.ParameterToString(supplementId)); // path parameter
            if (supplementAudit != null) localVarPathParams.Add("supplementAudit", Configuration.ApiClient.ParameterToString(supplementAudit)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddSupplementAudit", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Add new audit for a supplement Adds an audit to an existing supplement.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="supplementId">Id of the supplement to add an audit to</param>
        /// <param name="supplementAudit">The audit to add</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddSupplementAuditAsync (int? supplementId, string supplementAudit)
        {
             await AddSupplementAuditAsyncWithHttpInfo(supplementId, supplementAudit);

        }

        /// <summary>
        /// Add new audit for a supplement Adds an audit to an existing supplement.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="supplementId">Id of the supplement to add an audit to</param>
        /// <param name="supplementAudit">The audit to add</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddSupplementAuditAsyncWithHttpInfo (int? supplementId, string supplementAudit)
        {
            // verify the required parameter 'supplementId' is set
            if (supplementId == null)
                throw new ApiException(400, "Missing required parameter 'supplementId' when calling SupplementApi->AddSupplementAudit");
            // verify the required parameter 'supplementAudit' is set
            if (supplementAudit == null)
                throw new ApiException(400, "Missing required parameter 'supplementAudit' when calling SupplementApi->AddSupplementAudit");

            var localVarPath = "/beta/supplement/{supplementId}/audit/{supplementAudit}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (supplementId != null) localVarPathParams.Add("supplementId", Configuration.ApiClient.ParameterToString(supplementId)); // path parameter
            if (supplementAudit != null) localVarPathParams.Add("supplementAudit", Configuration.ApiClient.ParameterToString(supplementAudit)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddSupplementAudit", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Attach a file to a supplement Adds a file to an existing supplement.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="supplementId">Id of the supplement to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns></returns>
        public void AddSupplementFile (int? supplementId, string fileName)
        {
             AddSupplementFileWithHttpInfo(supplementId, fileName);
        }

        /// <summary>
        /// Attach a file to a supplement Adds a file to an existing supplement.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="supplementId">Id of the supplement to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AddSupplementFileWithHttpInfo (int? supplementId, string fileName)
        {
            // verify the required parameter 'supplementId' is set
            if (supplementId == null)
                throw new ApiException(400, "Missing required parameter 'supplementId' when calling SupplementApi->AddSupplementFile");
            // verify the required parameter 'fileName' is set
            if (fileName == null)
                throw new ApiException(400, "Missing required parameter 'fileName' when calling SupplementApi->AddSupplementFile");

            var localVarPath = "/beta/supplement/{supplementId}/file/{fileName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (supplementId != null) localVarPathParams.Add("supplementId", Configuration.ApiClient.ParameterToString(supplementId)); // path parameter
            if (fileName != null) localVarPathParams.Add("fileName", Configuration.ApiClient.ParameterToString(fileName)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddSupplementFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Attach a file to a supplement Adds a file to an existing supplement.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="supplementId">Id of the supplement to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddSupplementFileAsync (int? supplementId, string fileName)
        {
             await AddSupplementFileAsyncWithHttpInfo(supplementId, fileName);

        }

        /// <summary>
        /// Attach a file to a supplement Adds a file to an existing supplement.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="supplementId">Id of the supplement to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddSupplementFileAsyncWithHttpInfo (int? supplementId, string fileName)
        {
            // verify the required parameter 'supplementId' is set
            if (supplementId == null)
                throw new ApiException(400, "Missing required parameter 'supplementId' when calling SupplementApi->AddSupplementFile");
            // verify the required parameter 'fileName' is set
            if (fileName == null)
                throw new ApiException(400, "Missing required parameter 'fileName' when calling SupplementApi->AddSupplementFile");

            var localVarPath = "/beta/supplement/{supplementId}/file/{fileName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (supplementId != null) localVarPathParams.Add("supplementId", Configuration.ApiClient.ParameterToString(supplementId)); // path parameter
            if (fileName != null) localVarPathParams.Add("fileName", Configuration.ApiClient.ParameterToString(fileName)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddSupplementFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Attach a file to a supplement by URL. Adds a file to an existing supplement by URL.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="supplementId">Id of the supplement to add an file to</param>
        /// <returns></returns>
        public void AddSupplementFileByURL (RecordFile body, int? supplementId)
        {
             AddSupplementFileByURLWithHttpInfo(body, supplementId);
        }

        /// <summary>
        /// Attach a file to a supplement by URL. Adds a file to an existing supplement by URL.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="supplementId">Id of the supplement to add an file to</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AddSupplementFileByURLWithHttpInfo (RecordFile body, int? supplementId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling SupplementApi->AddSupplementFileByURL");
            // verify the required parameter 'supplementId' is set
            if (supplementId == null)
                throw new ApiException(400, "Missing required parameter 'supplementId' when calling SupplementApi->AddSupplementFileByURL");

            var localVarPath = "/beta/supplement/{supplementId}/file";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (supplementId != null) localVarPathParams.Add("supplementId", Configuration.ApiClient.ParameterToString(supplementId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddSupplementFileByURL", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Attach a file to a supplement by URL. Adds a file to an existing supplement by URL.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="supplementId">Id of the supplement to add an file to</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddSupplementFileByURLAsync (RecordFile body, int? supplementId)
        {
             await AddSupplementFileByURLAsyncWithHttpInfo(body, supplementId);

        }

        /// <summary>
        /// Attach a file to a supplement by URL. Adds a file to an existing supplement by URL.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="supplementId">Id of the supplement to add an file to</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddSupplementFileByURLAsyncWithHttpInfo (RecordFile body, int? supplementId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling SupplementApi->AddSupplementFileByURL");
            // verify the required parameter 'supplementId' is set
            if (supplementId == null)
                throw new ApiException(400, "Missing required parameter 'supplementId' when calling SupplementApi->AddSupplementFileByURL");

            var localVarPath = "/beta/supplement/{supplementId}/file";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (supplementId != null) localVarPathParams.Add("supplementId", Configuration.ApiClient.ParameterToString(supplementId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddSupplementFileByURL", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Add new tags for a supplement. Adds a tag to an existing supplement.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="supplementId">Id of the supplement to add a tag to</param>
        /// <param name="supplementTag">The tag to add</param>
        /// <returns></returns>
        public void AddSupplementTag (int? supplementId, string supplementTag)
        {
             AddSupplementTagWithHttpInfo(supplementId, supplementTag);
        }

        /// <summary>
        /// Add new tags for a supplement. Adds a tag to an existing supplement.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="supplementId">Id of the supplement to add a tag to</param>
        /// <param name="supplementTag">The tag to add</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AddSupplementTagWithHttpInfo (int? supplementId, string supplementTag)
        {
            // verify the required parameter 'supplementId' is set
            if (supplementId == null)
                throw new ApiException(400, "Missing required parameter 'supplementId' when calling SupplementApi->AddSupplementTag");
            // verify the required parameter 'supplementTag' is set
            if (supplementTag == null)
                throw new ApiException(400, "Missing required parameter 'supplementTag' when calling SupplementApi->AddSupplementTag");

            var localVarPath = "/beta/supplement/{supplementId}/tag/{supplementTag}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (supplementId != null) localVarPathParams.Add("supplementId", Configuration.ApiClient.ParameterToString(supplementId)); // path parameter
            if (supplementTag != null) localVarPathParams.Add("supplementTag", Configuration.ApiClient.ParameterToString(supplementTag)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddSupplementTag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Add new tags for a supplement. Adds a tag to an existing supplement.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="supplementId">Id of the supplement to add a tag to</param>
        /// <param name="supplementTag">The tag to add</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddSupplementTagAsync (int? supplementId, string supplementTag)
        {
             await AddSupplementTagAsyncWithHttpInfo(supplementId, supplementTag);

        }

        /// <summary>
        /// Add new tags for a supplement. Adds a tag to an existing supplement.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="supplementId">Id of the supplement to add a tag to</param>
        /// <param name="supplementTag">The tag to add</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddSupplementTagAsyncWithHttpInfo (int? supplementId, string supplementTag)
        {
            // verify the required parameter 'supplementId' is set
            if (supplementId == null)
                throw new ApiException(400, "Missing required parameter 'supplementId' when calling SupplementApi->AddSupplementTag");
            // verify the required parameter 'supplementTag' is set
            if (supplementTag == null)
                throw new ApiException(400, "Missing required parameter 'supplementTag' when calling SupplementApi->AddSupplementTag");

            var localVarPath = "/beta/supplement/{supplementId}/tag/{supplementTag}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (supplementId != null) localVarPathParams.Add("supplementId", Configuration.ApiClient.ParameterToString(supplementId)); // path parameter
            if (supplementTag != null) localVarPathParams.Add("supplementTag", Configuration.ApiClient.ParameterToString(supplementTag)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddSupplementTag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a supplement Deletes the supplement identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="supplementId">Id of the supplement to be deleted.</param>
        /// <returns></returns>
        public void DeleteSupplement (int? supplementId)
        {
             DeleteSupplementWithHttpInfo(supplementId);
        }

        /// <summary>
        /// Delete a supplement Deletes the supplement identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="supplementId">Id of the supplement to be deleted.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteSupplementWithHttpInfo (int? supplementId)
        {
            // verify the required parameter 'supplementId' is set
            if (supplementId == null)
                throw new ApiException(400, "Missing required parameter 'supplementId' when calling SupplementApi->DeleteSupplement");

            var localVarPath = "/beta/supplement/{supplementId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (supplementId != null) localVarPathParams.Add("supplementId", Configuration.ApiClient.ParameterToString(supplementId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteSupplement", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a supplement Deletes the supplement identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="supplementId">Id of the supplement to be deleted.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteSupplementAsync (int? supplementId)
        {
             await DeleteSupplementAsyncWithHttpInfo(supplementId);

        }

        /// <summary>
        /// Delete a supplement Deletes the supplement identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="supplementId">Id of the supplement to be deleted.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteSupplementAsyncWithHttpInfo (int? supplementId)
        {
            // verify the required parameter 'supplementId' is set
            if (supplementId == null)
                throw new ApiException(400, "Missing required parameter 'supplementId' when calling SupplementApi->DeleteSupplement");

            var localVarPath = "/beta/supplement/{supplementId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (supplementId != null) localVarPathParams.Add("supplementId", Configuration.ApiClient.ParameterToString(supplementId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteSupplement", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a file for a supplement. Deletes an existing supplement file using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="supplementId">Id of the supplement to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns></returns>
        public void DeleteSupplementFile (int? supplementId, int? fileId)
        {
             DeleteSupplementFileWithHttpInfo(supplementId, fileId);
        }

        /// <summary>
        /// Delete a file for a supplement. Deletes an existing supplement file using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="supplementId">Id of the supplement to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteSupplementFileWithHttpInfo (int? supplementId, int? fileId)
        {
            // verify the required parameter 'supplementId' is set
            if (supplementId == null)
                throw new ApiException(400, "Missing required parameter 'supplementId' when calling SupplementApi->DeleteSupplementFile");
            // verify the required parameter 'fileId' is set
            if (fileId == null)
                throw new ApiException(400, "Missing required parameter 'fileId' when calling SupplementApi->DeleteSupplementFile");

            var localVarPath = "/beta/supplement/{supplementId}/file/{fileId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (supplementId != null) localVarPathParams.Add("supplementId", Configuration.ApiClient.ParameterToString(supplementId)); // path parameter
            if (fileId != null) localVarPathParams.Add("fileId", Configuration.ApiClient.ParameterToString(fileId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteSupplementFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a file for a supplement. Deletes an existing supplement file using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="supplementId">Id of the supplement to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteSupplementFileAsync (int? supplementId, int? fileId)
        {
             await DeleteSupplementFileAsyncWithHttpInfo(supplementId, fileId);

        }

        /// <summary>
        /// Delete a file for a supplement. Deletes an existing supplement file using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="supplementId">Id of the supplement to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteSupplementFileAsyncWithHttpInfo (int? supplementId, int? fileId)
        {
            // verify the required parameter 'supplementId' is set
            if (supplementId == null)
                throw new ApiException(400, "Missing required parameter 'supplementId' when calling SupplementApi->DeleteSupplementFile");
            // verify the required parameter 'fileId' is set
            if (fileId == null)
                throw new ApiException(400, "Missing required parameter 'fileId' when calling SupplementApi->DeleteSupplementFile");

            var localVarPath = "/beta/supplement/{supplementId}/file/{fileId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (supplementId != null) localVarPathParams.Add("supplementId", Configuration.ApiClient.ParameterToString(supplementId)); // path parameter
            if (fileId != null) localVarPathParams.Add("fileId", Configuration.ApiClient.ParameterToString(fileId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteSupplementFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a tag for a supplement. Deletes an existing supplement tag using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="supplementId">Id of the supplement to remove tag from</param>
        /// <param name="supplementTag">The tag to delete</param>
        /// <returns></returns>
        public void DeleteSupplementTag (int? supplementId, string supplementTag)
        {
             DeleteSupplementTagWithHttpInfo(supplementId, supplementTag);
        }

        /// <summary>
        /// Delete a tag for a supplement. Deletes an existing supplement tag using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="supplementId">Id of the supplement to remove tag from</param>
        /// <param name="supplementTag">The tag to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteSupplementTagWithHttpInfo (int? supplementId, string supplementTag)
        {
            // verify the required parameter 'supplementId' is set
            if (supplementId == null)
                throw new ApiException(400, "Missing required parameter 'supplementId' when calling SupplementApi->DeleteSupplementTag");
            // verify the required parameter 'supplementTag' is set
            if (supplementTag == null)
                throw new ApiException(400, "Missing required parameter 'supplementTag' when calling SupplementApi->DeleteSupplementTag");

            var localVarPath = "/beta/supplement/{supplementId}/tag/{supplementTag}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (supplementId != null) localVarPathParams.Add("supplementId", Configuration.ApiClient.ParameterToString(supplementId)); // path parameter
            if (supplementTag != null) localVarPathParams.Add("supplementTag", Configuration.ApiClient.ParameterToString(supplementTag)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteSupplementTag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a tag for a supplement. Deletes an existing supplement tag using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="supplementId">Id of the supplement to remove tag from</param>
        /// <param name="supplementTag">The tag to delete</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteSupplementTagAsync (int? supplementId, string supplementTag)
        {
             await DeleteSupplementTagAsyncWithHttpInfo(supplementId, supplementTag);

        }

        /// <summary>
        /// Delete a tag for a supplement. Deletes an existing supplement tag using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="supplementId">Id of the supplement to remove tag from</param>
        /// <param name="supplementTag">The tag to delete</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteSupplementTagAsyncWithHttpInfo (int? supplementId, string supplementTag)
        {
            // verify the required parameter 'supplementId' is set
            if (supplementId == null)
                throw new ApiException(400, "Missing required parameter 'supplementId' when calling SupplementApi->DeleteSupplementTag");
            // verify the required parameter 'supplementTag' is set
            if (supplementTag == null)
                throw new ApiException(400, "Missing required parameter 'supplementTag' when calling SupplementApi->DeleteSupplementTag");

            var localVarPath = "/beta/supplement/{supplementId}/tag/{supplementTag}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (supplementId != null) localVarPathParams.Add("supplementId", Configuration.ApiClient.ParameterToString(supplementId)); // path parameter
            if (supplementTag != null) localVarPathParams.Add("supplementTag", Configuration.ApiClient.ParameterToString(supplementTag)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteSupplementTag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get a duplicated a supplement by id Returns a duplicated supplement identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="supplementId">Id of the supplement to be duplicated.</param>
        /// <returns>Supplement</returns>
        public Supplement GetDuplicateSupplementById (int? supplementId)
        {
             ApiResponse<Supplement> localVarResponse = GetDuplicateSupplementByIdWithHttpInfo(supplementId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a duplicated a supplement by id Returns a duplicated supplement identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="supplementId">Id of the supplement to be duplicated.</param>
        /// <returns>ApiResponse of Supplement</returns>
        public ApiResponse< Supplement > GetDuplicateSupplementByIdWithHttpInfo (int? supplementId)
        {
            // verify the required parameter 'supplementId' is set
            if (supplementId == null)
                throw new ApiException(400, "Missing required parameter 'supplementId' when calling SupplementApi->GetDuplicateSupplementById");

            var localVarPath = "/beta/supplement/duplicate/{supplementId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (supplementId != null) localVarPathParams.Add("supplementId", Configuration.ApiClient.ParameterToString(supplementId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDuplicateSupplementById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Supplement>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Supplement) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Supplement)));
        }

        /// <summary>
        /// Get a duplicated a supplement by id Returns a duplicated supplement identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="supplementId">Id of the supplement to be duplicated.</param>
        /// <returns>Task of Supplement</returns>
        public async System.Threading.Tasks.Task<Supplement> GetDuplicateSupplementByIdAsync (int? supplementId)
        {
             ApiResponse<Supplement> localVarResponse = await GetDuplicateSupplementByIdAsyncWithHttpInfo(supplementId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a duplicated a supplement by id Returns a duplicated supplement identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="supplementId">Id of the supplement to be duplicated.</param>
        /// <returns>Task of ApiResponse (Supplement)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Supplement>> GetDuplicateSupplementByIdAsyncWithHttpInfo (int? supplementId)
        {
            // verify the required parameter 'supplementId' is set
            if (supplementId == null)
                throw new ApiException(400, "Missing required parameter 'supplementId' when calling SupplementApi->GetDuplicateSupplementById");

            var localVarPath = "/beta/supplement/duplicate/{supplementId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (supplementId != null) localVarPathParams.Add("supplementId", Configuration.ApiClient.ParameterToString(supplementId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDuplicateSupplementById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Supplement>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Supplement) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Supplement)));
        }

        /// <summary>
        /// Search supplements by filter Returns the list of supplements that match the given filter.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>List&lt;Supplement&gt;</returns>
        public List<Supplement> GetSupplementByFilter (string filter = null, int? page = null, int? limit = null, string sort = null)
        {
             ApiResponse<List<Supplement>> localVarResponse = GetSupplementByFilterWithHttpInfo(filter, page, limit, sort);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Search supplements by filter Returns the list of supplements that match the given filter.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>ApiResponse of List&lt;Supplement&gt;</returns>
        public ApiResponse< List<Supplement> > GetSupplementByFilterWithHttpInfo (string filter = null, int? page = null, int? limit = null, string sort = null)
        {

            var localVarPath = "/beta/supplement/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (filter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (page != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSupplementByFilter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Supplement>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Supplement>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Supplement>)));
        }

        /// <summary>
        /// Search supplements by filter Returns the list of supplements that match the given filter.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>Task of List&lt;Supplement&gt;</returns>
        public async System.Threading.Tasks.Task<List<Supplement>> GetSupplementByFilterAsync (string filter = null, int? page = null, int? limit = null, string sort = null)
        {
             ApiResponse<List<Supplement>> localVarResponse = await GetSupplementByFilterAsyncWithHttpInfo(filter, page, limit, sort);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Search supplements by filter Returns the list of supplements that match the given filter.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Supplement&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Supplement>>> GetSupplementByFilterAsyncWithHttpInfo (string filter = null, int? page = null, int? limit = null, string sort = null)
        {

            var localVarPath = "/beta/supplement/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (filter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (page != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSupplementByFilter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Supplement>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Supplement>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Supplement>)));
        }

        /// <summary>
        /// Get a supplement by id Returns the supplement identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="supplementId">Id of the supplement to be returned.</param>
        /// <returns>Supplement</returns>
        public Supplement GetSupplementById (int? supplementId)
        {
             ApiResponse<Supplement> localVarResponse = GetSupplementByIdWithHttpInfo(supplementId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a supplement by id Returns the supplement identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="supplementId">Id of the supplement to be returned.</param>
        /// <returns>ApiResponse of Supplement</returns>
        public ApiResponse< Supplement > GetSupplementByIdWithHttpInfo (int? supplementId)
        {
            // verify the required parameter 'supplementId' is set
            if (supplementId == null)
                throw new ApiException(400, "Missing required parameter 'supplementId' when calling SupplementApi->GetSupplementById");

            var localVarPath = "/beta/supplement/{supplementId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (supplementId != null) localVarPathParams.Add("supplementId", Configuration.ApiClient.ParameterToString(supplementId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSupplementById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Supplement>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Supplement) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Supplement)));
        }

        /// <summary>
        /// Get a supplement by id Returns the supplement identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="supplementId">Id of the supplement to be returned.</param>
        /// <returns>Task of Supplement</returns>
        public async System.Threading.Tasks.Task<Supplement> GetSupplementByIdAsync (int? supplementId)
        {
             ApiResponse<Supplement> localVarResponse = await GetSupplementByIdAsyncWithHttpInfo(supplementId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a supplement by id Returns the supplement identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="supplementId">Id of the supplement to be returned.</param>
        /// <returns>Task of ApiResponse (Supplement)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Supplement>> GetSupplementByIdAsyncWithHttpInfo (int? supplementId)
        {
            // verify the required parameter 'supplementId' is set
            if (supplementId == null)
                throw new ApiException(400, "Missing required parameter 'supplementId' when calling SupplementApi->GetSupplementById");

            var localVarPath = "/beta/supplement/{supplementId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (supplementId != null) localVarPathParams.Add("supplementId", Configuration.ApiClient.ParameterToString(supplementId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSupplementById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Supplement>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Supplement) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Supplement)));
        }

        /// <summary>
        /// Get the files for a supplement. Get all existing supplement files.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="supplementId">Id of the supplement to get files for</param>
        /// <returns></returns>
        public void GetSupplementFiles (int? supplementId)
        {
             GetSupplementFilesWithHttpInfo(supplementId);
        }

        /// <summary>
        /// Get the files for a supplement. Get all existing supplement files.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="supplementId">Id of the supplement to get files for</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GetSupplementFilesWithHttpInfo (int? supplementId)
        {
            // verify the required parameter 'supplementId' is set
            if (supplementId == null)
                throw new ApiException(400, "Missing required parameter 'supplementId' when calling SupplementApi->GetSupplementFiles");

            var localVarPath = "/beta/supplement/{supplementId}/file";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (supplementId != null) localVarPathParams.Add("supplementId", Configuration.ApiClient.ParameterToString(supplementId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSupplementFiles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get the files for a supplement. Get all existing supplement files.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="supplementId">Id of the supplement to get files for</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetSupplementFilesAsync (int? supplementId)
        {
             await GetSupplementFilesAsyncWithHttpInfo(supplementId);

        }

        /// <summary>
        /// Get the files for a supplement. Get all existing supplement files.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="supplementId">Id of the supplement to get files for</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetSupplementFilesAsyncWithHttpInfo (int? supplementId)
        {
            // verify the required parameter 'supplementId' is set
            if (supplementId == null)
                throw new ApiException(400, "Missing required parameter 'supplementId' when calling SupplementApi->GetSupplementFiles");

            var localVarPath = "/beta/supplement/{supplementId}/file";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (supplementId != null) localVarPathParams.Add("supplementId", Configuration.ApiClient.ParameterToString(supplementId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSupplementFiles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get the tags for a supplement. Get all existing supplement tags.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="supplementId">Id of the supplement to get tags for</param>
        /// <returns></returns>
        public void GetSupplementTags (int? supplementId)
        {
             GetSupplementTagsWithHttpInfo(supplementId);
        }

        /// <summary>
        /// Get the tags for a supplement. Get all existing supplement tags.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="supplementId">Id of the supplement to get tags for</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GetSupplementTagsWithHttpInfo (int? supplementId)
        {
            // verify the required parameter 'supplementId' is set
            if (supplementId == null)
                throw new ApiException(400, "Missing required parameter 'supplementId' when calling SupplementApi->GetSupplementTags");

            var localVarPath = "/beta/supplement/{supplementId}/tag";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (supplementId != null) localVarPathParams.Add("supplementId", Configuration.ApiClient.ParameterToString(supplementId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSupplementTags", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get the tags for a supplement. Get all existing supplement tags.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="supplementId">Id of the supplement to get tags for</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetSupplementTagsAsync (int? supplementId)
        {
             await GetSupplementTagsAsyncWithHttpInfo(supplementId);

        }

        /// <summary>
        /// Get the tags for a supplement. Get all existing supplement tags.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="supplementId">Id of the supplement to get tags for</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetSupplementTagsAsyncWithHttpInfo (int? supplementId)
        {
            // verify the required parameter 'supplementId' is set
            if (supplementId == null)
                throw new ApiException(400, "Missing required parameter 'supplementId' when calling SupplementApi->GetSupplementTags");

            var localVarPath = "/beta/supplement/{supplementId}/tag";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (supplementId != null) localVarPathParams.Add("supplementId", Configuration.ApiClient.ParameterToString(supplementId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSupplementTags", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update a supplement Updates an existing supplement using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Supplement to be updated.</param>
        /// <returns></returns>
        public void UpdateSupplement (Supplement body)
        {
             UpdateSupplementWithHttpInfo(body);
        }

        /// <summary>
        /// Update a supplement Updates an existing supplement using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Supplement to be updated.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateSupplementWithHttpInfo (Supplement body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling SupplementApi->UpdateSupplement");

            var localVarPath = "/beta/supplement";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateSupplement", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update a supplement Updates an existing supplement using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Supplement to be updated.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateSupplementAsync (Supplement body)
        {
             await UpdateSupplementAsyncWithHttpInfo(body);

        }

        /// <summary>
        /// Update a supplement Updates an existing supplement using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Supplement to be updated.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateSupplementAsyncWithHttpInfo (Supplement body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling SupplementApi->UpdateSupplement");

            var localVarPath = "/beta/supplement";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateSupplement", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update a supplement custom fields Updates an existing supplement custom fields using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Supplement to be updated.</param>
        /// <returns></returns>
        public void UpdateSupplementCustomFields (Supplement body)
        {
             UpdateSupplementCustomFieldsWithHttpInfo(body);
        }

        /// <summary>
        /// Update a supplement custom fields Updates an existing supplement custom fields using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Supplement to be updated.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateSupplementCustomFieldsWithHttpInfo (Supplement body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling SupplementApi->UpdateSupplementCustomFields");

            var localVarPath = "/beta/supplement/customFields";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateSupplementCustomFields", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update a supplement custom fields Updates an existing supplement custom fields using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Supplement to be updated.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateSupplementCustomFieldsAsync (Supplement body)
        {
             await UpdateSupplementCustomFieldsAsyncWithHttpInfo(body);

        }

        /// <summary>
        /// Update a supplement custom fields Updates an existing supplement custom fields using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Supplement to be updated.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateSupplementCustomFieldsAsyncWithHttpInfo (Supplement body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling SupplementApi->UpdateSupplementCustomFields");

            var localVarPath = "/beta/supplement/customFields";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateSupplementCustomFields", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

    }
}
