/* 
 * Infoplus API
 *
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Infoplus.Client;
using Infoplus.Model;

namespace Infoplus.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IThirdPartyParcelAccountApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create a thirdPartyParcelAccount
        /// </summary>
        /// <remarks>
        /// Inserts a new thirdPartyParcelAccount using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">ThirdPartyParcelAccount to be inserted.</param>
        /// <returns>ThirdPartyParcelAccount</returns>
        ThirdPartyParcelAccount AddThirdPartyParcelAccount (ThirdPartyParcelAccount body);

        /// <summary>
        /// Create a thirdPartyParcelAccount
        /// </summary>
        /// <remarks>
        /// Inserts a new thirdPartyParcelAccount using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">ThirdPartyParcelAccount to be inserted.</param>
        /// <returns>ApiResponse of ThirdPartyParcelAccount</returns>
        ApiResponse<ThirdPartyParcelAccount> AddThirdPartyParcelAccountWithHttpInfo (ThirdPartyParcelAccount body);
        /// <summary>
        /// Add new audit for a thirdPartyParcelAccount
        /// </summary>
        /// <remarks>
        /// Adds an audit to an existing thirdPartyParcelAccount.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="thirdPartyParcelAccountId">Id of the thirdPartyParcelAccount to add an audit to</param>
        /// <param name="thirdPartyParcelAccountAudit">The audit to add</param>
        /// <returns></returns>
        void AddThirdPartyParcelAccountAudit (int? thirdPartyParcelAccountId, string thirdPartyParcelAccountAudit);

        /// <summary>
        /// Add new audit for a thirdPartyParcelAccount
        /// </summary>
        /// <remarks>
        /// Adds an audit to an existing thirdPartyParcelAccount.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="thirdPartyParcelAccountId">Id of the thirdPartyParcelAccount to add an audit to</param>
        /// <param name="thirdPartyParcelAccountAudit">The audit to add</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddThirdPartyParcelAccountAuditWithHttpInfo (int? thirdPartyParcelAccountId, string thirdPartyParcelAccountAudit);
        /// <summary>
        /// Attach a file to a thirdPartyParcelAccount
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing thirdPartyParcelAccount.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="thirdPartyParcelAccountId">Id of the thirdPartyParcelAccount to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns></returns>
        void AddThirdPartyParcelAccountFile (int? thirdPartyParcelAccountId, string fileName);

        /// <summary>
        /// Attach a file to a thirdPartyParcelAccount
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing thirdPartyParcelAccount.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="thirdPartyParcelAccountId">Id of the thirdPartyParcelAccount to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddThirdPartyParcelAccountFileWithHttpInfo (int? thirdPartyParcelAccountId, string fileName);
        /// <summary>
        /// Attach a file to a thirdPartyParcelAccount by URL.
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing thirdPartyParcelAccount by URL.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="thirdPartyParcelAccountId">Id of the thirdPartyParcelAccount to add an file to</param>
        /// <returns></returns>
        void AddThirdPartyParcelAccountFileByURL (RecordFile body, int? thirdPartyParcelAccountId);

        /// <summary>
        /// Attach a file to a thirdPartyParcelAccount by URL.
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing thirdPartyParcelAccount by URL.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="thirdPartyParcelAccountId">Id of the thirdPartyParcelAccount to add an file to</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddThirdPartyParcelAccountFileByURLWithHttpInfo (RecordFile body, int? thirdPartyParcelAccountId);
        /// <summary>
        /// Add new tags for a thirdPartyParcelAccount.
        /// </summary>
        /// <remarks>
        /// Adds a tag to an existing thirdPartyParcelAccount.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="thirdPartyParcelAccountId">Id of the thirdPartyParcelAccount to add a tag to</param>
        /// <param name="thirdPartyParcelAccountTag">The tag to add</param>
        /// <returns></returns>
        void AddThirdPartyParcelAccountTag (int? thirdPartyParcelAccountId, string thirdPartyParcelAccountTag);

        /// <summary>
        /// Add new tags for a thirdPartyParcelAccount.
        /// </summary>
        /// <remarks>
        /// Adds a tag to an existing thirdPartyParcelAccount.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="thirdPartyParcelAccountId">Id of the thirdPartyParcelAccount to add a tag to</param>
        /// <param name="thirdPartyParcelAccountTag">The tag to add</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddThirdPartyParcelAccountTagWithHttpInfo (int? thirdPartyParcelAccountId, string thirdPartyParcelAccountTag);
        /// <summary>
        /// Delete a thirdPartyParcelAccount
        /// </summary>
        /// <remarks>
        /// Deletes the thirdPartyParcelAccount identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="thirdPartyParcelAccountId">Id of the thirdPartyParcelAccount to be deleted.</param>
        /// <returns></returns>
        void DeleteThirdPartyParcelAccount (int? thirdPartyParcelAccountId);

        /// <summary>
        /// Delete a thirdPartyParcelAccount
        /// </summary>
        /// <remarks>
        /// Deletes the thirdPartyParcelAccount identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="thirdPartyParcelAccountId">Id of the thirdPartyParcelAccount to be deleted.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteThirdPartyParcelAccountWithHttpInfo (int? thirdPartyParcelAccountId);
        /// <summary>
        /// Delete a file for a thirdPartyParcelAccount.
        /// </summary>
        /// <remarks>
        /// Deletes an existing thirdPartyParcelAccount file using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="thirdPartyParcelAccountId">Id of the thirdPartyParcelAccount to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns></returns>
        void DeleteThirdPartyParcelAccountFile (int? thirdPartyParcelAccountId, int? fileId);

        /// <summary>
        /// Delete a file for a thirdPartyParcelAccount.
        /// </summary>
        /// <remarks>
        /// Deletes an existing thirdPartyParcelAccount file using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="thirdPartyParcelAccountId">Id of the thirdPartyParcelAccount to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteThirdPartyParcelAccountFileWithHttpInfo (int? thirdPartyParcelAccountId, int? fileId);
        /// <summary>
        /// Delete a tag for a thirdPartyParcelAccount.
        /// </summary>
        /// <remarks>
        /// Deletes an existing thirdPartyParcelAccount tag using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="thirdPartyParcelAccountId">Id of the thirdPartyParcelAccount to remove tag from</param>
        /// <param name="thirdPartyParcelAccountTag">The tag to delete</param>
        /// <returns></returns>
        void DeleteThirdPartyParcelAccountTag (int? thirdPartyParcelAccountId, string thirdPartyParcelAccountTag);

        /// <summary>
        /// Delete a tag for a thirdPartyParcelAccount.
        /// </summary>
        /// <remarks>
        /// Deletes an existing thirdPartyParcelAccount tag using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="thirdPartyParcelAccountId">Id of the thirdPartyParcelAccount to remove tag from</param>
        /// <param name="thirdPartyParcelAccountTag">The tag to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteThirdPartyParcelAccountTagWithHttpInfo (int? thirdPartyParcelAccountId, string thirdPartyParcelAccountTag);
        /// <summary>
        /// Get a duplicated a thirdPartyParcelAccount by id
        /// </summary>
        /// <remarks>
        /// Returns a duplicated thirdPartyParcelAccount identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="thirdPartyParcelAccountId">Id of the thirdPartyParcelAccount to be duplicated.</param>
        /// <returns>ThirdPartyParcelAccount</returns>
        ThirdPartyParcelAccount GetDuplicateThirdPartyParcelAccountById (int? thirdPartyParcelAccountId);

        /// <summary>
        /// Get a duplicated a thirdPartyParcelAccount by id
        /// </summary>
        /// <remarks>
        /// Returns a duplicated thirdPartyParcelAccount identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="thirdPartyParcelAccountId">Id of the thirdPartyParcelAccount to be duplicated.</param>
        /// <returns>ApiResponse of ThirdPartyParcelAccount</returns>
        ApiResponse<ThirdPartyParcelAccount> GetDuplicateThirdPartyParcelAccountByIdWithHttpInfo (int? thirdPartyParcelAccountId);
        /// <summary>
        /// Search thirdPartyParcelAccounts by filter
        /// </summary>
        /// <remarks>
        /// Returns the list of thirdPartyParcelAccounts that match the given filter.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>List&lt;ThirdPartyParcelAccount&gt;</returns>
        List<ThirdPartyParcelAccount> GetThirdPartyParcelAccountByFilter (string filter = null, int? page = null, int? limit = null, string sort = null);

        /// <summary>
        /// Search thirdPartyParcelAccounts by filter
        /// </summary>
        /// <remarks>
        /// Returns the list of thirdPartyParcelAccounts that match the given filter.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>ApiResponse of List&lt;ThirdPartyParcelAccount&gt;</returns>
        ApiResponse<List<ThirdPartyParcelAccount>> GetThirdPartyParcelAccountByFilterWithHttpInfo (string filter = null, int? page = null, int? limit = null, string sort = null);
        /// <summary>
        /// Get a thirdPartyParcelAccount by id
        /// </summary>
        /// <remarks>
        /// Returns the thirdPartyParcelAccount identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="thirdPartyParcelAccountId">Id of the thirdPartyParcelAccount to be returned.</param>
        /// <returns>ThirdPartyParcelAccount</returns>
        ThirdPartyParcelAccount GetThirdPartyParcelAccountById (int? thirdPartyParcelAccountId);

        /// <summary>
        /// Get a thirdPartyParcelAccount by id
        /// </summary>
        /// <remarks>
        /// Returns the thirdPartyParcelAccount identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="thirdPartyParcelAccountId">Id of the thirdPartyParcelAccount to be returned.</param>
        /// <returns>ApiResponse of ThirdPartyParcelAccount</returns>
        ApiResponse<ThirdPartyParcelAccount> GetThirdPartyParcelAccountByIdWithHttpInfo (int? thirdPartyParcelAccountId);
        /// <summary>
        /// Get the files for a thirdPartyParcelAccount.
        /// </summary>
        /// <remarks>
        /// Get all existing thirdPartyParcelAccount files.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="thirdPartyParcelAccountId">Id of the thirdPartyParcelAccount to get files for</param>
        /// <returns></returns>
        void GetThirdPartyParcelAccountFiles (int? thirdPartyParcelAccountId);

        /// <summary>
        /// Get the files for a thirdPartyParcelAccount.
        /// </summary>
        /// <remarks>
        /// Get all existing thirdPartyParcelAccount files.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="thirdPartyParcelAccountId">Id of the thirdPartyParcelAccount to get files for</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetThirdPartyParcelAccountFilesWithHttpInfo (int? thirdPartyParcelAccountId);
        /// <summary>
        /// Get the tags for a thirdPartyParcelAccount.
        /// </summary>
        /// <remarks>
        /// Get all existing thirdPartyParcelAccount tags.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="thirdPartyParcelAccountId">Id of the thirdPartyParcelAccount to get tags for</param>
        /// <returns></returns>
        void GetThirdPartyParcelAccountTags (int? thirdPartyParcelAccountId);

        /// <summary>
        /// Get the tags for a thirdPartyParcelAccount.
        /// </summary>
        /// <remarks>
        /// Get all existing thirdPartyParcelAccount tags.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="thirdPartyParcelAccountId">Id of the thirdPartyParcelAccount to get tags for</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetThirdPartyParcelAccountTagsWithHttpInfo (int? thirdPartyParcelAccountId);
        /// <summary>
        /// Update a thirdPartyParcelAccount
        /// </summary>
        /// <remarks>
        /// Updates an existing thirdPartyParcelAccount using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">ThirdPartyParcelAccount to be updated.</param>
        /// <returns></returns>
        void UpdateThirdPartyParcelAccount (ThirdPartyParcelAccount body);

        /// <summary>
        /// Update a thirdPartyParcelAccount
        /// </summary>
        /// <remarks>
        /// Updates an existing thirdPartyParcelAccount using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">ThirdPartyParcelAccount to be updated.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateThirdPartyParcelAccountWithHttpInfo (ThirdPartyParcelAccount body);
        /// <summary>
        /// Update a thirdPartyParcelAccount custom fields
        /// </summary>
        /// <remarks>
        /// Updates an existing thirdPartyParcelAccount custom fields using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">ThirdPartyParcelAccount to be updated.</param>
        /// <returns></returns>
        void UpdateThirdPartyParcelAccountCustomFields (ThirdPartyParcelAccount body);

        /// <summary>
        /// Update a thirdPartyParcelAccount custom fields
        /// </summary>
        /// <remarks>
        /// Updates an existing thirdPartyParcelAccount custom fields using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">ThirdPartyParcelAccount to be updated.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateThirdPartyParcelAccountCustomFieldsWithHttpInfo (ThirdPartyParcelAccount body);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create a thirdPartyParcelAccount
        /// </summary>
        /// <remarks>
        /// Inserts a new thirdPartyParcelAccount using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">ThirdPartyParcelAccount to be inserted.</param>
        /// <returns>Task of ThirdPartyParcelAccount</returns>
        System.Threading.Tasks.Task<ThirdPartyParcelAccount> AddThirdPartyParcelAccountAsync (ThirdPartyParcelAccount body);

        /// <summary>
        /// Create a thirdPartyParcelAccount
        /// </summary>
        /// <remarks>
        /// Inserts a new thirdPartyParcelAccount using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">ThirdPartyParcelAccount to be inserted.</param>
        /// <returns>Task of ApiResponse (ThirdPartyParcelAccount)</returns>
        System.Threading.Tasks.Task<ApiResponse<ThirdPartyParcelAccount>> AddThirdPartyParcelAccountAsyncWithHttpInfo (ThirdPartyParcelAccount body);
        /// <summary>
        /// Add new audit for a thirdPartyParcelAccount
        /// </summary>
        /// <remarks>
        /// Adds an audit to an existing thirdPartyParcelAccount.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="thirdPartyParcelAccountId">Id of the thirdPartyParcelAccount to add an audit to</param>
        /// <param name="thirdPartyParcelAccountAudit">The audit to add</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddThirdPartyParcelAccountAuditAsync (int? thirdPartyParcelAccountId, string thirdPartyParcelAccountAudit);

        /// <summary>
        /// Add new audit for a thirdPartyParcelAccount
        /// </summary>
        /// <remarks>
        /// Adds an audit to an existing thirdPartyParcelAccount.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="thirdPartyParcelAccountId">Id of the thirdPartyParcelAccount to add an audit to</param>
        /// <param name="thirdPartyParcelAccountAudit">The audit to add</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddThirdPartyParcelAccountAuditAsyncWithHttpInfo (int? thirdPartyParcelAccountId, string thirdPartyParcelAccountAudit);
        /// <summary>
        /// Attach a file to a thirdPartyParcelAccount
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing thirdPartyParcelAccount.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="thirdPartyParcelAccountId">Id of the thirdPartyParcelAccount to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddThirdPartyParcelAccountFileAsync (int? thirdPartyParcelAccountId, string fileName);

        /// <summary>
        /// Attach a file to a thirdPartyParcelAccount
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing thirdPartyParcelAccount.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="thirdPartyParcelAccountId">Id of the thirdPartyParcelAccount to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddThirdPartyParcelAccountFileAsyncWithHttpInfo (int? thirdPartyParcelAccountId, string fileName);
        /// <summary>
        /// Attach a file to a thirdPartyParcelAccount by URL.
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing thirdPartyParcelAccount by URL.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="thirdPartyParcelAccountId">Id of the thirdPartyParcelAccount to add an file to</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddThirdPartyParcelAccountFileByURLAsync (RecordFile body, int? thirdPartyParcelAccountId);

        /// <summary>
        /// Attach a file to a thirdPartyParcelAccount by URL.
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing thirdPartyParcelAccount by URL.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="thirdPartyParcelAccountId">Id of the thirdPartyParcelAccount to add an file to</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddThirdPartyParcelAccountFileByURLAsyncWithHttpInfo (RecordFile body, int? thirdPartyParcelAccountId);
        /// <summary>
        /// Add new tags for a thirdPartyParcelAccount.
        /// </summary>
        /// <remarks>
        /// Adds a tag to an existing thirdPartyParcelAccount.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="thirdPartyParcelAccountId">Id of the thirdPartyParcelAccount to add a tag to</param>
        /// <param name="thirdPartyParcelAccountTag">The tag to add</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddThirdPartyParcelAccountTagAsync (int? thirdPartyParcelAccountId, string thirdPartyParcelAccountTag);

        /// <summary>
        /// Add new tags for a thirdPartyParcelAccount.
        /// </summary>
        /// <remarks>
        /// Adds a tag to an existing thirdPartyParcelAccount.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="thirdPartyParcelAccountId">Id of the thirdPartyParcelAccount to add a tag to</param>
        /// <param name="thirdPartyParcelAccountTag">The tag to add</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddThirdPartyParcelAccountTagAsyncWithHttpInfo (int? thirdPartyParcelAccountId, string thirdPartyParcelAccountTag);
        /// <summary>
        /// Delete a thirdPartyParcelAccount
        /// </summary>
        /// <remarks>
        /// Deletes the thirdPartyParcelAccount identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="thirdPartyParcelAccountId">Id of the thirdPartyParcelAccount to be deleted.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteThirdPartyParcelAccountAsync (int? thirdPartyParcelAccountId);

        /// <summary>
        /// Delete a thirdPartyParcelAccount
        /// </summary>
        /// <remarks>
        /// Deletes the thirdPartyParcelAccount identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="thirdPartyParcelAccountId">Id of the thirdPartyParcelAccount to be deleted.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteThirdPartyParcelAccountAsyncWithHttpInfo (int? thirdPartyParcelAccountId);
        /// <summary>
        /// Delete a file for a thirdPartyParcelAccount.
        /// </summary>
        /// <remarks>
        /// Deletes an existing thirdPartyParcelAccount file using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="thirdPartyParcelAccountId">Id of the thirdPartyParcelAccount to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteThirdPartyParcelAccountFileAsync (int? thirdPartyParcelAccountId, int? fileId);

        /// <summary>
        /// Delete a file for a thirdPartyParcelAccount.
        /// </summary>
        /// <remarks>
        /// Deletes an existing thirdPartyParcelAccount file using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="thirdPartyParcelAccountId">Id of the thirdPartyParcelAccount to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteThirdPartyParcelAccountFileAsyncWithHttpInfo (int? thirdPartyParcelAccountId, int? fileId);
        /// <summary>
        /// Delete a tag for a thirdPartyParcelAccount.
        /// </summary>
        /// <remarks>
        /// Deletes an existing thirdPartyParcelAccount tag using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="thirdPartyParcelAccountId">Id of the thirdPartyParcelAccount to remove tag from</param>
        /// <param name="thirdPartyParcelAccountTag">The tag to delete</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteThirdPartyParcelAccountTagAsync (int? thirdPartyParcelAccountId, string thirdPartyParcelAccountTag);

        /// <summary>
        /// Delete a tag for a thirdPartyParcelAccount.
        /// </summary>
        /// <remarks>
        /// Deletes an existing thirdPartyParcelAccount tag using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="thirdPartyParcelAccountId">Id of the thirdPartyParcelAccount to remove tag from</param>
        /// <param name="thirdPartyParcelAccountTag">The tag to delete</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteThirdPartyParcelAccountTagAsyncWithHttpInfo (int? thirdPartyParcelAccountId, string thirdPartyParcelAccountTag);
        /// <summary>
        /// Get a duplicated a thirdPartyParcelAccount by id
        /// </summary>
        /// <remarks>
        /// Returns a duplicated thirdPartyParcelAccount identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="thirdPartyParcelAccountId">Id of the thirdPartyParcelAccount to be duplicated.</param>
        /// <returns>Task of ThirdPartyParcelAccount</returns>
        System.Threading.Tasks.Task<ThirdPartyParcelAccount> GetDuplicateThirdPartyParcelAccountByIdAsync (int? thirdPartyParcelAccountId);

        /// <summary>
        /// Get a duplicated a thirdPartyParcelAccount by id
        /// </summary>
        /// <remarks>
        /// Returns a duplicated thirdPartyParcelAccount identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="thirdPartyParcelAccountId">Id of the thirdPartyParcelAccount to be duplicated.</param>
        /// <returns>Task of ApiResponse (ThirdPartyParcelAccount)</returns>
        System.Threading.Tasks.Task<ApiResponse<ThirdPartyParcelAccount>> GetDuplicateThirdPartyParcelAccountByIdAsyncWithHttpInfo (int? thirdPartyParcelAccountId);
        /// <summary>
        /// Search thirdPartyParcelAccounts by filter
        /// </summary>
        /// <remarks>
        /// Returns the list of thirdPartyParcelAccounts that match the given filter.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>Task of List&lt;ThirdPartyParcelAccount&gt;</returns>
        System.Threading.Tasks.Task<List<ThirdPartyParcelAccount>> GetThirdPartyParcelAccountByFilterAsync (string filter = null, int? page = null, int? limit = null, string sort = null);

        /// <summary>
        /// Search thirdPartyParcelAccounts by filter
        /// </summary>
        /// <remarks>
        /// Returns the list of thirdPartyParcelAccounts that match the given filter.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ThirdPartyParcelAccount&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ThirdPartyParcelAccount>>> GetThirdPartyParcelAccountByFilterAsyncWithHttpInfo (string filter = null, int? page = null, int? limit = null, string sort = null);
        /// <summary>
        /// Get a thirdPartyParcelAccount by id
        /// </summary>
        /// <remarks>
        /// Returns the thirdPartyParcelAccount identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="thirdPartyParcelAccountId">Id of the thirdPartyParcelAccount to be returned.</param>
        /// <returns>Task of ThirdPartyParcelAccount</returns>
        System.Threading.Tasks.Task<ThirdPartyParcelAccount> GetThirdPartyParcelAccountByIdAsync (int? thirdPartyParcelAccountId);

        /// <summary>
        /// Get a thirdPartyParcelAccount by id
        /// </summary>
        /// <remarks>
        /// Returns the thirdPartyParcelAccount identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="thirdPartyParcelAccountId">Id of the thirdPartyParcelAccount to be returned.</param>
        /// <returns>Task of ApiResponse (ThirdPartyParcelAccount)</returns>
        System.Threading.Tasks.Task<ApiResponse<ThirdPartyParcelAccount>> GetThirdPartyParcelAccountByIdAsyncWithHttpInfo (int? thirdPartyParcelAccountId);
        /// <summary>
        /// Get the files for a thirdPartyParcelAccount.
        /// </summary>
        /// <remarks>
        /// Get all existing thirdPartyParcelAccount files.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="thirdPartyParcelAccountId">Id of the thirdPartyParcelAccount to get files for</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetThirdPartyParcelAccountFilesAsync (int? thirdPartyParcelAccountId);

        /// <summary>
        /// Get the files for a thirdPartyParcelAccount.
        /// </summary>
        /// <remarks>
        /// Get all existing thirdPartyParcelAccount files.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="thirdPartyParcelAccountId">Id of the thirdPartyParcelAccount to get files for</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetThirdPartyParcelAccountFilesAsyncWithHttpInfo (int? thirdPartyParcelAccountId);
        /// <summary>
        /// Get the tags for a thirdPartyParcelAccount.
        /// </summary>
        /// <remarks>
        /// Get all existing thirdPartyParcelAccount tags.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="thirdPartyParcelAccountId">Id of the thirdPartyParcelAccount to get tags for</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetThirdPartyParcelAccountTagsAsync (int? thirdPartyParcelAccountId);

        /// <summary>
        /// Get the tags for a thirdPartyParcelAccount.
        /// </summary>
        /// <remarks>
        /// Get all existing thirdPartyParcelAccount tags.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="thirdPartyParcelAccountId">Id of the thirdPartyParcelAccount to get tags for</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetThirdPartyParcelAccountTagsAsyncWithHttpInfo (int? thirdPartyParcelAccountId);
        /// <summary>
        /// Update a thirdPartyParcelAccount
        /// </summary>
        /// <remarks>
        /// Updates an existing thirdPartyParcelAccount using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">ThirdPartyParcelAccount to be updated.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateThirdPartyParcelAccountAsync (ThirdPartyParcelAccount body);

        /// <summary>
        /// Update a thirdPartyParcelAccount
        /// </summary>
        /// <remarks>
        /// Updates an existing thirdPartyParcelAccount using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">ThirdPartyParcelAccount to be updated.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateThirdPartyParcelAccountAsyncWithHttpInfo (ThirdPartyParcelAccount body);
        /// <summary>
        /// Update a thirdPartyParcelAccount custom fields
        /// </summary>
        /// <remarks>
        /// Updates an existing thirdPartyParcelAccount custom fields using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">ThirdPartyParcelAccount to be updated.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateThirdPartyParcelAccountCustomFieldsAsync (ThirdPartyParcelAccount body);

        /// <summary>
        /// Update a thirdPartyParcelAccount custom fields
        /// </summary>
        /// <remarks>
        /// Updates an existing thirdPartyParcelAccount custom fields using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">ThirdPartyParcelAccount to be updated.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateThirdPartyParcelAccountCustomFieldsAsyncWithHttpInfo (ThirdPartyParcelAccount body);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ThirdPartyParcelAccountApi : IThirdPartyParcelAccountApi
    {
        private Infoplus.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ThirdPartyParcelAccountApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ThirdPartyParcelAccountApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = Infoplus.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ThirdPartyParcelAccountApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ThirdPartyParcelAccountApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Infoplus.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Infoplus.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create a thirdPartyParcelAccount Inserts a new thirdPartyParcelAccount using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">ThirdPartyParcelAccount to be inserted.</param>
        /// <returns>ThirdPartyParcelAccount</returns>
        public ThirdPartyParcelAccount AddThirdPartyParcelAccount (ThirdPartyParcelAccount body)
        {
             ApiResponse<ThirdPartyParcelAccount> localVarResponse = AddThirdPartyParcelAccountWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a thirdPartyParcelAccount Inserts a new thirdPartyParcelAccount using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">ThirdPartyParcelAccount to be inserted.</param>
        /// <returns>ApiResponse of ThirdPartyParcelAccount</returns>
        public ApiResponse< ThirdPartyParcelAccount > AddThirdPartyParcelAccountWithHttpInfo (ThirdPartyParcelAccount body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ThirdPartyParcelAccountApi->AddThirdPartyParcelAccount");

            var localVarPath = "/beta/thirdPartyParcelAccount";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddThirdPartyParcelAccount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ThirdPartyParcelAccount>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ThirdPartyParcelAccount) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ThirdPartyParcelAccount)));
        }

        /// <summary>
        /// Create a thirdPartyParcelAccount Inserts a new thirdPartyParcelAccount using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">ThirdPartyParcelAccount to be inserted.</param>
        /// <returns>Task of ThirdPartyParcelAccount</returns>
        public async System.Threading.Tasks.Task<ThirdPartyParcelAccount> AddThirdPartyParcelAccountAsync (ThirdPartyParcelAccount body)
        {
             ApiResponse<ThirdPartyParcelAccount> localVarResponse = await AddThirdPartyParcelAccountAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a thirdPartyParcelAccount Inserts a new thirdPartyParcelAccount using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">ThirdPartyParcelAccount to be inserted.</param>
        /// <returns>Task of ApiResponse (ThirdPartyParcelAccount)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ThirdPartyParcelAccount>> AddThirdPartyParcelAccountAsyncWithHttpInfo (ThirdPartyParcelAccount body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ThirdPartyParcelAccountApi->AddThirdPartyParcelAccount");

            var localVarPath = "/beta/thirdPartyParcelAccount";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddThirdPartyParcelAccount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ThirdPartyParcelAccount>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ThirdPartyParcelAccount) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ThirdPartyParcelAccount)));
        }

        /// <summary>
        /// Add new audit for a thirdPartyParcelAccount Adds an audit to an existing thirdPartyParcelAccount.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="thirdPartyParcelAccountId">Id of the thirdPartyParcelAccount to add an audit to</param>
        /// <param name="thirdPartyParcelAccountAudit">The audit to add</param>
        /// <returns></returns>
        public void AddThirdPartyParcelAccountAudit (int? thirdPartyParcelAccountId, string thirdPartyParcelAccountAudit)
        {
             AddThirdPartyParcelAccountAuditWithHttpInfo(thirdPartyParcelAccountId, thirdPartyParcelAccountAudit);
        }

        /// <summary>
        /// Add new audit for a thirdPartyParcelAccount Adds an audit to an existing thirdPartyParcelAccount.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="thirdPartyParcelAccountId">Id of the thirdPartyParcelAccount to add an audit to</param>
        /// <param name="thirdPartyParcelAccountAudit">The audit to add</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AddThirdPartyParcelAccountAuditWithHttpInfo (int? thirdPartyParcelAccountId, string thirdPartyParcelAccountAudit)
        {
            // verify the required parameter 'thirdPartyParcelAccountId' is set
            if (thirdPartyParcelAccountId == null)
                throw new ApiException(400, "Missing required parameter 'thirdPartyParcelAccountId' when calling ThirdPartyParcelAccountApi->AddThirdPartyParcelAccountAudit");
            // verify the required parameter 'thirdPartyParcelAccountAudit' is set
            if (thirdPartyParcelAccountAudit == null)
                throw new ApiException(400, "Missing required parameter 'thirdPartyParcelAccountAudit' when calling ThirdPartyParcelAccountApi->AddThirdPartyParcelAccountAudit");

            var localVarPath = "/beta/thirdPartyParcelAccount/{thirdPartyParcelAccountId}/audit/{thirdPartyParcelAccountAudit}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (thirdPartyParcelAccountId != null) localVarPathParams.Add("thirdPartyParcelAccountId", Configuration.ApiClient.ParameterToString(thirdPartyParcelAccountId)); // path parameter
            if (thirdPartyParcelAccountAudit != null) localVarPathParams.Add("thirdPartyParcelAccountAudit", Configuration.ApiClient.ParameterToString(thirdPartyParcelAccountAudit)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddThirdPartyParcelAccountAudit", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Add new audit for a thirdPartyParcelAccount Adds an audit to an existing thirdPartyParcelAccount.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="thirdPartyParcelAccountId">Id of the thirdPartyParcelAccount to add an audit to</param>
        /// <param name="thirdPartyParcelAccountAudit">The audit to add</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddThirdPartyParcelAccountAuditAsync (int? thirdPartyParcelAccountId, string thirdPartyParcelAccountAudit)
        {
             await AddThirdPartyParcelAccountAuditAsyncWithHttpInfo(thirdPartyParcelAccountId, thirdPartyParcelAccountAudit);

        }

        /// <summary>
        /// Add new audit for a thirdPartyParcelAccount Adds an audit to an existing thirdPartyParcelAccount.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="thirdPartyParcelAccountId">Id of the thirdPartyParcelAccount to add an audit to</param>
        /// <param name="thirdPartyParcelAccountAudit">The audit to add</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddThirdPartyParcelAccountAuditAsyncWithHttpInfo (int? thirdPartyParcelAccountId, string thirdPartyParcelAccountAudit)
        {
            // verify the required parameter 'thirdPartyParcelAccountId' is set
            if (thirdPartyParcelAccountId == null)
                throw new ApiException(400, "Missing required parameter 'thirdPartyParcelAccountId' when calling ThirdPartyParcelAccountApi->AddThirdPartyParcelAccountAudit");
            // verify the required parameter 'thirdPartyParcelAccountAudit' is set
            if (thirdPartyParcelAccountAudit == null)
                throw new ApiException(400, "Missing required parameter 'thirdPartyParcelAccountAudit' when calling ThirdPartyParcelAccountApi->AddThirdPartyParcelAccountAudit");

            var localVarPath = "/beta/thirdPartyParcelAccount/{thirdPartyParcelAccountId}/audit/{thirdPartyParcelAccountAudit}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (thirdPartyParcelAccountId != null) localVarPathParams.Add("thirdPartyParcelAccountId", Configuration.ApiClient.ParameterToString(thirdPartyParcelAccountId)); // path parameter
            if (thirdPartyParcelAccountAudit != null) localVarPathParams.Add("thirdPartyParcelAccountAudit", Configuration.ApiClient.ParameterToString(thirdPartyParcelAccountAudit)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddThirdPartyParcelAccountAudit", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Attach a file to a thirdPartyParcelAccount Adds a file to an existing thirdPartyParcelAccount.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="thirdPartyParcelAccountId">Id of the thirdPartyParcelAccount to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns></returns>
        public void AddThirdPartyParcelAccountFile (int? thirdPartyParcelAccountId, string fileName)
        {
             AddThirdPartyParcelAccountFileWithHttpInfo(thirdPartyParcelAccountId, fileName);
        }

        /// <summary>
        /// Attach a file to a thirdPartyParcelAccount Adds a file to an existing thirdPartyParcelAccount.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="thirdPartyParcelAccountId">Id of the thirdPartyParcelAccount to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AddThirdPartyParcelAccountFileWithHttpInfo (int? thirdPartyParcelAccountId, string fileName)
        {
            // verify the required parameter 'thirdPartyParcelAccountId' is set
            if (thirdPartyParcelAccountId == null)
                throw new ApiException(400, "Missing required parameter 'thirdPartyParcelAccountId' when calling ThirdPartyParcelAccountApi->AddThirdPartyParcelAccountFile");
            // verify the required parameter 'fileName' is set
            if (fileName == null)
                throw new ApiException(400, "Missing required parameter 'fileName' when calling ThirdPartyParcelAccountApi->AddThirdPartyParcelAccountFile");

            var localVarPath = "/beta/thirdPartyParcelAccount/{thirdPartyParcelAccountId}/file/{fileName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (thirdPartyParcelAccountId != null) localVarPathParams.Add("thirdPartyParcelAccountId", Configuration.ApiClient.ParameterToString(thirdPartyParcelAccountId)); // path parameter
            if (fileName != null) localVarPathParams.Add("fileName", Configuration.ApiClient.ParameterToString(fileName)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddThirdPartyParcelAccountFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Attach a file to a thirdPartyParcelAccount Adds a file to an existing thirdPartyParcelAccount.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="thirdPartyParcelAccountId">Id of the thirdPartyParcelAccount to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddThirdPartyParcelAccountFileAsync (int? thirdPartyParcelAccountId, string fileName)
        {
             await AddThirdPartyParcelAccountFileAsyncWithHttpInfo(thirdPartyParcelAccountId, fileName);

        }

        /// <summary>
        /// Attach a file to a thirdPartyParcelAccount Adds a file to an existing thirdPartyParcelAccount.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="thirdPartyParcelAccountId">Id of the thirdPartyParcelAccount to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddThirdPartyParcelAccountFileAsyncWithHttpInfo (int? thirdPartyParcelAccountId, string fileName)
        {
            // verify the required parameter 'thirdPartyParcelAccountId' is set
            if (thirdPartyParcelAccountId == null)
                throw new ApiException(400, "Missing required parameter 'thirdPartyParcelAccountId' when calling ThirdPartyParcelAccountApi->AddThirdPartyParcelAccountFile");
            // verify the required parameter 'fileName' is set
            if (fileName == null)
                throw new ApiException(400, "Missing required parameter 'fileName' when calling ThirdPartyParcelAccountApi->AddThirdPartyParcelAccountFile");

            var localVarPath = "/beta/thirdPartyParcelAccount/{thirdPartyParcelAccountId}/file/{fileName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (thirdPartyParcelAccountId != null) localVarPathParams.Add("thirdPartyParcelAccountId", Configuration.ApiClient.ParameterToString(thirdPartyParcelAccountId)); // path parameter
            if (fileName != null) localVarPathParams.Add("fileName", Configuration.ApiClient.ParameterToString(fileName)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddThirdPartyParcelAccountFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Attach a file to a thirdPartyParcelAccount by URL. Adds a file to an existing thirdPartyParcelAccount by URL.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="thirdPartyParcelAccountId">Id of the thirdPartyParcelAccount to add an file to</param>
        /// <returns></returns>
        public void AddThirdPartyParcelAccountFileByURL (RecordFile body, int? thirdPartyParcelAccountId)
        {
             AddThirdPartyParcelAccountFileByURLWithHttpInfo(body, thirdPartyParcelAccountId);
        }

        /// <summary>
        /// Attach a file to a thirdPartyParcelAccount by URL. Adds a file to an existing thirdPartyParcelAccount by URL.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="thirdPartyParcelAccountId">Id of the thirdPartyParcelAccount to add an file to</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AddThirdPartyParcelAccountFileByURLWithHttpInfo (RecordFile body, int? thirdPartyParcelAccountId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ThirdPartyParcelAccountApi->AddThirdPartyParcelAccountFileByURL");
            // verify the required parameter 'thirdPartyParcelAccountId' is set
            if (thirdPartyParcelAccountId == null)
                throw new ApiException(400, "Missing required parameter 'thirdPartyParcelAccountId' when calling ThirdPartyParcelAccountApi->AddThirdPartyParcelAccountFileByURL");

            var localVarPath = "/beta/thirdPartyParcelAccount/{thirdPartyParcelAccountId}/file";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (thirdPartyParcelAccountId != null) localVarPathParams.Add("thirdPartyParcelAccountId", Configuration.ApiClient.ParameterToString(thirdPartyParcelAccountId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddThirdPartyParcelAccountFileByURL", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Attach a file to a thirdPartyParcelAccount by URL. Adds a file to an existing thirdPartyParcelAccount by URL.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="thirdPartyParcelAccountId">Id of the thirdPartyParcelAccount to add an file to</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddThirdPartyParcelAccountFileByURLAsync (RecordFile body, int? thirdPartyParcelAccountId)
        {
             await AddThirdPartyParcelAccountFileByURLAsyncWithHttpInfo(body, thirdPartyParcelAccountId);

        }

        /// <summary>
        /// Attach a file to a thirdPartyParcelAccount by URL. Adds a file to an existing thirdPartyParcelAccount by URL.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="thirdPartyParcelAccountId">Id of the thirdPartyParcelAccount to add an file to</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddThirdPartyParcelAccountFileByURLAsyncWithHttpInfo (RecordFile body, int? thirdPartyParcelAccountId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ThirdPartyParcelAccountApi->AddThirdPartyParcelAccountFileByURL");
            // verify the required parameter 'thirdPartyParcelAccountId' is set
            if (thirdPartyParcelAccountId == null)
                throw new ApiException(400, "Missing required parameter 'thirdPartyParcelAccountId' when calling ThirdPartyParcelAccountApi->AddThirdPartyParcelAccountFileByURL");

            var localVarPath = "/beta/thirdPartyParcelAccount/{thirdPartyParcelAccountId}/file";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (thirdPartyParcelAccountId != null) localVarPathParams.Add("thirdPartyParcelAccountId", Configuration.ApiClient.ParameterToString(thirdPartyParcelAccountId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddThirdPartyParcelAccountFileByURL", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Add new tags for a thirdPartyParcelAccount. Adds a tag to an existing thirdPartyParcelAccount.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="thirdPartyParcelAccountId">Id of the thirdPartyParcelAccount to add a tag to</param>
        /// <param name="thirdPartyParcelAccountTag">The tag to add</param>
        /// <returns></returns>
        public void AddThirdPartyParcelAccountTag (int? thirdPartyParcelAccountId, string thirdPartyParcelAccountTag)
        {
             AddThirdPartyParcelAccountTagWithHttpInfo(thirdPartyParcelAccountId, thirdPartyParcelAccountTag);
        }

        /// <summary>
        /// Add new tags for a thirdPartyParcelAccount. Adds a tag to an existing thirdPartyParcelAccount.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="thirdPartyParcelAccountId">Id of the thirdPartyParcelAccount to add a tag to</param>
        /// <param name="thirdPartyParcelAccountTag">The tag to add</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AddThirdPartyParcelAccountTagWithHttpInfo (int? thirdPartyParcelAccountId, string thirdPartyParcelAccountTag)
        {
            // verify the required parameter 'thirdPartyParcelAccountId' is set
            if (thirdPartyParcelAccountId == null)
                throw new ApiException(400, "Missing required parameter 'thirdPartyParcelAccountId' when calling ThirdPartyParcelAccountApi->AddThirdPartyParcelAccountTag");
            // verify the required parameter 'thirdPartyParcelAccountTag' is set
            if (thirdPartyParcelAccountTag == null)
                throw new ApiException(400, "Missing required parameter 'thirdPartyParcelAccountTag' when calling ThirdPartyParcelAccountApi->AddThirdPartyParcelAccountTag");

            var localVarPath = "/beta/thirdPartyParcelAccount/{thirdPartyParcelAccountId}/tag/{thirdPartyParcelAccountTag}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (thirdPartyParcelAccountId != null) localVarPathParams.Add("thirdPartyParcelAccountId", Configuration.ApiClient.ParameterToString(thirdPartyParcelAccountId)); // path parameter
            if (thirdPartyParcelAccountTag != null) localVarPathParams.Add("thirdPartyParcelAccountTag", Configuration.ApiClient.ParameterToString(thirdPartyParcelAccountTag)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddThirdPartyParcelAccountTag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Add new tags for a thirdPartyParcelAccount. Adds a tag to an existing thirdPartyParcelAccount.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="thirdPartyParcelAccountId">Id of the thirdPartyParcelAccount to add a tag to</param>
        /// <param name="thirdPartyParcelAccountTag">The tag to add</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddThirdPartyParcelAccountTagAsync (int? thirdPartyParcelAccountId, string thirdPartyParcelAccountTag)
        {
             await AddThirdPartyParcelAccountTagAsyncWithHttpInfo(thirdPartyParcelAccountId, thirdPartyParcelAccountTag);

        }

        /// <summary>
        /// Add new tags for a thirdPartyParcelAccount. Adds a tag to an existing thirdPartyParcelAccount.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="thirdPartyParcelAccountId">Id of the thirdPartyParcelAccount to add a tag to</param>
        /// <param name="thirdPartyParcelAccountTag">The tag to add</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddThirdPartyParcelAccountTagAsyncWithHttpInfo (int? thirdPartyParcelAccountId, string thirdPartyParcelAccountTag)
        {
            // verify the required parameter 'thirdPartyParcelAccountId' is set
            if (thirdPartyParcelAccountId == null)
                throw new ApiException(400, "Missing required parameter 'thirdPartyParcelAccountId' when calling ThirdPartyParcelAccountApi->AddThirdPartyParcelAccountTag");
            // verify the required parameter 'thirdPartyParcelAccountTag' is set
            if (thirdPartyParcelAccountTag == null)
                throw new ApiException(400, "Missing required parameter 'thirdPartyParcelAccountTag' when calling ThirdPartyParcelAccountApi->AddThirdPartyParcelAccountTag");

            var localVarPath = "/beta/thirdPartyParcelAccount/{thirdPartyParcelAccountId}/tag/{thirdPartyParcelAccountTag}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (thirdPartyParcelAccountId != null) localVarPathParams.Add("thirdPartyParcelAccountId", Configuration.ApiClient.ParameterToString(thirdPartyParcelAccountId)); // path parameter
            if (thirdPartyParcelAccountTag != null) localVarPathParams.Add("thirdPartyParcelAccountTag", Configuration.ApiClient.ParameterToString(thirdPartyParcelAccountTag)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddThirdPartyParcelAccountTag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a thirdPartyParcelAccount Deletes the thirdPartyParcelAccount identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="thirdPartyParcelAccountId">Id of the thirdPartyParcelAccount to be deleted.</param>
        /// <returns></returns>
        public void DeleteThirdPartyParcelAccount (int? thirdPartyParcelAccountId)
        {
             DeleteThirdPartyParcelAccountWithHttpInfo(thirdPartyParcelAccountId);
        }

        /// <summary>
        /// Delete a thirdPartyParcelAccount Deletes the thirdPartyParcelAccount identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="thirdPartyParcelAccountId">Id of the thirdPartyParcelAccount to be deleted.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteThirdPartyParcelAccountWithHttpInfo (int? thirdPartyParcelAccountId)
        {
            // verify the required parameter 'thirdPartyParcelAccountId' is set
            if (thirdPartyParcelAccountId == null)
                throw new ApiException(400, "Missing required parameter 'thirdPartyParcelAccountId' when calling ThirdPartyParcelAccountApi->DeleteThirdPartyParcelAccount");

            var localVarPath = "/beta/thirdPartyParcelAccount/{thirdPartyParcelAccountId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (thirdPartyParcelAccountId != null) localVarPathParams.Add("thirdPartyParcelAccountId", Configuration.ApiClient.ParameterToString(thirdPartyParcelAccountId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteThirdPartyParcelAccount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a thirdPartyParcelAccount Deletes the thirdPartyParcelAccount identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="thirdPartyParcelAccountId">Id of the thirdPartyParcelAccount to be deleted.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteThirdPartyParcelAccountAsync (int? thirdPartyParcelAccountId)
        {
             await DeleteThirdPartyParcelAccountAsyncWithHttpInfo(thirdPartyParcelAccountId);

        }

        /// <summary>
        /// Delete a thirdPartyParcelAccount Deletes the thirdPartyParcelAccount identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="thirdPartyParcelAccountId">Id of the thirdPartyParcelAccount to be deleted.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteThirdPartyParcelAccountAsyncWithHttpInfo (int? thirdPartyParcelAccountId)
        {
            // verify the required parameter 'thirdPartyParcelAccountId' is set
            if (thirdPartyParcelAccountId == null)
                throw new ApiException(400, "Missing required parameter 'thirdPartyParcelAccountId' when calling ThirdPartyParcelAccountApi->DeleteThirdPartyParcelAccount");

            var localVarPath = "/beta/thirdPartyParcelAccount/{thirdPartyParcelAccountId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (thirdPartyParcelAccountId != null) localVarPathParams.Add("thirdPartyParcelAccountId", Configuration.ApiClient.ParameterToString(thirdPartyParcelAccountId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteThirdPartyParcelAccount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a file for a thirdPartyParcelAccount. Deletes an existing thirdPartyParcelAccount file using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="thirdPartyParcelAccountId">Id of the thirdPartyParcelAccount to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns></returns>
        public void DeleteThirdPartyParcelAccountFile (int? thirdPartyParcelAccountId, int? fileId)
        {
             DeleteThirdPartyParcelAccountFileWithHttpInfo(thirdPartyParcelAccountId, fileId);
        }

        /// <summary>
        /// Delete a file for a thirdPartyParcelAccount. Deletes an existing thirdPartyParcelAccount file using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="thirdPartyParcelAccountId">Id of the thirdPartyParcelAccount to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteThirdPartyParcelAccountFileWithHttpInfo (int? thirdPartyParcelAccountId, int? fileId)
        {
            // verify the required parameter 'thirdPartyParcelAccountId' is set
            if (thirdPartyParcelAccountId == null)
                throw new ApiException(400, "Missing required parameter 'thirdPartyParcelAccountId' when calling ThirdPartyParcelAccountApi->DeleteThirdPartyParcelAccountFile");
            // verify the required parameter 'fileId' is set
            if (fileId == null)
                throw new ApiException(400, "Missing required parameter 'fileId' when calling ThirdPartyParcelAccountApi->DeleteThirdPartyParcelAccountFile");

            var localVarPath = "/beta/thirdPartyParcelAccount/{thirdPartyParcelAccountId}/file/{fileId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (thirdPartyParcelAccountId != null) localVarPathParams.Add("thirdPartyParcelAccountId", Configuration.ApiClient.ParameterToString(thirdPartyParcelAccountId)); // path parameter
            if (fileId != null) localVarPathParams.Add("fileId", Configuration.ApiClient.ParameterToString(fileId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteThirdPartyParcelAccountFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a file for a thirdPartyParcelAccount. Deletes an existing thirdPartyParcelAccount file using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="thirdPartyParcelAccountId">Id of the thirdPartyParcelAccount to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteThirdPartyParcelAccountFileAsync (int? thirdPartyParcelAccountId, int? fileId)
        {
             await DeleteThirdPartyParcelAccountFileAsyncWithHttpInfo(thirdPartyParcelAccountId, fileId);

        }

        /// <summary>
        /// Delete a file for a thirdPartyParcelAccount. Deletes an existing thirdPartyParcelAccount file using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="thirdPartyParcelAccountId">Id of the thirdPartyParcelAccount to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteThirdPartyParcelAccountFileAsyncWithHttpInfo (int? thirdPartyParcelAccountId, int? fileId)
        {
            // verify the required parameter 'thirdPartyParcelAccountId' is set
            if (thirdPartyParcelAccountId == null)
                throw new ApiException(400, "Missing required parameter 'thirdPartyParcelAccountId' when calling ThirdPartyParcelAccountApi->DeleteThirdPartyParcelAccountFile");
            // verify the required parameter 'fileId' is set
            if (fileId == null)
                throw new ApiException(400, "Missing required parameter 'fileId' when calling ThirdPartyParcelAccountApi->DeleteThirdPartyParcelAccountFile");

            var localVarPath = "/beta/thirdPartyParcelAccount/{thirdPartyParcelAccountId}/file/{fileId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (thirdPartyParcelAccountId != null) localVarPathParams.Add("thirdPartyParcelAccountId", Configuration.ApiClient.ParameterToString(thirdPartyParcelAccountId)); // path parameter
            if (fileId != null) localVarPathParams.Add("fileId", Configuration.ApiClient.ParameterToString(fileId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteThirdPartyParcelAccountFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a tag for a thirdPartyParcelAccount. Deletes an existing thirdPartyParcelAccount tag using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="thirdPartyParcelAccountId">Id of the thirdPartyParcelAccount to remove tag from</param>
        /// <param name="thirdPartyParcelAccountTag">The tag to delete</param>
        /// <returns></returns>
        public void DeleteThirdPartyParcelAccountTag (int? thirdPartyParcelAccountId, string thirdPartyParcelAccountTag)
        {
             DeleteThirdPartyParcelAccountTagWithHttpInfo(thirdPartyParcelAccountId, thirdPartyParcelAccountTag);
        }

        /// <summary>
        /// Delete a tag for a thirdPartyParcelAccount. Deletes an existing thirdPartyParcelAccount tag using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="thirdPartyParcelAccountId">Id of the thirdPartyParcelAccount to remove tag from</param>
        /// <param name="thirdPartyParcelAccountTag">The tag to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteThirdPartyParcelAccountTagWithHttpInfo (int? thirdPartyParcelAccountId, string thirdPartyParcelAccountTag)
        {
            // verify the required parameter 'thirdPartyParcelAccountId' is set
            if (thirdPartyParcelAccountId == null)
                throw new ApiException(400, "Missing required parameter 'thirdPartyParcelAccountId' when calling ThirdPartyParcelAccountApi->DeleteThirdPartyParcelAccountTag");
            // verify the required parameter 'thirdPartyParcelAccountTag' is set
            if (thirdPartyParcelAccountTag == null)
                throw new ApiException(400, "Missing required parameter 'thirdPartyParcelAccountTag' when calling ThirdPartyParcelAccountApi->DeleteThirdPartyParcelAccountTag");

            var localVarPath = "/beta/thirdPartyParcelAccount/{thirdPartyParcelAccountId}/tag/{thirdPartyParcelAccountTag}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (thirdPartyParcelAccountId != null) localVarPathParams.Add("thirdPartyParcelAccountId", Configuration.ApiClient.ParameterToString(thirdPartyParcelAccountId)); // path parameter
            if (thirdPartyParcelAccountTag != null) localVarPathParams.Add("thirdPartyParcelAccountTag", Configuration.ApiClient.ParameterToString(thirdPartyParcelAccountTag)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteThirdPartyParcelAccountTag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a tag for a thirdPartyParcelAccount. Deletes an existing thirdPartyParcelAccount tag using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="thirdPartyParcelAccountId">Id of the thirdPartyParcelAccount to remove tag from</param>
        /// <param name="thirdPartyParcelAccountTag">The tag to delete</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteThirdPartyParcelAccountTagAsync (int? thirdPartyParcelAccountId, string thirdPartyParcelAccountTag)
        {
             await DeleteThirdPartyParcelAccountTagAsyncWithHttpInfo(thirdPartyParcelAccountId, thirdPartyParcelAccountTag);

        }

        /// <summary>
        /// Delete a tag for a thirdPartyParcelAccount. Deletes an existing thirdPartyParcelAccount tag using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="thirdPartyParcelAccountId">Id of the thirdPartyParcelAccount to remove tag from</param>
        /// <param name="thirdPartyParcelAccountTag">The tag to delete</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteThirdPartyParcelAccountTagAsyncWithHttpInfo (int? thirdPartyParcelAccountId, string thirdPartyParcelAccountTag)
        {
            // verify the required parameter 'thirdPartyParcelAccountId' is set
            if (thirdPartyParcelAccountId == null)
                throw new ApiException(400, "Missing required parameter 'thirdPartyParcelAccountId' when calling ThirdPartyParcelAccountApi->DeleteThirdPartyParcelAccountTag");
            // verify the required parameter 'thirdPartyParcelAccountTag' is set
            if (thirdPartyParcelAccountTag == null)
                throw new ApiException(400, "Missing required parameter 'thirdPartyParcelAccountTag' when calling ThirdPartyParcelAccountApi->DeleteThirdPartyParcelAccountTag");

            var localVarPath = "/beta/thirdPartyParcelAccount/{thirdPartyParcelAccountId}/tag/{thirdPartyParcelAccountTag}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (thirdPartyParcelAccountId != null) localVarPathParams.Add("thirdPartyParcelAccountId", Configuration.ApiClient.ParameterToString(thirdPartyParcelAccountId)); // path parameter
            if (thirdPartyParcelAccountTag != null) localVarPathParams.Add("thirdPartyParcelAccountTag", Configuration.ApiClient.ParameterToString(thirdPartyParcelAccountTag)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteThirdPartyParcelAccountTag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get a duplicated a thirdPartyParcelAccount by id Returns a duplicated thirdPartyParcelAccount identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="thirdPartyParcelAccountId">Id of the thirdPartyParcelAccount to be duplicated.</param>
        /// <returns>ThirdPartyParcelAccount</returns>
        public ThirdPartyParcelAccount GetDuplicateThirdPartyParcelAccountById (int? thirdPartyParcelAccountId)
        {
             ApiResponse<ThirdPartyParcelAccount> localVarResponse = GetDuplicateThirdPartyParcelAccountByIdWithHttpInfo(thirdPartyParcelAccountId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a duplicated a thirdPartyParcelAccount by id Returns a duplicated thirdPartyParcelAccount identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="thirdPartyParcelAccountId">Id of the thirdPartyParcelAccount to be duplicated.</param>
        /// <returns>ApiResponse of ThirdPartyParcelAccount</returns>
        public ApiResponse< ThirdPartyParcelAccount > GetDuplicateThirdPartyParcelAccountByIdWithHttpInfo (int? thirdPartyParcelAccountId)
        {
            // verify the required parameter 'thirdPartyParcelAccountId' is set
            if (thirdPartyParcelAccountId == null)
                throw new ApiException(400, "Missing required parameter 'thirdPartyParcelAccountId' when calling ThirdPartyParcelAccountApi->GetDuplicateThirdPartyParcelAccountById");

            var localVarPath = "/beta/thirdPartyParcelAccount/duplicate/{thirdPartyParcelAccountId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (thirdPartyParcelAccountId != null) localVarPathParams.Add("thirdPartyParcelAccountId", Configuration.ApiClient.ParameterToString(thirdPartyParcelAccountId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDuplicateThirdPartyParcelAccountById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ThirdPartyParcelAccount>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ThirdPartyParcelAccount) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ThirdPartyParcelAccount)));
        }

        /// <summary>
        /// Get a duplicated a thirdPartyParcelAccount by id Returns a duplicated thirdPartyParcelAccount identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="thirdPartyParcelAccountId">Id of the thirdPartyParcelAccount to be duplicated.</param>
        /// <returns>Task of ThirdPartyParcelAccount</returns>
        public async System.Threading.Tasks.Task<ThirdPartyParcelAccount> GetDuplicateThirdPartyParcelAccountByIdAsync (int? thirdPartyParcelAccountId)
        {
             ApiResponse<ThirdPartyParcelAccount> localVarResponse = await GetDuplicateThirdPartyParcelAccountByIdAsyncWithHttpInfo(thirdPartyParcelAccountId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a duplicated a thirdPartyParcelAccount by id Returns a duplicated thirdPartyParcelAccount identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="thirdPartyParcelAccountId">Id of the thirdPartyParcelAccount to be duplicated.</param>
        /// <returns>Task of ApiResponse (ThirdPartyParcelAccount)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ThirdPartyParcelAccount>> GetDuplicateThirdPartyParcelAccountByIdAsyncWithHttpInfo (int? thirdPartyParcelAccountId)
        {
            // verify the required parameter 'thirdPartyParcelAccountId' is set
            if (thirdPartyParcelAccountId == null)
                throw new ApiException(400, "Missing required parameter 'thirdPartyParcelAccountId' when calling ThirdPartyParcelAccountApi->GetDuplicateThirdPartyParcelAccountById");

            var localVarPath = "/beta/thirdPartyParcelAccount/duplicate/{thirdPartyParcelAccountId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (thirdPartyParcelAccountId != null) localVarPathParams.Add("thirdPartyParcelAccountId", Configuration.ApiClient.ParameterToString(thirdPartyParcelAccountId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDuplicateThirdPartyParcelAccountById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ThirdPartyParcelAccount>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ThirdPartyParcelAccount) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ThirdPartyParcelAccount)));
        }

        /// <summary>
        /// Search thirdPartyParcelAccounts by filter Returns the list of thirdPartyParcelAccounts that match the given filter.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>List&lt;ThirdPartyParcelAccount&gt;</returns>
        public List<ThirdPartyParcelAccount> GetThirdPartyParcelAccountByFilter (string filter = null, int? page = null, int? limit = null, string sort = null)
        {
             ApiResponse<List<ThirdPartyParcelAccount>> localVarResponse = GetThirdPartyParcelAccountByFilterWithHttpInfo(filter, page, limit, sort);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Search thirdPartyParcelAccounts by filter Returns the list of thirdPartyParcelAccounts that match the given filter.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>ApiResponse of List&lt;ThirdPartyParcelAccount&gt;</returns>
        public ApiResponse< List<ThirdPartyParcelAccount> > GetThirdPartyParcelAccountByFilterWithHttpInfo (string filter = null, int? page = null, int? limit = null, string sort = null)
        {

            var localVarPath = "/beta/thirdPartyParcelAccount/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (filter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (page != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetThirdPartyParcelAccountByFilter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ThirdPartyParcelAccount>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ThirdPartyParcelAccount>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ThirdPartyParcelAccount>)));
        }

        /// <summary>
        /// Search thirdPartyParcelAccounts by filter Returns the list of thirdPartyParcelAccounts that match the given filter.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>Task of List&lt;ThirdPartyParcelAccount&gt;</returns>
        public async System.Threading.Tasks.Task<List<ThirdPartyParcelAccount>> GetThirdPartyParcelAccountByFilterAsync (string filter = null, int? page = null, int? limit = null, string sort = null)
        {
             ApiResponse<List<ThirdPartyParcelAccount>> localVarResponse = await GetThirdPartyParcelAccountByFilterAsyncWithHttpInfo(filter, page, limit, sort);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Search thirdPartyParcelAccounts by filter Returns the list of thirdPartyParcelAccounts that match the given filter.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ThirdPartyParcelAccount&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ThirdPartyParcelAccount>>> GetThirdPartyParcelAccountByFilterAsyncWithHttpInfo (string filter = null, int? page = null, int? limit = null, string sort = null)
        {

            var localVarPath = "/beta/thirdPartyParcelAccount/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (filter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (page != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetThirdPartyParcelAccountByFilter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ThirdPartyParcelAccount>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ThirdPartyParcelAccount>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ThirdPartyParcelAccount>)));
        }

        /// <summary>
        /// Get a thirdPartyParcelAccount by id Returns the thirdPartyParcelAccount identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="thirdPartyParcelAccountId">Id of the thirdPartyParcelAccount to be returned.</param>
        /// <returns>ThirdPartyParcelAccount</returns>
        public ThirdPartyParcelAccount GetThirdPartyParcelAccountById (int? thirdPartyParcelAccountId)
        {
             ApiResponse<ThirdPartyParcelAccount> localVarResponse = GetThirdPartyParcelAccountByIdWithHttpInfo(thirdPartyParcelAccountId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a thirdPartyParcelAccount by id Returns the thirdPartyParcelAccount identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="thirdPartyParcelAccountId">Id of the thirdPartyParcelAccount to be returned.</param>
        /// <returns>ApiResponse of ThirdPartyParcelAccount</returns>
        public ApiResponse< ThirdPartyParcelAccount > GetThirdPartyParcelAccountByIdWithHttpInfo (int? thirdPartyParcelAccountId)
        {
            // verify the required parameter 'thirdPartyParcelAccountId' is set
            if (thirdPartyParcelAccountId == null)
                throw new ApiException(400, "Missing required parameter 'thirdPartyParcelAccountId' when calling ThirdPartyParcelAccountApi->GetThirdPartyParcelAccountById");

            var localVarPath = "/beta/thirdPartyParcelAccount/{thirdPartyParcelAccountId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (thirdPartyParcelAccountId != null) localVarPathParams.Add("thirdPartyParcelAccountId", Configuration.ApiClient.ParameterToString(thirdPartyParcelAccountId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetThirdPartyParcelAccountById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ThirdPartyParcelAccount>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ThirdPartyParcelAccount) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ThirdPartyParcelAccount)));
        }

        /// <summary>
        /// Get a thirdPartyParcelAccount by id Returns the thirdPartyParcelAccount identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="thirdPartyParcelAccountId">Id of the thirdPartyParcelAccount to be returned.</param>
        /// <returns>Task of ThirdPartyParcelAccount</returns>
        public async System.Threading.Tasks.Task<ThirdPartyParcelAccount> GetThirdPartyParcelAccountByIdAsync (int? thirdPartyParcelAccountId)
        {
             ApiResponse<ThirdPartyParcelAccount> localVarResponse = await GetThirdPartyParcelAccountByIdAsyncWithHttpInfo(thirdPartyParcelAccountId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a thirdPartyParcelAccount by id Returns the thirdPartyParcelAccount identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="thirdPartyParcelAccountId">Id of the thirdPartyParcelAccount to be returned.</param>
        /// <returns>Task of ApiResponse (ThirdPartyParcelAccount)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ThirdPartyParcelAccount>> GetThirdPartyParcelAccountByIdAsyncWithHttpInfo (int? thirdPartyParcelAccountId)
        {
            // verify the required parameter 'thirdPartyParcelAccountId' is set
            if (thirdPartyParcelAccountId == null)
                throw new ApiException(400, "Missing required parameter 'thirdPartyParcelAccountId' when calling ThirdPartyParcelAccountApi->GetThirdPartyParcelAccountById");

            var localVarPath = "/beta/thirdPartyParcelAccount/{thirdPartyParcelAccountId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (thirdPartyParcelAccountId != null) localVarPathParams.Add("thirdPartyParcelAccountId", Configuration.ApiClient.ParameterToString(thirdPartyParcelAccountId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetThirdPartyParcelAccountById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ThirdPartyParcelAccount>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ThirdPartyParcelAccount) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ThirdPartyParcelAccount)));
        }

        /// <summary>
        /// Get the files for a thirdPartyParcelAccount. Get all existing thirdPartyParcelAccount files.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="thirdPartyParcelAccountId">Id of the thirdPartyParcelAccount to get files for</param>
        /// <returns></returns>
        public void GetThirdPartyParcelAccountFiles (int? thirdPartyParcelAccountId)
        {
             GetThirdPartyParcelAccountFilesWithHttpInfo(thirdPartyParcelAccountId);
        }

        /// <summary>
        /// Get the files for a thirdPartyParcelAccount. Get all existing thirdPartyParcelAccount files.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="thirdPartyParcelAccountId">Id of the thirdPartyParcelAccount to get files for</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GetThirdPartyParcelAccountFilesWithHttpInfo (int? thirdPartyParcelAccountId)
        {
            // verify the required parameter 'thirdPartyParcelAccountId' is set
            if (thirdPartyParcelAccountId == null)
                throw new ApiException(400, "Missing required parameter 'thirdPartyParcelAccountId' when calling ThirdPartyParcelAccountApi->GetThirdPartyParcelAccountFiles");

            var localVarPath = "/beta/thirdPartyParcelAccount/{thirdPartyParcelAccountId}/file";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (thirdPartyParcelAccountId != null) localVarPathParams.Add("thirdPartyParcelAccountId", Configuration.ApiClient.ParameterToString(thirdPartyParcelAccountId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetThirdPartyParcelAccountFiles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get the files for a thirdPartyParcelAccount. Get all existing thirdPartyParcelAccount files.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="thirdPartyParcelAccountId">Id of the thirdPartyParcelAccount to get files for</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetThirdPartyParcelAccountFilesAsync (int? thirdPartyParcelAccountId)
        {
             await GetThirdPartyParcelAccountFilesAsyncWithHttpInfo(thirdPartyParcelAccountId);

        }

        /// <summary>
        /// Get the files for a thirdPartyParcelAccount. Get all existing thirdPartyParcelAccount files.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="thirdPartyParcelAccountId">Id of the thirdPartyParcelAccount to get files for</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetThirdPartyParcelAccountFilesAsyncWithHttpInfo (int? thirdPartyParcelAccountId)
        {
            // verify the required parameter 'thirdPartyParcelAccountId' is set
            if (thirdPartyParcelAccountId == null)
                throw new ApiException(400, "Missing required parameter 'thirdPartyParcelAccountId' when calling ThirdPartyParcelAccountApi->GetThirdPartyParcelAccountFiles");

            var localVarPath = "/beta/thirdPartyParcelAccount/{thirdPartyParcelAccountId}/file";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (thirdPartyParcelAccountId != null) localVarPathParams.Add("thirdPartyParcelAccountId", Configuration.ApiClient.ParameterToString(thirdPartyParcelAccountId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetThirdPartyParcelAccountFiles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get the tags for a thirdPartyParcelAccount. Get all existing thirdPartyParcelAccount tags.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="thirdPartyParcelAccountId">Id of the thirdPartyParcelAccount to get tags for</param>
        /// <returns></returns>
        public void GetThirdPartyParcelAccountTags (int? thirdPartyParcelAccountId)
        {
             GetThirdPartyParcelAccountTagsWithHttpInfo(thirdPartyParcelAccountId);
        }

        /// <summary>
        /// Get the tags for a thirdPartyParcelAccount. Get all existing thirdPartyParcelAccount tags.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="thirdPartyParcelAccountId">Id of the thirdPartyParcelAccount to get tags for</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GetThirdPartyParcelAccountTagsWithHttpInfo (int? thirdPartyParcelAccountId)
        {
            // verify the required parameter 'thirdPartyParcelAccountId' is set
            if (thirdPartyParcelAccountId == null)
                throw new ApiException(400, "Missing required parameter 'thirdPartyParcelAccountId' when calling ThirdPartyParcelAccountApi->GetThirdPartyParcelAccountTags");

            var localVarPath = "/beta/thirdPartyParcelAccount/{thirdPartyParcelAccountId}/tag";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (thirdPartyParcelAccountId != null) localVarPathParams.Add("thirdPartyParcelAccountId", Configuration.ApiClient.ParameterToString(thirdPartyParcelAccountId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetThirdPartyParcelAccountTags", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get the tags for a thirdPartyParcelAccount. Get all existing thirdPartyParcelAccount tags.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="thirdPartyParcelAccountId">Id of the thirdPartyParcelAccount to get tags for</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetThirdPartyParcelAccountTagsAsync (int? thirdPartyParcelAccountId)
        {
             await GetThirdPartyParcelAccountTagsAsyncWithHttpInfo(thirdPartyParcelAccountId);

        }

        /// <summary>
        /// Get the tags for a thirdPartyParcelAccount. Get all existing thirdPartyParcelAccount tags.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="thirdPartyParcelAccountId">Id of the thirdPartyParcelAccount to get tags for</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetThirdPartyParcelAccountTagsAsyncWithHttpInfo (int? thirdPartyParcelAccountId)
        {
            // verify the required parameter 'thirdPartyParcelAccountId' is set
            if (thirdPartyParcelAccountId == null)
                throw new ApiException(400, "Missing required parameter 'thirdPartyParcelAccountId' when calling ThirdPartyParcelAccountApi->GetThirdPartyParcelAccountTags");

            var localVarPath = "/beta/thirdPartyParcelAccount/{thirdPartyParcelAccountId}/tag";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (thirdPartyParcelAccountId != null) localVarPathParams.Add("thirdPartyParcelAccountId", Configuration.ApiClient.ParameterToString(thirdPartyParcelAccountId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetThirdPartyParcelAccountTags", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update a thirdPartyParcelAccount Updates an existing thirdPartyParcelAccount using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">ThirdPartyParcelAccount to be updated.</param>
        /// <returns></returns>
        public void UpdateThirdPartyParcelAccount (ThirdPartyParcelAccount body)
        {
             UpdateThirdPartyParcelAccountWithHttpInfo(body);
        }

        /// <summary>
        /// Update a thirdPartyParcelAccount Updates an existing thirdPartyParcelAccount using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">ThirdPartyParcelAccount to be updated.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateThirdPartyParcelAccountWithHttpInfo (ThirdPartyParcelAccount body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ThirdPartyParcelAccountApi->UpdateThirdPartyParcelAccount");

            var localVarPath = "/beta/thirdPartyParcelAccount";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateThirdPartyParcelAccount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update a thirdPartyParcelAccount Updates an existing thirdPartyParcelAccount using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">ThirdPartyParcelAccount to be updated.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateThirdPartyParcelAccountAsync (ThirdPartyParcelAccount body)
        {
             await UpdateThirdPartyParcelAccountAsyncWithHttpInfo(body);

        }

        /// <summary>
        /// Update a thirdPartyParcelAccount Updates an existing thirdPartyParcelAccount using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">ThirdPartyParcelAccount to be updated.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateThirdPartyParcelAccountAsyncWithHttpInfo (ThirdPartyParcelAccount body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ThirdPartyParcelAccountApi->UpdateThirdPartyParcelAccount");

            var localVarPath = "/beta/thirdPartyParcelAccount";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateThirdPartyParcelAccount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update a thirdPartyParcelAccount custom fields Updates an existing thirdPartyParcelAccount custom fields using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">ThirdPartyParcelAccount to be updated.</param>
        /// <returns></returns>
        public void UpdateThirdPartyParcelAccountCustomFields (ThirdPartyParcelAccount body)
        {
             UpdateThirdPartyParcelAccountCustomFieldsWithHttpInfo(body);
        }

        /// <summary>
        /// Update a thirdPartyParcelAccount custom fields Updates an existing thirdPartyParcelAccount custom fields using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">ThirdPartyParcelAccount to be updated.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateThirdPartyParcelAccountCustomFieldsWithHttpInfo (ThirdPartyParcelAccount body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ThirdPartyParcelAccountApi->UpdateThirdPartyParcelAccountCustomFields");

            var localVarPath = "/beta/thirdPartyParcelAccount/customFields";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateThirdPartyParcelAccountCustomFields", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update a thirdPartyParcelAccount custom fields Updates an existing thirdPartyParcelAccount custom fields using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">ThirdPartyParcelAccount to be updated.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateThirdPartyParcelAccountCustomFieldsAsync (ThirdPartyParcelAccount body)
        {
             await UpdateThirdPartyParcelAccountCustomFieldsAsyncWithHttpInfo(body);

        }

        /// <summary>
        /// Update a thirdPartyParcelAccount custom fields Updates an existing thirdPartyParcelAccount custom fields using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">ThirdPartyParcelAccount to be updated.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateThirdPartyParcelAccountCustomFieldsAsyncWithHttpInfo (ThirdPartyParcelAccount body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ThirdPartyParcelAccountApi->UpdateThirdPartyParcelAccountCustomFields");

            var localVarPath = "/beta/thirdPartyParcelAccount/customFields";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateThirdPartyParcelAccountCustomFields", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

    }
}
