/* 
 * Infoplus API
 *
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Infoplus.Client;
using Infoplus.Model;

namespace Infoplus.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IWarehouseDocumentTypeApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Add new audit for a warehouseDocumentType
        /// </summary>
        /// <remarks>
        /// Adds an audit to an existing warehouseDocumentType.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseDocumentTypeId">Id of the warehouseDocumentType to add an audit to</param>
        /// <param name="warehouseDocumentTypeAudit">The audit to add</param>
        /// <returns></returns>
        void AddWarehouseDocumentTypeAudit (int? warehouseDocumentTypeId, string warehouseDocumentTypeAudit);

        /// <summary>
        /// Add new audit for a warehouseDocumentType
        /// </summary>
        /// <remarks>
        /// Adds an audit to an existing warehouseDocumentType.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseDocumentTypeId">Id of the warehouseDocumentType to add an audit to</param>
        /// <param name="warehouseDocumentTypeAudit">The audit to add</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddWarehouseDocumentTypeAuditWithHttpInfo (int? warehouseDocumentTypeId, string warehouseDocumentTypeAudit);
        /// <summary>
        /// Attach a file to a warehouseDocumentType
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing warehouseDocumentType.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseDocumentTypeId">Id of the warehouseDocumentType to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns></returns>
        void AddWarehouseDocumentTypeFile (int? warehouseDocumentTypeId, string fileName);

        /// <summary>
        /// Attach a file to a warehouseDocumentType
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing warehouseDocumentType.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseDocumentTypeId">Id of the warehouseDocumentType to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddWarehouseDocumentTypeFileWithHttpInfo (int? warehouseDocumentTypeId, string fileName);
        /// <summary>
        /// Attach a file to a warehouseDocumentType by URL.
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing warehouseDocumentType by URL.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="warehouseDocumentTypeId">Id of the warehouseDocumentType to add an file to</param>
        /// <returns></returns>
        void AddWarehouseDocumentTypeFileByURL (RecordFile body, int? warehouseDocumentTypeId);

        /// <summary>
        /// Attach a file to a warehouseDocumentType by URL.
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing warehouseDocumentType by URL.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="warehouseDocumentTypeId">Id of the warehouseDocumentType to add an file to</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddWarehouseDocumentTypeFileByURLWithHttpInfo (RecordFile body, int? warehouseDocumentTypeId);
        /// <summary>
        /// Add new tags for a warehouseDocumentType.
        /// </summary>
        /// <remarks>
        /// Adds a tag to an existing warehouseDocumentType.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseDocumentTypeId">Id of the warehouseDocumentType to add a tag to</param>
        /// <param name="warehouseDocumentTypeTag">The tag to add</param>
        /// <returns></returns>
        void AddWarehouseDocumentTypeTag (int? warehouseDocumentTypeId, string warehouseDocumentTypeTag);

        /// <summary>
        /// Add new tags for a warehouseDocumentType.
        /// </summary>
        /// <remarks>
        /// Adds a tag to an existing warehouseDocumentType.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseDocumentTypeId">Id of the warehouseDocumentType to add a tag to</param>
        /// <param name="warehouseDocumentTypeTag">The tag to add</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddWarehouseDocumentTypeTagWithHttpInfo (int? warehouseDocumentTypeId, string warehouseDocumentTypeTag);
        /// <summary>
        /// Delete a file for a warehouseDocumentType.
        /// </summary>
        /// <remarks>
        /// Deletes an existing warehouseDocumentType file using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseDocumentTypeId">Id of the warehouseDocumentType to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns></returns>
        void DeleteWarehouseDocumentTypeFile (int? warehouseDocumentTypeId, int? fileId);

        /// <summary>
        /// Delete a file for a warehouseDocumentType.
        /// </summary>
        /// <remarks>
        /// Deletes an existing warehouseDocumentType file using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseDocumentTypeId">Id of the warehouseDocumentType to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteWarehouseDocumentTypeFileWithHttpInfo (int? warehouseDocumentTypeId, int? fileId);
        /// <summary>
        /// Delete a tag for a warehouseDocumentType.
        /// </summary>
        /// <remarks>
        /// Deletes an existing warehouseDocumentType tag using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseDocumentTypeId">Id of the warehouseDocumentType to remove tag from</param>
        /// <param name="warehouseDocumentTypeTag">The tag to delete</param>
        /// <returns></returns>
        void DeleteWarehouseDocumentTypeTag (int? warehouseDocumentTypeId, string warehouseDocumentTypeTag);

        /// <summary>
        /// Delete a tag for a warehouseDocumentType.
        /// </summary>
        /// <remarks>
        /// Deletes an existing warehouseDocumentType tag using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseDocumentTypeId">Id of the warehouseDocumentType to remove tag from</param>
        /// <param name="warehouseDocumentTypeTag">The tag to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteWarehouseDocumentTypeTagWithHttpInfo (int? warehouseDocumentTypeId, string warehouseDocumentTypeTag);
        /// <summary>
        /// Get a duplicated a warehouseDocumentType by id
        /// </summary>
        /// <remarks>
        /// Returns a duplicated warehouseDocumentType identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseDocumentTypeId">Id of the warehouseDocumentType to be duplicated.</param>
        /// <returns>WarehouseDocumentType</returns>
        WarehouseDocumentType GetDuplicateWarehouseDocumentTypeById (int? warehouseDocumentTypeId);

        /// <summary>
        /// Get a duplicated a warehouseDocumentType by id
        /// </summary>
        /// <remarks>
        /// Returns a duplicated warehouseDocumentType identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseDocumentTypeId">Id of the warehouseDocumentType to be duplicated.</param>
        /// <returns>ApiResponse of WarehouseDocumentType</returns>
        ApiResponse<WarehouseDocumentType> GetDuplicateWarehouseDocumentTypeByIdWithHttpInfo (int? warehouseDocumentTypeId);
        /// <summary>
        /// Search warehouseDocumentTypes by filter
        /// </summary>
        /// <remarks>
        /// Returns the list of warehouseDocumentTypes that match the given filter.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>List&lt;WarehouseDocumentType&gt;</returns>
        List<WarehouseDocumentType> GetWarehouseDocumentTypeByFilter (string filter = null, int? page = null, int? limit = null, string sort = null);

        /// <summary>
        /// Search warehouseDocumentTypes by filter
        /// </summary>
        /// <remarks>
        /// Returns the list of warehouseDocumentTypes that match the given filter.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>ApiResponse of List&lt;WarehouseDocumentType&gt;</returns>
        ApiResponse<List<WarehouseDocumentType>> GetWarehouseDocumentTypeByFilterWithHttpInfo (string filter = null, int? page = null, int? limit = null, string sort = null);
        /// <summary>
        /// Get a warehouseDocumentType by id
        /// </summary>
        /// <remarks>
        /// Returns the warehouseDocumentType identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseDocumentTypeId">Id of the warehouseDocumentType to be returned.</param>
        /// <returns>WarehouseDocumentType</returns>
        WarehouseDocumentType GetWarehouseDocumentTypeById (int? warehouseDocumentTypeId);

        /// <summary>
        /// Get a warehouseDocumentType by id
        /// </summary>
        /// <remarks>
        /// Returns the warehouseDocumentType identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseDocumentTypeId">Id of the warehouseDocumentType to be returned.</param>
        /// <returns>ApiResponse of WarehouseDocumentType</returns>
        ApiResponse<WarehouseDocumentType> GetWarehouseDocumentTypeByIdWithHttpInfo (int? warehouseDocumentTypeId);
        /// <summary>
        /// Get the files for a warehouseDocumentType.
        /// </summary>
        /// <remarks>
        /// Get all existing warehouseDocumentType files.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseDocumentTypeId">Id of the warehouseDocumentType to get files for</param>
        /// <returns></returns>
        void GetWarehouseDocumentTypeFiles (int? warehouseDocumentTypeId);

        /// <summary>
        /// Get the files for a warehouseDocumentType.
        /// </summary>
        /// <remarks>
        /// Get all existing warehouseDocumentType files.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseDocumentTypeId">Id of the warehouseDocumentType to get files for</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetWarehouseDocumentTypeFilesWithHttpInfo (int? warehouseDocumentTypeId);
        /// <summary>
        /// Get the tags for a warehouseDocumentType.
        /// </summary>
        /// <remarks>
        /// Get all existing warehouseDocumentType tags.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseDocumentTypeId">Id of the warehouseDocumentType to get tags for</param>
        /// <returns></returns>
        void GetWarehouseDocumentTypeTags (int? warehouseDocumentTypeId);

        /// <summary>
        /// Get the tags for a warehouseDocumentType.
        /// </summary>
        /// <remarks>
        /// Get all existing warehouseDocumentType tags.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseDocumentTypeId">Id of the warehouseDocumentType to get tags for</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetWarehouseDocumentTypeTagsWithHttpInfo (int? warehouseDocumentTypeId);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Add new audit for a warehouseDocumentType
        /// </summary>
        /// <remarks>
        /// Adds an audit to an existing warehouseDocumentType.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseDocumentTypeId">Id of the warehouseDocumentType to add an audit to</param>
        /// <param name="warehouseDocumentTypeAudit">The audit to add</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddWarehouseDocumentTypeAuditAsync (int? warehouseDocumentTypeId, string warehouseDocumentTypeAudit);

        /// <summary>
        /// Add new audit for a warehouseDocumentType
        /// </summary>
        /// <remarks>
        /// Adds an audit to an existing warehouseDocumentType.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseDocumentTypeId">Id of the warehouseDocumentType to add an audit to</param>
        /// <param name="warehouseDocumentTypeAudit">The audit to add</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddWarehouseDocumentTypeAuditAsyncWithHttpInfo (int? warehouseDocumentTypeId, string warehouseDocumentTypeAudit);
        /// <summary>
        /// Attach a file to a warehouseDocumentType
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing warehouseDocumentType.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseDocumentTypeId">Id of the warehouseDocumentType to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddWarehouseDocumentTypeFileAsync (int? warehouseDocumentTypeId, string fileName);

        /// <summary>
        /// Attach a file to a warehouseDocumentType
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing warehouseDocumentType.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseDocumentTypeId">Id of the warehouseDocumentType to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddWarehouseDocumentTypeFileAsyncWithHttpInfo (int? warehouseDocumentTypeId, string fileName);
        /// <summary>
        /// Attach a file to a warehouseDocumentType by URL.
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing warehouseDocumentType by URL.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="warehouseDocumentTypeId">Id of the warehouseDocumentType to add an file to</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddWarehouseDocumentTypeFileByURLAsync (RecordFile body, int? warehouseDocumentTypeId);

        /// <summary>
        /// Attach a file to a warehouseDocumentType by URL.
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing warehouseDocumentType by URL.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="warehouseDocumentTypeId">Id of the warehouseDocumentType to add an file to</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddWarehouseDocumentTypeFileByURLAsyncWithHttpInfo (RecordFile body, int? warehouseDocumentTypeId);
        /// <summary>
        /// Add new tags for a warehouseDocumentType.
        /// </summary>
        /// <remarks>
        /// Adds a tag to an existing warehouseDocumentType.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseDocumentTypeId">Id of the warehouseDocumentType to add a tag to</param>
        /// <param name="warehouseDocumentTypeTag">The tag to add</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddWarehouseDocumentTypeTagAsync (int? warehouseDocumentTypeId, string warehouseDocumentTypeTag);

        /// <summary>
        /// Add new tags for a warehouseDocumentType.
        /// </summary>
        /// <remarks>
        /// Adds a tag to an existing warehouseDocumentType.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseDocumentTypeId">Id of the warehouseDocumentType to add a tag to</param>
        /// <param name="warehouseDocumentTypeTag">The tag to add</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddWarehouseDocumentTypeTagAsyncWithHttpInfo (int? warehouseDocumentTypeId, string warehouseDocumentTypeTag);
        /// <summary>
        /// Delete a file for a warehouseDocumentType.
        /// </summary>
        /// <remarks>
        /// Deletes an existing warehouseDocumentType file using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseDocumentTypeId">Id of the warehouseDocumentType to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteWarehouseDocumentTypeFileAsync (int? warehouseDocumentTypeId, int? fileId);

        /// <summary>
        /// Delete a file for a warehouseDocumentType.
        /// </summary>
        /// <remarks>
        /// Deletes an existing warehouseDocumentType file using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseDocumentTypeId">Id of the warehouseDocumentType to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteWarehouseDocumentTypeFileAsyncWithHttpInfo (int? warehouseDocumentTypeId, int? fileId);
        /// <summary>
        /// Delete a tag for a warehouseDocumentType.
        /// </summary>
        /// <remarks>
        /// Deletes an existing warehouseDocumentType tag using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseDocumentTypeId">Id of the warehouseDocumentType to remove tag from</param>
        /// <param name="warehouseDocumentTypeTag">The tag to delete</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteWarehouseDocumentTypeTagAsync (int? warehouseDocumentTypeId, string warehouseDocumentTypeTag);

        /// <summary>
        /// Delete a tag for a warehouseDocumentType.
        /// </summary>
        /// <remarks>
        /// Deletes an existing warehouseDocumentType tag using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseDocumentTypeId">Id of the warehouseDocumentType to remove tag from</param>
        /// <param name="warehouseDocumentTypeTag">The tag to delete</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteWarehouseDocumentTypeTagAsyncWithHttpInfo (int? warehouseDocumentTypeId, string warehouseDocumentTypeTag);
        /// <summary>
        /// Get a duplicated a warehouseDocumentType by id
        /// </summary>
        /// <remarks>
        /// Returns a duplicated warehouseDocumentType identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseDocumentTypeId">Id of the warehouseDocumentType to be duplicated.</param>
        /// <returns>Task of WarehouseDocumentType</returns>
        System.Threading.Tasks.Task<WarehouseDocumentType> GetDuplicateWarehouseDocumentTypeByIdAsync (int? warehouseDocumentTypeId);

        /// <summary>
        /// Get a duplicated a warehouseDocumentType by id
        /// </summary>
        /// <remarks>
        /// Returns a duplicated warehouseDocumentType identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseDocumentTypeId">Id of the warehouseDocumentType to be duplicated.</param>
        /// <returns>Task of ApiResponse (WarehouseDocumentType)</returns>
        System.Threading.Tasks.Task<ApiResponse<WarehouseDocumentType>> GetDuplicateWarehouseDocumentTypeByIdAsyncWithHttpInfo (int? warehouseDocumentTypeId);
        /// <summary>
        /// Search warehouseDocumentTypes by filter
        /// </summary>
        /// <remarks>
        /// Returns the list of warehouseDocumentTypes that match the given filter.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>Task of List&lt;WarehouseDocumentType&gt;</returns>
        System.Threading.Tasks.Task<List<WarehouseDocumentType>> GetWarehouseDocumentTypeByFilterAsync (string filter = null, int? page = null, int? limit = null, string sort = null);

        /// <summary>
        /// Search warehouseDocumentTypes by filter
        /// </summary>
        /// <remarks>
        /// Returns the list of warehouseDocumentTypes that match the given filter.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;WarehouseDocumentType&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<WarehouseDocumentType>>> GetWarehouseDocumentTypeByFilterAsyncWithHttpInfo (string filter = null, int? page = null, int? limit = null, string sort = null);
        /// <summary>
        /// Get a warehouseDocumentType by id
        /// </summary>
        /// <remarks>
        /// Returns the warehouseDocumentType identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseDocumentTypeId">Id of the warehouseDocumentType to be returned.</param>
        /// <returns>Task of WarehouseDocumentType</returns>
        System.Threading.Tasks.Task<WarehouseDocumentType> GetWarehouseDocumentTypeByIdAsync (int? warehouseDocumentTypeId);

        /// <summary>
        /// Get a warehouseDocumentType by id
        /// </summary>
        /// <remarks>
        /// Returns the warehouseDocumentType identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseDocumentTypeId">Id of the warehouseDocumentType to be returned.</param>
        /// <returns>Task of ApiResponse (WarehouseDocumentType)</returns>
        System.Threading.Tasks.Task<ApiResponse<WarehouseDocumentType>> GetWarehouseDocumentTypeByIdAsyncWithHttpInfo (int? warehouseDocumentTypeId);
        /// <summary>
        /// Get the files for a warehouseDocumentType.
        /// </summary>
        /// <remarks>
        /// Get all existing warehouseDocumentType files.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseDocumentTypeId">Id of the warehouseDocumentType to get files for</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetWarehouseDocumentTypeFilesAsync (int? warehouseDocumentTypeId);

        /// <summary>
        /// Get the files for a warehouseDocumentType.
        /// </summary>
        /// <remarks>
        /// Get all existing warehouseDocumentType files.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseDocumentTypeId">Id of the warehouseDocumentType to get files for</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetWarehouseDocumentTypeFilesAsyncWithHttpInfo (int? warehouseDocumentTypeId);
        /// <summary>
        /// Get the tags for a warehouseDocumentType.
        /// </summary>
        /// <remarks>
        /// Get all existing warehouseDocumentType tags.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseDocumentTypeId">Id of the warehouseDocumentType to get tags for</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetWarehouseDocumentTypeTagsAsync (int? warehouseDocumentTypeId);

        /// <summary>
        /// Get the tags for a warehouseDocumentType.
        /// </summary>
        /// <remarks>
        /// Get all existing warehouseDocumentType tags.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseDocumentTypeId">Id of the warehouseDocumentType to get tags for</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetWarehouseDocumentTypeTagsAsyncWithHttpInfo (int? warehouseDocumentTypeId);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class WarehouseDocumentTypeApi : IWarehouseDocumentTypeApi
    {
        private Infoplus.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="WarehouseDocumentTypeApi"/> class.
        /// </summary>
        /// <returns></returns>
        public WarehouseDocumentTypeApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = Infoplus.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WarehouseDocumentTypeApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public WarehouseDocumentTypeApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Infoplus.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Infoplus.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Add new audit for a warehouseDocumentType Adds an audit to an existing warehouseDocumentType.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseDocumentTypeId">Id of the warehouseDocumentType to add an audit to</param>
        /// <param name="warehouseDocumentTypeAudit">The audit to add</param>
        /// <returns></returns>
        public void AddWarehouseDocumentTypeAudit (int? warehouseDocumentTypeId, string warehouseDocumentTypeAudit)
        {
             AddWarehouseDocumentTypeAuditWithHttpInfo(warehouseDocumentTypeId, warehouseDocumentTypeAudit);
        }

        /// <summary>
        /// Add new audit for a warehouseDocumentType Adds an audit to an existing warehouseDocumentType.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseDocumentTypeId">Id of the warehouseDocumentType to add an audit to</param>
        /// <param name="warehouseDocumentTypeAudit">The audit to add</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AddWarehouseDocumentTypeAuditWithHttpInfo (int? warehouseDocumentTypeId, string warehouseDocumentTypeAudit)
        {
            // verify the required parameter 'warehouseDocumentTypeId' is set
            if (warehouseDocumentTypeId == null)
                throw new ApiException(400, "Missing required parameter 'warehouseDocumentTypeId' when calling WarehouseDocumentTypeApi->AddWarehouseDocumentTypeAudit");
            // verify the required parameter 'warehouseDocumentTypeAudit' is set
            if (warehouseDocumentTypeAudit == null)
                throw new ApiException(400, "Missing required parameter 'warehouseDocumentTypeAudit' when calling WarehouseDocumentTypeApi->AddWarehouseDocumentTypeAudit");

            var localVarPath = "/beta/warehouseDocumentType/{warehouseDocumentTypeId}/audit/{warehouseDocumentTypeAudit}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (warehouseDocumentTypeId != null) localVarPathParams.Add("warehouseDocumentTypeId", Configuration.ApiClient.ParameterToString(warehouseDocumentTypeId)); // path parameter
            if (warehouseDocumentTypeAudit != null) localVarPathParams.Add("warehouseDocumentTypeAudit", Configuration.ApiClient.ParameterToString(warehouseDocumentTypeAudit)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddWarehouseDocumentTypeAudit", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Add new audit for a warehouseDocumentType Adds an audit to an existing warehouseDocumentType.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseDocumentTypeId">Id of the warehouseDocumentType to add an audit to</param>
        /// <param name="warehouseDocumentTypeAudit">The audit to add</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddWarehouseDocumentTypeAuditAsync (int? warehouseDocumentTypeId, string warehouseDocumentTypeAudit)
        {
             await AddWarehouseDocumentTypeAuditAsyncWithHttpInfo(warehouseDocumentTypeId, warehouseDocumentTypeAudit);

        }

        /// <summary>
        /// Add new audit for a warehouseDocumentType Adds an audit to an existing warehouseDocumentType.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseDocumentTypeId">Id of the warehouseDocumentType to add an audit to</param>
        /// <param name="warehouseDocumentTypeAudit">The audit to add</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddWarehouseDocumentTypeAuditAsyncWithHttpInfo (int? warehouseDocumentTypeId, string warehouseDocumentTypeAudit)
        {
            // verify the required parameter 'warehouseDocumentTypeId' is set
            if (warehouseDocumentTypeId == null)
                throw new ApiException(400, "Missing required parameter 'warehouseDocumentTypeId' when calling WarehouseDocumentTypeApi->AddWarehouseDocumentTypeAudit");
            // verify the required parameter 'warehouseDocumentTypeAudit' is set
            if (warehouseDocumentTypeAudit == null)
                throw new ApiException(400, "Missing required parameter 'warehouseDocumentTypeAudit' when calling WarehouseDocumentTypeApi->AddWarehouseDocumentTypeAudit");

            var localVarPath = "/beta/warehouseDocumentType/{warehouseDocumentTypeId}/audit/{warehouseDocumentTypeAudit}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (warehouseDocumentTypeId != null) localVarPathParams.Add("warehouseDocumentTypeId", Configuration.ApiClient.ParameterToString(warehouseDocumentTypeId)); // path parameter
            if (warehouseDocumentTypeAudit != null) localVarPathParams.Add("warehouseDocumentTypeAudit", Configuration.ApiClient.ParameterToString(warehouseDocumentTypeAudit)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddWarehouseDocumentTypeAudit", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Attach a file to a warehouseDocumentType Adds a file to an existing warehouseDocumentType.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseDocumentTypeId">Id of the warehouseDocumentType to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns></returns>
        public void AddWarehouseDocumentTypeFile (int? warehouseDocumentTypeId, string fileName)
        {
             AddWarehouseDocumentTypeFileWithHttpInfo(warehouseDocumentTypeId, fileName);
        }

        /// <summary>
        /// Attach a file to a warehouseDocumentType Adds a file to an existing warehouseDocumentType.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseDocumentTypeId">Id of the warehouseDocumentType to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AddWarehouseDocumentTypeFileWithHttpInfo (int? warehouseDocumentTypeId, string fileName)
        {
            // verify the required parameter 'warehouseDocumentTypeId' is set
            if (warehouseDocumentTypeId == null)
                throw new ApiException(400, "Missing required parameter 'warehouseDocumentTypeId' when calling WarehouseDocumentTypeApi->AddWarehouseDocumentTypeFile");
            // verify the required parameter 'fileName' is set
            if (fileName == null)
                throw new ApiException(400, "Missing required parameter 'fileName' when calling WarehouseDocumentTypeApi->AddWarehouseDocumentTypeFile");

            var localVarPath = "/beta/warehouseDocumentType/{warehouseDocumentTypeId}/file/{fileName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (warehouseDocumentTypeId != null) localVarPathParams.Add("warehouseDocumentTypeId", Configuration.ApiClient.ParameterToString(warehouseDocumentTypeId)); // path parameter
            if (fileName != null) localVarPathParams.Add("fileName", Configuration.ApiClient.ParameterToString(fileName)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddWarehouseDocumentTypeFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Attach a file to a warehouseDocumentType Adds a file to an existing warehouseDocumentType.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseDocumentTypeId">Id of the warehouseDocumentType to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddWarehouseDocumentTypeFileAsync (int? warehouseDocumentTypeId, string fileName)
        {
             await AddWarehouseDocumentTypeFileAsyncWithHttpInfo(warehouseDocumentTypeId, fileName);

        }

        /// <summary>
        /// Attach a file to a warehouseDocumentType Adds a file to an existing warehouseDocumentType.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseDocumentTypeId">Id of the warehouseDocumentType to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddWarehouseDocumentTypeFileAsyncWithHttpInfo (int? warehouseDocumentTypeId, string fileName)
        {
            // verify the required parameter 'warehouseDocumentTypeId' is set
            if (warehouseDocumentTypeId == null)
                throw new ApiException(400, "Missing required parameter 'warehouseDocumentTypeId' when calling WarehouseDocumentTypeApi->AddWarehouseDocumentTypeFile");
            // verify the required parameter 'fileName' is set
            if (fileName == null)
                throw new ApiException(400, "Missing required parameter 'fileName' when calling WarehouseDocumentTypeApi->AddWarehouseDocumentTypeFile");

            var localVarPath = "/beta/warehouseDocumentType/{warehouseDocumentTypeId}/file/{fileName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (warehouseDocumentTypeId != null) localVarPathParams.Add("warehouseDocumentTypeId", Configuration.ApiClient.ParameterToString(warehouseDocumentTypeId)); // path parameter
            if (fileName != null) localVarPathParams.Add("fileName", Configuration.ApiClient.ParameterToString(fileName)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddWarehouseDocumentTypeFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Attach a file to a warehouseDocumentType by URL. Adds a file to an existing warehouseDocumentType by URL.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="warehouseDocumentTypeId">Id of the warehouseDocumentType to add an file to</param>
        /// <returns></returns>
        public void AddWarehouseDocumentTypeFileByURL (RecordFile body, int? warehouseDocumentTypeId)
        {
             AddWarehouseDocumentTypeFileByURLWithHttpInfo(body, warehouseDocumentTypeId);
        }

        /// <summary>
        /// Attach a file to a warehouseDocumentType by URL. Adds a file to an existing warehouseDocumentType by URL.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="warehouseDocumentTypeId">Id of the warehouseDocumentType to add an file to</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AddWarehouseDocumentTypeFileByURLWithHttpInfo (RecordFile body, int? warehouseDocumentTypeId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling WarehouseDocumentTypeApi->AddWarehouseDocumentTypeFileByURL");
            // verify the required parameter 'warehouseDocumentTypeId' is set
            if (warehouseDocumentTypeId == null)
                throw new ApiException(400, "Missing required parameter 'warehouseDocumentTypeId' when calling WarehouseDocumentTypeApi->AddWarehouseDocumentTypeFileByURL");

            var localVarPath = "/beta/warehouseDocumentType/{warehouseDocumentTypeId}/file";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (warehouseDocumentTypeId != null) localVarPathParams.Add("warehouseDocumentTypeId", Configuration.ApiClient.ParameterToString(warehouseDocumentTypeId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddWarehouseDocumentTypeFileByURL", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Attach a file to a warehouseDocumentType by URL. Adds a file to an existing warehouseDocumentType by URL.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="warehouseDocumentTypeId">Id of the warehouseDocumentType to add an file to</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddWarehouseDocumentTypeFileByURLAsync (RecordFile body, int? warehouseDocumentTypeId)
        {
             await AddWarehouseDocumentTypeFileByURLAsyncWithHttpInfo(body, warehouseDocumentTypeId);

        }

        /// <summary>
        /// Attach a file to a warehouseDocumentType by URL. Adds a file to an existing warehouseDocumentType by URL.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="warehouseDocumentTypeId">Id of the warehouseDocumentType to add an file to</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddWarehouseDocumentTypeFileByURLAsyncWithHttpInfo (RecordFile body, int? warehouseDocumentTypeId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling WarehouseDocumentTypeApi->AddWarehouseDocumentTypeFileByURL");
            // verify the required parameter 'warehouseDocumentTypeId' is set
            if (warehouseDocumentTypeId == null)
                throw new ApiException(400, "Missing required parameter 'warehouseDocumentTypeId' when calling WarehouseDocumentTypeApi->AddWarehouseDocumentTypeFileByURL");

            var localVarPath = "/beta/warehouseDocumentType/{warehouseDocumentTypeId}/file";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (warehouseDocumentTypeId != null) localVarPathParams.Add("warehouseDocumentTypeId", Configuration.ApiClient.ParameterToString(warehouseDocumentTypeId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddWarehouseDocumentTypeFileByURL", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Add new tags for a warehouseDocumentType. Adds a tag to an existing warehouseDocumentType.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseDocumentTypeId">Id of the warehouseDocumentType to add a tag to</param>
        /// <param name="warehouseDocumentTypeTag">The tag to add</param>
        /// <returns></returns>
        public void AddWarehouseDocumentTypeTag (int? warehouseDocumentTypeId, string warehouseDocumentTypeTag)
        {
             AddWarehouseDocumentTypeTagWithHttpInfo(warehouseDocumentTypeId, warehouseDocumentTypeTag);
        }

        /// <summary>
        /// Add new tags for a warehouseDocumentType. Adds a tag to an existing warehouseDocumentType.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseDocumentTypeId">Id of the warehouseDocumentType to add a tag to</param>
        /// <param name="warehouseDocumentTypeTag">The tag to add</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AddWarehouseDocumentTypeTagWithHttpInfo (int? warehouseDocumentTypeId, string warehouseDocumentTypeTag)
        {
            // verify the required parameter 'warehouseDocumentTypeId' is set
            if (warehouseDocumentTypeId == null)
                throw new ApiException(400, "Missing required parameter 'warehouseDocumentTypeId' when calling WarehouseDocumentTypeApi->AddWarehouseDocumentTypeTag");
            // verify the required parameter 'warehouseDocumentTypeTag' is set
            if (warehouseDocumentTypeTag == null)
                throw new ApiException(400, "Missing required parameter 'warehouseDocumentTypeTag' when calling WarehouseDocumentTypeApi->AddWarehouseDocumentTypeTag");

            var localVarPath = "/beta/warehouseDocumentType/{warehouseDocumentTypeId}/tag/{warehouseDocumentTypeTag}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (warehouseDocumentTypeId != null) localVarPathParams.Add("warehouseDocumentTypeId", Configuration.ApiClient.ParameterToString(warehouseDocumentTypeId)); // path parameter
            if (warehouseDocumentTypeTag != null) localVarPathParams.Add("warehouseDocumentTypeTag", Configuration.ApiClient.ParameterToString(warehouseDocumentTypeTag)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddWarehouseDocumentTypeTag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Add new tags for a warehouseDocumentType. Adds a tag to an existing warehouseDocumentType.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseDocumentTypeId">Id of the warehouseDocumentType to add a tag to</param>
        /// <param name="warehouseDocumentTypeTag">The tag to add</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddWarehouseDocumentTypeTagAsync (int? warehouseDocumentTypeId, string warehouseDocumentTypeTag)
        {
             await AddWarehouseDocumentTypeTagAsyncWithHttpInfo(warehouseDocumentTypeId, warehouseDocumentTypeTag);

        }

        /// <summary>
        /// Add new tags for a warehouseDocumentType. Adds a tag to an existing warehouseDocumentType.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseDocumentTypeId">Id of the warehouseDocumentType to add a tag to</param>
        /// <param name="warehouseDocumentTypeTag">The tag to add</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddWarehouseDocumentTypeTagAsyncWithHttpInfo (int? warehouseDocumentTypeId, string warehouseDocumentTypeTag)
        {
            // verify the required parameter 'warehouseDocumentTypeId' is set
            if (warehouseDocumentTypeId == null)
                throw new ApiException(400, "Missing required parameter 'warehouseDocumentTypeId' when calling WarehouseDocumentTypeApi->AddWarehouseDocumentTypeTag");
            // verify the required parameter 'warehouseDocumentTypeTag' is set
            if (warehouseDocumentTypeTag == null)
                throw new ApiException(400, "Missing required parameter 'warehouseDocumentTypeTag' when calling WarehouseDocumentTypeApi->AddWarehouseDocumentTypeTag");

            var localVarPath = "/beta/warehouseDocumentType/{warehouseDocumentTypeId}/tag/{warehouseDocumentTypeTag}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (warehouseDocumentTypeId != null) localVarPathParams.Add("warehouseDocumentTypeId", Configuration.ApiClient.ParameterToString(warehouseDocumentTypeId)); // path parameter
            if (warehouseDocumentTypeTag != null) localVarPathParams.Add("warehouseDocumentTypeTag", Configuration.ApiClient.ParameterToString(warehouseDocumentTypeTag)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddWarehouseDocumentTypeTag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a file for a warehouseDocumentType. Deletes an existing warehouseDocumentType file using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseDocumentTypeId">Id of the warehouseDocumentType to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns></returns>
        public void DeleteWarehouseDocumentTypeFile (int? warehouseDocumentTypeId, int? fileId)
        {
             DeleteWarehouseDocumentTypeFileWithHttpInfo(warehouseDocumentTypeId, fileId);
        }

        /// <summary>
        /// Delete a file for a warehouseDocumentType. Deletes an existing warehouseDocumentType file using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseDocumentTypeId">Id of the warehouseDocumentType to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteWarehouseDocumentTypeFileWithHttpInfo (int? warehouseDocumentTypeId, int? fileId)
        {
            // verify the required parameter 'warehouseDocumentTypeId' is set
            if (warehouseDocumentTypeId == null)
                throw new ApiException(400, "Missing required parameter 'warehouseDocumentTypeId' when calling WarehouseDocumentTypeApi->DeleteWarehouseDocumentTypeFile");
            // verify the required parameter 'fileId' is set
            if (fileId == null)
                throw new ApiException(400, "Missing required parameter 'fileId' when calling WarehouseDocumentTypeApi->DeleteWarehouseDocumentTypeFile");

            var localVarPath = "/beta/warehouseDocumentType/{warehouseDocumentTypeId}/file/{fileId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (warehouseDocumentTypeId != null) localVarPathParams.Add("warehouseDocumentTypeId", Configuration.ApiClient.ParameterToString(warehouseDocumentTypeId)); // path parameter
            if (fileId != null) localVarPathParams.Add("fileId", Configuration.ApiClient.ParameterToString(fileId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteWarehouseDocumentTypeFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a file for a warehouseDocumentType. Deletes an existing warehouseDocumentType file using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseDocumentTypeId">Id of the warehouseDocumentType to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteWarehouseDocumentTypeFileAsync (int? warehouseDocumentTypeId, int? fileId)
        {
             await DeleteWarehouseDocumentTypeFileAsyncWithHttpInfo(warehouseDocumentTypeId, fileId);

        }

        /// <summary>
        /// Delete a file for a warehouseDocumentType. Deletes an existing warehouseDocumentType file using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseDocumentTypeId">Id of the warehouseDocumentType to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteWarehouseDocumentTypeFileAsyncWithHttpInfo (int? warehouseDocumentTypeId, int? fileId)
        {
            // verify the required parameter 'warehouseDocumentTypeId' is set
            if (warehouseDocumentTypeId == null)
                throw new ApiException(400, "Missing required parameter 'warehouseDocumentTypeId' when calling WarehouseDocumentTypeApi->DeleteWarehouseDocumentTypeFile");
            // verify the required parameter 'fileId' is set
            if (fileId == null)
                throw new ApiException(400, "Missing required parameter 'fileId' when calling WarehouseDocumentTypeApi->DeleteWarehouseDocumentTypeFile");

            var localVarPath = "/beta/warehouseDocumentType/{warehouseDocumentTypeId}/file/{fileId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (warehouseDocumentTypeId != null) localVarPathParams.Add("warehouseDocumentTypeId", Configuration.ApiClient.ParameterToString(warehouseDocumentTypeId)); // path parameter
            if (fileId != null) localVarPathParams.Add("fileId", Configuration.ApiClient.ParameterToString(fileId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteWarehouseDocumentTypeFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a tag for a warehouseDocumentType. Deletes an existing warehouseDocumentType tag using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseDocumentTypeId">Id of the warehouseDocumentType to remove tag from</param>
        /// <param name="warehouseDocumentTypeTag">The tag to delete</param>
        /// <returns></returns>
        public void DeleteWarehouseDocumentTypeTag (int? warehouseDocumentTypeId, string warehouseDocumentTypeTag)
        {
             DeleteWarehouseDocumentTypeTagWithHttpInfo(warehouseDocumentTypeId, warehouseDocumentTypeTag);
        }

        /// <summary>
        /// Delete a tag for a warehouseDocumentType. Deletes an existing warehouseDocumentType tag using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseDocumentTypeId">Id of the warehouseDocumentType to remove tag from</param>
        /// <param name="warehouseDocumentTypeTag">The tag to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteWarehouseDocumentTypeTagWithHttpInfo (int? warehouseDocumentTypeId, string warehouseDocumentTypeTag)
        {
            // verify the required parameter 'warehouseDocumentTypeId' is set
            if (warehouseDocumentTypeId == null)
                throw new ApiException(400, "Missing required parameter 'warehouseDocumentTypeId' when calling WarehouseDocumentTypeApi->DeleteWarehouseDocumentTypeTag");
            // verify the required parameter 'warehouseDocumentTypeTag' is set
            if (warehouseDocumentTypeTag == null)
                throw new ApiException(400, "Missing required parameter 'warehouseDocumentTypeTag' when calling WarehouseDocumentTypeApi->DeleteWarehouseDocumentTypeTag");

            var localVarPath = "/beta/warehouseDocumentType/{warehouseDocumentTypeId}/tag/{warehouseDocumentTypeTag}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (warehouseDocumentTypeId != null) localVarPathParams.Add("warehouseDocumentTypeId", Configuration.ApiClient.ParameterToString(warehouseDocumentTypeId)); // path parameter
            if (warehouseDocumentTypeTag != null) localVarPathParams.Add("warehouseDocumentTypeTag", Configuration.ApiClient.ParameterToString(warehouseDocumentTypeTag)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteWarehouseDocumentTypeTag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a tag for a warehouseDocumentType. Deletes an existing warehouseDocumentType tag using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseDocumentTypeId">Id of the warehouseDocumentType to remove tag from</param>
        /// <param name="warehouseDocumentTypeTag">The tag to delete</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteWarehouseDocumentTypeTagAsync (int? warehouseDocumentTypeId, string warehouseDocumentTypeTag)
        {
             await DeleteWarehouseDocumentTypeTagAsyncWithHttpInfo(warehouseDocumentTypeId, warehouseDocumentTypeTag);

        }

        /// <summary>
        /// Delete a tag for a warehouseDocumentType. Deletes an existing warehouseDocumentType tag using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseDocumentTypeId">Id of the warehouseDocumentType to remove tag from</param>
        /// <param name="warehouseDocumentTypeTag">The tag to delete</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteWarehouseDocumentTypeTagAsyncWithHttpInfo (int? warehouseDocumentTypeId, string warehouseDocumentTypeTag)
        {
            // verify the required parameter 'warehouseDocumentTypeId' is set
            if (warehouseDocumentTypeId == null)
                throw new ApiException(400, "Missing required parameter 'warehouseDocumentTypeId' when calling WarehouseDocumentTypeApi->DeleteWarehouseDocumentTypeTag");
            // verify the required parameter 'warehouseDocumentTypeTag' is set
            if (warehouseDocumentTypeTag == null)
                throw new ApiException(400, "Missing required parameter 'warehouseDocumentTypeTag' when calling WarehouseDocumentTypeApi->DeleteWarehouseDocumentTypeTag");

            var localVarPath = "/beta/warehouseDocumentType/{warehouseDocumentTypeId}/tag/{warehouseDocumentTypeTag}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (warehouseDocumentTypeId != null) localVarPathParams.Add("warehouseDocumentTypeId", Configuration.ApiClient.ParameterToString(warehouseDocumentTypeId)); // path parameter
            if (warehouseDocumentTypeTag != null) localVarPathParams.Add("warehouseDocumentTypeTag", Configuration.ApiClient.ParameterToString(warehouseDocumentTypeTag)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteWarehouseDocumentTypeTag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get a duplicated a warehouseDocumentType by id Returns a duplicated warehouseDocumentType identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseDocumentTypeId">Id of the warehouseDocumentType to be duplicated.</param>
        /// <returns>WarehouseDocumentType</returns>
        public WarehouseDocumentType GetDuplicateWarehouseDocumentTypeById (int? warehouseDocumentTypeId)
        {
             ApiResponse<WarehouseDocumentType> localVarResponse = GetDuplicateWarehouseDocumentTypeByIdWithHttpInfo(warehouseDocumentTypeId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a duplicated a warehouseDocumentType by id Returns a duplicated warehouseDocumentType identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseDocumentTypeId">Id of the warehouseDocumentType to be duplicated.</param>
        /// <returns>ApiResponse of WarehouseDocumentType</returns>
        public ApiResponse< WarehouseDocumentType > GetDuplicateWarehouseDocumentTypeByIdWithHttpInfo (int? warehouseDocumentTypeId)
        {
            // verify the required parameter 'warehouseDocumentTypeId' is set
            if (warehouseDocumentTypeId == null)
                throw new ApiException(400, "Missing required parameter 'warehouseDocumentTypeId' when calling WarehouseDocumentTypeApi->GetDuplicateWarehouseDocumentTypeById");

            var localVarPath = "/beta/warehouseDocumentType/duplicate/{warehouseDocumentTypeId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (warehouseDocumentTypeId != null) localVarPathParams.Add("warehouseDocumentTypeId", Configuration.ApiClient.ParameterToString(warehouseDocumentTypeId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDuplicateWarehouseDocumentTypeById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WarehouseDocumentType>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WarehouseDocumentType) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WarehouseDocumentType)));
        }

        /// <summary>
        /// Get a duplicated a warehouseDocumentType by id Returns a duplicated warehouseDocumentType identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseDocumentTypeId">Id of the warehouseDocumentType to be duplicated.</param>
        /// <returns>Task of WarehouseDocumentType</returns>
        public async System.Threading.Tasks.Task<WarehouseDocumentType> GetDuplicateWarehouseDocumentTypeByIdAsync (int? warehouseDocumentTypeId)
        {
             ApiResponse<WarehouseDocumentType> localVarResponse = await GetDuplicateWarehouseDocumentTypeByIdAsyncWithHttpInfo(warehouseDocumentTypeId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a duplicated a warehouseDocumentType by id Returns a duplicated warehouseDocumentType identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseDocumentTypeId">Id of the warehouseDocumentType to be duplicated.</param>
        /// <returns>Task of ApiResponse (WarehouseDocumentType)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WarehouseDocumentType>> GetDuplicateWarehouseDocumentTypeByIdAsyncWithHttpInfo (int? warehouseDocumentTypeId)
        {
            // verify the required parameter 'warehouseDocumentTypeId' is set
            if (warehouseDocumentTypeId == null)
                throw new ApiException(400, "Missing required parameter 'warehouseDocumentTypeId' when calling WarehouseDocumentTypeApi->GetDuplicateWarehouseDocumentTypeById");

            var localVarPath = "/beta/warehouseDocumentType/duplicate/{warehouseDocumentTypeId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (warehouseDocumentTypeId != null) localVarPathParams.Add("warehouseDocumentTypeId", Configuration.ApiClient.ParameterToString(warehouseDocumentTypeId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDuplicateWarehouseDocumentTypeById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WarehouseDocumentType>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WarehouseDocumentType) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WarehouseDocumentType)));
        }

        /// <summary>
        /// Search warehouseDocumentTypes by filter Returns the list of warehouseDocumentTypes that match the given filter.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>List&lt;WarehouseDocumentType&gt;</returns>
        public List<WarehouseDocumentType> GetWarehouseDocumentTypeByFilter (string filter = null, int? page = null, int? limit = null, string sort = null)
        {
             ApiResponse<List<WarehouseDocumentType>> localVarResponse = GetWarehouseDocumentTypeByFilterWithHttpInfo(filter, page, limit, sort);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Search warehouseDocumentTypes by filter Returns the list of warehouseDocumentTypes that match the given filter.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>ApiResponse of List&lt;WarehouseDocumentType&gt;</returns>
        public ApiResponse< List<WarehouseDocumentType> > GetWarehouseDocumentTypeByFilterWithHttpInfo (string filter = null, int? page = null, int? limit = null, string sort = null)
        {

            var localVarPath = "/beta/warehouseDocumentType/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (filter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (page != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWarehouseDocumentTypeByFilter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<WarehouseDocumentType>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<WarehouseDocumentType>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<WarehouseDocumentType>)));
        }

        /// <summary>
        /// Search warehouseDocumentTypes by filter Returns the list of warehouseDocumentTypes that match the given filter.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>Task of List&lt;WarehouseDocumentType&gt;</returns>
        public async System.Threading.Tasks.Task<List<WarehouseDocumentType>> GetWarehouseDocumentTypeByFilterAsync (string filter = null, int? page = null, int? limit = null, string sort = null)
        {
             ApiResponse<List<WarehouseDocumentType>> localVarResponse = await GetWarehouseDocumentTypeByFilterAsyncWithHttpInfo(filter, page, limit, sort);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Search warehouseDocumentTypes by filter Returns the list of warehouseDocumentTypes that match the given filter.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;WarehouseDocumentType&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<WarehouseDocumentType>>> GetWarehouseDocumentTypeByFilterAsyncWithHttpInfo (string filter = null, int? page = null, int? limit = null, string sort = null)
        {

            var localVarPath = "/beta/warehouseDocumentType/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (filter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (page != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWarehouseDocumentTypeByFilter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<WarehouseDocumentType>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<WarehouseDocumentType>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<WarehouseDocumentType>)));
        }

        /// <summary>
        /// Get a warehouseDocumentType by id Returns the warehouseDocumentType identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseDocumentTypeId">Id of the warehouseDocumentType to be returned.</param>
        /// <returns>WarehouseDocumentType</returns>
        public WarehouseDocumentType GetWarehouseDocumentTypeById (int? warehouseDocumentTypeId)
        {
             ApiResponse<WarehouseDocumentType> localVarResponse = GetWarehouseDocumentTypeByIdWithHttpInfo(warehouseDocumentTypeId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a warehouseDocumentType by id Returns the warehouseDocumentType identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseDocumentTypeId">Id of the warehouseDocumentType to be returned.</param>
        /// <returns>ApiResponse of WarehouseDocumentType</returns>
        public ApiResponse< WarehouseDocumentType > GetWarehouseDocumentTypeByIdWithHttpInfo (int? warehouseDocumentTypeId)
        {
            // verify the required parameter 'warehouseDocumentTypeId' is set
            if (warehouseDocumentTypeId == null)
                throw new ApiException(400, "Missing required parameter 'warehouseDocumentTypeId' when calling WarehouseDocumentTypeApi->GetWarehouseDocumentTypeById");

            var localVarPath = "/beta/warehouseDocumentType/{warehouseDocumentTypeId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (warehouseDocumentTypeId != null) localVarPathParams.Add("warehouseDocumentTypeId", Configuration.ApiClient.ParameterToString(warehouseDocumentTypeId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWarehouseDocumentTypeById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WarehouseDocumentType>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WarehouseDocumentType) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WarehouseDocumentType)));
        }

        /// <summary>
        /// Get a warehouseDocumentType by id Returns the warehouseDocumentType identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseDocumentTypeId">Id of the warehouseDocumentType to be returned.</param>
        /// <returns>Task of WarehouseDocumentType</returns>
        public async System.Threading.Tasks.Task<WarehouseDocumentType> GetWarehouseDocumentTypeByIdAsync (int? warehouseDocumentTypeId)
        {
             ApiResponse<WarehouseDocumentType> localVarResponse = await GetWarehouseDocumentTypeByIdAsyncWithHttpInfo(warehouseDocumentTypeId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a warehouseDocumentType by id Returns the warehouseDocumentType identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseDocumentTypeId">Id of the warehouseDocumentType to be returned.</param>
        /// <returns>Task of ApiResponse (WarehouseDocumentType)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WarehouseDocumentType>> GetWarehouseDocumentTypeByIdAsyncWithHttpInfo (int? warehouseDocumentTypeId)
        {
            // verify the required parameter 'warehouseDocumentTypeId' is set
            if (warehouseDocumentTypeId == null)
                throw new ApiException(400, "Missing required parameter 'warehouseDocumentTypeId' when calling WarehouseDocumentTypeApi->GetWarehouseDocumentTypeById");

            var localVarPath = "/beta/warehouseDocumentType/{warehouseDocumentTypeId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (warehouseDocumentTypeId != null) localVarPathParams.Add("warehouseDocumentTypeId", Configuration.ApiClient.ParameterToString(warehouseDocumentTypeId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWarehouseDocumentTypeById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WarehouseDocumentType>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WarehouseDocumentType) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WarehouseDocumentType)));
        }

        /// <summary>
        /// Get the files for a warehouseDocumentType. Get all existing warehouseDocumentType files.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseDocumentTypeId">Id of the warehouseDocumentType to get files for</param>
        /// <returns></returns>
        public void GetWarehouseDocumentTypeFiles (int? warehouseDocumentTypeId)
        {
             GetWarehouseDocumentTypeFilesWithHttpInfo(warehouseDocumentTypeId);
        }

        /// <summary>
        /// Get the files for a warehouseDocumentType. Get all existing warehouseDocumentType files.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseDocumentTypeId">Id of the warehouseDocumentType to get files for</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GetWarehouseDocumentTypeFilesWithHttpInfo (int? warehouseDocumentTypeId)
        {
            // verify the required parameter 'warehouseDocumentTypeId' is set
            if (warehouseDocumentTypeId == null)
                throw new ApiException(400, "Missing required parameter 'warehouseDocumentTypeId' when calling WarehouseDocumentTypeApi->GetWarehouseDocumentTypeFiles");

            var localVarPath = "/beta/warehouseDocumentType/{warehouseDocumentTypeId}/file";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (warehouseDocumentTypeId != null) localVarPathParams.Add("warehouseDocumentTypeId", Configuration.ApiClient.ParameterToString(warehouseDocumentTypeId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWarehouseDocumentTypeFiles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get the files for a warehouseDocumentType. Get all existing warehouseDocumentType files.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseDocumentTypeId">Id of the warehouseDocumentType to get files for</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetWarehouseDocumentTypeFilesAsync (int? warehouseDocumentTypeId)
        {
             await GetWarehouseDocumentTypeFilesAsyncWithHttpInfo(warehouseDocumentTypeId);

        }

        /// <summary>
        /// Get the files for a warehouseDocumentType. Get all existing warehouseDocumentType files.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseDocumentTypeId">Id of the warehouseDocumentType to get files for</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetWarehouseDocumentTypeFilesAsyncWithHttpInfo (int? warehouseDocumentTypeId)
        {
            // verify the required parameter 'warehouseDocumentTypeId' is set
            if (warehouseDocumentTypeId == null)
                throw new ApiException(400, "Missing required parameter 'warehouseDocumentTypeId' when calling WarehouseDocumentTypeApi->GetWarehouseDocumentTypeFiles");

            var localVarPath = "/beta/warehouseDocumentType/{warehouseDocumentTypeId}/file";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (warehouseDocumentTypeId != null) localVarPathParams.Add("warehouseDocumentTypeId", Configuration.ApiClient.ParameterToString(warehouseDocumentTypeId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWarehouseDocumentTypeFiles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get the tags for a warehouseDocumentType. Get all existing warehouseDocumentType tags.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseDocumentTypeId">Id of the warehouseDocumentType to get tags for</param>
        /// <returns></returns>
        public void GetWarehouseDocumentTypeTags (int? warehouseDocumentTypeId)
        {
             GetWarehouseDocumentTypeTagsWithHttpInfo(warehouseDocumentTypeId);
        }

        /// <summary>
        /// Get the tags for a warehouseDocumentType. Get all existing warehouseDocumentType tags.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseDocumentTypeId">Id of the warehouseDocumentType to get tags for</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GetWarehouseDocumentTypeTagsWithHttpInfo (int? warehouseDocumentTypeId)
        {
            // verify the required parameter 'warehouseDocumentTypeId' is set
            if (warehouseDocumentTypeId == null)
                throw new ApiException(400, "Missing required parameter 'warehouseDocumentTypeId' when calling WarehouseDocumentTypeApi->GetWarehouseDocumentTypeTags");

            var localVarPath = "/beta/warehouseDocumentType/{warehouseDocumentTypeId}/tag";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (warehouseDocumentTypeId != null) localVarPathParams.Add("warehouseDocumentTypeId", Configuration.ApiClient.ParameterToString(warehouseDocumentTypeId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWarehouseDocumentTypeTags", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get the tags for a warehouseDocumentType. Get all existing warehouseDocumentType tags.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseDocumentTypeId">Id of the warehouseDocumentType to get tags for</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetWarehouseDocumentTypeTagsAsync (int? warehouseDocumentTypeId)
        {
             await GetWarehouseDocumentTypeTagsAsyncWithHttpInfo(warehouseDocumentTypeId);

        }

        /// <summary>
        /// Get the tags for a warehouseDocumentType. Get all existing warehouseDocumentType tags.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseDocumentTypeId">Id of the warehouseDocumentType to get tags for</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetWarehouseDocumentTypeTagsAsyncWithHttpInfo (int? warehouseDocumentTypeId)
        {
            // verify the required parameter 'warehouseDocumentTypeId' is set
            if (warehouseDocumentTypeId == null)
                throw new ApiException(400, "Missing required parameter 'warehouseDocumentTypeId' when calling WarehouseDocumentTypeApi->GetWarehouseDocumentTypeTags");

            var localVarPath = "/beta/warehouseDocumentType/{warehouseDocumentTypeId}/tag";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (warehouseDocumentTypeId != null) localVarPathParams.Add("warehouseDocumentTypeId", Configuration.ApiClient.ParameterToString(warehouseDocumentTypeId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWarehouseDocumentTypeTags", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

    }
}
