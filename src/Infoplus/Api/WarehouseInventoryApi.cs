/* 
 * Infoplus API
 *
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Infoplus.Client;
using Infoplus.Model;

namespace Infoplus.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IWarehouseInventoryApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Add new audit for a warehouseInventory
        /// </summary>
        /// <remarks>
        /// Adds an audit to an existing warehouseInventory.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseInventoryId">Id of the warehouseInventory to add an audit to</param>
        /// <param name="warehouseInventoryAudit">The audit to add</param>
        /// <returns></returns>
        void AddWarehouseInventoryAudit (int? warehouseInventoryId, string warehouseInventoryAudit);

        /// <summary>
        /// Add new audit for a warehouseInventory
        /// </summary>
        /// <remarks>
        /// Adds an audit to an existing warehouseInventory.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseInventoryId">Id of the warehouseInventory to add an audit to</param>
        /// <param name="warehouseInventoryAudit">The audit to add</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddWarehouseInventoryAuditWithHttpInfo (int? warehouseInventoryId, string warehouseInventoryAudit);
        /// <summary>
        /// Attach a file to a warehouseInventory
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing warehouseInventory.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseInventoryId">Id of the warehouseInventory to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns></returns>
        void AddWarehouseInventoryFile (int? warehouseInventoryId, string fileName);

        /// <summary>
        /// Attach a file to a warehouseInventory
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing warehouseInventory.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseInventoryId">Id of the warehouseInventory to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddWarehouseInventoryFileWithHttpInfo (int? warehouseInventoryId, string fileName);
        /// <summary>
        /// Attach a file to a warehouseInventory by URL.
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing warehouseInventory by URL.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="warehouseInventoryId">Id of the warehouseInventory to add an file to</param>
        /// <returns></returns>
        void AddWarehouseInventoryFileByURL (RecordFile body, int? warehouseInventoryId);

        /// <summary>
        /// Attach a file to a warehouseInventory by URL.
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing warehouseInventory by URL.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="warehouseInventoryId">Id of the warehouseInventory to add an file to</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddWarehouseInventoryFileByURLWithHttpInfo (RecordFile body, int? warehouseInventoryId);
        /// <summary>
        /// Add new tags for a warehouseInventory.
        /// </summary>
        /// <remarks>
        /// Adds a tag to an existing warehouseInventory.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseInventoryId">Id of the warehouseInventory to add a tag to</param>
        /// <param name="warehouseInventoryTag">The tag to add</param>
        /// <returns></returns>
        void AddWarehouseInventoryTag (int? warehouseInventoryId, string warehouseInventoryTag);

        /// <summary>
        /// Add new tags for a warehouseInventory.
        /// </summary>
        /// <remarks>
        /// Adds a tag to an existing warehouseInventory.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseInventoryId">Id of the warehouseInventory to add a tag to</param>
        /// <param name="warehouseInventoryTag">The tag to add</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddWarehouseInventoryTagWithHttpInfo (int? warehouseInventoryId, string warehouseInventoryTag);
        /// <summary>
        /// Delete a file for a warehouseInventory.
        /// </summary>
        /// <remarks>
        /// Deletes an existing warehouseInventory file using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseInventoryId">Id of the warehouseInventory to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns></returns>
        void DeleteWarehouseInventoryFile (int? warehouseInventoryId, int? fileId);

        /// <summary>
        /// Delete a file for a warehouseInventory.
        /// </summary>
        /// <remarks>
        /// Deletes an existing warehouseInventory file using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseInventoryId">Id of the warehouseInventory to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteWarehouseInventoryFileWithHttpInfo (int? warehouseInventoryId, int? fileId);
        /// <summary>
        /// Delete a tag for a warehouseInventory.
        /// </summary>
        /// <remarks>
        /// Deletes an existing warehouseInventory tag using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseInventoryId">Id of the warehouseInventory to remove tag from</param>
        /// <param name="warehouseInventoryTag">The tag to delete</param>
        /// <returns></returns>
        void DeleteWarehouseInventoryTag (int? warehouseInventoryId, string warehouseInventoryTag);

        /// <summary>
        /// Delete a tag for a warehouseInventory.
        /// </summary>
        /// <remarks>
        /// Deletes an existing warehouseInventory tag using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseInventoryId">Id of the warehouseInventory to remove tag from</param>
        /// <param name="warehouseInventoryTag">The tag to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteWarehouseInventoryTagWithHttpInfo (int? warehouseInventoryId, string warehouseInventoryTag);
        /// <summary>
        /// Get a duplicated a warehouseInventory by id
        /// </summary>
        /// <remarks>
        /// Returns a duplicated warehouseInventory identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseInventoryId">Id of the warehouseInventory to be duplicated.</param>
        /// <returns>WarehouseInventory</returns>
        WarehouseInventory GetDuplicateWarehouseInventoryById (int? warehouseInventoryId);

        /// <summary>
        /// Get a duplicated a warehouseInventory by id
        /// </summary>
        /// <remarks>
        /// Returns a duplicated warehouseInventory identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseInventoryId">Id of the warehouseInventory to be duplicated.</param>
        /// <returns>ApiResponse of WarehouseInventory</returns>
        ApiResponse<WarehouseInventory> GetDuplicateWarehouseInventoryByIdWithHttpInfo (int? warehouseInventoryId);
        /// <summary>
        /// Search warehouseInventorys by filter
        /// </summary>
        /// <remarks>
        /// Returns the list of warehouseInventorys that match the given filter.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>List&lt;WarehouseInventory&gt;</returns>
        List<WarehouseInventory> GetWarehouseInventoryByFilter (string filter = null, int? page = null, int? limit = null, string sort = null);

        /// <summary>
        /// Search warehouseInventorys by filter
        /// </summary>
        /// <remarks>
        /// Returns the list of warehouseInventorys that match the given filter.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>ApiResponse of List&lt;WarehouseInventory&gt;</returns>
        ApiResponse<List<WarehouseInventory>> GetWarehouseInventoryByFilterWithHttpInfo (string filter = null, int? page = null, int? limit = null, string sort = null);
        /// <summary>
        /// Get a warehouseInventory by id
        /// </summary>
        /// <remarks>
        /// Returns the warehouseInventory identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseInventoryId">Id of the warehouseInventory to be returned.</param>
        /// <returns>WarehouseInventory</returns>
        WarehouseInventory GetWarehouseInventoryById (int? warehouseInventoryId);

        /// <summary>
        /// Get a warehouseInventory by id
        /// </summary>
        /// <remarks>
        /// Returns the warehouseInventory identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseInventoryId">Id of the warehouseInventory to be returned.</param>
        /// <returns>ApiResponse of WarehouseInventory</returns>
        ApiResponse<WarehouseInventory> GetWarehouseInventoryByIdWithHttpInfo (int? warehouseInventoryId);
        /// <summary>
        /// Get the files for a warehouseInventory.
        /// </summary>
        /// <remarks>
        /// Get all existing warehouseInventory files.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseInventoryId">Id of the warehouseInventory to get files for</param>
        /// <returns></returns>
        void GetWarehouseInventoryFiles (int? warehouseInventoryId);

        /// <summary>
        /// Get the files for a warehouseInventory.
        /// </summary>
        /// <remarks>
        /// Get all existing warehouseInventory files.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseInventoryId">Id of the warehouseInventory to get files for</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetWarehouseInventoryFilesWithHttpInfo (int? warehouseInventoryId);
        /// <summary>
        /// Get the tags for a warehouseInventory.
        /// </summary>
        /// <remarks>
        /// Get all existing warehouseInventory tags.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseInventoryId">Id of the warehouseInventory to get tags for</param>
        /// <returns></returns>
        void GetWarehouseInventoryTags (int? warehouseInventoryId);

        /// <summary>
        /// Get the tags for a warehouseInventory.
        /// </summary>
        /// <remarks>
        /// Get all existing warehouseInventory tags.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseInventoryId">Id of the warehouseInventory to get tags for</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetWarehouseInventoryTagsWithHttpInfo (int? warehouseInventoryId);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Add new audit for a warehouseInventory
        /// </summary>
        /// <remarks>
        /// Adds an audit to an existing warehouseInventory.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseInventoryId">Id of the warehouseInventory to add an audit to</param>
        /// <param name="warehouseInventoryAudit">The audit to add</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddWarehouseInventoryAuditAsync (int? warehouseInventoryId, string warehouseInventoryAudit);

        /// <summary>
        /// Add new audit for a warehouseInventory
        /// </summary>
        /// <remarks>
        /// Adds an audit to an existing warehouseInventory.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseInventoryId">Id of the warehouseInventory to add an audit to</param>
        /// <param name="warehouseInventoryAudit">The audit to add</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddWarehouseInventoryAuditAsyncWithHttpInfo (int? warehouseInventoryId, string warehouseInventoryAudit);
        /// <summary>
        /// Attach a file to a warehouseInventory
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing warehouseInventory.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseInventoryId">Id of the warehouseInventory to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddWarehouseInventoryFileAsync (int? warehouseInventoryId, string fileName);

        /// <summary>
        /// Attach a file to a warehouseInventory
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing warehouseInventory.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseInventoryId">Id of the warehouseInventory to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddWarehouseInventoryFileAsyncWithHttpInfo (int? warehouseInventoryId, string fileName);
        /// <summary>
        /// Attach a file to a warehouseInventory by URL.
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing warehouseInventory by URL.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="warehouseInventoryId">Id of the warehouseInventory to add an file to</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddWarehouseInventoryFileByURLAsync (RecordFile body, int? warehouseInventoryId);

        /// <summary>
        /// Attach a file to a warehouseInventory by URL.
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing warehouseInventory by URL.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="warehouseInventoryId">Id of the warehouseInventory to add an file to</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddWarehouseInventoryFileByURLAsyncWithHttpInfo (RecordFile body, int? warehouseInventoryId);
        /// <summary>
        /// Add new tags for a warehouseInventory.
        /// </summary>
        /// <remarks>
        /// Adds a tag to an existing warehouseInventory.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseInventoryId">Id of the warehouseInventory to add a tag to</param>
        /// <param name="warehouseInventoryTag">The tag to add</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddWarehouseInventoryTagAsync (int? warehouseInventoryId, string warehouseInventoryTag);

        /// <summary>
        /// Add new tags for a warehouseInventory.
        /// </summary>
        /// <remarks>
        /// Adds a tag to an existing warehouseInventory.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseInventoryId">Id of the warehouseInventory to add a tag to</param>
        /// <param name="warehouseInventoryTag">The tag to add</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddWarehouseInventoryTagAsyncWithHttpInfo (int? warehouseInventoryId, string warehouseInventoryTag);
        /// <summary>
        /// Delete a file for a warehouseInventory.
        /// </summary>
        /// <remarks>
        /// Deletes an existing warehouseInventory file using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseInventoryId">Id of the warehouseInventory to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteWarehouseInventoryFileAsync (int? warehouseInventoryId, int? fileId);

        /// <summary>
        /// Delete a file for a warehouseInventory.
        /// </summary>
        /// <remarks>
        /// Deletes an existing warehouseInventory file using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseInventoryId">Id of the warehouseInventory to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteWarehouseInventoryFileAsyncWithHttpInfo (int? warehouseInventoryId, int? fileId);
        /// <summary>
        /// Delete a tag for a warehouseInventory.
        /// </summary>
        /// <remarks>
        /// Deletes an existing warehouseInventory tag using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseInventoryId">Id of the warehouseInventory to remove tag from</param>
        /// <param name="warehouseInventoryTag">The tag to delete</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteWarehouseInventoryTagAsync (int? warehouseInventoryId, string warehouseInventoryTag);

        /// <summary>
        /// Delete a tag for a warehouseInventory.
        /// </summary>
        /// <remarks>
        /// Deletes an existing warehouseInventory tag using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseInventoryId">Id of the warehouseInventory to remove tag from</param>
        /// <param name="warehouseInventoryTag">The tag to delete</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteWarehouseInventoryTagAsyncWithHttpInfo (int? warehouseInventoryId, string warehouseInventoryTag);
        /// <summary>
        /// Get a duplicated a warehouseInventory by id
        /// </summary>
        /// <remarks>
        /// Returns a duplicated warehouseInventory identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseInventoryId">Id of the warehouseInventory to be duplicated.</param>
        /// <returns>Task of WarehouseInventory</returns>
        System.Threading.Tasks.Task<WarehouseInventory> GetDuplicateWarehouseInventoryByIdAsync (int? warehouseInventoryId);

        /// <summary>
        /// Get a duplicated a warehouseInventory by id
        /// </summary>
        /// <remarks>
        /// Returns a duplicated warehouseInventory identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseInventoryId">Id of the warehouseInventory to be duplicated.</param>
        /// <returns>Task of ApiResponse (WarehouseInventory)</returns>
        System.Threading.Tasks.Task<ApiResponse<WarehouseInventory>> GetDuplicateWarehouseInventoryByIdAsyncWithHttpInfo (int? warehouseInventoryId);
        /// <summary>
        /// Search warehouseInventorys by filter
        /// </summary>
        /// <remarks>
        /// Returns the list of warehouseInventorys that match the given filter.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>Task of List&lt;WarehouseInventory&gt;</returns>
        System.Threading.Tasks.Task<List<WarehouseInventory>> GetWarehouseInventoryByFilterAsync (string filter = null, int? page = null, int? limit = null, string sort = null);

        /// <summary>
        /// Search warehouseInventorys by filter
        /// </summary>
        /// <remarks>
        /// Returns the list of warehouseInventorys that match the given filter.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;WarehouseInventory&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<WarehouseInventory>>> GetWarehouseInventoryByFilterAsyncWithHttpInfo (string filter = null, int? page = null, int? limit = null, string sort = null);
        /// <summary>
        /// Get a warehouseInventory by id
        /// </summary>
        /// <remarks>
        /// Returns the warehouseInventory identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseInventoryId">Id of the warehouseInventory to be returned.</param>
        /// <returns>Task of WarehouseInventory</returns>
        System.Threading.Tasks.Task<WarehouseInventory> GetWarehouseInventoryByIdAsync (int? warehouseInventoryId);

        /// <summary>
        /// Get a warehouseInventory by id
        /// </summary>
        /// <remarks>
        /// Returns the warehouseInventory identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseInventoryId">Id of the warehouseInventory to be returned.</param>
        /// <returns>Task of ApiResponse (WarehouseInventory)</returns>
        System.Threading.Tasks.Task<ApiResponse<WarehouseInventory>> GetWarehouseInventoryByIdAsyncWithHttpInfo (int? warehouseInventoryId);
        /// <summary>
        /// Get the files for a warehouseInventory.
        /// </summary>
        /// <remarks>
        /// Get all existing warehouseInventory files.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseInventoryId">Id of the warehouseInventory to get files for</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetWarehouseInventoryFilesAsync (int? warehouseInventoryId);

        /// <summary>
        /// Get the files for a warehouseInventory.
        /// </summary>
        /// <remarks>
        /// Get all existing warehouseInventory files.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseInventoryId">Id of the warehouseInventory to get files for</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetWarehouseInventoryFilesAsyncWithHttpInfo (int? warehouseInventoryId);
        /// <summary>
        /// Get the tags for a warehouseInventory.
        /// </summary>
        /// <remarks>
        /// Get all existing warehouseInventory tags.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseInventoryId">Id of the warehouseInventory to get tags for</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetWarehouseInventoryTagsAsync (int? warehouseInventoryId);

        /// <summary>
        /// Get the tags for a warehouseInventory.
        /// </summary>
        /// <remarks>
        /// Get all existing warehouseInventory tags.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseInventoryId">Id of the warehouseInventory to get tags for</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetWarehouseInventoryTagsAsyncWithHttpInfo (int? warehouseInventoryId);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class WarehouseInventoryApi : IWarehouseInventoryApi
    {
        private Infoplus.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="WarehouseInventoryApi"/> class.
        /// </summary>
        /// <returns></returns>
        public WarehouseInventoryApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = Infoplus.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WarehouseInventoryApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public WarehouseInventoryApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Infoplus.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Infoplus.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Add new audit for a warehouseInventory Adds an audit to an existing warehouseInventory.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseInventoryId">Id of the warehouseInventory to add an audit to</param>
        /// <param name="warehouseInventoryAudit">The audit to add</param>
        /// <returns></returns>
        public void AddWarehouseInventoryAudit (int? warehouseInventoryId, string warehouseInventoryAudit)
        {
             AddWarehouseInventoryAuditWithHttpInfo(warehouseInventoryId, warehouseInventoryAudit);
        }

        /// <summary>
        /// Add new audit for a warehouseInventory Adds an audit to an existing warehouseInventory.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseInventoryId">Id of the warehouseInventory to add an audit to</param>
        /// <param name="warehouseInventoryAudit">The audit to add</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AddWarehouseInventoryAuditWithHttpInfo (int? warehouseInventoryId, string warehouseInventoryAudit)
        {
            // verify the required parameter 'warehouseInventoryId' is set
            if (warehouseInventoryId == null)
                throw new ApiException(400, "Missing required parameter 'warehouseInventoryId' when calling WarehouseInventoryApi->AddWarehouseInventoryAudit");
            // verify the required parameter 'warehouseInventoryAudit' is set
            if (warehouseInventoryAudit == null)
                throw new ApiException(400, "Missing required parameter 'warehouseInventoryAudit' when calling WarehouseInventoryApi->AddWarehouseInventoryAudit");

            var localVarPath = "/beta/warehouseInventory/{warehouseInventoryId}/audit/{warehouseInventoryAudit}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (warehouseInventoryId != null) localVarPathParams.Add("warehouseInventoryId", Configuration.ApiClient.ParameterToString(warehouseInventoryId)); // path parameter
            if (warehouseInventoryAudit != null) localVarPathParams.Add("warehouseInventoryAudit", Configuration.ApiClient.ParameterToString(warehouseInventoryAudit)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddWarehouseInventoryAudit", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Add new audit for a warehouseInventory Adds an audit to an existing warehouseInventory.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseInventoryId">Id of the warehouseInventory to add an audit to</param>
        /// <param name="warehouseInventoryAudit">The audit to add</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddWarehouseInventoryAuditAsync (int? warehouseInventoryId, string warehouseInventoryAudit)
        {
             await AddWarehouseInventoryAuditAsyncWithHttpInfo(warehouseInventoryId, warehouseInventoryAudit);

        }

        /// <summary>
        /// Add new audit for a warehouseInventory Adds an audit to an existing warehouseInventory.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseInventoryId">Id of the warehouseInventory to add an audit to</param>
        /// <param name="warehouseInventoryAudit">The audit to add</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddWarehouseInventoryAuditAsyncWithHttpInfo (int? warehouseInventoryId, string warehouseInventoryAudit)
        {
            // verify the required parameter 'warehouseInventoryId' is set
            if (warehouseInventoryId == null)
                throw new ApiException(400, "Missing required parameter 'warehouseInventoryId' when calling WarehouseInventoryApi->AddWarehouseInventoryAudit");
            // verify the required parameter 'warehouseInventoryAudit' is set
            if (warehouseInventoryAudit == null)
                throw new ApiException(400, "Missing required parameter 'warehouseInventoryAudit' when calling WarehouseInventoryApi->AddWarehouseInventoryAudit");

            var localVarPath = "/beta/warehouseInventory/{warehouseInventoryId}/audit/{warehouseInventoryAudit}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (warehouseInventoryId != null) localVarPathParams.Add("warehouseInventoryId", Configuration.ApiClient.ParameterToString(warehouseInventoryId)); // path parameter
            if (warehouseInventoryAudit != null) localVarPathParams.Add("warehouseInventoryAudit", Configuration.ApiClient.ParameterToString(warehouseInventoryAudit)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddWarehouseInventoryAudit", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Attach a file to a warehouseInventory Adds a file to an existing warehouseInventory.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseInventoryId">Id of the warehouseInventory to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns></returns>
        public void AddWarehouseInventoryFile (int? warehouseInventoryId, string fileName)
        {
             AddWarehouseInventoryFileWithHttpInfo(warehouseInventoryId, fileName);
        }

        /// <summary>
        /// Attach a file to a warehouseInventory Adds a file to an existing warehouseInventory.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseInventoryId">Id of the warehouseInventory to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AddWarehouseInventoryFileWithHttpInfo (int? warehouseInventoryId, string fileName)
        {
            // verify the required parameter 'warehouseInventoryId' is set
            if (warehouseInventoryId == null)
                throw new ApiException(400, "Missing required parameter 'warehouseInventoryId' when calling WarehouseInventoryApi->AddWarehouseInventoryFile");
            // verify the required parameter 'fileName' is set
            if (fileName == null)
                throw new ApiException(400, "Missing required parameter 'fileName' when calling WarehouseInventoryApi->AddWarehouseInventoryFile");

            var localVarPath = "/beta/warehouseInventory/{warehouseInventoryId}/file/{fileName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (warehouseInventoryId != null) localVarPathParams.Add("warehouseInventoryId", Configuration.ApiClient.ParameterToString(warehouseInventoryId)); // path parameter
            if (fileName != null) localVarPathParams.Add("fileName", Configuration.ApiClient.ParameterToString(fileName)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddWarehouseInventoryFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Attach a file to a warehouseInventory Adds a file to an existing warehouseInventory.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseInventoryId">Id of the warehouseInventory to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddWarehouseInventoryFileAsync (int? warehouseInventoryId, string fileName)
        {
             await AddWarehouseInventoryFileAsyncWithHttpInfo(warehouseInventoryId, fileName);

        }

        /// <summary>
        /// Attach a file to a warehouseInventory Adds a file to an existing warehouseInventory.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseInventoryId">Id of the warehouseInventory to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddWarehouseInventoryFileAsyncWithHttpInfo (int? warehouseInventoryId, string fileName)
        {
            // verify the required parameter 'warehouseInventoryId' is set
            if (warehouseInventoryId == null)
                throw new ApiException(400, "Missing required parameter 'warehouseInventoryId' when calling WarehouseInventoryApi->AddWarehouseInventoryFile");
            // verify the required parameter 'fileName' is set
            if (fileName == null)
                throw new ApiException(400, "Missing required parameter 'fileName' when calling WarehouseInventoryApi->AddWarehouseInventoryFile");

            var localVarPath = "/beta/warehouseInventory/{warehouseInventoryId}/file/{fileName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (warehouseInventoryId != null) localVarPathParams.Add("warehouseInventoryId", Configuration.ApiClient.ParameterToString(warehouseInventoryId)); // path parameter
            if (fileName != null) localVarPathParams.Add("fileName", Configuration.ApiClient.ParameterToString(fileName)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddWarehouseInventoryFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Attach a file to a warehouseInventory by URL. Adds a file to an existing warehouseInventory by URL.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="warehouseInventoryId">Id of the warehouseInventory to add an file to</param>
        /// <returns></returns>
        public void AddWarehouseInventoryFileByURL (RecordFile body, int? warehouseInventoryId)
        {
             AddWarehouseInventoryFileByURLWithHttpInfo(body, warehouseInventoryId);
        }

        /// <summary>
        /// Attach a file to a warehouseInventory by URL. Adds a file to an existing warehouseInventory by URL.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="warehouseInventoryId">Id of the warehouseInventory to add an file to</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AddWarehouseInventoryFileByURLWithHttpInfo (RecordFile body, int? warehouseInventoryId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling WarehouseInventoryApi->AddWarehouseInventoryFileByURL");
            // verify the required parameter 'warehouseInventoryId' is set
            if (warehouseInventoryId == null)
                throw new ApiException(400, "Missing required parameter 'warehouseInventoryId' when calling WarehouseInventoryApi->AddWarehouseInventoryFileByURL");

            var localVarPath = "/beta/warehouseInventory/{warehouseInventoryId}/file";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (warehouseInventoryId != null) localVarPathParams.Add("warehouseInventoryId", Configuration.ApiClient.ParameterToString(warehouseInventoryId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddWarehouseInventoryFileByURL", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Attach a file to a warehouseInventory by URL. Adds a file to an existing warehouseInventory by URL.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="warehouseInventoryId">Id of the warehouseInventory to add an file to</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddWarehouseInventoryFileByURLAsync (RecordFile body, int? warehouseInventoryId)
        {
             await AddWarehouseInventoryFileByURLAsyncWithHttpInfo(body, warehouseInventoryId);

        }

        /// <summary>
        /// Attach a file to a warehouseInventory by URL. Adds a file to an existing warehouseInventory by URL.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="warehouseInventoryId">Id of the warehouseInventory to add an file to</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddWarehouseInventoryFileByURLAsyncWithHttpInfo (RecordFile body, int? warehouseInventoryId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling WarehouseInventoryApi->AddWarehouseInventoryFileByURL");
            // verify the required parameter 'warehouseInventoryId' is set
            if (warehouseInventoryId == null)
                throw new ApiException(400, "Missing required parameter 'warehouseInventoryId' when calling WarehouseInventoryApi->AddWarehouseInventoryFileByURL");

            var localVarPath = "/beta/warehouseInventory/{warehouseInventoryId}/file";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (warehouseInventoryId != null) localVarPathParams.Add("warehouseInventoryId", Configuration.ApiClient.ParameterToString(warehouseInventoryId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddWarehouseInventoryFileByURL", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Add new tags for a warehouseInventory. Adds a tag to an existing warehouseInventory.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseInventoryId">Id of the warehouseInventory to add a tag to</param>
        /// <param name="warehouseInventoryTag">The tag to add</param>
        /// <returns></returns>
        public void AddWarehouseInventoryTag (int? warehouseInventoryId, string warehouseInventoryTag)
        {
             AddWarehouseInventoryTagWithHttpInfo(warehouseInventoryId, warehouseInventoryTag);
        }

        /// <summary>
        /// Add new tags for a warehouseInventory. Adds a tag to an existing warehouseInventory.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseInventoryId">Id of the warehouseInventory to add a tag to</param>
        /// <param name="warehouseInventoryTag">The tag to add</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AddWarehouseInventoryTagWithHttpInfo (int? warehouseInventoryId, string warehouseInventoryTag)
        {
            // verify the required parameter 'warehouseInventoryId' is set
            if (warehouseInventoryId == null)
                throw new ApiException(400, "Missing required parameter 'warehouseInventoryId' when calling WarehouseInventoryApi->AddWarehouseInventoryTag");
            // verify the required parameter 'warehouseInventoryTag' is set
            if (warehouseInventoryTag == null)
                throw new ApiException(400, "Missing required parameter 'warehouseInventoryTag' when calling WarehouseInventoryApi->AddWarehouseInventoryTag");

            var localVarPath = "/beta/warehouseInventory/{warehouseInventoryId}/tag/{warehouseInventoryTag}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (warehouseInventoryId != null) localVarPathParams.Add("warehouseInventoryId", Configuration.ApiClient.ParameterToString(warehouseInventoryId)); // path parameter
            if (warehouseInventoryTag != null) localVarPathParams.Add("warehouseInventoryTag", Configuration.ApiClient.ParameterToString(warehouseInventoryTag)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddWarehouseInventoryTag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Add new tags for a warehouseInventory. Adds a tag to an existing warehouseInventory.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseInventoryId">Id of the warehouseInventory to add a tag to</param>
        /// <param name="warehouseInventoryTag">The tag to add</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddWarehouseInventoryTagAsync (int? warehouseInventoryId, string warehouseInventoryTag)
        {
             await AddWarehouseInventoryTagAsyncWithHttpInfo(warehouseInventoryId, warehouseInventoryTag);

        }

        /// <summary>
        /// Add new tags for a warehouseInventory. Adds a tag to an existing warehouseInventory.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseInventoryId">Id of the warehouseInventory to add a tag to</param>
        /// <param name="warehouseInventoryTag">The tag to add</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddWarehouseInventoryTagAsyncWithHttpInfo (int? warehouseInventoryId, string warehouseInventoryTag)
        {
            // verify the required parameter 'warehouseInventoryId' is set
            if (warehouseInventoryId == null)
                throw new ApiException(400, "Missing required parameter 'warehouseInventoryId' when calling WarehouseInventoryApi->AddWarehouseInventoryTag");
            // verify the required parameter 'warehouseInventoryTag' is set
            if (warehouseInventoryTag == null)
                throw new ApiException(400, "Missing required parameter 'warehouseInventoryTag' when calling WarehouseInventoryApi->AddWarehouseInventoryTag");

            var localVarPath = "/beta/warehouseInventory/{warehouseInventoryId}/tag/{warehouseInventoryTag}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (warehouseInventoryId != null) localVarPathParams.Add("warehouseInventoryId", Configuration.ApiClient.ParameterToString(warehouseInventoryId)); // path parameter
            if (warehouseInventoryTag != null) localVarPathParams.Add("warehouseInventoryTag", Configuration.ApiClient.ParameterToString(warehouseInventoryTag)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddWarehouseInventoryTag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a file for a warehouseInventory. Deletes an existing warehouseInventory file using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseInventoryId">Id of the warehouseInventory to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns></returns>
        public void DeleteWarehouseInventoryFile (int? warehouseInventoryId, int? fileId)
        {
             DeleteWarehouseInventoryFileWithHttpInfo(warehouseInventoryId, fileId);
        }

        /// <summary>
        /// Delete a file for a warehouseInventory. Deletes an existing warehouseInventory file using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseInventoryId">Id of the warehouseInventory to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteWarehouseInventoryFileWithHttpInfo (int? warehouseInventoryId, int? fileId)
        {
            // verify the required parameter 'warehouseInventoryId' is set
            if (warehouseInventoryId == null)
                throw new ApiException(400, "Missing required parameter 'warehouseInventoryId' when calling WarehouseInventoryApi->DeleteWarehouseInventoryFile");
            // verify the required parameter 'fileId' is set
            if (fileId == null)
                throw new ApiException(400, "Missing required parameter 'fileId' when calling WarehouseInventoryApi->DeleteWarehouseInventoryFile");

            var localVarPath = "/beta/warehouseInventory/{warehouseInventoryId}/file/{fileId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (warehouseInventoryId != null) localVarPathParams.Add("warehouseInventoryId", Configuration.ApiClient.ParameterToString(warehouseInventoryId)); // path parameter
            if (fileId != null) localVarPathParams.Add("fileId", Configuration.ApiClient.ParameterToString(fileId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteWarehouseInventoryFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a file for a warehouseInventory. Deletes an existing warehouseInventory file using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseInventoryId">Id of the warehouseInventory to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteWarehouseInventoryFileAsync (int? warehouseInventoryId, int? fileId)
        {
             await DeleteWarehouseInventoryFileAsyncWithHttpInfo(warehouseInventoryId, fileId);

        }

        /// <summary>
        /// Delete a file for a warehouseInventory. Deletes an existing warehouseInventory file using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseInventoryId">Id of the warehouseInventory to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteWarehouseInventoryFileAsyncWithHttpInfo (int? warehouseInventoryId, int? fileId)
        {
            // verify the required parameter 'warehouseInventoryId' is set
            if (warehouseInventoryId == null)
                throw new ApiException(400, "Missing required parameter 'warehouseInventoryId' when calling WarehouseInventoryApi->DeleteWarehouseInventoryFile");
            // verify the required parameter 'fileId' is set
            if (fileId == null)
                throw new ApiException(400, "Missing required parameter 'fileId' when calling WarehouseInventoryApi->DeleteWarehouseInventoryFile");

            var localVarPath = "/beta/warehouseInventory/{warehouseInventoryId}/file/{fileId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (warehouseInventoryId != null) localVarPathParams.Add("warehouseInventoryId", Configuration.ApiClient.ParameterToString(warehouseInventoryId)); // path parameter
            if (fileId != null) localVarPathParams.Add("fileId", Configuration.ApiClient.ParameterToString(fileId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteWarehouseInventoryFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a tag for a warehouseInventory. Deletes an existing warehouseInventory tag using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseInventoryId">Id of the warehouseInventory to remove tag from</param>
        /// <param name="warehouseInventoryTag">The tag to delete</param>
        /// <returns></returns>
        public void DeleteWarehouseInventoryTag (int? warehouseInventoryId, string warehouseInventoryTag)
        {
             DeleteWarehouseInventoryTagWithHttpInfo(warehouseInventoryId, warehouseInventoryTag);
        }

        /// <summary>
        /// Delete a tag for a warehouseInventory. Deletes an existing warehouseInventory tag using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseInventoryId">Id of the warehouseInventory to remove tag from</param>
        /// <param name="warehouseInventoryTag">The tag to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteWarehouseInventoryTagWithHttpInfo (int? warehouseInventoryId, string warehouseInventoryTag)
        {
            // verify the required parameter 'warehouseInventoryId' is set
            if (warehouseInventoryId == null)
                throw new ApiException(400, "Missing required parameter 'warehouseInventoryId' when calling WarehouseInventoryApi->DeleteWarehouseInventoryTag");
            // verify the required parameter 'warehouseInventoryTag' is set
            if (warehouseInventoryTag == null)
                throw new ApiException(400, "Missing required parameter 'warehouseInventoryTag' when calling WarehouseInventoryApi->DeleteWarehouseInventoryTag");

            var localVarPath = "/beta/warehouseInventory/{warehouseInventoryId}/tag/{warehouseInventoryTag}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (warehouseInventoryId != null) localVarPathParams.Add("warehouseInventoryId", Configuration.ApiClient.ParameterToString(warehouseInventoryId)); // path parameter
            if (warehouseInventoryTag != null) localVarPathParams.Add("warehouseInventoryTag", Configuration.ApiClient.ParameterToString(warehouseInventoryTag)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteWarehouseInventoryTag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a tag for a warehouseInventory. Deletes an existing warehouseInventory tag using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseInventoryId">Id of the warehouseInventory to remove tag from</param>
        /// <param name="warehouseInventoryTag">The tag to delete</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteWarehouseInventoryTagAsync (int? warehouseInventoryId, string warehouseInventoryTag)
        {
             await DeleteWarehouseInventoryTagAsyncWithHttpInfo(warehouseInventoryId, warehouseInventoryTag);

        }

        /// <summary>
        /// Delete a tag for a warehouseInventory. Deletes an existing warehouseInventory tag using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseInventoryId">Id of the warehouseInventory to remove tag from</param>
        /// <param name="warehouseInventoryTag">The tag to delete</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteWarehouseInventoryTagAsyncWithHttpInfo (int? warehouseInventoryId, string warehouseInventoryTag)
        {
            // verify the required parameter 'warehouseInventoryId' is set
            if (warehouseInventoryId == null)
                throw new ApiException(400, "Missing required parameter 'warehouseInventoryId' when calling WarehouseInventoryApi->DeleteWarehouseInventoryTag");
            // verify the required parameter 'warehouseInventoryTag' is set
            if (warehouseInventoryTag == null)
                throw new ApiException(400, "Missing required parameter 'warehouseInventoryTag' when calling WarehouseInventoryApi->DeleteWarehouseInventoryTag");

            var localVarPath = "/beta/warehouseInventory/{warehouseInventoryId}/tag/{warehouseInventoryTag}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (warehouseInventoryId != null) localVarPathParams.Add("warehouseInventoryId", Configuration.ApiClient.ParameterToString(warehouseInventoryId)); // path parameter
            if (warehouseInventoryTag != null) localVarPathParams.Add("warehouseInventoryTag", Configuration.ApiClient.ParameterToString(warehouseInventoryTag)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteWarehouseInventoryTag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get a duplicated a warehouseInventory by id Returns a duplicated warehouseInventory identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseInventoryId">Id of the warehouseInventory to be duplicated.</param>
        /// <returns>WarehouseInventory</returns>
        public WarehouseInventory GetDuplicateWarehouseInventoryById (int? warehouseInventoryId)
        {
             ApiResponse<WarehouseInventory> localVarResponse = GetDuplicateWarehouseInventoryByIdWithHttpInfo(warehouseInventoryId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a duplicated a warehouseInventory by id Returns a duplicated warehouseInventory identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseInventoryId">Id of the warehouseInventory to be duplicated.</param>
        /// <returns>ApiResponse of WarehouseInventory</returns>
        public ApiResponse< WarehouseInventory > GetDuplicateWarehouseInventoryByIdWithHttpInfo (int? warehouseInventoryId)
        {
            // verify the required parameter 'warehouseInventoryId' is set
            if (warehouseInventoryId == null)
                throw new ApiException(400, "Missing required parameter 'warehouseInventoryId' when calling WarehouseInventoryApi->GetDuplicateWarehouseInventoryById");

            var localVarPath = "/beta/warehouseInventory/duplicate/{warehouseInventoryId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (warehouseInventoryId != null) localVarPathParams.Add("warehouseInventoryId", Configuration.ApiClient.ParameterToString(warehouseInventoryId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDuplicateWarehouseInventoryById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WarehouseInventory>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WarehouseInventory) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WarehouseInventory)));
        }

        /// <summary>
        /// Get a duplicated a warehouseInventory by id Returns a duplicated warehouseInventory identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseInventoryId">Id of the warehouseInventory to be duplicated.</param>
        /// <returns>Task of WarehouseInventory</returns>
        public async System.Threading.Tasks.Task<WarehouseInventory> GetDuplicateWarehouseInventoryByIdAsync (int? warehouseInventoryId)
        {
             ApiResponse<WarehouseInventory> localVarResponse = await GetDuplicateWarehouseInventoryByIdAsyncWithHttpInfo(warehouseInventoryId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a duplicated a warehouseInventory by id Returns a duplicated warehouseInventory identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseInventoryId">Id of the warehouseInventory to be duplicated.</param>
        /// <returns>Task of ApiResponse (WarehouseInventory)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WarehouseInventory>> GetDuplicateWarehouseInventoryByIdAsyncWithHttpInfo (int? warehouseInventoryId)
        {
            // verify the required parameter 'warehouseInventoryId' is set
            if (warehouseInventoryId == null)
                throw new ApiException(400, "Missing required parameter 'warehouseInventoryId' when calling WarehouseInventoryApi->GetDuplicateWarehouseInventoryById");

            var localVarPath = "/beta/warehouseInventory/duplicate/{warehouseInventoryId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (warehouseInventoryId != null) localVarPathParams.Add("warehouseInventoryId", Configuration.ApiClient.ParameterToString(warehouseInventoryId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDuplicateWarehouseInventoryById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WarehouseInventory>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WarehouseInventory) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WarehouseInventory)));
        }

        /// <summary>
        /// Search warehouseInventorys by filter Returns the list of warehouseInventorys that match the given filter.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>List&lt;WarehouseInventory&gt;</returns>
        public List<WarehouseInventory> GetWarehouseInventoryByFilter (string filter = null, int? page = null, int? limit = null, string sort = null)
        {
             ApiResponse<List<WarehouseInventory>> localVarResponse = GetWarehouseInventoryByFilterWithHttpInfo(filter, page, limit, sort);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Search warehouseInventorys by filter Returns the list of warehouseInventorys that match the given filter.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>ApiResponse of List&lt;WarehouseInventory&gt;</returns>
        public ApiResponse< List<WarehouseInventory> > GetWarehouseInventoryByFilterWithHttpInfo (string filter = null, int? page = null, int? limit = null, string sort = null)
        {

            var localVarPath = "/beta/warehouseInventory/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (filter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (page != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWarehouseInventoryByFilter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<WarehouseInventory>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<WarehouseInventory>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<WarehouseInventory>)));
        }

        /// <summary>
        /// Search warehouseInventorys by filter Returns the list of warehouseInventorys that match the given filter.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>Task of List&lt;WarehouseInventory&gt;</returns>
        public async System.Threading.Tasks.Task<List<WarehouseInventory>> GetWarehouseInventoryByFilterAsync (string filter = null, int? page = null, int? limit = null, string sort = null)
        {
             ApiResponse<List<WarehouseInventory>> localVarResponse = await GetWarehouseInventoryByFilterAsyncWithHttpInfo(filter, page, limit, sort);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Search warehouseInventorys by filter Returns the list of warehouseInventorys that match the given filter.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;WarehouseInventory&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<WarehouseInventory>>> GetWarehouseInventoryByFilterAsyncWithHttpInfo (string filter = null, int? page = null, int? limit = null, string sort = null)
        {

            var localVarPath = "/beta/warehouseInventory/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (filter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (page != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWarehouseInventoryByFilter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<WarehouseInventory>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<WarehouseInventory>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<WarehouseInventory>)));
        }

        /// <summary>
        /// Get a warehouseInventory by id Returns the warehouseInventory identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseInventoryId">Id of the warehouseInventory to be returned.</param>
        /// <returns>WarehouseInventory</returns>
        public WarehouseInventory GetWarehouseInventoryById (int? warehouseInventoryId)
        {
             ApiResponse<WarehouseInventory> localVarResponse = GetWarehouseInventoryByIdWithHttpInfo(warehouseInventoryId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a warehouseInventory by id Returns the warehouseInventory identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseInventoryId">Id of the warehouseInventory to be returned.</param>
        /// <returns>ApiResponse of WarehouseInventory</returns>
        public ApiResponse< WarehouseInventory > GetWarehouseInventoryByIdWithHttpInfo (int? warehouseInventoryId)
        {
            // verify the required parameter 'warehouseInventoryId' is set
            if (warehouseInventoryId == null)
                throw new ApiException(400, "Missing required parameter 'warehouseInventoryId' when calling WarehouseInventoryApi->GetWarehouseInventoryById");

            var localVarPath = "/beta/warehouseInventory/{warehouseInventoryId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (warehouseInventoryId != null) localVarPathParams.Add("warehouseInventoryId", Configuration.ApiClient.ParameterToString(warehouseInventoryId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWarehouseInventoryById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WarehouseInventory>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WarehouseInventory) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WarehouseInventory)));
        }

        /// <summary>
        /// Get a warehouseInventory by id Returns the warehouseInventory identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseInventoryId">Id of the warehouseInventory to be returned.</param>
        /// <returns>Task of WarehouseInventory</returns>
        public async System.Threading.Tasks.Task<WarehouseInventory> GetWarehouseInventoryByIdAsync (int? warehouseInventoryId)
        {
             ApiResponse<WarehouseInventory> localVarResponse = await GetWarehouseInventoryByIdAsyncWithHttpInfo(warehouseInventoryId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a warehouseInventory by id Returns the warehouseInventory identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseInventoryId">Id of the warehouseInventory to be returned.</param>
        /// <returns>Task of ApiResponse (WarehouseInventory)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WarehouseInventory>> GetWarehouseInventoryByIdAsyncWithHttpInfo (int? warehouseInventoryId)
        {
            // verify the required parameter 'warehouseInventoryId' is set
            if (warehouseInventoryId == null)
                throw new ApiException(400, "Missing required parameter 'warehouseInventoryId' when calling WarehouseInventoryApi->GetWarehouseInventoryById");

            var localVarPath = "/beta/warehouseInventory/{warehouseInventoryId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (warehouseInventoryId != null) localVarPathParams.Add("warehouseInventoryId", Configuration.ApiClient.ParameterToString(warehouseInventoryId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWarehouseInventoryById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WarehouseInventory>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WarehouseInventory) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WarehouseInventory)));
        }

        /// <summary>
        /// Get the files for a warehouseInventory. Get all existing warehouseInventory files.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseInventoryId">Id of the warehouseInventory to get files for</param>
        /// <returns></returns>
        public void GetWarehouseInventoryFiles (int? warehouseInventoryId)
        {
             GetWarehouseInventoryFilesWithHttpInfo(warehouseInventoryId);
        }

        /// <summary>
        /// Get the files for a warehouseInventory. Get all existing warehouseInventory files.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseInventoryId">Id of the warehouseInventory to get files for</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GetWarehouseInventoryFilesWithHttpInfo (int? warehouseInventoryId)
        {
            // verify the required parameter 'warehouseInventoryId' is set
            if (warehouseInventoryId == null)
                throw new ApiException(400, "Missing required parameter 'warehouseInventoryId' when calling WarehouseInventoryApi->GetWarehouseInventoryFiles");

            var localVarPath = "/beta/warehouseInventory/{warehouseInventoryId}/file";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (warehouseInventoryId != null) localVarPathParams.Add("warehouseInventoryId", Configuration.ApiClient.ParameterToString(warehouseInventoryId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWarehouseInventoryFiles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get the files for a warehouseInventory. Get all existing warehouseInventory files.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseInventoryId">Id of the warehouseInventory to get files for</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetWarehouseInventoryFilesAsync (int? warehouseInventoryId)
        {
             await GetWarehouseInventoryFilesAsyncWithHttpInfo(warehouseInventoryId);

        }

        /// <summary>
        /// Get the files for a warehouseInventory. Get all existing warehouseInventory files.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseInventoryId">Id of the warehouseInventory to get files for</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetWarehouseInventoryFilesAsyncWithHttpInfo (int? warehouseInventoryId)
        {
            // verify the required parameter 'warehouseInventoryId' is set
            if (warehouseInventoryId == null)
                throw new ApiException(400, "Missing required parameter 'warehouseInventoryId' when calling WarehouseInventoryApi->GetWarehouseInventoryFiles");

            var localVarPath = "/beta/warehouseInventory/{warehouseInventoryId}/file";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (warehouseInventoryId != null) localVarPathParams.Add("warehouseInventoryId", Configuration.ApiClient.ParameterToString(warehouseInventoryId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWarehouseInventoryFiles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get the tags for a warehouseInventory. Get all existing warehouseInventory tags.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseInventoryId">Id of the warehouseInventory to get tags for</param>
        /// <returns></returns>
        public void GetWarehouseInventoryTags (int? warehouseInventoryId)
        {
             GetWarehouseInventoryTagsWithHttpInfo(warehouseInventoryId);
        }

        /// <summary>
        /// Get the tags for a warehouseInventory. Get all existing warehouseInventory tags.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseInventoryId">Id of the warehouseInventory to get tags for</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GetWarehouseInventoryTagsWithHttpInfo (int? warehouseInventoryId)
        {
            // verify the required parameter 'warehouseInventoryId' is set
            if (warehouseInventoryId == null)
                throw new ApiException(400, "Missing required parameter 'warehouseInventoryId' when calling WarehouseInventoryApi->GetWarehouseInventoryTags");

            var localVarPath = "/beta/warehouseInventory/{warehouseInventoryId}/tag";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (warehouseInventoryId != null) localVarPathParams.Add("warehouseInventoryId", Configuration.ApiClient.ParameterToString(warehouseInventoryId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWarehouseInventoryTags", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get the tags for a warehouseInventory. Get all existing warehouseInventory tags.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseInventoryId">Id of the warehouseInventory to get tags for</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetWarehouseInventoryTagsAsync (int? warehouseInventoryId)
        {
             await GetWarehouseInventoryTagsAsyncWithHttpInfo(warehouseInventoryId);

        }

        /// <summary>
        /// Get the tags for a warehouseInventory. Get all existing warehouseInventory tags.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseInventoryId">Id of the warehouseInventory to get tags for</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetWarehouseInventoryTagsAsyncWithHttpInfo (int? warehouseInventoryId)
        {
            // verify the required parameter 'warehouseInventoryId' is set
            if (warehouseInventoryId == null)
                throw new ApiException(400, "Missing required parameter 'warehouseInventoryId' when calling WarehouseInventoryApi->GetWarehouseInventoryTags");

            var localVarPath = "/beta/warehouseInventory/{warehouseInventoryId}/tag";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (warehouseInventoryId != null) localVarPathParams.Add("warehouseInventoryId", Configuration.ApiClient.ParameterToString(warehouseInventoryId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWarehouseInventoryTags", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

    }
}
