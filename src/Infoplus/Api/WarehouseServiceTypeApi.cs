/* 
 * Infoplus API
 *
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Infoplus.Client;
using Infoplus.Model;

namespace Infoplus.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IWarehouseServiceTypeApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create a warehouseServiceType
        /// </summary>
        /// <remarks>
        /// Inserts a new warehouseServiceType using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">WarehouseServiceType to be inserted.</param>
        /// <returns>WarehouseServiceType</returns>
        WarehouseServiceType AddWarehouseServiceType (WarehouseServiceType body);

        /// <summary>
        /// Create a warehouseServiceType
        /// </summary>
        /// <remarks>
        /// Inserts a new warehouseServiceType using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">WarehouseServiceType to be inserted.</param>
        /// <returns>ApiResponse of WarehouseServiceType</returns>
        ApiResponse<WarehouseServiceType> AddWarehouseServiceTypeWithHttpInfo (WarehouseServiceType body);
        /// <summary>
        /// Add new audit for a warehouseServiceType
        /// </summary>
        /// <remarks>
        /// Adds an audit to an existing warehouseServiceType.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseServiceTypeId">Id of the warehouseServiceType to add an audit to</param>
        /// <param name="warehouseServiceTypeAudit">The audit to add</param>
        /// <returns></returns>
        void AddWarehouseServiceTypeAudit (int? warehouseServiceTypeId, string warehouseServiceTypeAudit);

        /// <summary>
        /// Add new audit for a warehouseServiceType
        /// </summary>
        /// <remarks>
        /// Adds an audit to an existing warehouseServiceType.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseServiceTypeId">Id of the warehouseServiceType to add an audit to</param>
        /// <param name="warehouseServiceTypeAudit">The audit to add</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddWarehouseServiceTypeAuditWithHttpInfo (int? warehouseServiceTypeId, string warehouseServiceTypeAudit);
        /// <summary>
        /// Attach a file to a warehouseServiceType
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing warehouseServiceType.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseServiceTypeId">Id of the warehouseServiceType to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns></returns>
        void AddWarehouseServiceTypeFile (int? warehouseServiceTypeId, string fileName);

        /// <summary>
        /// Attach a file to a warehouseServiceType
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing warehouseServiceType.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseServiceTypeId">Id of the warehouseServiceType to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddWarehouseServiceTypeFileWithHttpInfo (int? warehouseServiceTypeId, string fileName);
        /// <summary>
        /// Attach a file to a warehouseServiceType by URL.
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing warehouseServiceType by URL.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="warehouseServiceTypeId">Id of the warehouseServiceType to add an file to</param>
        /// <returns></returns>
        void AddWarehouseServiceTypeFileByURL (RecordFile body, int? warehouseServiceTypeId);

        /// <summary>
        /// Attach a file to a warehouseServiceType by URL.
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing warehouseServiceType by URL.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="warehouseServiceTypeId">Id of the warehouseServiceType to add an file to</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddWarehouseServiceTypeFileByURLWithHttpInfo (RecordFile body, int? warehouseServiceTypeId);
        /// <summary>
        /// Add new tags for a warehouseServiceType.
        /// </summary>
        /// <remarks>
        /// Adds a tag to an existing warehouseServiceType.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseServiceTypeId">Id of the warehouseServiceType to add a tag to</param>
        /// <param name="warehouseServiceTypeTag">The tag to add</param>
        /// <returns></returns>
        void AddWarehouseServiceTypeTag (int? warehouseServiceTypeId, string warehouseServiceTypeTag);

        /// <summary>
        /// Add new tags for a warehouseServiceType.
        /// </summary>
        /// <remarks>
        /// Adds a tag to an existing warehouseServiceType.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseServiceTypeId">Id of the warehouseServiceType to add a tag to</param>
        /// <param name="warehouseServiceTypeTag">The tag to add</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddWarehouseServiceTypeTagWithHttpInfo (int? warehouseServiceTypeId, string warehouseServiceTypeTag);
        /// <summary>
        /// Delete a warehouseServiceType
        /// </summary>
        /// <remarks>
        /// Deletes the warehouseServiceType identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseServiceTypeId">Id of the warehouseServiceType to be deleted.</param>
        /// <returns></returns>
        void DeleteWarehouseServiceType (int? warehouseServiceTypeId);

        /// <summary>
        /// Delete a warehouseServiceType
        /// </summary>
        /// <remarks>
        /// Deletes the warehouseServiceType identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseServiceTypeId">Id of the warehouseServiceType to be deleted.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteWarehouseServiceTypeWithHttpInfo (int? warehouseServiceTypeId);
        /// <summary>
        /// Delete a file for a warehouseServiceType.
        /// </summary>
        /// <remarks>
        /// Deletes an existing warehouseServiceType file using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseServiceTypeId">Id of the warehouseServiceType to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns></returns>
        void DeleteWarehouseServiceTypeFile (int? warehouseServiceTypeId, int? fileId);

        /// <summary>
        /// Delete a file for a warehouseServiceType.
        /// </summary>
        /// <remarks>
        /// Deletes an existing warehouseServiceType file using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseServiceTypeId">Id of the warehouseServiceType to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteWarehouseServiceTypeFileWithHttpInfo (int? warehouseServiceTypeId, int? fileId);
        /// <summary>
        /// Delete a tag for a warehouseServiceType.
        /// </summary>
        /// <remarks>
        /// Deletes an existing warehouseServiceType tag using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseServiceTypeId">Id of the warehouseServiceType to remove tag from</param>
        /// <param name="warehouseServiceTypeTag">The tag to delete</param>
        /// <returns></returns>
        void DeleteWarehouseServiceTypeTag (int? warehouseServiceTypeId, string warehouseServiceTypeTag);

        /// <summary>
        /// Delete a tag for a warehouseServiceType.
        /// </summary>
        /// <remarks>
        /// Deletes an existing warehouseServiceType tag using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseServiceTypeId">Id of the warehouseServiceType to remove tag from</param>
        /// <param name="warehouseServiceTypeTag">The tag to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteWarehouseServiceTypeTagWithHttpInfo (int? warehouseServiceTypeId, string warehouseServiceTypeTag);
        /// <summary>
        /// Get a duplicated a warehouseServiceType by id
        /// </summary>
        /// <remarks>
        /// Returns a duplicated warehouseServiceType identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseServiceTypeId">Id of the warehouseServiceType to be duplicated.</param>
        /// <returns>WarehouseServiceType</returns>
        WarehouseServiceType GetDuplicateWarehouseServiceTypeById (int? warehouseServiceTypeId);

        /// <summary>
        /// Get a duplicated a warehouseServiceType by id
        /// </summary>
        /// <remarks>
        /// Returns a duplicated warehouseServiceType identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseServiceTypeId">Id of the warehouseServiceType to be duplicated.</param>
        /// <returns>ApiResponse of WarehouseServiceType</returns>
        ApiResponse<WarehouseServiceType> GetDuplicateWarehouseServiceTypeByIdWithHttpInfo (int? warehouseServiceTypeId);
        /// <summary>
        /// Search warehouseServiceTypes by filter
        /// </summary>
        /// <remarks>
        /// Returns the list of warehouseServiceTypes that match the given filter.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>List&lt;WarehouseServiceType&gt;</returns>
        List<WarehouseServiceType> GetWarehouseServiceTypeByFilter (string filter = null, int? page = null, int? limit = null, string sort = null);

        /// <summary>
        /// Search warehouseServiceTypes by filter
        /// </summary>
        /// <remarks>
        /// Returns the list of warehouseServiceTypes that match the given filter.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>ApiResponse of List&lt;WarehouseServiceType&gt;</returns>
        ApiResponse<List<WarehouseServiceType>> GetWarehouseServiceTypeByFilterWithHttpInfo (string filter = null, int? page = null, int? limit = null, string sort = null);
        /// <summary>
        /// Get a warehouseServiceType by id
        /// </summary>
        /// <remarks>
        /// Returns the warehouseServiceType identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseServiceTypeId">Id of the warehouseServiceType to be returned.</param>
        /// <returns>WarehouseServiceType</returns>
        WarehouseServiceType GetWarehouseServiceTypeById (int? warehouseServiceTypeId);

        /// <summary>
        /// Get a warehouseServiceType by id
        /// </summary>
        /// <remarks>
        /// Returns the warehouseServiceType identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseServiceTypeId">Id of the warehouseServiceType to be returned.</param>
        /// <returns>ApiResponse of WarehouseServiceType</returns>
        ApiResponse<WarehouseServiceType> GetWarehouseServiceTypeByIdWithHttpInfo (int? warehouseServiceTypeId);
        /// <summary>
        /// Get the files for a warehouseServiceType.
        /// </summary>
        /// <remarks>
        /// Get all existing warehouseServiceType files.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseServiceTypeId">Id of the warehouseServiceType to get files for</param>
        /// <returns></returns>
        void GetWarehouseServiceTypeFiles (int? warehouseServiceTypeId);

        /// <summary>
        /// Get the files for a warehouseServiceType.
        /// </summary>
        /// <remarks>
        /// Get all existing warehouseServiceType files.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseServiceTypeId">Id of the warehouseServiceType to get files for</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetWarehouseServiceTypeFilesWithHttpInfo (int? warehouseServiceTypeId);
        /// <summary>
        /// Get the tags for a warehouseServiceType.
        /// </summary>
        /// <remarks>
        /// Get all existing warehouseServiceType tags.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseServiceTypeId">Id of the warehouseServiceType to get tags for</param>
        /// <returns></returns>
        void GetWarehouseServiceTypeTags (int? warehouseServiceTypeId);

        /// <summary>
        /// Get the tags for a warehouseServiceType.
        /// </summary>
        /// <remarks>
        /// Get all existing warehouseServiceType tags.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseServiceTypeId">Id of the warehouseServiceType to get tags for</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetWarehouseServiceTypeTagsWithHttpInfo (int? warehouseServiceTypeId);
        /// <summary>
        /// Update a warehouseServiceType
        /// </summary>
        /// <remarks>
        /// Updates an existing warehouseServiceType using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">WarehouseServiceType to be updated.</param>
        /// <returns></returns>
        void UpdateWarehouseServiceType (WarehouseServiceType body);

        /// <summary>
        /// Update a warehouseServiceType
        /// </summary>
        /// <remarks>
        /// Updates an existing warehouseServiceType using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">WarehouseServiceType to be updated.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateWarehouseServiceTypeWithHttpInfo (WarehouseServiceType body);
        /// <summary>
        /// Update a warehouseServiceType custom fields
        /// </summary>
        /// <remarks>
        /// Updates an existing warehouseServiceType custom fields using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">WarehouseServiceType to be updated.</param>
        /// <returns></returns>
        void UpdateWarehouseServiceTypeCustomFields (WarehouseServiceType body);

        /// <summary>
        /// Update a warehouseServiceType custom fields
        /// </summary>
        /// <remarks>
        /// Updates an existing warehouseServiceType custom fields using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">WarehouseServiceType to be updated.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateWarehouseServiceTypeCustomFieldsWithHttpInfo (WarehouseServiceType body);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create a warehouseServiceType
        /// </summary>
        /// <remarks>
        /// Inserts a new warehouseServiceType using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">WarehouseServiceType to be inserted.</param>
        /// <returns>Task of WarehouseServiceType</returns>
        System.Threading.Tasks.Task<WarehouseServiceType> AddWarehouseServiceTypeAsync (WarehouseServiceType body);

        /// <summary>
        /// Create a warehouseServiceType
        /// </summary>
        /// <remarks>
        /// Inserts a new warehouseServiceType using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">WarehouseServiceType to be inserted.</param>
        /// <returns>Task of ApiResponse (WarehouseServiceType)</returns>
        System.Threading.Tasks.Task<ApiResponse<WarehouseServiceType>> AddWarehouseServiceTypeAsyncWithHttpInfo (WarehouseServiceType body);
        /// <summary>
        /// Add new audit for a warehouseServiceType
        /// </summary>
        /// <remarks>
        /// Adds an audit to an existing warehouseServiceType.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseServiceTypeId">Id of the warehouseServiceType to add an audit to</param>
        /// <param name="warehouseServiceTypeAudit">The audit to add</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddWarehouseServiceTypeAuditAsync (int? warehouseServiceTypeId, string warehouseServiceTypeAudit);

        /// <summary>
        /// Add new audit for a warehouseServiceType
        /// </summary>
        /// <remarks>
        /// Adds an audit to an existing warehouseServiceType.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseServiceTypeId">Id of the warehouseServiceType to add an audit to</param>
        /// <param name="warehouseServiceTypeAudit">The audit to add</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddWarehouseServiceTypeAuditAsyncWithHttpInfo (int? warehouseServiceTypeId, string warehouseServiceTypeAudit);
        /// <summary>
        /// Attach a file to a warehouseServiceType
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing warehouseServiceType.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseServiceTypeId">Id of the warehouseServiceType to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddWarehouseServiceTypeFileAsync (int? warehouseServiceTypeId, string fileName);

        /// <summary>
        /// Attach a file to a warehouseServiceType
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing warehouseServiceType.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseServiceTypeId">Id of the warehouseServiceType to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddWarehouseServiceTypeFileAsyncWithHttpInfo (int? warehouseServiceTypeId, string fileName);
        /// <summary>
        /// Attach a file to a warehouseServiceType by URL.
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing warehouseServiceType by URL.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="warehouseServiceTypeId">Id of the warehouseServiceType to add an file to</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddWarehouseServiceTypeFileByURLAsync (RecordFile body, int? warehouseServiceTypeId);

        /// <summary>
        /// Attach a file to a warehouseServiceType by URL.
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing warehouseServiceType by URL.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="warehouseServiceTypeId">Id of the warehouseServiceType to add an file to</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddWarehouseServiceTypeFileByURLAsyncWithHttpInfo (RecordFile body, int? warehouseServiceTypeId);
        /// <summary>
        /// Add new tags for a warehouseServiceType.
        /// </summary>
        /// <remarks>
        /// Adds a tag to an existing warehouseServiceType.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseServiceTypeId">Id of the warehouseServiceType to add a tag to</param>
        /// <param name="warehouseServiceTypeTag">The tag to add</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddWarehouseServiceTypeTagAsync (int? warehouseServiceTypeId, string warehouseServiceTypeTag);

        /// <summary>
        /// Add new tags for a warehouseServiceType.
        /// </summary>
        /// <remarks>
        /// Adds a tag to an existing warehouseServiceType.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseServiceTypeId">Id of the warehouseServiceType to add a tag to</param>
        /// <param name="warehouseServiceTypeTag">The tag to add</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddWarehouseServiceTypeTagAsyncWithHttpInfo (int? warehouseServiceTypeId, string warehouseServiceTypeTag);
        /// <summary>
        /// Delete a warehouseServiceType
        /// </summary>
        /// <remarks>
        /// Deletes the warehouseServiceType identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseServiceTypeId">Id of the warehouseServiceType to be deleted.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteWarehouseServiceTypeAsync (int? warehouseServiceTypeId);

        /// <summary>
        /// Delete a warehouseServiceType
        /// </summary>
        /// <remarks>
        /// Deletes the warehouseServiceType identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseServiceTypeId">Id of the warehouseServiceType to be deleted.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteWarehouseServiceTypeAsyncWithHttpInfo (int? warehouseServiceTypeId);
        /// <summary>
        /// Delete a file for a warehouseServiceType.
        /// </summary>
        /// <remarks>
        /// Deletes an existing warehouseServiceType file using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseServiceTypeId">Id of the warehouseServiceType to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteWarehouseServiceTypeFileAsync (int? warehouseServiceTypeId, int? fileId);

        /// <summary>
        /// Delete a file for a warehouseServiceType.
        /// </summary>
        /// <remarks>
        /// Deletes an existing warehouseServiceType file using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseServiceTypeId">Id of the warehouseServiceType to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteWarehouseServiceTypeFileAsyncWithHttpInfo (int? warehouseServiceTypeId, int? fileId);
        /// <summary>
        /// Delete a tag for a warehouseServiceType.
        /// </summary>
        /// <remarks>
        /// Deletes an existing warehouseServiceType tag using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseServiceTypeId">Id of the warehouseServiceType to remove tag from</param>
        /// <param name="warehouseServiceTypeTag">The tag to delete</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteWarehouseServiceTypeTagAsync (int? warehouseServiceTypeId, string warehouseServiceTypeTag);

        /// <summary>
        /// Delete a tag for a warehouseServiceType.
        /// </summary>
        /// <remarks>
        /// Deletes an existing warehouseServiceType tag using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseServiceTypeId">Id of the warehouseServiceType to remove tag from</param>
        /// <param name="warehouseServiceTypeTag">The tag to delete</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteWarehouseServiceTypeTagAsyncWithHttpInfo (int? warehouseServiceTypeId, string warehouseServiceTypeTag);
        /// <summary>
        /// Get a duplicated a warehouseServiceType by id
        /// </summary>
        /// <remarks>
        /// Returns a duplicated warehouseServiceType identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseServiceTypeId">Id of the warehouseServiceType to be duplicated.</param>
        /// <returns>Task of WarehouseServiceType</returns>
        System.Threading.Tasks.Task<WarehouseServiceType> GetDuplicateWarehouseServiceTypeByIdAsync (int? warehouseServiceTypeId);

        /// <summary>
        /// Get a duplicated a warehouseServiceType by id
        /// </summary>
        /// <remarks>
        /// Returns a duplicated warehouseServiceType identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseServiceTypeId">Id of the warehouseServiceType to be duplicated.</param>
        /// <returns>Task of ApiResponse (WarehouseServiceType)</returns>
        System.Threading.Tasks.Task<ApiResponse<WarehouseServiceType>> GetDuplicateWarehouseServiceTypeByIdAsyncWithHttpInfo (int? warehouseServiceTypeId);
        /// <summary>
        /// Search warehouseServiceTypes by filter
        /// </summary>
        /// <remarks>
        /// Returns the list of warehouseServiceTypes that match the given filter.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>Task of List&lt;WarehouseServiceType&gt;</returns>
        System.Threading.Tasks.Task<List<WarehouseServiceType>> GetWarehouseServiceTypeByFilterAsync (string filter = null, int? page = null, int? limit = null, string sort = null);

        /// <summary>
        /// Search warehouseServiceTypes by filter
        /// </summary>
        /// <remarks>
        /// Returns the list of warehouseServiceTypes that match the given filter.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;WarehouseServiceType&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<WarehouseServiceType>>> GetWarehouseServiceTypeByFilterAsyncWithHttpInfo (string filter = null, int? page = null, int? limit = null, string sort = null);
        /// <summary>
        /// Get a warehouseServiceType by id
        /// </summary>
        /// <remarks>
        /// Returns the warehouseServiceType identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseServiceTypeId">Id of the warehouseServiceType to be returned.</param>
        /// <returns>Task of WarehouseServiceType</returns>
        System.Threading.Tasks.Task<WarehouseServiceType> GetWarehouseServiceTypeByIdAsync (int? warehouseServiceTypeId);

        /// <summary>
        /// Get a warehouseServiceType by id
        /// </summary>
        /// <remarks>
        /// Returns the warehouseServiceType identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseServiceTypeId">Id of the warehouseServiceType to be returned.</param>
        /// <returns>Task of ApiResponse (WarehouseServiceType)</returns>
        System.Threading.Tasks.Task<ApiResponse<WarehouseServiceType>> GetWarehouseServiceTypeByIdAsyncWithHttpInfo (int? warehouseServiceTypeId);
        /// <summary>
        /// Get the files for a warehouseServiceType.
        /// </summary>
        /// <remarks>
        /// Get all existing warehouseServiceType files.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseServiceTypeId">Id of the warehouseServiceType to get files for</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetWarehouseServiceTypeFilesAsync (int? warehouseServiceTypeId);

        /// <summary>
        /// Get the files for a warehouseServiceType.
        /// </summary>
        /// <remarks>
        /// Get all existing warehouseServiceType files.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseServiceTypeId">Id of the warehouseServiceType to get files for</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetWarehouseServiceTypeFilesAsyncWithHttpInfo (int? warehouseServiceTypeId);
        /// <summary>
        /// Get the tags for a warehouseServiceType.
        /// </summary>
        /// <remarks>
        /// Get all existing warehouseServiceType tags.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseServiceTypeId">Id of the warehouseServiceType to get tags for</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetWarehouseServiceTypeTagsAsync (int? warehouseServiceTypeId);

        /// <summary>
        /// Get the tags for a warehouseServiceType.
        /// </summary>
        /// <remarks>
        /// Get all existing warehouseServiceType tags.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseServiceTypeId">Id of the warehouseServiceType to get tags for</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetWarehouseServiceTypeTagsAsyncWithHttpInfo (int? warehouseServiceTypeId);
        /// <summary>
        /// Update a warehouseServiceType
        /// </summary>
        /// <remarks>
        /// Updates an existing warehouseServiceType using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">WarehouseServiceType to be updated.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateWarehouseServiceTypeAsync (WarehouseServiceType body);

        /// <summary>
        /// Update a warehouseServiceType
        /// </summary>
        /// <remarks>
        /// Updates an existing warehouseServiceType using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">WarehouseServiceType to be updated.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateWarehouseServiceTypeAsyncWithHttpInfo (WarehouseServiceType body);
        /// <summary>
        /// Update a warehouseServiceType custom fields
        /// </summary>
        /// <remarks>
        /// Updates an existing warehouseServiceType custom fields using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">WarehouseServiceType to be updated.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateWarehouseServiceTypeCustomFieldsAsync (WarehouseServiceType body);

        /// <summary>
        /// Update a warehouseServiceType custom fields
        /// </summary>
        /// <remarks>
        /// Updates an existing warehouseServiceType custom fields using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">WarehouseServiceType to be updated.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateWarehouseServiceTypeCustomFieldsAsyncWithHttpInfo (WarehouseServiceType body);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class WarehouseServiceTypeApi : IWarehouseServiceTypeApi
    {
        private Infoplus.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="WarehouseServiceTypeApi"/> class.
        /// </summary>
        /// <returns></returns>
        public WarehouseServiceTypeApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = Infoplus.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WarehouseServiceTypeApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public WarehouseServiceTypeApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Infoplus.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Infoplus.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create a warehouseServiceType Inserts a new warehouseServiceType using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">WarehouseServiceType to be inserted.</param>
        /// <returns>WarehouseServiceType</returns>
        public WarehouseServiceType AddWarehouseServiceType (WarehouseServiceType body)
        {
             ApiResponse<WarehouseServiceType> localVarResponse = AddWarehouseServiceTypeWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a warehouseServiceType Inserts a new warehouseServiceType using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">WarehouseServiceType to be inserted.</param>
        /// <returns>ApiResponse of WarehouseServiceType</returns>
        public ApiResponse< WarehouseServiceType > AddWarehouseServiceTypeWithHttpInfo (WarehouseServiceType body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling WarehouseServiceTypeApi->AddWarehouseServiceType");

            var localVarPath = "/beta/warehouseServiceType";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddWarehouseServiceType", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WarehouseServiceType>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WarehouseServiceType) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WarehouseServiceType)));
        }

        /// <summary>
        /// Create a warehouseServiceType Inserts a new warehouseServiceType using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">WarehouseServiceType to be inserted.</param>
        /// <returns>Task of WarehouseServiceType</returns>
        public async System.Threading.Tasks.Task<WarehouseServiceType> AddWarehouseServiceTypeAsync (WarehouseServiceType body)
        {
             ApiResponse<WarehouseServiceType> localVarResponse = await AddWarehouseServiceTypeAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a warehouseServiceType Inserts a new warehouseServiceType using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">WarehouseServiceType to be inserted.</param>
        /// <returns>Task of ApiResponse (WarehouseServiceType)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WarehouseServiceType>> AddWarehouseServiceTypeAsyncWithHttpInfo (WarehouseServiceType body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling WarehouseServiceTypeApi->AddWarehouseServiceType");

            var localVarPath = "/beta/warehouseServiceType";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddWarehouseServiceType", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WarehouseServiceType>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WarehouseServiceType) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WarehouseServiceType)));
        }

        /// <summary>
        /// Add new audit for a warehouseServiceType Adds an audit to an existing warehouseServiceType.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseServiceTypeId">Id of the warehouseServiceType to add an audit to</param>
        /// <param name="warehouseServiceTypeAudit">The audit to add</param>
        /// <returns></returns>
        public void AddWarehouseServiceTypeAudit (int? warehouseServiceTypeId, string warehouseServiceTypeAudit)
        {
             AddWarehouseServiceTypeAuditWithHttpInfo(warehouseServiceTypeId, warehouseServiceTypeAudit);
        }

        /// <summary>
        /// Add new audit for a warehouseServiceType Adds an audit to an existing warehouseServiceType.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseServiceTypeId">Id of the warehouseServiceType to add an audit to</param>
        /// <param name="warehouseServiceTypeAudit">The audit to add</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AddWarehouseServiceTypeAuditWithHttpInfo (int? warehouseServiceTypeId, string warehouseServiceTypeAudit)
        {
            // verify the required parameter 'warehouseServiceTypeId' is set
            if (warehouseServiceTypeId == null)
                throw new ApiException(400, "Missing required parameter 'warehouseServiceTypeId' when calling WarehouseServiceTypeApi->AddWarehouseServiceTypeAudit");
            // verify the required parameter 'warehouseServiceTypeAudit' is set
            if (warehouseServiceTypeAudit == null)
                throw new ApiException(400, "Missing required parameter 'warehouseServiceTypeAudit' when calling WarehouseServiceTypeApi->AddWarehouseServiceTypeAudit");

            var localVarPath = "/beta/warehouseServiceType/{warehouseServiceTypeId}/audit/{warehouseServiceTypeAudit}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (warehouseServiceTypeId != null) localVarPathParams.Add("warehouseServiceTypeId", Configuration.ApiClient.ParameterToString(warehouseServiceTypeId)); // path parameter
            if (warehouseServiceTypeAudit != null) localVarPathParams.Add("warehouseServiceTypeAudit", Configuration.ApiClient.ParameterToString(warehouseServiceTypeAudit)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddWarehouseServiceTypeAudit", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Add new audit for a warehouseServiceType Adds an audit to an existing warehouseServiceType.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseServiceTypeId">Id of the warehouseServiceType to add an audit to</param>
        /// <param name="warehouseServiceTypeAudit">The audit to add</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddWarehouseServiceTypeAuditAsync (int? warehouseServiceTypeId, string warehouseServiceTypeAudit)
        {
             await AddWarehouseServiceTypeAuditAsyncWithHttpInfo(warehouseServiceTypeId, warehouseServiceTypeAudit);

        }

        /// <summary>
        /// Add new audit for a warehouseServiceType Adds an audit to an existing warehouseServiceType.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseServiceTypeId">Id of the warehouseServiceType to add an audit to</param>
        /// <param name="warehouseServiceTypeAudit">The audit to add</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddWarehouseServiceTypeAuditAsyncWithHttpInfo (int? warehouseServiceTypeId, string warehouseServiceTypeAudit)
        {
            // verify the required parameter 'warehouseServiceTypeId' is set
            if (warehouseServiceTypeId == null)
                throw new ApiException(400, "Missing required parameter 'warehouseServiceTypeId' when calling WarehouseServiceTypeApi->AddWarehouseServiceTypeAudit");
            // verify the required parameter 'warehouseServiceTypeAudit' is set
            if (warehouseServiceTypeAudit == null)
                throw new ApiException(400, "Missing required parameter 'warehouseServiceTypeAudit' when calling WarehouseServiceTypeApi->AddWarehouseServiceTypeAudit");

            var localVarPath = "/beta/warehouseServiceType/{warehouseServiceTypeId}/audit/{warehouseServiceTypeAudit}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (warehouseServiceTypeId != null) localVarPathParams.Add("warehouseServiceTypeId", Configuration.ApiClient.ParameterToString(warehouseServiceTypeId)); // path parameter
            if (warehouseServiceTypeAudit != null) localVarPathParams.Add("warehouseServiceTypeAudit", Configuration.ApiClient.ParameterToString(warehouseServiceTypeAudit)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddWarehouseServiceTypeAudit", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Attach a file to a warehouseServiceType Adds a file to an existing warehouseServiceType.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseServiceTypeId">Id of the warehouseServiceType to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns></returns>
        public void AddWarehouseServiceTypeFile (int? warehouseServiceTypeId, string fileName)
        {
             AddWarehouseServiceTypeFileWithHttpInfo(warehouseServiceTypeId, fileName);
        }

        /// <summary>
        /// Attach a file to a warehouseServiceType Adds a file to an existing warehouseServiceType.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseServiceTypeId">Id of the warehouseServiceType to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AddWarehouseServiceTypeFileWithHttpInfo (int? warehouseServiceTypeId, string fileName)
        {
            // verify the required parameter 'warehouseServiceTypeId' is set
            if (warehouseServiceTypeId == null)
                throw new ApiException(400, "Missing required parameter 'warehouseServiceTypeId' when calling WarehouseServiceTypeApi->AddWarehouseServiceTypeFile");
            // verify the required parameter 'fileName' is set
            if (fileName == null)
                throw new ApiException(400, "Missing required parameter 'fileName' when calling WarehouseServiceTypeApi->AddWarehouseServiceTypeFile");

            var localVarPath = "/beta/warehouseServiceType/{warehouseServiceTypeId}/file/{fileName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (warehouseServiceTypeId != null) localVarPathParams.Add("warehouseServiceTypeId", Configuration.ApiClient.ParameterToString(warehouseServiceTypeId)); // path parameter
            if (fileName != null) localVarPathParams.Add("fileName", Configuration.ApiClient.ParameterToString(fileName)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddWarehouseServiceTypeFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Attach a file to a warehouseServiceType Adds a file to an existing warehouseServiceType.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseServiceTypeId">Id of the warehouseServiceType to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddWarehouseServiceTypeFileAsync (int? warehouseServiceTypeId, string fileName)
        {
             await AddWarehouseServiceTypeFileAsyncWithHttpInfo(warehouseServiceTypeId, fileName);

        }

        /// <summary>
        /// Attach a file to a warehouseServiceType Adds a file to an existing warehouseServiceType.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseServiceTypeId">Id of the warehouseServiceType to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddWarehouseServiceTypeFileAsyncWithHttpInfo (int? warehouseServiceTypeId, string fileName)
        {
            // verify the required parameter 'warehouseServiceTypeId' is set
            if (warehouseServiceTypeId == null)
                throw new ApiException(400, "Missing required parameter 'warehouseServiceTypeId' when calling WarehouseServiceTypeApi->AddWarehouseServiceTypeFile");
            // verify the required parameter 'fileName' is set
            if (fileName == null)
                throw new ApiException(400, "Missing required parameter 'fileName' when calling WarehouseServiceTypeApi->AddWarehouseServiceTypeFile");

            var localVarPath = "/beta/warehouseServiceType/{warehouseServiceTypeId}/file/{fileName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (warehouseServiceTypeId != null) localVarPathParams.Add("warehouseServiceTypeId", Configuration.ApiClient.ParameterToString(warehouseServiceTypeId)); // path parameter
            if (fileName != null) localVarPathParams.Add("fileName", Configuration.ApiClient.ParameterToString(fileName)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddWarehouseServiceTypeFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Attach a file to a warehouseServiceType by URL. Adds a file to an existing warehouseServiceType by URL.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="warehouseServiceTypeId">Id of the warehouseServiceType to add an file to</param>
        /// <returns></returns>
        public void AddWarehouseServiceTypeFileByURL (RecordFile body, int? warehouseServiceTypeId)
        {
             AddWarehouseServiceTypeFileByURLWithHttpInfo(body, warehouseServiceTypeId);
        }

        /// <summary>
        /// Attach a file to a warehouseServiceType by URL. Adds a file to an existing warehouseServiceType by URL.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="warehouseServiceTypeId">Id of the warehouseServiceType to add an file to</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AddWarehouseServiceTypeFileByURLWithHttpInfo (RecordFile body, int? warehouseServiceTypeId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling WarehouseServiceTypeApi->AddWarehouseServiceTypeFileByURL");
            // verify the required parameter 'warehouseServiceTypeId' is set
            if (warehouseServiceTypeId == null)
                throw new ApiException(400, "Missing required parameter 'warehouseServiceTypeId' when calling WarehouseServiceTypeApi->AddWarehouseServiceTypeFileByURL");

            var localVarPath = "/beta/warehouseServiceType/{warehouseServiceTypeId}/file";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (warehouseServiceTypeId != null) localVarPathParams.Add("warehouseServiceTypeId", Configuration.ApiClient.ParameterToString(warehouseServiceTypeId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddWarehouseServiceTypeFileByURL", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Attach a file to a warehouseServiceType by URL. Adds a file to an existing warehouseServiceType by URL.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="warehouseServiceTypeId">Id of the warehouseServiceType to add an file to</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddWarehouseServiceTypeFileByURLAsync (RecordFile body, int? warehouseServiceTypeId)
        {
             await AddWarehouseServiceTypeFileByURLAsyncWithHttpInfo(body, warehouseServiceTypeId);

        }

        /// <summary>
        /// Attach a file to a warehouseServiceType by URL. Adds a file to an existing warehouseServiceType by URL.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="warehouseServiceTypeId">Id of the warehouseServiceType to add an file to</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddWarehouseServiceTypeFileByURLAsyncWithHttpInfo (RecordFile body, int? warehouseServiceTypeId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling WarehouseServiceTypeApi->AddWarehouseServiceTypeFileByURL");
            // verify the required parameter 'warehouseServiceTypeId' is set
            if (warehouseServiceTypeId == null)
                throw new ApiException(400, "Missing required parameter 'warehouseServiceTypeId' when calling WarehouseServiceTypeApi->AddWarehouseServiceTypeFileByURL");

            var localVarPath = "/beta/warehouseServiceType/{warehouseServiceTypeId}/file";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (warehouseServiceTypeId != null) localVarPathParams.Add("warehouseServiceTypeId", Configuration.ApiClient.ParameterToString(warehouseServiceTypeId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddWarehouseServiceTypeFileByURL", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Add new tags for a warehouseServiceType. Adds a tag to an existing warehouseServiceType.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseServiceTypeId">Id of the warehouseServiceType to add a tag to</param>
        /// <param name="warehouseServiceTypeTag">The tag to add</param>
        /// <returns></returns>
        public void AddWarehouseServiceTypeTag (int? warehouseServiceTypeId, string warehouseServiceTypeTag)
        {
             AddWarehouseServiceTypeTagWithHttpInfo(warehouseServiceTypeId, warehouseServiceTypeTag);
        }

        /// <summary>
        /// Add new tags for a warehouseServiceType. Adds a tag to an existing warehouseServiceType.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseServiceTypeId">Id of the warehouseServiceType to add a tag to</param>
        /// <param name="warehouseServiceTypeTag">The tag to add</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AddWarehouseServiceTypeTagWithHttpInfo (int? warehouseServiceTypeId, string warehouseServiceTypeTag)
        {
            // verify the required parameter 'warehouseServiceTypeId' is set
            if (warehouseServiceTypeId == null)
                throw new ApiException(400, "Missing required parameter 'warehouseServiceTypeId' when calling WarehouseServiceTypeApi->AddWarehouseServiceTypeTag");
            // verify the required parameter 'warehouseServiceTypeTag' is set
            if (warehouseServiceTypeTag == null)
                throw new ApiException(400, "Missing required parameter 'warehouseServiceTypeTag' when calling WarehouseServiceTypeApi->AddWarehouseServiceTypeTag");

            var localVarPath = "/beta/warehouseServiceType/{warehouseServiceTypeId}/tag/{warehouseServiceTypeTag}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (warehouseServiceTypeId != null) localVarPathParams.Add("warehouseServiceTypeId", Configuration.ApiClient.ParameterToString(warehouseServiceTypeId)); // path parameter
            if (warehouseServiceTypeTag != null) localVarPathParams.Add("warehouseServiceTypeTag", Configuration.ApiClient.ParameterToString(warehouseServiceTypeTag)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddWarehouseServiceTypeTag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Add new tags for a warehouseServiceType. Adds a tag to an existing warehouseServiceType.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseServiceTypeId">Id of the warehouseServiceType to add a tag to</param>
        /// <param name="warehouseServiceTypeTag">The tag to add</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddWarehouseServiceTypeTagAsync (int? warehouseServiceTypeId, string warehouseServiceTypeTag)
        {
             await AddWarehouseServiceTypeTagAsyncWithHttpInfo(warehouseServiceTypeId, warehouseServiceTypeTag);

        }

        /// <summary>
        /// Add new tags for a warehouseServiceType. Adds a tag to an existing warehouseServiceType.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseServiceTypeId">Id of the warehouseServiceType to add a tag to</param>
        /// <param name="warehouseServiceTypeTag">The tag to add</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddWarehouseServiceTypeTagAsyncWithHttpInfo (int? warehouseServiceTypeId, string warehouseServiceTypeTag)
        {
            // verify the required parameter 'warehouseServiceTypeId' is set
            if (warehouseServiceTypeId == null)
                throw new ApiException(400, "Missing required parameter 'warehouseServiceTypeId' when calling WarehouseServiceTypeApi->AddWarehouseServiceTypeTag");
            // verify the required parameter 'warehouseServiceTypeTag' is set
            if (warehouseServiceTypeTag == null)
                throw new ApiException(400, "Missing required parameter 'warehouseServiceTypeTag' when calling WarehouseServiceTypeApi->AddWarehouseServiceTypeTag");

            var localVarPath = "/beta/warehouseServiceType/{warehouseServiceTypeId}/tag/{warehouseServiceTypeTag}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (warehouseServiceTypeId != null) localVarPathParams.Add("warehouseServiceTypeId", Configuration.ApiClient.ParameterToString(warehouseServiceTypeId)); // path parameter
            if (warehouseServiceTypeTag != null) localVarPathParams.Add("warehouseServiceTypeTag", Configuration.ApiClient.ParameterToString(warehouseServiceTypeTag)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddWarehouseServiceTypeTag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a warehouseServiceType Deletes the warehouseServiceType identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseServiceTypeId">Id of the warehouseServiceType to be deleted.</param>
        /// <returns></returns>
        public void DeleteWarehouseServiceType (int? warehouseServiceTypeId)
        {
             DeleteWarehouseServiceTypeWithHttpInfo(warehouseServiceTypeId);
        }

        /// <summary>
        /// Delete a warehouseServiceType Deletes the warehouseServiceType identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseServiceTypeId">Id of the warehouseServiceType to be deleted.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteWarehouseServiceTypeWithHttpInfo (int? warehouseServiceTypeId)
        {
            // verify the required parameter 'warehouseServiceTypeId' is set
            if (warehouseServiceTypeId == null)
                throw new ApiException(400, "Missing required parameter 'warehouseServiceTypeId' when calling WarehouseServiceTypeApi->DeleteWarehouseServiceType");

            var localVarPath = "/beta/warehouseServiceType/{warehouseServiceTypeId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (warehouseServiceTypeId != null) localVarPathParams.Add("warehouseServiceTypeId", Configuration.ApiClient.ParameterToString(warehouseServiceTypeId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteWarehouseServiceType", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a warehouseServiceType Deletes the warehouseServiceType identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseServiceTypeId">Id of the warehouseServiceType to be deleted.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteWarehouseServiceTypeAsync (int? warehouseServiceTypeId)
        {
             await DeleteWarehouseServiceTypeAsyncWithHttpInfo(warehouseServiceTypeId);

        }

        /// <summary>
        /// Delete a warehouseServiceType Deletes the warehouseServiceType identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseServiceTypeId">Id of the warehouseServiceType to be deleted.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteWarehouseServiceTypeAsyncWithHttpInfo (int? warehouseServiceTypeId)
        {
            // verify the required parameter 'warehouseServiceTypeId' is set
            if (warehouseServiceTypeId == null)
                throw new ApiException(400, "Missing required parameter 'warehouseServiceTypeId' when calling WarehouseServiceTypeApi->DeleteWarehouseServiceType");

            var localVarPath = "/beta/warehouseServiceType/{warehouseServiceTypeId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (warehouseServiceTypeId != null) localVarPathParams.Add("warehouseServiceTypeId", Configuration.ApiClient.ParameterToString(warehouseServiceTypeId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteWarehouseServiceType", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a file for a warehouseServiceType. Deletes an existing warehouseServiceType file using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseServiceTypeId">Id of the warehouseServiceType to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns></returns>
        public void DeleteWarehouseServiceTypeFile (int? warehouseServiceTypeId, int? fileId)
        {
             DeleteWarehouseServiceTypeFileWithHttpInfo(warehouseServiceTypeId, fileId);
        }

        /// <summary>
        /// Delete a file for a warehouseServiceType. Deletes an existing warehouseServiceType file using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseServiceTypeId">Id of the warehouseServiceType to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteWarehouseServiceTypeFileWithHttpInfo (int? warehouseServiceTypeId, int? fileId)
        {
            // verify the required parameter 'warehouseServiceTypeId' is set
            if (warehouseServiceTypeId == null)
                throw new ApiException(400, "Missing required parameter 'warehouseServiceTypeId' when calling WarehouseServiceTypeApi->DeleteWarehouseServiceTypeFile");
            // verify the required parameter 'fileId' is set
            if (fileId == null)
                throw new ApiException(400, "Missing required parameter 'fileId' when calling WarehouseServiceTypeApi->DeleteWarehouseServiceTypeFile");

            var localVarPath = "/beta/warehouseServiceType/{warehouseServiceTypeId}/file/{fileId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (warehouseServiceTypeId != null) localVarPathParams.Add("warehouseServiceTypeId", Configuration.ApiClient.ParameterToString(warehouseServiceTypeId)); // path parameter
            if (fileId != null) localVarPathParams.Add("fileId", Configuration.ApiClient.ParameterToString(fileId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteWarehouseServiceTypeFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a file for a warehouseServiceType. Deletes an existing warehouseServiceType file using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseServiceTypeId">Id of the warehouseServiceType to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteWarehouseServiceTypeFileAsync (int? warehouseServiceTypeId, int? fileId)
        {
             await DeleteWarehouseServiceTypeFileAsyncWithHttpInfo(warehouseServiceTypeId, fileId);

        }

        /// <summary>
        /// Delete a file for a warehouseServiceType. Deletes an existing warehouseServiceType file using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseServiceTypeId">Id of the warehouseServiceType to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteWarehouseServiceTypeFileAsyncWithHttpInfo (int? warehouseServiceTypeId, int? fileId)
        {
            // verify the required parameter 'warehouseServiceTypeId' is set
            if (warehouseServiceTypeId == null)
                throw new ApiException(400, "Missing required parameter 'warehouseServiceTypeId' when calling WarehouseServiceTypeApi->DeleteWarehouseServiceTypeFile");
            // verify the required parameter 'fileId' is set
            if (fileId == null)
                throw new ApiException(400, "Missing required parameter 'fileId' when calling WarehouseServiceTypeApi->DeleteWarehouseServiceTypeFile");

            var localVarPath = "/beta/warehouseServiceType/{warehouseServiceTypeId}/file/{fileId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (warehouseServiceTypeId != null) localVarPathParams.Add("warehouseServiceTypeId", Configuration.ApiClient.ParameterToString(warehouseServiceTypeId)); // path parameter
            if (fileId != null) localVarPathParams.Add("fileId", Configuration.ApiClient.ParameterToString(fileId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteWarehouseServiceTypeFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a tag for a warehouseServiceType. Deletes an existing warehouseServiceType tag using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseServiceTypeId">Id of the warehouseServiceType to remove tag from</param>
        /// <param name="warehouseServiceTypeTag">The tag to delete</param>
        /// <returns></returns>
        public void DeleteWarehouseServiceTypeTag (int? warehouseServiceTypeId, string warehouseServiceTypeTag)
        {
             DeleteWarehouseServiceTypeTagWithHttpInfo(warehouseServiceTypeId, warehouseServiceTypeTag);
        }

        /// <summary>
        /// Delete a tag for a warehouseServiceType. Deletes an existing warehouseServiceType tag using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseServiceTypeId">Id of the warehouseServiceType to remove tag from</param>
        /// <param name="warehouseServiceTypeTag">The tag to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteWarehouseServiceTypeTagWithHttpInfo (int? warehouseServiceTypeId, string warehouseServiceTypeTag)
        {
            // verify the required parameter 'warehouseServiceTypeId' is set
            if (warehouseServiceTypeId == null)
                throw new ApiException(400, "Missing required parameter 'warehouseServiceTypeId' when calling WarehouseServiceTypeApi->DeleteWarehouseServiceTypeTag");
            // verify the required parameter 'warehouseServiceTypeTag' is set
            if (warehouseServiceTypeTag == null)
                throw new ApiException(400, "Missing required parameter 'warehouseServiceTypeTag' when calling WarehouseServiceTypeApi->DeleteWarehouseServiceTypeTag");

            var localVarPath = "/beta/warehouseServiceType/{warehouseServiceTypeId}/tag/{warehouseServiceTypeTag}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (warehouseServiceTypeId != null) localVarPathParams.Add("warehouseServiceTypeId", Configuration.ApiClient.ParameterToString(warehouseServiceTypeId)); // path parameter
            if (warehouseServiceTypeTag != null) localVarPathParams.Add("warehouseServiceTypeTag", Configuration.ApiClient.ParameterToString(warehouseServiceTypeTag)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteWarehouseServiceTypeTag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a tag for a warehouseServiceType. Deletes an existing warehouseServiceType tag using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseServiceTypeId">Id of the warehouseServiceType to remove tag from</param>
        /// <param name="warehouseServiceTypeTag">The tag to delete</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteWarehouseServiceTypeTagAsync (int? warehouseServiceTypeId, string warehouseServiceTypeTag)
        {
             await DeleteWarehouseServiceTypeTagAsyncWithHttpInfo(warehouseServiceTypeId, warehouseServiceTypeTag);

        }

        /// <summary>
        /// Delete a tag for a warehouseServiceType. Deletes an existing warehouseServiceType tag using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseServiceTypeId">Id of the warehouseServiceType to remove tag from</param>
        /// <param name="warehouseServiceTypeTag">The tag to delete</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteWarehouseServiceTypeTagAsyncWithHttpInfo (int? warehouseServiceTypeId, string warehouseServiceTypeTag)
        {
            // verify the required parameter 'warehouseServiceTypeId' is set
            if (warehouseServiceTypeId == null)
                throw new ApiException(400, "Missing required parameter 'warehouseServiceTypeId' when calling WarehouseServiceTypeApi->DeleteWarehouseServiceTypeTag");
            // verify the required parameter 'warehouseServiceTypeTag' is set
            if (warehouseServiceTypeTag == null)
                throw new ApiException(400, "Missing required parameter 'warehouseServiceTypeTag' when calling WarehouseServiceTypeApi->DeleteWarehouseServiceTypeTag");

            var localVarPath = "/beta/warehouseServiceType/{warehouseServiceTypeId}/tag/{warehouseServiceTypeTag}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (warehouseServiceTypeId != null) localVarPathParams.Add("warehouseServiceTypeId", Configuration.ApiClient.ParameterToString(warehouseServiceTypeId)); // path parameter
            if (warehouseServiceTypeTag != null) localVarPathParams.Add("warehouseServiceTypeTag", Configuration.ApiClient.ParameterToString(warehouseServiceTypeTag)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteWarehouseServiceTypeTag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get a duplicated a warehouseServiceType by id Returns a duplicated warehouseServiceType identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseServiceTypeId">Id of the warehouseServiceType to be duplicated.</param>
        /// <returns>WarehouseServiceType</returns>
        public WarehouseServiceType GetDuplicateWarehouseServiceTypeById (int? warehouseServiceTypeId)
        {
             ApiResponse<WarehouseServiceType> localVarResponse = GetDuplicateWarehouseServiceTypeByIdWithHttpInfo(warehouseServiceTypeId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a duplicated a warehouseServiceType by id Returns a duplicated warehouseServiceType identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseServiceTypeId">Id of the warehouseServiceType to be duplicated.</param>
        /// <returns>ApiResponse of WarehouseServiceType</returns>
        public ApiResponse< WarehouseServiceType > GetDuplicateWarehouseServiceTypeByIdWithHttpInfo (int? warehouseServiceTypeId)
        {
            // verify the required parameter 'warehouseServiceTypeId' is set
            if (warehouseServiceTypeId == null)
                throw new ApiException(400, "Missing required parameter 'warehouseServiceTypeId' when calling WarehouseServiceTypeApi->GetDuplicateWarehouseServiceTypeById");

            var localVarPath = "/beta/warehouseServiceType/duplicate/{warehouseServiceTypeId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (warehouseServiceTypeId != null) localVarPathParams.Add("warehouseServiceTypeId", Configuration.ApiClient.ParameterToString(warehouseServiceTypeId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDuplicateWarehouseServiceTypeById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WarehouseServiceType>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WarehouseServiceType) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WarehouseServiceType)));
        }

        /// <summary>
        /// Get a duplicated a warehouseServiceType by id Returns a duplicated warehouseServiceType identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseServiceTypeId">Id of the warehouseServiceType to be duplicated.</param>
        /// <returns>Task of WarehouseServiceType</returns>
        public async System.Threading.Tasks.Task<WarehouseServiceType> GetDuplicateWarehouseServiceTypeByIdAsync (int? warehouseServiceTypeId)
        {
             ApiResponse<WarehouseServiceType> localVarResponse = await GetDuplicateWarehouseServiceTypeByIdAsyncWithHttpInfo(warehouseServiceTypeId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a duplicated a warehouseServiceType by id Returns a duplicated warehouseServiceType identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseServiceTypeId">Id of the warehouseServiceType to be duplicated.</param>
        /// <returns>Task of ApiResponse (WarehouseServiceType)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WarehouseServiceType>> GetDuplicateWarehouseServiceTypeByIdAsyncWithHttpInfo (int? warehouseServiceTypeId)
        {
            // verify the required parameter 'warehouseServiceTypeId' is set
            if (warehouseServiceTypeId == null)
                throw new ApiException(400, "Missing required parameter 'warehouseServiceTypeId' when calling WarehouseServiceTypeApi->GetDuplicateWarehouseServiceTypeById");

            var localVarPath = "/beta/warehouseServiceType/duplicate/{warehouseServiceTypeId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (warehouseServiceTypeId != null) localVarPathParams.Add("warehouseServiceTypeId", Configuration.ApiClient.ParameterToString(warehouseServiceTypeId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDuplicateWarehouseServiceTypeById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WarehouseServiceType>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WarehouseServiceType) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WarehouseServiceType)));
        }

        /// <summary>
        /// Search warehouseServiceTypes by filter Returns the list of warehouseServiceTypes that match the given filter.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>List&lt;WarehouseServiceType&gt;</returns>
        public List<WarehouseServiceType> GetWarehouseServiceTypeByFilter (string filter = null, int? page = null, int? limit = null, string sort = null)
        {
             ApiResponse<List<WarehouseServiceType>> localVarResponse = GetWarehouseServiceTypeByFilterWithHttpInfo(filter, page, limit, sort);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Search warehouseServiceTypes by filter Returns the list of warehouseServiceTypes that match the given filter.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>ApiResponse of List&lt;WarehouseServiceType&gt;</returns>
        public ApiResponse< List<WarehouseServiceType> > GetWarehouseServiceTypeByFilterWithHttpInfo (string filter = null, int? page = null, int? limit = null, string sort = null)
        {

            var localVarPath = "/beta/warehouseServiceType/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (filter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (page != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWarehouseServiceTypeByFilter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<WarehouseServiceType>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<WarehouseServiceType>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<WarehouseServiceType>)));
        }

        /// <summary>
        /// Search warehouseServiceTypes by filter Returns the list of warehouseServiceTypes that match the given filter.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>Task of List&lt;WarehouseServiceType&gt;</returns>
        public async System.Threading.Tasks.Task<List<WarehouseServiceType>> GetWarehouseServiceTypeByFilterAsync (string filter = null, int? page = null, int? limit = null, string sort = null)
        {
             ApiResponse<List<WarehouseServiceType>> localVarResponse = await GetWarehouseServiceTypeByFilterAsyncWithHttpInfo(filter, page, limit, sort);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Search warehouseServiceTypes by filter Returns the list of warehouseServiceTypes that match the given filter.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;WarehouseServiceType&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<WarehouseServiceType>>> GetWarehouseServiceTypeByFilterAsyncWithHttpInfo (string filter = null, int? page = null, int? limit = null, string sort = null)
        {

            var localVarPath = "/beta/warehouseServiceType/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (filter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (page != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWarehouseServiceTypeByFilter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<WarehouseServiceType>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<WarehouseServiceType>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<WarehouseServiceType>)));
        }

        /// <summary>
        /// Get a warehouseServiceType by id Returns the warehouseServiceType identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseServiceTypeId">Id of the warehouseServiceType to be returned.</param>
        /// <returns>WarehouseServiceType</returns>
        public WarehouseServiceType GetWarehouseServiceTypeById (int? warehouseServiceTypeId)
        {
             ApiResponse<WarehouseServiceType> localVarResponse = GetWarehouseServiceTypeByIdWithHttpInfo(warehouseServiceTypeId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a warehouseServiceType by id Returns the warehouseServiceType identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseServiceTypeId">Id of the warehouseServiceType to be returned.</param>
        /// <returns>ApiResponse of WarehouseServiceType</returns>
        public ApiResponse< WarehouseServiceType > GetWarehouseServiceTypeByIdWithHttpInfo (int? warehouseServiceTypeId)
        {
            // verify the required parameter 'warehouseServiceTypeId' is set
            if (warehouseServiceTypeId == null)
                throw new ApiException(400, "Missing required parameter 'warehouseServiceTypeId' when calling WarehouseServiceTypeApi->GetWarehouseServiceTypeById");

            var localVarPath = "/beta/warehouseServiceType/{warehouseServiceTypeId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (warehouseServiceTypeId != null) localVarPathParams.Add("warehouseServiceTypeId", Configuration.ApiClient.ParameterToString(warehouseServiceTypeId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWarehouseServiceTypeById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WarehouseServiceType>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WarehouseServiceType) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WarehouseServiceType)));
        }

        /// <summary>
        /// Get a warehouseServiceType by id Returns the warehouseServiceType identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseServiceTypeId">Id of the warehouseServiceType to be returned.</param>
        /// <returns>Task of WarehouseServiceType</returns>
        public async System.Threading.Tasks.Task<WarehouseServiceType> GetWarehouseServiceTypeByIdAsync (int? warehouseServiceTypeId)
        {
             ApiResponse<WarehouseServiceType> localVarResponse = await GetWarehouseServiceTypeByIdAsyncWithHttpInfo(warehouseServiceTypeId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a warehouseServiceType by id Returns the warehouseServiceType identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseServiceTypeId">Id of the warehouseServiceType to be returned.</param>
        /// <returns>Task of ApiResponse (WarehouseServiceType)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WarehouseServiceType>> GetWarehouseServiceTypeByIdAsyncWithHttpInfo (int? warehouseServiceTypeId)
        {
            // verify the required parameter 'warehouseServiceTypeId' is set
            if (warehouseServiceTypeId == null)
                throw new ApiException(400, "Missing required parameter 'warehouseServiceTypeId' when calling WarehouseServiceTypeApi->GetWarehouseServiceTypeById");

            var localVarPath = "/beta/warehouseServiceType/{warehouseServiceTypeId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (warehouseServiceTypeId != null) localVarPathParams.Add("warehouseServiceTypeId", Configuration.ApiClient.ParameterToString(warehouseServiceTypeId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWarehouseServiceTypeById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WarehouseServiceType>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WarehouseServiceType) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WarehouseServiceType)));
        }

        /// <summary>
        /// Get the files for a warehouseServiceType. Get all existing warehouseServiceType files.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseServiceTypeId">Id of the warehouseServiceType to get files for</param>
        /// <returns></returns>
        public void GetWarehouseServiceTypeFiles (int? warehouseServiceTypeId)
        {
             GetWarehouseServiceTypeFilesWithHttpInfo(warehouseServiceTypeId);
        }

        /// <summary>
        /// Get the files for a warehouseServiceType. Get all existing warehouseServiceType files.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseServiceTypeId">Id of the warehouseServiceType to get files for</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GetWarehouseServiceTypeFilesWithHttpInfo (int? warehouseServiceTypeId)
        {
            // verify the required parameter 'warehouseServiceTypeId' is set
            if (warehouseServiceTypeId == null)
                throw new ApiException(400, "Missing required parameter 'warehouseServiceTypeId' when calling WarehouseServiceTypeApi->GetWarehouseServiceTypeFiles");

            var localVarPath = "/beta/warehouseServiceType/{warehouseServiceTypeId}/file";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (warehouseServiceTypeId != null) localVarPathParams.Add("warehouseServiceTypeId", Configuration.ApiClient.ParameterToString(warehouseServiceTypeId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWarehouseServiceTypeFiles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get the files for a warehouseServiceType. Get all existing warehouseServiceType files.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseServiceTypeId">Id of the warehouseServiceType to get files for</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetWarehouseServiceTypeFilesAsync (int? warehouseServiceTypeId)
        {
             await GetWarehouseServiceTypeFilesAsyncWithHttpInfo(warehouseServiceTypeId);

        }

        /// <summary>
        /// Get the files for a warehouseServiceType. Get all existing warehouseServiceType files.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseServiceTypeId">Id of the warehouseServiceType to get files for</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetWarehouseServiceTypeFilesAsyncWithHttpInfo (int? warehouseServiceTypeId)
        {
            // verify the required parameter 'warehouseServiceTypeId' is set
            if (warehouseServiceTypeId == null)
                throw new ApiException(400, "Missing required parameter 'warehouseServiceTypeId' when calling WarehouseServiceTypeApi->GetWarehouseServiceTypeFiles");

            var localVarPath = "/beta/warehouseServiceType/{warehouseServiceTypeId}/file";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (warehouseServiceTypeId != null) localVarPathParams.Add("warehouseServiceTypeId", Configuration.ApiClient.ParameterToString(warehouseServiceTypeId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWarehouseServiceTypeFiles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get the tags for a warehouseServiceType. Get all existing warehouseServiceType tags.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseServiceTypeId">Id of the warehouseServiceType to get tags for</param>
        /// <returns></returns>
        public void GetWarehouseServiceTypeTags (int? warehouseServiceTypeId)
        {
             GetWarehouseServiceTypeTagsWithHttpInfo(warehouseServiceTypeId);
        }

        /// <summary>
        /// Get the tags for a warehouseServiceType. Get all existing warehouseServiceType tags.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseServiceTypeId">Id of the warehouseServiceType to get tags for</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GetWarehouseServiceTypeTagsWithHttpInfo (int? warehouseServiceTypeId)
        {
            // verify the required parameter 'warehouseServiceTypeId' is set
            if (warehouseServiceTypeId == null)
                throw new ApiException(400, "Missing required parameter 'warehouseServiceTypeId' when calling WarehouseServiceTypeApi->GetWarehouseServiceTypeTags");

            var localVarPath = "/beta/warehouseServiceType/{warehouseServiceTypeId}/tag";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (warehouseServiceTypeId != null) localVarPathParams.Add("warehouseServiceTypeId", Configuration.ApiClient.ParameterToString(warehouseServiceTypeId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWarehouseServiceTypeTags", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get the tags for a warehouseServiceType. Get all existing warehouseServiceType tags.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseServiceTypeId">Id of the warehouseServiceType to get tags for</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetWarehouseServiceTypeTagsAsync (int? warehouseServiceTypeId)
        {
             await GetWarehouseServiceTypeTagsAsyncWithHttpInfo(warehouseServiceTypeId);

        }

        /// <summary>
        /// Get the tags for a warehouseServiceType. Get all existing warehouseServiceType tags.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseServiceTypeId">Id of the warehouseServiceType to get tags for</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetWarehouseServiceTypeTagsAsyncWithHttpInfo (int? warehouseServiceTypeId)
        {
            // verify the required parameter 'warehouseServiceTypeId' is set
            if (warehouseServiceTypeId == null)
                throw new ApiException(400, "Missing required parameter 'warehouseServiceTypeId' when calling WarehouseServiceTypeApi->GetWarehouseServiceTypeTags");

            var localVarPath = "/beta/warehouseServiceType/{warehouseServiceTypeId}/tag";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (warehouseServiceTypeId != null) localVarPathParams.Add("warehouseServiceTypeId", Configuration.ApiClient.ParameterToString(warehouseServiceTypeId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWarehouseServiceTypeTags", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update a warehouseServiceType Updates an existing warehouseServiceType using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">WarehouseServiceType to be updated.</param>
        /// <returns></returns>
        public void UpdateWarehouseServiceType (WarehouseServiceType body)
        {
             UpdateWarehouseServiceTypeWithHttpInfo(body);
        }

        /// <summary>
        /// Update a warehouseServiceType Updates an existing warehouseServiceType using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">WarehouseServiceType to be updated.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateWarehouseServiceTypeWithHttpInfo (WarehouseServiceType body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling WarehouseServiceTypeApi->UpdateWarehouseServiceType");

            var localVarPath = "/beta/warehouseServiceType";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateWarehouseServiceType", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update a warehouseServiceType Updates an existing warehouseServiceType using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">WarehouseServiceType to be updated.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateWarehouseServiceTypeAsync (WarehouseServiceType body)
        {
             await UpdateWarehouseServiceTypeAsyncWithHttpInfo(body);

        }

        /// <summary>
        /// Update a warehouseServiceType Updates an existing warehouseServiceType using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">WarehouseServiceType to be updated.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateWarehouseServiceTypeAsyncWithHttpInfo (WarehouseServiceType body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling WarehouseServiceTypeApi->UpdateWarehouseServiceType");

            var localVarPath = "/beta/warehouseServiceType";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateWarehouseServiceType", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update a warehouseServiceType custom fields Updates an existing warehouseServiceType custom fields using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">WarehouseServiceType to be updated.</param>
        /// <returns></returns>
        public void UpdateWarehouseServiceTypeCustomFields (WarehouseServiceType body)
        {
             UpdateWarehouseServiceTypeCustomFieldsWithHttpInfo(body);
        }

        /// <summary>
        /// Update a warehouseServiceType custom fields Updates an existing warehouseServiceType custom fields using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">WarehouseServiceType to be updated.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateWarehouseServiceTypeCustomFieldsWithHttpInfo (WarehouseServiceType body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling WarehouseServiceTypeApi->UpdateWarehouseServiceTypeCustomFields");

            var localVarPath = "/beta/warehouseServiceType/customFields";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateWarehouseServiceTypeCustomFields", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update a warehouseServiceType custom fields Updates an existing warehouseServiceType custom fields using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">WarehouseServiceType to be updated.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateWarehouseServiceTypeCustomFieldsAsync (WarehouseServiceType body)
        {
             await UpdateWarehouseServiceTypeCustomFieldsAsyncWithHttpInfo(body);

        }

        /// <summary>
        /// Update a warehouseServiceType custom fields Updates an existing warehouseServiceType custom fields using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">WarehouseServiceType to be updated.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateWarehouseServiceTypeCustomFieldsAsyncWithHttpInfo (WarehouseServiceType body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling WarehouseServiceTypeApi->UpdateWarehouseServiceTypeCustomFields");

            var localVarPath = "/beta/warehouseServiceType/customFields";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateWarehouseServiceTypeCustomFields", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

    }
}
