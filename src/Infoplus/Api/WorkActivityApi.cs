/* 
 * Infoplus API
 *
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Infoplus.Client;
using Infoplus.Model;

namespace Infoplus.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IWorkActivityApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create a workActivity
        /// </summary>
        /// <remarks>
        /// Inserts a new workActivity using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">WorkActivity to be inserted.</param>
        /// <returns>WorkActivity</returns>
        WorkActivity AddWorkActivity (WorkActivity body);

        /// <summary>
        /// Create a workActivity
        /// </summary>
        /// <remarks>
        /// Inserts a new workActivity using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">WorkActivity to be inserted.</param>
        /// <returns>ApiResponse of WorkActivity</returns>
        ApiResponse<WorkActivity> AddWorkActivityWithHttpInfo (WorkActivity body);
        /// <summary>
        /// Add new audit for a workActivity
        /// </summary>
        /// <remarks>
        /// Adds an audit to an existing workActivity.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workActivityId">Id of the workActivity to add an audit to</param>
        /// <param name="workActivityAudit">The audit to add</param>
        /// <returns></returns>
        void AddWorkActivityAudit (int? workActivityId, string workActivityAudit);

        /// <summary>
        /// Add new audit for a workActivity
        /// </summary>
        /// <remarks>
        /// Adds an audit to an existing workActivity.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workActivityId">Id of the workActivity to add an audit to</param>
        /// <param name="workActivityAudit">The audit to add</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddWorkActivityAuditWithHttpInfo (int? workActivityId, string workActivityAudit);
        /// <summary>
        /// Attach a file to a workActivity
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing workActivity.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workActivityId">Id of the workActivity to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns></returns>
        void AddWorkActivityFile (int? workActivityId, string fileName);

        /// <summary>
        /// Attach a file to a workActivity
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing workActivity.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workActivityId">Id of the workActivity to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddWorkActivityFileWithHttpInfo (int? workActivityId, string fileName);
        /// <summary>
        /// Attach a file to a workActivity by URL.
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing workActivity by URL.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="workActivityId">Id of the workActivity to add an file to</param>
        /// <returns></returns>
        void AddWorkActivityFileByURL (RecordFile body, int? workActivityId);

        /// <summary>
        /// Attach a file to a workActivity by URL.
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing workActivity by URL.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="workActivityId">Id of the workActivity to add an file to</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddWorkActivityFileByURLWithHttpInfo (RecordFile body, int? workActivityId);
        /// <summary>
        /// Add new tags for a workActivity.
        /// </summary>
        /// <remarks>
        /// Adds a tag to an existing workActivity.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workActivityId">Id of the workActivity to add a tag to</param>
        /// <param name="workActivityTag">The tag to add</param>
        /// <returns></returns>
        void AddWorkActivityTag (int? workActivityId, string workActivityTag);

        /// <summary>
        /// Add new tags for a workActivity.
        /// </summary>
        /// <remarks>
        /// Adds a tag to an existing workActivity.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workActivityId">Id of the workActivity to add a tag to</param>
        /// <param name="workActivityTag">The tag to add</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddWorkActivityTagWithHttpInfo (int? workActivityId, string workActivityTag);
        /// <summary>
        /// Delete a workActivity
        /// </summary>
        /// <remarks>
        /// Deletes the workActivity identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workActivityId">Id of the workActivity to be deleted.</param>
        /// <returns></returns>
        void DeleteWorkActivity (int? workActivityId);

        /// <summary>
        /// Delete a workActivity
        /// </summary>
        /// <remarks>
        /// Deletes the workActivity identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workActivityId">Id of the workActivity to be deleted.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteWorkActivityWithHttpInfo (int? workActivityId);
        /// <summary>
        /// Delete a file for a workActivity.
        /// </summary>
        /// <remarks>
        /// Deletes an existing workActivity file using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workActivityId">Id of the workActivity to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns></returns>
        void DeleteWorkActivityFile (int? workActivityId, int? fileId);

        /// <summary>
        /// Delete a file for a workActivity.
        /// </summary>
        /// <remarks>
        /// Deletes an existing workActivity file using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workActivityId">Id of the workActivity to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteWorkActivityFileWithHttpInfo (int? workActivityId, int? fileId);
        /// <summary>
        /// Delete a tag for a workActivity.
        /// </summary>
        /// <remarks>
        /// Deletes an existing workActivity tag using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workActivityId">Id of the workActivity to remove tag from</param>
        /// <param name="workActivityTag">The tag to delete</param>
        /// <returns></returns>
        void DeleteWorkActivityTag (int? workActivityId, string workActivityTag);

        /// <summary>
        /// Delete a tag for a workActivity.
        /// </summary>
        /// <remarks>
        /// Deletes an existing workActivity tag using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workActivityId">Id of the workActivity to remove tag from</param>
        /// <param name="workActivityTag">The tag to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteWorkActivityTagWithHttpInfo (int? workActivityId, string workActivityTag);
        /// <summary>
        /// Get a duplicated a workActivity by id
        /// </summary>
        /// <remarks>
        /// Returns a duplicated workActivity identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workActivityId">Id of the workActivity to be duplicated.</param>
        /// <returns>WorkActivity</returns>
        WorkActivity GetDuplicateWorkActivityById (int? workActivityId);

        /// <summary>
        /// Get a duplicated a workActivity by id
        /// </summary>
        /// <remarks>
        /// Returns a duplicated workActivity identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workActivityId">Id of the workActivity to be duplicated.</param>
        /// <returns>ApiResponse of WorkActivity</returns>
        ApiResponse<WorkActivity> GetDuplicateWorkActivityByIdWithHttpInfo (int? workActivityId);
        /// <summary>
        /// Search workActivitys by filter
        /// </summary>
        /// <remarks>
        /// Returns the list of workActivitys that match the given filter.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>List&lt;WorkActivity&gt;</returns>
        List<WorkActivity> GetWorkActivityByFilter (string filter = null, int? page = null, int? limit = null, string sort = null);

        /// <summary>
        /// Search workActivitys by filter
        /// </summary>
        /// <remarks>
        /// Returns the list of workActivitys that match the given filter.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>ApiResponse of List&lt;WorkActivity&gt;</returns>
        ApiResponse<List<WorkActivity>> GetWorkActivityByFilterWithHttpInfo (string filter = null, int? page = null, int? limit = null, string sort = null);
        /// <summary>
        /// Get a workActivity by id
        /// </summary>
        /// <remarks>
        /// Returns the workActivity identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workActivityId">Id of the workActivity to be returned.</param>
        /// <returns>WorkActivity</returns>
        WorkActivity GetWorkActivityById (int? workActivityId);

        /// <summary>
        /// Get a workActivity by id
        /// </summary>
        /// <remarks>
        /// Returns the workActivity identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workActivityId">Id of the workActivity to be returned.</param>
        /// <returns>ApiResponse of WorkActivity</returns>
        ApiResponse<WorkActivity> GetWorkActivityByIdWithHttpInfo (int? workActivityId);
        /// <summary>
        /// Get the files for a workActivity.
        /// </summary>
        /// <remarks>
        /// Get all existing workActivity files.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workActivityId">Id of the workActivity to get files for</param>
        /// <returns></returns>
        void GetWorkActivityFiles (int? workActivityId);

        /// <summary>
        /// Get the files for a workActivity.
        /// </summary>
        /// <remarks>
        /// Get all existing workActivity files.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workActivityId">Id of the workActivity to get files for</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetWorkActivityFilesWithHttpInfo (int? workActivityId);
        /// <summary>
        /// Get the tags for a workActivity.
        /// </summary>
        /// <remarks>
        /// Get all existing workActivity tags.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workActivityId">Id of the workActivity to get tags for</param>
        /// <returns></returns>
        void GetWorkActivityTags (int? workActivityId);

        /// <summary>
        /// Get the tags for a workActivity.
        /// </summary>
        /// <remarks>
        /// Get all existing workActivity tags.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workActivityId">Id of the workActivity to get tags for</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetWorkActivityTagsWithHttpInfo (int? workActivityId);
        /// <summary>
        /// Update a workActivity
        /// </summary>
        /// <remarks>
        /// Updates an existing workActivity using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">WorkActivity to be updated.</param>
        /// <returns></returns>
        void UpdateWorkActivity (WorkActivity body);

        /// <summary>
        /// Update a workActivity
        /// </summary>
        /// <remarks>
        /// Updates an existing workActivity using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">WorkActivity to be updated.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateWorkActivityWithHttpInfo (WorkActivity body);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create a workActivity
        /// </summary>
        /// <remarks>
        /// Inserts a new workActivity using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">WorkActivity to be inserted.</param>
        /// <returns>Task of WorkActivity</returns>
        System.Threading.Tasks.Task<WorkActivity> AddWorkActivityAsync (WorkActivity body);

        /// <summary>
        /// Create a workActivity
        /// </summary>
        /// <remarks>
        /// Inserts a new workActivity using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">WorkActivity to be inserted.</param>
        /// <returns>Task of ApiResponse (WorkActivity)</returns>
        System.Threading.Tasks.Task<ApiResponse<WorkActivity>> AddWorkActivityAsyncWithHttpInfo (WorkActivity body);
        /// <summary>
        /// Add new audit for a workActivity
        /// </summary>
        /// <remarks>
        /// Adds an audit to an existing workActivity.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workActivityId">Id of the workActivity to add an audit to</param>
        /// <param name="workActivityAudit">The audit to add</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddWorkActivityAuditAsync (int? workActivityId, string workActivityAudit);

        /// <summary>
        /// Add new audit for a workActivity
        /// </summary>
        /// <remarks>
        /// Adds an audit to an existing workActivity.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workActivityId">Id of the workActivity to add an audit to</param>
        /// <param name="workActivityAudit">The audit to add</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddWorkActivityAuditAsyncWithHttpInfo (int? workActivityId, string workActivityAudit);
        /// <summary>
        /// Attach a file to a workActivity
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing workActivity.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workActivityId">Id of the workActivity to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddWorkActivityFileAsync (int? workActivityId, string fileName);

        /// <summary>
        /// Attach a file to a workActivity
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing workActivity.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workActivityId">Id of the workActivity to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddWorkActivityFileAsyncWithHttpInfo (int? workActivityId, string fileName);
        /// <summary>
        /// Attach a file to a workActivity by URL.
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing workActivity by URL.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="workActivityId">Id of the workActivity to add an file to</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddWorkActivityFileByURLAsync (RecordFile body, int? workActivityId);

        /// <summary>
        /// Attach a file to a workActivity by URL.
        /// </summary>
        /// <remarks>
        /// Adds a file to an existing workActivity by URL.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="workActivityId">Id of the workActivity to add an file to</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddWorkActivityFileByURLAsyncWithHttpInfo (RecordFile body, int? workActivityId);
        /// <summary>
        /// Add new tags for a workActivity.
        /// </summary>
        /// <remarks>
        /// Adds a tag to an existing workActivity.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workActivityId">Id of the workActivity to add a tag to</param>
        /// <param name="workActivityTag">The tag to add</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddWorkActivityTagAsync (int? workActivityId, string workActivityTag);

        /// <summary>
        /// Add new tags for a workActivity.
        /// </summary>
        /// <remarks>
        /// Adds a tag to an existing workActivity.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workActivityId">Id of the workActivity to add a tag to</param>
        /// <param name="workActivityTag">The tag to add</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddWorkActivityTagAsyncWithHttpInfo (int? workActivityId, string workActivityTag);
        /// <summary>
        /// Delete a workActivity
        /// </summary>
        /// <remarks>
        /// Deletes the workActivity identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workActivityId">Id of the workActivity to be deleted.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteWorkActivityAsync (int? workActivityId);

        /// <summary>
        /// Delete a workActivity
        /// </summary>
        /// <remarks>
        /// Deletes the workActivity identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workActivityId">Id of the workActivity to be deleted.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteWorkActivityAsyncWithHttpInfo (int? workActivityId);
        /// <summary>
        /// Delete a file for a workActivity.
        /// </summary>
        /// <remarks>
        /// Deletes an existing workActivity file using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workActivityId">Id of the workActivity to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteWorkActivityFileAsync (int? workActivityId, int? fileId);

        /// <summary>
        /// Delete a file for a workActivity.
        /// </summary>
        /// <remarks>
        /// Deletes an existing workActivity file using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workActivityId">Id of the workActivity to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteWorkActivityFileAsyncWithHttpInfo (int? workActivityId, int? fileId);
        /// <summary>
        /// Delete a tag for a workActivity.
        /// </summary>
        /// <remarks>
        /// Deletes an existing workActivity tag using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workActivityId">Id of the workActivity to remove tag from</param>
        /// <param name="workActivityTag">The tag to delete</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteWorkActivityTagAsync (int? workActivityId, string workActivityTag);

        /// <summary>
        /// Delete a tag for a workActivity.
        /// </summary>
        /// <remarks>
        /// Deletes an existing workActivity tag using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workActivityId">Id of the workActivity to remove tag from</param>
        /// <param name="workActivityTag">The tag to delete</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteWorkActivityTagAsyncWithHttpInfo (int? workActivityId, string workActivityTag);
        /// <summary>
        /// Get a duplicated a workActivity by id
        /// </summary>
        /// <remarks>
        /// Returns a duplicated workActivity identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workActivityId">Id of the workActivity to be duplicated.</param>
        /// <returns>Task of WorkActivity</returns>
        System.Threading.Tasks.Task<WorkActivity> GetDuplicateWorkActivityByIdAsync (int? workActivityId);

        /// <summary>
        /// Get a duplicated a workActivity by id
        /// </summary>
        /// <remarks>
        /// Returns a duplicated workActivity identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workActivityId">Id of the workActivity to be duplicated.</param>
        /// <returns>Task of ApiResponse (WorkActivity)</returns>
        System.Threading.Tasks.Task<ApiResponse<WorkActivity>> GetDuplicateWorkActivityByIdAsyncWithHttpInfo (int? workActivityId);
        /// <summary>
        /// Search workActivitys by filter
        /// </summary>
        /// <remarks>
        /// Returns the list of workActivitys that match the given filter.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>Task of List&lt;WorkActivity&gt;</returns>
        System.Threading.Tasks.Task<List<WorkActivity>> GetWorkActivityByFilterAsync (string filter = null, int? page = null, int? limit = null, string sort = null);

        /// <summary>
        /// Search workActivitys by filter
        /// </summary>
        /// <remarks>
        /// Returns the list of workActivitys that match the given filter.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;WorkActivity&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<WorkActivity>>> GetWorkActivityByFilterAsyncWithHttpInfo (string filter = null, int? page = null, int? limit = null, string sort = null);
        /// <summary>
        /// Get a workActivity by id
        /// </summary>
        /// <remarks>
        /// Returns the workActivity identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workActivityId">Id of the workActivity to be returned.</param>
        /// <returns>Task of WorkActivity</returns>
        System.Threading.Tasks.Task<WorkActivity> GetWorkActivityByIdAsync (int? workActivityId);

        /// <summary>
        /// Get a workActivity by id
        /// </summary>
        /// <remarks>
        /// Returns the workActivity identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workActivityId">Id of the workActivity to be returned.</param>
        /// <returns>Task of ApiResponse (WorkActivity)</returns>
        System.Threading.Tasks.Task<ApiResponse<WorkActivity>> GetWorkActivityByIdAsyncWithHttpInfo (int? workActivityId);
        /// <summary>
        /// Get the files for a workActivity.
        /// </summary>
        /// <remarks>
        /// Get all existing workActivity files.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workActivityId">Id of the workActivity to get files for</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetWorkActivityFilesAsync (int? workActivityId);

        /// <summary>
        /// Get the files for a workActivity.
        /// </summary>
        /// <remarks>
        /// Get all existing workActivity files.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workActivityId">Id of the workActivity to get files for</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetWorkActivityFilesAsyncWithHttpInfo (int? workActivityId);
        /// <summary>
        /// Get the tags for a workActivity.
        /// </summary>
        /// <remarks>
        /// Get all existing workActivity tags.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workActivityId">Id of the workActivity to get tags for</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetWorkActivityTagsAsync (int? workActivityId);

        /// <summary>
        /// Get the tags for a workActivity.
        /// </summary>
        /// <remarks>
        /// Get all existing workActivity tags.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workActivityId">Id of the workActivity to get tags for</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetWorkActivityTagsAsyncWithHttpInfo (int? workActivityId);
        /// <summary>
        /// Update a workActivity
        /// </summary>
        /// <remarks>
        /// Updates an existing workActivity using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">WorkActivity to be updated.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateWorkActivityAsync (WorkActivity body);

        /// <summary>
        /// Update a workActivity
        /// </summary>
        /// <remarks>
        /// Updates an existing workActivity using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">WorkActivity to be updated.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateWorkActivityAsyncWithHttpInfo (WorkActivity body);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class WorkActivityApi : IWorkActivityApi
    {
        private Infoplus.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="WorkActivityApi"/> class.
        /// </summary>
        /// <returns></returns>
        public WorkActivityApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = Infoplus.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WorkActivityApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public WorkActivityApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Infoplus.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Infoplus.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create a workActivity Inserts a new workActivity using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">WorkActivity to be inserted.</param>
        /// <returns>WorkActivity</returns>
        public WorkActivity AddWorkActivity (WorkActivity body)
        {
             ApiResponse<WorkActivity> localVarResponse = AddWorkActivityWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a workActivity Inserts a new workActivity using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">WorkActivity to be inserted.</param>
        /// <returns>ApiResponse of WorkActivity</returns>
        public ApiResponse< WorkActivity > AddWorkActivityWithHttpInfo (WorkActivity body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling WorkActivityApi->AddWorkActivity");

            var localVarPath = "/beta/workActivity";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddWorkActivity", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkActivity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WorkActivity) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorkActivity)));
        }

        /// <summary>
        /// Create a workActivity Inserts a new workActivity using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">WorkActivity to be inserted.</param>
        /// <returns>Task of WorkActivity</returns>
        public async System.Threading.Tasks.Task<WorkActivity> AddWorkActivityAsync (WorkActivity body)
        {
             ApiResponse<WorkActivity> localVarResponse = await AddWorkActivityAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a workActivity Inserts a new workActivity using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">WorkActivity to be inserted.</param>
        /// <returns>Task of ApiResponse (WorkActivity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WorkActivity>> AddWorkActivityAsyncWithHttpInfo (WorkActivity body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling WorkActivityApi->AddWorkActivity");

            var localVarPath = "/beta/workActivity";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddWorkActivity", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkActivity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WorkActivity) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorkActivity)));
        }

        /// <summary>
        /// Add new audit for a workActivity Adds an audit to an existing workActivity.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workActivityId">Id of the workActivity to add an audit to</param>
        /// <param name="workActivityAudit">The audit to add</param>
        /// <returns></returns>
        public void AddWorkActivityAudit (int? workActivityId, string workActivityAudit)
        {
             AddWorkActivityAuditWithHttpInfo(workActivityId, workActivityAudit);
        }

        /// <summary>
        /// Add new audit for a workActivity Adds an audit to an existing workActivity.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workActivityId">Id of the workActivity to add an audit to</param>
        /// <param name="workActivityAudit">The audit to add</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AddWorkActivityAuditWithHttpInfo (int? workActivityId, string workActivityAudit)
        {
            // verify the required parameter 'workActivityId' is set
            if (workActivityId == null)
                throw new ApiException(400, "Missing required parameter 'workActivityId' when calling WorkActivityApi->AddWorkActivityAudit");
            // verify the required parameter 'workActivityAudit' is set
            if (workActivityAudit == null)
                throw new ApiException(400, "Missing required parameter 'workActivityAudit' when calling WorkActivityApi->AddWorkActivityAudit");

            var localVarPath = "/beta/workActivity/{workActivityId}/audit/{workActivityAudit}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workActivityId != null) localVarPathParams.Add("workActivityId", Configuration.ApiClient.ParameterToString(workActivityId)); // path parameter
            if (workActivityAudit != null) localVarPathParams.Add("workActivityAudit", Configuration.ApiClient.ParameterToString(workActivityAudit)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddWorkActivityAudit", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Add new audit for a workActivity Adds an audit to an existing workActivity.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workActivityId">Id of the workActivity to add an audit to</param>
        /// <param name="workActivityAudit">The audit to add</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddWorkActivityAuditAsync (int? workActivityId, string workActivityAudit)
        {
             await AddWorkActivityAuditAsyncWithHttpInfo(workActivityId, workActivityAudit);

        }

        /// <summary>
        /// Add new audit for a workActivity Adds an audit to an existing workActivity.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workActivityId">Id of the workActivity to add an audit to</param>
        /// <param name="workActivityAudit">The audit to add</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddWorkActivityAuditAsyncWithHttpInfo (int? workActivityId, string workActivityAudit)
        {
            // verify the required parameter 'workActivityId' is set
            if (workActivityId == null)
                throw new ApiException(400, "Missing required parameter 'workActivityId' when calling WorkActivityApi->AddWorkActivityAudit");
            // verify the required parameter 'workActivityAudit' is set
            if (workActivityAudit == null)
                throw new ApiException(400, "Missing required parameter 'workActivityAudit' when calling WorkActivityApi->AddWorkActivityAudit");

            var localVarPath = "/beta/workActivity/{workActivityId}/audit/{workActivityAudit}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workActivityId != null) localVarPathParams.Add("workActivityId", Configuration.ApiClient.ParameterToString(workActivityId)); // path parameter
            if (workActivityAudit != null) localVarPathParams.Add("workActivityAudit", Configuration.ApiClient.ParameterToString(workActivityAudit)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddWorkActivityAudit", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Attach a file to a workActivity Adds a file to an existing workActivity.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workActivityId">Id of the workActivity to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns></returns>
        public void AddWorkActivityFile (int? workActivityId, string fileName)
        {
             AddWorkActivityFileWithHttpInfo(workActivityId, fileName);
        }

        /// <summary>
        /// Attach a file to a workActivity Adds a file to an existing workActivity.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workActivityId">Id of the workActivity to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AddWorkActivityFileWithHttpInfo (int? workActivityId, string fileName)
        {
            // verify the required parameter 'workActivityId' is set
            if (workActivityId == null)
                throw new ApiException(400, "Missing required parameter 'workActivityId' when calling WorkActivityApi->AddWorkActivityFile");
            // verify the required parameter 'fileName' is set
            if (fileName == null)
                throw new ApiException(400, "Missing required parameter 'fileName' when calling WorkActivityApi->AddWorkActivityFile");

            var localVarPath = "/beta/workActivity/{workActivityId}/file/{fileName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workActivityId != null) localVarPathParams.Add("workActivityId", Configuration.ApiClient.ParameterToString(workActivityId)); // path parameter
            if (fileName != null) localVarPathParams.Add("fileName", Configuration.ApiClient.ParameterToString(fileName)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddWorkActivityFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Attach a file to a workActivity Adds a file to an existing workActivity.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workActivityId">Id of the workActivity to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddWorkActivityFileAsync (int? workActivityId, string fileName)
        {
             await AddWorkActivityFileAsyncWithHttpInfo(workActivityId, fileName);

        }

        /// <summary>
        /// Attach a file to a workActivity Adds a file to an existing workActivity.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workActivityId">Id of the workActivity to add a file to</param>
        /// <param name="fileName">Name of file</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddWorkActivityFileAsyncWithHttpInfo (int? workActivityId, string fileName)
        {
            // verify the required parameter 'workActivityId' is set
            if (workActivityId == null)
                throw new ApiException(400, "Missing required parameter 'workActivityId' when calling WorkActivityApi->AddWorkActivityFile");
            // verify the required parameter 'fileName' is set
            if (fileName == null)
                throw new ApiException(400, "Missing required parameter 'fileName' when calling WorkActivityApi->AddWorkActivityFile");

            var localVarPath = "/beta/workActivity/{workActivityId}/file/{fileName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workActivityId != null) localVarPathParams.Add("workActivityId", Configuration.ApiClient.ParameterToString(workActivityId)); // path parameter
            if (fileName != null) localVarPathParams.Add("fileName", Configuration.ApiClient.ParameterToString(fileName)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddWorkActivityFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Attach a file to a workActivity by URL. Adds a file to an existing workActivity by URL.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="workActivityId">Id of the workActivity to add an file to</param>
        /// <returns></returns>
        public void AddWorkActivityFileByURL (RecordFile body, int? workActivityId)
        {
             AddWorkActivityFileByURLWithHttpInfo(body, workActivityId);
        }

        /// <summary>
        /// Attach a file to a workActivity by URL. Adds a file to an existing workActivity by URL.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="workActivityId">Id of the workActivity to add an file to</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AddWorkActivityFileByURLWithHttpInfo (RecordFile body, int? workActivityId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling WorkActivityApi->AddWorkActivityFileByURL");
            // verify the required parameter 'workActivityId' is set
            if (workActivityId == null)
                throw new ApiException(400, "Missing required parameter 'workActivityId' when calling WorkActivityApi->AddWorkActivityFileByURL");

            var localVarPath = "/beta/workActivity/{workActivityId}/file";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workActivityId != null) localVarPathParams.Add("workActivityId", Configuration.ApiClient.ParameterToString(workActivityId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddWorkActivityFileByURL", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Attach a file to a workActivity by URL. Adds a file to an existing workActivity by URL.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="workActivityId">Id of the workActivity to add an file to</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddWorkActivityFileByURLAsync (RecordFile body, int? workActivityId)
        {
             await AddWorkActivityFileByURLAsyncWithHttpInfo(body, workActivityId);

        }

        /// <summary>
        /// Attach a file to a workActivity by URL. Adds a file to an existing workActivity by URL.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The url and optionly fileName to be used.</param>
        /// <param name="workActivityId">Id of the workActivity to add an file to</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddWorkActivityFileByURLAsyncWithHttpInfo (RecordFile body, int? workActivityId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling WorkActivityApi->AddWorkActivityFileByURL");
            // verify the required parameter 'workActivityId' is set
            if (workActivityId == null)
                throw new ApiException(400, "Missing required parameter 'workActivityId' when calling WorkActivityApi->AddWorkActivityFileByURL");

            var localVarPath = "/beta/workActivity/{workActivityId}/file";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workActivityId != null) localVarPathParams.Add("workActivityId", Configuration.ApiClient.ParameterToString(workActivityId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddWorkActivityFileByURL", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Add new tags for a workActivity. Adds a tag to an existing workActivity.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workActivityId">Id of the workActivity to add a tag to</param>
        /// <param name="workActivityTag">The tag to add</param>
        /// <returns></returns>
        public void AddWorkActivityTag (int? workActivityId, string workActivityTag)
        {
             AddWorkActivityTagWithHttpInfo(workActivityId, workActivityTag);
        }

        /// <summary>
        /// Add new tags for a workActivity. Adds a tag to an existing workActivity.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workActivityId">Id of the workActivity to add a tag to</param>
        /// <param name="workActivityTag">The tag to add</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AddWorkActivityTagWithHttpInfo (int? workActivityId, string workActivityTag)
        {
            // verify the required parameter 'workActivityId' is set
            if (workActivityId == null)
                throw new ApiException(400, "Missing required parameter 'workActivityId' when calling WorkActivityApi->AddWorkActivityTag");
            // verify the required parameter 'workActivityTag' is set
            if (workActivityTag == null)
                throw new ApiException(400, "Missing required parameter 'workActivityTag' when calling WorkActivityApi->AddWorkActivityTag");

            var localVarPath = "/beta/workActivity/{workActivityId}/tag/{workActivityTag}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workActivityId != null) localVarPathParams.Add("workActivityId", Configuration.ApiClient.ParameterToString(workActivityId)); // path parameter
            if (workActivityTag != null) localVarPathParams.Add("workActivityTag", Configuration.ApiClient.ParameterToString(workActivityTag)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddWorkActivityTag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Add new tags for a workActivity. Adds a tag to an existing workActivity.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workActivityId">Id of the workActivity to add a tag to</param>
        /// <param name="workActivityTag">The tag to add</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddWorkActivityTagAsync (int? workActivityId, string workActivityTag)
        {
             await AddWorkActivityTagAsyncWithHttpInfo(workActivityId, workActivityTag);

        }

        /// <summary>
        /// Add new tags for a workActivity. Adds a tag to an existing workActivity.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workActivityId">Id of the workActivity to add a tag to</param>
        /// <param name="workActivityTag">The tag to add</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddWorkActivityTagAsyncWithHttpInfo (int? workActivityId, string workActivityTag)
        {
            // verify the required parameter 'workActivityId' is set
            if (workActivityId == null)
                throw new ApiException(400, "Missing required parameter 'workActivityId' when calling WorkActivityApi->AddWorkActivityTag");
            // verify the required parameter 'workActivityTag' is set
            if (workActivityTag == null)
                throw new ApiException(400, "Missing required parameter 'workActivityTag' when calling WorkActivityApi->AddWorkActivityTag");

            var localVarPath = "/beta/workActivity/{workActivityId}/tag/{workActivityTag}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workActivityId != null) localVarPathParams.Add("workActivityId", Configuration.ApiClient.ParameterToString(workActivityId)); // path parameter
            if (workActivityTag != null) localVarPathParams.Add("workActivityTag", Configuration.ApiClient.ParameterToString(workActivityTag)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddWorkActivityTag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a workActivity Deletes the workActivity identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workActivityId">Id of the workActivity to be deleted.</param>
        /// <returns></returns>
        public void DeleteWorkActivity (int? workActivityId)
        {
             DeleteWorkActivityWithHttpInfo(workActivityId);
        }

        /// <summary>
        /// Delete a workActivity Deletes the workActivity identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workActivityId">Id of the workActivity to be deleted.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteWorkActivityWithHttpInfo (int? workActivityId)
        {
            // verify the required parameter 'workActivityId' is set
            if (workActivityId == null)
                throw new ApiException(400, "Missing required parameter 'workActivityId' when calling WorkActivityApi->DeleteWorkActivity");

            var localVarPath = "/beta/workActivity/{workActivityId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workActivityId != null) localVarPathParams.Add("workActivityId", Configuration.ApiClient.ParameterToString(workActivityId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteWorkActivity", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a workActivity Deletes the workActivity identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workActivityId">Id of the workActivity to be deleted.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteWorkActivityAsync (int? workActivityId)
        {
             await DeleteWorkActivityAsyncWithHttpInfo(workActivityId);

        }

        /// <summary>
        /// Delete a workActivity Deletes the workActivity identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workActivityId">Id of the workActivity to be deleted.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteWorkActivityAsyncWithHttpInfo (int? workActivityId)
        {
            // verify the required parameter 'workActivityId' is set
            if (workActivityId == null)
                throw new ApiException(400, "Missing required parameter 'workActivityId' when calling WorkActivityApi->DeleteWorkActivity");

            var localVarPath = "/beta/workActivity/{workActivityId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workActivityId != null) localVarPathParams.Add("workActivityId", Configuration.ApiClient.ParameterToString(workActivityId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteWorkActivity", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a file for a workActivity. Deletes an existing workActivity file using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workActivityId">Id of the workActivity to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns></returns>
        public void DeleteWorkActivityFile (int? workActivityId, int? fileId)
        {
             DeleteWorkActivityFileWithHttpInfo(workActivityId, fileId);
        }

        /// <summary>
        /// Delete a file for a workActivity. Deletes an existing workActivity file using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workActivityId">Id of the workActivity to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteWorkActivityFileWithHttpInfo (int? workActivityId, int? fileId)
        {
            // verify the required parameter 'workActivityId' is set
            if (workActivityId == null)
                throw new ApiException(400, "Missing required parameter 'workActivityId' when calling WorkActivityApi->DeleteWorkActivityFile");
            // verify the required parameter 'fileId' is set
            if (fileId == null)
                throw new ApiException(400, "Missing required parameter 'fileId' when calling WorkActivityApi->DeleteWorkActivityFile");

            var localVarPath = "/beta/workActivity/{workActivityId}/file/{fileId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workActivityId != null) localVarPathParams.Add("workActivityId", Configuration.ApiClient.ParameterToString(workActivityId)); // path parameter
            if (fileId != null) localVarPathParams.Add("fileId", Configuration.ApiClient.ParameterToString(fileId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteWorkActivityFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a file for a workActivity. Deletes an existing workActivity file using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workActivityId">Id of the workActivity to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteWorkActivityFileAsync (int? workActivityId, int? fileId)
        {
             await DeleteWorkActivityFileAsyncWithHttpInfo(workActivityId, fileId);

        }

        /// <summary>
        /// Delete a file for a workActivity. Deletes an existing workActivity file using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workActivityId">Id of the workActivity to remove file from</param>
        /// <param name="fileId">Id of the file to delete</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteWorkActivityFileAsyncWithHttpInfo (int? workActivityId, int? fileId)
        {
            // verify the required parameter 'workActivityId' is set
            if (workActivityId == null)
                throw new ApiException(400, "Missing required parameter 'workActivityId' when calling WorkActivityApi->DeleteWorkActivityFile");
            // verify the required parameter 'fileId' is set
            if (fileId == null)
                throw new ApiException(400, "Missing required parameter 'fileId' when calling WorkActivityApi->DeleteWorkActivityFile");

            var localVarPath = "/beta/workActivity/{workActivityId}/file/{fileId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workActivityId != null) localVarPathParams.Add("workActivityId", Configuration.ApiClient.ParameterToString(workActivityId)); // path parameter
            if (fileId != null) localVarPathParams.Add("fileId", Configuration.ApiClient.ParameterToString(fileId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteWorkActivityFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a tag for a workActivity. Deletes an existing workActivity tag using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workActivityId">Id of the workActivity to remove tag from</param>
        /// <param name="workActivityTag">The tag to delete</param>
        /// <returns></returns>
        public void DeleteWorkActivityTag (int? workActivityId, string workActivityTag)
        {
             DeleteWorkActivityTagWithHttpInfo(workActivityId, workActivityTag);
        }

        /// <summary>
        /// Delete a tag for a workActivity. Deletes an existing workActivity tag using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workActivityId">Id of the workActivity to remove tag from</param>
        /// <param name="workActivityTag">The tag to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteWorkActivityTagWithHttpInfo (int? workActivityId, string workActivityTag)
        {
            // verify the required parameter 'workActivityId' is set
            if (workActivityId == null)
                throw new ApiException(400, "Missing required parameter 'workActivityId' when calling WorkActivityApi->DeleteWorkActivityTag");
            // verify the required parameter 'workActivityTag' is set
            if (workActivityTag == null)
                throw new ApiException(400, "Missing required parameter 'workActivityTag' when calling WorkActivityApi->DeleteWorkActivityTag");

            var localVarPath = "/beta/workActivity/{workActivityId}/tag/{workActivityTag}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workActivityId != null) localVarPathParams.Add("workActivityId", Configuration.ApiClient.ParameterToString(workActivityId)); // path parameter
            if (workActivityTag != null) localVarPathParams.Add("workActivityTag", Configuration.ApiClient.ParameterToString(workActivityTag)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteWorkActivityTag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a tag for a workActivity. Deletes an existing workActivity tag using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workActivityId">Id of the workActivity to remove tag from</param>
        /// <param name="workActivityTag">The tag to delete</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteWorkActivityTagAsync (int? workActivityId, string workActivityTag)
        {
             await DeleteWorkActivityTagAsyncWithHttpInfo(workActivityId, workActivityTag);

        }

        /// <summary>
        /// Delete a tag for a workActivity. Deletes an existing workActivity tag using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workActivityId">Id of the workActivity to remove tag from</param>
        /// <param name="workActivityTag">The tag to delete</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteWorkActivityTagAsyncWithHttpInfo (int? workActivityId, string workActivityTag)
        {
            // verify the required parameter 'workActivityId' is set
            if (workActivityId == null)
                throw new ApiException(400, "Missing required parameter 'workActivityId' when calling WorkActivityApi->DeleteWorkActivityTag");
            // verify the required parameter 'workActivityTag' is set
            if (workActivityTag == null)
                throw new ApiException(400, "Missing required parameter 'workActivityTag' when calling WorkActivityApi->DeleteWorkActivityTag");

            var localVarPath = "/beta/workActivity/{workActivityId}/tag/{workActivityTag}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workActivityId != null) localVarPathParams.Add("workActivityId", Configuration.ApiClient.ParameterToString(workActivityId)); // path parameter
            if (workActivityTag != null) localVarPathParams.Add("workActivityTag", Configuration.ApiClient.ParameterToString(workActivityTag)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteWorkActivityTag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get a duplicated a workActivity by id Returns a duplicated workActivity identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workActivityId">Id of the workActivity to be duplicated.</param>
        /// <returns>WorkActivity</returns>
        public WorkActivity GetDuplicateWorkActivityById (int? workActivityId)
        {
             ApiResponse<WorkActivity> localVarResponse = GetDuplicateWorkActivityByIdWithHttpInfo(workActivityId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a duplicated a workActivity by id Returns a duplicated workActivity identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workActivityId">Id of the workActivity to be duplicated.</param>
        /// <returns>ApiResponse of WorkActivity</returns>
        public ApiResponse< WorkActivity > GetDuplicateWorkActivityByIdWithHttpInfo (int? workActivityId)
        {
            // verify the required parameter 'workActivityId' is set
            if (workActivityId == null)
                throw new ApiException(400, "Missing required parameter 'workActivityId' when calling WorkActivityApi->GetDuplicateWorkActivityById");

            var localVarPath = "/beta/workActivity/duplicate/{workActivityId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workActivityId != null) localVarPathParams.Add("workActivityId", Configuration.ApiClient.ParameterToString(workActivityId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDuplicateWorkActivityById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkActivity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WorkActivity) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorkActivity)));
        }

        /// <summary>
        /// Get a duplicated a workActivity by id Returns a duplicated workActivity identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workActivityId">Id of the workActivity to be duplicated.</param>
        /// <returns>Task of WorkActivity</returns>
        public async System.Threading.Tasks.Task<WorkActivity> GetDuplicateWorkActivityByIdAsync (int? workActivityId)
        {
             ApiResponse<WorkActivity> localVarResponse = await GetDuplicateWorkActivityByIdAsyncWithHttpInfo(workActivityId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a duplicated a workActivity by id Returns a duplicated workActivity identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workActivityId">Id of the workActivity to be duplicated.</param>
        /// <returns>Task of ApiResponse (WorkActivity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WorkActivity>> GetDuplicateWorkActivityByIdAsyncWithHttpInfo (int? workActivityId)
        {
            // verify the required parameter 'workActivityId' is set
            if (workActivityId == null)
                throw new ApiException(400, "Missing required parameter 'workActivityId' when calling WorkActivityApi->GetDuplicateWorkActivityById");

            var localVarPath = "/beta/workActivity/duplicate/{workActivityId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workActivityId != null) localVarPathParams.Add("workActivityId", Configuration.ApiClient.ParameterToString(workActivityId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDuplicateWorkActivityById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkActivity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WorkActivity) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorkActivity)));
        }

        /// <summary>
        /// Search workActivitys by filter Returns the list of workActivitys that match the given filter.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>List&lt;WorkActivity&gt;</returns>
        public List<WorkActivity> GetWorkActivityByFilter (string filter = null, int? page = null, int? limit = null, string sort = null)
        {
             ApiResponse<List<WorkActivity>> localVarResponse = GetWorkActivityByFilterWithHttpInfo(filter, page, limit, sort);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Search workActivitys by filter Returns the list of workActivitys that match the given filter.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>ApiResponse of List&lt;WorkActivity&gt;</returns>
        public ApiResponse< List<WorkActivity> > GetWorkActivityByFilterWithHttpInfo (string filter = null, int? page = null, int? limit = null, string sort = null)
        {

            var localVarPath = "/beta/workActivity/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (filter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (page != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWorkActivityByFilter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<WorkActivity>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<WorkActivity>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<WorkActivity>)));
        }

        /// <summary>
        /// Search workActivitys by filter Returns the list of workActivitys that match the given filter.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>Task of List&lt;WorkActivity&gt;</returns>
        public async System.Threading.Tasks.Task<List<WorkActivity>> GetWorkActivityByFilterAsync (string filter = null, int? page = null, int? limit = null, string sort = null)
        {
             ApiResponse<List<WorkActivity>> localVarResponse = await GetWorkActivityByFilterAsyncWithHttpInfo(filter, page, limit, sort);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Search workActivitys by filter Returns the list of workActivitys that match the given filter.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;WorkActivity&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<WorkActivity>>> GetWorkActivityByFilterAsyncWithHttpInfo (string filter = null, int? page = null, int? limit = null, string sort = null)
        {

            var localVarPath = "/beta/workActivity/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (filter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (page != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWorkActivityByFilter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<WorkActivity>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<WorkActivity>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<WorkActivity>)));
        }

        /// <summary>
        /// Get a workActivity by id Returns the workActivity identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workActivityId">Id of the workActivity to be returned.</param>
        /// <returns>WorkActivity</returns>
        public WorkActivity GetWorkActivityById (int? workActivityId)
        {
             ApiResponse<WorkActivity> localVarResponse = GetWorkActivityByIdWithHttpInfo(workActivityId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a workActivity by id Returns the workActivity identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workActivityId">Id of the workActivity to be returned.</param>
        /// <returns>ApiResponse of WorkActivity</returns>
        public ApiResponse< WorkActivity > GetWorkActivityByIdWithHttpInfo (int? workActivityId)
        {
            // verify the required parameter 'workActivityId' is set
            if (workActivityId == null)
                throw new ApiException(400, "Missing required parameter 'workActivityId' when calling WorkActivityApi->GetWorkActivityById");

            var localVarPath = "/beta/workActivity/{workActivityId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workActivityId != null) localVarPathParams.Add("workActivityId", Configuration.ApiClient.ParameterToString(workActivityId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWorkActivityById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkActivity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WorkActivity) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorkActivity)));
        }

        /// <summary>
        /// Get a workActivity by id Returns the workActivity identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workActivityId">Id of the workActivity to be returned.</param>
        /// <returns>Task of WorkActivity</returns>
        public async System.Threading.Tasks.Task<WorkActivity> GetWorkActivityByIdAsync (int? workActivityId)
        {
             ApiResponse<WorkActivity> localVarResponse = await GetWorkActivityByIdAsyncWithHttpInfo(workActivityId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a workActivity by id Returns the workActivity identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workActivityId">Id of the workActivity to be returned.</param>
        /// <returns>Task of ApiResponse (WorkActivity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WorkActivity>> GetWorkActivityByIdAsyncWithHttpInfo (int? workActivityId)
        {
            // verify the required parameter 'workActivityId' is set
            if (workActivityId == null)
                throw new ApiException(400, "Missing required parameter 'workActivityId' when calling WorkActivityApi->GetWorkActivityById");

            var localVarPath = "/beta/workActivity/{workActivityId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workActivityId != null) localVarPathParams.Add("workActivityId", Configuration.ApiClient.ParameterToString(workActivityId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWorkActivityById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkActivity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WorkActivity) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorkActivity)));
        }

        /// <summary>
        /// Get the files for a workActivity. Get all existing workActivity files.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workActivityId">Id of the workActivity to get files for</param>
        /// <returns></returns>
        public void GetWorkActivityFiles (int? workActivityId)
        {
             GetWorkActivityFilesWithHttpInfo(workActivityId);
        }

        /// <summary>
        /// Get the files for a workActivity. Get all existing workActivity files.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workActivityId">Id of the workActivity to get files for</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GetWorkActivityFilesWithHttpInfo (int? workActivityId)
        {
            // verify the required parameter 'workActivityId' is set
            if (workActivityId == null)
                throw new ApiException(400, "Missing required parameter 'workActivityId' when calling WorkActivityApi->GetWorkActivityFiles");

            var localVarPath = "/beta/workActivity/{workActivityId}/file";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workActivityId != null) localVarPathParams.Add("workActivityId", Configuration.ApiClient.ParameterToString(workActivityId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWorkActivityFiles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get the files for a workActivity. Get all existing workActivity files.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workActivityId">Id of the workActivity to get files for</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetWorkActivityFilesAsync (int? workActivityId)
        {
             await GetWorkActivityFilesAsyncWithHttpInfo(workActivityId);

        }

        /// <summary>
        /// Get the files for a workActivity. Get all existing workActivity files.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workActivityId">Id of the workActivity to get files for</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetWorkActivityFilesAsyncWithHttpInfo (int? workActivityId)
        {
            // verify the required parameter 'workActivityId' is set
            if (workActivityId == null)
                throw new ApiException(400, "Missing required parameter 'workActivityId' when calling WorkActivityApi->GetWorkActivityFiles");

            var localVarPath = "/beta/workActivity/{workActivityId}/file";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workActivityId != null) localVarPathParams.Add("workActivityId", Configuration.ApiClient.ParameterToString(workActivityId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWorkActivityFiles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get the tags for a workActivity. Get all existing workActivity tags.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workActivityId">Id of the workActivity to get tags for</param>
        /// <returns></returns>
        public void GetWorkActivityTags (int? workActivityId)
        {
             GetWorkActivityTagsWithHttpInfo(workActivityId);
        }

        /// <summary>
        /// Get the tags for a workActivity. Get all existing workActivity tags.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workActivityId">Id of the workActivity to get tags for</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GetWorkActivityTagsWithHttpInfo (int? workActivityId)
        {
            // verify the required parameter 'workActivityId' is set
            if (workActivityId == null)
                throw new ApiException(400, "Missing required parameter 'workActivityId' when calling WorkActivityApi->GetWorkActivityTags");

            var localVarPath = "/beta/workActivity/{workActivityId}/tag";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workActivityId != null) localVarPathParams.Add("workActivityId", Configuration.ApiClient.ParameterToString(workActivityId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWorkActivityTags", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get the tags for a workActivity. Get all existing workActivity tags.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workActivityId">Id of the workActivity to get tags for</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetWorkActivityTagsAsync (int? workActivityId)
        {
             await GetWorkActivityTagsAsyncWithHttpInfo(workActivityId);

        }

        /// <summary>
        /// Get the tags for a workActivity. Get all existing workActivity tags.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workActivityId">Id of the workActivity to get tags for</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetWorkActivityTagsAsyncWithHttpInfo (int? workActivityId)
        {
            // verify the required parameter 'workActivityId' is set
            if (workActivityId == null)
                throw new ApiException(400, "Missing required parameter 'workActivityId' when calling WorkActivityApi->GetWorkActivityTags");

            var localVarPath = "/beta/workActivity/{workActivityId}/tag";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workActivityId != null) localVarPathParams.Add("workActivityId", Configuration.ApiClient.ParameterToString(workActivityId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWorkActivityTags", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update a workActivity Updates an existing workActivity using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">WorkActivity to be updated.</param>
        /// <returns></returns>
        public void UpdateWorkActivity (WorkActivity body)
        {
             UpdateWorkActivityWithHttpInfo(body);
        }

        /// <summary>
        /// Update a workActivity Updates an existing workActivity using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">WorkActivity to be updated.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateWorkActivityWithHttpInfo (WorkActivity body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling WorkActivityApi->UpdateWorkActivity");

            var localVarPath = "/beta/workActivity";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateWorkActivity", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update a workActivity Updates an existing workActivity using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">WorkActivity to be updated.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateWorkActivityAsync (WorkActivity body)
        {
             await UpdateWorkActivityAsyncWithHttpInfo(body);

        }

        /// <summary>
        /// Update a workActivity Updates an existing workActivity using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">WorkActivity to be updated.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateWorkActivityAsyncWithHttpInfo (WorkActivity body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling WorkActivityApi->UpdateWorkActivity");

            var localVarPath = "/beta/workActivity";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateWorkActivity", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

    }
}
