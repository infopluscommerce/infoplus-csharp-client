/* 
 * Infoplus API
 *
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Infoplus.Client.SwaggerDateConverter;

namespace Infoplus.Model
{
    /// <summary>
    /// BillOfLadingCarrierInfoLine
    /// </summary>
    [DataContract]
    public partial class BillOfLadingCarrierInfoLine :  IEquatable<BillOfLadingCarrierInfoLine>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BillOfLadingCarrierInfoLine" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected BillOfLadingCarrierInfoLine() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="BillOfLadingCarrierInfoLine" /> class.
        /// </summary>
        /// <param name="SeqNo">SeqNo.</param>
        /// <param name="HuQuantity">HuQuantity.</param>
        /// <param name="HuType">HuType.</param>
        /// <param name="PackageQuantity">PackageQuantity.</param>
        /// <param name="PackageType">PackageType.</param>
        /// <param name="Weight">Weight.</param>
        /// <param name="IsHazardousMaterial">IsHazardousMaterial (default to false).</param>
        /// <param name="CommodityDescription">CommodityDescription (required).</param>
        /// <param name="NfmcNo">NfmcNo.</param>
        /// <param name="CarrierClass">CarrierClass.</param>
        /// <param name="CustomFields">CustomFields.</param>
        public BillOfLadingCarrierInfoLine(int? SeqNo = default(int?), int? HuQuantity = default(int?), string HuType = default(string), int? PackageQuantity = default(int?), string PackageType = default(string), int? Weight = default(int?), bool? IsHazardousMaterial = false, string CommodityDescription = default(string), string NfmcNo = default(string), string CarrierClass = default(string), Dictionary<string, Object> CustomFields = default(Dictionary<string, Object>))
        {
            // to ensure "CommodityDescription" is required (not null)
            if (CommodityDescription == null)
            {
                throw new InvalidDataException("CommodityDescription is a required property for BillOfLadingCarrierInfoLine and cannot be null");
            }
            else
            {
                this.CommodityDescription = CommodityDescription;
            }
            this.SeqNo = SeqNo;
            this.HuQuantity = HuQuantity;
            this.HuType = HuType;
            this.PackageQuantity = PackageQuantity;
            this.PackageType = PackageType;
            this.Weight = Weight;
            // use default value if no "IsHazardousMaterial" provided
            if (IsHazardousMaterial == null)
            {
                this.IsHazardousMaterial = false;
            }
            else
            {
                this.IsHazardousMaterial = IsHazardousMaterial;
            }
            this.NfmcNo = NfmcNo;
            this.CarrierClass = CarrierClass;
            this.CustomFields = CustomFields;
        }
        
        /// <summary>
        /// Gets or Sets SeqNo
        /// </summary>
        [DataMember(Name="seqNo", EmitDefaultValue=false)]
        public int? SeqNo { get; set; }

        /// <summary>
        /// Gets or Sets HuQuantity
        /// </summary>
        [DataMember(Name="huQuantity", EmitDefaultValue=false)]
        public int? HuQuantity { get; set; }

        /// <summary>
        /// Gets or Sets HuType
        /// </summary>
        [DataMember(Name="huType", EmitDefaultValue=false)]
        public string HuType { get; set; }

        /// <summary>
        /// Gets or Sets PackageQuantity
        /// </summary>
        [DataMember(Name="packageQuantity", EmitDefaultValue=false)]
        public int? PackageQuantity { get; set; }

        /// <summary>
        /// Gets or Sets PackageType
        /// </summary>
        [DataMember(Name="packageType", EmitDefaultValue=false)]
        public string PackageType { get; set; }

        /// <summary>
        /// Gets or Sets Weight
        /// </summary>
        [DataMember(Name="weight", EmitDefaultValue=false)]
        public int? Weight { get; set; }

        /// <summary>
        /// Gets or Sets IsHazardousMaterial
        /// </summary>
        [DataMember(Name="isHazardousMaterial", EmitDefaultValue=false)]
        public bool? IsHazardousMaterial { get; set; }

        /// <summary>
        /// Gets or Sets CommodityDescription
        /// </summary>
        [DataMember(Name="commodityDescription", EmitDefaultValue=false)]
        public string CommodityDescription { get; set; }

        /// <summary>
        /// Gets or Sets NfmcNo
        /// </summary>
        [DataMember(Name="nfmcNo", EmitDefaultValue=false)]
        public string NfmcNo { get; set; }

        /// <summary>
        /// Gets or Sets CarrierClass
        /// </summary>
        [DataMember(Name="carrierClass", EmitDefaultValue=false)]
        public string CarrierClass { get; set; }

        /// <summary>
        /// Gets or Sets CustomFields
        /// </summary>
        [DataMember(Name="customFields", EmitDefaultValue=false)]
        public Dictionary<string, Object> CustomFields { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BillOfLadingCarrierInfoLine {\n");
            sb.Append("  SeqNo: ").Append(SeqNo).Append("\n");
            sb.Append("  HuQuantity: ").Append(HuQuantity).Append("\n");
            sb.Append("  HuType: ").Append(HuType).Append("\n");
            sb.Append("  PackageQuantity: ").Append(PackageQuantity).Append("\n");
            sb.Append("  PackageType: ").Append(PackageType).Append("\n");
            sb.Append("  Weight: ").Append(Weight).Append("\n");
            sb.Append("  IsHazardousMaterial: ").Append(IsHazardousMaterial).Append("\n");
            sb.Append("  CommodityDescription: ").Append(CommodityDescription).Append("\n");
            sb.Append("  NfmcNo: ").Append(NfmcNo).Append("\n");
            sb.Append("  CarrierClass: ").Append(CarrierClass).Append("\n");
            sb.Append("  CustomFields: ").Append(CustomFields).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BillOfLadingCarrierInfoLine);
        }

        /// <summary>
        /// Returns true if BillOfLadingCarrierInfoLine instances are equal
        /// </summary>
        /// <param name="input">Instance of BillOfLadingCarrierInfoLine to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BillOfLadingCarrierInfoLine input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.SeqNo == input.SeqNo ||
                    (this.SeqNo != null &&
                    this.SeqNo.Equals(input.SeqNo))
                ) && 
                (
                    this.HuQuantity == input.HuQuantity ||
                    (this.HuQuantity != null &&
                    this.HuQuantity.Equals(input.HuQuantity))
                ) && 
                (
                    this.HuType == input.HuType ||
                    (this.HuType != null &&
                    this.HuType.Equals(input.HuType))
                ) && 
                (
                    this.PackageQuantity == input.PackageQuantity ||
                    (this.PackageQuantity != null &&
                    this.PackageQuantity.Equals(input.PackageQuantity))
                ) && 
                (
                    this.PackageType == input.PackageType ||
                    (this.PackageType != null &&
                    this.PackageType.Equals(input.PackageType))
                ) && 
                (
                    this.Weight == input.Weight ||
                    (this.Weight != null &&
                    this.Weight.Equals(input.Weight))
                ) && 
                (
                    this.IsHazardousMaterial == input.IsHazardousMaterial ||
                    (this.IsHazardousMaterial != null &&
                    this.IsHazardousMaterial.Equals(input.IsHazardousMaterial))
                ) && 
                (
                    this.CommodityDescription == input.CommodityDescription ||
                    (this.CommodityDescription != null &&
                    this.CommodityDescription.Equals(input.CommodityDescription))
                ) && 
                (
                    this.NfmcNo == input.NfmcNo ||
                    (this.NfmcNo != null &&
                    this.NfmcNo.Equals(input.NfmcNo))
                ) && 
                (
                    this.CarrierClass == input.CarrierClass ||
                    (this.CarrierClass != null &&
                    this.CarrierClass.Equals(input.CarrierClass))
                ) && 
                (
                    this.CustomFields == input.CustomFields ||
                    this.CustomFields != null &&
                    this.CustomFields.SequenceEqual(input.CustomFields)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SeqNo != null)
                    hashCode = hashCode * 59 + this.SeqNo.GetHashCode();
                if (this.HuQuantity != null)
                    hashCode = hashCode * 59 + this.HuQuantity.GetHashCode();
                if (this.HuType != null)
                    hashCode = hashCode * 59 + this.HuType.GetHashCode();
                if (this.PackageQuantity != null)
                    hashCode = hashCode * 59 + this.PackageQuantity.GetHashCode();
                if (this.PackageType != null)
                    hashCode = hashCode * 59 + this.PackageType.GetHashCode();
                if (this.Weight != null)
                    hashCode = hashCode * 59 + this.Weight.GetHashCode();
                if (this.IsHazardousMaterial != null)
                    hashCode = hashCode * 59 + this.IsHazardousMaterial.GetHashCode();
                if (this.CommodityDescription != null)
                    hashCode = hashCode * 59 + this.CommodityDescription.GetHashCode();
                if (this.NfmcNo != null)
                    hashCode = hashCode * 59 + this.NfmcNo.GetHashCode();
                if (this.CarrierClass != null)
                    hashCode = hashCode * 59 + this.CarrierClass.GetHashCode();
                if (this.CustomFields != null)
                    hashCode = hashCode * 59 + this.CustomFields.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
