/* 
 * Infoplus API
 *
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Infoplus.Client.SwaggerDateConverter;

namespace Infoplus.Model
{
    /// <summary>
    /// Cart
    /// </summary>
    [DataContract]
    public partial class Cart :  IEquatable<Cart>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Cart" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Cart() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Cart" /> class.
        /// </summary>
        /// <param name="CartId">CartId (required).</param>
        /// <param name="Description">Description.</param>
        /// <param name="PositionType">PositionType (required).</param>
        /// <param name="CustomFields">CustomFields.</param>
        public Cart(string CartId = default(string), string Description = default(string), string PositionType = default(string), Dictionary<string, Object> CustomFields = default(Dictionary<string, Object>))
        {
            // to ensure "CartId" is required (not null)
            if (CartId == null)
            {
                throw new InvalidDataException("CartId is a required property for Cart and cannot be null");
            }
            else
            {
                this.CartId = CartId;
            }
            // to ensure "PositionType" is required (not null)
            if (PositionType == null)
            {
                throw new InvalidDataException("PositionType is a required property for Cart and cannot be null");
            }
            else
            {
                this.PositionType = PositionType;
            }
            this.Description = Description;
            this.CustomFields = CustomFields;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; private set; }

        /// <summary>
        /// Gets or Sets CreateDate
        /// </summary>
        [DataMember(Name="createDate", EmitDefaultValue=false)]
        public DateTime? CreateDate { get; private set; }

        /// <summary>
        /// Gets or Sets ModifyDate
        /// </summary>
        [DataMember(Name="modifyDate", EmitDefaultValue=false)]
        public DateTime? ModifyDate { get; private set; }

        /// <summary>
        /// Gets or Sets CartId
        /// </summary>
        [DataMember(Name="cartId", EmitDefaultValue=false)]
        public string CartId { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets CurrentFulfillmentProcessId
        /// </summary>
        [DataMember(Name="currentFulfillmentProcessId", EmitDefaultValue=false)]
        public int? CurrentFulfillmentProcessId { get; private set; }

        /// <summary>
        /// Gets or Sets CurrentWorkBatchId
        /// </summary>
        [DataMember(Name="currentWorkBatchId", EmitDefaultValue=false)]
        public int? CurrentWorkBatchId { get; private set; }

        /// <summary>
        /// Gets or Sets PositionType
        /// </summary>
        [DataMember(Name="positionType", EmitDefaultValue=false)]
        public string PositionType { get; set; }

        /// <summary>
        /// Gets or Sets CustomFields
        /// </summary>
        [DataMember(Name="customFields", EmitDefaultValue=false)]
        public Dictionary<string, Object> CustomFields { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Cart {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  CreateDate: ").Append(CreateDate).Append("\n");
            sb.Append("  ModifyDate: ").Append(ModifyDate).Append("\n");
            sb.Append("  CartId: ").Append(CartId).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  CurrentFulfillmentProcessId: ").Append(CurrentFulfillmentProcessId).Append("\n");
            sb.Append("  CurrentWorkBatchId: ").Append(CurrentWorkBatchId).Append("\n");
            sb.Append("  PositionType: ").Append(PositionType).Append("\n");
            sb.Append("  CustomFields: ").Append(CustomFields).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Cart);
        }

        /// <summary>
        /// Returns true if Cart instances are equal
        /// </summary>
        /// <param name="input">Instance of Cart to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Cart input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.CreateDate == input.CreateDate ||
                    (this.CreateDate != null &&
                    this.CreateDate.Equals(input.CreateDate))
                ) && 
                (
                    this.ModifyDate == input.ModifyDate ||
                    (this.ModifyDate != null &&
                    this.ModifyDate.Equals(input.ModifyDate))
                ) && 
                (
                    this.CartId == input.CartId ||
                    (this.CartId != null &&
                    this.CartId.Equals(input.CartId))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.CurrentFulfillmentProcessId == input.CurrentFulfillmentProcessId ||
                    (this.CurrentFulfillmentProcessId != null &&
                    this.CurrentFulfillmentProcessId.Equals(input.CurrentFulfillmentProcessId))
                ) && 
                (
                    this.CurrentWorkBatchId == input.CurrentWorkBatchId ||
                    (this.CurrentWorkBatchId != null &&
                    this.CurrentWorkBatchId.Equals(input.CurrentWorkBatchId))
                ) && 
                (
                    this.PositionType == input.PositionType ||
                    (this.PositionType != null &&
                    this.PositionType.Equals(input.PositionType))
                ) && 
                (
                    this.CustomFields == input.CustomFields ||
                    this.CustomFields != null &&
                    this.CustomFields.SequenceEqual(input.CustomFields)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.CreateDate != null)
                    hashCode = hashCode * 59 + this.CreateDate.GetHashCode();
                if (this.ModifyDate != null)
                    hashCode = hashCode * 59 + this.ModifyDate.GetHashCode();
                if (this.CartId != null)
                    hashCode = hashCode * 59 + this.CartId.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.CurrentFulfillmentProcessId != null)
                    hashCode = hashCode * 59 + this.CurrentFulfillmentProcessId.GetHashCode();
                if (this.CurrentWorkBatchId != null)
                    hashCode = hashCode * 59 + this.CurrentWorkBatchId.GetHashCode();
                if (this.PositionType != null)
                    hashCode = hashCode * 59 + this.PositionType.GetHashCode();
                if (this.CustomFields != null)
                    hashCode = hashCode * 59 + this.CustomFields.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
