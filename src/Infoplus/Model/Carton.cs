/* 
 * Infoplus API
 *
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Infoplus.Client.SwaggerDateConverter;

namespace Infoplus.Model
{
    /// <summary>
    /// Carton
    /// </summary>
    [DataContract]
    public partial class Carton :  IEquatable<Carton>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Carton" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Carton() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Carton" /> class.
        /// </summary>
        /// <param name="OrderNo">OrderNo (required).</param>
        /// <param name="CartonNo">CartonNo (required).</param>
        /// <param name="CartonTypeId">CartonTypeId (required).</param>
        /// <param name="CartonLPN">CartonLPN.</param>
        /// <param name="WeightLbs">WeightLbs.</param>
        /// <param name="LayoutPosition">LayoutPosition.</param>
        /// <param name="LobId">LobId (required).</param>
        /// <param name="CustomFields">CustomFields.</param>
        public Carton(decimal? OrderNo = default(decimal?), int? CartonNo = default(int?), int? CartonTypeId = default(int?), string CartonLPN = default(string), decimal? WeightLbs = default(decimal?), string LayoutPosition = default(string), int? LobId = default(int?), Dictionary<string, Object> CustomFields = default(Dictionary<string, Object>))
        {
            // to ensure "OrderNo" is required (not null)
            if (OrderNo == null)
            {
                throw new InvalidDataException("OrderNo is a required property for Carton and cannot be null");
            }
            else
            {
                this.OrderNo = OrderNo;
            }
            // to ensure "CartonNo" is required (not null)
            if (CartonNo == null)
            {
                throw new InvalidDataException("CartonNo is a required property for Carton and cannot be null");
            }
            else
            {
                this.CartonNo = CartonNo;
            }
            // to ensure "CartonTypeId" is required (not null)
            if (CartonTypeId == null)
            {
                throw new InvalidDataException("CartonTypeId is a required property for Carton and cannot be null");
            }
            else
            {
                this.CartonTypeId = CartonTypeId;
            }
            // to ensure "LobId" is required (not null)
            if (LobId == null)
            {
                throw new InvalidDataException("LobId is a required property for Carton and cannot be null");
            }
            else
            {
                this.LobId = LobId;
            }
            this.CartonLPN = CartonLPN;
            this.WeightLbs = WeightLbs;
            this.LayoutPosition = LayoutPosition;
            this.CustomFields = CustomFields;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; private set; }

        /// <summary>
        /// Gets or Sets OrderNo
        /// </summary>
        [DataMember(Name="orderNo", EmitDefaultValue=false)]
        public decimal? OrderNo { get; set; }

        /// <summary>
        /// Gets or Sets CartonNo
        /// </summary>
        [DataMember(Name="cartonNo", EmitDefaultValue=false)]
        public int? CartonNo { get; set; }

        /// <summary>
        /// Gets or Sets CartonTypeId
        /// </summary>
        [DataMember(Name="cartonTypeId", EmitDefaultValue=false)]
        public int? CartonTypeId { get; set; }

        /// <summary>
        /// Gets or Sets CartonLPN
        /// </summary>
        [DataMember(Name="cartonLPN", EmitDefaultValue=false)]
        public string CartonLPN { get; set; }

        /// <summary>
        /// Gets or Sets WeightLbs
        /// </summary>
        [DataMember(Name="weightLbs", EmitDefaultValue=false)]
        public decimal? WeightLbs { get; set; }

        /// <summary>
        /// Gets or Sets LayoutPosition
        /// </summary>
        [DataMember(Name="layoutPosition", EmitDefaultValue=false)]
        public string LayoutPosition { get; set; }

        /// <summary>
        /// Gets or Sets LobId
        /// </summary>
        [DataMember(Name="lobId", EmitDefaultValue=false)]
        public int? LobId { get; set; }

        /// <summary>
        /// Gets or Sets CustomFields
        /// </summary>
        [DataMember(Name="customFields", EmitDefaultValue=false)]
        public Dictionary<string, Object> CustomFields { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Carton {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  OrderNo: ").Append(OrderNo).Append("\n");
            sb.Append("  CartonNo: ").Append(CartonNo).Append("\n");
            sb.Append("  CartonTypeId: ").Append(CartonTypeId).Append("\n");
            sb.Append("  CartonLPN: ").Append(CartonLPN).Append("\n");
            sb.Append("  WeightLbs: ").Append(WeightLbs).Append("\n");
            sb.Append("  LayoutPosition: ").Append(LayoutPosition).Append("\n");
            sb.Append("  LobId: ").Append(LobId).Append("\n");
            sb.Append("  CustomFields: ").Append(CustomFields).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Carton);
        }

        /// <summary>
        /// Returns true if Carton instances are equal
        /// </summary>
        /// <param name="input">Instance of Carton to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Carton input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.OrderNo == input.OrderNo ||
                    (this.OrderNo != null &&
                    this.OrderNo.Equals(input.OrderNo))
                ) && 
                (
                    this.CartonNo == input.CartonNo ||
                    (this.CartonNo != null &&
                    this.CartonNo.Equals(input.CartonNo))
                ) && 
                (
                    this.CartonTypeId == input.CartonTypeId ||
                    (this.CartonTypeId != null &&
                    this.CartonTypeId.Equals(input.CartonTypeId))
                ) && 
                (
                    this.CartonLPN == input.CartonLPN ||
                    (this.CartonLPN != null &&
                    this.CartonLPN.Equals(input.CartonLPN))
                ) && 
                (
                    this.WeightLbs == input.WeightLbs ||
                    (this.WeightLbs != null &&
                    this.WeightLbs.Equals(input.WeightLbs))
                ) && 
                (
                    this.LayoutPosition == input.LayoutPosition ||
                    (this.LayoutPosition != null &&
                    this.LayoutPosition.Equals(input.LayoutPosition))
                ) && 
                (
                    this.LobId == input.LobId ||
                    (this.LobId != null &&
                    this.LobId.Equals(input.LobId))
                ) && 
                (
                    this.CustomFields == input.CustomFields ||
                    this.CustomFields != null &&
                    this.CustomFields.SequenceEqual(input.CustomFields)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.OrderNo != null)
                    hashCode = hashCode * 59 + this.OrderNo.GetHashCode();
                if (this.CartonNo != null)
                    hashCode = hashCode * 59 + this.CartonNo.GetHashCode();
                if (this.CartonTypeId != null)
                    hashCode = hashCode * 59 + this.CartonTypeId.GetHashCode();
                if (this.CartonLPN != null)
                    hashCode = hashCode * 59 + this.CartonLPN.GetHashCode();
                if (this.WeightLbs != null)
                    hashCode = hashCode * 59 + this.WeightLbs.GetHashCode();
                if (this.LayoutPosition != null)
                    hashCode = hashCode * 59 + this.LayoutPosition.GetHashCode();
                if (this.LobId != null)
                    hashCode = hashCode * 59 + this.LobId.GetHashCode();
                if (this.CustomFields != null)
                    hashCode = hashCode * 59 + this.CustomFields.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
