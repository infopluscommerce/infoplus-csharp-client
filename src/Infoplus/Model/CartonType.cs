/* 
 * Infoplus API
 *
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Infoplus.Client.SwaggerDateConverter;

namespace Infoplus.Model
{
    /// <summary>
    /// CartonType
    /// </summary>
    [DataContract]
    public partial class CartonType :  IEquatable<CartonType>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CartonType" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CartonType() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CartonType" /> class.
        /// </summary>
        /// <param name="Abbreviation">Abbreviation (required).</param>
        /// <param name="Name">Name (required).</param>
        /// <param name="LengthIn">LengthIn (required).</param>
        /// <param name="WidthIn">WidthIn (required).</param>
        /// <param name="HeightIn">HeightIn (required).</param>
        /// <param name="InnerLengthIn">InnerLengthIn (required).</param>
        /// <param name="InnerWidthIn">InnerWidthIn (required).</param>
        /// <param name="InnerHeightIn">InnerHeightIn (required).</param>
        /// <param name="WeightLbs">WeightLbs.</param>
        /// <param name="LobId">LobId (required).</param>
        /// <param name="IsActive">IsActive (required) (default to false).</param>
        /// <param name="PredefinedPackageTypeId">PredefinedPackageTypeId.</param>
        /// <param name="CustomFields">CustomFields.</param>
        public CartonType(string Abbreviation = default(string), string Name = default(string), decimal? LengthIn = default(decimal?), decimal? WidthIn = default(decimal?), decimal? HeightIn = default(decimal?), decimal? InnerLengthIn = default(decimal?), decimal? InnerWidthIn = default(decimal?), decimal? InnerHeightIn = default(decimal?), decimal? WeightLbs = default(decimal?), int? LobId = default(int?), bool? IsActive = false, int? PredefinedPackageTypeId = default(int?), Dictionary<string, Object> CustomFields = default(Dictionary<string, Object>))
        {
            // to ensure "Abbreviation" is required (not null)
            if (Abbreviation == null)
            {
                throw new InvalidDataException("Abbreviation is a required property for CartonType and cannot be null");
            }
            else
            {
                this.Abbreviation = Abbreviation;
            }
            // to ensure "Name" is required (not null)
            if (Name == null)
            {
                throw new InvalidDataException("Name is a required property for CartonType and cannot be null");
            }
            else
            {
                this.Name = Name;
            }
            // to ensure "LengthIn" is required (not null)
            if (LengthIn == null)
            {
                throw new InvalidDataException("LengthIn is a required property for CartonType and cannot be null");
            }
            else
            {
                this.LengthIn = LengthIn;
            }
            // to ensure "WidthIn" is required (not null)
            if (WidthIn == null)
            {
                throw new InvalidDataException("WidthIn is a required property for CartonType and cannot be null");
            }
            else
            {
                this.WidthIn = WidthIn;
            }
            // to ensure "HeightIn" is required (not null)
            if (HeightIn == null)
            {
                throw new InvalidDataException("HeightIn is a required property for CartonType and cannot be null");
            }
            else
            {
                this.HeightIn = HeightIn;
            }
            // to ensure "InnerLengthIn" is required (not null)
            if (InnerLengthIn == null)
            {
                throw new InvalidDataException("InnerLengthIn is a required property for CartonType and cannot be null");
            }
            else
            {
                this.InnerLengthIn = InnerLengthIn;
            }
            // to ensure "InnerWidthIn" is required (not null)
            if (InnerWidthIn == null)
            {
                throw new InvalidDataException("InnerWidthIn is a required property for CartonType and cannot be null");
            }
            else
            {
                this.InnerWidthIn = InnerWidthIn;
            }
            // to ensure "InnerHeightIn" is required (not null)
            if (InnerHeightIn == null)
            {
                throw new InvalidDataException("InnerHeightIn is a required property for CartonType and cannot be null");
            }
            else
            {
                this.InnerHeightIn = InnerHeightIn;
            }
            // to ensure "LobId" is required (not null)
            if (LobId == null)
            {
                throw new InvalidDataException("LobId is a required property for CartonType and cannot be null");
            }
            else
            {
                this.LobId = LobId;
            }
            // to ensure "IsActive" is required (not null)
            if (IsActive == null)
            {
                throw new InvalidDataException("IsActive is a required property for CartonType and cannot be null");
            }
            else
            {
                this.IsActive = IsActive;
            }
            this.WeightLbs = WeightLbs;
            this.PredefinedPackageTypeId = PredefinedPackageTypeId;
            this.CustomFields = CustomFields;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; private set; }

        /// <summary>
        /// Gets or Sets Abbreviation
        /// </summary>
        [DataMember(Name="abbreviation", EmitDefaultValue=false)]
        public string Abbreviation { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets LengthIn
        /// </summary>
        [DataMember(Name="lengthIn", EmitDefaultValue=false)]
        public decimal? LengthIn { get; set; }

        /// <summary>
        /// Gets or Sets WidthIn
        /// </summary>
        [DataMember(Name="widthIn", EmitDefaultValue=false)]
        public decimal? WidthIn { get; set; }

        /// <summary>
        /// Gets or Sets HeightIn
        /// </summary>
        [DataMember(Name="heightIn", EmitDefaultValue=false)]
        public decimal? HeightIn { get; set; }

        /// <summary>
        /// Gets or Sets InnerLengthIn
        /// </summary>
        [DataMember(Name="innerLengthIn", EmitDefaultValue=false)]
        public decimal? InnerLengthIn { get; set; }

        /// <summary>
        /// Gets or Sets InnerWidthIn
        /// </summary>
        [DataMember(Name="innerWidthIn", EmitDefaultValue=false)]
        public decimal? InnerWidthIn { get; set; }

        /// <summary>
        /// Gets or Sets InnerHeightIn
        /// </summary>
        [DataMember(Name="innerHeightIn", EmitDefaultValue=false)]
        public decimal? InnerHeightIn { get; set; }

        /// <summary>
        /// Gets or Sets WeightLbs
        /// </summary>
        [DataMember(Name="weightLbs", EmitDefaultValue=false)]
        public decimal? WeightLbs { get; set; }

        /// <summary>
        /// Gets or Sets LobId
        /// </summary>
        [DataMember(Name="lobId", EmitDefaultValue=false)]
        public int? LobId { get; set; }

        /// <summary>
        /// Gets or Sets IsActive
        /// </summary>
        [DataMember(Name="isActive", EmitDefaultValue=false)]
        public bool? IsActive { get; set; }

        /// <summary>
        /// Gets or Sets PredefinedPackageTypeId
        /// </summary>
        [DataMember(Name="predefinedPackageTypeId", EmitDefaultValue=false)]
        public int? PredefinedPackageTypeId { get; set; }

        /// <summary>
        /// Gets or Sets Origin
        /// </summary>
        [DataMember(Name="origin", EmitDefaultValue=false)]
        public string Origin { get; private set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; private set; }

        /// <summary>
        /// Gets or Sets CustomFields
        /// </summary>
        [DataMember(Name="customFields", EmitDefaultValue=false)]
        public Dictionary<string, Object> CustomFields { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CartonType {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Abbreviation: ").Append(Abbreviation).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  LengthIn: ").Append(LengthIn).Append("\n");
            sb.Append("  WidthIn: ").Append(WidthIn).Append("\n");
            sb.Append("  HeightIn: ").Append(HeightIn).Append("\n");
            sb.Append("  InnerLengthIn: ").Append(InnerLengthIn).Append("\n");
            sb.Append("  InnerWidthIn: ").Append(InnerWidthIn).Append("\n");
            sb.Append("  InnerHeightIn: ").Append(InnerHeightIn).Append("\n");
            sb.Append("  WeightLbs: ").Append(WeightLbs).Append("\n");
            sb.Append("  LobId: ").Append(LobId).Append("\n");
            sb.Append("  IsActive: ").Append(IsActive).Append("\n");
            sb.Append("  PredefinedPackageTypeId: ").Append(PredefinedPackageTypeId).Append("\n");
            sb.Append("  Origin: ").Append(Origin).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  CustomFields: ").Append(CustomFields).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CartonType);
        }

        /// <summary>
        /// Returns true if CartonType instances are equal
        /// </summary>
        /// <param name="input">Instance of CartonType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CartonType input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Abbreviation == input.Abbreviation ||
                    (this.Abbreviation != null &&
                    this.Abbreviation.Equals(input.Abbreviation))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.LengthIn == input.LengthIn ||
                    (this.LengthIn != null &&
                    this.LengthIn.Equals(input.LengthIn))
                ) && 
                (
                    this.WidthIn == input.WidthIn ||
                    (this.WidthIn != null &&
                    this.WidthIn.Equals(input.WidthIn))
                ) && 
                (
                    this.HeightIn == input.HeightIn ||
                    (this.HeightIn != null &&
                    this.HeightIn.Equals(input.HeightIn))
                ) && 
                (
                    this.InnerLengthIn == input.InnerLengthIn ||
                    (this.InnerLengthIn != null &&
                    this.InnerLengthIn.Equals(input.InnerLengthIn))
                ) && 
                (
                    this.InnerWidthIn == input.InnerWidthIn ||
                    (this.InnerWidthIn != null &&
                    this.InnerWidthIn.Equals(input.InnerWidthIn))
                ) && 
                (
                    this.InnerHeightIn == input.InnerHeightIn ||
                    (this.InnerHeightIn != null &&
                    this.InnerHeightIn.Equals(input.InnerHeightIn))
                ) && 
                (
                    this.WeightLbs == input.WeightLbs ||
                    (this.WeightLbs != null &&
                    this.WeightLbs.Equals(input.WeightLbs))
                ) && 
                (
                    this.LobId == input.LobId ||
                    (this.LobId != null &&
                    this.LobId.Equals(input.LobId))
                ) && 
                (
                    this.IsActive == input.IsActive ||
                    (this.IsActive != null &&
                    this.IsActive.Equals(input.IsActive))
                ) && 
                (
                    this.PredefinedPackageTypeId == input.PredefinedPackageTypeId ||
                    (this.PredefinedPackageTypeId != null &&
                    this.PredefinedPackageTypeId.Equals(input.PredefinedPackageTypeId))
                ) && 
                (
                    this.Origin == input.Origin ||
                    (this.Origin != null &&
                    this.Origin.Equals(input.Origin))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.CustomFields == input.CustomFields ||
                    this.CustomFields != null &&
                    this.CustomFields.SequenceEqual(input.CustomFields)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Abbreviation != null)
                    hashCode = hashCode * 59 + this.Abbreviation.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.LengthIn != null)
                    hashCode = hashCode * 59 + this.LengthIn.GetHashCode();
                if (this.WidthIn != null)
                    hashCode = hashCode * 59 + this.WidthIn.GetHashCode();
                if (this.HeightIn != null)
                    hashCode = hashCode * 59 + this.HeightIn.GetHashCode();
                if (this.InnerLengthIn != null)
                    hashCode = hashCode * 59 + this.InnerLengthIn.GetHashCode();
                if (this.InnerWidthIn != null)
                    hashCode = hashCode * 59 + this.InnerWidthIn.GetHashCode();
                if (this.InnerHeightIn != null)
                    hashCode = hashCode * 59 + this.InnerHeightIn.GetHashCode();
                if (this.WeightLbs != null)
                    hashCode = hashCode * 59 + this.WeightLbs.GetHashCode();
                if (this.LobId != null)
                    hashCode = hashCode * 59 + this.LobId.GetHashCode();
                if (this.IsActive != null)
                    hashCode = hashCode * 59 + this.IsActive.GetHashCode();
                if (this.PredefinedPackageTypeId != null)
                    hashCode = hashCode * 59 + this.PredefinedPackageTypeId.GetHashCode();
                if (this.Origin != null)
                    hashCode = hashCode * 59 + this.Origin.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.CustomFields != null)
                    hashCode = hashCode * 59 + this.CustomFields.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
