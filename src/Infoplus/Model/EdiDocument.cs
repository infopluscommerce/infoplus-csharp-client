/* 
 * Infoplus API
 *
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Infoplus.Client.SwaggerDateConverter;

namespace Infoplus.Model
{
    /// <summary>
    /// EdiDocument
    /// </summary>
    [DataContract]
    public partial class EdiDocument :  IEquatable<EdiDocument>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EdiDocument" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EdiDocument() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EdiDocument" /> class.
        /// </summary>
        /// <param name="EdiConnectionId">EdiConnectionId (required).</param>
        /// <param name="LobId">LobId.</param>
        /// <param name="TransactionType">TransactionType (required).</param>
        /// <param name="Direction">Direction (required).</param>
        /// <param name="DocumentTypeId">DocumentTypeId (required).</param>
        /// <param name="Status">Status (required).</param>
        /// <param name="Body">Body (required).</param>
        /// <param name="JsonBody">JsonBody (required).</param>
        /// <param name="CustomFields">CustomFields.</param>
        public EdiDocument(int? EdiConnectionId = default(int?), int? LobId = default(int?), string TransactionType = default(string), string Direction = default(string), int? DocumentTypeId = default(int?), string Status = default(string), string Body = default(string), string JsonBody = default(string), Dictionary<string, Object> CustomFields = default(Dictionary<string, Object>))
        {
            // to ensure "EdiConnectionId" is required (not null)
            if (EdiConnectionId == null)
            {
                throw new InvalidDataException("EdiConnectionId is a required property for EdiDocument and cannot be null");
            }
            else
            {
                this.EdiConnectionId = EdiConnectionId;
            }
            // to ensure "TransactionType" is required (not null)
            if (TransactionType == null)
            {
                throw new InvalidDataException("TransactionType is a required property for EdiDocument and cannot be null");
            }
            else
            {
                this.TransactionType = TransactionType;
            }
            // to ensure "Direction" is required (not null)
            if (Direction == null)
            {
                throw new InvalidDataException("Direction is a required property for EdiDocument and cannot be null");
            }
            else
            {
                this.Direction = Direction;
            }
            // to ensure "DocumentTypeId" is required (not null)
            if (DocumentTypeId == null)
            {
                throw new InvalidDataException("DocumentTypeId is a required property for EdiDocument and cannot be null");
            }
            else
            {
                this.DocumentTypeId = DocumentTypeId;
            }
            // to ensure "Status" is required (not null)
            if (Status == null)
            {
                throw new InvalidDataException("Status is a required property for EdiDocument and cannot be null");
            }
            else
            {
                this.Status = Status;
            }
            // to ensure "Body" is required (not null)
            if (Body == null)
            {
                throw new InvalidDataException("Body is a required property for EdiDocument and cannot be null");
            }
            else
            {
                this.Body = Body;
            }
            // to ensure "JsonBody" is required (not null)
            if (JsonBody == null)
            {
                throw new InvalidDataException("JsonBody is a required property for EdiDocument and cannot be null");
            }
            else
            {
                this.JsonBody = JsonBody;
            }
            this.LobId = LobId;
            this.CustomFields = CustomFields;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; private set; }

        /// <summary>
        /// Gets or Sets EdiConnectionId
        /// </summary>
        [DataMember(Name="ediConnectionId", EmitDefaultValue=false)]
        public int? EdiConnectionId { get; set; }

        /// <summary>
        /// Gets or Sets As2PartnerId
        /// </summary>
        [DataMember(Name="as2PartnerId", EmitDefaultValue=false)]
        public int? As2PartnerId { get; private set; }

        /// <summary>
        /// Gets or Sets LobId
        /// </summary>
        [DataMember(Name="lobId", EmitDefaultValue=false)]
        public int? LobId { get; set; }

        /// <summary>
        /// Gets or Sets TransactionType
        /// </summary>
        [DataMember(Name="transactionType", EmitDefaultValue=false)]
        public string TransactionType { get; set; }

        /// <summary>
        /// Gets or Sets Direction
        /// </summary>
        [DataMember(Name="direction", EmitDefaultValue=false)]
        public string Direction { get; set; }

        /// <summary>
        /// Gets or Sets DocumentTypeId
        /// </summary>
        [DataMember(Name="documentTypeId", EmitDefaultValue=false)]
        public int? DocumentTypeId { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public string Status { get; set; }

        /// <summary>
        /// Gets or Sets InterchangeIndex
        /// </summary>
        [DataMember(Name="interchangeIndex", EmitDefaultValue=false)]
        public int? InterchangeIndex { get; private set; }

        /// <summary>
        /// Gets or Sets GroupIndex
        /// </summary>
        [DataMember(Name="groupIndex", EmitDefaultValue=false)]
        public int? GroupIndex { get; private set; }

        /// <summary>
        /// Gets or Sets TransactionIndex
        /// </summary>
        [DataMember(Name="transactionIndex", EmitDefaultValue=false)]
        public int? TransactionIndex { get; private set; }

        /// <summary>
        /// Gets or Sets Body
        /// </summary>
        [DataMember(Name="body", EmitDefaultValue=false)]
        public string Body { get; set; }

        /// <summary>
        /// Gets or Sets JsonBody
        /// </summary>
        [DataMember(Name="jsonBody", EmitDefaultValue=false)]
        public string JsonBody { get; set; }

        /// <summary>
        /// Gets or Sets CreateDate
        /// </summary>
        [DataMember(Name="createDate", EmitDefaultValue=false)]
        public DateTime? CreateDate { get; private set; }

        /// <summary>
        /// Gets or Sets ModifyDate
        /// </summary>
        [DataMember(Name="modifyDate", EmitDefaultValue=false)]
        public DateTime? ModifyDate { get; private set; }

        /// <summary>
        /// Gets or Sets CustomFields
        /// </summary>
        [DataMember(Name="customFields", EmitDefaultValue=false)]
        public Dictionary<string, Object> CustomFields { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EdiDocument {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  EdiConnectionId: ").Append(EdiConnectionId).Append("\n");
            sb.Append("  As2PartnerId: ").Append(As2PartnerId).Append("\n");
            sb.Append("  LobId: ").Append(LobId).Append("\n");
            sb.Append("  TransactionType: ").Append(TransactionType).Append("\n");
            sb.Append("  Direction: ").Append(Direction).Append("\n");
            sb.Append("  DocumentTypeId: ").Append(DocumentTypeId).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  InterchangeIndex: ").Append(InterchangeIndex).Append("\n");
            sb.Append("  GroupIndex: ").Append(GroupIndex).Append("\n");
            sb.Append("  TransactionIndex: ").Append(TransactionIndex).Append("\n");
            sb.Append("  Body: ").Append(Body).Append("\n");
            sb.Append("  JsonBody: ").Append(JsonBody).Append("\n");
            sb.Append("  CreateDate: ").Append(CreateDate).Append("\n");
            sb.Append("  ModifyDate: ").Append(ModifyDate).Append("\n");
            sb.Append("  CustomFields: ").Append(CustomFields).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EdiDocument);
        }

        /// <summary>
        /// Returns true if EdiDocument instances are equal
        /// </summary>
        /// <param name="input">Instance of EdiDocument to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EdiDocument input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.EdiConnectionId == input.EdiConnectionId ||
                    (this.EdiConnectionId != null &&
                    this.EdiConnectionId.Equals(input.EdiConnectionId))
                ) && 
                (
                    this.As2PartnerId == input.As2PartnerId ||
                    (this.As2PartnerId != null &&
                    this.As2PartnerId.Equals(input.As2PartnerId))
                ) && 
                (
                    this.LobId == input.LobId ||
                    (this.LobId != null &&
                    this.LobId.Equals(input.LobId))
                ) && 
                (
                    this.TransactionType == input.TransactionType ||
                    (this.TransactionType != null &&
                    this.TransactionType.Equals(input.TransactionType))
                ) && 
                (
                    this.Direction == input.Direction ||
                    (this.Direction != null &&
                    this.Direction.Equals(input.Direction))
                ) && 
                (
                    this.DocumentTypeId == input.DocumentTypeId ||
                    (this.DocumentTypeId != null &&
                    this.DocumentTypeId.Equals(input.DocumentTypeId))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.InterchangeIndex == input.InterchangeIndex ||
                    (this.InterchangeIndex != null &&
                    this.InterchangeIndex.Equals(input.InterchangeIndex))
                ) && 
                (
                    this.GroupIndex == input.GroupIndex ||
                    (this.GroupIndex != null &&
                    this.GroupIndex.Equals(input.GroupIndex))
                ) && 
                (
                    this.TransactionIndex == input.TransactionIndex ||
                    (this.TransactionIndex != null &&
                    this.TransactionIndex.Equals(input.TransactionIndex))
                ) && 
                (
                    this.Body == input.Body ||
                    (this.Body != null &&
                    this.Body.Equals(input.Body))
                ) && 
                (
                    this.JsonBody == input.JsonBody ||
                    (this.JsonBody != null &&
                    this.JsonBody.Equals(input.JsonBody))
                ) && 
                (
                    this.CreateDate == input.CreateDate ||
                    (this.CreateDate != null &&
                    this.CreateDate.Equals(input.CreateDate))
                ) && 
                (
                    this.ModifyDate == input.ModifyDate ||
                    (this.ModifyDate != null &&
                    this.ModifyDate.Equals(input.ModifyDate))
                ) && 
                (
                    this.CustomFields == input.CustomFields ||
                    this.CustomFields != null &&
                    this.CustomFields.SequenceEqual(input.CustomFields)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.EdiConnectionId != null)
                    hashCode = hashCode * 59 + this.EdiConnectionId.GetHashCode();
                if (this.As2PartnerId != null)
                    hashCode = hashCode * 59 + this.As2PartnerId.GetHashCode();
                if (this.LobId != null)
                    hashCode = hashCode * 59 + this.LobId.GetHashCode();
                if (this.TransactionType != null)
                    hashCode = hashCode * 59 + this.TransactionType.GetHashCode();
                if (this.Direction != null)
                    hashCode = hashCode * 59 + this.Direction.GetHashCode();
                if (this.DocumentTypeId != null)
                    hashCode = hashCode * 59 + this.DocumentTypeId.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.InterchangeIndex != null)
                    hashCode = hashCode * 59 + this.InterchangeIndex.GetHashCode();
                if (this.GroupIndex != null)
                    hashCode = hashCode * 59 + this.GroupIndex.GetHashCode();
                if (this.TransactionIndex != null)
                    hashCode = hashCode * 59 + this.TransactionIndex.GetHashCode();
                if (this.Body != null)
                    hashCode = hashCode * 59 + this.Body.GetHashCode();
                if (this.JsonBody != null)
                    hashCode = hashCode * 59 + this.JsonBody.GetHashCode();
                if (this.CreateDate != null)
                    hashCode = hashCode * 59 + this.CreateDate.GetHashCode();
                if (this.ModifyDate != null)
                    hashCode = hashCode * 59 + this.ModifyDate.GetHashCode();
                if (this.CustomFields != null)
                    hashCode = hashCode * 59 + this.CustomFields.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
