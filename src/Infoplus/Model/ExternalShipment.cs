/* 
 * Infoplus API
 *
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Infoplus.Client.SwaggerDateConverter;

namespace Infoplus.Model
{
    /// <summary>
    /// ExternalShipment
    /// </summary>
    [DataContract]
    public partial class ExternalShipment :  IEquatable<ExternalShipment>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ExternalShipment" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ExternalShipment() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ExternalShipment" /> class.
        /// </summary>
        /// <param name="OrderId">OrderId (required).</param>
        /// <param name="CarrierId">CarrierId (required).</param>
        /// <param name="ParcelAccountId">ParcelAccountId (required).</param>
        /// <param name="ThirdPartyParcelAccountId">ThirdPartyParcelAccountId.</param>
        /// <param name="Freight">Freight.</param>
        /// <param name="TrackingNo">TrackingNo (required).</param>
        /// <param name="Dim1In">Dim1In.</param>
        /// <param name="Dim2In">Dim2In.</param>
        /// <param name="Dim3In">Dim3In.</param>
        /// <param name="WeightLbs">WeightLbs.</param>
        /// <param name="DimWeight">DimWeight.</param>
        /// <param name="Residential">Residential (default to false).</param>
        /// <param name="LobId">LobId (required).</param>
        /// <param name="Zone">Zone.</param>
        /// <param name="ShipDate">ShipDate.</param>
        /// <param name="CustomFields">CustomFields.</param>
        public ExternalShipment(decimal? OrderId = default(decimal?), int? CarrierId = default(int?), int? ParcelAccountId = default(int?), int? ThirdPartyParcelAccountId = default(int?), decimal? Freight = default(decimal?), string TrackingNo = default(string), decimal? Dim1In = default(decimal?), decimal? Dim2In = default(decimal?), decimal? Dim3In = default(decimal?), decimal? WeightLbs = default(decimal?), decimal? DimWeight = default(decimal?), bool? Residential = false, int? LobId = default(int?), string Zone = default(string), DateTime? ShipDate = default(DateTime?), Dictionary<string, Object> CustomFields = default(Dictionary<string, Object>))
        {
            // to ensure "OrderId" is required (not null)
            if (OrderId == null)
            {
                throw new InvalidDataException("OrderId is a required property for ExternalShipment and cannot be null");
            }
            else
            {
                this.OrderId = OrderId;
            }
            // to ensure "CarrierId" is required (not null)
            if (CarrierId == null)
            {
                throw new InvalidDataException("CarrierId is a required property for ExternalShipment and cannot be null");
            }
            else
            {
                this.CarrierId = CarrierId;
            }
            // to ensure "ParcelAccountId" is required (not null)
            if (ParcelAccountId == null)
            {
                throw new InvalidDataException("ParcelAccountId is a required property for ExternalShipment and cannot be null");
            }
            else
            {
                this.ParcelAccountId = ParcelAccountId;
            }
            // to ensure "TrackingNo" is required (not null)
            if (TrackingNo == null)
            {
                throw new InvalidDataException("TrackingNo is a required property for ExternalShipment and cannot be null");
            }
            else
            {
                this.TrackingNo = TrackingNo;
            }
            // to ensure "LobId" is required (not null)
            if (LobId == null)
            {
                throw new InvalidDataException("LobId is a required property for ExternalShipment and cannot be null");
            }
            else
            {
                this.LobId = LobId;
            }
            this.ThirdPartyParcelAccountId = ThirdPartyParcelAccountId;
            this.Freight = Freight;
            this.Dim1In = Dim1In;
            this.Dim2In = Dim2In;
            this.Dim3In = Dim3In;
            this.WeightLbs = WeightLbs;
            this.DimWeight = DimWeight;
            // use default value if no "Residential" provided
            if (Residential == null)
            {
                this.Residential = false;
            }
            else
            {
                this.Residential = Residential;
            }
            this.Zone = Zone;
            this.ShipDate = ShipDate;
            this.CustomFields = CustomFields;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; private set; }

        /// <summary>
        /// Gets or Sets CreateDate
        /// </summary>
        [DataMember(Name="createDate", EmitDefaultValue=false)]
        public DateTime? CreateDate { get; private set; }

        /// <summary>
        /// Gets or Sets ModifyDate
        /// </summary>
        [DataMember(Name="modifyDate", EmitDefaultValue=false)]
        public DateTime? ModifyDate { get; private set; }

        /// <summary>
        /// Gets or Sets OrderId
        /// </summary>
        [DataMember(Name="orderId", EmitDefaultValue=false)]
        public decimal? OrderId { get; set; }

        /// <summary>
        /// Gets or Sets CarrierId
        /// </summary>
        [DataMember(Name="carrierId", EmitDefaultValue=false)]
        public int? CarrierId { get; set; }

        /// <summary>
        /// Gets or Sets ParcelAccountId
        /// </summary>
        [DataMember(Name="parcelAccountId", EmitDefaultValue=false)]
        public int? ParcelAccountId { get; set; }

        /// <summary>
        /// Gets or Sets ThirdPartyParcelAccountId
        /// </summary>
        [DataMember(Name="thirdPartyParcelAccountId", EmitDefaultValue=false)]
        public int? ThirdPartyParcelAccountId { get; set; }

        /// <summary>
        /// Gets or Sets Freight
        /// </summary>
        [DataMember(Name="freight", EmitDefaultValue=false)]
        public decimal? Freight { get; set; }

        /// <summary>
        /// Gets or Sets TrackingNo
        /// </summary>
        [DataMember(Name="trackingNo", EmitDefaultValue=false)]
        public string TrackingNo { get; set; }

        /// <summary>
        /// Gets or Sets Dim1In
        /// </summary>
        [DataMember(Name="dim1In", EmitDefaultValue=false)]
        public decimal? Dim1In { get; set; }

        /// <summary>
        /// Gets or Sets Dim2In
        /// </summary>
        [DataMember(Name="dim2In", EmitDefaultValue=false)]
        public decimal? Dim2In { get; set; }

        /// <summary>
        /// Gets or Sets Dim3In
        /// </summary>
        [DataMember(Name="dim3In", EmitDefaultValue=false)]
        public decimal? Dim3In { get; set; }

        /// <summary>
        /// Gets or Sets WeightLbs
        /// </summary>
        [DataMember(Name="weightLbs", EmitDefaultValue=false)]
        public decimal? WeightLbs { get; set; }

        /// <summary>
        /// Gets or Sets DimWeight
        /// </summary>
        [DataMember(Name="dimWeight", EmitDefaultValue=false)]
        public decimal? DimWeight { get; set; }

        /// <summary>
        /// Gets or Sets Residential
        /// </summary>
        [DataMember(Name="residential", EmitDefaultValue=false)]
        public bool? Residential { get; set; }

        /// <summary>
        /// Gets or Sets LobId
        /// </summary>
        [DataMember(Name="lobId", EmitDefaultValue=false)]
        public int? LobId { get; set; }

        /// <summary>
        /// Gets or Sets Zone
        /// </summary>
        [DataMember(Name="zone", EmitDefaultValue=false)]
        public string Zone { get; set; }

        /// <summary>
        /// Gets or Sets ShipDate
        /// </summary>
        [DataMember(Name="shipDate", EmitDefaultValue=false)]
        public DateTime? ShipDate { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public string Status { get; private set; }

        /// <summary>
        /// Gets or Sets CustomFields
        /// </summary>
        [DataMember(Name="customFields", EmitDefaultValue=false)]
        public Dictionary<string, Object> CustomFields { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ExternalShipment {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  CreateDate: ").Append(CreateDate).Append("\n");
            sb.Append("  ModifyDate: ").Append(ModifyDate).Append("\n");
            sb.Append("  OrderId: ").Append(OrderId).Append("\n");
            sb.Append("  CarrierId: ").Append(CarrierId).Append("\n");
            sb.Append("  ParcelAccountId: ").Append(ParcelAccountId).Append("\n");
            sb.Append("  ThirdPartyParcelAccountId: ").Append(ThirdPartyParcelAccountId).Append("\n");
            sb.Append("  Freight: ").Append(Freight).Append("\n");
            sb.Append("  TrackingNo: ").Append(TrackingNo).Append("\n");
            sb.Append("  Dim1In: ").Append(Dim1In).Append("\n");
            sb.Append("  Dim2In: ").Append(Dim2In).Append("\n");
            sb.Append("  Dim3In: ").Append(Dim3In).Append("\n");
            sb.Append("  WeightLbs: ").Append(WeightLbs).Append("\n");
            sb.Append("  DimWeight: ").Append(DimWeight).Append("\n");
            sb.Append("  Residential: ").Append(Residential).Append("\n");
            sb.Append("  LobId: ").Append(LobId).Append("\n");
            sb.Append("  Zone: ").Append(Zone).Append("\n");
            sb.Append("  ShipDate: ").Append(ShipDate).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  CustomFields: ").Append(CustomFields).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ExternalShipment);
        }

        /// <summary>
        /// Returns true if ExternalShipment instances are equal
        /// </summary>
        /// <param name="input">Instance of ExternalShipment to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ExternalShipment input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.CreateDate == input.CreateDate ||
                    (this.CreateDate != null &&
                    this.CreateDate.Equals(input.CreateDate))
                ) && 
                (
                    this.ModifyDate == input.ModifyDate ||
                    (this.ModifyDate != null &&
                    this.ModifyDate.Equals(input.ModifyDate))
                ) && 
                (
                    this.OrderId == input.OrderId ||
                    (this.OrderId != null &&
                    this.OrderId.Equals(input.OrderId))
                ) && 
                (
                    this.CarrierId == input.CarrierId ||
                    (this.CarrierId != null &&
                    this.CarrierId.Equals(input.CarrierId))
                ) && 
                (
                    this.ParcelAccountId == input.ParcelAccountId ||
                    (this.ParcelAccountId != null &&
                    this.ParcelAccountId.Equals(input.ParcelAccountId))
                ) && 
                (
                    this.ThirdPartyParcelAccountId == input.ThirdPartyParcelAccountId ||
                    (this.ThirdPartyParcelAccountId != null &&
                    this.ThirdPartyParcelAccountId.Equals(input.ThirdPartyParcelAccountId))
                ) && 
                (
                    this.Freight == input.Freight ||
                    (this.Freight != null &&
                    this.Freight.Equals(input.Freight))
                ) && 
                (
                    this.TrackingNo == input.TrackingNo ||
                    (this.TrackingNo != null &&
                    this.TrackingNo.Equals(input.TrackingNo))
                ) && 
                (
                    this.Dim1In == input.Dim1In ||
                    (this.Dim1In != null &&
                    this.Dim1In.Equals(input.Dim1In))
                ) && 
                (
                    this.Dim2In == input.Dim2In ||
                    (this.Dim2In != null &&
                    this.Dim2In.Equals(input.Dim2In))
                ) && 
                (
                    this.Dim3In == input.Dim3In ||
                    (this.Dim3In != null &&
                    this.Dim3In.Equals(input.Dim3In))
                ) && 
                (
                    this.WeightLbs == input.WeightLbs ||
                    (this.WeightLbs != null &&
                    this.WeightLbs.Equals(input.WeightLbs))
                ) && 
                (
                    this.DimWeight == input.DimWeight ||
                    (this.DimWeight != null &&
                    this.DimWeight.Equals(input.DimWeight))
                ) && 
                (
                    this.Residential == input.Residential ||
                    (this.Residential != null &&
                    this.Residential.Equals(input.Residential))
                ) && 
                (
                    this.LobId == input.LobId ||
                    (this.LobId != null &&
                    this.LobId.Equals(input.LobId))
                ) && 
                (
                    this.Zone == input.Zone ||
                    (this.Zone != null &&
                    this.Zone.Equals(input.Zone))
                ) && 
                (
                    this.ShipDate == input.ShipDate ||
                    (this.ShipDate != null &&
                    this.ShipDate.Equals(input.ShipDate))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.CustomFields == input.CustomFields ||
                    this.CustomFields != null &&
                    this.CustomFields.SequenceEqual(input.CustomFields)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.CreateDate != null)
                    hashCode = hashCode * 59 + this.CreateDate.GetHashCode();
                if (this.ModifyDate != null)
                    hashCode = hashCode * 59 + this.ModifyDate.GetHashCode();
                if (this.OrderId != null)
                    hashCode = hashCode * 59 + this.OrderId.GetHashCode();
                if (this.CarrierId != null)
                    hashCode = hashCode * 59 + this.CarrierId.GetHashCode();
                if (this.ParcelAccountId != null)
                    hashCode = hashCode * 59 + this.ParcelAccountId.GetHashCode();
                if (this.ThirdPartyParcelAccountId != null)
                    hashCode = hashCode * 59 + this.ThirdPartyParcelAccountId.GetHashCode();
                if (this.Freight != null)
                    hashCode = hashCode * 59 + this.Freight.GetHashCode();
                if (this.TrackingNo != null)
                    hashCode = hashCode * 59 + this.TrackingNo.GetHashCode();
                if (this.Dim1In != null)
                    hashCode = hashCode * 59 + this.Dim1In.GetHashCode();
                if (this.Dim2In != null)
                    hashCode = hashCode * 59 + this.Dim2In.GetHashCode();
                if (this.Dim3In != null)
                    hashCode = hashCode * 59 + this.Dim3In.GetHashCode();
                if (this.WeightLbs != null)
                    hashCode = hashCode * 59 + this.WeightLbs.GetHashCode();
                if (this.DimWeight != null)
                    hashCode = hashCode * 59 + this.DimWeight.GetHashCode();
                if (this.Residential != null)
                    hashCode = hashCode * 59 + this.Residential.GetHashCode();
                if (this.LobId != null)
                    hashCode = hashCode * 59 + this.LobId.GetHashCode();
                if (this.Zone != null)
                    hashCode = hashCode * 59 + this.Zone.GetHashCode();
                if (this.ShipDate != null)
                    hashCode = hashCode * 59 + this.ShipDate.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.CustomFields != null)
                    hashCode = hashCode * 59 + this.CustomFields.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
