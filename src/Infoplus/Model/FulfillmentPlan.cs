/* 
 * Infoplus API
 *
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Infoplus.Client.SwaggerDateConverter;

namespace Infoplus.Model
{
    /// <summary>
    /// FulfillmentPlan
    /// </summary>
    [DataContract]
    public partial class FulfillmentPlan :  IEquatable<FulfillmentPlan>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FulfillmentPlan" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected FulfillmentPlan() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="FulfillmentPlan" /> class.
        /// </summary>
        /// <param name="Name">Name (required).</param>
        /// <param name="Description">Description.</param>
        /// <param name="WarehouseId">WarehouseId (required).</param>
        /// <param name="PriorityCode">PriorityCode.</param>
        /// <param name="OrderSmartFilterId">OrderSmartFilterId (required).</param>
        /// <param name="LocationSmartFilterId">LocationSmartFilterId.</param>
        /// <param name="MaxOrders">MaxOrders.</param>
        /// <param name="BatchSizeMax">BatchSizeMax.</param>
        /// <param name="BatchSizeMin">BatchSizeMin.</param>
        /// <param name="MaxCartons">MaxCartons.</param>
        /// <param name="Version">Version.</param>
        /// <param name="IsMassDistribution">IsMassDistribution (default to false).</param>
        /// <param name="CreatePickWork">CreatePickWork (required) (default to false).</param>
        /// <param name="PickingRule">PickingRule.</param>
        /// <param name="PickBatchGroupId">PickBatchGroupId.</param>
        /// <param name="MaxSKUsPerBatch">MaxSKUsPerBatch.</param>
        /// <param name="LayoutRule">LayoutRule.</param>
        /// <param name="PickSortRule">PickSortRule.</param>
        /// <param name="LocationSort">LocationSort.</param>
        /// <param name="CreatePickList">CreatePickList (default to false).</param>
        /// <param name="PickListFormat">PickListFormat.</param>
        /// <param name="PickListLayout">PickListLayout.</param>
        /// <param name="PickListGroup">PickListGroup.</param>
        /// <param name="PickListSort">PickListSort.</param>
        /// <param name="PickListLocationSort">PickListLocationSort.</param>
        /// <param name="CreatePickSummary">CreatePickSummary (default to false).</param>
        /// <param name="PickSummaryFormat">PickSummaryFormat.</param>
        /// <param name="PickSummaryLayout">PickSummaryLayout.</param>
        /// <param name="PickSummarySort">PickSummarySort.</param>
        /// <param name="PickScanSchemeId">PickScanSchemeId (required).</param>
        /// <param name="CartonizeOrders">CartonizeOrders (required) (default to false).</param>
        /// <param name="CartonizationScriptId">CartonizationScriptId.</param>
        /// <param name="AutoShipCasebreakCartons">AutoShipCasebreakCartons (default to false).</param>
        /// <param name="AutoShipOrders">AutoShipOrders (default to false).</param>
        /// <param name="PreGenerateParcelLabels">PreGenerateParcelLabels (default to false).</param>
        /// <param name="LabelSort">LabelSort.</param>
        /// <param name="CreatePackingSlip">CreatePackingSlip (required).</param>
        /// <param name="OverridePackingSlipTemplateId">OverridePackingSlipTemplateId.</param>
        /// <param name="CreateOrderAssemblyGuide">CreateOrderAssemblyGuide (default to false).</param>
        /// <param name="OrderAssemblyGuideLayout">OrderAssemblyGuideLayout.</param>
        /// <param name="CreateOrderInvoice">CreateOrderInvoice (required).</param>
        /// <param name="OverrideOrderInvoiceTemplateId">OverrideOrderInvoiceTemplateId.</param>
        /// <param name="CreateCartonGS1128Labels">CreateCartonGS1128Labels.</param>
        /// <param name="CreateLineItemEachGS1128Labels">CreateLineItemEachGS1128Labels.</param>
        /// <param name="SendToExternalShippingSystem">SendToExternalShippingSystem (required) (default to false).</param>
        /// <param name="ExternalShippingSystemId">ExternalShippingSystemId.</param>
        /// <param name="CustomFields">CustomFields.</param>
        public FulfillmentPlan(string Name = default(string), string Description = default(string), int? WarehouseId = default(int?), int? PriorityCode = default(int?), int? OrderSmartFilterId = default(int?), int? LocationSmartFilterId = default(int?), int? MaxOrders = default(int?), int? BatchSizeMax = default(int?), int? BatchSizeMin = default(int?), int? MaxCartons = default(int?), string Version = default(string), bool? IsMassDistribution = false, bool? CreatePickWork = false, string PickingRule = default(string), string PickBatchGroupId = default(string), int? MaxSKUsPerBatch = default(int?), string LayoutRule = default(string), string PickSortRule = default(string), string LocationSort = default(string), bool? CreatePickList = false, string PickListFormat = default(string), string PickListLayout = default(string), string PickListGroup = default(string), string PickListSort = default(string), string PickListLocationSort = default(string), bool? CreatePickSummary = false, string PickSummaryFormat = default(string), string PickSummaryLayout = default(string), string PickSummarySort = default(string), int? PickScanSchemeId = default(int?), bool? CartonizeOrders = false, int? CartonizationScriptId = default(int?), bool? AutoShipCasebreakCartons = false, bool? AutoShipOrders = false, bool? PreGenerateParcelLabels = false, string LabelSort = default(string), string CreatePackingSlip = default(string), int? OverridePackingSlipTemplateId = default(int?), bool? CreateOrderAssemblyGuide = false, string OrderAssemblyGuideLayout = default(string), string CreateOrderInvoice = default(string), int? OverrideOrderInvoiceTemplateId = default(int?), string CreateCartonGS1128Labels = default(string), string CreateLineItemEachGS1128Labels = default(string), bool? SendToExternalShippingSystem = false, int? ExternalShippingSystemId = default(int?), Dictionary<string, Object> CustomFields = default(Dictionary<string, Object>))
        {
            // to ensure "Name" is required (not null)
            if (Name == null)
            {
                throw new InvalidDataException("Name is a required property for FulfillmentPlan and cannot be null");
            }
            else
            {
                this.Name = Name;
            }
            // to ensure "WarehouseId" is required (not null)
            if (WarehouseId == null)
            {
                throw new InvalidDataException("WarehouseId is a required property for FulfillmentPlan and cannot be null");
            }
            else
            {
                this.WarehouseId = WarehouseId;
            }
            // to ensure "OrderSmartFilterId" is required (not null)
            if (OrderSmartFilterId == null)
            {
                throw new InvalidDataException("OrderSmartFilterId is a required property for FulfillmentPlan and cannot be null");
            }
            else
            {
                this.OrderSmartFilterId = OrderSmartFilterId;
            }
            // to ensure "CreatePickWork" is required (not null)
            if (CreatePickWork == null)
            {
                throw new InvalidDataException("CreatePickWork is a required property for FulfillmentPlan and cannot be null");
            }
            else
            {
                this.CreatePickWork = CreatePickWork;
            }
            // to ensure "PickScanSchemeId" is required (not null)
            if (PickScanSchemeId == null)
            {
                throw new InvalidDataException("PickScanSchemeId is a required property for FulfillmentPlan and cannot be null");
            }
            else
            {
                this.PickScanSchemeId = PickScanSchemeId;
            }
            // to ensure "CartonizeOrders" is required (not null)
            if (CartonizeOrders == null)
            {
                throw new InvalidDataException("CartonizeOrders is a required property for FulfillmentPlan and cannot be null");
            }
            else
            {
                this.CartonizeOrders = CartonizeOrders;
            }
            // to ensure "CreatePackingSlip" is required (not null)
            if (CreatePackingSlip == null)
            {
                throw new InvalidDataException("CreatePackingSlip is a required property for FulfillmentPlan and cannot be null");
            }
            else
            {
                this.CreatePackingSlip = CreatePackingSlip;
            }
            // to ensure "CreateOrderInvoice" is required (not null)
            if (CreateOrderInvoice == null)
            {
                throw new InvalidDataException("CreateOrderInvoice is a required property for FulfillmentPlan and cannot be null");
            }
            else
            {
                this.CreateOrderInvoice = CreateOrderInvoice;
            }
            // to ensure "SendToExternalShippingSystem" is required (not null)
            if (SendToExternalShippingSystem == null)
            {
                throw new InvalidDataException("SendToExternalShippingSystem is a required property for FulfillmentPlan and cannot be null");
            }
            else
            {
                this.SendToExternalShippingSystem = SendToExternalShippingSystem;
            }
            this.Description = Description;
            this.PriorityCode = PriorityCode;
            this.LocationSmartFilterId = LocationSmartFilterId;
            this.MaxOrders = MaxOrders;
            this.BatchSizeMax = BatchSizeMax;
            this.BatchSizeMin = BatchSizeMin;
            this.MaxCartons = MaxCartons;
            this.Version = Version;
            // use default value if no "IsMassDistribution" provided
            if (IsMassDistribution == null)
            {
                this.IsMassDistribution = false;
            }
            else
            {
                this.IsMassDistribution = IsMassDistribution;
            }
            this.PickingRule = PickingRule;
            this.PickBatchGroupId = PickBatchGroupId;
            this.MaxSKUsPerBatch = MaxSKUsPerBatch;
            this.LayoutRule = LayoutRule;
            this.PickSortRule = PickSortRule;
            this.LocationSort = LocationSort;
            // use default value if no "CreatePickList" provided
            if (CreatePickList == null)
            {
                this.CreatePickList = false;
            }
            else
            {
                this.CreatePickList = CreatePickList;
            }
            this.PickListFormat = PickListFormat;
            this.PickListLayout = PickListLayout;
            this.PickListGroup = PickListGroup;
            this.PickListSort = PickListSort;
            this.PickListLocationSort = PickListLocationSort;
            // use default value if no "CreatePickSummary" provided
            if (CreatePickSummary == null)
            {
                this.CreatePickSummary = false;
            }
            else
            {
                this.CreatePickSummary = CreatePickSummary;
            }
            this.PickSummaryFormat = PickSummaryFormat;
            this.PickSummaryLayout = PickSummaryLayout;
            this.PickSummarySort = PickSummarySort;
            this.CartonizationScriptId = CartonizationScriptId;
            // use default value if no "AutoShipCasebreakCartons" provided
            if (AutoShipCasebreakCartons == null)
            {
                this.AutoShipCasebreakCartons = false;
            }
            else
            {
                this.AutoShipCasebreakCartons = AutoShipCasebreakCartons;
            }
            // use default value if no "AutoShipOrders" provided
            if (AutoShipOrders == null)
            {
                this.AutoShipOrders = false;
            }
            else
            {
                this.AutoShipOrders = AutoShipOrders;
            }
            // use default value if no "PreGenerateParcelLabels" provided
            if (PreGenerateParcelLabels == null)
            {
                this.PreGenerateParcelLabels = false;
            }
            else
            {
                this.PreGenerateParcelLabels = PreGenerateParcelLabels;
            }
            this.LabelSort = LabelSort;
            this.OverridePackingSlipTemplateId = OverridePackingSlipTemplateId;
            // use default value if no "CreateOrderAssemblyGuide" provided
            if (CreateOrderAssemblyGuide == null)
            {
                this.CreateOrderAssemblyGuide = false;
            }
            else
            {
                this.CreateOrderAssemblyGuide = CreateOrderAssemblyGuide;
            }
            this.OrderAssemblyGuideLayout = OrderAssemblyGuideLayout;
            this.OverrideOrderInvoiceTemplateId = OverrideOrderInvoiceTemplateId;
            this.CreateCartonGS1128Labels = CreateCartonGS1128Labels;
            this.CreateLineItemEachGS1128Labels = CreateLineItemEachGS1128Labels;
            this.ExternalShippingSystemId = ExternalShippingSystemId;
            this.CustomFields = CustomFields;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; private set; }

        /// <summary>
        /// Gets or Sets CreateDate
        /// </summary>
        [DataMember(Name="createDate", EmitDefaultValue=false)]
        public DateTime? CreateDate { get; private set; }

        /// <summary>
        /// Gets or Sets ModifyDate
        /// </summary>
        [DataMember(Name="modifyDate", EmitDefaultValue=false)]
        public DateTime? ModifyDate { get; private set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets WarehouseId
        /// </summary>
        [DataMember(Name="warehouseId", EmitDefaultValue=false)]
        public int? WarehouseId { get; set; }

        /// <summary>
        /// Gets or Sets PriorityCode
        /// </summary>
        [DataMember(Name="priorityCode", EmitDefaultValue=false)]
        public int? PriorityCode { get; set; }

        /// <summary>
        /// Gets or Sets LastRunTime
        /// </summary>
        [DataMember(Name="lastRunTime", EmitDefaultValue=false)]
        public DateTime? LastRunTime { get; private set; }

        /// <summary>
        /// Gets or Sets OrderSmartFilterId
        /// </summary>
        [DataMember(Name="orderSmartFilterId", EmitDefaultValue=false)]
        public int? OrderSmartFilterId { get; set; }

        /// <summary>
        /// Gets or Sets LocationSmartFilterId
        /// </summary>
        [DataMember(Name="locationSmartFilterId", EmitDefaultValue=false)]
        public int? LocationSmartFilterId { get; set; }

        /// <summary>
        /// Gets or Sets MaxOrders
        /// </summary>
        [DataMember(Name="maxOrders", EmitDefaultValue=false)]
        public int? MaxOrders { get; set; }

        /// <summary>
        /// Gets or Sets BatchSizeMax
        /// </summary>
        [DataMember(Name="batchSizeMax", EmitDefaultValue=false)]
        public int? BatchSizeMax { get; set; }

        /// <summary>
        /// Gets or Sets BatchSizeMin
        /// </summary>
        [DataMember(Name="batchSizeMin", EmitDefaultValue=false)]
        public int? BatchSizeMin { get; set; }

        /// <summary>
        /// Gets or Sets MaxCartons
        /// </summary>
        [DataMember(Name="maxCartons", EmitDefaultValue=false)]
        public int? MaxCartons { get; set; }

        /// <summary>
        /// Gets or Sets Version
        /// </summary>
        [DataMember(Name="version", EmitDefaultValue=false)]
        public string Version { get; set; }

        /// <summary>
        /// Gets or Sets IsMassDistribution
        /// </summary>
        [DataMember(Name="isMassDistribution", EmitDefaultValue=false)]
        public bool? IsMassDistribution { get; set; }

        /// <summary>
        /// Gets or Sets CreatePickWork
        /// </summary>
        [DataMember(Name="createPickWork", EmitDefaultValue=false)]
        public bool? CreatePickWork { get; set; }

        /// <summary>
        /// Gets or Sets PickingRule
        /// </summary>
        [DataMember(Name="pickingRule", EmitDefaultValue=false)]
        public string PickingRule { get; set; }

        /// <summary>
        /// Gets or Sets PickBatchGroupId
        /// </summary>
        [DataMember(Name="pickBatchGroupId", EmitDefaultValue=false)]
        public string PickBatchGroupId { get; set; }

        /// <summary>
        /// Gets or Sets MaxSKUsPerBatch
        /// </summary>
        [DataMember(Name="maxSKUsPerBatch", EmitDefaultValue=false)]
        public int? MaxSKUsPerBatch { get; set; }

        /// <summary>
        /// Gets or Sets LayoutRule
        /// </summary>
        [DataMember(Name="layoutRule", EmitDefaultValue=false)]
        public string LayoutRule { get; set; }

        /// <summary>
        /// Gets or Sets PickSortRule
        /// </summary>
        [DataMember(Name="pickSortRule", EmitDefaultValue=false)]
        public string PickSortRule { get; set; }

        /// <summary>
        /// Gets or Sets LocationSort
        /// </summary>
        [DataMember(Name="locationSort", EmitDefaultValue=false)]
        public string LocationSort { get; set; }

        /// <summary>
        /// Gets or Sets CreatePickList
        /// </summary>
        [DataMember(Name="createPickList", EmitDefaultValue=false)]
        public bool? CreatePickList { get; set; }

        /// <summary>
        /// Gets or Sets PickListFormat
        /// </summary>
        [DataMember(Name="pickListFormat", EmitDefaultValue=false)]
        public string PickListFormat { get; set; }

        /// <summary>
        /// Gets or Sets PickListLayout
        /// </summary>
        [DataMember(Name="pickListLayout", EmitDefaultValue=false)]
        public string PickListLayout { get; set; }

        /// <summary>
        /// Gets or Sets PickListGroup
        /// </summary>
        [DataMember(Name="pickListGroup", EmitDefaultValue=false)]
        public string PickListGroup { get; set; }

        /// <summary>
        /// Gets or Sets PickListSort
        /// </summary>
        [DataMember(Name="pickListSort", EmitDefaultValue=false)]
        public string PickListSort { get; set; }

        /// <summary>
        /// Gets or Sets PickListLocationSort
        /// </summary>
        [DataMember(Name="pickListLocationSort", EmitDefaultValue=false)]
        public string PickListLocationSort { get; set; }

        /// <summary>
        /// Gets or Sets CreatePickSummary
        /// </summary>
        [DataMember(Name="createPickSummary", EmitDefaultValue=false)]
        public bool? CreatePickSummary { get; set; }

        /// <summary>
        /// Gets or Sets PickSummaryFormat
        /// </summary>
        [DataMember(Name="pickSummaryFormat", EmitDefaultValue=false)]
        public string PickSummaryFormat { get; set; }

        /// <summary>
        /// Gets or Sets PickSummaryLayout
        /// </summary>
        [DataMember(Name="pickSummaryLayout", EmitDefaultValue=false)]
        public string PickSummaryLayout { get; set; }

        /// <summary>
        /// Gets or Sets PickSummarySort
        /// </summary>
        [DataMember(Name="pickSummarySort", EmitDefaultValue=false)]
        public string PickSummarySort { get; set; }

        /// <summary>
        /// Gets or Sets PickScanSchemeId
        /// </summary>
        [DataMember(Name="pickScanSchemeId", EmitDefaultValue=false)]
        public int? PickScanSchemeId { get; set; }

        /// <summary>
        /// Gets or Sets CartonizeOrders
        /// </summary>
        [DataMember(Name="cartonizeOrders", EmitDefaultValue=false)]
        public bool? CartonizeOrders { get; set; }

        /// <summary>
        /// Gets or Sets CartonizationScriptId
        /// </summary>
        [DataMember(Name="cartonizationScriptId", EmitDefaultValue=false)]
        public int? CartonizationScriptId { get; set; }

        /// <summary>
        /// Gets or Sets AutoShipCasebreakCartons
        /// </summary>
        [DataMember(Name="autoShipCasebreakCartons", EmitDefaultValue=false)]
        public bool? AutoShipCasebreakCartons { get; set; }

        /// <summary>
        /// Gets or Sets AutoShipOrders
        /// </summary>
        [DataMember(Name="autoShipOrders", EmitDefaultValue=false)]
        public bool? AutoShipOrders { get; set; }

        /// <summary>
        /// Gets or Sets PreGenerateParcelLabels
        /// </summary>
        [DataMember(Name="preGenerateParcelLabels", EmitDefaultValue=false)]
        public bool? PreGenerateParcelLabels { get; set; }

        /// <summary>
        /// Gets or Sets LabelSort
        /// </summary>
        [DataMember(Name="labelSort", EmitDefaultValue=false)]
        public string LabelSort { get; set; }

        /// <summary>
        /// Gets or Sets CreatePackingSlip
        /// </summary>
        [DataMember(Name="createPackingSlip", EmitDefaultValue=false)]
        public string CreatePackingSlip { get; set; }

        /// <summary>
        /// Gets or Sets OverridePackingSlipTemplateId
        /// </summary>
        [DataMember(Name="overridePackingSlipTemplateId", EmitDefaultValue=false)]
        public int? OverridePackingSlipTemplateId { get; set; }

        /// <summary>
        /// Gets or Sets CreateOrderAssemblyGuide
        /// </summary>
        [DataMember(Name="createOrderAssemblyGuide", EmitDefaultValue=false)]
        public bool? CreateOrderAssemblyGuide { get; set; }

        /// <summary>
        /// Gets or Sets OrderAssemblyGuideLayout
        /// </summary>
        [DataMember(Name="orderAssemblyGuideLayout", EmitDefaultValue=false)]
        public string OrderAssemblyGuideLayout { get; set; }

        /// <summary>
        /// Gets or Sets CreateOrderInvoice
        /// </summary>
        [DataMember(Name="createOrderInvoice", EmitDefaultValue=false)]
        public string CreateOrderInvoice { get; set; }

        /// <summary>
        /// Gets or Sets OverrideOrderInvoiceTemplateId
        /// </summary>
        [DataMember(Name="overrideOrderInvoiceTemplateId", EmitDefaultValue=false)]
        public int? OverrideOrderInvoiceTemplateId { get; set; }

        /// <summary>
        /// Gets or Sets CreateCartonGS1128Labels
        /// </summary>
        [DataMember(Name="createCartonGS1128Labels", EmitDefaultValue=false)]
        public string CreateCartonGS1128Labels { get; set; }

        /// <summary>
        /// Gets or Sets CreateLineItemEachGS1128Labels
        /// </summary>
        [DataMember(Name="createLineItemEachGS1128Labels", EmitDefaultValue=false)]
        public string CreateLineItemEachGS1128Labels { get; set; }

        /// <summary>
        /// Gets or Sets SendToExternalShippingSystem
        /// </summary>
        [DataMember(Name="sendToExternalShippingSystem", EmitDefaultValue=false)]
        public bool? SendToExternalShippingSystem { get; set; }

        /// <summary>
        /// Gets or Sets ExternalShippingSystemId
        /// </summary>
        [DataMember(Name="externalShippingSystemId", EmitDefaultValue=false)]
        public int? ExternalShippingSystemId { get; set; }

        /// <summary>
        /// Gets or Sets CustomFields
        /// </summary>
        [DataMember(Name="customFields", EmitDefaultValue=false)]
        public Dictionary<string, Object> CustomFields { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FulfillmentPlan {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  CreateDate: ").Append(CreateDate).Append("\n");
            sb.Append("  ModifyDate: ").Append(ModifyDate).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  WarehouseId: ").Append(WarehouseId).Append("\n");
            sb.Append("  PriorityCode: ").Append(PriorityCode).Append("\n");
            sb.Append("  LastRunTime: ").Append(LastRunTime).Append("\n");
            sb.Append("  OrderSmartFilterId: ").Append(OrderSmartFilterId).Append("\n");
            sb.Append("  LocationSmartFilterId: ").Append(LocationSmartFilterId).Append("\n");
            sb.Append("  MaxOrders: ").Append(MaxOrders).Append("\n");
            sb.Append("  BatchSizeMax: ").Append(BatchSizeMax).Append("\n");
            sb.Append("  BatchSizeMin: ").Append(BatchSizeMin).Append("\n");
            sb.Append("  MaxCartons: ").Append(MaxCartons).Append("\n");
            sb.Append("  Version: ").Append(Version).Append("\n");
            sb.Append("  IsMassDistribution: ").Append(IsMassDistribution).Append("\n");
            sb.Append("  CreatePickWork: ").Append(CreatePickWork).Append("\n");
            sb.Append("  PickingRule: ").Append(PickingRule).Append("\n");
            sb.Append("  PickBatchGroupId: ").Append(PickBatchGroupId).Append("\n");
            sb.Append("  MaxSKUsPerBatch: ").Append(MaxSKUsPerBatch).Append("\n");
            sb.Append("  LayoutRule: ").Append(LayoutRule).Append("\n");
            sb.Append("  PickSortRule: ").Append(PickSortRule).Append("\n");
            sb.Append("  LocationSort: ").Append(LocationSort).Append("\n");
            sb.Append("  CreatePickList: ").Append(CreatePickList).Append("\n");
            sb.Append("  PickListFormat: ").Append(PickListFormat).Append("\n");
            sb.Append("  PickListLayout: ").Append(PickListLayout).Append("\n");
            sb.Append("  PickListGroup: ").Append(PickListGroup).Append("\n");
            sb.Append("  PickListSort: ").Append(PickListSort).Append("\n");
            sb.Append("  PickListLocationSort: ").Append(PickListLocationSort).Append("\n");
            sb.Append("  CreatePickSummary: ").Append(CreatePickSummary).Append("\n");
            sb.Append("  PickSummaryFormat: ").Append(PickSummaryFormat).Append("\n");
            sb.Append("  PickSummaryLayout: ").Append(PickSummaryLayout).Append("\n");
            sb.Append("  PickSummarySort: ").Append(PickSummarySort).Append("\n");
            sb.Append("  PickScanSchemeId: ").Append(PickScanSchemeId).Append("\n");
            sb.Append("  CartonizeOrders: ").Append(CartonizeOrders).Append("\n");
            sb.Append("  CartonizationScriptId: ").Append(CartonizationScriptId).Append("\n");
            sb.Append("  AutoShipCasebreakCartons: ").Append(AutoShipCasebreakCartons).Append("\n");
            sb.Append("  AutoShipOrders: ").Append(AutoShipOrders).Append("\n");
            sb.Append("  PreGenerateParcelLabels: ").Append(PreGenerateParcelLabels).Append("\n");
            sb.Append("  LabelSort: ").Append(LabelSort).Append("\n");
            sb.Append("  CreatePackingSlip: ").Append(CreatePackingSlip).Append("\n");
            sb.Append("  OverridePackingSlipTemplateId: ").Append(OverridePackingSlipTemplateId).Append("\n");
            sb.Append("  CreateOrderAssemblyGuide: ").Append(CreateOrderAssemblyGuide).Append("\n");
            sb.Append("  OrderAssemblyGuideLayout: ").Append(OrderAssemblyGuideLayout).Append("\n");
            sb.Append("  CreateOrderInvoice: ").Append(CreateOrderInvoice).Append("\n");
            sb.Append("  OverrideOrderInvoiceTemplateId: ").Append(OverrideOrderInvoiceTemplateId).Append("\n");
            sb.Append("  CreateCartonGS1128Labels: ").Append(CreateCartonGS1128Labels).Append("\n");
            sb.Append("  CreateLineItemEachGS1128Labels: ").Append(CreateLineItemEachGS1128Labels).Append("\n");
            sb.Append("  SendToExternalShippingSystem: ").Append(SendToExternalShippingSystem).Append("\n");
            sb.Append("  ExternalShippingSystemId: ").Append(ExternalShippingSystemId).Append("\n");
            sb.Append("  CustomFields: ").Append(CustomFields).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FulfillmentPlan);
        }

        /// <summary>
        /// Returns true if FulfillmentPlan instances are equal
        /// </summary>
        /// <param name="input">Instance of FulfillmentPlan to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FulfillmentPlan input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.CreateDate == input.CreateDate ||
                    (this.CreateDate != null &&
                    this.CreateDate.Equals(input.CreateDate))
                ) && 
                (
                    this.ModifyDate == input.ModifyDate ||
                    (this.ModifyDate != null &&
                    this.ModifyDate.Equals(input.ModifyDate))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.WarehouseId == input.WarehouseId ||
                    (this.WarehouseId != null &&
                    this.WarehouseId.Equals(input.WarehouseId))
                ) && 
                (
                    this.PriorityCode == input.PriorityCode ||
                    (this.PriorityCode != null &&
                    this.PriorityCode.Equals(input.PriorityCode))
                ) && 
                (
                    this.LastRunTime == input.LastRunTime ||
                    (this.LastRunTime != null &&
                    this.LastRunTime.Equals(input.LastRunTime))
                ) && 
                (
                    this.OrderSmartFilterId == input.OrderSmartFilterId ||
                    (this.OrderSmartFilterId != null &&
                    this.OrderSmartFilterId.Equals(input.OrderSmartFilterId))
                ) && 
                (
                    this.LocationSmartFilterId == input.LocationSmartFilterId ||
                    (this.LocationSmartFilterId != null &&
                    this.LocationSmartFilterId.Equals(input.LocationSmartFilterId))
                ) && 
                (
                    this.MaxOrders == input.MaxOrders ||
                    (this.MaxOrders != null &&
                    this.MaxOrders.Equals(input.MaxOrders))
                ) && 
                (
                    this.BatchSizeMax == input.BatchSizeMax ||
                    (this.BatchSizeMax != null &&
                    this.BatchSizeMax.Equals(input.BatchSizeMax))
                ) && 
                (
                    this.BatchSizeMin == input.BatchSizeMin ||
                    (this.BatchSizeMin != null &&
                    this.BatchSizeMin.Equals(input.BatchSizeMin))
                ) && 
                (
                    this.MaxCartons == input.MaxCartons ||
                    (this.MaxCartons != null &&
                    this.MaxCartons.Equals(input.MaxCartons))
                ) && 
                (
                    this.Version == input.Version ||
                    (this.Version != null &&
                    this.Version.Equals(input.Version))
                ) && 
                (
                    this.IsMassDistribution == input.IsMassDistribution ||
                    (this.IsMassDistribution != null &&
                    this.IsMassDistribution.Equals(input.IsMassDistribution))
                ) && 
                (
                    this.CreatePickWork == input.CreatePickWork ||
                    (this.CreatePickWork != null &&
                    this.CreatePickWork.Equals(input.CreatePickWork))
                ) && 
                (
                    this.PickingRule == input.PickingRule ||
                    (this.PickingRule != null &&
                    this.PickingRule.Equals(input.PickingRule))
                ) && 
                (
                    this.PickBatchGroupId == input.PickBatchGroupId ||
                    (this.PickBatchGroupId != null &&
                    this.PickBatchGroupId.Equals(input.PickBatchGroupId))
                ) && 
                (
                    this.MaxSKUsPerBatch == input.MaxSKUsPerBatch ||
                    (this.MaxSKUsPerBatch != null &&
                    this.MaxSKUsPerBatch.Equals(input.MaxSKUsPerBatch))
                ) && 
                (
                    this.LayoutRule == input.LayoutRule ||
                    (this.LayoutRule != null &&
                    this.LayoutRule.Equals(input.LayoutRule))
                ) && 
                (
                    this.PickSortRule == input.PickSortRule ||
                    (this.PickSortRule != null &&
                    this.PickSortRule.Equals(input.PickSortRule))
                ) && 
                (
                    this.LocationSort == input.LocationSort ||
                    (this.LocationSort != null &&
                    this.LocationSort.Equals(input.LocationSort))
                ) && 
                (
                    this.CreatePickList == input.CreatePickList ||
                    (this.CreatePickList != null &&
                    this.CreatePickList.Equals(input.CreatePickList))
                ) && 
                (
                    this.PickListFormat == input.PickListFormat ||
                    (this.PickListFormat != null &&
                    this.PickListFormat.Equals(input.PickListFormat))
                ) && 
                (
                    this.PickListLayout == input.PickListLayout ||
                    (this.PickListLayout != null &&
                    this.PickListLayout.Equals(input.PickListLayout))
                ) && 
                (
                    this.PickListGroup == input.PickListGroup ||
                    (this.PickListGroup != null &&
                    this.PickListGroup.Equals(input.PickListGroup))
                ) && 
                (
                    this.PickListSort == input.PickListSort ||
                    (this.PickListSort != null &&
                    this.PickListSort.Equals(input.PickListSort))
                ) && 
                (
                    this.PickListLocationSort == input.PickListLocationSort ||
                    (this.PickListLocationSort != null &&
                    this.PickListLocationSort.Equals(input.PickListLocationSort))
                ) && 
                (
                    this.CreatePickSummary == input.CreatePickSummary ||
                    (this.CreatePickSummary != null &&
                    this.CreatePickSummary.Equals(input.CreatePickSummary))
                ) && 
                (
                    this.PickSummaryFormat == input.PickSummaryFormat ||
                    (this.PickSummaryFormat != null &&
                    this.PickSummaryFormat.Equals(input.PickSummaryFormat))
                ) && 
                (
                    this.PickSummaryLayout == input.PickSummaryLayout ||
                    (this.PickSummaryLayout != null &&
                    this.PickSummaryLayout.Equals(input.PickSummaryLayout))
                ) && 
                (
                    this.PickSummarySort == input.PickSummarySort ||
                    (this.PickSummarySort != null &&
                    this.PickSummarySort.Equals(input.PickSummarySort))
                ) && 
                (
                    this.PickScanSchemeId == input.PickScanSchemeId ||
                    (this.PickScanSchemeId != null &&
                    this.PickScanSchemeId.Equals(input.PickScanSchemeId))
                ) && 
                (
                    this.CartonizeOrders == input.CartonizeOrders ||
                    (this.CartonizeOrders != null &&
                    this.CartonizeOrders.Equals(input.CartonizeOrders))
                ) && 
                (
                    this.CartonizationScriptId == input.CartonizationScriptId ||
                    (this.CartonizationScriptId != null &&
                    this.CartonizationScriptId.Equals(input.CartonizationScriptId))
                ) && 
                (
                    this.AutoShipCasebreakCartons == input.AutoShipCasebreakCartons ||
                    (this.AutoShipCasebreakCartons != null &&
                    this.AutoShipCasebreakCartons.Equals(input.AutoShipCasebreakCartons))
                ) && 
                (
                    this.AutoShipOrders == input.AutoShipOrders ||
                    (this.AutoShipOrders != null &&
                    this.AutoShipOrders.Equals(input.AutoShipOrders))
                ) && 
                (
                    this.PreGenerateParcelLabels == input.PreGenerateParcelLabels ||
                    (this.PreGenerateParcelLabels != null &&
                    this.PreGenerateParcelLabels.Equals(input.PreGenerateParcelLabels))
                ) && 
                (
                    this.LabelSort == input.LabelSort ||
                    (this.LabelSort != null &&
                    this.LabelSort.Equals(input.LabelSort))
                ) && 
                (
                    this.CreatePackingSlip == input.CreatePackingSlip ||
                    (this.CreatePackingSlip != null &&
                    this.CreatePackingSlip.Equals(input.CreatePackingSlip))
                ) && 
                (
                    this.OverridePackingSlipTemplateId == input.OverridePackingSlipTemplateId ||
                    (this.OverridePackingSlipTemplateId != null &&
                    this.OverridePackingSlipTemplateId.Equals(input.OverridePackingSlipTemplateId))
                ) && 
                (
                    this.CreateOrderAssemblyGuide == input.CreateOrderAssemblyGuide ||
                    (this.CreateOrderAssemblyGuide != null &&
                    this.CreateOrderAssemblyGuide.Equals(input.CreateOrderAssemblyGuide))
                ) && 
                (
                    this.OrderAssemblyGuideLayout == input.OrderAssemblyGuideLayout ||
                    (this.OrderAssemblyGuideLayout != null &&
                    this.OrderAssemblyGuideLayout.Equals(input.OrderAssemblyGuideLayout))
                ) && 
                (
                    this.CreateOrderInvoice == input.CreateOrderInvoice ||
                    (this.CreateOrderInvoice != null &&
                    this.CreateOrderInvoice.Equals(input.CreateOrderInvoice))
                ) && 
                (
                    this.OverrideOrderInvoiceTemplateId == input.OverrideOrderInvoiceTemplateId ||
                    (this.OverrideOrderInvoiceTemplateId != null &&
                    this.OverrideOrderInvoiceTemplateId.Equals(input.OverrideOrderInvoiceTemplateId))
                ) && 
                (
                    this.CreateCartonGS1128Labels == input.CreateCartonGS1128Labels ||
                    (this.CreateCartonGS1128Labels != null &&
                    this.CreateCartonGS1128Labels.Equals(input.CreateCartonGS1128Labels))
                ) && 
                (
                    this.CreateLineItemEachGS1128Labels == input.CreateLineItemEachGS1128Labels ||
                    (this.CreateLineItemEachGS1128Labels != null &&
                    this.CreateLineItemEachGS1128Labels.Equals(input.CreateLineItemEachGS1128Labels))
                ) && 
                (
                    this.SendToExternalShippingSystem == input.SendToExternalShippingSystem ||
                    (this.SendToExternalShippingSystem != null &&
                    this.SendToExternalShippingSystem.Equals(input.SendToExternalShippingSystem))
                ) && 
                (
                    this.ExternalShippingSystemId == input.ExternalShippingSystemId ||
                    (this.ExternalShippingSystemId != null &&
                    this.ExternalShippingSystemId.Equals(input.ExternalShippingSystemId))
                ) && 
                (
                    this.CustomFields == input.CustomFields ||
                    this.CustomFields != null &&
                    this.CustomFields.SequenceEqual(input.CustomFields)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.CreateDate != null)
                    hashCode = hashCode * 59 + this.CreateDate.GetHashCode();
                if (this.ModifyDate != null)
                    hashCode = hashCode * 59 + this.ModifyDate.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.WarehouseId != null)
                    hashCode = hashCode * 59 + this.WarehouseId.GetHashCode();
                if (this.PriorityCode != null)
                    hashCode = hashCode * 59 + this.PriorityCode.GetHashCode();
                if (this.LastRunTime != null)
                    hashCode = hashCode * 59 + this.LastRunTime.GetHashCode();
                if (this.OrderSmartFilterId != null)
                    hashCode = hashCode * 59 + this.OrderSmartFilterId.GetHashCode();
                if (this.LocationSmartFilterId != null)
                    hashCode = hashCode * 59 + this.LocationSmartFilterId.GetHashCode();
                if (this.MaxOrders != null)
                    hashCode = hashCode * 59 + this.MaxOrders.GetHashCode();
                if (this.BatchSizeMax != null)
                    hashCode = hashCode * 59 + this.BatchSizeMax.GetHashCode();
                if (this.BatchSizeMin != null)
                    hashCode = hashCode * 59 + this.BatchSizeMin.GetHashCode();
                if (this.MaxCartons != null)
                    hashCode = hashCode * 59 + this.MaxCartons.GetHashCode();
                if (this.Version != null)
                    hashCode = hashCode * 59 + this.Version.GetHashCode();
                if (this.IsMassDistribution != null)
                    hashCode = hashCode * 59 + this.IsMassDistribution.GetHashCode();
                if (this.CreatePickWork != null)
                    hashCode = hashCode * 59 + this.CreatePickWork.GetHashCode();
                if (this.PickingRule != null)
                    hashCode = hashCode * 59 + this.PickingRule.GetHashCode();
                if (this.PickBatchGroupId != null)
                    hashCode = hashCode * 59 + this.PickBatchGroupId.GetHashCode();
                if (this.MaxSKUsPerBatch != null)
                    hashCode = hashCode * 59 + this.MaxSKUsPerBatch.GetHashCode();
                if (this.LayoutRule != null)
                    hashCode = hashCode * 59 + this.LayoutRule.GetHashCode();
                if (this.PickSortRule != null)
                    hashCode = hashCode * 59 + this.PickSortRule.GetHashCode();
                if (this.LocationSort != null)
                    hashCode = hashCode * 59 + this.LocationSort.GetHashCode();
                if (this.CreatePickList != null)
                    hashCode = hashCode * 59 + this.CreatePickList.GetHashCode();
                if (this.PickListFormat != null)
                    hashCode = hashCode * 59 + this.PickListFormat.GetHashCode();
                if (this.PickListLayout != null)
                    hashCode = hashCode * 59 + this.PickListLayout.GetHashCode();
                if (this.PickListGroup != null)
                    hashCode = hashCode * 59 + this.PickListGroup.GetHashCode();
                if (this.PickListSort != null)
                    hashCode = hashCode * 59 + this.PickListSort.GetHashCode();
                if (this.PickListLocationSort != null)
                    hashCode = hashCode * 59 + this.PickListLocationSort.GetHashCode();
                if (this.CreatePickSummary != null)
                    hashCode = hashCode * 59 + this.CreatePickSummary.GetHashCode();
                if (this.PickSummaryFormat != null)
                    hashCode = hashCode * 59 + this.PickSummaryFormat.GetHashCode();
                if (this.PickSummaryLayout != null)
                    hashCode = hashCode * 59 + this.PickSummaryLayout.GetHashCode();
                if (this.PickSummarySort != null)
                    hashCode = hashCode * 59 + this.PickSummarySort.GetHashCode();
                if (this.PickScanSchemeId != null)
                    hashCode = hashCode * 59 + this.PickScanSchemeId.GetHashCode();
                if (this.CartonizeOrders != null)
                    hashCode = hashCode * 59 + this.CartonizeOrders.GetHashCode();
                if (this.CartonizationScriptId != null)
                    hashCode = hashCode * 59 + this.CartonizationScriptId.GetHashCode();
                if (this.AutoShipCasebreakCartons != null)
                    hashCode = hashCode * 59 + this.AutoShipCasebreakCartons.GetHashCode();
                if (this.AutoShipOrders != null)
                    hashCode = hashCode * 59 + this.AutoShipOrders.GetHashCode();
                if (this.PreGenerateParcelLabels != null)
                    hashCode = hashCode * 59 + this.PreGenerateParcelLabels.GetHashCode();
                if (this.LabelSort != null)
                    hashCode = hashCode * 59 + this.LabelSort.GetHashCode();
                if (this.CreatePackingSlip != null)
                    hashCode = hashCode * 59 + this.CreatePackingSlip.GetHashCode();
                if (this.OverridePackingSlipTemplateId != null)
                    hashCode = hashCode * 59 + this.OverridePackingSlipTemplateId.GetHashCode();
                if (this.CreateOrderAssemblyGuide != null)
                    hashCode = hashCode * 59 + this.CreateOrderAssemblyGuide.GetHashCode();
                if (this.OrderAssemblyGuideLayout != null)
                    hashCode = hashCode * 59 + this.OrderAssemblyGuideLayout.GetHashCode();
                if (this.CreateOrderInvoice != null)
                    hashCode = hashCode * 59 + this.CreateOrderInvoice.GetHashCode();
                if (this.OverrideOrderInvoiceTemplateId != null)
                    hashCode = hashCode * 59 + this.OverrideOrderInvoiceTemplateId.GetHashCode();
                if (this.CreateCartonGS1128Labels != null)
                    hashCode = hashCode * 59 + this.CreateCartonGS1128Labels.GetHashCode();
                if (this.CreateLineItemEachGS1128Labels != null)
                    hashCode = hashCode * 59 + this.CreateLineItemEachGS1128Labels.GetHashCode();
                if (this.SendToExternalShippingSystem != null)
                    hashCode = hashCode * 59 + this.SendToExternalShippingSystem.GetHashCode();
                if (this.ExternalShippingSystemId != null)
                    hashCode = hashCode * 59 + this.ExternalShippingSystemId.GetHashCode();
                if (this.CustomFields != null)
                    hashCode = hashCode * 59 + this.CustomFields.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
