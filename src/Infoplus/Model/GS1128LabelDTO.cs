/* 
 * Infoplus API
 *
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Infoplus.Client.SwaggerDateConverter;

namespace Infoplus.Model
{
    /// <summary>
    /// GS1128LabelDTO
    /// </summary>
    [DataContract]
    public partial class GS1128LabelDTO :  IEquatable<GS1128LabelDTO>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GS1128LabelDTO" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GS1128LabelDTO() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GS1128LabelDTO" /> class.
        /// </summary>
        /// <param name="NoOfCopies">NoOfCopies.</param>
        /// <param name="LobId">LobId (required).</param>
        /// <param name="OrderNo">OrderNo (required).</param>
        /// <param name="RecordType">RecordType.</param>
        /// <param name="PalletLoadId">PalletLoadId.</param>
        /// <param name="MasterCartonLoadId">MasterCartonLoadId.</param>
        /// <param name="CartonId">CartonId.</param>
        /// <param name="LineItemId">LineItemId.</param>
        /// <param name="CustomFields">CustomFields.</param>
        public GS1128LabelDTO(int? NoOfCopies = default(int?), int? LobId = default(int?), decimal? OrderNo = default(decimal?), string RecordType = default(string), int? PalletLoadId = default(int?), int? MasterCartonLoadId = default(int?), int? CartonId = default(int?), int? LineItemId = default(int?), Dictionary<string, Object> CustomFields = default(Dictionary<string, Object>))
        {
            // to ensure "LobId" is required (not null)
            if (LobId == null)
            {
                throw new InvalidDataException("LobId is a required property for GS1128LabelDTO and cannot be null");
            }
            else
            {
                this.LobId = LobId;
            }
            // to ensure "OrderNo" is required (not null)
            if (OrderNo == null)
            {
                throw new InvalidDataException("OrderNo is a required property for GS1128LabelDTO and cannot be null");
            }
            else
            {
                this.OrderNo = OrderNo;
            }
            this.NoOfCopies = NoOfCopies;
            this.RecordType = RecordType;
            this.PalletLoadId = PalletLoadId;
            this.MasterCartonLoadId = MasterCartonLoadId;
            this.CartonId = CartonId;
            this.LineItemId = LineItemId;
            this.CustomFields = CustomFields;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; private set; }

        /// <summary>
        /// Gets or Sets CreateDate
        /// </summary>
        [DataMember(Name="createDate", EmitDefaultValue=false)]
        public DateTime? CreateDate { get; private set; }

        /// <summary>
        /// Gets or Sets Gs1128TemplateId
        /// </summary>
        [DataMember(Name="gs1128TemplateId", EmitDefaultValue=false)]
        public int? Gs1128TemplateId { get; private set; }

        /// <summary>
        /// Gets or Sets NoOfCopies
        /// </summary>
        [DataMember(Name="noOfCopies", EmitDefaultValue=false)]
        public int? NoOfCopies { get; set; }

        /// <summary>
        /// Gets or Sets LobId
        /// </summary>
        [DataMember(Name="lobId", EmitDefaultValue=false)]
        public int? LobId { get; set; }

        /// <summary>
        /// Gets or Sets OrderNo
        /// </summary>
        [DataMember(Name="orderNo", EmitDefaultValue=false)]
        public decimal? OrderNo { get; set; }

        /// <summary>
        /// Gets or Sets RecordType
        /// </summary>
        [DataMember(Name="recordType", EmitDefaultValue=false)]
        public string RecordType { get; set; }

        /// <summary>
        /// Gets or Sets PalletLoadId
        /// </summary>
        [DataMember(Name="palletLoadId", EmitDefaultValue=false)]
        public int? PalletLoadId { get; set; }

        /// <summary>
        /// Gets or Sets MasterCartonLoadId
        /// </summary>
        [DataMember(Name="masterCartonLoadId", EmitDefaultValue=false)]
        public int? MasterCartonLoadId { get; set; }

        /// <summary>
        /// Gets or Sets CartonId
        /// </summary>
        [DataMember(Name="cartonId", EmitDefaultValue=false)]
        public int? CartonId { get; set; }

        /// <summary>
        /// Gets or Sets LineItemId
        /// </summary>
        [DataMember(Name="lineItemId", EmitDefaultValue=false)]
        public int? LineItemId { get; set; }

        /// <summary>
        /// Gets or Sets LineItemUnitNo
        /// </summary>
        [DataMember(Name="lineItemUnitNo", EmitDefaultValue=false)]
        public int? LineItemUnitNo { get; private set; }

        /// <summary>
        /// Gets or Sets ModifyDate
        /// </summary>
        [DataMember(Name="modifyDate", EmitDefaultValue=false)]
        public DateTime? ModifyDate { get; private set; }

        /// <summary>
        /// Gets or Sets Sscc
        /// </summary>
        [DataMember(Name="sscc", EmitDefaultValue=false)]
        public string Sscc { get; private set; }

        /// <summary>
        /// Gets or Sets CustomFields
        /// </summary>
        [DataMember(Name="customFields", EmitDefaultValue=false)]
        public Dictionary<string, Object> CustomFields { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GS1128LabelDTO {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  CreateDate: ").Append(CreateDate).Append("\n");
            sb.Append("  Gs1128TemplateId: ").Append(Gs1128TemplateId).Append("\n");
            sb.Append("  NoOfCopies: ").Append(NoOfCopies).Append("\n");
            sb.Append("  LobId: ").Append(LobId).Append("\n");
            sb.Append("  OrderNo: ").Append(OrderNo).Append("\n");
            sb.Append("  RecordType: ").Append(RecordType).Append("\n");
            sb.Append("  PalletLoadId: ").Append(PalletLoadId).Append("\n");
            sb.Append("  MasterCartonLoadId: ").Append(MasterCartonLoadId).Append("\n");
            sb.Append("  CartonId: ").Append(CartonId).Append("\n");
            sb.Append("  LineItemId: ").Append(LineItemId).Append("\n");
            sb.Append("  LineItemUnitNo: ").Append(LineItemUnitNo).Append("\n");
            sb.Append("  ModifyDate: ").Append(ModifyDate).Append("\n");
            sb.Append("  Sscc: ").Append(Sscc).Append("\n");
            sb.Append("  CustomFields: ").Append(CustomFields).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GS1128LabelDTO);
        }

        /// <summary>
        /// Returns true if GS1128LabelDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of GS1128LabelDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GS1128LabelDTO input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.CreateDate == input.CreateDate ||
                    (this.CreateDate != null &&
                    this.CreateDate.Equals(input.CreateDate))
                ) && 
                (
                    this.Gs1128TemplateId == input.Gs1128TemplateId ||
                    (this.Gs1128TemplateId != null &&
                    this.Gs1128TemplateId.Equals(input.Gs1128TemplateId))
                ) && 
                (
                    this.NoOfCopies == input.NoOfCopies ||
                    (this.NoOfCopies != null &&
                    this.NoOfCopies.Equals(input.NoOfCopies))
                ) && 
                (
                    this.LobId == input.LobId ||
                    (this.LobId != null &&
                    this.LobId.Equals(input.LobId))
                ) && 
                (
                    this.OrderNo == input.OrderNo ||
                    (this.OrderNo != null &&
                    this.OrderNo.Equals(input.OrderNo))
                ) && 
                (
                    this.RecordType == input.RecordType ||
                    (this.RecordType != null &&
                    this.RecordType.Equals(input.RecordType))
                ) && 
                (
                    this.PalletLoadId == input.PalletLoadId ||
                    (this.PalletLoadId != null &&
                    this.PalletLoadId.Equals(input.PalletLoadId))
                ) && 
                (
                    this.MasterCartonLoadId == input.MasterCartonLoadId ||
                    (this.MasterCartonLoadId != null &&
                    this.MasterCartonLoadId.Equals(input.MasterCartonLoadId))
                ) && 
                (
                    this.CartonId == input.CartonId ||
                    (this.CartonId != null &&
                    this.CartonId.Equals(input.CartonId))
                ) && 
                (
                    this.LineItemId == input.LineItemId ||
                    (this.LineItemId != null &&
                    this.LineItemId.Equals(input.LineItemId))
                ) && 
                (
                    this.LineItemUnitNo == input.LineItemUnitNo ||
                    (this.LineItemUnitNo != null &&
                    this.LineItemUnitNo.Equals(input.LineItemUnitNo))
                ) && 
                (
                    this.ModifyDate == input.ModifyDate ||
                    (this.ModifyDate != null &&
                    this.ModifyDate.Equals(input.ModifyDate))
                ) && 
                (
                    this.Sscc == input.Sscc ||
                    (this.Sscc != null &&
                    this.Sscc.Equals(input.Sscc))
                ) && 
                (
                    this.CustomFields == input.CustomFields ||
                    this.CustomFields != null &&
                    this.CustomFields.SequenceEqual(input.CustomFields)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.CreateDate != null)
                    hashCode = hashCode * 59 + this.CreateDate.GetHashCode();
                if (this.Gs1128TemplateId != null)
                    hashCode = hashCode * 59 + this.Gs1128TemplateId.GetHashCode();
                if (this.NoOfCopies != null)
                    hashCode = hashCode * 59 + this.NoOfCopies.GetHashCode();
                if (this.LobId != null)
                    hashCode = hashCode * 59 + this.LobId.GetHashCode();
                if (this.OrderNo != null)
                    hashCode = hashCode * 59 + this.OrderNo.GetHashCode();
                if (this.RecordType != null)
                    hashCode = hashCode * 59 + this.RecordType.GetHashCode();
                if (this.PalletLoadId != null)
                    hashCode = hashCode * 59 + this.PalletLoadId.GetHashCode();
                if (this.MasterCartonLoadId != null)
                    hashCode = hashCode * 59 + this.MasterCartonLoadId.GetHashCode();
                if (this.CartonId != null)
                    hashCode = hashCode * 59 + this.CartonId.GetHashCode();
                if (this.LineItemId != null)
                    hashCode = hashCode * 59 + this.LineItemId.GetHashCode();
                if (this.LineItemUnitNo != null)
                    hashCode = hashCode * 59 + this.LineItemUnitNo.GetHashCode();
                if (this.ModifyDate != null)
                    hashCode = hashCode * 59 + this.ModifyDate.GetHashCode();
                if (this.Sscc != null)
                    hashCode = hashCode * 59 + this.Sscc.GetHashCode();
                if (this.CustomFields != null)
                    hashCode = hashCode * 59 + this.CustomFields.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
