/* 
 * Infoplus API
 *
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Infoplus.Client.SwaggerDateConverter;

namespace Infoplus.Model
{
    /// <summary>
    /// GetOrderPackDataInput
    /// </summary>
    [DataContract]
    public partial class GetOrderPackDataInput :  IEquatable<GetOrderPackDataInput>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetOrderPackDataInput" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GetOrderPackDataInput() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GetOrderPackDataInput" /> class.
        /// </summary>
        /// <param name="OrderNo">OrderNo (required).</param>
        public GetOrderPackDataInput(string OrderNo = default(string))
        {
            // to ensure "OrderNo" is required (not null)
            if (OrderNo == null)
            {
                throw new InvalidDataException("OrderNo is a required property for GetOrderPackDataInput and cannot be null");
            }
            else
            {
                this.OrderNo = OrderNo;
            }
        }
        
        /// <summary>
        /// Gets or Sets OrderNo
        /// </summary>
        [DataMember(Name="orderNo", EmitDefaultValue=false)]
        public string OrderNo { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GetOrderPackDataInput {\n");
            sb.Append("  OrderNo: ").Append(OrderNo).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetOrderPackDataInput);
        }

        /// <summary>
        /// Returns true if GetOrderPackDataInput instances are equal
        /// </summary>
        /// <param name="input">Instance of GetOrderPackDataInput to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetOrderPackDataInput input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.OrderNo == input.OrderNo ||
                    (this.OrderNo != null &&
                    this.OrderNo.Equals(input.OrderNo))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.OrderNo != null)
                    hashCode = hashCode * 59 + this.OrderNo.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
