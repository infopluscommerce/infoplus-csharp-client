/* 
 * Infoplus API
 *
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Infoplus.Client.SwaggerDateConverter;

namespace Infoplus.Model
{
    /// <summary>
    /// GetOrderPackDataOutput
    /// </summary>
    [DataContract]
    public partial class GetOrderPackDataOutput :  IEquatable<GetOrderPackDataOutput>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetOrderPackDataOutput" /> class.
        /// </summary>
        /// <param name="OrderNo">OrderNo.</param>
        /// <param name="Order">Order.</param>
        /// <param name="PalletList">PalletList.</param>
        /// <param name="MasterCartonList">MasterCartonList.</param>
        /// <param name="CartonList">CartonList.</param>
        /// <param name="FullItemList">FullItemList.</param>
        /// <param name="UnpackedItemList">UnpackedItemList.</param>
        public GetOrderPackDataOutput(string OrderNo = default(string), Order Order = default(Order), List<PackedPallet> PalletList = default(List<PackedPallet>), List<PackedMasterCarton> MasterCartonList = default(List<PackedMasterCarton>), List<PackedCarton> CartonList = default(List<PackedCarton>), List<PackedItem> FullItemList = default(List<PackedItem>), List<PackedItem> UnpackedItemList = default(List<PackedItem>))
        {
            this.OrderNo = OrderNo;
            this.Order = Order;
            this.PalletList = PalletList;
            this.MasterCartonList = MasterCartonList;
            this.CartonList = CartonList;
            this.FullItemList = FullItemList;
            this.UnpackedItemList = UnpackedItemList;
        }
        
        /// <summary>
        /// Gets or Sets OrderNo
        /// </summary>
        [DataMember(Name="orderNo", EmitDefaultValue=false)]
        public string OrderNo { get; set; }

        /// <summary>
        /// Gets or Sets Order
        /// </summary>
        [DataMember(Name="order", EmitDefaultValue=false)]
        public Order Order { get; set; }

        /// <summary>
        /// Gets or Sets PalletList
        /// </summary>
        [DataMember(Name="palletList", EmitDefaultValue=false)]
        public List<PackedPallet> PalletList { get; set; }

        /// <summary>
        /// Gets or Sets MasterCartonList
        /// </summary>
        [DataMember(Name="masterCartonList", EmitDefaultValue=false)]
        public List<PackedMasterCarton> MasterCartonList { get; set; }

        /// <summary>
        /// Gets or Sets CartonList
        /// </summary>
        [DataMember(Name="cartonList", EmitDefaultValue=false)]
        public List<PackedCarton> CartonList { get; set; }

        /// <summary>
        /// Gets or Sets FullItemList
        /// </summary>
        [DataMember(Name="fullItemList", EmitDefaultValue=false)]
        public List<PackedItem> FullItemList { get; set; }

        /// <summary>
        /// Gets or Sets UnpackedItemList
        /// </summary>
        [DataMember(Name="unpackedItemList", EmitDefaultValue=false)]
        public List<PackedItem> UnpackedItemList { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GetOrderPackDataOutput {\n");
            sb.Append("  OrderNo: ").Append(OrderNo).Append("\n");
            sb.Append("  Order: ").Append(Order).Append("\n");
            sb.Append("  PalletList: ").Append(PalletList).Append("\n");
            sb.Append("  MasterCartonList: ").Append(MasterCartonList).Append("\n");
            sb.Append("  CartonList: ").Append(CartonList).Append("\n");
            sb.Append("  FullItemList: ").Append(FullItemList).Append("\n");
            sb.Append("  UnpackedItemList: ").Append(UnpackedItemList).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetOrderPackDataOutput);
        }

        /// <summary>
        /// Returns true if GetOrderPackDataOutput instances are equal
        /// </summary>
        /// <param name="input">Instance of GetOrderPackDataOutput to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetOrderPackDataOutput input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.OrderNo == input.OrderNo ||
                    (this.OrderNo != null &&
                    this.OrderNo.Equals(input.OrderNo))
                ) && 
                (
                    this.Order == input.Order ||
                    (this.Order != null &&
                    this.Order.Equals(input.Order))
                ) && 
                (
                    this.PalletList == input.PalletList ||
                    this.PalletList != null &&
                    this.PalletList.SequenceEqual(input.PalletList)
                ) && 
                (
                    this.MasterCartonList == input.MasterCartonList ||
                    this.MasterCartonList != null &&
                    this.MasterCartonList.SequenceEqual(input.MasterCartonList)
                ) && 
                (
                    this.CartonList == input.CartonList ||
                    this.CartonList != null &&
                    this.CartonList.SequenceEqual(input.CartonList)
                ) && 
                (
                    this.FullItemList == input.FullItemList ||
                    this.FullItemList != null &&
                    this.FullItemList.SequenceEqual(input.FullItemList)
                ) && 
                (
                    this.UnpackedItemList == input.UnpackedItemList ||
                    this.UnpackedItemList != null &&
                    this.UnpackedItemList.SequenceEqual(input.UnpackedItemList)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.OrderNo != null)
                    hashCode = hashCode * 59 + this.OrderNo.GetHashCode();
                if (this.Order != null)
                    hashCode = hashCode * 59 + this.Order.GetHashCode();
                if (this.PalletList != null)
                    hashCode = hashCode * 59 + this.PalletList.GetHashCode();
                if (this.MasterCartonList != null)
                    hashCode = hashCode * 59 + this.MasterCartonList.GetHashCode();
                if (this.CartonList != null)
                    hashCode = hashCode * 59 + this.CartonList.GetHashCode();
                if (this.FullItemList != null)
                    hashCode = hashCode * 59 + this.FullItemList.GetHashCode();
                if (this.UnpackedItemList != null)
                    hashCode = hashCode * 59 + this.UnpackedItemList.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
