/* 
 * Infoplus API
 *
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Infoplus.Client.SwaggerDateConverter;

namespace Infoplus.Model
{
    /// <summary>
    /// InvoiceWorksheetLineDetail
    /// </summary>
    [DataContract]
    public partial class InvoiceWorksheetLineDetail :  IEquatable<InvoiceWorksheetLineDetail>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InvoiceWorksheetLineDetail" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected InvoiceWorksheetLineDetail() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="InvoiceWorksheetLineDetail" /> class.
        /// </summary>
        /// <param name="LobId">LobId (required).</param>
        /// <param name="Quantity">Quantity.</param>
        /// <param name="ChargeRate">ChargeRate.</param>
        /// <param name="ExtendedCharge">ExtendedCharge.</param>
        /// <param name="InvoiceWorksheetId">InvoiceWorksheetId (required).</param>
        /// <param name="InvoiceWorksheetLineId">InvoiceWorksheetLineId.</param>
        /// <param name="ActivityType">ActivityType.</param>
        /// <param name="Reference1">Reference1.</param>
        /// <param name="Reference2">Reference2.</param>
        /// <param name="Reference3">Reference3.</param>
        /// <param name="Reference4">Reference4.</param>
        /// <param name="Reference5">Reference5.</param>
        /// <param name="ActivityRecord">ActivityRecord.</param>
        /// <param name="CustomFields">CustomFields.</param>
        public InvoiceWorksheetLineDetail(int? LobId = default(int?), decimal? Quantity = default(decimal?), decimal? ChargeRate = default(decimal?), decimal? ExtendedCharge = default(decimal?), int? InvoiceWorksheetId = default(int?), int? InvoiceWorksheetLineId = default(int?), string ActivityType = default(string), string Reference1 = default(string), string Reference2 = default(string), string Reference3 = default(string), string Reference4 = default(string), string Reference5 = default(string), Dictionary<string, Object> ActivityRecord = default(Dictionary<string, Object>), Dictionary<string, Object> CustomFields = default(Dictionary<string, Object>))
        {
            // to ensure "LobId" is required (not null)
            if (LobId == null)
            {
                throw new InvalidDataException("LobId is a required property for InvoiceWorksheetLineDetail and cannot be null");
            }
            else
            {
                this.LobId = LobId;
            }
            // to ensure "InvoiceWorksheetId" is required (not null)
            if (InvoiceWorksheetId == null)
            {
                throw new InvalidDataException("InvoiceWorksheetId is a required property for InvoiceWorksheetLineDetail and cannot be null");
            }
            else
            {
                this.InvoiceWorksheetId = InvoiceWorksheetId;
            }
            this.Quantity = Quantity;
            this.ChargeRate = ChargeRate;
            this.ExtendedCharge = ExtendedCharge;
            this.InvoiceWorksheetLineId = InvoiceWorksheetLineId;
            this.ActivityType = ActivityType;
            this.Reference1 = Reference1;
            this.Reference2 = Reference2;
            this.Reference3 = Reference3;
            this.Reference4 = Reference4;
            this.Reference5 = Reference5;
            this.ActivityRecord = ActivityRecord;
            this.CustomFields = CustomFields;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; private set; }

        /// <summary>
        /// Gets or Sets CreateDate
        /// </summary>
        [DataMember(Name="createDate", EmitDefaultValue=false)]
        public DateTime? CreateDate { get; private set; }

        /// <summary>
        /// Gets or Sets ModifyDate
        /// </summary>
        [DataMember(Name="modifyDate", EmitDefaultValue=false)]
        public DateTime? ModifyDate { get; private set; }

        /// <summary>
        /// Gets or Sets LobId
        /// </summary>
        [DataMember(Name="lobId", EmitDefaultValue=false)]
        public int? LobId { get; set; }

        /// <summary>
        /// Gets or Sets Quantity
        /// </summary>
        [DataMember(Name="quantity", EmitDefaultValue=false)]
        public decimal? Quantity { get; set; }

        /// <summary>
        /// Gets or Sets ChargeRate
        /// </summary>
        [DataMember(Name="chargeRate", EmitDefaultValue=false)]
        public decimal? ChargeRate { get; set; }

        /// <summary>
        /// Gets or Sets ExtendedCharge
        /// </summary>
        [DataMember(Name="extendedCharge", EmitDefaultValue=false)]
        public decimal? ExtendedCharge { get; set; }

        /// <summary>
        /// Gets or Sets InvoiceWorksheetId
        /// </summary>
        [DataMember(Name="invoiceWorksheetId", EmitDefaultValue=false)]
        public int? InvoiceWorksheetId { get; set; }

        /// <summary>
        /// Gets or Sets InvoiceWorksheetLineId
        /// </summary>
        [DataMember(Name="invoiceWorksheetLineId", EmitDefaultValue=false)]
        public int? InvoiceWorksheetLineId { get; set; }

        /// <summary>
        /// Gets or Sets ActivityType
        /// </summary>
        [DataMember(Name="activityType", EmitDefaultValue=false)]
        public string ActivityType { get; set; }

        /// <summary>
        /// Gets or Sets ActivityRecordID
        /// </summary>
        [DataMember(Name="activityRecordID", EmitDefaultValue=false)]
        public string ActivityRecordID { get; private set; }

        /// <summary>
        /// Gets or Sets Reference1
        /// </summary>
        [DataMember(Name="reference1", EmitDefaultValue=false)]
        public string Reference1 { get; set; }

        /// <summary>
        /// Gets or Sets Reference2
        /// </summary>
        [DataMember(Name="reference2", EmitDefaultValue=false)]
        public string Reference2 { get; set; }

        /// <summary>
        /// Gets or Sets Reference3
        /// </summary>
        [DataMember(Name="reference3", EmitDefaultValue=false)]
        public string Reference3 { get; set; }

        /// <summary>
        /// Gets or Sets Reference4
        /// </summary>
        [DataMember(Name="reference4", EmitDefaultValue=false)]
        public string Reference4 { get; set; }

        /// <summary>
        /// Gets or Sets Reference5
        /// </summary>
        [DataMember(Name="reference5", EmitDefaultValue=false)]
        public string Reference5 { get; set; }

        /// <summary>
        /// Gets or Sets ActivityRecord
        /// </summary>
        [DataMember(Name="activityRecord", EmitDefaultValue=false)]
        public Dictionary<string, Object> ActivityRecord { get; set; }

        /// <summary>
        /// Gets or Sets CustomFields
        /// </summary>
        [DataMember(Name="customFields", EmitDefaultValue=false)]
        public Dictionary<string, Object> CustomFields { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InvoiceWorksheetLineDetail {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  CreateDate: ").Append(CreateDate).Append("\n");
            sb.Append("  ModifyDate: ").Append(ModifyDate).Append("\n");
            sb.Append("  LobId: ").Append(LobId).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  ChargeRate: ").Append(ChargeRate).Append("\n");
            sb.Append("  ExtendedCharge: ").Append(ExtendedCharge).Append("\n");
            sb.Append("  InvoiceWorksheetId: ").Append(InvoiceWorksheetId).Append("\n");
            sb.Append("  InvoiceWorksheetLineId: ").Append(InvoiceWorksheetLineId).Append("\n");
            sb.Append("  ActivityType: ").Append(ActivityType).Append("\n");
            sb.Append("  ActivityRecordID: ").Append(ActivityRecordID).Append("\n");
            sb.Append("  Reference1: ").Append(Reference1).Append("\n");
            sb.Append("  Reference2: ").Append(Reference2).Append("\n");
            sb.Append("  Reference3: ").Append(Reference3).Append("\n");
            sb.Append("  Reference4: ").Append(Reference4).Append("\n");
            sb.Append("  Reference5: ").Append(Reference5).Append("\n");
            sb.Append("  ActivityRecord: ").Append(ActivityRecord).Append("\n");
            sb.Append("  CustomFields: ").Append(CustomFields).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InvoiceWorksheetLineDetail);
        }

        /// <summary>
        /// Returns true if InvoiceWorksheetLineDetail instances are equal
        /// </summary>
        /// <param name="input">Instance of InvoiceWorksheetLineDetail to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InvoiceWorksheetLineDetail input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.CreateDate == input.CreateDate ||
                    (this.CreateDate != null &&
                    this.CreateDate.Equals(input.CreateDate))
                ) && 
                (
                    this.ModifyDate == input.ModifyDate ||
                    (this.ModifyDate != null &&
                    this.ModifyDate.Equals(input.ModifyDate))
                ) && 
                (
                    this.LobId == input.LobId ||
                    (this.LobId != null &&
                    this.LobId.Equals(input.LobId))
                ) && 
                (
                    this.Quantity == input.Quantity ||
                    (this.Quantity != null &&
                    this.Quantity.Equals(input.Quantity))
                ) && 
                (
                    this.ChargeRate == input.ChargeRate ||
                    (this.ChargeRate != null &&
                    this.ChargeRate.Equals(input.ChargeRate))
                ) && 
                (
                    this.ExtendedCharge == input.ExtendedCharge ||
                    (this.ExtendedCharge != null &&
                    this.ExtendedCharge.Equals(input.ExtendedCharge))
                ) && 
                (
                    this.InvoiceWorksheetId == input.InvoiceWorksheetId ||
                    (this.InvoiceWorksheetId != null &&
                    this.InvoiceWorksheetId.Equals(input.InvoiceWorksheetId))
                ) && 
                (
                    this.InvoiceWorksheetLineId == input.InvoiceWorksheetLineId ||
                    (this.InvoiceWorksheetLineId != null &&
                    this.InvoiceWorksheetLineId.Equals(input.InvoiceWorksheetLineId))
                ) && 
                (
                    this.ActivityType == input.ActivityType ||
                    (this.ActivityType != null &&
                    this.ActivityType.Equals(input.ActivityType))
                ) && 
                (
                    this.ActivityRecordID == input.ActivityRecordID ||
                    (this.ActivityRecordID != null &&
                    this.ActivityRecordID.Equals(input.ActivityRecordID))
                ) && 
                (
                    this.Reference1 == input.Reference1 ||
                    (this.Reference1 != null &&
                    this.Reference1.Equals(input.Reference1))
                ) && 
                (
                    this.Reference2 == input.Reference2 ||
                    (this.Reference2 != null &&
                    this.Reference2.Equals(input.Reference2))
                ) && 
                (
                    this.Reference3 == input.Reference3 ||
                    (this.Reference3 != null &&
                    this.Reference3.Equals(input.Reference3))
                ) && 
                (
                    this.Reference4 == input.Reference4 ||
                    (this.Reference4 != null &&
                    this.Reference4.Equals(input.Reference4))
                ) && 
                (
                    this.Reference5 == input.Reference5 ||
                    (this.Reference5 != null &&
                    this.Reference5.Equals(input.Reference5))
                ) && 
                (
                    this.ActivityRecord == input.ActivityRecord ||
                    this.ActivityRecord != null &&
                    this.ActivityRecord.SequenceEqual(input.ActivityRecord)
                ) && 
                (
                    this.CustomFields == input.CustomFields ||
                    this.CustomFields != null &&
                    this.CustomFields.SequenceEqual(input.CustomFields)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.CreateDate != null)
                    hashCode = hashCode * 59 + this.CreateDate.GetHashCode();
                if (this.ModifyDate != null)
                    hashCode = hashCode * 59 + this.ModifyDate.GetHashCode();
                if (this.LobId != null)
                    hashCode = hashCode * 59 + this.LobId.GetHashCode();
                if (this.Quantity != null)
                    hashCode = hashCode * 59 + this.Quantity.GetHashCode();
                if (this.ChargeRate != null)
                    hashCode = hashCode * 59 + this.ChargeRate.GetHashCode();
                if (this.ExtendedCharge != null)
                    hashCode = hashCode * 59 + this.ExtendedCharge.GetHashCode();
                if (this.InvoiceWorksheetId != null)
                    hashCode = hashCode * 59 + this.InvoiceWorksheetId.GetHashCode();
                if (this.InvoiceWorksheetLineId != null)
                    hashCode = hashCode * 59 + this.InvoiceWorksheetLineId.GetHashCode();
                if (this.ActivityType != null)
                    hashCode = hashCode * 59 + this.ActivityType.GetHashCode();
                if (this.ActivityRecordID != null)
                    hashCode = hashCode * 59 + this.ActivityRecordID.GetHashCode();
                if (this.Reference1 != null)
                    hashCode = hashCode * 59 + this.Reference1.GetHashCode();
                if (this.Reference2 != null)
                    hashCode = hashCode * 59 + this.Reference2.GetHashCode();
                if (this.Reference3 != null)
                    hashCode = hashCode * 59 + this.Reference3.GetHashCode();
                if (this.Reference4 != null)
                    hashCode = hashCode * 59 + this.Reference4.GetHashCode();
                if (this.Reference5 != null)
                    hashCode = hashCode * 59 + this.Reference5.GetHashCode();
                if (this.ActivityRecord != null)
                    hashCode = hashCode * 59 + this.ActivityRecord.GetHashCode();
                if (this.CustomFields != null)
                    hashCode = hashCode * 59 + this.CustomFields.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
