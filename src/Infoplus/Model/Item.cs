/* 
 * Infoplus API
 *
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Infoplus.Client.SwaggerDateConverter;

namespace Infoplus.Model
{
    /// <summary>
    /// Item
    /// </summary>
    [DataContract]
    public partial class Item :  IEquatable<Item>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Item" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Item() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Item" /> class.
        /// </summary>
        /// <param name="AccountCodeId">AccountCodeId.</param>
        /// <param name="LowStockContactId">LowStockContactId.</param>
        /// <param name="LegacyLowLevelContactId">LegacyLowLevelContactId.</param>
        /// <param name="LowStockCodeId">LowStockCodeId.</param>
        /// <param name="MajorGroupId">MajorGroupId (required).</param>
        /// <param name="SubGroupId">SubGroupId (required).</param>
        /// <param name="ProductCodeId">ProductCodeId.</param>
        /// <param name="SummaryCodeId">SummaryCodeId.</param>
        /// <param name="BuyerId">BuyerId.</param>
        /// <param name="LobId">LobId (required).</param>
        /// <param name="Sku">Sku (required).</param>
        /// <param name="VendorSKU">VendorSKU.</param>
        /// <param name="Upc">Upc.</param>
        /// <param name="ItemDescription">ItemDescription (required).</param>
        /// <param name="PackingSlipDescription">PackingSlipDescription.</param>
        /// <param name="AbsoluteMax">AbsoluteMax.</param>
        /// <param name="AdditionalDescription">AdditionalDescription.</param>
        /// <param name="Backorder">Backorder (required).</param>
        /// <param name="ChargeCode">ChargeCode (required).</param>
        /// <param name="CommodityCodeId">CommodityCodeId.</param>
        /// <param name="CompanionCode">CompanionCode.</param>
        /// <param name="CriticalAmount">CriticalAmount.</param>
        /// <param name="OverallFixedReorderPoint">OverallFixedReorderPoint.</param>
        /// <param name="OverallLeadTime">OverallLeadTime.</param>
        /// <param name="SellPrice">SellPrice.</param>
        /// <param name="PricingPer">PricingPer.</param>
        /// <param name="LotControlFlag">LotControlFlag.</param>
        /// <param name="MaxCycle">MaxCycle (required).</param>
        /// <param name="MaxInterim">MaxInterim (required).</param>
        /// <param name="NumericSortOrder">NumericSortOrder.</param>
        /// <param name="OutsideVendorId">OutsideVendorId.</param>
        /// <param name="PickCode">PickCode.</param>
        /// <param name="PodOrderSuffix">PodOrderSuffix.</param>
        /// <param name="PodRevDate">PodRevDate.</param>
        /// <param name="Status">Status (required).</param>
        /// <param name="SeasonalItem">SeasonalItem (required).</param>
        /// <param name="RequiresProductionLot">RequiresProductionLot.</param>
        /// <param name="Sector">Sector.</param>
        /// <param name="Secure">Secure (required).</param>
        /// <param name="SerialCode">SerialCode.</param>
        /// <param name="UnitCode">UnitCode (required).</param>
        /// <param name="UnitsPerWrap">UnitsPerWrap.</param>
        /// <param name="WeightPerWrap">WeightPerWrap.</param>
        /// <param name="QuantityPerInnerPack">QuantityPerInnerPack.</param>
        /// <param name="QuantityPerCase">QuantityPerCase.</param>
        /// <param name="QuantityPerPallet">QuantityPerPallet.</param>
        /// <param name="InnerPackBarcode">InnerPackBarcode.</param>
        /// <param name="CaseBarcode">CaseBarcode.</param>
        /// <param name="PalletBarcode">PalletBarcode.</param>
        /// <param name="WrapCode">WrapCode.</param>
        /// <param name="ExtrinsicText1">ExtrinsicText1.</param>
        /// <param name="ExtrinsicText2">ExtrinsicText2.</param>
        /// <param name="ExtrinsicText3">ExtrinsicText3.</param>
        /// <param name="ExtrinsicNumber1">ExtrinsicNumber1.</param>
        /// <param name="ExtrinsicNumber2">ExtrinsicNumber2.</param>
        /// <param name="ExtrinsicDecimal1">ExtrinsicDecimal1.</param>
        /// <param name="ExtrinsicDecimal2">ExtrinsicDecimal2.</param>
        /// <param name="CasebreakEnabled">CasebreakEnabled.</param>
        /// <param name="VendorId">VendorId.</param>
        /// <param name="VendorPrice">VendorPrice.</param>
        /// <param name="VendorPer">VendorPer.</param>
        /// <param name="BehaviorType">BehaviorType.</param>
        /// <param name="AssemblyInstructions">AssemblyInstructions.</param>
        /// <param name="ForwardLotMixingRule">ForwardLotMixingRule (required).</param>
        /// <param name="StorageLotMixingRule">StorageLotMixingRule (required).</param>
        /// <param name="ForwardItemMixingRule">ForwardItemMixingRule (required).</param>
        /// <param name="StorageItemMixingRule">StorageItemMixingRule (required).</param>
        /// <param name="AllocationRule">AllocationRule (required).</param>
        /// <param name="AllocationSort">AllocationSort.</param>
        /// <param name="AllocationField">AllocationField.</param>
        /// <param name="BarcodeField">BarcodeField.</param>
        /// <param name="WarehouseDisplayField">WarehouseDisplayField.</param>
        /// <param name="ProductIdTagSchemeId">ProductIdTagSchemeId.</param>
        /// <param name="ItemSerialSchemeId">ItemSerialSchemeId.</param>
        /// <param name="ReceivingCriteriaSchemeId">ReceivingCriteriaSchemeId (required).</param>
        /// <param name="AsnRule">AsnRule.</param>
        /// <param name="QuantityType">QuantityType.</param>
        /// <param name="Hazmat">Hazmat (required).</param>
        /// <param name="UspsHazmatTypeId">UspsHazmatTypeId.</param>
        /// <param name="IsAlcohol">IsAlcohol (default to false).</param>
        /// <param name="AlcoholType">AlcoholType.</param>
        /// <param name="AlcoholContent">AlcoholContent.</param>
        /// <param name="AlcoholContainer">AlcoholContainer.</param>
        /// <param name="AlcoholVintageYear">AlcoholVintageYear.</param>
        /// <param name="AlcoholCountry">AlcoholCountry.</param>
        /// <param name="AlcoholState">AlcoholState.</param>
        /// <param name="AlcoholRegion">AlcoholRegion.</param>
        /// <param name="AlcoholBrand">AlcoholBrand.</param>
        /// <param name="AlcoholUPCCode">AlcoholUPCCode.</param>
        /// <param name="AlcoholNAMBCACode">AlcoholNAMBCACode.</param>
        /// <param name="AlcoholUNIMERCCode">AlcoholUNIMERCCode.</param>
        /// <param name="AlcoholSCCCode">AlcoholSCCCode.</param>
        /// <param name="Length">Length.</param>
        /// <param name="Width">Width.</param>
        /// <param name="Height">Height.</param>
        /// <param name="TopUp">TopUp (default to false).</param>
        /// <param name="ShipSolo">ShipSolo (default to false).</param>
        /// <param name="CustomFields">CustomFields.</param>
        public Item(int? AccountCodeId = default(int?), int? LowStockContactId = default(int?), int? LegacyLowLevelContactId = default(int?), int? LowStockCodeId = default(int?), int? MajorGroupId = default(int?), int? SubGroupId = default(int?), int? ProductCodeId = default(int?), int? SummaryCodeId = default(int?), int? BuyerId = default(int?), int? LobId = default(int?), string Sku = default(string), string VendorSKU = default(string), string Upc = default(string), string ItemDescription = default(string), string PackingSlipDescription = default(string), string AbsoluteMax = default(string), string AdditionalDescription = default(string), string Backorder = default(string), string ChargeCode = default(string), int? CommodityCodeId = default(int?), int? CompanionCode = default(int?), int? CriticalAmount = default(int?), int? OverallFixedReorderPoint = default(int?), int? OverallLeadTime = default(int?), decimal? SellPrice = default(decimal?), string PricingPer = default(string), string LotControlFlag = default(string), int? MaxCycle = default(int?), int? MaxInterim = default(int?), int? NumericSortOrder = default(int?), int? OutsideVendorId = default(int?), string PickCode = default(string), int? PodOrderSuffix = default(int?), string PodRevDate = default(string), string Status = default(string), string SeasonalItem = default(string), string RequiresProductionLot = default(string), string Sector = default(string), string Secure = default(string), string SerialCode = default(string), string UnitCode = default(string), int? UnitsPerWrap = default(int?), decimal? WeightPerWrap = default(decimal?), int? QuantityPerInnerPack = default(int?), int? QuantityPerCase = default(int?), int? QuantityPerPallet = default(int?), string InnerPackBarcode = default(string), string CaseBarcode = default(string), string PalletBarcode = default(string), string WrapCode = default(string), string ExtrinsicText1 = default(string), string ExtrinsicText2 = default(string), string ExtrinsicText3 = default(string), int? ExtrinsicNumber1 = default(int?), int? ExtrinsicNumber2 = default(int?), decimal? ExtrinsicDecimal1 = default(decimal?), decimal? ExtrinsicDecimal2 = default(decimal?), string CasebreakEnabled = default(string), int? VendorId = default(int?), decimal? VendorPrice = default(decimal?), string VendorPer = default(string), string BehaviorType = default(string), string AssemblyInstructions = default(string), string ForwardLotMixingRule = default(string), string StorageLotMixingRule = default(string), string ForwardItemMixingRule = default(string), string StorageItemMixingRule = default(string), string AllocationRule = default(string), string AllocationSort = default(string), string AllocationField = default(string), string BarcodeField = default(string), string WarehouseDisplayField = default(string), int? ProductIdTagSchemeId = default(int?), int? ItemSerialSchemeId = default(int?), int? ReceivingCriteriaSchemeId = default(int?), string AsnRule = default(string), string QuantityType = default(string), string Hazmat = default(string), int? UspsHazmatTypeId = default(int?), bool? IsAlcohol = false, string AlcoholType = default(string), decimal? AlcoholContent = default(decimal?), string AlcoholContainer = default(string), string AlcoholVintageYear = default(string), string AlcoholCountry = default(string), string AlcoholState = default(string), string AlcoholRegion = default(string), string AlcoholBrand = default(string), string AlcoholUPCCode = default(string), string AlcoholNAMBCACode = default(string), string AlcoholUNIMERCCode = default(string), string AlcoholSCCCode = default(string), decimal? Length = default(decimal?), decimal? Width = default(decimal?), decimal? Height = default(decimal?), bool? TopUp = false, bool? ShipSolo = false, Dictionary<string, Object> CustomFields = default(Dictionary<string, Object>))
        {
            // to ensure "MajorGroupId" is required (not null)
            if (MajorGroupId == null)
            {
                throw new InvalidDataException("MajorGroupId is a required property for Item and cannot be null");
            }
            else
            {
                this.MajorGroupId = MajorGroupId;
            }
            // to ensure "SubGroupId" is required (not null)
            if (SubGroupId == null)
            {
                throw new InvalidDataException("SubGroupId is a required property for Item and cannot be null");
            }
            else
            {
                this.SubGroupId = SubGroupId;
            }
            // to ensure "LobId" is required (not null)
            if (LobId == null)
            {
                throw new InvalidDataException("LobId is a required property for Item and cannot be null");
            }
            else
            {
                this.LobId = LobId;
            }
            // to ensure "Sku" is required (not null)
            if (Sku == null)
            {
                throw new InvalidDataException("Sku is a required property for Item and cannot be null");
            }
            else
            {
                this.Sku = Sku;
            }
            // to ensure "ItemDescription" is required (not null)
            if (ItemDescription == null)
            {
                throw new InvalidDataException("ItemDescription is a required property for Item and cannot be null");
            }
            else
            {
                this.ItemDescription = ItemDescription;
            }
            // to ensure "Backorder" is required (not null)
            if (Backorder == null)
            {
                throw new InvalidDataException("Backorder is a required property for Item and cannot be null");
            }
            else
            {
                this.Backorder = Backorder;
            }
            // to ensure "ChargeCode" is required (not null)
            if (ChargeCode == null)
            {
                throw new InvalidDataException("ChargeCode is a required property for Item and cannot be null");
            }
            else
            {
                this.ChargeCode = ChargeCode;
            }
            // to ensure "MaxCycle" is required (not null)
            if (MaxCycle == null)
            {
                throw new InvalidDataException("MaxCycle is a required property for Item and cannot be null");
            }
            else
            {
                this.MaxCycle = MaxCycle;
            }
            // to ensure "MaxInterim" is required (not null)
            if (MaxInterim == null)
            {
                throw new InvalidDataException("MaxInterim is a required property for Item and cannot be null");
            }
            else
            {
                this.MaxInterim = MaxInterim;
            }
            // to ensure "Status" is required (not null)
            if (Status == null)
            {
                throw new InvalidDataException("Status is a required property for Item and cannot be null");
            }
            else
            {
                this.Status = Status;
            }
            // to ensure "SeasonalItem" is required (not null)
            if (SeasonalItem == null)
            {
                throw new InvalidDataException("SeasonalItem is a required property for Item and cannot be null");
            }
            else
            {
                this.SeasonalItem = SeasonalItem;
            }
            // to ensure "Secure" is required (not null)
            if (Secure == null)
            {
                throw new InvalidDataException("Secure is a required property for Item and cannot be null");
            }
            else
            {
                this.Secure = Secure;
            }
            // to ensure "UnitCode" is required (not null)
            if (UnitCode == null)
            {
                throw new InvalidDataException("UnitCode is a required property for Item and cannot be null");
            }
            else
            {
                this.UnitCode = UnitCode;
            }
            // to ensure "ForwardLotMixingRule" is required (not null)
            if (ForwardLotMixingRule == null)
            {
                throw new InvalidDataException("ForwardLotMixingRule is a required property for Item and cannot be null");
            }
            else
            {
                this.ForwardLotMixingRule = ForwardLotMixingRule;
            }
            // to ensure "StorageLotMixingRule" is required (not null)
            if (StorageLotMixingRule == null)
            {
                throw new InvalidDataException("StorageLotMixingRule is a required property for Item and cannot be null");
            }
            else
            {
                this.StorageLotMixingRule = StorageLotMixingRule;
            }
            // to ensure "ForwardItemMixingRule" is required (not null)
            if (ForwardItemMixingRule == null)
            {
                throw new InvalidDataException("ForwardItemMixingRule is a required property for Item and cannot be null");
            }
            else
            {
                this.ForwardItemMixingRule = ForwardItemMixingRule;
            }
            // to ensure "StorageItemMixingRule" is required (not null)
            if (StorageItemMixingRule == null)
            {
                throw new InvalidDataException("StorageItemMixingRule is a required property for Item and cannot be null");
            }
            else
            {
                this.StorageItemMixingRule = StorageItemMixingRule;
            }
            // to ensure "AllocationRule" is required (not null)
            if (AllocationRule == null)
            {
                throw new InvalidDataException("AllocationRule is a required property for Item and cannot be null");
            }
            else
            {
                this.AllocationRule = AllocationRule;
            }
            // to ensure "ReceivingCriteriaSchemeId" is required (not null)
            if (ReceivingCriteriaSchemeId == null)
            {
                throw new InvalidDataException("ReceivingCriteriaSchemeId is a required property for Item and cannot be null");
            }
            else
            {
                this.ReceivingCriteriaSchemeId = ReceivingCriteriaSchemeId;
            }
            // to ensure "Hazmat" is required (not null)
            if (Hazmat == null)
            {
                throw new InvalidDataException("Hazmat is a required property for Item and cannot be null");
            }
            else
            {
                this.Hazmat = Hazmat;
            }
            this.AccountCodeId = AccountCodeId;
            this.LowStockContactId = LowStockContactId;
            this.LegacyLowLevelContactId = LegacyLowLevelContactId;
            this.LowStockCodeId = LowStockCodeId;
            this.ProductCodeId = ProductCodeId;
            this.SummaryCodeId = SummaryCodeId;
            this.BuyerId = BuyerId;
            this.VendorSKU = VendorSKU;
            this.Upc = Upc;
            this.PackingSlipDescription = PackingSlipDescription;
            this.AbsoluteMax = AbsoluteMax;
            this.AdditionalDescription = AdditionalDescription;
            this.CommodityCodeId = CommodityCodeId;
            this.CompanionCode = CompanionCode;
            this.CriticalAmount = CriticalAmount;
            this.OverallFixedReorderPoint = OverallFixedReorderPoint;
            this.OverallLeadTime = OverallLeadTime;
            this.SellPrice = SellPrice;
            this.PricingPer = PricingPer;
            this.LotControlFlag = LotControlFlag;
            this.NumericSortOrder = NumericSortOrder;
            this.OutsideVendorId = OutsideVendorId;
            this.PickCode = PickCode;
            this.PodOrderSuffix = PodOrderSuffix;
            this.PodRevDate = PodRevDate;
            this.RequiresProductionLot = RequiresProductionLot;
            this.Sector = Sector;
            this.SerialCode = SerialCode;
            this.UnitsPerWrap = UnitsPerWrap;
            this.WeightPerWrap = WeightPerWrap;
            this.QuantityPerInnerPack = QuantityPerInnerPack;
            this.QuantityPerCase = QuantityPerCase;
            this.QuantityPerPallet = QuantityPerPallet;
            this.InnerPackBarcode = InnerPackBarcode;
            this.CaseBarcode = CaseBarcode;
            this.PalletBarcode = PalletBarcode;
            this.WrapCode = WrapCode;
            this.ExtrinsicText1 = ExtrinsicText1;
            this.ExtrinsicText2 = ExtrinsicText2;
            this.ExtrinsicText3 = ExtrinsicText3;
            this.ExtrinsicNumber1 = ExtrinsicNumber1;
            this.ExtrinsicNumber2 = ExtrinsicNumber2;
            this.ExtrinsicDecimal1 = ExtrinsicDecimal1;
            this.ExtrinsicDecimal2 = ExtrinsicDecimal2;
            this.CasebreakEnabled = CasebreakEnabled;
            this.VendorId = VendorId;
            this.VendorPrice = VendorPrice;
            this.VendorPer = VendorPer;
            this.BehaviorType = BehaviorType;
            this.AssemblyInstructions = AssemblyInstructions;
            this.AllocationSort = AllocationSort;
            this.AllocationField = AllocationField;
            this.BarcodeField = BarcodeField;
            this.WarehouseDisplayField = WarehouseDisplayField;
            this.ProductIdTagSchemeId = ProductIdTagSchemeId;
            this.ItemSerialSchemeId = ItemSerialSchemeId;
            this.AsnRule = AsnRule;
            this.QuantityType = QuantityType;
            this.UspsHazmatTypeId = UspsHazmatTypeId;
            // use default value if no "IsAlcohol" provided
            if (IsAlcohol == null)
            {
                this.IsAlcohol = false;
            }
            else
            {
                this.IsAlcohol = IsAlcohol;
            }
            this.AlcoholType = AlcoholType;
            this.AlcoholContent = AlcoholContent;
            this.AlcoholContainer = AlcoholContainer;
            this.AlcoholVintageYear = AlcoholVintageYear;
            this.AlcoholCountry = AlcoholCountry;
            this.AlcoholState = AlcoholState;
            this.AlcoholRegion = AlcoholRegion;
            this.AlcoholBrand = AlcoholBrand;
            this.AlcoholUPCCode = AlcoholUPCCode;
            this.AlcoholNAMBCACode = AlcoholNAMBCACode;
            this.AlcoholUNIMERCCode = AlcoholUNIMERCCode;
            this.AlcoholSCCCode = AlcoholSCCCode;
            this.Length = Length;
            this.Width = Width;
            this.Height = Height;
            // use default value if no "TopUp" provided
            if (TopUp == null)
            {
                this.TopUp = false;
            }
            else
            {
                this.TopUp = TopUp;
            }
            // use default value if no "ShipSolo" provided
            if (ShipSolo == null)
            {
                this.ShipSolo = false;
            }
            else
            {
                this.ShipSolo = ShipSolo;
            }
            this.CustomFields = CustomFields;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; private set; }

        /// <summary>
        /// Gets or Sets AccountCodeId
        /// </summary>
        [DataMember(Name="accountCodeId", EmitDefaultValue=false)]
        public int? AccountCodeId { get; set; }

        /// <summary>
        /// Gets or Sets LowStockContactId
        /// </summary>
        [DataMember(Name="lowStockContactId", EmitDefaultValue=false)]
        public int? LowStockContactId { get; set; }

        /// <summary>
        /// Gets or Sets LegacyLowLevelContactId
        /// </summary>
        [DataMember(Name="legacyLowLevelContactId", EmitDefaultValue=false)]
        public int? LegacyLowLevelContactId { get; set; }

        /// <summary>
        /// Gets or Sets LowStockCodeId
        /// </summary>
        [DataMember(Name="lowStockCodeId", EmitDefaultValue=false)]
        public int? LowStockCodeId { get; set; }

        /// <summary>
        /// Gets or Sets MajorGroupId
        /// </summary>
        [DataMember(Name="majorGroupId", EmitDefaultValue=false)]
        public int? MajorGroupId { get; set; }

        /// <summary>
        /// Gets or Sets SubGroupId
        /// </summary>
        [DataMember(Name="subGroupId", EmitDefaultValue=false)]
        public int? SubGroupId { get; set; }

        /// <summary>
        /// Gets or Sets ProductCodeId
        /// </summary>
        [DataMember(Name="productCodeId", EmitDefaultValue=false)]
        public int? ProductCodeId { get; set; }

        /// <summary>
        /// Gets or Sets SummaryCodeId
        /// </summary>
        [DataMember(Name="summaryCodeId", EmitDefaultValue=false)]
        public int? SummaryCodeId { get; set; }

        /// <summary>
        /// Gets or Sets BuyerId
        /// </summary>
        [DataMember(Name="buyerId", EmitDefaultValue=false)]
        public int? BuyerId { get; set; }

        /// <summary>
        /// Gets or Sets LobId
        /// </summary>
        [DataMember(Name="lobId", EmitDefaultValue=false)]
        public int? LobId { get; set; }

        /// <summary>
        /// Gets or Sets Sku
        /// </summary>
        [DataMember(Name="sku", EmitDefaultValue=false)]
        public string Sku { get; set; }

        /// <summary>
        /// Gets or Sets VendorSKU
        /// </summary>
        [DataMember(Name="vendorSKU", EmitDefaultValue=false)]
        public string VendorSKU { get; set; }

        /// <summary>
        /// Gets or Sets Upc
        /// </summary>
        [DataMember(Name="upc", EmitDefaultValue=false)]
        public string Upc { get; set; }

        /// <summary>
        /// Gets or Sets ItemDescription
        /// </summary>
        [DataMember(Name="itemDescription", EmitDefaultValue=false)]
        public string ItemDescription { get; set; }

        /// <summary>
        /// Gets or Sets PackingSlipDescription
        /// </summary>
        [DataMember(Name="packingSlipDescription", EmitDefaultValue=false)]
        public string PackingSlipDescription { get; set; }

        /// <summary>
        /// Gets or Sets AbsoluteMax
        /// </summary>
        [DataMember(Name="absoluteMax", EmitDefaultValue=false)]
        public string AbsoluteMax { get; set; }

        /// <summary>
        /// Gets or Sets AdditionalDescription
        /// </summary>
        [DataMember(Name="additionalDescription", EmitDefaultValue=false)]
        public string AdditionalDescription { get; set; }

        /// <summary>
        /// Gets or Sets Backorder
        /// </summary>
        [DataMember(Name="backorder", EmitDefaultValue=false)]
        public string Backorder { get; set; }

        /// <summary>
        /// Gets or Sets ChargeCode
        /// </summary>
        [DataMember(Name="chargeCode", EmitDefaultValue=false)]
        public string ChargeCode { get; set; }

        /// <summary>
        /// Gets or Sets CommodityCodeId
        /// </summary>
        [DataMember(Name="commodityCodeId", EmitDefaultValue=false)]
        public int? CommodityCodeId { get; set; }

        /// <summary>
        /// Gets or Sets CompanionCode
        /// </summary>
        [DataMember(Name="companionCode", EmitDefaultValue=false)]
        public int? CompanionCode { get; set; }

        /// <summary>
        /// Gets or Sets CreateDate
        /// </summary>
        [DataMember(Name="createDate", EmitDefaultValue=false)]
        public DateTime? CreateDate { get; private set; }

        /// <summary>
        /// Gets or Sets CriticalAmount
        /// </summary>
        [DataMember(Name="criticalAmount", EmitDefaultValue=false)]
        public int? CriticalAmount { get; set; }

        /// <summary>
        /// Gets or Sets OverallFixedReorderPoint
        /// </summary>
        [DataMember(Name="overallFixedReorderPoint", EmitDefaultValue=false)]
        public int? OverallFixedReorderPoint { get; set; }

        /// <summary>
        /// Gets or Sets OverallLeadTime
        /// </summary>
        [DataMember(Name="overallLeadTime", EmitDefaultValue=false)]
        public int? OverallLeadTime { get; set; }

        /// <summary>
        /// Gets or Sets SellPrice
        /// </summary>
        [DataMember(Name="sellPrice", EmitDefaultValue=false)]
        public decimal? SellPrice { get; set; }

        /// <summary>
        /// Gets or Sets PricingPer
        /// </summary>
        [DataMember(Name="pricingPer", EmitDefaultValue=false)]
        public string PricingPer { get; set; }

        /// <summary>
        /// Gets or Sets LotControlFlag
        /// </summary>
        [DataMember(Name="lotControlFlag", EmitDefaultValue=false)]
        public string LotControlFlag { get; set; }

        /// <summary>
        /// Gets or Sets MaxCycle
        /// </summary>
        [DataMember(Name="maxCycle", EmitDefaultValue=false)]
        public int? MaxCycle { get; set; }

        /// <summary>
        /// Gets or Sets MaxInterim
        /// </summary>
        [DataMember(Name="maxInterim", EmitDefaultValue=false)]
        public int? MaxInterim { get; set; }

        /// <summary>
        /// Gets or Sets NumericSortOrder
        /// </summary>
        [DataMember(Name="numericSortOrder", EmitDefaultValue=false)]
        public int? NumericSortOrder { get; set; }

        /// <summary>
        /// Gets or Sets OutsideVendorId
        /// </summary>
        [DataMember(Name="outsideVendorId", EmitDefaultValue=false)]
        public int? OutsideVendorId { get; set; }

        /// <summary>
        /// Gets or Sets PickCode
        /// </summary>
        [DataMember(Name="pickCode", EmitDefaultValue=false)]
        public string PickCode { get; set; }

        /// <summary>
        /// Gets or Sets PodOrderSuffix
        /// </summary>
        [DataMember(Name="podOrderSuffix", EmitDefaultValue=false)]
        public int? PodOrderSuffix { get; set; }

        /// <summary>
        /// Gets or Sets PodRevDate
        /// </summary>
        [DataMember(Name="podRevDate", EmitDefaultValue=false)]
        public string PodRevDate { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public string Status { get; set; }

        /// <summary>
        /// Gets or Sets SeasonalItem
        /// </summary>
        [DataMember(Name="seasonalItem", EmitDefaultValue=false)]
        public string SeasonalItem { get; set; }

        /// <summary>
        /// Gets or Sets RequiresProductionLot
        /// </summary>
        [DataMember(Name="requiresProductionLot", EmitDefaultValue=false)]
        public string RequiresProductionLot { get; set; }

        /// <summary>
        /// Gets or Sets Sector
        /// </summary>
        [DataMember(Name="sector", EmitDefaultValue=false)]
        public string Sector { get; set; }

        /// <summary>
        /// Gets or Sets Secure
        /// </summary>
        [DataMember(Name="secure", EmitDefaultValue=false)]
        public string Secure { get; set; }

        /// <summary>
        /// Gets or Sets SerialCode
        /// </summary>
        [DataMember(Name="serialCode", EmitDefaultValue=false)]
        public string SerialCode { get; set; }

        /// <summary>
        /// Gets or Sets UnitCode
        /// </summary>
        [DataMember(Name="unitCode", EmitDefaultValue=false)]
        public string UnitCode { get; set; }

        /// <summary>
        /// Gets or Sets UnitsPerWrap
        /// </summary>
        [DataMember(Name="unitsPerWrap", EmitDefaultValue=false)]
        public int? UnitsPerWrap { get; set; }

        /// <summary>
        /// Gets or Sets WeightPerWrap
        /// </summary>
        [DataMember(Name="weightPerWrap", EmitDefaultValue=false)]
        public decimal? WeightPerWrap { get; set; }

        /// <summary>
        /// Gets or Sets QuantityPerInnerPack
        /// </summary>
        [DataMember(Name="quantityPerInnerPack", EmitDefaultValue=false)]
        public int? QuantityPerInnerPack { get; set; }

        /// <summary>
        /// Gets or Sets QuantityPerCase
        /// </summary>
        [DataMember(Name="quantityPerCase", EmitDefaultValue=false)]
        public int? QuantityPerCase { get; set; }

        /// <summary>
        /// Gets or Sets QuantityPerPallet
        /// </summary>
        [DataMember(Name="quantityPerPallet", EmitDefaultValue=false)]
        public int? QuantityPerPallet { get; set; }

        /// <summary>
        /// Gets or Sets InnerPackBarcode
        /// </summary>
        [DataMember(Name="innerPackBarcode", EmitDefaultValue=false)]
        public string InnerPackBarcode { get; set; }

        /// <summary>
        /// Gets or Sets CaseBarcode
        /// </summary>
        [DataMember(Name="caseBarcode", EmitDefaultValue=false)]
        public string CaseBarcode { get; set; }

        /// <summary>
        /// Gets or Sets PalletBarcode
        /// </summary>
        [DataMember(Name="palletBarcode", EmitDefaultValue=false)]
        public string PalletBarcode { get; set; }

        /// <summary>
        /// Gets or Sets VoidDate
        /// </summary>
        [DataMember(Name="voidDate", EmitDefaultValue=false)]
        public DateTime? VoidDate { get; private set; }

        /// <summary>
        /// Gets or Sets WrapCode
        /// </summary>
        [DataMember(Name="wrapCode", EmitDefaultValue=false)]
        public string WrapCode { get; set; }

        /// <summary>
        /// Gets or Sets ExtrinsicText1
        /// </summary>
        [DataMember(Name="extrinsicText1", EmitDefaultValue=false)]
        public string ExtrinsicText1 { get; set; }

        /// <summary>
        /// Gets or Sets ExtrinsicText2
        /// </summary>
        [DataMember(Name="extrinsicText2", EmitDefaultValue=false)]
        public string ExtrinsicText2 { get; set; }

        /// <summary>
        /// Gets or Sets ExtrinsicText3
        /// </summary>
        [DataMember(Name="extrinsicText3", EmitDefaultValue=false)]
        public string ExtrinsicText3 { get; set; }

        /// <summary>
        /// Gets or Sets ExtrinsicNumber1
        /// </summary>
        [DataMember(Name="extrinsicNumber1", EmitDefaultValue=false)]
        public int? ExtrinsicNumber1 { get; set; }

        /// <summary>
        /// Gets or Sets ExtrinsicNumber2
        /// </summary>
        [DataMember(Name="extrinsicNumber2", EmitDefaultValue=false)]
        public int? ExtrinsicNumber2 { get; set; }

        /// <summary>
        /// Gets or Sets ExtrinsicDecimal1
        /// </summary>
        [DataMember(Name="extrinsicDecimal1", EmitDefaultValue=false)]
        public decimal? ExtrinsicDecimal1 { get; set; }

        /// <summary>
        /// Gets or Sets ExtrinsicDecimal2
        /// </summary>
        [DataMember(Name="extrinsicDecimal2", EmitDefaultValue=false)]
        public decimal? ExtrinsicDecimal2 { get; set; }

        /// <summary>
        /// Gets or Sets CasebreakEnabled
        /// </summary>
        [DataMember(Name="casebreakEnabled", EmitDefaultValue=false)]
        public string CasebreakEnabled { get; set; }

        /// <summary>
        /// Gets or Sets VendorId
        /// </summary>
        [DataMember(Name="vendorId", EmitDefaultValue=false)]
        public int? VendorId { get; set; }

        /// <summary>
        /// Gets or Sets VendorPrice
        /// </summary>
        [DataMember(Name="vendorPrice", EmitDefaultValue=false)]
        public decimal? VendorPrice { get; set; }

        /// <summary>
        /// Gets or Sets VendorPer
        /// </summary>
        [DataMember(Name="vendorPer", EmitDefaultValue=false)]
        public string VendorPer { get; set; }

        /// <summary>
        /// Gets or Sets ModifyDate
        /// </summary>
        [DataMember(Name="modifyDate", EmitDefaultValue=false)]
        public DateTime? ModifyDate { get; private set; }

        /// <summary>
        /// Gets or Sets PrimaryImage
        /// </summary>
        [DataMember(Name="primaryImage", EmitDefaultValue=false)]
        public string PrimaryImage { get; private set; }

        /// <summary>
        /// Gets or Sets PickImage
        /// </summary>
        [DataMember(Name="pickImage", EmitDefaultValue=false)]
        public string PickImage { get; private set; }

        /// <summary>
        /// Gets or Sets BehaviorType
        /// </summary>
        [DataMember(Name="behaviorType", EmitDefaultValue=false)]
        public string BehaviorType { get; set; }

        /// <summary>
        /// Gets or Sets AssemblyInstructions
        /// </summary>
        [DataMember(Name="assemblyInstructions", EmitDefaultValue=false)]
        public string AssemblyInstructions { get; set; }

        /// <summary>
        /// Gets or Sets ForwardLotMixingRule
        /// </summary>
        [DataMember(Name="forwardLotMixingRule", EmitDefaultValue=false)]
        public string ForwardLotMixingRule { get; set; }

        /// <summary>
        /// Gets or Sets StorageLotMixingRule
        /// </summary>
        [DataMember(Name="storageLotMixingRule", EmitDefaultValue=false)]
        public string StorageLotMixingRule { get; set; }

        /// <summary>
        /// Gets or Sets ForwardItemMixingRule
        /// </summary>
        [DataMember(Name="forwardItemMixingRule", EmitDefaultValue=false)]
        public string ForwardItemMixingRule { get; set; }

        /// <summary>
        /// Gets or Sets StorageItemMixingRule
        /// </summary>
        [DataMember(Name="storageItemMixingRule", EmitDefaultValue=false)]
        public string StorageItemMixingRule { get; set; }

        /// <summary>
        /// Gets or Sets AllocationRule
        /// </summary>
        [DataMember(Name="allocationRule", EmitDefaultValue=false)]
        public string AllocationRule { get; set; }

        /// <summary>
        /// Gets or Sets AllocationSort
        /// </summary>
        [DataMember(Name="allocationSort", EmitDefaultValue=false)]
        public string AllocationSort { get; set; }

        /// <summary>
        /// Gets or Sets AllocationField
        /// </summary>
        [DataMember(Name="allocationField", EmitDefaultValue=false)]
        public string AllocationField { get; set; }

        /// <summary>
        /// Gets or Sets BarcodeField
        /// </summary>
        [DataMember(Name="barcodeField", EmitDefaultValue=false)]
        public string BarcodeField { get; set; }

        /// <summary>
        /// Gets or Sets WarehouseDisplayField
        /// </summary>
        [DataMember(Name="warehouseDisplayField", EmitDefaultValue=false)]
        public string WarehouseDisplayField { get; set; }

        /// <summary>
        /// Gets or Sets ProductIdTagSchemeId
        /// </summary>
        [DataMember(Name="productIdTagSchemeId", EmitDefaultValue=false)]
        public int? ProductIdTagSchemeId { get; set; }

        /// <summary>
        /// Gets or Sets ItemSerialSchemeId
        /// </summary>
        [DataMember(Name="itemSerialSchemeId", EmitDefaultValue=false)]
        public int? ItemSerialSchemeId { get; set; }

        /// <summary>
        /// Gets or Sets ReceivingCriteriaSchemeId
        /// </summary>
        [DataMember(Name="receivingCriteriaSchemeId", EmitDefaultValue=false)]
        public int? ReceivingCriteriaSchemeId { get; set; }

        /// <summary>
        /// Gets or Sets AsnRule
        /// </summary>
        [DataMember(Name="asnRule", EmitDefaultValue=false)]
        public string AsnRule { get; set; }

        /// <summary>
        /// Gets or Sets QuantityType
        /// </summary>
        [DataMember(Name="quantityType", EmitDefaultValue=false)]
        public string QuantityType { get; set; }

        /// <summary>
        /// Gets or Sets Hazmat
        /// </summary>
        [DataMember(Name="hazmat", EmitDefaultValue=false)]
        public string Hazmat { get; set; }

        /// <summary>
        /// Gets or Sets UspsHazmatTypeId
        /// </summary>
        [DataMember(Name="uspsHazmatTypeId", EmitDefaultValue=false)]
        public int? UspsHazmatTypeId { get; set; }

        /// <summary>
        /// Gets or Sets IsAlcohol
        /// </summary>
        [DataMember(Name="isAlcohol", EmitDefaultValue=false)]
        public bool? IsAlcohol { get; set; }

        /// <summary>
        /// Gets or Sets AlcoholType
        /// </summary>
        [DataMember(Name="alcoholType", EmitDefaultValue=false)]
        public string AlcoholType { get; set; }

        /// <summary>
        /// Gets or Sets AlcoholContent
        /// </summary>
        [DataMember(Name="alcoholContent", EmitDefaultValue=false)]
        public decimal? AlcoholContent { get; set; }

        /// <summary>
        /// Gets or Sets AlcoholContainer
        /// </summary>
        [DataMember(Name="alcoholContainer", EmitDefaultValue=false)]
        public string AlcoholContainer { get; set; }

        /// <summary>
        /// Gets or Sets AlcoholVintageYear
        /// </summary>
        [DataMember(Name="alcoholVintageYear", EmitDefaultValue=false)]
        public string AlcoholVintageYear { get; set; }

        /// <summary>
        /// Gets or Sets AlcoholCountry
        /// </summary>
        [DataMember(Name="alcoholCountry", EmitDefaultValue=false)]
        public string AlcoholCountry { get; set; }

        /// <summary>
        /// Gets or Sets AlcoholState
        /// </summary>
        [DataMember(Name="alcoholState", EmitDefaultValue=false)]
        public string AlcoholState { get; set; }

        /// <summary>
        /// Gets or Sets AlcoholRegion
        /// </summary>
        [DataMember(Name="alcoholRegion", EmitDefaultValue=false)]
        public string AlcoholRegion { get; set; }

        /// <summary>
        /// Gets or Sets AlcoholBrand
        /// </summary>
        [DataMember(Name="alcoholBrand", EmitDefaultValue=false)]
        public string AlcoholBrand { get; set; }

        /// <summary>
        /// Gets or Sets AlcoholUPCCode
        /// </summary>
        [DataMember(Name="alcoholUPCCode", EmitDefaultValue=false)]
        public string AlcoholUPCCode { get; set; }

        /// <summary>
        /// Gets or Sets AlcoholNAMBCACode
        /// </summary>
        [DataMember(Name="alcoholNAMBCACode", EmitDefaultValue=false)]
        public string AlcoholNAMBCACode { get; set; }

        /// <summary>
        /// Gets or Sets AlcoholUNIMERCCode
        /// </summary>
        [DataMember(Name="alcoholUNIMERCCode", EmitDefaultValue=false)]
        public string AlcoholUNIMERCCode { get; set; }

        /// <summary>
        /// Gets or Sets AlcoholSCCCode
        /// </summary>
        [DataMember(Name="alcoholSCCCode", EmitDefaultValue=false)]
        public string AlcoholSCCCode { get; set; }

        /// <summary>
        /// Gets or Sets Length
        /// </summary>
        [DataMember(Name="length", EmitDefaultValue=false)]
        public decimal? Length { get; set; }

        /// <summary>
        /// Gets or Sets Width
        /// </summary>
        [DataMember(Name="width", EmitDefaultValue=false)]
        public decimal? Width { get; set; }

        /// <summary>
        /// Gets or Sets Height
        /// </summary>
        [DataMember(Name="height", EmitDefaultValue=false)]
        public decimal? Height { get; set; }

        /// <summary>
        /// Gets or Sets TopUp
        /// </summary>
        [DataMember(Name="topUp", EmitDefaultValue=false)]
        public bool? TopUp { get; set; }

        /// <summary>
        /// Gets or Sets ShipSolo
        /// </summary>
        [DataMember(Name="shipSolo", EmitDefaultValue=false)]
        public bool? ShipSolo { get; set; }

        /// <summary>
        /// Gets or Sets InventoryUpdateTimestamp
        /// </summary>
        [DataMember(Name="inventoryUpdateTimestamp", EmitDefaultValue=false)]
        public DateTime? InventoryUpdateTimestamp { get; private set; }

        /// <summary>
        /// Gets or Sets AvailableQuantity
        /// </summary>
        [DataMember(Name="availableQuantity", EmitDefaultValue=false)]
        public int? AvailableQuantity { get; private set; }

        /// <summary>
        /// Gets or Sets DamagedQuantity
        /// </summary>
        [DataMember(Name="damagedQuantity", EmitDefaultValue=false)]
        public int? DamagedQuantity { get; private set; }

        /// <summary>
        /// Gets or Sets InFulfillmentProcessQuantity
        /// </summary>
        [DataMember(Name="inFulfillmentProcessQuantity", EmitDefaultValue=false)]
        public int? InFulfillmentProcessQuantity { get; private set; }

        /// <summary>
        /// Gets or Sets OnHandQuantity
        /// </summary>
        [DataMember(Name="onHandQuantity", EmitDefaultValue=false)]
        public int? OnHandQuantity { get; private set; }

        /// <summary>
        /// Gets or Sets OpenOrderQuantity
        /// </summary>
        [DataMember(Name="openOrderQuantity", EmitDefaultValue=false)]
        public int? OpenOrderQuantity { get; private set; }

        /// <summary>
        /// Gets or Sets OpenPOQuantity
        /// </summary>
        [DataMember(Name="openPOQuantity", EmitDefaultValue=false)]
        public int? OpenPOQuantity { get; private set; }

        /// <summary>
        /// Gets or Sets OrderableQuantity
        /// </summary>
        [DataMember(Name="orderableQuantity", EmitDefaultValue=false)]
        public int? OrderableQuantity { get; private set; }

        /// <summary>
        /// Gets or Sets UnallocatableQuantity
        /// </summary>
        [DataMember(Name="unallocatableQuantity", EmitDefaultValue=false)]
        public int? UnallocatableQuantity { get; private set; }

        /// <summary>
        /// Gets or Sets UnavailableQuantity
        /// </summary>
        [DataMember(Name="unavailableQuantity", EmitDefaultValue=false)]
        public int? UnavailableQuantity { get; private set; }

        /// <summary>
        /// Gets or Sets TotalDemand
        /// </summary>
        [DataMember(Name="totalDemand", EmitDefaultValue=false)]
        public int? TotalDemand { get; private set; }

        /// <summary>
        /// Gets or Sets AvailableQuantityInnerPacks
        /// </summary>
        [DataMember(Name="availableQuantityInnerPacks", EmitDefaultValue=false)]
        public int? AvailableQuantityInnerPacks { get; private set; }

        /// <summary>
        /// Gets or Sets DamagedQuantityInnerPacks
        /// </summary>
        [DataMember(Name="damagedQuantityInnerPacks", EmitDefaultValue=false)]
        public int? DamagedQuantityInnerPacks { get; private set; }

        /// <summary>
        /// Gets or Sets InFulfillmentProcessQuantityInnerPacks
        /// </summary>
        [DataMember(Name="inFulfillmentProcessQuantityInnerPacks", EmitDefaultValue=false)]
        public int? InFulfillmentProcessQuantityInnerPacks { get; private set; }

        /// <summary>
        /// Gets or Sets OnHandQuantityInnerPacks
        /// </summary>
        [DataMember(Name="onHandQuantityInnerPacks", EmitDefaultValue=false)]
        public int? OnHandQuantityInnerPacks { get; private set; }

        /// <summary>
        /// Gets or Sets OpenOrderQuantityInnerPacks
        /// </summary>
        [DataMember(Name="openOrderQuantityInnerPacks", EmitDefaultValue=false)]
        public int? OpenOrderQuantityInnerPacks { get; private set; }

        /// <summary>
        /// Gets or Sets OpenPOQuantityInnerPacks
        /// </summary>
        [DataMember(Name="openPOQuantityInnerPacks", EmitDefaultValue=false)]
        public int? OpenPOQuantityInnerPacks { get; private set; }

        /// <summary>
        /// Gets or Sets OrderableQuantityInnerPacks
        /// </summary>
        [DataMember(Name="orderableQuantityInnerPacks", EmitDefaultValue=false)]
        public int? OrderableQuantityInnerPacks { get; private set; }

        /// <summary>
        /// Gets or Sets UnallocatableQuantityInnerPacks
        /// </summary>
        [DataMember(Name="unallocatableQuantityInnerPacks", EmitDefaultValue=false)]
        public int? UnallocatableQuantityInnerPacks { get; private set; }

        /// <summary>
        /// Gets or Sets UnavailableQuantityInnerPacks
        /// </summary>
        [DataMember(Name="unavailableQuantityInnerPacks", EmitDefaultValue=false)]
        public int? UnavailableQuantityInnerPacks { get; private set; }

        /// <summary>
        /// Gets or Sets AvailableQuantityCases
        /// </summary>
        [DataMember(Name="availableQuantityCases", EmitDefaultValue=false)]
        public int? AvailableQuantityCases { get; private set; }

        /// <summary>
        /// Gets or Sets DamagedQuantityCases
        /// </summary>
        [DataMember(Name="damagedQuantityCases", EmitDefaultValue=false)]
        public int? DamagedQuantityCases { get; private set; }

        /// <summary>
        /// Gets or Sets InFulfillmentProcessQuantityCases
        /// </summary>
        [DataMember(Name="inFulfillmentProcessQuantityCases", EmitDefaultValue=false)]
        public int? InFulfillmentProcessQuantityCases { get; private set; }

        /// <summary>
        /// Gets or Sets OnHandQuantityCases
        /// </summary>
        [DataMember(Name="onHandQuantityCases", EmitDefaultValue=false)]
        public int? OnHandQuantityCases { get; private set; }

        /// <summary>
        /// Gets or Sets OpenOrderQuantityCases
        /// </summary>
        [DataMember(Name="openOrderQuantityCases", EmitDefaultValue=false)]
        public int? OpenOrderQuantityCases { get; private set; }

        /// <summary>
        /// Gets or Sets OpenPOQuantityCases
        /// </summary>
        [DataMember(Name="openPOQuantityCases", EmitDefaultValue=false)]
        public int? OpenPOQuantityCases { get; private set; }

        /// <summary>
        /// Gets or Sets OrderableQuantityCases
        /// </summary>
        [DataMember(Name="orderableQuantityCases", EmitDefaultValue=false)]
        public int? OrderableQuantityCases { get; private set; }

        /// <summary>
        /// Gets or Sets UnallocatableQuantityCases
        /// </summary>
        [DataMember(Name="unallocatableQuantityCases", EmitDefaultValue=false)]
        public int? UnallocatableQuantityCases { get; private set; }

        /// <summary>
        /// Gets or Sets UnavailableQuantityCases
        /// </summary>
        [DataMember(Name="unavailableQuantityCases", EmitDefaultValue=false)]
        public int? UnavailableQuantityCases { get; private set; }

        /// <summary>
        /// Gets or Sets AvailableQuantityPallets
        /// </summary>
        [DataMember(Name="availableQuantityPallets", EmitDefaultValue=false)]
        public int? AvailableQuantityPallets { get; private set; }

        /// <summary>
        /// Gets or Sets DamagedQuantityPallets
        /// </summary>
        [DataMember(Name="damagedQuantityPallets", EmitDefaultValue=false)]
        public int? DamagedQuantityPallets { get; private set; }

        /// <summary>
        /// Gets or Sets InFulfillmentProcessQuantityPallets
        /// </summary>
        [DataMember(Name="inFulfillmentProcessQuantityPallets", EmitDefaultValue=false)]
        public int? InFulfillmentProcessQuantityPallets { get; private set; }

        /// <summary>
        /// Gets or Sets OnHandQuantityPallets
        /// </summary>
        [DataMember(Name="onHandQuantityPallets", EmitDefaultValue=false)]
        public int? OnHandQuantityPallets { get; private set; }

        /// <summary>
        /// Gets or Sets OpenOrderQuantityPallets
        /// </summary>
        [DataMember(Name="openOrderQuantityPallets", EmitDefaultValue=false)]
        public int? OpenOrderQuantityPallets { get; private set; }

        /// <summary>
        /// Gets or Sets OpenPOQuantityPallets
        /// </summary>
        [DataMember(Name="openPOQuantityPallets", EmitDefaultValue=false)]
        public int? OpenPOQuantityPallets { get; private set; }

        /// <summary>
        /// Gets or Sets OrderableQuantityPallets
        /// </summary>
        [DataMember(Name="orderableQuantityPallets", EmitDefaultValue=false)]
        public int? OrderableQuantityPallets { get; private set; }

        /// <summary>
        /// Gets or Sets UnallocatableQuantityPallets
        /// </summary>
        [DataMember(Name="unallocatableQuantityPallets", EmitDefaultValue=false)]
        public int? UnallocatableQuantityPallets { get; private set; }

        /// <summary>
        /// Gets or Sets UnavailableQuantityPallets
        /// </summary>
        [DataMember(Name="unavailableQuantityPallets", EmitDefaultValue=false)]
        public int? UnavailableQuantityPallets { get; private set; }

        /// <summary>
        /// Gets or Sets OverallDaysOnHand
        /// </summary>
        [DataMember(Name="overallDaysOnHand", EmitDefaultValue=false)]
        public int? OverallDaysOnHand { get; private set; }

        /// <summary>
        /// Gets or Sets OverallStockStatus
        /// </summary>
        [DataMember(Name="overallStockStatus", EmitDefaultValue=false)]
        public string OverallStockStatus { get; private set; }

        /// <summary>
        /// Gets or Sets EstimatedPallets
        /// </summary>
        [DataMember(Name="estimatedPallets", EmitDefaultValue=false)]
        public int? EstimatedPallets { get; private set; }

        /// <summary>
        /// Gets or Sets EstimatedCases
        /// </summary>
        [DataMember(Name="estimatedCases", EmitDefaultValue=false)]
        public int? EstimatedCases { get; private set; }

        /// <summary>
        /// Gets or Sets EstimatedInnerPacks
        /// </summary>
        [DataMember(Name="estimatedInnerPacks", EmitDefaultValue=false)]
        public int? EstimatedInnerPacks { get; private set; }

        /// <summary>
        /// Gets or Sets NextRequestedDeliveryDate
        /// </summary>
        [DataMember(Name="nextRequestedDeliveryDate", EmitDefaultValue=false)]
        public DateTime? NextRequestedDeliveryDate { get; private set; }

        /// <summary>
        /// Gets or Sets Warehouse1Id
        /// </summary>
        [DataMember(Name="warehouse1Id", EmitDefaultValue=false)]
        public int? Warehouse1Id { get; private set; }

        /// <summary>
        /// Gets or Sets W1AvailableQuantity
        /// </summary>
        [DataMember(Name="w1AvailableQuantity", EmitDefaultValue=false)]
        public int? W1AvailableQuantity { get; private set; }

        /// <summary>
        /// Gets or Sets W1DamagedQuantity
        /// </summary>
        [DataMember(Name="w1DamagedQuantity", EmitDefaultValue=false)]
        public int? W1DamagedQuantity { get; private set; }

        /// <summary>
        /// Gets or Sets W1InFulfillmentProcessQuantity
        /// </summary>
        [DataMember(Name="w1InFulfillmentProcessQuantity", EmitDefaultValue=false)]
        public int? W1InFulfillmentProcessQuantity { get; private set; }

        /// <summary>
        /// Gets or Sets W1OnHandQuantity
        /// </summary>
        [DataMember(Name="w1OnHandQuantity", EmitDefaultValue=false)]
        public int? W1OnHandQuantity { get; private set; }

        /// <summary>
        /// Gets or Sets W1OpenOrderQuantity
        /// </summary>
        [DataMember(Name="w1OpenOrderQuantity", EmitDefaultValue=false)]
        public int? W1OpenOrderQuantity { get; private set; }

        /// <summary>
        /// Gets or Sets W1OpenPOQuantity
        /// </summary>
        [DataMember(Name="w1OpenPOQuantity", EmitDefaultValue=false)]
        public int? W1OpenPOQuantity { get; private set; }

        /// <summary>
        /// Gets or Sets W1OrderableQuantity
        /// </summary>
        [DataMember(Name="w1OrderableQuantity", EmitDefaultValue=false)]
        public int? W1OrderableQuantity { get; private set; }

        /// <summary>
        /// Gets or Sets W1UnallocatableQuantity
        /// </summary>
        [DataMember(Name="w1UnallocatableQuantity", EmitDefaultValue=false)]
        public int? W1UnallocatableQuantity { get; private set; }

        /// <summary>
        /// Gets or Sets W1UnavailableQuantity
        /// </summary>
        [DataMember(Name="w1UnavailableQuantity", EmitDefaultValue=false)]
        public int? W1UnavailableQuantity { get; private set; }

        /// <summary>
        /// Gets or Sets W1DaysOnHand
        /// </summary>
        [DataMember(Name="w1DaysOnHand", EmitDefaultValue=false)]
        public int? W1DaysOnHand { get; private set; }

        /// <summary>
        /// Gets or Sets W1StockStatus
        /// </summary>
        [DataMember(Name="w1StockStatus", EmitDefaultValue=false)]
        public string W1StockStatus { get; private set; }

        /// <summary>
        /// Gets or Sets W1EstimatedPallets
        /// </summary>
        [DataMember(Name="w1EstimatedPallets", EmitDefaultValue=false)]
        public int? W1EstimatedPallets { get; private set; }

        /// <summary>
        /// Gets or Sets W1EstimatedCases
        /// </summary>
        [DataMember(Name="w1EstimatedCases", EmitDefaultValue=false)]
        public int? W1EstimatedCases { get; private set; }

        /// <summary>
        /// Gets or Sets W1EstimatedInnerPacks
        /// </summary>
        [DataMember(Name="w1EstimatedInnerPacks", EmitDefaultValue=false)]
        public int? W1EstimatedInnerPacks { get; private set; }

        /// <summary>
        /// Gets or Sets W1NextRequestedDeliveryDate
        /// </summary>
        [DataMember(Name="w1NextRequestedDeliveryDate", EmitDefaultValue=false)]
        public DateTime? W1NextRequestedDeliveryDate { get; private set; }

        /// <summary>
        /// Gets or Sets Warehouse2Id
        /// </summary>
        [DataMember(Name="warehouse2Id", EmitDefaultValue=false)]
        public int? Warehouse2Id { get; private set; }

        /// <summary>
        /// Gets or Sets W2AvailableQuantity
        /// </summary>
        [DataMember(Name="w2AvailableQuantity", EmitDefaultValue=false)]
        public int? W2AvailableQuantity { get; private set; }

        /// <summary>
        /// Gets or Sets W2DamagedQuantity
        /// </summary>
        [DataMember(Name="w2DamagedQuantity", EmitDefaultValue=false)]
        public int? W2DamagedQuantity { get; private set; }

        /// <summary>
        /// Gets or Sets W2InFulfillmentProcessQuantity
        /// </summary>
        [DataMember(Name="w2InFulfillmentProcessQuantity", EmitDefaultValue=false)]
        public int? W2InFulfillmentProcessQuantity { get; private set; }

        /// <summary>
        /// Gets or Sets W2OnHandQuantity
        /// </summary>
        [DataMember(Name="w2OnHandQuantity", EmitDefaultValue=false)]
        public int? W2OnHandQuantity { get; private set; }

        /// <summary>
        /// Gets or Sets W2OpenOrderQuantity
        /// </summary>
        [DataMember(Name="w2OpenOrderQuantity", EmitDefaultValue=false)]
        public int? W2OpenOrderQuantity { get; private set; }

        /// <summary>
        /// Gets or Sets W2OpenPOQuantity
        /// </summary>
        [DataMember(Name="w2OpenPOQuantity", EmitDefaultValue=false)]
        public int? W2OpenPOQuantity { get; private set; }

        /// <summary>
        /// Gets or Sets W2OrderableQuantity
        /// </summary>
        [DataMember(Name="w2OrderableQuantity", EmitDefaultValue=false)]
        public int? W2OrderableQuantity { get; private set; }

        /// <summary>
        /// Gets or Sets W2UnallocatableQuantity
        /// </summary>
        [DataMember(Name="w2UnallocatableQuantity", EmitDefaultValue=false)]
        public int? W2UnallocatableQuantity { get; private set; }

        /// <summary>
        /// Gets or Sets W2UnavailableQuantity
        /// </summary>
        [DataMember(Name="w2UnavailableQuantity", EmitDefaultValue=false)]
        public int? W2UnavailableQuantity { get; private set; }

        /// <summary>
        /// Gets or Sets W2DaysOnHand
        /// </summary>
        [DataMember(Name="w2DaysOnHand", EmitDefaultValue=false)]
        public int? W2DaysOnHand { get; private set; }

        /// <summary>
        /// Gets or Sets W2StockStatus
        /// </summary>
        [DataMember(Name="w2StockStatus", EmitDefaultValue=false)]
        public string W2StockStatus { get; private set; }

        /// <summary>
        /// Gets or Sets W2EstimatedPallets
        /// </summary>
        [DataMember(Name="w2EstimatedPallets", EmitDefaultValue=false)]
        public int? W2EstimatedPallets { get; private set; }

        /// <summary>
        /// Gets or Sets W2EstimatedCases
        /// </summary>
        [DataMember(Name="w2EstimatedCases", EmitDefaultValue=false)]
        public int? W2EstimatedCases { get; private set; }

        /// <summary>
        /// Gets or Sets W2EstimatedInnerPacks
        /// </summary>
        [DataMember(Name="w2EstimatedInnerPacks", EmitDefaultValue=false)]
        public int? W2EstimatedInnerPacks { get; private set; }

        /// <summary>
        /// Gets or Sets W2NextRequestedDeliveryDate
        /// </summary>
        [DataMember(Name="w2NextRequestedDeliveryDate", EmitDefaultValue=false)]
        public DateTime? W2NextRequestedDeliveryDate { get; private set; }

        /// <summary>
        /// Gets or Sets Warehouse3Id
        /// </summary>
        [DataMember(Name="warehouse3Id", EmitDefaultValue=false)]
        public int? Warehouse3Id { get; private set; }

        /// <summary>
        /// Gets or Sets W3AvailableQuantity
        /// </summary>
        [DataMember(Name="w3AvailableQuantity", EmitDefaultValue=false)]
        public int? W3AvailableQuantity { get; private set; }

        /// <summary>
        /// Gets or Sets W3DamagedQuantity
        /// </summary>
        [DataMember(Name="w3DamagedQuantity", EmitDefaultValue=false)]
        public int? W3DamagedQuantity { get; private set; }

        /// <summary>
        /// Gets or Sets W3InFulfillmentProcessQuantity
        /// </summary>
        [DataMember(Name="w3InFulfillmentProcessQuantity", EmitDefaultValue=false)]
        public int? W3InFulfillmentProcessQuantity { get; private set; }

        /// <summary>
        /// Gets or Sets W3OnHandQuantity
        /// </summary>
        [DataMember(Name="w3OnHandQuantity", EmitDefaultValue=false)]
        public int? W3OnHandQuantity { get; private set; }

        /// <summary>
        /// Gets or Sets W3OpenOrderQuantity
        /// </summary>
        [DataMember(Name="w3OpenOrderQuantity", EmitDefaultValue=false)]
        public int? W3OpenOrderQuantity { get; private set; }

        /// <summary>
        /// Gets or Sets W3OpenPOQuantity
        /// </summary>
        [DataMember(Name="w3OpenPOQuantity", EmitDefaultValue=false)]
        public int? W3OpenPOQuantity { get; private set; }

        /// <summary>
        /// Gets or Sets W3OrderableQuantity
        /// </summary>
        [DataMember(Name="w3OrderableQuantity", EmitDefaultValue=false)]
        public int? W3OrderableQuantity { get; private set; }

        /// <summary>
        /// Gets or Sets W3UnallocatableQuantity
        /// </summary>
        [DataMember(Name="w3UnallocatableQuantity", EmitDefaultValue=false)]
        public int? W3UnallocatableQuantity { get; private set; }

        /// <summary>
        /// Gets or Sets W3UnavailableQuantity
        /// </summary>
        [DataMember(Name="w3UnavailableQuantity", EmitDefaultValue=false)]
        public int? W3UnavailableQuantity { get; private set; }

        /// <summary>
        /// Gets or Sets W3DaysOnHand
        /// </summary>
        [DataMember(Name="w3DaysOnHand", EmitDefaultValue=false)]
        public int? W3DaysOnHand { get; private set; }

        /// <summary>
        /// Gets or Sets W3StockStatus
        /// </summary>
        [DataMember(Name="w3StockStatus", EmitDefaultValue=false)]
        public string W3StockStatus { get; private set; }

        /// <summary>
        /// Gets or Sets W3EstimatedPallets
        /// </summary>
        [DataMember(Name="w3EstimatedPallets", EmitDefaultValue=false)]
        public int? W3EstimatedPallets { get; private set; }

        /// <summary>
        /// Gets or Sets W3EstimatedCases
        /// </summary>
        [DataMember(Name="w3EstimatedCases", EmitDefaultValue=false)]
        public int? W3EstimatedCases { get; private set; }

        /// <summary>
        /// Gets or Sets W3EstimatedInnerPacks
        /// </summary>
        [DataMember(Name="w3EstimatedInnerPacks", EmitDefaultValue=false)]
        public int? W3EstimatedInnerPacks { get; private set; }

        /// <summary>
        /// Gets or Sets W3NextRequestedDeliveryDate
        /// </summary>
        [DataMember(Name="w3NextRequestedDeliveryDate", EmitDefaultValue=false)]
        public DateTime? W3NextRequestedDeliveryDate { get; private set; }

        /// <summary>
        /// Gets or Sets Warehouse4Id
        /// </summary>
        [DataMember(Name="warehouse4Id", EmitDefaultValue=false)]
        public int? Warehouse4Id { get; private set; }

        /// <summary>
        /// Gets or Sets W4AvailableQuantity
        /// </summary>
        [DataMember(Name="w4AvailableQuantity", EmitDefaultValue=false)]
        public int? W4AvailableQuantity { get; private set; }

        /// <summary>
        /// Gets or Sets W4DamagedQuantity
        /// </summary>
        [DataMember(Name="w4DamagedQuantity", EmitDefaultValue=false)]
        public int? W4DamagedQuantity { get; private set; }

        /// <summary>
        /// Gets or Sets W4InFulfillmentProcessQuantity
        /// </summary>
        [DataMember(Name="w4InFulfillmentProcessQuantity", EmitDefaultValue=false)]
        public int? W4InFulfillmentProcessQuantity { get; private set; }

        /// <summary>
        /// Gets or Sets W4OnHandQuantity
        /// </summary>
        [DataMember(Name="w4OnHandQuantity", EmitDefaultValue=false)]
        public int? W4OnHandQuantity { get; private set; }

        /// <summary>
        /// Gets or Sets W4OpenOrderQuantity
        /// </summary>
        [DataMember(Name="w4OpenOrderQuantity", EmitDefaultValue=false)]
        public int? W4OpenOrderQuantity { get; private set; }

        /// <summary>
        /// Gets or Sets W4OpenPOQuantity
        /// </summary>
        [DataMember(Name="w4OpenPOQuantity", EmitDefaultValue=false)]
        public int? W4OpenPOQuantity { get; private set; }

        /// <summary>
        /// Gets or Sets W4OrderableQuantity
        /// </summary>
        [DataMember(Name="w4OrderableQuantity", EmitDefaultValue=false)]
        public int? W4OrderableQuantity { get; private set; }

        /// <summary>
        /// Gets or Sets W4UnallocatableQuantity
        /// </summary>
        [DataMember(Name="w4UnallocatableQuantity", EmitDefaultValue=false)]
        public int? W4UnallocatableQuantity { get; private set; }

        /// <summary>
        /// Gets or Sets W4UnavailableQuantity
        /// </summary>
        [DataMember(Name="w4UnavailableQuantity", EmitDefaultValue=false)]
        public int? W4UnavailableQuantity { get; private set; }

        /// <summary>
        /// Gets or Sets W4DaysOnHand
        /// </summary>
        [DataMember(Name="w4DaysOnHand", EmitDefaultValue=false)]
        public int? W4DaysOnHand { get; private set; }

        /// <summary>
        /// Gets or Sets W4StockStatus
        /// </summary>
        [DataMember(Name="w4StockStatus", EmitDefaultValue=false)]
        public string W4StockStatus { get; private set; }

        /// <summary>
        /// Gets or Sets W4EstimatedPallets
        /// </summary>
        [DataMember(Name="w4EstimatedPallets", EmitDefaultValue=false)]
        public int? W4EstimatedPallets { get; private set; }

        /// <summary>
        /// Gets or Sets W4EstimatedCases
        /// </summary>
        [DataMember(Name="w4EstimatedCases", EmitDefaultValue=false)]
        public int? W4EstimatedCases { get; private set; }

        /// <summary>
        /// Gets or Sets W4EstimatedInnerPacks
        /// </summary>
        [DataMember(Name="w4EstimatedInnerPacks", EmitDefaultValue=false)]
        public int? W4EstimatedInnerPacks { get; private set; }

        /// <summary>
        /// Gets or Sets W4NextRequestedDeliveryDate
        /// </summary>
        [DataMember(Name="w4NextRequestedDeliveryDate", EmitDefaultValue=false)]
        public DateTime? W4NextRequestedDeliveryDate { get; private set; }

        /// <summary>
        /// Gets or Sets Warehouse5Id
        /// </summary>
        [DataMember(Name="warehouse5Id", EmitDefaultValue=false)]
        public int? Warehouse5Id { get; private set; }

        /// <summary>
        /// Gets or Sets W5AvailableQuantity
        /// </summary>
        [DataMember(Name="w5AvailableQuantity", EmitDefaultValue=false)]
        public int? W5AvailableQuantity { get; private set; }

        /// <summary>
        /// Gets or Sets W5DamagedQuantity
        /// </summary>
        [DataMember(Name="w5DamagedQuantity", EmitDefaultValue=false)]
        public int? W5DamagedQuantity { get; private set; }

        /// <summary>
        /// Gets or Sets W5InFulfillmentProcessQuantity
        /// </summary>
        [DataMember(Name="w5InFulfillmentProcessQuantity", EmitDefaultValue=false)]
        public int? W5InFulfillmentProcessQuantity { get; private set; }

        /// <summary>
        /// Gets or Sets W5OnHandQuantity
        /// </summary>
        [DataMember(Name="w5OnHandQuantity", EmitDefaultValue=false)]
        public int? W5OnHandQuantity { get; private set; }

        /// <summary>
        /// Gets or Sets W5OpenOrderQuantity
        /// </summary>
        [DataMember(Name="w5OpenOrderQuantity", EmitDefaultValue=false)]
        public int? W5OpenOrderQuantity { get; private set; }

        /// <summary>
        /// Gets or Sets W5OpenPOQuantity
        /// </summary>
        [DataMember(Name="w5OpenPOQuantity", EmitDefaultValue=false)]
        public int? W5OpenPOQuantity { get; private set; }

        /// <summary>
        /// Gets or Sets W5OrderableQuantity
        /// </summary>
        [DataMember(Name="w5OrderableQuantity", EmitDefaultValue=false)]
        public int? W5OrderableQuantity { get; private set; }

        /// <summary>
        /// Gets or Sets W5UnallocatableQuantity
        /// </summary>
        [DataMember(Name="w5UnallocatableQuantity", EmitDefaultValue=false)]
        public int? W5UnallocatableQuantity { get; private set; }

        /// <summary>
        /// Gets or Sets W5UnavailableQuantity
        /// </summary>
        [DataMember(Name="w5UnavailableQuantity", EmitDefaultValue=false)]
        public int? W5UnavailableQuantity { get; private set; }

        /// <summary>
        /// Gets or Sets W5DaysOnHand
        /// </summary>
        [DataMember(Name="w5DaysOnHand", EmitDefaultValue=false)]
        public int? W5DaysOnHand { get; private set; }

        /// <summary>
        /// Gets or Sets W5StockStatus
        /// </summary>
        [DataMember(Name="w5StockStatus", EmitDefaultValue=false)]
        public string W5StockStatus { get; private set; }

        /// <summary>
        /// Gets or Sets W5EstimatedPallets
        /// </summary>
        [DataMember(Name="w5EstimatedPallets", EmitDefaultValue=false)]
        public int? W5EstimatedPallets { get; private set; }

        /// <summary>
        /// Gets or Sets W5EstimatedCases
        /// </summary>
        [DataMember(Name="w5EstimatedCases", EmitDefaultValue=false)]
        public int? W5EstimatedCases { get; private set; }

        /// <summary>
        /// Gets or Sets W5EstimatedInnerPacks
        /// </summary>
        [DataMember(Name="w5EstimatedInnerPacks", EmitDefaultValue=false)]
        public int? W5EstimatedInnerPacks { get; private set; }

        /// <summary>
        /// Gets or Sets W5NextRequestedDeliveryDate
        /// </summary>
        [DataMember(Name="w5NextRequestedDeliveryDate", EmitDefaultValue=false)]
        public DateTime? W5NextRequestedDeliveryDate { get; private set; }

        /// <summary>
        /// Gets or Sets Warehouse6Id
        /// </summary>
        [DataMember(Name="warehouse6Id", EmitDefaultValue=false)]
        public int? Warehouse6Id { get; private set; }

        /// <summary>
        /// Gets or Sets W6AvailableQuantity
        /// </summary>
        [DataMember(Name="w6AvailableQuantity", EmitDefaultValue=false)]
        public int? W6AvailableQuantity { get; private set; }

        /// <summary>
        /// Gets or Sets W6DamagedQuantity
        /// </summary>
        [DataMember(Name="w6DamagedQuantity", EmitDefaultValue=false)]
        public int? W6DamagedQuantity { get; private set; }

        /// <summary>
        /// Gets or Sets W6InFulfillmentProcessQuantity
        /// </summary>
        [DataMember(Name="w6InFulfillmentProcessQuantity", EmitDefaultValue=false)]
        public int? W6InFulfillmentProcessQuantity { get; private set; }

        /// <summary>
        /// Gets or Sets W6OnHandQuantity
        /// </summary>
        [DataMember(Name="w6OnHandQuantity", EmitDefaultValue=false)]
        public int? W6OnHandQuantity { get; private set; }

        /// <summary>
        /// Gets or Sets W6OpenOrderQuantity
        /// </summary>
        [DataMember(Name="w6OpenOrderQuantity", EmitDefaultValue=false)]
        public int? W6OpenOrderQuantity { get; private set; }

        /// <summary>
        /// Gets or Sets W6OpenPOQuantity
        /// </summary>
        [DataMember(Name="w6OpenPOQuantity", EmitDefaultValue=false)]
        public int? W6OpenPOQuantity { get; private set; }

        /// <summary>
        /// Gets or Sets W6OrderableQuantity
        /// </summary>
        [DataMember(Name="w6OrderableQuantity", EmitDefaultValue=false)]
        public int? W6OrderableQuantity { get; private set; }

        /// <summary>
        /// Gets or Sets W6UnallocatableQuantity
        /// </summary>
        [DataMember(Name="w6UnallocatableQuantity", EmitDefaultValue=false)]
        public int? W6UnallocatableQuantity { get; private set; }

        /// <summary>
        /// Gets or Sets W6UnavailableQuantity
        /// </summary>
        [DataMember(Name="w6UnavailableQuantity", EmitDefaultValue=false)]
        public int? W6UnavailableQuantity { get; private set; }

        /// <summary>
        /// Gets or Sets W6DaysOnHand
        /// </summary>
        [DataMember(Name="w6DaysOnHand", EmitDefaultValue=false)]
        public int? W6DaysOnHand { get; private set; }

        /// <summary>
        /// Gets or Sets W6StockStatus
        /// </summary>
        [DataMember(Name="w6StockStatus", EmitDefaultValue=false)]
        public string W6StockStatus { get; private set; }

        /// <summary>
        /// Gets or Sets W6EstimatedPallets
        /// </summary>
        [DataMember(Name="w6EstimatedPallets", EmitDefaultValue=false)]
        public int? W6EstimatedPallets { get; private set; }

        /// <summary>
        /// Gets or Sets W6EstimatedCases
        /// </summary>
        [DataMember(Name="w6EstimatedCases", EmitDefaultValue=false)]
        public int? W6EstimatedCases { get; private set; }

        /// <summary>
        /// Gets or Sets W6EstimatedInnerPacks
        /// </summary>
        [DataMember(Name="w6EstimatedInnerPacks", EmitDefaultValue=false)]
        public int? W6EstimatedInnerPacks { get; private set; }

        /// <summary>
        /// Gets or Sets W6NextRequestedDeliveryDate
        /// </summary>
        [DataMember(Name="w6NextRequestedDeliveryDate", EmitDefaultValue=false)]
        public DateTime? W6NextRequestedDeliveryDate { get; private set; }

        /// <summary>
        /// Gets or Sets Warehouse7Id
        /// </summary>
        [DataMember(Name="warehouse7Id", EmitDefaultValue=false)]
        public int? Warehouse7Id { get; private set; }

        /// <summary>
        /// Gets or Sets W7AvailableQuantity
        /// </summary>
        [DataMember(Name="w7AvailableQuantity", EmitDefaultValue=false)]
        public int? W7AvailableQuantity { get; private set; }

        /// <summary>
        /// Gets or Sets W7DamagedQuantity
        /// </summary>
        [DataMember(Name="w7DamagedQuantity", EmitDefaultValue=false)]
        public int? W7DamagedQuantity { get; private set; }

        /// <summary>
        /// Gets or Sets W7InFulfillmentProcessQuantity
        /// </summary>
        [DataMember(Name="w7InFulfillmentProcessQuantity", EmitDefaultValue=false)]
        public int? W7InFulfillmentProcessQuantity { get; private set; }

        /// <summary>
        /// Gets or Sets W7OnHandQuantity
        /// </summary>
        [DataMember(Name="w7OnHandQuantity", EmitDefaultValue=false)]
        public int? W7OnHandQuantity { get; private set; }

        /// <summary>
        /// Gets or Sets W7OpenOrderQuantity
        /// </summary>
        [DataMember(Name="w7OpenOrderQuantity", EmitDefaultValue=false)]
        public int? W7OpenOrderQuantity { get; private set; }

        /// <summary>
        /// Gets or Sets W7OpenPOQuantity
        /// </summary>
        [DataMember(Name="w7OpenPOQuantity", EmitDefaultValue=false)]
        public int? W7OpenPOQuantity { get; private set; }

        /// <summary>
        /// Gets or Sets W7OrderableQuantity
        /// </summary>
        [DataMember(Name="w7OrderableQuantity", EmitDefaultValue=false)]
        public int? W7OrderableQuantity { get; private set; }

        /// <summary>
        /// Gets or Sets W7UnallocatableQuantity
        /// </summary>
        [DataMember(Name="w7UnallocatableQuantity", EmitDefaultValue=false)]
        public int? W7UnallocatableQuantity { get; private set; }

        /// <summary>
        /// Gets or Sets W7UnavailableQuantity
        /// </summary>
        [DataMember(Name="w7UnavailableQuantity", EmitDefaultValue=false)]
        public int? W7UnavailableQuantity { get; private set; }

        /// <summary>
        /// Gets or Sets W7DaysOnHand
        /// </summary>
        [DataMember(Name="w7DaysOnHand", EmitDefaultValue=false)]
        public int? W7DaysOnHand { get; private set; }

        /// <summary>
        /// Gets or Sets W7StockStatus
        /// </summary>
        [DataMember(Name="w7StockStatus", EmitDefaultValue=false)]
        public string W7StockStatus { get; private set; }

        /// <summary>
        /// Gets or Sets W7EstimatedPallets
        /// </summary>
        [DataMember(Name="w7EstimatedPallets", EmitDefaultValue=false)]
        public int? W7EstimatedPallets { get; private set; }

        /// <summary>
        /// Gets or Sets W7EstimatedCases
        /// </summary>
        [DataMember(Name="w7EstimatedCases", EmitDefaultValue=false)]
        public int? W7EstimatedCases { get; private set; }

        /// <summary>
        /// Gets or Sets W7EstimatedInnerPacks
        /// </summary>
        [DataMember(Name="w7EstimatedInnerPacks", EmitDefaultValue=false)]
        public int? W7EstimatedInnerPacks { get; private set; }

        /// <summary>
        /// Gets or Sets W7NextRequestedDeliveryDate
        /// </summary>
        [DataMember(Name="w7NextRequestedDeliveryDate", EmitDefaultValue=false)]
        public DateTime? W7NextRequestedDeliveryDate { get; private set; }

        /// <summary>
        /// Gets or Sets Warehouse8Id
        /// </summary>
        [DataMember(Name="warehouse8Id", EmitDefaultValue=false)]
        public int? Warehouse8Id { get; private set; }

        /// <summary>
        /// Gets or Sets W8AvailableQuantity
        /// </summary>
        [DataMember(Name="w8AvailableQuantity", EmitDefaultValue=false)]
        public int? W8AvailableQuantity { get; private set; }

        /// <summary>
        /// Gets or Sets W8DamagedQuantity
        /// </summary>
        [DataMember(Name="w8DamagedQuantity", EmitDefaultValue=false)]
        public int? W8DamagedQuantity { get; private set; }

        /// <summary>
        /// Gets or Sets W8InFulfillmentProcessQuantity
        /// </summary>
        [DataMember(Name="w8InFulfillmentProcessQuantity", EmitDefaultValue=false)]
        public int? W8InFulfillmentProcessQuantity { get; private set; }

        /// <summary>
        /// Gets or Sets W8OnHandQuantity
        /// </summary>
        [DataMember(Name="w8OnHandQuantity", EmitDefaultValue=false)]
        public int? W8OnHandQuantity { get; private set; }

        /// <summary>
        /// Gets or Sets W8OpenOrderQuantity
        /// </summary>
        [DataMember(Name="w8OpenOrderQuantity", EmitDefaultValue=false)]
        public int? W8OpenOrderQuantity { get; private set; }

        /// <summary>
        /// Gets or Sets W8OpenPOQuantity
        /// </summary>
        [DataMember(Name="w8OpenPOQuantity", EmitDefaultValue=false)]
        public int? W8OpenPOQuantity { get; private set; }

        /// <summary>
        /// Gets or Sets W8OrderableQuantity
        /// </summary>
        [DataMember(Name="w8OrderableQuantity", EmitDefaultValue=false)]
        public int? W8OrderableQuantity { get; private set; }

        /// <summary>
        /// Gets or Sets W8UnallocatableQuantity
        /// </summary>
        [DataMember(Name="w8UnallocatableQuantity", EmitDefaultValue=false)]
        public int? W8UnallocatableQuantity { get; private set; }

        /// <summary>
        /// Gets or Sets W8UnavailableQuantity
        /// </summary>
        [DataMember(Name="w8UnavailableQuantity", EmitDefaultValue=false)]
        public int? W8UnavailableQuantity { get; private set; }

        /// <summary>
        /// Gets or Sets W8DaysOnHand
        /// </summary>
        [DataMember(Name="w8DaysOnHand", EmitDefaultValue=false)]
        public int? W8DaysOnHand { get; private set; }

        /// <summary>
        /// Gets or Sets W8StockStatus
        /// </summary>
        [DataMember(Name="w8StockStatus", EmitDefaultValue=false)]
        public string W8StockStatus { get; private set; }

        /// <summary>
        /// Gets or Sets W8EstimatedPallets
        /// </summary>
        [DataMember(Name="w8EstimatedPallets", EmitDefaultValue=false)]
        public int? W8EstimatedPallets { get; private set; }

        /// <summary>
        /// Gets or Sets W8EstimatedCases
        /// </summary>
        [DataMember(Name="w8EstimatedCases", EmitDefaultValue=false)]
        public int? W8EstimatedCases { get; private set; }

        /// <summary>
        /// Gets or Sets W8EstimatedInnerPacks
        /// </summary>
        [DataMember(Name="w8EstimatedInnerPacks", EmitDefaultValue=false)]
        public int? W8EstimatedInnerPacks { get; private set; }

        /// <summary>
        /// Gets or Sets W8NextRequestedDeliveryDate
        /// </summary>
        [DataMember(Name="w8NextRequestedDeliveryDate", EmitDefaultValue=false)]
        public DateTime? W8NextRequestedDeliveryDate { get; private set; }

        /// <summary>
        /// Gets or Sets Warehouse9Id
        /// </summary>
        [DataMember(Name="warehouse9Id", EmitDefaultValue=false)]
        public int? Warehouse9Id { get; private set; }

        /// <summary>
        /// Gets or Sets W9AvailableQuantity
        /// </summary>
        [DataMember(Name="w9AvailableQuantity", EmitDefaultValue=false)]
        public int? W9AvailableQuantity { get; private set; }

        /// <summary>
        /// Gets or Sets W9DamagedQuantity
        /// </summary>
        [DataMember(Name="w9DamagedQuantity", EmitDefaultValue=false)]
        public int? W9DamagedQuantity { get; private set; }

        /// <summary>
        /// Gets or Sets W9InFulfillmentProcessQuantity
        /// </summary>
        [DataMember(Name="w9InFulfillmentProcessQuantity", EmitDefaultValue=false)]
        public int? W9InFulfillmentProcessQuantity { get; private set; }

        /// <summary>
        /// Gets or Sets W9OnHandQuantity
        /// </summary>
        [DataMember(Name="w9OnHandQuantity", EmitDefaultValue=false)]
        public int? W9OnHandQuantity { get; private set; }

        /// <summary>
        /// Gets or Sets W9OpenOrderQuantity
        /// </summary>
        [DataMember(Name="w9OpenOrderQuantity", EmitDefaultValue=false)]
        public int? W9OpenOrderQuantity { get; private set; }

        /// <summary>
        /// Gets or Sets W9OpenPOQuantity
        /// </summary>
        [DataMember(Name="w9OpenPOQuantity", EmitDefaultValue=false)]
        public int? W9OpenPOQuantity { get; private set; }

        /// <summary>
        /// Gets or Sets W9OrderableQuantity
        /// </summary>
        [DataMember(Name="w9OrderableQuantity", EmitDefaultValue=false)]
        public int? W9OrderableQuantity { get; private set; }

        /// <summary>
        /// Gets or Sets W9UnallocatableQuantity
        /// </summary>
        [DataMember(Name="w9UnallocatableQuantity", EmitDefaultValue=false)]
        public int? W9UnallocatableQuantity { get; private set; }

        /// <summary>
        /// Gets or Sets W9UnavailableQuantity
        /// </summary>
        [DataMember(Name="w9UnavailableQuantity", EmitDefaultValue=false)]
        public int? W9UnavailableQuantity { get; private set; }

        /// <summary>
        /// Gets or Sets W9DaysOnHand
        /// </summary>
        [DataMember(Name="w9DaysOnHand", EmitDefaultValue=false)]
        public int? W9DaysOnHand { get; private set; }

        /// <summary>
        /// Gets or Sets W9StockStatus
        /// </summary>
        [DataMember(Name="w9StockStatus", EmitDefaultValue=false)]
        public string W9StockStatus { get; private set; }

        /// <summary>
        /// Gets or Sets W9EstimatedPallets
        /// </summary>
        [DataMember(Name="w9EstimatedPallets", EmitDefaultValue=false)]
        public int? W9EstimatedPallets { get; private set; }

        /// <summary>
        /// Gets or Sets W9EstimatedCases
        /// </summary>
        [DataMember(Name="w9EstimatedCases", EmitDefaultValue=false)]
        public int? W9EstimatedCases { get; private set; }

        /// <summary>
        /// Gets or Sets W9EstimatedInnerPacks
        /// </summary>
        [DataMember(Name="w9EstimatedInnerPacks", EmitDefaultValue=false)]
        public int? W9EstimatedInnerPacks { get; private set; }

        /// <summary>
        /// Gets or Sets W9NextRequestedDeliveryDate
        /// </summary>
        [DataMember(Name="w9NextRequestedDeliveryDate", EmitDefaultValue=false)]
        public DateTime? W9NextRequestedDeliveryDate { get; private set; }

        /// <summary>
        /// Gets or Sets Warehouse10Id
        /// </summary>
        [DataMember(Name="warehouse10Id", EmitDefaultValue=false)]
        public int? Warehouse10Id { get; private set; }

        /// <summary>
        /// Gets or Sets W10AvailableQuantity
        /// </summary>
        [DataMember(Name="w10AvailableQuantity", EmitDefaultValue=false)]
        public int? W10AvailableQuantity { get; private set; }

        /// <summary>
        /// Gets or Sets W10DamagedQuantity
        /// </summary>
        [DataMember(Name="w10DamagedQuantity", EmitDefaultValue=false)]
        public int? W10DamagedQuantity { get; private set; }

        /// <summary>
        /// Gets or Sets W10InFulfillmentProcessQuantity
        /// </summary>
        [DataMember(Name="w10InFulfillmentProcessQuantity", EmitDefaultValue=false)]
        public int? W10InFulfillmentProcessQuantity { get; private set; }

        /// <summary>
        /// Gets or Sets W10OnHandQuantity
        /// </summary>
        [DataMember(Name="w10OnHandQuantity", EmitDefaultValue=false)]
        public int? W10OnHandQuantity { get; private set; }

        /// <summary>
        /// Gets or Sets W10OpenOrderQuantity
        /// </summary>
        [DataMember(Name="w10OpenOrderQuantity", EmitDefaultValue=false)]
        public int? W10OpenOrderQuantity { get; private set; }

        /// <summary>
        /// Gets or Sets W10OpenPOQuantity
        /// </summary>
        [DataMember(Name="w10OpenPOQuantity", EmitDefaultValue=false)]
        public int? W10OpenPOQuantity { get; private set; }

        /// <summary>
        /// Gets or Sets W10OrderableQuantity
        /// </summary>
        [DataMember(Name="w10OrderableQuantity", EmitDefaultValue=false)]
        public int? W10OrderableQuantity { get; private set; }

        /// <summary>
        /// Gets or Sets W10UnallocatableQuantity
        /// </summary>
        [DataMember(Name="w10UnallocatableQuantity", EmitDefaultValue=false)]
        public int? W10UnallocatableQuantity { get; private set; }

        /// <summary>
        /// Gets or Sets W10UnavailableQuantity
        /// </summary>
        [DataMember(Name="w10UnavailableQuantity", EmitDefaultValue=false)]
        public int? W10UnavailableQuantity { get; private set; }

        /// <summary>
        /// Gets or Sets W10DaysOnHand
        /// </summary>
        [DataMember(Name="w10DaysOnHand", EmitDefaultValue=false)]
        public int? W10DaysOnHand { get; private set; }

        /// <summary>
        /// Gets or Sets W10StockStatus
        /// </summary>
        [DataMember(Name="w10StockStatus", EmitDefaultValue=false)]
        public string W10StockStatus { get; private set; }

        /// <summary>
        /// Gets or Sets W10EstimatedPallets
        /// </summary>
        [DataMember(Name="w10EstimatedPallets", EmitDefaultValue=false)]
        public int? W10EstimatedPallets { get; private set; }

        /// <summary>
        /// Gets or Sets W10EstimatedCases
        /// </summary>
        [DataMember(Name="w10EstimatedCases", EmitDefaultValue=false)]
        public int? W10EstimatedCases { get; private set; }

        /// <summary>
        /// Gets or Sets W10EstimatedInnerPacks
        /// </summary>
        [DataMember(Name="w10EstimatedInnerPacks", EmitDefaultValue=false)]
        public int? W10EstimatedInnerPacks { get; private set; }

        /// <summary>
        /// Gets or Sets W10NextRequestedDeliveryDate
        /// </summary>
        [DataMember(Name="w10NextRequestedDeliveryDate", EmitDefaultValue=false)]
        public DateTime? W10NextRequestedDeliveryDate { get; private set; }

        /// <summary>
        /// Gets or Sets CustomFields
        /// </summary>
        [DataMember(Name="customFields", EmitDefaultValue=false)]
        public Dictionary<string, Object> CustomFields { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Item {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  AccountCodeId: ").Append(AccountCodeId).Append("\n");
            sb.Append("  LowStockContactId: ").Append(LowStockContactId).Append("\n");
            sb.Append("  LegacyLowLevelContactId: ").Append(LegacyLowLevelContactId).Append("\n");
            sb.Append("  LowStockCodeId: ").Append(LowStockCodeId).Append("\n");
            sb.Append("  MajorGroupId: ").Append(MajorGroupId).Append("\n");
            sb.Append("  SubGroupId: ").Append(SubGroupId).Append("\n");
            sb.Append("  ProductCodeId: ").Append(ProductCodeId).Append("\n");
            sb.Append("  SummaryCodeId: ").Append(SummaryCodeId).Append("\n");
            sb.Append("  BuyerId: ").Append(BuyerId).Append("\n");
            sb.Append("  LobId: ").Append(LobId).Append("\n");
            sb.Append("  Sku: ").Append(Sku).Append("\n");
            sb.Append("  VendorSKU: ").Append(VendorSKU).Append("\n");
            sb.Append("  Upc: ").Append(Upc).Append("\n");
            sb.Append("  ItemDescription: ").Append(ItemDescription).Append("\n");
            sb.Append("  PackingSlipDescription: ").Append(PackingSlipDescription).Append("\n");
            sb.Append("  AbsoluteMax: ").Append(AbsoluteMax).Append("\n");
            sb.Append("  AdditionalDescription: ").Append(AdditionalDescription).Append("\n");
            sb.Append("  Backorder: ").Append(Backorder).Append("\n");
            sb.Append("  ChargeCode: ").Append(ChargeCode).Append("\n");
            sb.Append("  CommodityCodeId: ").Append(CommodityCodeId).Append("\n");
            sb.Append("  CompanionCode: ").Append(CompanionCode).Append("\n");
            sb.Append("  CreateDate: ").Append(CreateDate).Append("\n");
            sb.Append("  CriticalAmount: ").Append(CriticalAmount).Append("\n");
            sb.Append("  OverallFixedReorderPoint: ").Append(OverallFixedReorderPoint).Append("\n");
            sb.Append("  OverallLeadTime: ").Append(OverallLeadTime).Append("\n");
            sb.Append("  SellPrice: ").Append(SellPrice).Append("\n");
            sb.Append("  PricingPer: ").Append(PricingPer).Append("\n");
            sb.Append("  LotControlFlag: ").Append(LotControlFlag).Append("\n");
            sb.Append("  MaxCycle: ").Append(MaxCycle).Append("\n");
            sb.Append("  MaxInterim: ").Append(MaxInterim).Append("\n");
            sb.Append("  NumericSortOrder: ").Append(NumericSortOrder).Append("\n");
            sb.Append("  OutsideVendorId: ").Append(OutsideVendorId).Append("\n");
            sb.Append("  PickCode: ").Append(PickCode).Append("\n");
            sb.Append("  PodOrderSuffix: ").Append(PodOrderSuffix).Append("\n");
            sb.Append("  PodRevDate: ").Append(PodRevDate).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  SeasonalItem: ").Append(SeasonalItem).Append("\n");
            sb.Append("  RequiresProductionLot: ").Append(RequiresProductionLot).Append("\n");
            sb.Append("  Sector: ").Append(Sector).Append("\n");
            sb.Append("  Secure: ").Append(Secure).Append("\n");
            sb.Append("  SerialCode: ").Append(SerialCode).Append("\n");
            sb.Append("  UnitCode: ").Append(UnitCode).Append("\n");
            sb.Append("  UnitsPerWrap: ").Append(UnitsPerWrap).Append("\n");
            sb.Append("  WeightPerWrap: ").Append(WeightPerWrap).Append("\n");
            sb.Append("  QuantityPerInnerPack: ").Append(QuantityPerInnerPack).Append("\n");
            sb.Append("  QuantityPerCase: ").Append(QuantityPerCase).Append("\n");
            sb.Append("  QuantityPerPallet: ").Append(QuantityPerPallet).Append("\n");
            sb.Append("  InnerPackBarcode: ").Append(InnerPackBarcode).Append("\n");
            sb.Append("  CaseBarcode: ").Append(CaseBarcode).Append("\n");
            sb.Append("  PalletBarcode: ").Append(PalletBarcode).Append("\n");
            sb.Append("  VoidDate: ").Append(VoidDate).Append("\n");
            sb.Append("  WrapCode: ").Append(WrapCode).Append("\n");
            sb.Append("  ExtrinsicText1: ").Append(ExtrinsicText1).Append("\n");
            sb.Append("  ExtrinsicText2: ").Append(ExtrinsicText2).Append("\n");
            sb.Append("  ExtrinsicText3: ").Append(ExtrinsicText3).Append("\n");
            sb.Append("  ExtrinsicNumber1: ").Append(ExtrinsicNumber1).Append("\n");
            sb.Append("  ExtrinsicNumber2: ").Append(ExtrinsicNumber2).Append("\n");
            sb.Append("  ExtrinsicDecimal1: ").Append(ExtrinsicDecimal1).Append("\n");
            sb.Append("  ExtrinsicDecimal2: ").Append(ExtrinsicDecimal2).Append("\n");
            sb.Append("  CasebreakEnabled: ").Append(CasebreakEnabled).Append("\n");
            sb.Append("  VendorId: ").Append(VendorId).Append("\n");
            sb.Append("  VendorPrice: ").Append(VendorPrice).Append("\n");
            sb.Append("  VendorPer: ").Append(VendorPer).Append("\n");
            sb.Append("  ModifyDate: ").Append(ModifyDate).Append("\n");
            sb.Append("  PrimaryImage: ").Append(PrimaryImage).Append("\n");
            sb.Append("  PickImage: ").Append(PickImage).Append("\n");
            sb.Append("  BehaviorType: ").Append(BehaviorType).Append("\n");
            sb.Append("  AssemblyInstructions: ").Append(AssemblyInstructions).Append("\n");
            sb.Append("  ForwardLotMixingRule: ").Append(ForwardLotMixingRule).Append("\n");
            sb.Append("  StorageLotMixingRule: ").Append(StorageLotMixingRule).Append("\n");
            sb.Append("  ForwardItemMixingRule: ").Append(ForwardItemMixingRule).Append("\n");
            sb.Append("  StorageItemMixingRule: ").Append(StorageItemMixingRule).Append("\n");
            sb.Append("  AllocationRule: ").Append(AllocationRule).Append("\n");
            sb.Append("  AllocationSort: ").Append(AllocationSort).Append("\n");
            sb.Append("  AllocationField: ").Append(AllocationField).Append("\n");
            sb.Append("  BarcodeField: ").Append(BarcodeField).Append("\n");
            sb.Append("  WarehouseDisplayField: ").Append(WarehouseDisplayField).Append("\n");
            sb.Append("  ProductIdTagSchemeId: ").Append(ProductIdTagSchemeId).Append("\n");
            sb.Append("  ItemSerialSchemeId: ").Append(ItemSerialSchemeId).Append("\n");
            sb.Append("  ReceivingCriteriaSchemeId: ").Append(ReceivingCriteriaSchemeId).Append("\n");
            sb.Append("  AsnRule: ").Append(AsnRule).Append("\n");
            sb.Append("  QuantityType: ").Append(QuantityType).Append("\n");
            sb.Append("  Hazmat: ").Append(Hazmat).Append("\n");
            sb.Append("  UspsHazmatTypeId: ").Append(UspsHazmatTypeId).Append("\n");
            sb.Append("  IsAlcohol: ").Append(IsAlcohol).Append("\n");
            sb.Append("  AlcoholType: ").Append(AlcoholType).Append("\n");
            sb.Append("  AlcoholContent: ").Append(AlcoholContent).Append("\n");
            sb.Append("  AlcoholContainer: ").Append(AlcoholContainer).Append("\n");
            sb.Append("  AlcoholVintageYear: ").Append(AlcoholVintageYear).Append("\n");
            sb.Append("  AlcoholCountry: ").Append(AlcoholCountry).Append("\n");
            sb.Append("  AlcoholState: ").Append(AlcoholState).Append("\n");
            sb.Append("  AlcoholRegion: ").Append(AlcoholRegion).Append("\n");
            sb.Append("  AlcoholBrand: ").Append(AlcoholBrand).Append("\n");
            sb.Append("  AlcoholUPCCode: ").Append(AlcoholUPCCode).Append("\n");
            sb.Append("  AlcoholNAMBCACode: ").Append(AlcoholNAMBCACode).Append("\n");
            sb.Append("  AlcoholUNIMERCCode: ").Append(AlcoholUNIMERCCode).Append("\n");
            sb.Append("  AlcoholSCCCode: ").Append(AlcoholSCCCode).Append("\n");
            sb.Append("  Length: ").Append(Length).Append("\n");
            sb.Append("  Width: ").Append(Width).Append("\n");
            sb.Append("  Height: ").Append(Height).Append("\n");
            sb.Append("  TopUp: ").Append(TopUp).Append("\n");
            sb.Append("  ShipSolo: ").Append(ShipSolo).Append("\n");
            sb.Append("  InventoryUpdateTimestamp: ").Append(InventoryUpdateTimestamp).Append("\n");
            sb.Append("  AvailableQuantity: ").Append(AvailableQuantity).Append("\n");
            sb.Append("  DamagedQuantity: ").Append(DamagedQuantity).Append("\n");
            sb.Append("  InFulfillmentProcessQuantity: ").Append(InFulfillmentProcessQuantity).Append("\n");
            sb.Append("  OnHandQuantity: ").Append(OnHandQuantity).Append("\n");
            sb.Append("  OpenOrderQuantity: ").Append(OpenOrderQuantity).Append("\n");
            sb.Append("  OpenPOQuantity: ").Append(OpenPOQuantity).Append("\n");
            sb.Append("  OrderableQuantity: ").Append(OrderableQuantity).Append("\n");
            sb.Append("  UnallocatableQuantity: ").Append(UnallocatableQuantity).Append("\n");
            sb.Append("  UnavailableQuantity: ").Append(UnavailableQuantity).Append("\n");
            sb.Append("  TotalDemand: ").Append(TotalDemand).Append("\n");
            sb.Append("  AvailableQuantityInnerPacks: ").Append(AvailableQuantityInnerPacks).Append("\n");
            sb.Append("  DamagedQuantityInnerPacks: ").Append(DamagedQuantityInnerPacks).Append("\n");
            sb.Append("  InFulfillmentProcessQuantityInnerPacks: ").Append(InFulfillmentProcessQuantityInnerPacks).Append("\n");
            sb.Append("  OnHandQuantityInnerPacks: ").Append(OnHandQuantityInnerPacks).Append("\n");
            sb.Append("  OpenOrderQuantityInnerPacks: ").Append(OpenOrderQuantityInnerPacks).Append("\n");
            sb.Append("  OpenPOQuantityInnerPacks: ").Append(OpenPOQuantityInnerPacks).Append("\n");
            sb.Append("  OrderableQuantityInnerPacks: ").Append(OrderableQuantityInnerPacks).Append("\n");
            sb.Append("  UnallocatableQuantityInnerPacks: ").Append(UnallocatableQuantityInnerPacks).Append("\n");
            sb.Append("  UnavailableQuantityInnerPacks: ").Append(UnavailableQuantityInnerPacks).Append("\n");
            sb.Append("  AvailableQuantityCases: ").Append(AvailableQuantityCases).Append("\n");
            sb.Append("  DamagedQuantityCases: ").Append(DamagedQuantityCases).Append("\n");
            sb.Append("  InFulfillmentProcessQuantityCases: ").Append(InFulfillmentProcessQuantityCases).Append("\n");
            sb.Append("  OnHandQuantityCases: ").Append(OnHandQuantityCases).Append("\n");
            sb.Append("  OpenOrderQuantityCases: ").Append(OpenOrderQuantityCases).Append("\n");
            sb.Append("  OpenPOQuantityCases: ").Append(OpenPOQuantityCases).Append("\n");
            sb.Append("  OrderableQuantityCases: ").Append(OrderableQuantityCases).Append("\n");
            sb.Append("  UnallocatableQuantityCases: ").Append(UnallocatableQuantityCases).Append("\n");
            sb.Append("  UnavailableQuantityCases: ").Append(UnavailableQuantityCases).Append("\n");
            sb.Append("  AvailableQuantityPallets: ").Append(AvailableQuantityPallets).Append("\n");
            sb.Append("  DamagedQuantityPallets: ").Append(DamagedQuantityPallets).Append("\n");
            sb.Append("  InFulfillmentProcessQuantityPallets: ").Append(InFulfillmentProcessQuantityPallets).Append("\n");
            sb.Append("  OnHandQuantityPallets: ").Append(OnHandQuantityPallets).Append("\n");
            sb.Append("  OpenOrderQuantityPallets: ").Append(OpenOrderQuantityPallets).Append("\n");
            sb.Append("  OpenPOQuantityPallets: ").Append(OpenPOQuantityPallets).Append("\n");
            sb.Append("  OrderableQuantityPallets: ").Append(OrderableQuantityPallets).Append("\n");
            sb.Append("  UnallocatableQuantityPallets: ").Append(UnallocatableQuantityPallets).Append("\n");
            sb.Append("  UnavailableQuantityPallets: ").Append(UnavailableQuantityPallets).Append("\n");
            sb.Append("  OverallDaysOnHand: ").Append(OverallDaysOnHand).Append("\n");
            sb.Append("  OverallStockStatus: ").Append(OverallStockStatus).Append("\n");
            sb.Append("  EstimatedPallets: ").Append(EstimatedPallets).Append("\n");
            sb.Append("  EstimatedCases: ").Append(EstimatedCases).Append("\n");
            sb.Append("  EstimatedInnerPacks: ").Append(EstimatedInnerPacks).Append("\n");
            sb.Append("  NextRequestedDeliveryDate: ").Append(NextRequestedDeliveryDate).Append("\n");
            sb.Append("  Warehouse1Id: ").Append(Warehouse1Id).Append("\n");
            sb.Append("  W1AvailableQuantity: ").Append(W1AvailableQuantity).Append("\n");
            sb.Append("  W1DamagedQuantity: ").Append(W1DamagedQuantity).Append("\n");
            sb.Append("  W1InFulfillmentProcessQuantity: ").Append(W1InFulfillmentProcessQuantity).Append("\n");
            sb.Append("  W1OnHandQuantity: ").Append(W1OnHandQuantity).Append("\n");
            sb.Append("  W1OpenOrderQuantity: ").Append(W1OpenOrderQuantity).Append("\n");
            sb.Append("  W1OpenPOQuantity: ").Append(W1OpenPOQuantity).Append("\n");
            sb.Append("  W1OrderableQuantity: ").Append(W1OrderableQuantity).Append("\n");
            sb.Append("  W1UnallocatableQuantity: ").Append(W1UnallocatableQuantity).Append("\n");
            sb.Append("  W1UnavailableQuantity: ").Append(W1UnavailableQuantity).Append("\n");
            sb.Append("  W1DaysOnHand: ").Append(W1DaysOnHand).Append("\n");
            sb.Append("  W1StockStatus: ").Append(W1StockStatus).Append("\n");
            sb.Append("  W1EstimatedPallets: ").Append(W1EstimatedPallets).Append("\n");
            sb.Append("  W1EstimatedCases: ").Append(W1EstimatedCases).Append("\n");
            sb.Append("  W1EstimatedInnerPacks: ").Append(W1EstimatedInnerPacks).Append("\n");
            sb.Append("  W1NextRequestedDeliveryDate: ").Append(W1NextRequestedDeliveryDate).Append("\n");
            sb.Append("  Warehouse2Id: ").Append(Warehouse2Id).Append("\n");
            sb.Append("  W2AvailableQuantity: ").Append(W2AvailableQuantity).Append("\n");
            sb.Append("  W2DamagedQuantity: ").Append(W2DamagedQuantity).Append("\n");
            sb.Append("  W2InFulfillmentProcessQuantity: ").Append(W2InFulfillmentProcessQuantity).Append("\n");
            sb.Append("  W2OnHandQuantity: ").Append(W2OnHandQuantity).Append("\n");
            sb.Append("  W2OpenOrderQuantity: ").Append(W2OpenOrderQuantity).Append("\n");
            sb.Append("  W2OpenPOQuantity: ").Append(W2OpenPOQuantity).Append("\n");
            sb.Append("  W2OrderableQuantity: ").Append(W2OrderableQuantity).Append("\n");
            sb.Append("  W2UnallocatableQuantity: ").Append(W2UnallocatableQuantity).Append("\n");
            sb.Append("  W2UnavailableQuantity: ").Append(W2UnavailableQuantity).Append("\n");
            sb.Append("  W2DaysOnHand: ").Append(W2DaysOnHand).Append("\n");
            sb.Append("  W2StockStatus: ").Append(W2StockStatus).Append("\n");
            sb.Append("  W2EstimatedPallets: ").Append(W2EstimatedPallets).Append("\n");
            sb.Append("  W2EstimatedCases: ").Append(W2EstimatedCases).Append("\n");
            sb.Append("  W2EstimatedInnerPacks: ").Append(W2EstimatedInnerPacks).Append("\n");
            sb.Append("  W2NextRequestedDeliveryDate: ").Append(W2NextRequestedDeliveryDate).Append("\n");
            sb.Append("  Warehouse3Id: ").Append(Warehouse3Id).Append("\n");
            sb.Append("  W3AvailableQuantity: ").Append(W3AvailableQuantity).Append("\n");
            sb.Append("  W3DamagedQuantity: ").Append(W3DamagedQuantity).Append("\n");
            sb.Append("  W3InFulfillmentProcessQuantity: ").Append(W3InFulfillmentProcessQuantity).Append("\n");
            sb.Append("  W3OnHandQuantity: ").Append(W3OnHandQuantity).Append("\n");
            sb.Append("  W3OpenOrderQuantity: ").Append(W3OpenOrderQuantity).Append("\n");
            sb.Append("  W3OpenPOQuantity: ").Append(W3OpenPOQuantity).Append("\n");
            sb.Append("  W3OrderableQuantity: ").Append(W3OrderableQuantity).Append("\n");
            sb.Append("  W3UnallocatableQuantity: ").Append(W3UnallocatableQuantity).Append("\n");
            sb.Append("  W3UnavailableQuantity: ").Append(W3UnavailableQuantity).Append("\n");
            sb.Append("  W3DaysOnHand: ").Append(W3DaysOnHand).Append("\n");
            sb.Append("  W3StockStatus: ").Append(W3StockStatus).Append("\n");
            sb.Append("  W3EstimatedPallets: ").Append(W3EstimatedPallets).Append("\n");
            sb.Append("  W3EstimatedCases: ").Append(W3EstimatedCases).Append("\n");
            sb.Append("  W3EstimatedInnerPacks: ").Append(W3EstimatedInnerPacks).Append("\n");
            sb.Append("  W3NextRequestedDeliveryDate: ").Append(W3NextRequestedDeliveryDate).Append("\n");
            sb.Append("  Warehouse4Id: ").Append(Warehouse4Id).Append("\n");
            sb.Append("  W4AvailableQuantity: ").Append(W4AvailableQuantity).Append("\n");
            sb.Append("  W4DamagedQuantity: ").Append(W4DamagedQuantity).Append("\n");
            sb.Append("  W4InFulfillmentProcessQuantity: ").Append(W4InFulfillmentProcessQuantity).Append("\n");
            sb.Append("  W4OnHandQuantity: ").Append(W4OnHandQuantity).Append("\n");
            sb.Append("  W4OpenOrderQuantity: ").Append(W4OpenOrderQuantity).Append("\n");
            sb.Append("  W4OpenPOQuantity: ").Append(W4OpenPOQuantity).Append("\n");
            sb.Append("  W4OrderableQuantity: ").Append(W4OrderableQuantity).Append("\n");
            sb.Append("  W4UnallocatableQuantity: ").Append(W4UnallocatableQuantity).Append("\n");
            sb.Append("  W4UnavailableQuantity: ").Append(W4UnavailableQuantity).Append("\n");
            sb.Append("  W4DaysOnHand: ").Append(W4DaysOnHand).Append("\n");
            sb.Append("  W4StockStatus: ").Append(W4StockStatus).Append("\n");
            sb.Append("  W4EstimatedPallets: ").Append(W4EstimatedPallets).Append("\n");
            sb.Append("  W4EstimatedCases: ").Append(W4EstimatedCases).Append("\n");
            sb.Append("  W4EstimatedInnerPacks: ").Append(W4EstimatedInnerPacks).Append("\n");
            sb.Append("  W4NextRequestedDeliveryDate: ").Append(W4NextRequestedDeliveryDate).Append("\n");
            sb.Append("  Warehouse5Id: ").Append(Warehouse5Id).Append("\n");
            sb.Append("  W5AvailableQuantity: ").Append(W5AvailableQuantity).Append("\n");
            sb.Append("  W5DamagedQuantity: ").Append(W5DamagedQuantity).Append("\n");
            sb.Append("  W5InFulfillmentProcessQuantity: ").Append(W5InFulfillmentProcessQuantity).Append("\n");
            sb.Append("  W5OnHandQuantity: ").Append(W5OnHandQuantity).Append("\n");
            sb.Append("  W5OpenOrderQuantity: ").Append(W5OpenOrderQuantity).Append("\n");
            sb.Append("  W5OpenPOQuantity: ").Append(W5OpenPOQuantity).Append("\n");
            sb.Append("  W5OrderableQuantity: ").Append(W5OrderableQuantity).Append("\n");
            sb.Append("  W5UnallocatableQuantity: ").Append(W5UnallocatableQuantity).Append("\n");
            sb.Append("  W5UnavailableQuantity: ").Append(W5UnavailableQuantity).Append("\n");
            sb.Append("  W5DaysOnHand: ").Append(W5DaysOnHand).Append("\n");
            sb.Append("  W5StockStatus: ").Append(W5StockStatus).Append("\n");
            sb.Append("  W5EstimatedPallets: ").Append(W5EstimatedPallets).Append("\n");
            sb.Append("  W5EstimatedCases: ").Append(W5EstimatedCases).Append("\n");
            sb.Append("  W5EstimatedInnerPacks: ").Append(W5EstimatedInnerPacks).Append("\n");
            sb.Append("  W5NextRequestedDeliveryDate: ").Append(W5NextRequestedDeliveryDate).Append("\n");
            sb.Append("  Warehouse6Id: ").Append(Warehouse6Id).Append("\n");
            sb.Append("  W6AvailableQuantity: ").Append(W6AvailableQuantity).Append("\n");
            sb.Append("  W6DamagedQuantity: ").Append(W6DamagedQuantity).Append("\n");
            sb.Append("  W6InFulfillmentProcessQuantity: ").Append(W6InFulfillmentProcessQuantity).Append("\n");
            sb.Append("  W6OnHandQuantity: ").Append(W6OnHandQuantity).Append("\n");
            sb.Append("  W6OpenOrderQuantity: ").Append(W6OpenOrderQuantity).Append("\n");
            sb.Append("  W6OpenPOQuantity: ").Append(W6OpenPOQuantity).Append("\n");
            sb.Append("  W6OrderableQuantity: ").Append(W6OrderableQuantity).Append("\n");
            sb.Append("  W6UnallocatableQuantity: ").Append(W6UnallocatableQuantity).Append("\n");
            sb.Append("  W6UnavailableQuantity: ").Append(W6UnavailableQuantity).Append("\n");
            sb.Append("  W6DaysOnHand: ").Append(W6DaysOnHand).Append("\n");
            sb.Append("  W6StockStatus: ").Append(W6StockStatus).Append("\n");
            sb.Append("  W6EstimatedPallets: ").Append(W6EstimatedPallets).Append("\n");
            sb.Append("  W6EstimatedCases: ").Append(W6EstimatedCases).Append("\n");
            sb.Append("  W6EstimatedInnerPacks: ").Append(W6EstimatedInnerPacks).Append("\n");
            sb.Append("  W6NextRequestedDeliveryDate: ").Append(W6NextRequestedDeliveryDate).Append("\n");
            sb.Append("  Warehouse7Id: ").Append(Warehouse7Id).Append("\n");
            sb.Append("  W7AvailableQuantity: ").Append(W7AvailableQuantity).Append("\n");
            sb.Append("  W7DamagedQuantity: ").Append(W7DamagedQuantity).Append("\n");
            sb.Append("  W7InFulfillmentProcessQuantity: ").Append(W7InFulfillmentProcessQuantity).Append("\n");
            sb.Append("  W7OnHandQuantity: ").Append(W7OnHandQuantity).Append("\n");
            sb.Append("  W7OpenOrderQuantity: ").Append(W7OpenOrderQuantity).Append("\n");
            sb.Append("  W7OpenPOQuantity: ").Append(W7OpenPOQuantity).Append("\n");
            sb.Append("  W7OrderableQuantity: ").Append(W7OrderableQuantity).Append("\n");
            sb.Append("  W7UnallocatableQuantity: ").Append(W7UnallocatableQuantity).Append("\n");
            sb.Append("  W7UnavailableQuantity: ").Append(W7UnavailableQuantity).Append("\n");
            sb.Append("  W7DaysOnHand: ").Append(W7DaysOnHand).Append("\n");
            sb.Append("  W7StockStatus: ").Append(W7StockStatus).Append("\n");
            sb.Append("  W7EstimatedPallets: ").Append(W7EstimatedPallets).Append("\n");
            sb.Append("  W7EstimatedCases: ").Append(W7EstimatedCases).Append("\n");
            sb.Append("  W7EstimatedInnerPacks: ").Append(W7EstimatedInnerPacks).Append("\n");
            sb.Append("  W7NextRequestedDeliveryDate: ").Append(W7NextRequestedDeliveryDate).Append("\n");
            sb.Append("  Warehouse8Id: ").Append(Warehouse8Id).Append("\n");
            sb.Append("  W8AvailableQuantity: ").Append(W8AvailableQuantity).Append("\n");
            sb.Append("  W8DamagedQuantity: ").Append(W8DamagedQuantity).Append("\n");
            sb.Append("  W8InFulfillmentProcessQuantity: ").Append(W8InFulfillmentProcessQuantity).Append("\n");
            sb.Append("  W8OnHandQuantity: ").Append(W8OnHandQuantity).Append("\n");
            sb.Append("  W8OpenOrderQuantity: ").Append(W8OpenOrderQuantity).Append("\n");
            sb.Append("  W8OpenPOQuantity: ").Append(W8OpenPOQuantity).Append("\n");
            sb.Append("  W8OrderableQuantity: ").Append(W8OrderableQuantity).Append("\n");
            sb.Append("  W8UnallocatableQuantity: ").Append(W8UnallocatableQuantity).Append("\n");
            sb.Append("  W8UnavailableQuantity: ").Append(W8UnavailableQuantity).Append("\n");
            sb.Append("  W8DaysOnHand: ").Append(W8DaysOnHand).Append("\n");
            sb.Append("  W8StockStatus: ").Append(W8StockStatus).Append("\n");
            sb.Append("  W8EstimatedPallets: ").Append(W8EstimatedPallets).Append("\n");
            sb.Append("  W8EstimatedCases: ").Append(W8EstimatedCases).Append("\n");
            sb.Append("  W8EstimatedInnerPacks: ").Append(W8EstimatedInnerPacks).Append("\n");
            sb.Append("  W8NextRequestedDeliveryDate: ").Append(W8NextRequestedDeliveryDate).Append("\n");
            sb.Append("  Warehouse9Id: ").Append(Warehouse9Id).Append("\n");
            sb.Append("  W9AvailableQuantity: ").Append(W9AvailableQuantity).Append("\n");
            sb.Append("  W9DamagedQuantity: ").Append(W9DamagedQuantity).Append("\n");
            sb.Append("  W9InFulfillmentProcessQuantity: ").Append(W9InFulfillmentProcessQuantity).Append("\n");
            sb.Append("  W9OnHandQuantity: ").Append(W9OnHandQuantity).Append("\n");
            sb.Append("  W9OpenOrderQuantity: ").Append(W9OpenOrderQuantity).Append("\n");
            sb.Append("  W9OpenPOQuantity: ").Append(W9OpenPOQuantity).Append("\n");
            sb.Append("  W9OrderableQuantity: ").Append(W9OrderableQuantity).Append("\n");
            sb.Append("  W9UnallocatableQuantity: ").Append(W9UnallocatableQuantity).Append("\n");
            sb.Append("  W9UnavailableQuantity: ").Append(W9UnavailableQuantity).Append("\n");
            sb.Append("  W9DaysOnHand: ").Append(W9DaysOnHand).Append("\n");
            sb.Append("  W9StockStatus: ").Append(W9StockStatus).Append("\n");
            sb.Append("  W9EstimatedPallets: ").Append(W9EstimatedPallets).Append("\n");
            sb.Append("  W9EstimatedCases: ").Append(W9EstimatedCases).Append("\n");
            sb.Append("  W9EstimatedInnerPacks: ").Append(W9EstimatedInnerPacks).Append("\n");
            sb.Append("  W9NextRequestedDeliveryDate: ").Append(W9NextRequestedDeliveryDate).Append("\n");
            sb.Append("  Warehouse10Id: ").Append(Warehouse10Id).Append("\n");
            sb.Append("  W10AvailableQuantity: ").Append(W10AvailableQuantity).Append("\n");
            sb.Append("  W10DamagedQuantity: ").Append(W10DamagedQuantity).Append("\n");
            sb.Append("  W10InFulfillmentProcessQuantity: ").Append(W10InFulfillmentProcessQuantity).Append("\n");
            sb.Append("  W10OnHandQuantity: ").Append(W10OnHandQuantity).Append("\n");
            sb.Append("  W10OpenOrderQuantity: ").Append(W10OpenOrderQuantity).Append("\n");
            sb.Append("  W10OpenPOQuantity: ").Append(W10OpenPOQuantity).Append("\n");
            sb.Append("  W10OrderableQuantity: ").Append(W10OrderableQuantity).Append("\n");
            sb.Append("  W10UnallocatableQuantity: ").Append(W10UnallocatableQuantity).Append("\n");
            sb.Append("  W10UnavailableQuantity: ").Append(W10UnavailableQuantity).Append("\n");
            sb.Append("  W10DaysOnHand: ").Append(W10DaysOnHand).Append("\n");
            sb.Append("  W10StockStatus: ").Append(W10StockStatus).Append("\n");
            sb.Append("  W10EstimatedPallets: ").Append(W10EstimatedPallets).Append("\n");
            sb.Append("  W10EstimatedCases: ").Append(W10EstimatedCases).Append("\n");
            sb.Append("  W10EstimatedInnerPacks: ").Append(W10EstimatedInnerPacks).Append("\n");
            sb.Append("  W10NextRequestedDeliveryDate: ").Append(W10NextRequestedDeliveryDate).Append("\n");
            sb.Append("  CustomFields: ").Append(CustomFields).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Item);
        }

        /// <summary>
        /// Returns true if Item instances are equal
        /// </summary>
        /// <param name="input">Instance of Item to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Item input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.AccountCodeId == input.AccountCodeId ||
                    (this.AccountCodeId != null &&
                    this.AccountCodeId.Equals(input.AccountCodeId))
                ) && 
                (
                    this.LowStockContactId == input.LowStockContactId ||
                    (this.LowStockContactId != null &&
                    this.LowStockContactId.Equals(input.LowStockContactId))
                ) && 
                (
                    this.LegacyLowLevelContactId == input.LegacyLowLevelContactId ||
                    (this.LegacyLowLevelContactId != null &&
                    this.LegacyLowLevelContactId.Equals(input.LegacyLowLevelContactId))
                ) && 
                (
                    this.LowStockCodeId == input.LowStockCodeId ||
                    (this.LowStockCodeId != null &&
                    this.LowStockCodeId.Equals(input.LowStockCodeId))
                ) && 
                (
                    this.MajorGroupId == input.MajorGroupId ||
                    (this.MajorGroupId != null &&
                    this.MajorGroupId.Equals(input.MajorGroupId))
                ) && 
                (
                    this.SubGroupId == input.SubGroupId ||
                    (this.SubGroupId != null &&
                    this.SubGroupId.Equals(input.SubGroupId))
                ) && 
                (
                    this.ProductCodeId == input.ProductCodeId ||
                    (this.ProductCodeId != null &&
                    this.ProductCodeId.Equals(input.ProductCodeId))
                ) && 
                (
                    this.SummaryCodeId == input.SummaryCodeId ||
                    (this.SummaryCodeId != null &&
                    this.SummaryCodeId.Equals(input.SummaryCodeId))
                ) && 
                (
                    this.BuyerId == input.BuyerId ||
                    (this.BuyerId != null &&
                    this.BuyerId.Equals(input.BuyerId))
                ) && 
                (
                    this.LobId == input.LobId ||
                    (this.LobId != null &&
                    this.LobId.Equals(input.LobId))
                ) && 
                (
                    this.Sku == input.Sku ||
                    (this.Sku != null &&
                    this.Sku.Equals(input.Sku))
                ) && 
                (
                    this.VendorSKU == input.VendorSKU ||
                    (this.VendorSKU != null &&
                    this.VendorSKU.Equals(input.VendorSKU))
                ) && 
                (
                    this.Upc == input.Upc ||
                    (this.Upc != null &&
                    this.Upc.Equals(input.Upc))
                ) && 
                (
                    this.ItemDescription == input.ItemDescription ||
                    (this.ItemDescription != null &&
                    this.ItemDescription.Equals(input.ItemDescription))
                ) && 
                (
                    this.PackingSlipDescription == input.PackingSlipDescription ||
                    (this.PackingSlipDescription != null &&
                    this.PackingSlipDescription.Equals(input.PackingSlipDescription))
                ) && 
                (
                    this.AbsoluteMax == input.AbsoluteMax ||
                    (this.AbsoluteMax != null &&
                    this.AbsoluteMax.Equals(input.AbsoluteMax))
                ) && 
                (
                    this.AdditionalDescription == input.AdditionalDescription ||
                    (this.AdditionalDescription != null &&
                    this.AdditionalDescription.Equals(input.AdditionalDescription))
                ) && 
                (
                    this.Backorder == input.Backorder ||
                    (this.Backorder != null &&
                    this.Backorder.Equals(input.Backorder))
                ) && 
                (
                    this.ChargeCode == input.ChargeCode ||
                    (this.ChargeCode != null &&
                    this.ChargeCode.Equals(input.ChargeCode))
                ) && 
                (
                    this.CommodityCodeId == input.CommodityCodeId ||
                    (this.CommodityCodeId != null &&
                    this.CommodityCodeId.Equals(input.CommodityCodeId))
                ) && 
                (
                    this.CompanionCode == input.CompanionCode ||
                    (this.CompanionCode != null &&
                    this.CompanionCode.Equals(input.CompanionCode))
                ) && 
                (
                    this.CreateDate == input.CreateDate ||
                    (this.CreateDate != null &&
                    this.CreateDate.Equals(input.CreateDate))
                ) && 
                (
                    this.CriticalAmount == input.CriticalAmount ||
                    (this.CriticalAmount != null &&
                    this.CriticalAmount.Equals(input.CriticalAmount))
                ) && 
                (
                    this.OverallFixedReorderPoint == input.OverallFixedReorderPoint ||
                    (this.OverallFixedReorderPoint != null &&
                    this.OverallFixedReorderPoint.Equals(input.OverallFixedReorderPoint))
                ) && 
                (
                    this.OverallLeadTime == input.OverallLeadTime ||
                    (this.OverallLeadTime != null &&
                    this.OverallLeadTime.Equals(input.OverallLeadTime))
                ) && 
                (
                    this.SellPrice == input.SellPrice ||
                    (this.SellPrice != null &&
                    this.SellPrice.Equals(input.SellPrice))
                ) && 
                (
                    this.PricingPer == input.PricingPer ||
                    (this.PricingPer != null &&
                    this.PricingPer.Equals(input.PricingPer))
                ) && 
                (
                    this.LotControlFlag == input.LotControlFlag ||
                    (this.LotControlFlag != null &&
                    this.LotControlFlag.Equals(input.LotControlFlag))
                ) && 
                (
                    this.MaxCycle == input.MaxCycle ||
                    (this.MaxCycle != null &&
                    this.MaxCycle.Equals(input.MaxCycle))
                ) && 
                (
                    this.MaxInterim == input.MaxInterim ||
                    (this.MaxInterim != null &&
                    this.MaxInterim.Equals(input.MaxInterim))
                ) && 
                (
                    this.NumericSortOrder == input.NumericSortOrder ||
                    (this.NumericSortOrder != null &&
                    this.NumericSortOrder.Equals(input.NumericSortOrder))
                ) && 
                (
                    this.OutsideVendorId == input.OutsideVendorId ||
                    (this.OutsideVendorId != null &&
                    this.OutsideVendorId.Equals(input.OutsideVendorId))
                ) && 
                (
                    this.PickCode == input.PickCode ||
                    (this.PickCode != null &&
                    this.PickCode.Equals(input.PickCode))
                ) && 
                (
                    this.PodOrderSuffix == input.PodOrderSuffix ||
                    (this.PodOrderSuffix != null &&
                    this.PodOrderSuffix.Equals(input.PodOrderSuffix))
                ) && 
                (
                    this.PodRevDate == input.PodRevDate ||
                    (this.PodRevDate != null &&
                    this.PodRevDate.Equals(input.PodRevDate))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.SeasonalItem == input.SeasonalItem ||
                    (this.SeasonalItem != null &&
                    this.SeasonalItem.Equals(input.SeasonalItem))
                ) && 
                (
                    this.RequiresProductionLot == input.RequiresProductionLot ||
                    (this.RequiresProductionLot != null &&
                    this.RequiresProductionLot.Equals(input.RequiresProductionLot))
                ) && 
                (
                    this.Sector == input.Sector ||
                    (this.Sector != null &&
                    this.Sector.Equals(input.Sector))
                ) && 
                (
                    this.Secure == input.Secure ||
                    (this.Secure != null &&
                    this.Secure.Equals(input.Secure))
                ) && 
                (
                    this.SerialCode == input.SerialCode ||
                    (this.SerialCode != null &&
                    this.SerialCode.Equals(input.SerialCode))
                ) && 
                (
                    this.UnitCode == input.UnitCode ||
                    (this.UnitCode != null &&
                    this.UnitCode.Equals(input.UnitCode))
                ) && 
                (
                    this.UnitsPerWrap == input.UnitsPerWrap ||
                    (this.UnitsPerWrap != null &&
                    this.UnitsPerWrap.Equals(input.UnitsPerWrap))
                ) && 
                (
                    this.WeightPerWrap == input.WeightPerWrap ||
                    (this.WeightPerWrap != null &&
                    this.WeightPerWrap.Equals(input.WeightPerWrap))
                ) && 
                (
                    this.QuantityPerInnerPack == input.QuantityPerInnerPack ||
                    (this.QuantityPerInnerPack != null &&
                    this.QuantityPerInnerPack.Equals(input.QuantityPerInnerPack))
                ) && 
                (
                    this.QuantityPerCase == input.QuantityPerCase ||
                    (this.QuantityPerCase != null &&
                    this.QuantityPerCase.Equals(input.QuantityPerCase))
                ) && 
                (
                    this.QuantityPerPallet == input.QuantityPerPallet ||
                    (this.QuantityPerPallet != null &&
                    this.QuantityPerPallet.Equals(input.QuantityPerPallet))
                ) && 
                (
                    this.InnerPackBarcode == input.InnerPackBarcode ||
                    (this.InnerPackBarcode != null &&
                    this.InnerPackBarcode.Equals(input.InnerPackBarcode))
                ) && 
                (
                    this.CaseBarcode == input.CaseBarcode ||
                    (this.CaseBarcode != null &&
                    this.CaseBarcode.Equals(input.CaseBarcode))
                ) && 
                (
                    this.PalletBarcode == input.PalletBarcode ||
                    (this.PalletBarcode != null &&
                    this.PalletBarcode.Equals(input.PalletBarcode))
                ) && 
                (
                    this.VoidDate == input.VoidDate ||
                    (this.VoidDate != null &&
                    this.VoidDate.Equals(input.VoidDate))
                ) && 
                (
                    this.WrapCode == input.WrapCode ||
                    (this.WrapCode != null &&
                    this.WrapCode.Equals(input.WrapCode))
                ) && 
                (
                    this.ExtrinsicText1 == input.ExtrinsicText1 ||
                    (this.ExtrinsicText1 != null &&
                    this.ExtrinsicText1.Equals(input.ExtrinsicText1))
                ) && 
                (
                    this.ExtrinsicText2 == input.ExtrinsicText2 ||
                    (this.ExtrinsicText2 != null &&
                    this.ExtrinsicText2.Equals(input.ExtrinsicText2))
                ) && 
                (
                    this.ExtrinsicText3 == input.ExtrinsicText3 ||
                    (this.ExtrinsicText3 != null &&
                    this.ExtrinsicText3.Equals(input.ExtrinsicText3))
                ) && 
                (
                    this.ExtrinsicNumber1 == input.ExtrinsicNumber1 ||
                    (this.ExtrinsicNumber1 != null &&
                    this.ExtrinsicNumber1.Equals(input.ExtrinsicNumber1))
                ) && 
                (
                    this.ExtrinsicNumber2 == input.ExtrinsicNumber2 ||
                    (this.ExtrinsicNumber2 != null &&
                    this.ExtrinsicNumber2.Equals(input.ExtrinsicNumber2))
                ) && 
                (
                    this.ExtrinsicDecimal1 == input.ExtrinsicDecimal1 ||
                    (this.ExtrinsicDecimal1 != null &&
                    this.ExtrinsicDecimal1.Equals(input.ExtrinsicDecimal1))
                ) && 
                (
                    this.ExtrinsicDecimal2 == input.ExtrinsicDecimal2 ||
                    (this.ExtrinsicDecimal2 != null &&
                    this.ExtrinsicDecimal2.Equals(input.ExtrinsicDecimal2))
                ) && 
                (
                    this.CasebreakEnabled == input.CasebreakEnabled ||
                    (this.CasebreakEnabled != null &&
                    this.CasebreakEnabled.Equals(input.CasebreakEnabled))
                ) && 
                (
                    this.VendorId == input.VendorId ||
                    (this.VendorId != null &&
                    this.VendorId.Equals(input.VendorId))
                ) && 
                (
                    this.VendorPrice == input.VendorPrice ||
                    (this.VendorPrice != null &&
                    this.VendorPrice.Equals(input.VendorPrice))
                ) && 
                (
                    this.VendorPer == input.VendorPer ||
                    (this.VendorPer != null &&
                    this.VendorPer.Equals(input.VendorPer))
                ) && 
                (
                    this.ModifyDate == input.ModifyDate ||
                    (this.ModifyDate != null &&
                    this.ModifyDate.Equals(input.ModifyDate))
                ) && 
                (
                    this.PrimaryImage == input.PrimaryImage ||
                    (this.PrimaryImage != null &&
                    this.PrimaryImage.Equals(input.PrimaryImage))
                ) && 
                (
                    this.PickImage == input.PickImage ||
                    (this.PickImage != null &&
                    this.PickImage.Equals(input.PickImage))
                ) && 
                (
                    this.BehaviorType == input.BehaviorType ||
                    (this.BehaviorType != null &&
                    this.BehaviorType.Equals(input.BehaviorType))
                ) && 
                (
                    this.AssemblyInstructions == input.AssemblyInstructions ||
                    (this.AssemblyInstructions != null &&
                    this.AssemblyInstructions.Equals(input.AssemblyInstructions))
                ) && 
                (
                    this.ForwardLotMixingRule == input.ForwardLotMixingRule ||
                    (this.ForwardLotMixingRule != null &&
                    this.ForwardLotMixingRule.Equals(input.ForwardLotMixingRule))
                ) && 
                (
                    this.StorageLotMixingRule == input.StorageLotMixingRule ||
                    (this.StorageLotMixingRule != null &&
                    this.StorageLotMixingRule.Equals(input.StorageLotMixingRule))
                ) && 
                (
                    this.ForwardItemMixingRule == input.ForwardItemMixingRule ||
                    (this.ForwardItemMixingRule != null &&
                    this.ForwardItemMixingRule.Equals(input.ForwardItemMixingRule))
                ) && 
                (
                    this.StorageItemMixingRule == input.StorageItemMixingRule ||
                    (this.StorageItemMixingRule != null &&
                    this.StorageItemMixingRule.Equals(input.StorageItemMixingRule))
                ) && 
                (
                    this.AllocationRule == input.AllocationRule ||
                    (this.AllocationRule != null &&
                    this.AllocationRule.Equals(input.AllocationRule))
                ) && 
                (
                    this.AllocationSort == input.AllocationSort ||
                    (this.AllocationSort != null &&
                    this.AllocationSort.Equals(input.AllocationSort))
                ) && 
                (
                    this.AllocationField == input.AllocationField ||
                    (this.AllocationField != null &&
                    this.AllocationField.Equals(input.AllocationField))
                ) && 
                (
                    this.BarcodeField == input.BarcodeField ||
                    (this.BarcodeField != null &&
                    this.BarcodeField.Equals(input.BarcodeField))
                ) && 
                (
                    this.WarehouseDisplayField == input.WarehouseDisplayField ||
                    (this.WarehouseDisplayField != null &&
                    this.WarehouseDisplayField.Equals(input.WarehouseDisplayField))
                ) && 
                (
                    this.ProductIdTagSchemeId == input.ProductIdTagSchemeId ||
                    (this.ProductIdTagSchemeId != null &&
                    this.ProductIdTagSchemeId.Equals(input.ProductIdTagSchemeId))
                ) && 
                (
                    this.ItemSerialSchemeId == input.ItemSerialSchemeId ||
                    (this.ItemSerialSchemeId != null &&
                    this.ItemSerialSchemeId.Equals(input.ItemSerialSchemeId))
                ) && 
                (
                    this.ReceivingCriteriaSchemeId == input.ReceivingCriteriaSchemeId ||
                    (this.ReceivingCriteriaSchemeId != null &&
                    this.ReceivingCriteriaSchemeId.Equals(input.ReceivingCriteriaSchemeId))
                ) && 
                (
                    this.AsnRule == input.AsnRule ||
                    (this.AsnRule != null &&
                    this.AsnRule.Equals(input.AsnRule))
                ) && 
                (
                    this.QuantityType == input.QuantityType ||
                    (this.QuantityType != null &&
                    this.QuantityType.Equals(input.QuantityType))
                ) && 
                (
                    this.Hazmat == input.Hazmat ||
                    (this.Hazmat != null &&
                    this.Hazmat.Equals(input.Hazmat))
                ) && 
                (
                    this.UspsHazmatTypeId == input.UspsHazmatTypeId ||
                    (this.UspsHazmatTypeId != null &&
                    this.UspsHazmatTypeId.Equals(input.UspsHazmatTypeId))
                ) && 
                (
                    this.IsAlcohol == input.IsAlcohol ||
                    (this.IsAlcohol != null &&
                    this.IsAlcohol.Equals(input.IsAlcohol))
                ) && 
                (
                    this.AlcoholType == input.AlcoholType ||
                    (this.AlcoholType != null &&
                    this.AlcoholType.Equals(input.AlcoholType))
                ) && 
                (
                    this.AlcoholContent == input.AlcoholContent ||
                    (this.AlcoholContent != null &&
                    this.AlcoholContent.Equals(input.AlcoholContent))
                ) && 
                (
                    this.AlcoholContainer == input.AlcoholContainer ||
                    (this.AlcoholContainer != null &&
                    this.AlcoholContainer.Equals(input.AlcoholContainer))
                ) && 
                (
                    this.AlcoholVintageYear == input.AlcoholVintageYear ||
                    (this.AlcoholVintageYear != null &&
                    this.AlcoholVintageYear.Equals(input.AlcoholVintageYear))
                ) && 
                (
                    this.AlcoholCountry == input.AlcoholCountry ||
                    (this.AlcoholCountry != null &&
                    this.AlcoholCountry.Equals(input.AlcoholCountry))
                ) && 
                (
                    this.AlcoholState == input.AlcoholState ||
                    (this.AlcoholState != null &&
                    this.AlcoholState.Equals(input.AlcoholState))
                ) && 
                (
                    this.AlcoholRegion == input.AlcoholRegion ||
                    (this.AlcoholRegion != null &&
                    this.AlcoholRegion.Equals(input.AlcoholRegion))
                ) && 
                (
                    this.AlcoholBrand == input.AlcoholBrand ||
                    (this.AlcoholBrand != null &&
                    this.AlcoholBrand.Equals(input.AlcoholBrand))
                ) && 
                (
                    this.AlcoholUPCCode == input.AlcoholUPCCode ||
                    (this.AlcoholUPCCode != null &&
                    this.AlcoholUPCCode.Equals(input.AlcoholUPCCode))
                ) && 
                (
                    this.AlcoholNAMBCACode == input.AlcoholNAMBCACode ||
                    (this.AlcoholNAMBCACode != null &&
                    this.AlcoholNAMBCACode.Equals(input.AlcoholNAMBCACode))
                ) && 
                (
                    this.AlcoholUNIMERCCode == input.AlcoholUNIMERCCode ||
                    (this.AlcoholUNIMERCCode != null &&
                    this.AlcoholUNIMERCCode.Equals(input.AlcoholUNIMERCCode))
                ) && 
                (
                    this.AlcoholSCCCode == input.AlcoholSCCCode ||
                    (this.AlcoholSCCCode != null &&
                    this.AlcoholSCCCode.Equals(input.AlcoholSCCCode))
                ) && 
                (
                    this.Length == input.Length ||
                    (this.Length != null &&
                    this.Length.Equals(input.Length))
                ) && 
                (
                    this.Width == input.Width ||
                    (this.Width != null &&
                    this.Width.Equals(input.Width))
                ) && 
                (
                    this.Height == input.Height ||
                    (this.Height != null &&
                    this.Height.Equals(input.Height))
                ) && 
                (
                    this.TopUp == input.TopUp ||
                    (this.TopUp != null &&
                    this.TopUp.Equals(input.TopUp))
                ) && 
                (
                    this.ShipSolo == input.ShipSolo ||
                    (this.ShipSolo != null &&
                    this.ShipSolo.Equals(input.ShipSolo))
                ) && 
                (
                    this.InventoryUpdateTimestamp == input.InventoryUpdateTimestamp ||
                    (this.InventoryUpdateTimestamp != null &&
                    this.InventoryUpdateTimestamp.Equals(input.InventoryUpdateTimestamp))
                ) && 
                (
                    this.AvailableQuantity == input.AvailableQuantity ||
                    (this.AvailableQuantity != null &&
                    this.AvailableQuantity.Equals(input.AvailableQuantity))
                ) && 
                (
                    this.DamagedQuantity == input.DamagedQuantity ||
                    (this.DamagedQuantity != null &&
                    this.DamagedQuantity.Equals(input.DamagedQuantity))
                ) && 
                (
                    this.InFulfillmentProcessQuantity == input.InFulfillmentProcessQuantity ||
                    (this.InFulfillmentProcessQuantity != null &&
                    this.InFulfillmentProcessQuantity.Equals(input.InFulfillmentProcessQuantity))
                ) && 
                (
                    this.OnHandQuantity == input.OnHandQuantity ||
                    (this.OnHandQuantity != null &&
                    this.OnHandQuantity.Equals(input.OnHandQuantity))
                ) && 
                (
                    this.OpenOrderQuantity == input.OpenOrderQuantity ||
                    (this.OpenOrderQuantity != null &&
                    this.OpenOrderQuantity.Equals(input.OpenOrderQuantity))
                ) && 
                (
                    this.OpenPOQuantity == input.OpenPOQuantity ||
                    (this.OpenPOQuantity != null &&
                    this.OpenPOQuantity.Equals(input.OpenPOQuantity))
                ) && 
                (
                    this.OrderableQuantity == input.OrderableQuantity ||
                    (this.OrderableQuantity != null &&
                    this.OrderableQuantity.Equals(input.OrderableQuantity))
                ) && 
                (
                    this.UnallocatableQuantity == input.UnallocatableQuantity ||
                    (this.UnallocatableQuantity != null &&
                    this.UnallocatableQuantity.Equals(input.UnallocatableQuantity))
                ) && 
                (
                    this.UnavailableQuantity == input.UnavailableQuantity ||
                    (this.UnavailableQuantity != null &&
                    this.UnavailableQuantity.Equals(input.UnavailableQuantity))
                ) && 
                (
                    this.TotalDemand == input.TotalDemand ||
                    (this.TotalDemand != null &&
                    this.TotalDemand.Equals(input.TotalDemand))
                ) && 
                (
                    this.AvailableQuantityInnerPacks == input.AvailableQuantityInnerPacks ||
                    (this.AvailableQuantityInnerPacks != null &&
                    this.AvailableQuantityInnerPacks.Equals(input.AvailableQuantityInnerPacks))
                ) && 
                (
                    this.DamagedQuantityInnerPacks == input.DamagedQuantityInnerPacks ||
                    (this.DamagedQuantityInnerPacks != null &&
                    this.DamagedQuantityInnerPacks.Equals(input.DamagedQuantityInnerPacks))
                ) && 
                (
                    this.InFulfillmentProcessQuantityInnerPacks == input.InFulfillmentProcessQuantityInnerPacks ||
                    (this.InFulfillmentProcessQuantityInnerPacks != null &&
                    this.InFulfillmentProcessQuantityInnerPacks.Equals(input.InFulfillmentProcessQuantityInnerPacks))
                ) && 
                (
                    this.OnHandQuantityInnerPacks == input.OnHandQuantityInnerPacks ||
                    (this.OnHandQuantityInnerPacks != null &&
                    this.OnHandQuantityInnerPacks.Equals(input.OnHandQuantityInnerPacks))
                ) && 
                (
                    this.OpenOrderQuantityInnerPacks == input.OpenOrderQuantityInnerPacks ||
                    (this.OpenOrderQuantityInnerPacks != null &&
                    this.OpenOrderQuantityInnerPacks.Equals(input.OpenOrderQuantityInnerPacks))
                ) && 
                (
                    this.OpenPOQuantityInnerPacks == input.OpenPOQuantityInnerPacks ||
                    (this.OpenPOQuantityInnerPacks != null &&
                    this.OpenPOQuantityInnerPacks.Equals(input.OpenPOQuantityInnerPacks))
                ) && 
                (
                    this.OrderableQuantityInnerPacks == input.OrderableQuantityInnerPacks ||
                    (this.OrderableQuantityInnerPacks != null &&
                    this.OrderableQuantityInnerPacks.Equals(input.OrderableQuantityInnerPacks))
                ) && 
                (
                    this.UnallocatableQuantityInnerPacks == input.UnallocatableQuantityInnerPacks ||
                    (this.UnallocatableQuantityInnerPacks != null &&
                    this.UnallocatableQuantityInnerPacks.Equals(input.UnallocatableQuantityInnerPacks))
                ) && 
                (
                    this.UnavailableQuantityInnerPacks == input.UnavailableQuantityInnerPacks ||
                    (this.UnavailableQuantityInnerPacks != null &&
                    this.UnavailableQuantityInnerPacks.Equals(input.UnavailableQuantityInnerPacks))
                ) && 
                (
                    this.AvailableQuantityCases == input.AvailableQuantityCases ||
                    (this.AvailableQuantityCases != null &&
                    this.AvailableQuantityCases.Equals(input.AvailableQuantityCases))
                ) && 
                (
                    this.DamagedQuantityCases == input.DamagedQuantityCases ||
                    (this.DamagedQuantityCases != null &&
                    this.DamagedQuantityCases.Equals(input.DamagedQuantityCases))
                ) && 
                (
                    this.InFulfillmentProcessQuantityCases == input.InFulfillmentProcessQuantityCases ||
                    (this.InFulfillmentProcessQuantityCases != null &&
                    this.InFulfillmentProcessQuantityCases.Equals(input.InFulfillmentProcessQuantityCases))
                ) && 
                (
                    this.OnHandQuantityCases == input.OnHandQuantityCases ||
                    (this.OnHandQuantityCases != null &&
                    this.OnHandQuantityCases.Equals(input.OnHandQuantityCases))
                ) && 
                (
                    this.OpenOrderQuantityCases == input.OpenOrderQuantityCases ||
                    (this.OpenOrderQuantityCases != null &&
                    this.OpenOrderQuantityCases.Equals(input.OpenOrderQuantityCases))
                ) && 
                (
                    this.OpenPOQuantityCases == input.OpenPOQuantityCases ||
                    (this.OpenPOQuantityCases != null &&
                    this.OpenPOQuantityCases.Equals(input.OpenPOQuantityCases))
                ) && 
                (
                    this.OrderableQuantityCases == input.OrderableQuantityCases ||
                    (this.OrderableQuantityCases != null &&
                    this.OrderableQuantityCases.Equals(input.OrderableQuantityCases))
                ) && 
                (
                    this.UnallocatableQuantityCases == input.UnallocatableQuantityCases ||
                    (this.UnallocatableQuantityCases != null &&
                    this.UnallocatableQuantityCases.Equals(input.UnallocatableQuantityCases))
                ) && 
                (
                    this.UnavailableQuantityCases == input.UnavailableQuantityCases ||
                    (this.UnavailableQuantityCases != null &&
                    this.UnavailableQuantityCases.Equals(input.UnavailableQuantityCases))
                ) && 
                (
                    this.AvailableQuantityPallets == input.AvailableQuantityPallets ||
                    (this.AvailableQuantityPallets != null &&
                    this.AvailableQuantityPallets.Equals(input.AvailableQuantityPallets))
                ) && 
                (
                    this.DamagedQuantityPallets == input.DamagedQuantityPallets ||
                    (this.DamagedQuantityPallets != null &&
                    this.DamagedQuantityPallets.Equals(input.DamagedQuantityPallets))
                ) && 
                (
                    this.InFulfillmentProcessQuantityPallets == input.InFulfillmentProcessQuantityPallets ||
                    (this.InFulfillmentProcessQuantityPallets != null &&
                    this.InFulfillmentProcessQuantityPallets.Equals(input.InFulfillmentProcessQuantityPallets))
                ) && 
                (
                    this.OnHandQuantityPallets == input.OnHandQuantityPallets ||
                    (this.OnHandQuantityPallets != null &&
                    this.OnHandQuantityPallets.Equals(input.OnHandQuantityPallets))
                ) && 
                (
                    this.OpenOrderQuantityPallets == input.OpenOrderQuantityPallets ||
                    (this.OpenOrderQuantityPallets != null &&
                    this.OpenOrderQuantityPallets.Equals(input.OpenOrderQuantityPallets))
                ) && 
                (
                    this.OpenPOQuantityPallets == input.OpenPOQuantityPallets ||
                    (this.OpenPOQuantityPallets != null &&
                    this.OpenPOQuantityPallets.Equals(input.OpenPOQuantityPallets))
                ) && 
                (
                    this.OrderableQuantityPallets == input.OrderableQuantityPallets ||
                    (this.OrderableQuantityPallets != null &&
                    this.OrderableQuantityPallets.Equals(input.OrderableQuantityPallets))
                ) && 
                (
                    this.UnallocatableQuantityPallets == input.UnallocatableQuantityPallets ||
                    (this.UnallocatableQuantityPallets != null &&
                    this.UnallocatableQuantityPallets.Equals(input.UnallocatableQuantityPallets))
                ) && 
                (
                    this.UnavailableQuantityPallets == input.UnavailableQuantityPallets ||
                    (this.UnavailableQuantityPallets != null &&
                    this.UnavailableQuantityPallets.Equals(input.UnavailableQuantityPallets))
                ) && 
                (
                    this.OverallDaysOnHand == input.OverallDaysOnHand ||
                    (this.OverallDaysOnHand != null &&
                    this.OverallDaysOnHand.Equals(input.OverallDaysOnHand))
                ) && 
                (
                    this.OverallStockStatus == input.OverallStockStatus ||
                    (this.OverallStockStatus != null &&
                    this.OverallStockStatus.Equals(input.OverallStockStatus))
                ) && 
                (
                    this.EstimatedPallets == input.EstimatedPallets ||
                    (this.EstimatedPallets != null &&
                    this.EstimatedPallets.Equals(input.EstimatedPallets))
                ) && 
                (
                    this.EstimatedCases == input.EstimatedCases ||
                    (this.EstimatedCases != null &&
                    this.EstimatedCases.Equals(input.EstimatedCases))
                ) && 
                (
                    this.EstimatedInnerPacks == input.EstimatedInnerPacks ||
                    (this.EstimatedInnerPacks != null &&
                    this.EstimatedInnerPacks.Equals(input.EstimatedInnerPacks))
                ) && 
                (
                    this.NextRequestedDeliveryDate == input.NextRequestedDeliveryDate ||
                    (this.NextRequestedDeliveryDate != null &&
                    this.NextRequestedDeliveryDate.Equals(input.NextRequestedDeliveryDate))
                ) && 
                (
                    this.Warehouse1Id == input.Warehouse1Id ||
                    (this.Warehouse1Id != null &&
                    this.Warehouse1Id.Equals(input.Warehouse1Id))
                ) && 
                (
                    this.W1AvailableQuantity == input.W1AvailableQuantity ||
                    (this.W1AvailableQuantity != null &&
                    this.W1AvailableQuantity.Equals(input.W1AvailableQuantity))
                ) && 
                (
                    this.W1DamagedQuantity == input.W1DamagedQuantity ||
                    (this.W1DamagedQuantity != null &&
                    this.W1DamagedQuantity.Equals(input.W1DamagedQuantity))
                ) && 
                (
                    this.W1InFulfillmentProcessQuantity == input.W1InFulfillmentProcessQuantity ||
                    (this.W1InFulfillmentProcessQuantity != null &&
                    this.W1InFulfillmentProcessQuantity.Equals(input.W1InFulfillmentProcessQuantity))
                ) && 
                (
                    this.W1OnHandQuantity == input.W1OnHandQuantity ||
                    (this.W1OnHandQuantity != null &&
                    this.W1OnHandQuantity.Equals(input.W1OnHandQuantity))
                ) && 
                (
                    this.W1OpenOrderQuantity == input.W1OpenOrderQuantity ||
                    (this.W1OpenOrderQuantity != null &&
                    this.W1OpenOrderQuantity.Equals(input.W1OpenOrderQuantity))
                ) && 
                (
                    this.W1OpenPOQuantity == input.W1OpenPOQuantity ||
                    (this.W1OpenPOQuantity != null &&
                    this.W1OpenPOQuantity.Equals(input.W1OpenPOQuantity))
                ) && 
                (
                    this.W1OrderableQuantity == input.W1OrderableQuantity ||
                    (this.W1OrderableQuantity != null &&
                    this.W1OrderableQuantity.Equals(input.W1OrderableQuantity))
                ) && 
                (
                    this.W1UnallocatableQuantity == input.W1UnallocatableQuantity ||
                    (this.W1UnallocatableQuantity != null &&
                    this.W1UnallocatableQuantity.Equals(input.W1UnallocatableQuantity))
                ) && 
                (
                    this.W1UnavailableQuantity == input.W1UnavailableQuantity ||
                    (this.W1UnavailableQuantity != null &&
                    this.W1UnavailableQuantity.Equals(input.W1UnavailableQuantity))
                ) && 
                (
                    this.W1DaysOnHand == input.W1DaysOnHand ||
                    (this.W1DaysOnHand != null &&
                    this.W1DaysOnHand.Equals(input.W1DaysOnHand))
                ) && 
                (
                    this.W1StockStatus == input.W1StockStatus ||
                    (this.W1StockStatus != null &&
                    this.W1StockStatus.Equals(input.W1StockStatus))
                ) && 
                (
                    this.W1EstimatedPallets == input.W1EstimatedPallets ||
                    (this.W1EstimatedPallets != null &&
                    this.W1EstimatedPallets.Equals(input.W1EstimatedPallets))
                ) && 
                (
                    this.W1EstimatedCases == input.W1EstimatedCases ||
                    (this.W1EstimatedCases != null &&
                    this.W1EstimatedCases.Equals(input.W1EstimatedCases))
                ) && 
                (
                    this.W1EstimatedInnerPacks == input.W1EstimatedInnerPacks ||
                    (this.W1EstimatedInnerPacks != null &&
                    this.W1EstimatedInnerPacks.Equals(input.W1EstimatedInnerPacks))
                ) && 
                (
                    this.W1NextRequestedDeliveryDate == input.W1NextRequestedDeliveryDate ||
                    (this.W1NextRequestedDeliveryDate != null &&
                    this.W1NextRequestedDeliveryDate.Equals(input.W1NextRequestedDeliveryDate))
                ) && 
                (
                    this.Warehouse2Id == input.Warehouse2Id ||
                    (this.Warehouse2Id != null &&
                    this.Warehouse2Id.Equals(input.Warehouse2Id))
                ) && 
                (
                    this.W2AvailableQuantity == input.W2AvailableQuantity ||
                    (this.W2AvailableQuantity != null &&
                    this.W2AvailableQuantity.Equals(input.W2AvailableQuantity))
                ) && 
                (
                    this.W2DamagedQuantity == input.W2DamagedQuantity ||
                    (this.W2DamagedQuantity != null &&
                    this.W2DamagedQuantity.Equals(input.W2DamagedQuantity))
                ) && 
                (
                    this.W2InFulfillmentProcessQuantity == input.W2InFulfillmentProcessQuantity ||
                    (this.W2InFulfillmentProcessQuantity != null &&
                    this.W2InFulfillmentProcessQuantity.Equals(input.W2InFulfillmentProcessQuantity))
                ) && 
                (
                    this.W2OnHandQuantity == input.W2OnHandQuantity ||
                    (this.W2OnHandQuantity != null &&
                    this.W2OnHandQuantity.Equals(input.W2OnHandQuantity))
                ) && 
                (
                    this.W2OpenOrderQuantity == input.W2OpenOrderQuantity ||
                    (this.W2OpenOrderQuantity != null &&
                    this.W2OpenOrderQuantity.Equals(input.W2OpenOrderQuantity))
                ) && 
                (
                    this.W2OpenPOQuantity == input.W2OpenPOQuantity ||
                    (this.W2OpenPOQuantity != null &&
                    this.W2OpenPOQuantity.Equals(input.W2OpenPOQuantity))
                ) && 
                (
                    this.W2OrderableQuantity == input.W2OrderableQuantity ||
                    (this.W2OrderableQuantity != null &&
                    this.W2OrderableQuantity.Equals(input.W2OrderableQuantity))
                ) && 
                (
                    this.W2UnallocatableQuantity == input.W2UnallocatableQuantity ||
                    (this.W2UnallocatableQuantity != null &&
                    this.W2UnallocatableQuantity.Equals(input.W2UnallocatableQuantity))
                ) && 
                (
                    this.W2UnavailableQuantity == input.W2UnavailableQuantity ||
                    (this.W2UnavailableQuantity != null &&
                    this.W2UnavailableQuantity.Equals(input.W2UnavailableQuantity))
                ) && 
                (
                    this.W2DaysOnHand == input.W2DaysOnHand ||
                    (this.W2DaysOnHand != null &&
                    this.W2DaysOnHand.Equals(input.W2DaysOnHand))
                ) && 
                (
                    this.W2StockStatus == input.W2StockStatus ||
                    (this.W2StockStatus != null &&
                    this.W2StockStatus.Equals(input.W2StockStatus))
                ) && 
                (
                    this.W2EstimatedPallets == input.W2EstimatedPallets ||
                    (this.W2EstimatedPallets != null &&
                    this.W2EstimatedPallets.Equals(input.W2EstimatedPallets))
                ) && 
                (
                    this.W2EstimatedCases == input.W2EstimatedCases ||
                    (this.W2EstimatedCases != null &&
                    this.W2EstimatedCases.Equals(input.W2EstimatedCases))
                ) && 
                (
                    this.W2EstimatedInnerPacks == input.W2EstimatedInnerPacks ||
                    (this.W2EstimatedInnerPacks != null &&
                    this.W2EstimatedInnerPacks.Equals(input.W2EstimatedInnerPacks))
                ) && 
                (
                    this.W2NextRequestedDeliveryDate == input.W2NextRequestedDeliveryDate ||
                    (this.W2NextRequestedDeliveryDate != null &&
                    this.W2NextRequestedDeliveryDate.Equals(input.W2NextRequestedDeliveryDate))
                ) && 
                (
                    this.Warehouse3Id == input.Warehouse3Id ||
                    (this.Warehouse3Id != null &&
                    this.Warehouse3Id.Equals(input.Warehouse3Id))
                ) && 
                (
                    this.W3AvailableQuantity == input.W3AvailableQuantity ||
                    (this.W3AvailableQuantity != null &&
                    this.W3AvailableQuantity.Equals(input.W3AvailableQuantity))
                ) && 
                (
                    this.W3DamagedQuantity == input.W3DamagedQuantity ||
                    (this.W3DamagedQuantity != null &&
                    this.W3DamagedQuantity.Equals(input.W3DamagedQuantity))
                ) && 
                (
                    this.W3InFulfillmentProcessQuantity == input.W3InFulfillmentProcessQuantity ||
                    (this.W3InFulfillmentProcessQuantity != null &&
                    this.W3InFulfillmentProcessQuantity.Equals(input.W3InFulfillmentProcessQuantity))
                ) && 
                (
                    this.W3OnHandQuantity == input.W3OnHandQuantity ||
                    (this.W3OnHandQuantity != null &&
                    this.W3OnHandQuantity.Equals(input.W3OnHandQuantity))
                ) && 
                (
                    this.W3OpenOrderQuantity == input.W3OpenOrderQuantity ||
                    (this.W3OpenOrderQuantity != null &&
                    this.W3OpenOrderQuantity.Equals(input.W3OpenOrderQuantity))
                ) && 
                (
                    this.W3OpenPOQuantity == input.W3OpenPOQuantity ||
                    (this.W3OpenPOQuantity != null &&
                    this.W3OpenPOQuantity.Equals(input.W3OpenPOQuantity))
                ) && 
                (
                    this.W3OrderableQuantity == input.W3OrderableQuantity ||
                    (this.W3OrderableQuantity != null &&
                    this.W3OrderableQuantity.Equals(input.W3OrderableQuantity))
                ) && 
                (
                    this.W3UnallocatableQuantity == input.W3UnallocatableQuantity ||
                    (this.W3UnallocatableQuantity != null &&
                    this.W3UnallocatableQuantity.Equals(input.W3UnallocatableQuantity))
                ) && 
                (
                    this.W3UnavailableQuantity == input.W3UnavailableQuantity ||
                    (this.W3UnavailableQuantity != null &&
                    this.W3UnavailableQuantity.Equals(input.W3UnavailableQuantity))
                ) && 
                (
                    this.W3DaysOnHand == input.W3DaysOnHand ||
                    (this.W3DaysOnHand != null &&
                    this.W3DaysOnHand.Equals(input.W3DaysOnHand))
                ) && 
                (
                    this.W3StockStatus == input.W3StockStatus ||
                    (this.W3StockStatus != null &&
                    this.W3StockStatus.Equals(input.W3StockStatus))
                ) && 
                (
                    this.W3EstimatedPallets == input.W3EstimatedPallets ||
                    (this.W3EstimatedPallets != null &&
                    this.W3EstimatedPallets.Equals(input.W3EstimatedPallets))
                ) && 
                (
                    this.W3EstimatedCases == input.W3EstimatedCases ||
                    (this.W3EstimatedCases != null &&
                    this.W3EstimatedCases.Equals(input.W3EstimatedCases))
                ) && 
                (
                    this.W3EstimatedInnerPacks == input.W3EstimatedInnerPacks ||
                    (this.W3EstimatedInnerPacks != null &&
                    this.W3EstimatedInnerPacks.Equals(input.W3EstimatedInnerPacks))
                ) && 
                (
                    this.W3NextRequestedDeliveryDate == input.W3NextRequestedDeliveryDate ||
                    (this.W3NextRequestedDeliveryDate != null &&
                    this.W3NextRequestedDeliveryDate.Equals(input.W3NextRequestedDeliveryDate))
                ) && 
                (
                    this.Warehouse4Id == input.Warehouse4Id ||
                    (this.Warehouse4Id != null &&
                    this.Warehouse4Id.Equals(input.Warehouse4Id))
                ) && 
                (
                    this.W4AvailableQuantity == input.W4AvailableQuantity ||
                    (this.W4AvailableQuantity != null &&
                    this.W4AvailableQuantity.Equals(input.W4AvailableQuantity))
                ) && 
                (
                    this.W4DamagedQuantity == input.W4DamagedQuantity ||
                    (this.W4DamagedQuantity != null &&
                    this.W4DamagedQuantity.Equals(input.W4DamagedQuantity))
                ) && 
                (
                    this.W4InFulfillmentProcessQuantity == input.W4InFulfillmentProcessQuantity ||
                    (this.W4InFulfillmentProcessQuantity != null &&
                    this.W4InFulfillmentProcessQuantity.Equals(input.W4InFulfillmentProcessQuantity))
                ) && 
                (
                    this.W4OnHandQuantity == input.W4OnHandQuantity ||
                    (this.W4OnHandQuantity != null &&
                    this.W4OnHandQuantity.Equals(input.W4OnHandQuantity))
                ) && 
                (
                    this.W4OpenOrderQuantity == input.W4OpenOrderQuantity ||
                    (this.W4OpenOrderQuantity != null &&
                    this.W4OpenOrderQuantity.Equals(input.W4OpenOrderQuantity))
                ) && 
                (
                    this.W4OpenPOQuantity == input.W4OpenPOQuantity ||
                    (this.W4OpenPOQuantity != null &&
                    this.W4OpenPOQuantity.Equals(input.W4OpenPOQuantity))
                ) && 
                (
                    this.W4OrderableQuantity == input.W4OrderableQuantity ||
                    (this.W4OrderableQuantity != null &&
                    this.W4OrderableQuantity.Equals(input.W4OrderableQuantity))
                ) && 
                (
                    this.W4UnallocatableQuantity == input.W4UnallocatableQuantity ||
                    (this.W4UnallocatableQuantity != null &&
                    this.W4UnallocatableQuantity.Equals(input.W4UnallocatableQuantity))
                ) && 
                (
                    this.W4UnavailableQuantity == input.W4UnavailableQuantity ||
                    (this.W4UnavailableQuantity != null &&
                    this.W4UnavailableQuantity.Equals(input.W4UnavailableQuantity))
                ) && 
                (
                    this.W4DaysOnHand == input.W4DaysOnHand ||
                    (this.W4DaysOnHand != null &&
                    this.W4DaysOnHand.Equals(input.W4DaysOnHand))
                ) && 
                (
                    this.W4StockStatus == input.W4StockStatus ||
                    (this.W4StockStatus != null &&
                    this.W4StockStatus.Equals(input.W4StockStatus))
                ) && 
                (
                    this.W4EstimatedPallets == input.W4EstimatedPallets ||
                    (this.W4EstimatedPallets != null &&
                    this.W4EstimatedPallets.Equals(input.W4EstimatedPallets))
                ) && 
                (
                    this.W4EstimatedCases == input.W4EstimatedCases ||
                    (this.W4EstimatedCases != null &&
                    this.W4EstimatedCases.Equals(input.W4EstimatedCases))
                ) && 
                (
                    this.W4EstimatedInnerPacks == input.W4EstimatedInnerPacks ||
                    (this.W4EstimatedInnerPacks != null &&
                    this.W4EstimatedInnerPacks.Equals(input.W4EstimatedInnerPacks))
                ) && 
                (
                    this.W4NextRequestedDeliveryDate == input.W4NextRequestedDeliveryDate ||
                    (this.W4NextRequestedDeliveryDate != null &&
                    this.W4NextRequestedDeliveryDate.Equals(input.W4NextRequestedDeliveryDate))
                ) && 
                (
                    this.Warehouse5Id == input.Warehouse5Id ||
                    (this.Warehouse5Id != null &&
                    this.Warehouse5Id.Equals(input.Warehouse5Id))
                ) && 
                (
                    this.W5AvailableQuantity == input.W5AvailableQuantity ||
                    (this.W5AvailableQuantity != null &&
                    this.W5AvailableQuantity.Equals(input.W5AvailableQuantity))
                ) && 
                (
                    this.W5DamagedQuantity == input.W5DamagedQuantity ||
                    (this.W5DamagedQuantity != null &&
                    this.W5DamagedQuantity.Equals(input.W5DamagedQuantity))
                ) && 
                (
                    this.W5InFulfillmentProcessQuantity == input.W5InFulfillmentProcessQuantity ||
                    (this.W5InFulfillmentProcessQuantity != null &&
                    this.W5InFulfillmentProcessQuantity.Equals(input.W5InFulfillmentProcessQuantity))
                ) && 
                (
                    this.W5OnHandQuantity == input.W5OnHandQuantity ||
                    (this.W5OnHandQuantity != null &&
                    this.W5OnHandQuantity.Equals(input.W5OnHandQuantity))
                ) && 
                (
                    this.W5OpenOrderQuantity == input.W5OpenOrderQuantity ||
                    (this.W5OpenOrderQuantity != null &&
                    this.W5OpenOrderQuantity.Equals(input.W5OpenOrderQuantity))
                ) && 
                (
                    this.W5OpenPOQuantity == input.W5OpenPOQuantity ||
                    (this.W5OpenPOQuantity != null &&
                    this.W5OpenPOQuantity.Equals(input.W5OpenPOQuantity))
                ) && 
                (
                    this.W5OrderableQuantity == input.W5OrderableQuantity ||
                    (this.W5OrderableQuantity != null &&
                    this.W5OrderableQuantity.Equals(input.W5OrderableQuantity))
                ) && 
                (
                    this.W5UnallocatableQuantity == input.W5UnallocatableQuantity ||
                    (this.W5UnallocatableQuantity != null &&
                    this.W5UnallocatableQuantity.Equals(input.W5UnallocatableQuantity))
                ) && 
                (
                    this.W5UnavailableQuantity == input.W5UnavailableQuantity ||
                    (this.W5UnavailableQuantity != null &&
                    this.W5UnavailableQuantity.Equals(input.W5UnavailableQuantity))
                ) && 
                (
                    this.W5DaysOnHand == input.W5DaysOnHand ||
                    (this.W5DaysOnHand != null &&
                    this.W5DaysOnHand.Equals(input.W5DaysOnHand))
                ) && 
                (
                    this.W5StockStatus == input.W5StockStatus ||
                    (this.W5StockStatus != null &&
                    this.W5StockStatus.Equals(input.W5StockStatus))
                ) && 
                (
                    this.W5EstimatedPallets == input.W5EstimatedPallets ||
                    (this.W5EstimatedPallets != null &&
                    this.W5EstimatedPallets.Equals(input.W5EstimatedPallets))
                ) && 
                (
                    this.W5EstimatedCases == input.W5EstimatedCases ||
                    (this.W5EstimatedCases != null &&
                    this.W5EstimatedCases.Equals(input.W5EstimatedCases))
                ) && 
                (
                    this.W5EstimatedInnerPacks == input.W5EstimatedInnerPacks ||
                    (this.W5EstimatedInnerPacks != null &&
                    this.W5EstimatedInnerPacks.Equals(input.W5EstimatedInnerPacks))
                ) && 
                (
                    this.W5NextRequestedDeliveryDate == input.W5NextRequestedDeliveryDate ||
                    (this.W5NextRequestedDeliveryDate != null &&
                    this.W5NextRequestedDeliveryDate.Equals(input.W5NextRequestedDeliveryDate))
                ) && 
                (
                    this.Warehouse6Id == input.Warehouse6Id ||
                    (this.Warehouse6Id != null &&
                    this.Warehouse6Id.Equals(input.Warehouse6Id))
                ) && 
                (
                    this.W6AvailableQuantity == input.W6AvailableQuantity ||
                    (this.W6AvailableQuantity != null &&
                    this.W6AvailableQuantity.Equals(input.W6AvailableQuantity))
                ) && 
                (
                    this.W6DamagedQuantity == input.W6DamagedQuantity ||
                    (this.W6DamagedQuantity != null &&
                    this.W6DamagedQuantity.Equals(input.W6DamagedQuantity))
                ) && 
                (
                    this.W6InFulfillmentProcessQuantity == input.W6InFulfillmentProcessQuantity ||
                    (this.W6InFulfillmentProcessQuantity != null &&
                    this.W6InFulfillmentProcessQuantity.Equals(input.W6InFulfillmentProcessQuantity))
                ) && 
                (
                    this.W6OnHandQuantity == input.W6OnHandQuantity ||
                    (this.W6OnHandQuantity != null &&
                    this.W6OnHandQuantity.Equals(input.W6OnHandQuantity))
                ) && 
                (
                    this.W6OpenOrderQuantity == input.W6OpenOrderQuantity ||
                    (this.W6OpenOrderQuantity != null &&
                    this.W6OpenOrderQuantity.Equals(input.W6OpenOrderQuantity))
                ) && 
                (
                    this.W6OpenPOQuantity == input.W6OpenPOQuantity ||
                    (this.W6OpenPOQuantity != null &&
                    this.W6OpenPOQuantity.Equals(input.W6OpenPOQuantity))
                ) && 
                (
                    this.W6OrderableQuantity == input.W6OrderableQuantity ||
                    (this.W6OrderableQuantity != null &&
                    this.W6OrderableQuantity.Equals(input.W6OrderableQuantity))
                ) && 
                (
                    this.W6UnallocatableQuantity == input.W6UnallocatableQuantity ||
                    (this.W6UnallocatableQuantity != null &&
                    this.W6UnallocatableQuantity.Equals(input.W6UnallocatableQuantity))
                ) && 
                (
                    this.W6UnavailableQuantity == input.W6UnavailableQuantity ||
                    (this.W6UnavailableQuantity != null &&
                    this.W6UnavailableQuantity.Equals(input.W6UnavailableQuantity))
                ) && 
                (
                    this.W6DaysOnHand == input.W6DaysOnHand ||
                    (this.W6DaysOnHand != null &&
                    this.W6DaysOnHand.Equals(input.W6DaysOnHand))
                ) && 
                (
                    this.W6StockStatus == input.W6StockStatus ||
                    (this.W6StockStatus != null &&
                    this.W6StockStatus.Equals(input.W6StockStatus))
                ) && 
                (
                    this.W6EstimatedPallets == input.W6EstimatedPallets ||
                    (this.W6EstimatedPallets != null &&
                    this.W6EstimatedPallets.Equals(input.W6EstimatedPallets))
                ) && 
                (
                    this.W6EstimatedCases == input.W6EstimatedCases ||
                    (this.W6EstimatedCases != null &&
                    this.W6EstimatedCases.Equals(input.W6EstimatedCases))
                ) && 
                (
                    this.W6EstimatedInnerPacks == input.W6EstimatedInnerPacks ||
                    (this.W6EstimatedInnerPacks != null &&
                    this.W6EstimatedInnerPacks.Equals(input.W6EstimatedInnerPacks))
                ) && 
                (
                    this.W6NextRequestedDeliveryDate == input.W6NextRequestedDeliveryDate ||
                    (this.W6NextRequestedDeliveryDate != null &&
                    this.W6NextRequestedDeliveryDate.Equals(input.W6NextRequestedDeliveryDate))
                ) && 
                (
                    this.Warehouse7Id == input.Warehouse7Id ||
                    (this.Warehouse7Id != null &&
                    this.Warehouse7Id.Equals(input.Warehouse7Id))
                ) && 
                (
                    this.W7AvailableQuantity == input.W7AvailableQuantity ||
                    (this.W7AvailableQuantity != null &&
                    this.W7AvailableQuantity.Equals(input.W7AvailableQuantity))
                ) && 
                (
                    this.W7DamagedQuantity == input.W7DamagedQuantity ||
                    (this.W7DamagedQuantity != null &&
                    this.W7DamagedQuantity.Equals(input.W7DamagedQuantity))
                ) && 
                (
                    this.W7InFulfillmentProcessQuantity == input.W7InFulfillmentProcessQuantity ||
                    (this.W7InFulfillmentProcessQuantity != null &&
                    this.W7InFulfillmentProcessQuantity.Equals(input.W7InFulfillmentProcessQuantity))
                ) && 
                (
                    this.W7OnHandQuantity == input.W7OnHandQuantity ||
                    (this.W7OnHandQuantity != null &&
                    this.W7OnHandQuantity.Equals(input.W7OnHandQuantity))
                ) && 
                (
                    this.W7OpenOrderQuantity == input.W7OpenOrderQuantity ||
                    (this.W7OpenOrderQuantity != null &&
                    this.W7OpenOrderQuantity.Equals(input.W7OpenOrderQuantity))
                ) && 
                (
                    this.W7OpenPOQuantity == input.W7OpenPOQuantity ||
                    (this.W7OpenPOQuantity != null &&
                    this.W7OpenPOQuantity.Equals(input.W7OpenPOQuantity))
                ) && 
                (
                    this.W7OrderableQuantity == input.W7OrderableQuantity ||
                    (this.W7OrderableQuantity != null &&
                    this.W7OrderableQuantity.Equals(input.W7OrderableQuantity))
                ) && 
                (
                    this.W7UnallocatableQuantity == input.W7UnallocatableQuantity ||
                    (this.W7UnallocatableQuantity != null &&
                    this.W7UnallocatableQuantity.Equals(input.W7UnallocatableQuantity))
                ) && 
                (
                    this.W7UnavailableQuantity == input.W7UnavailableQuantity ||
                    (this.W7UnavailableQuantity != null &&
                    this.W7UnavailableQuantity.Equals(input.W7UnavailableQuantity))
                ) && 
                (
                    this.W7DaysOnHand == input.W7DaysOnHand ||
                    (this.W7DaysOnHand != null &&
                    this.W7DaysOnHand.Equals(input.W7DaysOnHand))
                ) && 
                (
                    this.W7StockStatus == input.W7StockStatus ||
                    (this.W7StockStatus != null &&
                    this.W7StockStatus.Equals(input.W7StockStatus))
                ) && 
                (
                    this.W7EstimatedPallets == input.W7EstimatedPallets ||
                    (this.W7EstimatedPallets != null &&
                    this.W7EstimatedPallets.Equals(input.W7EstimatedPallets))
                ) && 
                (
                    this.W7EstimatedCases == input.W7EstimatedCases ||
                    (this.W7EstimatedCases != null &&
                    this.W7EstimatedCases.Equals(input.W7EstimatedCases))
                ) && 
                (
                    this.W7EstimatedInnerPacks == input.W7EstimatedInnerPacks ||
                    (this.W7EstimatedInnerPacks != null &&
                    this.W7EstimatedInnerPacks.Equals(input.W7EstimatedInnerPacks))
                ) && 
                (
                    this.W7NextRequestedDeliveryDate == input.W7NextRequestedDeliveryDate ||
                    (this.W7NextRequestedDeliveryDate != null &&
                    this.W7NextRequestedDeliveryDate.Equals(input.W7NextRequestedDeliveryDate))
                ) && 
                (
                    this.Warehouse8Id == input.Warehouse8Id ||
                    (this.Warehouse8Id != null &&
                    this.Warehouse8Id.Equals(input.Warehouse8Id))
                ) && 
                (
                    this.W8AvailableQuantity == input.W8AvailableQuantity ||
                    (this.W8AvailableQuantity != null &&
                    this.W8AvailableQuantity.Equals(input.W8AvailableQuantity))
                ) && 
                (
                    this.W8DamagedQuantity == input.W8DamagedQuantity ||
                    (this.W8DamagedQuantity != null &&
                    this.W8DamagedQuantity.Equals(input.W8DamagedQuantity))
                ) && 
                (
                    this.W8InFulfillmentProcessQuantity == input.W8InFulfillmentProcessQuantity ||
                    (this.W8InFulfillmentProcessQuantity != null &&
                    this.W8InFulfillmentProcessQuantity.Equals(input.W8InFulfillmentProcessQuantity))
                ) && 
                (
                    this.W8OnHandQuantity == input.W8OnHandQuantity ||
                    (this.W8OnHandQuantity != null &&
                    this.W8OnHandQuantity.Equals(input.W8OnHandQuantity))
                ) && 
                (
                    this.W8OpenOrderQuantity == input.W8OpenOrderQuantity ||
                    (this.W8OpenOrderQuantity != null &&
                    this.W8OpenOrderQuantity.Equals(input.W8OpenOrderQuantity))
                ) && 
                (
                    this.W8OpenPOQuantity == input.W8OpenPOQuantity ||
                    (this.W8OpenPOQuantity != null &&
                    this.W8OpenPOQuantity.Equals(input.W8OpenPOQuantity))
                ) && 
                (
                    this.W8OrderableQuantity == input.W8OrderableQuantity ||
                    (this.W8OrderableQuantity != null &&
                    this.W8OrderableQuantity.Equals(input.W8OrderableQuantity))
                ) && 
                (
                    this.W8UnallocatableQuantity == input.W8UnallocatableQuantity ||
                    (this.W8UnallocatableQuantity != null &&
                    this.W8UnallocatableQuantity.Equals(input.W8UnallocatableQuantity))
                ) && 
                (
                    this.W8UnavailableQuantity == input.W8UnavailableQuantity ||
                    (this.W8UnavailableQuantity != null &&
                    this.W8UnavailableQuantity.Equals(input.W8UnavailableQuantity))
                ) && 
                (
                    this.W8DaysOnHand == input.W8DaysOnHand ||
                    (this.W8DaysOnHand != null &&
                    this.W8DaysOnHand.Equals(input.W8DaysOnHand))
                ) && 
                (
                    this.W8StockStatus == input.W8StockStatus ||
                    (this.W8StockStatus != null &&
                    this.W8StockStatus.Equals(input.W8StockStatus))
                ) && 
                (
                    this.W8EstimatedPallets == input.W8EstimatedPallets ||
                    (this.W8EstimatedPallets != null &&
                    this.W8EstimatedPallets.Equals(input.W8EstimatedPallets))
                ) && 
                (
                    this.W8EstimatedCases == input.W8EstimatedCases ||
                    (this.W8EstimatedCases != null &&
                    this.W8EstimatedCases.Equals(input.W8EstimatedCases))
                ) && 
                (
                    this.W8EstimatedInnerPacks == input.W8EstimatedInnerPacks ||
                    (this.W8EstimatedInnerPacks != null &&
                    this.W8EstimatedInnerPacks.Equals(input.W8EstimatedInnerPacks))
                ) && 
                (
                    this.W8NextRequestedDeliveryDate == input.W8NextRequestedDeliveryDate ||
                    (this.W8NextRequestedDeliveryDate != null &&
                    this.W8NextRequestedDeliveryDate.Equals(input.W8NextRequestedDeliveryDate))
                ) && 
                (
                    this.Warehouse9Id == input.Warehouse9Id ||
                    (this.Warehouse9Id != null &&
                    this.Warehouse9Id.Equals(input.Warehouse9Id))
                ) && 
                (
                    this.W9AvailableQuantity == input.W9AvailableQuantity ||
                    (this.W9AvailableQuantity != null &&
                    this.W9AvailableQuantity.Equals(input.W9AvailableQuantity))
                ) && 
                (
                    this.W9DamagedQuantity == input.W9DamagedQuantity ||
                    (this.W9DamagedQuantity != null &&
                    this.W9DamagedQuantity.Equals(input.W9DamagedQuantity))
                ) && 
                (
                    this.W9InFulfillmentProcessQuantity == input.W9InFulfillmentProcessQuantity ||
                    (this.W9InFulfillmentProcessQuantity != null &&
                    this.W9InFulfillmentProcessQuantity.Equals(input.W9InFulfillmentProcessQuantity))
                ) && 
                (
                    this.W9OnHandQuantity == input.W9OnHandQuantity ||
                    (this.W9OnHandQuantity != null &&
                    this.W9OnHandQuantity.Equals(input.W9OnHandQuantity))
                ) && 
                (
                    this.W9OpenOrderQuantity == input.W9OpenOrderQuantity ||
                    (this.W9OpenOrderQuantity != null &&
                    this.W9OpenOrderQuantity.Equals(input.W9OpenOrderQuantity))
                ) && 
                (
                    this.W9OpenPOQuantity == input.W9OpenPOQuantity ||
                    (this.W9OpenPOQuantity != null &&
                    this.W9OpenPOQuantity.Equals(input.W9OpenPOQuantity))
                ) && 
                (
                    this.W9OrderableQuantity == input.W9OrderableQuantity ||
                    (this.W9OrderableQuantity != null &&
                    this.W9OrderableQuantity.Equals(input.W9OrderableQuantity))
                ) && 
                (
                    this.W9UnallocatableQuantity == input.W9UnallocatableQuantity ||
                    (this.W9UnallocatableQuantity != null &&
                    this.W9UnallocatableQuantity.Equals(input.W9UnallocatableQuantity))
                ) && 
                (
                    this.W9UnavailableQuantity == input.W9UnavailableQuantity ||
                    (this.W9UnavailableQuantity != null &&
                    this.W9UnavailableQuantity.Equals(input.W9UnavailableQuantity))
                ) && 
                (
                    this.W9DaysOnHand == input.W9DaysOnHand ||
                    (this.W9DaysOnHand != null &&
                    this.W9DaysOnHand.Equals(input.W9DaysOnHand))
                ) && 
                (
                    this.W9StockStatus == input.W9StockStatus ||
                    (this.W9StockStatus != null &&
                    this.W9StockStatus.Equals(input.W9StockStatus))
                ) && 
                (
                    this.W9EstimatedPallets == input.W9EstimatedPallets ||
                    (this.W9EstimatedPallets != null &&
                    this.W9EstimatedPallets.Equals(input.W9EstimatedPallets))
                ) && 
                (
                    this.W9EstimatedCases == input.W9EstimatedCases ||
                    (this.W9EstimatedCases != null &&
                    this.W9EstimatedCases.Equals(input.W9EstimatedCases))
                ) && 
                (
                    this.W9EstimatedInnerPacks == input.W9EstimatedInnerPacks ||
                    (this.W9EstimatedInnerPacks != null &&
                    this.W9EstimatedInnerPacks.Equals(input.W9EstimatedInnerPacks))
                ) && 
                (
                    this.W9NextRequestedDeliveryDate == input.W9NextRequestedDeliveryDate ||
                    (this.W9NextRequestedDeliveryDate != null &&
                    this.W9NextRequestedDeliveryDate.Equals(input.W9NextRequestedDeliveryDate))
                ) && 
                (
                    this.Warehouse10Id == input.Warehouse10Id ||
                    (this.Warehouse10Id != null &&
                    this.Warehouse10Id.Equals(input.Warehouse10Id))
                ) && 
                (
                    this.W10AvailableQuantity == input.W10AvailableQuantity ||
                    (this.W10AvailableQuantity != null &&
                    this.W10AvailableQuantity.Equals(input.W10AvailableQuantity))
                ) && 
                (
                    this.W10DamagedQuantity == input.W10DamagedQuantity ||
                    (this.W10DamagedQuantity != null &&
                    this.W10DamagedQuantity.Equals(input.W10DamagedQuantity))
                ) && 
                (
                    this.W10InFulfillmentProcessQuantity == input.W10InFulfillmentProcessQuantity ||
                    (this.W10InFulfillmentProcessQuantity != null &&
                    this.W10InFulfillmentProcessQuantity.Equals(input.W10InFulfillmentProcessQuantity))
                ) && 
                (
                    this.W10OnHandQuantity == input.W10OnHandQuantity ||
                    (this.W10OnHandQuantity != null &&
                    this.W10OnHandQuantity.Equals(input.W10OnHandQuantity))
                ) && 
                (
                    this.W10OpenOrderQuantity == input.W10OpenOrderQuantity ||
                    (this.W10OpenOrderQuantity != null &&
                    this.W10OpenOrderQuantity.Equals(input.W10OpenOrderQuantity))
                ) && 
                (
                    this.W10OpenPOQuantity == input.W10OpenPOQuantity ||
                    (this.W10OpenPOQuantity != null &&
                    this.W10OpenPOQuantity.Equals(input.W10OpenPOQuantity))
                ) && 
                (
                    this.W10OrderableQuantity == input.W10OrderableQuantity ||
                    (this.W10OrderableQuantity != null &&
                    this.W10OrderableQuantity.Equals(input.W10OrderableQuantity))
                ) && 
                (
                    this.W10UnallocatableQuantity == input.W10UnallocatableQuantity ||
                    (this.W10UnallocatableQuantity != null &&
                    this.W10UnallocatableQuantity.Equals(input.W10UnallocatableQuantity))
                ) && 
                (
                    this.W10UnavailableQuantity == input.W10UnavailableQuantity ||
                    (this.W10UnavailableQuantity != null &&
                    this.W10UnavailableQuantity.Equals(input.W10UnavailableQuantity))
                ) && 
                (
                    this.W10DaysOnHand == input.W10DaysOnHand ||
                    (this.W10DaysOnHand != null &&
                    this.W10DaysOnHand.Equals(input.W10DaysOnHand))
                ) && 
                (
                    this.W10StockStatus == input.W10StockStatus ||
                    (this.W10StockStatus != null &&
                    this.W10StockStatus.Equals(input.W10StockStatus))
                ) && 
                (
                    this.W10EstimatedPallets == input.W10EstimatedPallets ||
                    (this.W10EstimatedPallets != null &&
                    this.W10EstimatedPallets.Equals(input.W10EstimatedPallets))
                ) && 
                (
                    this.W10EstimatedCases == input.W10EstimatedCases ||
                    (this.W10EstimatedCases != null &&
                    this.W10EstimatedCases.Equals(input.W10EstimatedCases))
                ) && 
                (
                    this.W10EstimatedInnerPacks == input.W10EstimatedInnerPacks ||
                    (this.W10EstimatedInnerPacks != null &&
                    this.W10EstimatedInnerPacks.Equals(input.W10EstimatedInnerPacks))
                ) && 
                (
                    this.W10NextRequestedDeliveryDate == input.W10NextRequestedDeliveryDate ||
                    (this.W10NextRequestedDeliveryDate != null &&
                    this.W10NextRequestedDeliveryDate.Equals(input.W10NextRequestedDeliveryDate))
                ) && 
                (
                    this.CustomFields == input.CustomFields ||
                    this.CustomFields != null &&
                    this.CustomFields.SequenceEqual(input.CustomFields)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.AccountCodeId != null)
                    hashCode = hashCode * 59 + this.AccountCodeId.GetHashCode();
                if (this.LowStockContactId != null)
                    hashCode = hashCode * 59 + this.LowStockContactId.GetHashCode();
                if (this.LegacyLowLevelContactId != null)
                    hashCode = hashCode * 59 + this.LegacyLowLevelContactId.GetHashCode();
                if (this.LowStockCodeId != null)
                    hashCode = hashCode * 59 + this.LowStockCodeId.GetHashCode();
                if (this.MajorGroupId != null)
                    hashCode = hashCode * 59 + this.MajorGroupId.GetHashCode();
                if (this.SubGroupId != null)
                    hashCode = hashCode * 59 + this.SubGroupId.GetHashCode();
                if (this.ProductCodeId != null)
                    hashCode = hashCode * 59 + this.ProductCodeId.GetHashCode();
                if (this.SummaryCodeId != null)
                    hashCode = hashCode * 59 + this.SummaryCodeId.GetHashCode();
                if (this.BuyerId != null)
                    hashCode = hashCode * 59 + this.BuyerId.GetHashCode();
                if (this.LobId != null)
                    hashCode = hashCode * 59 + this.LobId.GetHashCode();
                if (this.Sku != null)
                    hashCode = hashCode * 59 + this.Sku.GetHashCode();
                if (this.VendorSKU != null)
                    hashCode = hashCode * 59 + this.VendorSKU.GetHashCode();
                if (this.Upc != null)
                    hashCode = hashCode * 59 + this.Upc.GetHashCode();
                if (this.ItemDescription != null)
                    hashCode = hashCode * 59 + this.ItemDescription.GetHashCode();
                if (this.PackingSlipDescription != null)
                    hashCode = hashCode * 59 + this.PackingSlipDescription.GetHashCode();
                if (this.AbsoluteMax != null)
                    hashCode = hashCode * 59 + this.AbsoluteMax.GetHashCode();
                if (this.AdditionalDescription != null)
                    hashCode = hashCode * 59 + this.AdditionalDescription.GetHashCode();
                if (this.Backorder != null)
                    hashCode = hashCode * 59 + this.Backorder.GetHashCode();
                if (this.ChargeCode != null)
                    hashCode = hashCode * 59 + this.ChargeCode.GetHashCode();
                if (this.CommodityCodeId != null)
                    hashCode = hashCode * 59 + this.CommodityCodeId.GetHashCode();
                if (this.CompanionCode != null)
                    hashCode = hashCode * 59 + this.CompanionCode.GetHashCode();
                if (this.CreateDate != null)
                    hashCode = hashCode * 59 + this.CreateDate.GetHashCode();
                if (this.CriticalAmount != null)
                    hashCode = hashCode * 59 + this.CriticalAmount.GetHashCode();
                if (this.OverallFixedReorderPoint != null)
                    hashCode = hashCode * 59 + this.OverallFixedReorderPoint.GetHashCode();
                if (this.OverallLeadTime != null)
                    hashCode = hashCode * 59 + this.OverallLeadTime.GetHashCode();
                if (this.SellPrice != null)
                    hashCode = hashCode * 59 + this.SellPrice.GetHashCode();
                if (this.PricingPer != null)
                    hashCode = hashCode * 59 + this.PricingPer.GetHashCode();
                if (this.LotControlFlag != null)
                    hashCode = hashCode * 59 + this.LotControlFlag.GetHashCode();
                if (this.MaxCycle != null)
                    hashCode = hashCode * 59 + this.MaxCycle.GetHashCode();
                if (this.MaxInterim != null)
                    hashCode = hashCode * 59 + this.MaxInterim.GetHashCode();
                if (this.NumericSortOrder != null)
                    hashCode = hashCode * 59 + this.NumericSortOrder.GetHashCode();
                if (this.OutsideVendorId != null)
                    hashCode = hashCode * 59 + this.OutsideVendorId.GetHashCode();
                if (this.PickCode != null)
                    hashCode = hashCode * 59 + this.PickCode.GetHashCode();
                if (this.PodOrderSuffix != null)
                    hashCode = hashCode * 59 + this.PodOrderSuffix.GetHashCode();
                if (this.PodRevDate != null)
                    hashCode = hashCode * 59 + this.PodRevDate.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.SeasonalItem != null)
                    hashCode = hashCode * 59 + this.SeasonalItem.GetHashCode();
                if (this.RequiresProductionLot != null)
                    hashCode = hashCode * 59 + this.RequiresProductionLot.GetHashCode();
                if (this.Sector != null)
                    hashCode = hashCode * 59 + this.Sector.GetHashCode();
                if (this.Secure != null)
                    hashCode = hashCode * 59 + this.Secure.GetHashCode();
                if (this.SerialCode != null)
                    hashCode = hashCode * 59 + this.SerialCode.GetHashCode();
                if (this.UnitCode != null)
                    hashCode = hashCode * 59 + this.UnitCode.GetHashCode();
                if (this.UnitsPerWrap != null)
                    hashCode = hashCode * 59 + this.UnitsPerWrap.GetHashCode();
                if (this.WeightPerWrap != null)
                    hashCode = hashCode * 59 + this.WeightPerWrap.GetHashCode();
                if (this.QuantityPerInnerPack != null)
                    hashCode = hashCode * 59 + this.QuantityPerInnerPack.GetHashCode();
                if (this.QuantityPerCase != null)
                    hashCode = hashCode * 59 + this.QuantityPerCase.GetHashCode();
                if (this.QuantityPerPallet != null)
                    hashCode = hashCode * 59 + this.QuantityPerPallet.GetHashCode();
                if (this.InnerPackBarcode != null)
                    hashCode = hashCode * 59 + this.InnerPackBarcode.GetHashCode();
                if (this.CaseBarcode != null)
                    hashCode = hashCode * 59 + this.CaseBarcode.GetHashCode();
                if (this.PalletBarcode != null)
                    hashCode = hashCode * 59 + this.PalletBarcode.GetHashCode();
                if (this.VoidDate != null)
                    hashCode = hashCode * 59 + this.VoidDate.GetHashCode();
                if (this.WrapCode != null)
                    hashCode = hashCode * 59 + this.WrapCode.GetHashCode();
                if (this.ExtrinsicText1 != null)
                    hashCode = hashCode * 59 + this.ExtrinsicText1.GetHashCode();
                if (this.ExtrinsicText2 != null)
                    hashCode = hashCode * 59 + this.ExtrinsicText2.GetHashCode();
                if (this.ExtrinsicText3 != null)
                    hashCode = hashCode * 59 + this.ExtrinsicText3.GetHashCode();
                if (this.ExtrinsicNumber1 != null)
                    hashCode = hashCode * 59 + this.ExtrinsicNumber1.GetHashCode();
                if (this.ExtrinsicNumber2 != null)
                    hashCode = hashCode * 59 + this.ExtrinsicNumber2.GetHashCode();
                if (this.ExtrinsicDecimal1 != null)
                    hashCode = hashCode * 59 + this.ExtrinsicDecimal1.GetHashCode();
                if (this.ExtrinsicDecimal2 != null)
                    hashCode = hashCode * 59 + this.ExtrinsicDecimal2.GetHashCode();
                if (this.CasebreakEnabled != null)
                    hashCode = hashCode * 59 + this.CasebreakEnabled.GetHashCode();
                if (this.VendorId != null)
                    hashCode = hashCode * 59 + this.VendorId.GetHashCode();
                if (this.VendorPrice != null)
                    hashCode = hashCode * 59 + this.VendorPrice.GetHashCode();
                if (this.VendorPer != null)
                    hashCode = hashCode * 59 + this.VendorPer.GetHashCode();
                if (this.ModifyDate != null)
                    hashCode = hashCode * 59 + this.ModifyDate.GetHashCode();
                if (this.PrimaryImage != null)
                    hashCode = hashCode * 59 + this.PrimaryImage.GetHashCode();
                if (this.PickImage != null)
                    hashCode = hashCode * 59 + this.PickImage.GetHashCode();
                if (this.BehaviorType != null)
                    hashCode = hashCode * 59 + this.BehaviorType.GetHashCode();
                if (this.AssemblyInstructions != null)
                    hashCode = hashCode * 59 + this.AssemblyInstructions.GetHashCode();
                if (this.ForwardLotMixingRule != null)
                    hashCode = hashCode * 59 + this.ForwardLotMixingRule.GetHashCode();
                if (this.StorageLotMixingRule != null)
                    hashCode = hashCode * 59 + this.StorageLotMixingRule.GetHashCode();
                if (this.ForwardItemMixingRule != null)
                    hashCode = hashCode * 59 + this.ForwardItemMixingRule.GetHashCode();
                if (this.StorageItemMixingRule != null)
                    hashCode = hashCode * 59 + this.StorageItemMixingRule.GetHashCode();
                if (this.AllocationRule != null)
                    hashCode = hashCode * 59 + this.AllocationRule.GetHashCode();
                if (this.AllocationSort != null)
                    hashCode = hashCode * 59 + this.AllocationSort.GetHashCode();
                if (this.AllocationField != null)
                    hashCode = hashCode * 59 + this.AllocationField.GetHashCode();
                if (this.BarcodeField != null)
                    hashCode = hashCode * 59 + this.BarcodeField.GetHashCode();
                if (this.WarehouseDisplayField != null)
                    hashCode = hashCode * 59 + this.WarehouseDisplayField.GetHashCode();
                if (this.ProductIdTagSchemeId != null)
                    hashCode = hashCode * 59 + this.ProductIdTagSchemeId.GetHashCode();
                if (this.ItemSerialSchemeId != null)
                    hashCode = hashCode * 59 + this.ItemSerialSchemeId.GetHashCode();
                if (this.ReceivingCriteriaSchemeId != null)
                    hashCode = hashCode * 59 + this.ReceivingCriteriaSchemeId.GetHashCode();
                if (this.AsnRule != null)
                    hashCode = hashCode * 59 + this.AsnRule.GetHashCode();
                if (this.QuantityType != null)
                    hashCode = hashCode * 59 + this.QuantityType.GetHashCode();
                if (this.Hazmat != null)
                    hashCode = hashCode * 59 + this.Hazmat.GetHashCode();
                if (this.UspsHazmatTypeId != null)
                    hashCode = hashCode * 59 + this.UspsHazmatTypeId.GetHashCode();
                if (this.IsAlcohol != null)
                    hashCode = hashCode * 59 + this.IsAlcohol.GetHashCode();
                if (this.AlcoholType != null)
                    hashCode = hashCode * 59 + this.AlcoholType.GetHashCode();
                if (this.AlcoholContent != null)
                    hashCode = hashCode * 59 + this.AlcoholContent.GetHashCode();
                if (this.AlcoholContainer != null)
                    hashCode = hashCode * 59 + this.AlcoholContainer.GetHashCode();
                if (this.AlcoholVintageYear != null)
                    hashCode = hashCode * 59 + this.AlcoholVintageYear.GetHashCode();
                if (this.AlcoholCountry != null)
                    hashCode = hashCode * 59 + this.AlcoholCountry.GetHashCode();
                if (this.AlcoholState != null)
                    hashCode = hashCode * 59 + this.AlcoholState.GetHashCode();
                if (this.AlcoholRegion != null)
                    hashCode = hashCode * 59 + this.AlcoholRegion.GetHashCode();
                if (this.AlcoholBrand != null)
                    hashCode = hashCode * 59 + this.AlcoholBrand.GetHashCode();
                if (this.AlcoholUPCCode != null)
                    hashCode = hashCode * 59 + this.AlcoholUPCCode.GetHashCode();
                if (this.AlcoholNAMBCACode != null)
                    hashCode = hashCode * 59 + this.AlcoholNAMBCACode.GetHashCode();
                if (this.AlcoholUNIMERCCode != null)
                    hashCode = hashCode * 59 + this.AlcoholUNIMERCCode.GetHashCode();
                if (this.AlcoholSCCCode != null)
                    hashCode = hashCode * 59 + this.AlcoholSCCCode.GetHashCode();
                if (this.Length != null)
                    hashCode = hashCode * 59 + this.Length.GetHashCode();
                if (this.Width != null)
                    hashCode = hashCode * 59 + this.Width.GetHashCode();
                if (this.Height != null)
                    hashCode = hashCode * 59 + this.Height.GetHashCode();
                if (this.TopUp != null)
                    hashCode = hashCode * 59 + this.TopUp.GetHashCode();
                if (this.ShipSolo != null)
                    hashCode = hashCode * 59 + this.ShipSolo.GetHashCode();
                if (this.InventoryUpdateTimestamp != null)
                    hashCode = hashCode * 59 + this.InventoryUpdateTimestamp.GetHashCode();
                if (this.AvailableQuantity != null)
                    hashCode = hashCode * 59 + this.AvailableQuantity.GetHashCode();
                if (this.DamagedQuantity != null)
                    hashCode = hashCode * 59 + this.DamagedQuantity.GetHashCode();
                if (this.InFulfillmentProcessQuantity != null)
                    hashCode = hashCode * 59 + this.InFulfillmentProcessQuantity.GetHashCode();
                if (this.OnHandQuantity != null)
                    hashCode = hashCode * 59 + this.OnHandQuantity.GetHashCode();
                if (this.OpenOrderQuantity != null)
                    hashCode = hashCode * 59 + this.OpenOrderQuantity.GetHashCode();
                if (this.OpenPOQuantity != null)
                    hashCode = hashCode * 59 + this.OpenPOQuantity.GetHashCode();
                if (this.OrderableQuantity != null)
                    hashCode = hashCode * 59 + this.OrderableQuantity.GetHashCode();
                if (this.UnallocatableQuantity != null)
                    hashCode = hashCode * 59 + this.UnallocatableQuantity.GetHashCode();
                if (this.UnavailableQuantity != null)
                    hashCode = hashCode * 59 + this.UnavailableQuantity.GetHashCode();
                if (this.TotalDemand != null)
                    hashCode = hashCode * 59 + this.TotalDemand.GetHashCode();
                if (this.AvailableQuantityInnerPacks != null)
                    hashCode = hashCode * 59 + this.AvailableQuantityInnerPacks.GetHashCode();
                if (this.DamagedQuantityInnerPacks != null)
                    hashCode = hashCode * 59 + this.DamagedQuantityInnerPacks.GetHashCode();
                if (this.InFulfillmentProcessQuantityInnerPacks != null)
                    hashCode = hashCode * 59 + this.InFulfillmentProcessQuantityInnerPacks.GetHashCode();
                if (this.OnHandQuantityInnerPacks != null)
                    hashCode = hashCode * 59 + this.OnHandQuantityInnerPacks.GetHashCode();
                if (this.OpenOrderQuantityInnerPacks != null)
                    hashCode = hashCode * 59 + this.OpenOrderQuantityInnerPacks.GetHashCode();
                if (this.OpenPOQuantityInnerPacks != null)
                    hashCode = hashCode * 59 + this.OpenPOQuantityInnerPacks.GetHashCode();
                if (this.OrderableQuantityInnerPacks != null)
                    hashCode = hashCode * 59 + this.OrderableQuantityInnerPacks.GetHashCode();
                if (this.UnallocatableQuantityInnerPacks != null)
                    hashCode = hashCode * 59 + this.UnallocatableQuantityInnerPacks.GetHashCode();
                if (this.UnavailableQuantityInnerPacks != null)
                    hashCode = hashCode * 59 + this.UnavailableQuantityInnerPacks.GetHashCode();
                if (this.AvailableQuantityCases != null)
                    hashCode = hashCode * 59 + this.AvailableQuantityCases.GetHashCode();
                if (this.DamagedQuantityCases != null)
                    hashCode = hashCode * 59 + this.DamagedQuantityCases.GetHashCode();
                if (this.InFulfillmentProcessQuantityCases != null)
                    hashCode = hashCode * 59 + this.InFulfillmentProcessQuantityCases.GetHashCode();
                if (this.OnHandQuantityCases != null)
                    hashCode = hashCode * 59 + this.OnHandQuantityCases.GetHashCode();
                if (this.OpenOrderQuantityCases != null)
                    hashCode = hashCode * 59 + this.OpenOrderQuantityCases.GetHashCode();
                if (this.OpenPOQuantityCases != null)
                    hashCode = hashCode * 59 + this.OpenPOQuantityCases.GetHashCode();
                if (this.OrderableQuantityCases != null)
                    hashCode = hashCode * 59 + this.OrderableQuantityCases.GetHashCode();
                if (this.UnallocatableQuantityCases != null)
                    hashCode = hashCode * 59 + this.UnallocatableQuantityCases.GetHashCode();
                if (this.UnavailableQuantityCases != null)
                    hashCode = hashCode * 59 + this.UnavailableQuantityCases.GetHashCode();
                if (this.AvailableQuantityPallets != null)
                    hashCode = hashCode * 59 + this.AvailableQuantityPallets.GetHashCode();
                if (this.DamagedQuantityPallets != null)
                    hashCode = hashCode * 59 + this.DamagedQuantityPallets.GetHashCode();
                if (this.InFulfillmentProcessQuantityPallets != null)
                    hashCode = hashCode * 59 + this.InFulfillmentProcessQuantityPallets.GetHashCode();
                if (this.OnHandQuantityPallets != null)
                    hashCode = hashCode * 59 + this.OnHandQuantityPallets.GetHashCode();
                if (this.OpenOrderQuantityPallets != null)
                    hashCode = hashCode * 59 + this.OpenOrderQuantityPallets.GetHashCode();
                if (this.OpenPOQuantityPallets != null)
                    hashCode = hashCode * 59 + this.OpenPOQuantityPallets.GetHashCode();
                if (this.OrderableQuantityPallets != null)
                    hashCode = hashCode * 59 + this.OrderableQuantityPallets.GetHashCode();
                if (this.UnallocatableQuantityPallets != null)
                    hashCode = hashCode * 59 + this.UnallocatableQuantityPallets.GetHashCode();
                if (this.UnavailableQuantityPallets != null)
                    hashCode = hashCode * 59 + this.UnavailableQuantityPallets.GetHashCode();
                if (this.OverallDaysOnHand != null)
                    hashCode = hashCode * 59 + this.OverallDaysOnHand.GetHashCode();
                if (this.OverallStockStatus != null)
                    hashCode = hashCode * 59 + this.OverallStockStatus.GetHashCode();
                if (this.EstimatedPallets != null)
                    hashCode = hashCode * 59 + this.EstimatedPallets.GetHashCode();
                if (this.EstimatedCases != null)
                    hashCode = hashCode * 59 + this.EstimatedCases.GetHashCode();
                if (this.EstimatedInnerPacks != null)
                    hashCode = hashCode * 59 + this.EstimatedInnerPacks.GetHashCode();
                if (this.NextRequestedDeliveryDate != null)
                    hashCode = hashCode * 59 + this.NextRequestedDeliveryDate.GetHashCode();
                if (this.Warehouse1Id != null)
                    hashCode = hashCode * 59 + this.Warehouse1Id.GetHashCode();
                if (this.W1AvailableQuantity != null)
                    hashCode = hashCode * 59 + this.W1AvailableQuantity.GetHashCode();
                if (this.W1DamagedQuantity != null)
                    hashCode = hashCode * 59 + this.W1DamagedQuantity.GetHashCode();
                if (this.W1InFulfillmentProcessQuantity != null)
                    hashCode = hashCode * 59 + this.W1InFulfillmentProcessQuantity.GetHashCode();
                if (this.W1OnHandQuantity != null)
                    hashCode = hashCode * 59 + this.W1OnHandQuantity.GetHashCode();
                if (this.W1OpenOrderQuantity != null)
                    hashCode = hashCode * 59 + this.W1OpenOrderQuantity.GetHashCode();
                if (this.W1OpenPOQuantity != null)
                    hashCode = hashCode * 59 + this.W1OpenPOQuantity.GetHashCode();
                if (this.W1OrderableQuantity != null)
                    hashCode = hashCode * 59 + this.W1OrderableQuantity.GetHashCode();
                if (this.W1UnallocatableQuantity != null)
                    hashCode = hashCode * 59 + this.W1UnallocatableQuantity.GetHashCode();
                if (this.W1UnavailableQuantity != null)
                    hashCode = hashCode * 59 + this.W1UnavailableQuantity.GetHashCode();
                if (this.W1DaysOnHand != null)
                    hashCode = hashCode * 59 + this.W1DaysOnHand.GetHashCode();
                if (this.W1StockStatus != null)
                    hashCode = hashCode * 59 + this.W1StockStatus.GetHashCode();
                if (this.W1EstimatedPallets != null)
                    hashCode = hashCode * 59 + this.W1EstimatedPallets.GetHashCode();
                if (this.W1EstimatedCases != null)
                    hashCode = hashCode * 59 + this.W1EstimatedCases.GetHashCode();
                if (this.W1EstimatedInnerPacks != null)
                    hashCode = hashCode * 59 + this.W1EstimatedInnerPacks.GetHashCode();
                if (this.W1NextRequestedDeliveryDate != null)
                    hashCode = hashCode * 59 + this.W1NextRequestedDeliveryDate.GetHashCode();
                if (this.Warehouse2Id != null)
                    hashCode = hashCode * 59 + this.Warehouse2Id.GetHashCode();
                if (this.W2AvailableQuantity != null)
                    hashCode = hashCode * 59 + this.W2AvailableQuantity.GetHashCode();
                if (this.W2DamagedQuantity != null)
                    hashCode = hashCode * 59 + this.W2DamagedQuantity.GetHashCode();
                if (this.W2InFulfillmentProcessQuantity != null)
                    hashCode = hashCode * 59 + this.W2InFulfillmentProcessQuantity.GetHashCode();
                if (this.W2OnHandQuantity != null)
                    hashCode = hashCode * 59 + this.W2OnHandQuantity.GetHashCode();
                if (this.W2OpenOrderQuantity != null)
                    hashCode = hashCode * 59 + this.W2OpenOrderQuantity.GetHashCode();
                if (this.W2OpenPOQuantity != null)
                    hashCode = hashCode * 59 + this.W2OpenPOQuantity.GetHashCode();
                if (this.W2OrderableQuantity != null)
                    hashCode = hashCode * 59 + this.W2OrderableQuantity.GetHashCode();
                if (this.W2UnallocatableQuantity != null)
                    hashCode = hashCode * 59 + this.W2UnallocatableQuantity.GetHashCode();
                if (this.W2UnavailableQuantity != null)
                    hashCode = hashCode * 59 + this.W2UnavailableQuantity.GetHashCode();
                if (this.W2DaysOnHand != null)
                    hashCode = hashCode * 59 + this.W2DaysOnHand.GetHashCode();
                if (this.W2StockStatus != null)
                    hashCode = hashCode * 59 + this.W2StockStatus.GetHashCode();
                if (this.W2EstimatedPallets != null)
                    hashCode = hashCode * 59 + this.W2EstimatedPallets.GetHashCode();
                if (this.W2EstimatedCases != null)
                    hashCode = hashCode * 59 + this.W2EstimatedCases.GetHashCode();
                if (this.W2EstimatedInnerPacks != null)
                    hashCode = hashCode * 59 + this.W2EstimatedInnerPacks.GetHashCode();
                if (this.W2NextRequestedDeliveryDate != null)
                    hashCode = hashCode * 59 + this.W2NextRequestedDeliveryDate.GetHashCode();
                if (this.Warehouse3Id != null)
                    hashCode = hashCode * 59 + this.Warehouse3Id.GetHashCode();
                if (this.W3AvailableQuantity != null)
                    hashCode = hashCode * 59 + this.W3AvailableQuantity.GetHashCode();
                if (this.W3DamagedQuantity != null)
                    hashCode = hashCode * 59 + this.W3DamagedQuantity.GetHashCode();
                if (this.W3InFulfillmentProcessQuantity != null)
                    hashCode = hashCode * 59 + this.W3InFulfillmentProcessQuantity.GetHashCode();
                if (this.W3OnHandQuantity != null)
                    hashCode = hashCode * 59 + this.W3OnHandQuantity.GetHashCode();
                if (this.W3OpenOrderQuantity != null)
                    hashCode = hashCode * 59 + this.W3OpenOrderQuantity.GetHashCode();
                if (this.W3OpenPOQuantity != null)
                    hashCode = hashCode * 59 + this.W3OpenPOQuantity.GetHashCode();
                if (this.W3OrderableQuantity != null)
                    hashCode = hashCode * 59 + this.W3OrderableQuantity.GetHashCode();
                if (this.W3UnallocatableQuantity != null)
                    hashCode = hashCode * 59 + this.W3UnallocatableQuantity.GetHashCode();
                if (this.W3UnavailableQuantity != null)
                    hashCode = hashCode * 59 + this.W3UnavailableQuantity.GetHashCode();
                if (this.W3DaysOnHand != null)
                    hashCode = hashCode * 59 + this.W3DaysOnHand.GetHashCode();
                if (this.W3StockStatus != null)
                    hashCode = hashCode * 59 + this.W3StockStatus.GetHashCode();
                if (this.W3EstimatedPallets != null)
                    hashCode = hashCode * 59 + this.W3EstimatedPallets.GetHashCode();
                if (this.W3EstimatedCases != null)
                    hashCode = hashCode * 59 + this.W3EstimatedCases.GetHashCode();
                if (this.W3EstimatedInnerPacks != null)
                    hashCode = hashCode * 59 + this.W3EstimatedInnerPacks.GetHashCode();
                if (this.W3NextRequestedDeliveryDate != null)
                    hashCode = hashCode * 59 + this.W3NextRequestedDeliveryDate.GetHashCode();
                if (this.Warehouse4Id != null)
                    hashCode = hashCode * 59 + this.Warehouse4Id.GetHashCode();
                if (this.W4AvailableQuantity != null)
                    hashCode = hashCode * 59 + this.W4AvailableQuantity.GetHashCode();
                if (this.W4DamagedQuantity != null)
                    hashCode = hashCode * 59 + this.W4DamagedQuantity.GetHashCode();
                if (this.W4InFulfillmentProcessQuantity != null)
                    hashCode = hashCode * 59 + this.W4InFulfillmentProcessQuantity.GetHashCode();
                if (this.W4OnHandQuantity != null)
                    hashCode = hashCode * 59 + this.W4OnHandQuantity.GetHashCode();
                if (this.W4OpenOrderQuantity != null)
                    hashCode = hashCode * 59 + this.W4OpenOrderQuantity.GetHashCode();
                if (this.W4OpenPOQuantity != null)
                    hashCode = hashCode * 59 + this.W4OpenPOQuantity.GetHashCode();
                if (this.W4OrderableQuantity != null)
                    hashCode = hashCode * 59 + this.W4OrderableQuantity.GetHashCode();
                if (this.W4UnallocatableQuantity != null)
                    hashCode = hashCode * 59 + this.W4UnallocatableQuantity.GetHashCode();
                if (this.W4UnavailableQuantity != null)
                    hashCode = hashCode * 59 + this.W4UnavailableQuantity.GetHashCode();
                if (this.W4DaysOnHand != null)
                    hashCode = hashCode * 59 + this.W4DaysOnHand.GetHashCode();
                if (this.W4StockStatus != null)
                    hashCode = hashCode * 59 + this.W4StockStatus.GetHashCode();
                if (this.W4EstimatedPallets != null)
                    hashCode = hashCode * 59 + this.W4EstimatedPallets.GetHashCode();
                if (this.W4EstimatedCases != null)
                    hashCode = hashCode * 59 + this.W4EstimatedCases.GetHashCode();
                if (this.W4EstimatedInnerPacks != null)
                    hashCode = hashCode * 59 + this.W4EstimatedInnerPacks.GetHashCode();
                if (this.W4NextRequestedDeliveryDate != null)
                    hashCode = hashCode * 59 + this.W4NextRequestedDeliveryDate.GetHashCode();
                if (this.Warehouse5Id != null)
                    hashCode = hashCode * 59 + this.Warehouse5Id.GetHashCode();
                if (this.W5AvailableQuantity != null)
                    hashCode = hashCode * 59 + this.W5AvailableQuantity.GetHashCode();
                if (this.W5DamagedQuantity != null)
                    hashCode = hashCode * 59 + this.W5DamagedQuantity.GetHashCode();
                if (this.W5InFulfillmentProcessQuantity != null)
                    hashCode = hashCode * 59 + this.W5InFulfillmentProcessQuantity.GetHashCode();
                if (this.W5OnHandQuantity != null)
                    hashCode = hashCode * 59 + this.W5OnHandQuantity.GetHashCode();
                if (this.W5OpenOrderQuantity != null)
                    hashCode = hashCode * 59 + this.W5OpenOrderQuantity.GetHashCode();
                if (this.W5OpenPOQuantity != null)
                    hashCode = hashCode * 59 + this.W5OpenPOQuantity.GetHashCode();
                if (this.W5OrderableQuantity != null)
                    hashCode = hashCode * 59 + this.W5OrderableQuantity.GetHashCode();
                if (this.W5UnallocatableQuantity != null)
                    hashCode = hashCode * 59 + this.W5UnallocatableQuantity.GetHashCode();
                if (this.W5UnavailableQuantity != null)
                    hashCode = hashCode * 59 + this.W5UnavailableQuantity.GetHashCode();
                if (this.W5DaysOnHand != null)
                    hashCode = hashCode * 59 + this.W5DaysOnHand.GetHashCode();
                if (this.W5StockStatus != null)
                    hashCode = hashCode * 59 + this.W5StockStatus.GetHashCode();
                if (this.W5EstimatedPallets != null)
                    hashCode = hashCode * 59 + this.W5EstimatedPallets.GetHashCode();
                if (this.W5EstimatedCases != null)
                    hashCode = hashCode * 59 + this.W5EstimatedCases.GetHashCode();
                if (this.W5EstimatedInnerPacks != null)
                    hashCode = hashCode * 59 + this.W5EstimatedInnerPacks.GetHashCode();
                if (this.W5NextRequestedDeliveryDate != null)
                    hashCode = hashCode * 59 + this.W5NextRequestedDeliveryDate.GetHashCode();
                if (this.Warehouse6Id != null)
                    hashCode = hashCode * 59 + this.Warehouse6Id.GetHashCode();
                if (this.W6AvailableQuantity != null)
                    hashCode = hashCode * 59 + this.W6AvailableQuantity.GetHashCode();
                if (this.W6DamagedQuantity != null)
                    hashCode = hashCode * 59 + this.W6DamagedQuantity.GetHashCode();
                if (this.W6InFulfillmentProcessQuantity != null)
                    hashCode = hashCode * 59 + this.W6InFulfillmentProcessQuantity.GetHashCode();
                if (this.W6OnHandQuantity != null)
                    hashCode = hashCode * 59 + this.W6OnHandQuantity.GetHashCode();
                if (this.W6OpenOrderQuantity != null)
                    hashCode = hashCode * 59 + this.W6OpenOrderQuantity.GetHashCode();
                if (this.W6OpenPOQuantity != null)
                    hashCode = hashCode * 59 + this.W6OpenPOQuantity.GetHashCode();
                if (this.W6OrderableQuantity != null)
                    hashCode = hashCode * 59 + this.W6OrderableQuantity.GetHashCode();
                if (this.W6UnallocatableQuantity != null)
                    hashCode = hashCode * 59 + this.W6UnallocatableQuantity.GetHashCode();
                if (this.W6UnavailableQuantity != null)
                    hashCode = hashCode * 59 + this.W6UnavailableQuantity.GetHashCode();
                if (this.W6DaysOnHand != null)
                    hashCode = hashCode * 59 + this.W6DaysOnHand.GetHashCode();
                if (this.W6StockStatus != null)
                    hashCode = hashCode * 59 + this.W6StockStatus.GetHashCode();
                if (this.W6EstimatedPallets != null)
                    hashCode = hashCode * 59 + this.W6EstimatedPallets.GetHashCode();
                if (this.W6EstimatedCases != null)
                    hashCode = hashCode * 59 + this.W6EstimatedCases.GetHashCode();
                if (this.W6EstimatedInnerPacks != null)
                    hashCode = hashCode * 59 + this.W6EstimatedInnerPacks.GetHashCode();
                if (this.W6NextRequestedDeliveryDate != null)
                    hashCode = hashCode * 59 + this.W6NextRequestedDeliveryDate.GetHashCode();
                if (this.Warehouse7Id != null)
                    hashCode = hashCode * 59 + this.Warehouse7Id.GetHashCode();
                if (this.W7AvailableQuantity != null)
                    hashCode = hashCode * 59 + this.W7AvailableQuantity.GetHashCode();
                if (this.W7DamagedQuantity != null)
                    hashCode = hashCode * 59 + this.W7DamagedQuantity.GetHashCode();
                if (this.W7InFulfillmentProcessQuantity != null)
                    hashCode = hashCode * 59 + this.W7InFulfillmentProcessQuantity.GetHashCode();
                if (this.W7OnHandQuantity != null)
                    hashCode = hashCode * 59 + this.W7OnHandQuantity.GetHashCode();
                if (this.W7OpenOrderQuantity != null)
                    hashCode = hashCode * 59 + this.W7OpenOrderQuantity.GetHashCode();
                if (this.W7OpenPOQuantity != null)
                    hashCode = hashCode * 59 + this.W7OpenPOQuantity.GetHashCode();
                if (this.W7OrderableQuantity != null)
                    hashCode = hashCode * 59 + this.W7OrderableQuantity.GetHashCode();
                if (this.W7UnallocatableQuantity != null)
                    hashCode = hashCode * 59 + this.W7UnallocatableQuantity.GetHashCode();
                if (this.W7UnavailableQuantity != null)
                    hashCode = hashCode * 59 + this.W7UnavailableQuantity.GetHashCode();
                if (this.W7DaysOnHand != null)
                    hashCode = hashCode * 59 + this.W7DaysOnHand.GetHashCode();
                if (this.W7StockStatus != null)
                    hashCode = hashCode * 59 + this.W7StockStatus.GetHashCode();
                if (this.W7EstimatedPallets != null)
                    hashCode = hashCode * 59 + this.W7EstimatedPallets.GetHashCode();
                if (this.W7EstimatedCases != null)
                    hashCode = hashCode * 59 + this.W7EstimatedCases.GetHashCode();
                if (this.W7EstimatedInnerPacks != null)
                    hashCode = hashCode * 59 + this.W7EstimatedInnerPacks.GetHashCode();
                if (this.W7NextRequestedDeliveryDate != null)
                    hashCode = hashCode * 59 + this.W7NextRequestedDeliveryDate.GetHashCode();
                if (this.Warehouse8Id != null)
                    hashCode = hashCode * 59 + this.Warehouse8Id.GetHashCode();
                if (this.W8AvailableQuantity != null)
                    hashCode = hashCode * 59 + this.W8AvailableQuantity.GetHashCode();
                if (this.W8DamagedQuantity != null)
                    hashCode = hashCode * 59 + this.W8DamagedQuantity.GetHashCode();
                if (this.W8InFulfillmentProcessQuantity != null)
                    hashCode = hashCode * 59 + this.W8InFulfillmentProcessQuantity.GetHashCode();
                if (this.W8OnHandQuantity != null)
                    hashCode = hashCode * 59 + this.W8OnHandQuantity.GetHashCode();
                if (this.W8OpenOrderQuantity != null)
                    hashCode = hashCode * 59 + this.W8OpenOrderQuantity.GetHashCode();
                if (this.W8OpenPOQuantity != null)
                    hashCode = hashCode * 59 + this.W8OpenPOQuantity.GetHashCode();
                if (this.W8OrderableQuantity != null)
                    hashCode = hashCode * 59 + this.W8OrderableQuantity.GetHashCode();
                if (this.W8UnallocatableQuantity != null)
                    hashCode = hashCode * 59 + this.W8UnallocatableQuantity.GetHashCode();
                if (this.W8UnavailableQuantity != null)
                    hashCode = hashCode * 59 + this.W8UnavailableQuantity.GetHashCode();
                if (this.W8DaysOnHand != null)
                    hashCode = hashCode * 59 + this.W8DaysOnHand.GetHashCode();
                if (this.W8StockStatus != null)
                    hashCode = hashCode * 59 + this.W8StockStatus.GetHashCode();
                if (this.W8EstimatedPallets != null)
                    hashCode = hashCode * 59 + this.W8EstimatedPallets.GetHashCode();
                if (this.W8EstimatedCases != null)
                    hashCode = hashCode * 59 + this.W8EstimatedCases.GetHashCode();
                if (this.W8EstimatedInnerPacks != null)
                    hashCode = hashCode * 59 + this.W8EstimatedInnerPacks.GetHashCode();
                if (this.W8NextRequestedDeliveryDate != null)
                    hashCode = hashCode * 59 + this.W8NextRequestedDeliveryDate.GetHashCode();
                if (this.Warehouse9Id != null)
                    hashCode = hashCode * 59 + this.Warehouse9Id.GetHashCode();
                if (this.W9AvailableQuantity != null)
                    hashCode = hashCode * 59 + this.W9AvailableQuantity.GetHashCode();
                if (this.W9DamagedQuantity != null)
                    hashCode = hashCode * 59 + this.W9DamagedQuantity.GetHashCode();
                if (this.W9InFulfillmentProcessQuantity != null)
                    hashCode = hashCode * 59 + this.W9InFulfillmentProcessQuantity.GetHashCode();
                if (this.W9OnHandQuantity != null)
                    hashCode = hashCode * 59 + this.W9OnHandQuantity.GetHashCode();
                if (this.W9OpenOrderQuantity != null)
                    hashCode = hashCode * 59 + this.W9OpenOrderQuantity.GetHashCode();
                if (this.W9OpenPOQuantity != null)
                    hashCode = hashCode * 59 + this.W9OpenPOQuantity.GetHashCode();
                if (this.W9OrderableQuantity != null)
                    hashCode = hashCode * 59 + this.W9OrderableQuantity.GetHashCode();
                if (this.W9UnallocatableQuantity != null)
                    hashCode = hashCode * 59 + this.W9UnallocatableQuantity.GetHashCode();
                if (this.W9UnavailableQuantity != null)
                    hashCode = hashCode * 59 + this.W9UnavailableQuantity.GetHashCode();
                if (this.W9DaysOnHand != null)
                    hashCode = hashCode * 59 + this.W9DaysOnHand.GetHashCode();
                if (this.W9StockStatus != null)
                    hashCode = hashCode * 59 + this.W9StockStatus.GetHashCode();
                if (this.W9EstimatedPallets != null)
                    hashCode = hashCode * 59 + this.W9EstimatedPallets.GetHashCode();
                if (this.W9EstimatedCases != null)
                    hashCode = hashCode * 59 + this.W9EstimatedCases.GetHashCode();
                if (this.W9EstimatedInnerPacks != null)
                    hashCode = hashCode * 59 + this.W9EstimatedInnerPacks.GetHashCode();
                if (this.W9NextRequestedDeliveryDate != null)
                    hashCode = hashCode * 59 + this.W9NextRequestedDeliveryDate.GetHashCode();
                if (this.Warehouse10Id != null)
                    hashCode = hashCode * 59 + this.Warehouse10Id.GetHashCode();
                if (this.W10AvailableQuantity != null)
                    hashCode = hashCode * 59 + this.W10AvailableQuantity.GetHashCode();
                if (this.W10DamagedQuantity != null)
                    hashCode = hashCode * 59 + this.W10DamagedQuantity.GetHashCode();
                if (this.W10InFulfillmentProcessQuantity != null)
                    hashCode = hashCode * 59 + this.W10InFulfillmentProcessQuantity.GetHashCode();
                if (this.W10OnHandQuantity != null)
                    hashCode = hashCode * 59 + this.W10OnHandQuantity.GetHashCode();
                if (this.W10OpenOrderQuantity != null)
                    hashCode = hashCode * 59 + this.W10OpenOrderQuantity.GetHashCode();
                if (this.W10OpenPOQuantity != null)
                    hashCode = hashCode * 59 + this.W10OpenPOQuantity.GetHashCode();
                if (this.W10OrderableQuantity != null)
                    hashCode = hashCode * 59 + this.W10OrderableQuantity.GetHashCode();
                if (this.W10UnallocatableQuantity != null)
                    hashCode = hashCode * 59 + this.W10UnallocatableQuantity.GetHashCode();
                if (this.W10UnavailableQuantity != null)
                    hashCode = hashCode * 59 + this.W10UnavailableQuantity.GetHashCode();
                if (this.W10DaysOnHand != null)
                    hashCode = hashCode * 59 + this.W10DaysOnHand.GetHashCode();
                if (this.W10StockStatus != null)
                    hashCode = hashCode * 59 + this.W10StockStatus.GetHashCode();
                if (this.W10EstimatedPallets != null)
                    hashCode = hashCode * 59 + this.W10EstimatedPallets.GetHashCode();
                if (this.W10EstimatedCases != null)
                    hashCode = hashCode * 59 + this.W10EstimatedCases.GetHashCode();
                if (this.W10EstimatedInnerPacks != null)
                    hashCode = hashCode * 59 + this.W10EstimatedInnerPacks.GetHashCode();
                if (this.W10NextRequestedDeliveryDate != null)
                    hashCode = hashCode * 59 + this.W10NextRequestedDeliveryDate.GetHashCode();
                if (this.CustomFields != null)
                    hashCode = hashCode * 59 + this.CustomFields.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
