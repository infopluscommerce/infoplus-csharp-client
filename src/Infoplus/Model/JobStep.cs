/* 
 * Infoplus API
 *
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Infoplus.Client.SwaggerDateConverter;

namespace Infoplus.Model
{
    /// <summary>
    /// JobStep
    /// </summary>
    [DataContract]
    public partial class JobStep :  IEquatable<JobStep>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="JobStep" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected JobStep() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="JobStep" /> class.
        /// </summary>
        /// <param name="SequenceNo">SequenceNo.</param>
        /// <param name="Name">Name (required).</param>
        /// <param name="AssemblyInstructions">AssemblyInstructions.</param>
        /// <param name="CustomFields">CustomFields.</param>
        public JobStep(int? SequenceNo = default(int?), string Name = default(string), string AssemblyInstructions = default(string), Dictionary<string, Object> CustomFields = default(Dictionary<string, Object>))
        {
            // to ensure "Name" is required (not null)
            if (Name == null)
            {
                throw new InvalidDataException("Name is a required property for JobStep and cannot be null");
            }
            else
            {
                this.Name = Name;
            }
            this.SequenceNo = SequenceNo;
            this.AssemblyInstructions = AssemblyInstructions;
            this.CustomFields = CustomFields;
        }
        
        /// <summary>
        /// Gets or Sets SequenceNo
        /// </summary>
        [DataMember(Name="sequenceNo", EmitDefaultValue=false)]
        public int? SequenceNo { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets AssemblyInstructions
        /// </summary>
        [DataMember(Name="assemblyInstructions", EmitDefaultValue=false)]
        public string AssemblyInstructions { get; set; }

        /// <summary>
        /// Gets or Sets CustomFields
        /// </summary>
        [DataMember(Name="customFields", EmitDefaultValue=false)]
        public Dictionary<string, Object> CustomFields { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class JobStep {\n");
            sb.Append("  SequenceNo: ").Append(SequenceNo).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  AssemblyInstructions: ").Append(AssemblyInstructions).Append("\n");
            sb.Append("  CustomFields: ").Append(CustomFields).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as JobStep);
        }

        /// <summary>
        /// Returns true if JobStep instances are equal
        /// </summary>
        /// <param name="input">Instance of JobStep to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(JobStep input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.SequenceNo == input.SequenceNo ||
                    (this.SequenceNo != null &&
                    this.SequenceNo.Equals(input.SequenceNo))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.AssemblyInstructions == input.AssemblyInstructions ||
                    (this.AssemblyInstructions != null &&
                    this.AssemblyInstructions.Equals(input.AssemblyInstructions))
                ) && 
                (
                    this.CustomFields == input.CustomFields ||
                    this.CustomFields != null &&
                    this.CustomFields.SequenceEqual(input.CustomFields)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SequenceNo != null)
                    hashCode = hashCode * 59 + this.SequenceNo.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.AssemblyInstructions != null)
                    hashCode = hashCode * 59 + this.AssemblyInstructions.GetHashCode();
                if (this.CustomFields != null)
                    hashCode = hashCode * 59 + this.CustomFields.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
