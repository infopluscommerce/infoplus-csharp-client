/* 
 * Infoplus API
 *
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Infoplus.Client.SwaggerDateConverter;

namespace Infoplus.Model
{
    /// <summary>
    /// Load
    /// </summary>
    [DataContract]
    public partial class Load :  IEquatable<Load>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Load" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Load() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Load" /> class.
        /// </summary>
        /// <param name="LobId">LobId.</param>
        /// <param name="Lpn">Lpn (required).</param>
        /// <param name="BehaviorType">BehaviorType (required).</param>
        /// <param name="WarehouseId">WarehouseId (required).</param>
        /// <param name="LocationId">LocationId.</param>
        /// <param name="ParentLoadId">ParentLoadId.</param>
        /// <param name="PalletTypeId">PalletTypeId.</param>
        /// <param name="CartonTypeId">CartonTypeId.</param>
        /// <param name="OrderNoList">OrderNoList.</param>
        /// <param name="CustomFields">CustomFields.</param>
        public Load(int? LobId = default(int?), string Lpn = default(string), string BehaviorType = default(string), int? WarehouseId = default(int?), int? LocationId = default(int?), int? ParentLoadId = default(int?), int? PalletTypeId = default(int?), int? CartonTypeId = default(int?), List<decimal?> OrderNoList = default(List<decimal?>), Dictionary<string, Object> CustomFields = default(Dictionary<string, Object>))
        {
            // to ensure "Lpn" is required (not null)
            if (Lpn == null)
            {
                throw new InvalidDataException("Lpn is a required property for Load and cannot be null");
            }
            else
            {
                this.Lpn = Lpn;
            }
            // to ensure "BehaviorType" is required (not null)
            if (BehaviorType == null)
            {
                throw new InvalidDataException("BehaviorType is a required property for Load and cannot be null");
            }
            else
            {
                this.BehaviorType = BehaviorType;
            }
            // to ensure "WarehouseId" is required (not null)
            if (WarehouseId == null)
            {
                throw new InvalidDataException("WarehouseId is a required property for Load and cannot be null");
            }
            else
            {
                this.WarehouseId = WarehouseId;
            }
            this.LobId = LobId;
            this.LocationId = LocationId;
            this.ParentLoadId = ParentLoadId;
            this.PalletTypeId = PalletTypeId;
            this.CartonTypeId = CartonTypeId;
            this.OrderNoList = OrderNoList;
            this.CustomFields = CustomFields;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; private set; }

        /// <summary>
        /// Gets or Sets CreateDate
        /// </summary>
        [DataMember(Name="createDate", EmitDefaultValue=false)]
        public DateTime? CreateDate { get; private set; }

        /// <summary>
        /// Gets or Sets ModifyDate
        /// </summary>
        [DataMember(Name="modifyDate", EmitDefaultValue=false)]
        public DateTime? ModifyDate { get; private set; }

        /// <summary>
        /// Gets or Sets LobId
        /// </summary>
        [DataMember(Name="lobId", EmitDefaultValue=false)]
        public int? LobId { get; set; }

        /// <summary>
        /// Gets or Sets Lpn
        /// </summary>
        [DataMember(Name="lpn", EmitDefaultValue=false)]
        public string Lpn { get; set; }

        /// <summary>
        /// Gets or Sets BehaviorType
        /// </summary>
        [DataMember(Name="behaviorType", EmitDefaultValue=false)]
        public string BehaviorType { get; set; }

        /// <summary>
        /// Gets or Sets WarehouseId
        /// </summary>
        [DataMember(Name="warehouseId", EmitDefaultValue=false)]
        public int? WarehouseId { get; set; }

        /// <summary>
        /// Gets or Sets LocationId
        /// </summary>
        [DataMember(Name="locationId", EmitDefaultValue=false)]
        public int? LocationId { get; set; }

        /// <summary>
        /// Gets or Sets ParentLoadId
        /// </summary>
        [DataMember(Name="parentLoadId", EmitDefaultValue=false)]
        public int? ParentLoadId { get; set; }

        /// <summary>
        /// Gets or Sets PalletTypeId
        /// </summary>
        [DataMember(Name="palletTypeId", EmitDefaultValue=false)]
        public int? PalletTypeId { get; set; }

        /// <summary>
        /// Gets or Sets CartonTypeId
        /// </summary>
        [DataMember(Name="cartonTypeId", EmitDefaultValue=false)]
        public int? CartonTypeId { get; set; }

        /// <summary>
        /// Gets or Sets OrderNoList
        /// </summary>
        [DataMember(Name="orderNoList", EmitDefaultValue=false)]
        public List<decimal?> OrderNoList { get; set; }

        /// <summary>
        /// Gets or Sets CustomFields
        /// </summary>
        [DataMember(Name="customFields", EmitDefaultValue=false)]
        public Dictionary<string, Object> CustomFields { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Load {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  CreateDate: ").Append(CreateDate).Append("\n");
            sb.Append("  ModifyDate: ").Append(ModifyDate).Append("\n");
            sb.Append("  LobId: ").Append(LobId).Append("\n");
            sb.Append("  Lpn: ").Append(Lpn).Append("\n");
            sb.Append("  BehaviorType: ").Append(BehaviorType).Append("\n");
            sb.Append("  WarehouseId: ").Append(WarehouseId).Append("\n");
            sb.Append("  LocationId: ").Append(LocationId).Append("\n");
            sb.Append("  ParentLoadId: ").Append(ParentLoadId).Append("\n");
            sb.Append("  PalletTypeId: ").Append(PalletTypeId).Append("\n");
            sb.Append("  CartonTypeId: ").Append(CartonTypeId).Append("\n");
            sb.Append("  OrderNoList: ").Append(OrderNoList).Append("\n");
            sb.Append("  CustomFields: ").Append(CustomFields).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Load);
        }

        /// <summary>
        /// Returns true if Load instances are equal
        /// </summary>
        /// <param name="input">Instance of Load to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Load input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.CreateDate == input.CreateDate ||
                    (this.CreateDate != null &&
                    this.CreateDate.Equals(input.CreateDate))
                ) && 
                (
                    this.ModifyDate == input.ModifyDate ||
                    (this.ModifyDate != null &&
                    this.ModifyDate.Equals(input.ModifyDate))
                ) && 
                (
                    this.LobId == input.LobId ||
                    (this.LobId != null &&
                    this.LobId.Equals(input.LobId))
                ) && 
                (
                    this.Lpn == input.Lpn ||
                    (this.Lpn != null &&
                    this.Lpn.Equals(input.Lpn))
                ) && 
                (
                    this.BehaviorType == input.BehaviorType ||
                    (this.BehaviorType != null &&
                    this.BehaviorType.Equals(input.BehaviorType))
                ) && 
                (
                    this.WarehouseId == input.WarehouseId ||
                    (this.WarehouseId != null &&
                    this.WarehouseId.Equals(input.WarehouseId))
                ) && 
                (
                    this.LocationId == input.LocationId ||
                    (this.LocationId != null &&
                    this.LocationId.Equals(input.LocationId))
                ) && 
                (
                    this.ParentLoadId == input.ParentLoadId ||
                    (this.ParentLoadId != null &&
                    this.ParentLoadId.Equals(input.ParentLoadId))
                ) && 
                (
                    this.PalletTypeId == input.PalletTypeId ||
                    (this.PalletTypeId != null &&
                    this.PalletTypeId.Equals(input.PalletTypeId))
                ) && 
                (
                    this.CartonTypeId == input.CartonTypeId ||
                    (this.CartonTypeId != null &&
                    this.CartonTypeId.Equals(input.CartonTypeId))
                ) && 
                (
                    this.OrderNoList == input.OrderNoList ||
                    this.OrderNoList != null &&
                    this.OrderNoList.SequenceEqual(input.OrderNoList)
                ) && 
                (
                    this.CustomFields == input.CustomFields ||
                    this.CustomFields != null &&
                    this.CustomFields.SequenceEqual(input.CustomFields)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.CreateDate != null)
                    hashCode = hashCode * 59 + this.CreateDate.GetHashCode();
                if (this.ModifyDate != null)
                    hashCode = hashCode * 59 + this.ModifyDate.GetHashCode();
                if (this.LobId != null)
                    hashCode = hashCode * 59 + this.LobId.GetHashCode();
                if (this.Lpn != null)
                    hashCode = hashCode * 59 + this.Lpn.GetHashCode();
                if (this.BehaviorType != null)
                    hashCode = hashCode * 59 + this.BehaviorType.GetHashCode();
                if (this.WarehouseId != null)
                    hashCode = hashCode * 59 + this.WarehouseId.GetHashCode();
                if (this.LocationId != null)
                    hashCode = hashCode * 59 + this.LocationId.GetHashCode();
                if (this.ParentLoadId != null)
                    hashCode = hashCode * 59 + this.ParentLoadId.GetHashCode();
                if (this.PalletTypeId != null)
                    hashCode = hashCode * 59 + this.PalletTypeId.GetHashCode();
                if (this.CartonTypeId != null)
                    hashCode = hashCode * 59 + this.CartonTypeId.GetHashCode();
                if (this.OrderNoList != null)
                    hashCode = hashCode * 59 + this.OrderNoList.GetHashCode();
                if (this.CustomFields != null)
                    hashCode = hashCode * 59 + this.CustomFields.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
