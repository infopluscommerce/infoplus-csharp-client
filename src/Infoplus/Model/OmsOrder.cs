/* 
 * Infoplus API
 *
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Infoplus.Client.SwaggerDateConverter;

namespace Infoplus.Model
{
    /// <summary>
    /// OmsOrder
    /// </summary>
    [DataContract]
    public partial class OmsOrder :  IEquatable<OmsOrder>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OmsOrder" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected OmsOrder() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="OmsOrder" /> class.
        /// </summary>
        /// <param name="LobId">LobId (required).</param>
        /// <param name="ExternalId">ExternalId.</param>
        /// <param name="OmsOrderNo">OmsOrderNo.</param>
        /// <param name="OrderStatus">OrderStatus.</param>
        /// <param name="NextOMSOrderId">NextOMSOrderId.</param>
        /// <param name="CustomerId">CustomerId.</param>
        /// <param name="Tax">Tax.</param>
        /// <param name="ShOverrideAmount">ShOverrideAmount.</param>
        /// <param name="OrderSourceId">OrderSourceId.</param>
        /// <param name="BatchNo">BatchNo.</param>
        /// <param name="IsGift">IsGift (default to false).</param>
        /// <param name="GiftMessageTo">GiftMessageTo.</param>
        /// <param name="GiftMessageFrom">GiftMessageFrom.</param>
        /// <param name="GiftMessage">GiftMessage.</param>
        /// <param name="EmailRecipient">EmailRecipient (default to false).</param>
        /// <param name="MailRecipient">MailRecipient (default to false).</param>
        /// <param name="KeyCode">KeyCode.</param>
        /// <param name="DeliverOnDate">DeliverOnDate (required).</param>
        /// <param name="ShipVia">ShipVia.</param>
        /// <param name="LineItems">LineItems.</param>
        /// <param name="CustomFields">CustomFields.</param>
        public OmsOrder(int? LobId = default(int?), string ExternalId = default(string), int? OmsOrderNo = default(int?), string OrderStatus = default(string), int? NextOMSOrderId = default(int?), int? CustomerId = default(int?), decimal? Tax = default(decimal?), decimal? ShOverrideAmount = default(decimal?), int? OrderSourceId = default(int?), string BatchNo = default(string), bool? IsGift = false, string GiftMessageTo = default(string), string GiftMessageFrom = default(string), string GiftMessage = default(string), bool? EmailRecipient = false, bool? MailRecipient = false, string KeyCode = default(string), DateTime? DeliverOnDate = default(DateTime?), string ShipVia = default(string), List<OrderLineItem> LineItems = default(List<OrderLineItem>), Dictionary<string, Object> CustomFields = default(Dictionary<string, Object>))
        {
            // to ensure "LobId" is required (not null)
            if (LobId == null)
            {
                throw new InvalidDataException("LobId is a required property for OmsOrder and cannot be null");
            }
            else
            {
                this.LobId = LobId;
            }
            // to ensure "DeliverOnDate" is required (not null)
            if (DeliverOnDate == null)
            {
                throw new InvalidDataException("DeliverOnDate is a required property for OmsOrder and cannot be null");
            }
            else
            {
                this.DeliverOnDate = DeliverOnDate;
            }
            this.ExternalId = ExternalId;
            this.OmsOrderNo = OmsOrderNo;
            this.OrderStatus = OrderStatus;
            this.NextOMSOrderId = NextOMSOrderId;
            this.CustomerId = CustomerId;
            this.Tax = Tax;
            this.ShOverrideAmount = ShOverrideAmount;
            this.OrderSourceId = OrderSourceId;
            this.BatchNo = BatchNo;
            // use default value if no "IsGift" provided
            if (IsGift == null)
            {
                this.IsGift = false;
            }
            else
            {
                this.IsGift = IsGift;
            }
            this.GiftMessageTo = GiftMessageTo;
            this.GiftMessageFrom = GiftMessageFrom;
            this.GiftMessage = GiftMessage;
            // use default value if no "EmailRecipient" provided
            if (EmailRecipient == null)
            {
                this.EmailRecipient = false;
            }
            else
            {
                this.EmailRecipient = EmailRecipient;
            }
            // use default value if no "MailRecipient" provided
            if (MailRecipient == null)
            {
                this.MailRecipient = false;
            }
            else
            {
                this.MailRecipient = MailRecipient;
            }
            this.KeyCode = KeyCode;
            this.ShipVia = ShipVia;
            this.LineItems = LineItems;
            this.CustomFields = CustomFields;
        }
        
        /// <summary>
        /// Gets or Sets LobId
        /// </summary>
        [DataMember(Name="lobId", EmitDefaultValue=false)]
        public int? LobId { get; set; }

        /// <summary>
        /// Gets or Sets ExternalId
        /// </summary>
        [DataMember(Name="externalId", EmitDefaultValue=false)]
        public string ExternalId { get; set; }

        /// <summary>
        /// Gets or Sets OmsOrderNo
        /// </summary>
        [DataMember(Name="omsOrderNo", EmitDefaultValue=false)]
        public int? OmsOrderNo { get; set; }

        /// <summary>
        /// Gets or Sets Total
        /// </summary>
        [DataMember(Name="total", EmitDefaultValue=false)]
        public decimal? Total { get; private set; }

        /// <summary>
        /// Gets or Sets OrderStatus
        /// </summary>
        [DataMember(Name="orderStatus", EmitDefaultValue=false)]
        public string OrderStatus { get; set; }

        /// <summary>
        /// Gets or Sets OrderEntryProgramId
        /// </summary>
        [DataMember(Name="orderEntryProgramId", EmitDefaultValue=false)]
        public int? OrderEntryProgramId { get; private set; }

        /// <summary>
        /// Gets or Sets LegacyUserId
        /// </summary>
        [DataMember(Name="legacyUserId", EmitDefaultValue=false)]
        public int? LegacyUserId { get; private set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; private set; }

        /// <summary>
        /// Gets or Sets CreateDate
        /// </summary>
        [DataMember(Name="createDate", EmitDefaultValue=false)]
        public DateTime? CreateDate { get; private set; }

        /// <summary>
        /// Gets or Sets ModifyDate
        /// </summary>
        [DataMember(Name="modifyDate", EmitDefaultValue=false)]
        public DateTime? ModifyDate { get; private set; }

        /// <summary>
        /// Gets or Sets NextOMSOrderId
        /// </summary>
        [DataMember(Name="nextOMSOrderId", EmitDefaultValue=false)]
        public int? NextOMSOrderId { get; set; }

        /// <summary>
        /// Gets or Sets CustomerId
        /// </summary>
        [DataMember(Name="customerId", EmitDefaultValue=false)]
        public int? CustomerId { get; set; }

        /// <summary>
        /// Gets or Sets Tax
        /// </summary>
        [DataMember(Name="tax", EmitDefaultValue=false)]
        public decimal? Tax { get; set; }

        /// <summary>
        /// Gets or Sets ShippingHandling
        /// </summary>
        [DataMember(Name="shippingHandling", EmitDefaultValue=false)]
        public decimal? ShippingHandling { get; private set; }

        /// <summary>
        /// Gets or Sets ShOverrideAmount
        /// </summary>
        [DataMember(Name="shOverrideAmount", EmitDefaultValue=false)]
        public decimal? ShOverrideAmount { get; set; }

        /// <summary>
        /// Gets or Sets IntegrationPartnerId
        /// </summary>
        [DataMember(Name="integrationPartnerId", EmitDefaultValue=false)]
        public int? IntegrationPartnerId { get; private set; }

        /// <summary>
        /// Gets or Sets OrderSourceId
        /// </summary>
        [DataMember(Name="orderSourceId", EmitDefaultValue=false)]
        public int? OrderSourceId { get; set; }

        /// <summary>
        /// Gets or Sets BatchNo
        /// </summary>
        [DataMember(Name="batchNo", EmitDefaultValue=false)]
        public string BatchNo { get; set; }

        /// <summary>
        /// Gets or Sets IsGift
        /// </summary>
        [DataMember(Name="isGift", EmitDefaultValue=false)]
        public bool? IsGift { get; set; }

        /// <summary>
        /// Gets or Sets GiftMessageTo
        /// </summary>
        [DataMember(Name="giftMessageTo", EmitDefaultValue=false)]
        public string GiftMessageTo { get; set; }

        /// <summary>
        /// Gets or Sets GiftMessageFrom
        /// </summary>
        [DataMember(Name="giftMessageFrom", EmitDefaultValue=false)]
        public string GiftMessageFrom { get; set; }

        /// <summary>
        /// Gets or Sets GiftMessage
        /// </summary>
        [DataMember(Name="giftMessage", EmitDefaultValue=false)]
        public string GiftMessage { get; set; }

        /// <summary>
        /// Gets or Sets EmailRecipient
        /// </summary>
        [DataMember(Name="emailRecipient", EmitDefaultValue=false)]
        public bool? EmailRecipient { get; set; }

        /// <summary>
        /// Gets or Sets MailRecipient
        /// </summary>
        [DataMember(Name="mailRecipient", EmitDefaultValue=false)]
        public bool? MailRecipient { get; set; }

        /// <summary>
        /// Gets or Sets KeyCode
        /// </summary>
        [DataMember(Name="keyCode", EmitDefaultValue=false)]
        public string KeyCode { get; set; }

        /// <summary>
        /// Gets or Sets KeyCodeDescription
        /// </summary>
        [DataMember(Name="keyCodeDescription", EmitDefaultValue=false)]
        public string KeyCodeDescription { get; private set; }

        /// <summary>
        /// Gets or Sets DeliverOnDate
        /// </summary>
        [DataMember(Name="deliverOnDate", EmitDefaultValue=false)]
        public DateTime? DeliverOnDate { get; set; }

        /// <summary>
        /// Gets or Sets DistCharges
        /// </summary>
        [DataMember(Name="distCharges", EmitDefaultValue=false)]
        public decimal? DistCharges { get; private set; }

        /// <summary>
        /// Gets or Sets SubTotal
        /// </summary>
        [DataMember(Name="subTotal", EmitDefaultValue=false)]
        public decimal? SubTotal { get; private set; }

        /// <summary>
        /// Gets or Sets ShipVia
        /// </summary>
        [DataMember(Name="shipVia", EmitDefaultValue=false)]
        public string ShipVia { get; set; }

        /// <summary>
        /// Gets or Sets LineItems
        /// </summary>
        [DataMember(Name="lineItems", EmitDefaultValue=false)]
        public List<OrderLineItem> LineItems { get; set; }

        /// <summary>
        /// Gets or Sets ShipToFirstName
        /// </summary>
        [DataMember(Name="shipToFirstName", EmitDefaultValue=false)]
        public string ShipToFirstName { get; private set; }

        /// <summary>
        /// Gets or Sets ShipToLastName
        /// </summary>
        [DataMember(Name="shipToLastName", EmitDefaultValue=false)]
        public string ShipToLastName { get; private set; }

        /// <summary>
        /// Gets or Sets ShipToCompany
        /// </summary>
        [DataMember(Name="shipToCompany", EmitDefaultValue=false)]
        public string ShipToCompany { get; private set; }

        /// <summary>
        /// Gets or Sets ShipToStreet1
        /// </summary>
        [DataMember(Name="shipToStreet1", EmitDefaultValue=false)]
        public string ShipToStreet1 { get; private set; }

        /// <summary>
        /// Gets or Sets ShipToStreet2
        /// </summary>
        [DataMember(Name="shipToStreet2", EmitDefaultValue=false)]
        public string ShipToStreet2 { get; private set; }

        /// <summary>
        /// Gets or Sets ShipToStreet3
        /// </summary>
        [DataMember(Name="shipToStreet3", EmitDefaultValue=false)]
        public string ShipToStreet3 { get; private set; }

        /// <summary>
        /// Gets or Sets ShipToCity
        /// </summary>
        [DataMember(Name="shipToCity", EmitDefaultValue=false)]
        public string ShipToCity { get; private set; }

        /// <summary>
        /// Gets or Sets ShipToState
        /// </summary>
        [DataMember(Name="shipToState", EmitDefaultValue=false)]
        public string ShipToState { get; private set; }

        /// <summary>
        /// Gets or Sets ShipToZip
        /// </summary>
        [DataMember(Name="shipToZip", EmitDefaultValue=false)]
        public string ShipToZip { get; private set; }

        /// <summary>
        /// Gets or Sets ShipToEmail
        /// </summary>
        [DataMember(Name="shipToEmail", EmitDefaultValue=false)]
        public string ShipToEmail { get; private set; }

        /// <summary>
        /// Gets or Sets ShipToPhone
        /// </summary>
        [DataMember(Name="shipToPhone", EmitDefaultValue=false)]
        public string ShipToPhone { get; private set; }

        /// <summary>
        /// Gets or Sets BillToFirstName
        /// </summary>
        [DataMember(Name="billToFirstName", EmitDefaultValue=false)]
        public string BillToFirstName { get; private set; }

        /// <summary>
        /// Gets or Sets BillToLastName
        /// </summary>
        [DataMember(Name="billToLastName", EmitDefaultValue=false)]
        public string BillToLastName { get; private set; }

        /// <summary>
        /// Gets or Sets BillToCompany
        /// </summary>
        [DataMember(Name="billToCompany", EmitDefaultValue=false)]
        public string BillToCompany { get; private set; }

        /// <summary>
        /// Gets or Sets BillToStreet1
        /// </summary>
        [DataMember(Name="billToStreet1", EmitDefaultValue=false)]
        public string BillToStreet1 { get; private set; }

        /// <summary>
        /// Gets or Sets BillToStreet2
        /// </summary>
        [DataMember(Name="billToStreet2", EmitDefaultValue=false)]
        public string BillToStreet2 { get; private set; }

        /// <summary>
        /// Gets or Sets BillToStreet3
        /// </summary>
        [DataMember(Name="billToStreet3", EmitDefaultValue=false)]
        public string BillToStreet3 { get; private set; }

        /// <summary>
        /// Gets or Sets BillToCity
        /// </summary>
        [DataMember(Name="billToCity", EmitDefaultValue=false)]
        public string BillToCity { get; private set; }

        /// <summary>
        /// Gets or Sets BillToState
        /// </summary>
        [DataMember(Name="billToState", EmitDefaultValue=false)]
        public string BillToState { get; private set; }

        /// <summary>
        /// Gets or Sets BillToZip
        /// </summary>
        [DataMember(Name="billToZip", EmitDefaultValue=false)]
        public string BillToZip { get; private set; }

        /// <summary>
        /// Gets or Sets BillToEmail
        /// </summary>
        [DataMember(Name="billToEmail", EmitDefaultValue=false)]
        public string BillToEmail { get; private set; }

        /// <summary>
        /// Gets or Sets BillToPhone
        /// </summary>
        [DataMember(Name="billToPhone", EmitDefaultValue=false)]
        public string BillToPhone { get; private set; }

        /// <summary>
        /// Gets or Sets CustomFields
        /// </summary>
        [DataMember(Name="customFields", EmitDefaultValue=false)]
        public Dictionary<string, Object> CustomFields { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OmsOrder {\n");
            sb.Append("  LobId: ").Append(LobId).Append("\n");
            sb.Append("  ExternalId: ").Append(ExternalId).Append("\n");
            sb.Append("  OmsOrderNo: ").Append(OmsOrderNo).Append("\n");
            sb.Append("  Total: ").Append(Total).Append("\n");
            sb.Append("  OrderStatus: ").Append(OrderStatus).Append("\n");
            sb.Append("  OrderEntryProgramId: ").Append(OrderEntryProgramId).Append("\n");
            sb.Append("  LegacyUserId: ").Append(LegacyUserId).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  CreateDate: ").Append(CreateDate).Append("\n");
            sb.Append("  ModifyDate: ").Append(ModifyDate).Append("\n");
            sb.Append("  NextOMSOrderId: ").Append(NextOMSOrderId).Append("\n");
            sb.Append("  CustomerId: ").Append(CustomerId).Append("\n");
            sb.Append("  Tax: ").Append(Tax).Append("\n");
            sb.Append("  ShippingHandling: ").Append(ShippingHandling).Append("\n");
            sb.Append("  ShOverrideAmount: ").Append(ShOverrideAmount).Append("\n");
            sb.Append("  IntegrationPartnerId: ").Append(IntegrationPartnerId).Append("\n");
            sb.Append("  OrderSourceId: ").Append(OrderSourceId).Append("\n");
            sb.Append("  BatchNo: ").Append(BatchNo).Append("\n");
            sb.Append("  IsGift: ").Append(IsGift).Append("\n");
            sb.Append("  GiftMessageTo: ").Append(GiftMessageTo).Append("\n");
            sb.Append("  GiftMessageFrom: ").Append(GiftMessageFrom).Append("\n");
            sb.Append("  GiftMessage: ").Append(GiftMessage).Append("\n");
            sb.Append("  EmailRecipient: ").Append(EmailRecipient).Append("\n");
            sb.Append("  MailRecipient: ").Append(MailRecipient).Append("\n");
            sb.Append("  KeyCode: ").Append(KeyCode).Append("\n");
            sb.Append("  KeyCodeDescription: ").Append(KeyCodeDescription).Append("\n");
            sb.Append("  DeliverOnDate: ").Append(DeliverOnDate).Append("\n");
            sb.Append("  DistCharges: ").Append(DistCharges).Append("\n");
            sb.Append("  SubTotal: ").Append(SubTotal).Append("\n");
            sb.Append("  ShipVia: ").Append(ShipVia).Append("\n");
            sb.Append("  LineItems: ").Append(LineItems).Append("\n");
            sb.Append("  ShipToFirstName: ").Append(ShipToFirstName).Append("\n");
            sb.Append("  ShipToLastName: ").Append(ShipToLastName).Append("\n");
            sb.Append("  ShipToCompany: ").Append(ShipToCompany).Append("\n");
            sb.Append("  ShipToStreet1: ").Append(ShipToStreet1).Append("\n");
            sb.Append("  ShipToStreet2: ").Append(ShipToStreet2).Append("\n");
            sb.Append("  ShipToStreet3: ").Append(ShipToStreet3).Append("\n");
            sb.Append("  ShipToCity: ").Append(ShipToCity).Append("\n");
            sb.Append("  ShipToState: ").Append(ShipToState).Append("\n");
            sb.Append("  ShipToZip: ").Append(ShipToZip).Append("\n");
            sb.Append("  ShipToEmail: ").Append(ShipToEmail).Append("\n");
            sb.Append("  ShipToPhone: ").Append(ShipToPhone).Append("\n");
            sb.Append("  BillToFirstName: ").Append(BillToFirstName).Append("\n");
            sb.Append("  BillToLastName: ").Append(BillToLastName).Append("\n");
            sb.Append("  BillToCompany: ").Append(BillToCompany).Append("\n");
            sb.Append("  BillToStreet1: ").Append(BillToStreet1).Append("\n");
            sb.Append("  BillToStreet2: ").Append(BillToStreet2).Append("\n");
            sb.Append("  BillToStreet3: ").Append(BillToStreet3).Append("\n");
            sb.Append("  BillToCity: ").Append(BillToCity).Append("\n");
            sb.Append("  BillToState: ").Append(BillToState).Append("\n");
            sb.Append("  BillToZip: ").Append(BillToZip).Append("\n");
            sb.Append("  BillToEmail: ").Append(BillToEmail).Append("\n");
            sb.Append("  BillToPhone: ").Append(BillToPhone).Append("\n");
            sb.Append("  CustomFields: ").Append(CustomFields).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OmsOrder);
        }

        /// <summary>
        /// Returns true if OmsOrder instances are equal
        /// </summary>
        /// <param name="input">Instance of OmsOrder to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OmsOrder input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.LobId == input.LobId ||
                    (this.LobId != null &&
                    this.LobId.Equals(input.LobId))
                ) && 
                (
                    this.ExternalId == input.ExternalId ||
                    (this.ExternalId != null &&
                    this.ExternalId.Equals(input.ExternalId))
                ) && 
                (
                    this.OmsOrderNo == input.OmsOrderNo ||
                    (this.OmsOrderNo != null &&
                    this.OmsOrderNo.Equals(input.OmsOrderNo))
                ) && 
                (
                    this.Total == input.Total ||
                    (this.Total != null &&
                    this.Total.Equals(input.Total))
                ) && 
                (
                    this.OrderStatus == input.OrderStatus ||
                    (this.OrderStatus != null &&
                    this.OrderStatus.Equals(input.OrderStatus))
                ) && 
                (
                    this.OrderEntryProgramId == input.OrderEntryProgramId ||
                    (this.OrderEntryProgramId != null &&
                    this.OrderEntryProgramId.Equals(input.OrderEntryProgramId))
                ) && 
                (
                    this.LegacyUserId == input.LegacyUserId ||
                    (this.LegacyUserId != null &&
                    this.LegacyUserId.Equals(input.LegacyUserId))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.CreateDate == input.CreateDate ||
                    (this.CreateDate != null &&
                    this.CreateDate.Equals(input.CreateDate))
                ) && 
                (
                    this.ModifyDate == input.ModifyDate ||
                    (this.ModifyDate != null &&
                    this.ModifyDate.Equals(input.ModifyDate))
                ) && 
                (
                    this.NextOMSOrderId == input.NextOMSOrderId ||
                    (this.NextOMSOrderId != null &&
                    this.NextOMSOrderId.Equals(input.NextOMSOrderId))
                ) && 
                (
                    this.CustomerId == input.CustomerId ||
                    (this.CustomerId != null &&
                    this.CustomerId.Equals(input.CustomerId))
                ) && 
                (
                    this.Tax == input.Tax ||
                    (this.Tax != null &&
                    this.Tax.Equals(input.Tax))
                ) && 
                (
                    this.ShippingHandling == input.ShippingHandling ||
                    (this.ShippingHandling != null &&
                    this.ShippingHandling.Equals(input.ShippingHandling))
                ) && 
                (
                    this.ShOverrideAmount == input.ShOverrideAmount ||
                    (this.ShOverrideAmount != null &&
                    this.ShOverrideAmount.Equals(input.ShOverrideAmount))
                ) && 
                (
                    this.IntegrationPartnerId == input.IntegrationPartnerId ||
                    (this.IntegrationPartnerId != null &&
                    this.IntegrationPartnerId.Equals(input.IntegrationPartnerId))
                ) && 
                (
                    this.OrderSourceId == input.OrderSourceId ||
                    (this.OrderSourceId != null &&
                    this.OrderSourceId.Equals(input.OrderSourceId))
                ) && 
                (
                    this.BatchNo == input.BatchNo ||
                    (this.BatchNo != null &&
                    this.BatchNo.Equals(input.BatchNo))
                ) && 
                (
                    this.IsGift == input.IsGift ||
                    (this.IsGift != null &&
                    this.IsGift.Equals(input.IsGift))
                ) && 
                (
                    this.GiftMessageTo == input.GiftMessageTo ||
                    (this.GiftMessageTo != null &&
                    this.GiftMessageTo.Equals(input.GiftMessageTo))
                ) && 
                (
                    this.GiftMessageFrom == input.GiftMessageFrom ||
                    (this.GiftMessageFrom != null &&
                    this.GiftMessageFrom.Equals(input.GiftMessageFrom))
                ) && 
                (
                    this.GiftMessage == input.GiftMessage ||
                    (this.GiftMessage != null &&
                    this.GiftMessage.Equals(input.GiftMessage))
                ) && 
                (
                    this.EmailRecipient == input.EmailRecipient ||
                    (this.EmailRecipient != null &&
                    this.EmailRecipient.Equals(input.EmailRecipient))
                ) && 
                (
                    this.MailRecipient == input.MailRecipient ||
                    (this.MailRecipient != null &&
                    this.MailRecipient.Equals(input.MailRecipient))
                ) && 
                (
                    this.KeyCode == input.KeyCode ||
                    (this.KeyCode != null &&
                    this.KeyCode.Equals(input.KeyCode))
                ) && 
                (
                    this.KeyCodeDescription == input.KeyCodeDescription ||
                    (this.KeyCodeDescription != null &&
                    this.KeyCodeDescription.Equals(input.KeyCodeDescription))
                ) && 
                (
                    this.DeliverOnDate == input.DeliverOnDate ||
                    (this.DeliverOnDate != null &&
                    this.DeliverOnDate.Equals(input.DeliverOnDate))
                ) && 
                (
                    this.DistCharges == input.DistCharges ||
                    (this.DistCharges != null &&
                    this.DistCharges.Equals(input.DistCharges))
                ) && 
                (
                    this.SubTotal == input.SubTotal ||
                    (this.SubTotal != null &&
                    this.SubTotal.Equals(input.SubTotal))
                ) && 
                (
                    this.ShipVia == input.ShipVia ||
                    (this.ShipVia != null &&
                    this.ShipVia.Equals(input.ShipVia))
                ) && 
                (
                    this.LineItems == input.LineItems ||
                    this.LineItems != null &&
                    this.LineItems.SequenceEqual(input.LineItems)
                ) && 
                (
                    this.ShipToFirstName == input.ShipToFirstName ||
                    (this.ShipToFirstName != null &&
                    this.ShipToFirstName.Equals(input.ShipToFirstName))
                ) && 
                (
                    this.ShipToLastName == input.ShipToLastName ||
                    (this.ShipToLastName != null &&
                    this.ShipToLastName.Equals(input.ShipToLastName))
                ) && 
                (
                    this.ShipToCompany == input.ShipToCompany ||
                    (this.ShipToCompany != null &&
                    this.ShipToCompany.Equals(input.ShipToCompany))
                ) && 
                (
                    this.ShipToStreet1 == input.ShipToStreet1 ||
                    (this.ShipToStreet1 != null &&
                    this.ShipToStreet1.Equals(input.ShipToStreet1))
                ) && 
                (
                    this.ShipToStreet2 == input.ShipToStreet2 ||
                    (this.ShipToStreet2 != null &&
                    this.ShipToStreet2.Equals(input.ShipToStreet2))
                ) && 
                (
                    this.ShipToStreet3 == input.ShipToStreet3 ||
                    (this.ShipToStreet3 != null &&
                    this.ShipToStreet3.Equals(input.ShipToStreet3))
                ) && 
                (
                    this.ShipToCity == input.ShipToCity ||
                    (this.ShipToCity != null &&
                    this.ShipToCity.Equals(input.ShipToCity))
                ) && 
                (
                    this.ShipToState == input.ShipToState ||
                    (this.ShipToState != null &&
                    this.ShipToState.Equals(input.ShipToState))
                ) && 
                (
                    this.ShipToZip == input.ShipToZip ||
                    (this.ShipToZip != null &&
                    this.ShipToZip.Equals(input.ShipToZip))
                ) && 
                (
                    this.ShipToEmail == input.ShipToEmail ||
                    (this.ShipToEmail != null &&
                    this.ShipToEmail.Equals(input.ShipToEmail))
                ) && 
                (
                    this.ShipToPhone == input.ShipToPhone ||
                    (this.ShipToPhone != null &&
                    this.ShipToPhone.Equals(input.ShipToPhone))
                ) && 
                (
                    this.BillToFirstName == input.BillToFirstName ||
                    (this.BillToFirstName != null &&
                    this.BillToFirstName.Equals(input.BillToFirstName))
                ) && 
                (
                    this.BillToLastName == input.BillToLastName ||
                    (this.BillToLastName != null &&
                    this.BillToLastName.Equals(input.BillToLastName))
                ) && 
                (
                    this.BillToCompany == input.BillToCompany ||
                    (this.BillToCompany != null &&
                    this.BillToCompany.Equals(input.BillToCompany))
                ) && 
                (
                    this.BillToStreet1 == input.BillToStreet1 ||
                    (this.BillToStreet1 != null &&
                    this.BillToStreet1.Equals(input.BillToStreet1))
                ) && 
                (
                    this.BillToStreet2 == input.BillToStreet2 ||
                    (this.BillToStreet2 != null &&
                    this.BillToStreet2.Equals(input.BillToStreet2))
                ) && 
                (
                    this.BillToStreet3 == input.BillToStreet3 ||
                    (this.BillToStreet3 != null &&
                    this.BillToStreet3.Equals(input.BillToStreet3))
                ) && 
                (
                    this.BillToCity == input.BillToCity ||
                    (this.BillToCity != null &&
                    this.BillToCity.Equals(input.BillToCity))
                ) && 
                (
                    this.BillToState == input.BillToState ||
                    (this.BillToState != null &&
                    this.BillToState.Equals(input.BillToState))
                ) && 
                (
                    this.BillToZip == input.BillToZip ||
                    (this.BillToZip != null &&
                    this.BillToZip.Equals(input.BillToZip))
                ) && 
                (
                    this.BillToEmail == input.BillToEmail ||
                    (this.BillToEmail != null &&
                    this.BillToEmail.Equals(input.BillToEmail))
                ) && 
                (
                    this.BillToPhone == input.BillToPhone ||
                    (this.BillToPhone != null &&
                    this.BillToPhone.Equals(input.BillToPhone))
                ) && 
                (
                    this.CustomFields == input.CustomFields ||
                    this.CustomFields != null &&
                    this.CustomFields.SequenceEqual(input.CustomFields)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.LobId != null)
                    hashCode = hashCode * 59 + this.LobId.GetHashCode();
                if (this.ExternalId != null)
                    hashCode = hashCode * 59 + this.ExternalId.GetHashCode();
                if (this.OmsOrderNo != null)
                    hashCode = hashCode * 59 + this.OmsOrderNo.GetHashCode();
                if (this.Total != null)
                    hashCode = hashCode * 59 + this.Total.GetHashCode();
                if (this.OrderStatus != null)
                    hashCode = hashCode * 59 + this.OrderStatus.GetHashCode();
                if (this.OrderEntryProgramId != null)
                    hashCode = hashCode * 59 + this.OrderEntryProgramId.GetHashCode();
                if (this.LegacyUserId != null)
                    hashCode = hashCode * 59 + this.LegacyUserId.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.CreateDate != null)
                    hashCode = hashCode * 59 + this.CreateDate.GetHashCode();
                if (this.ModifyDate != null)
                    hashCode = hashCode * 59 + this.ModifyDate.GetHashCode();
                if (this.NextOMSOrderId != null)
                    hashCode = hashCode * 59 + this.NextOMSOrderId.GetHashCode();
                if (this.CustomerId != null)
                    hashCode = hashCode * 59 + this.CustomerId.GetHashCode();
                if (this.Tax != null)
                    hashCode = hashCode * 59 + this.Tax.GetHashCode();
                if (this.ShippingHandling != null)
                    hashCode = hashCode * 59 + this.ShippingHandling.GetHashCode();
                if (this.ShOverrideAmount != null)
                    hashCode = hashCode * 59 + this.ShOverrideAmount.GetHashCode();
                if (this.IntegrationPartnerId != null)
                    hashCode = hashCode * 59 + this.IntegrationPartnerId.GetHashCode();
                if (this.OrderSourceId != null)
                    hashCode = hashCode * 59 + this.OrderSourceId.GetHashCode();
                if (this.BatchNo != null)
                    hashCode = hashCode * 59 + this.BatchNo.GetHashCode();
                if (this.IsGift != null)
                    hashCode = hashCode * 59 + this.IsGift.GetHashCode();
                if (this.GiftMessageTo != null)
                    hashCode = hashCode * 59 + this.GiftMessageTo.GetHashCode();
                if (this.GiftMessageFrom != null)
                    hashCode = hashCode * 59 + this.GiftMessageFrom.GetHashCode();
                if (this.GiftMessage != null)
                    hashCode = hashCode * 59 + this.GiftMessage.GetHashCode();
                if (this.EmailRecipient != null)
                    hashCode = hashCode * 59 + this.EmailRecipient.GetHashCode();
                if (this.MailRecipient != null)
                    hashCode = hashCode * 59 + this.MailRecipient.GetHashCode();
                if (this.KeyCode != null)
                    hashCode = hashCode * 59 + this.KeyCode.GetHashCode();
                if (this.KeyCodeDescription != null)
                    hashCode = hashCode * 59 + this.KeyCodeDescription.GetHashCode();
                if (this.DeliverOnDate != null)
                    hashCode = hashCode * 59 + this.DeliverOnDate.GetHashCode();
                if (this.DistCharges != null)
                    hashCode = hashCode * 59 + this.DistCharges.GetHashCode();
                if (this.SubTotal != null)
                    hashCode = hashCode * 59 + this.SubTotal.GetHashCode();
                if (this.ShipVia != null)
                    hashCode = hashCode * 59 + this.ShipVia.GetHashCode();
                if (this.LineItems != null)
                    hashCode = hashCode * 59 + this.LineItems.GetHashCode();
                if (this.ShipToFirstName != null)
                    hashCode = hashCode * 59 + this.ShipToFirstName.GetHashCode();
                if (this.ShipToLastName != null)
                    hashCode = hashCode * 59 + this.ShipToLastName.GetHashCode();
                if (this.ShipToCompany != null)
                    hashCode = hashCode * 59 + this.ShipToCompany.GetHashCode();
                if (this.ShipToStreet1 != null)
                    hashCode = hashCode * 59 + this.ShipToStreet1.GetHashCode();
                if (this.ShipToStreet2 != null)
                    hashCode = hashCode * 59 + this.ShipToStreet2.GetHashCode();
                if (this.ShipToStreet3 != null)
                    hashCode = hashCode * 59 + this.ShipToStreet3.GetHashCode();
                if (this.ShipToCity != null)
                    hashCode = hashCode * 59 + this.ShipToCity.GetHashCode();
                if (this.ShipToState != null)
                    hashCode = hashCode * 59 + this.ShipToState.GetHashCode();
                if (this.ShipToZip != null)
                    hashCode = hashCode * 59 + this.ShipToZip.GetHashCode();
                if (this.ShipToEmail != null)
                    hashCode = hashCode * 59 + this.ShipToEmail.GetHashCode();
                if (this.ShipToPhone != null)
                    hashCode = hashCode * 59 + this.ShipToPhone.GetHashCode();
                if (this.BillToFirstName != null)
                    hashCode = hashCode * 59 + this.BillToFirstName.GetHashCode();
                if (this.BillToLastName != null)
                    hashCode = hashCode * 59 + this.BillToLastName.GetHashCode();
                if (this.BillToCompany != null)
                    hashCode = hashCode * 59 + this.BillToCompany.GetHashCode();
                if (this.BillToStreet1 != null)
                    hashCode = hashCode * 59 + this.BillToStreet1.GetHashCode();
                if (this.BillToStreet2 != null)
                    hashCode = hashCode * 59 + this.BillToStreet2.GetHashCode();
                if (this.BillToStreet3 != null)
                    hashCode = hashCode * 59 + this.BillToStreet3.GetHashCode();
                if (this.BillToCity != null)
                    hashCode = hashCode * 59 + this.BillToCity.GetHashCode();
                if (this.BillToState != null)
                    hashCode = hashCode * 59 + this.BillToState.GetHashCode();
                if (this.BillToZip != null)
                    hashCode = hashCode * 59 + this.BillToZip.GetHashCode();
                if (this.BillToEmail != null)
                    hashCode = hashCode * 59 + this.BillToEmail.GetHashCode();
                if (this.BillToPhone != null)
                    hashCode = hashCode * 59 + this.BillToPhone.GetHashCode();
                if (this.CustomFields != null)
                    hashCode = hashCode * 59 + this.CustomFields.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
