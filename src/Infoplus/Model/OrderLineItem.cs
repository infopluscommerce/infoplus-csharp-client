/* 
 * Infoplus API
 *
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Infoplus.Client.SwaggerDateConverter;

namespace Infoplus.Model
{
    /// <summary>
    /// OrderLineItem
    /// </summary>
    [DataContract]
    public partial class OrderLineItem :  IEquatable<OrderLineItem>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OrderLineItem" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected OrderLineItem() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="OrderLineItem" /> class.
        /// </summary>
        /// <param name="Quantity">Quantity (required).</param>
        /// <param name="Discount">Discount.</param>
        /// <param name="DiscountType">DiscountType.</param>
        /// <param name="DiscountPercent">DiscountPercent.</param>
        /// <param name="CustomPrice">CustomPrice.</param>
        /// <param name="AlternateSKU">AlternateSKU.</param>
        /// <param name="GiftCardAmount">GiftCardAmount (required).</param>
        /// <param name="GiftCardTo">GiftCardTo (required).</param>
        /// <param name="GiftCardEmail">GiftCardEmail (required).</param>
        /// <param name="GiftCardMessage">GiftCardMessage (required).</param>
        /// <param name="Account">Account (required).</param>
        /// <param name="CustomFields">CustomFields.</param>
        public OrderLineItem(int? Quantity = default(int?), decimal? Discount = default(decimal?), string DiscountType = default(string), decimal? DiscountPercent = default(decimal?), decimal? CustomPrice = default(decimal?), string AlternateSKU = default(string), decimal? GiftCardAmount = default(decimal?), string GiftCardTo = default(string), string GiftCardEmail = default(string), string GiftCardMessage = default(string), string Account = default(string), Dictionary<string, Object> CustomFields = default(Dictionary<string, Object>))
        {
            // to ensure "Quantity" is required (not null)
            if (Quantity == null)
            {
                throw new InvalidDataException("Quantity is a required property for OrderLineItem and cannot be null");
            }
            else
            {
                this.Quantity = Quantity;
            }
            // to ensure "GiftCardAmount" is required (not null)
            if (GiftCardAmount == null)
            {
                throw new InvalidDataException("GiftCardAmount is a required property for OrderLineItem and cannot be null");
            }
            else
            {
                this.GiftCardAmount = GiftCardAmount;
            }
            // to ensure "GiftCardTo" is required (not null)
            if (GiftCardTo == null)
            {
                throw new InvalidDataException("GiftCardTo is a required property for OrderLineItem and cannot be null");
            }
            else
            {
                this.GiftCardTo = GiftCardTo;
            }
            // to ensure "GiftCardEmail" is required (not null)
            if (GiftCardEmail == null)
            {
                throw new InvalidDataException("GiftCardEmail is a required property for OrderLineItem and cannot be null");
            }
            else
            {
                this.GiftCardEmail = GiftCardEmail;
            }
            // to ensure "GiftCardMessage" is required (not null)
            if (GiftCardMessage == null)
            {
                throw new InvalidDataException("GiftCardMessage is a required property for OrderLineItem and cannot be null");
            }
            else
            {
                this.GiftCardMessage = GiftCardMessage;
            }
            // to ensure "Account" is required (not null)
            if (Account == null)
            {
                throw new InvalidDataException("Account is a required property for OrderLineItem and cannot be null");
            }
            else
            {
                this.Account = Account;
            }
            this.Discount = Discount;
            this.DiscountType = DiscountType;
            this.DiscountPercent = DiscountPercent;
            this.CustomPrice = CustomPrice;
            this.AlternateSKU = AlternateSKU;
            this.CustomFields = CustomFields;
        }
        
        /// <summary>
        /// Gets or Sets Quantity
        /// </summary>
        [DataMember(Name="quantity", EmitDefaultValue=false)]
        public int? Quantity { get; set; }

        /// <summary>
        /// Gets or Sets Price
        /// </summary>
        [DataMember(Name="price", EmitDefaultValue=false)]
        public decimal? Price { get; private set; }

        /// <summary>
        /// Gets or Sets Discount
        /// </summary>
        [DataMember(Name="discount", EmitDefaultValue=false)]
        public decimal? Discount { get; set; }

        /// <summary>
        /// Gets or Sets SubTotal
        /// </summary>
        [DataMember(Name="subTotal", EmitDefaultValue=false)]
        public decimal? SubTotal { get; private set; }

        /// <summary>
        /// Gets or Sets OriginalPrice
        /// </summary>
        [DataMember(Name="originalPrice", EmitDefaultValue=false)]
        public decimal? OriginalPrice { get; private set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; private set; }

        /// <summary>
        /// Gets or Sets Sku
        /// </summary>
        [DataMember(Name="sku", EmitDefaultValue=false)]
        public string Sku { get; private set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; private set; }

        /// <summary>
        /// Gets or Sets MajorGroup
        /// </summary>
        [DataMember(Name="majorGroup", EmitDefaultValue=false)]
        public string MajorGroup { get; private set; }

        /// <summary>
        /// Gets or Sets SubGroup
        /// </summary>
        [DataMember(Name="subGroup", EmitDefaultValue=false)]
        public string SubGroup { get; private set; }

        /// <summary>
        /// Gets or Sets Available
        /// </summary>
        [DataMember(Name="available", EmitDefaultValue=false)]
        public int? Available { get; private set; }

        /// <summary>
        /// Gets or Sets OnHand
        /// </summary>
        [DataMember(Name="onHand", EmitDefaultValue=false)]
        public int? OnHand { get; private set; }

        /// <summary>
        /// Gets or Sets OnOrder
        /// </summary>
        [DataMember(Name="onOrder", EmitDefaultValue=false)]
        public int? OnOrder { get; private set; }

        /// <summary>
        /// Gets or Sets DiscountType
        /// </summary>
        [DataMember(Name="discountType", EmitDefaultValue=false)]
        public string DiscountType { get; set; }

        /// <summary>
        /// Gets or Sets DiscountPercent
        /// </summary>
        [DataMember(Name="discountPercent", EmitDefaultValue=false)]
        public decimal? DiscountPercent { get; set; }

        /// <summary>
        /// Gets or Sets CustomPrice
        /// </summary>
        [DataMember(Name="customPrice", EmitDefaultValue=false)]
        public decimal? CustomPrice { get; set; }

        /// <summary>
        /// Gets or Sets DiscountedPrice
        /// </summary>
        [DataMember(Name="discountedPrice", EmitDefaultValue=false)]
        public decimal? DiscountedPrice { get; private set; }

        /// <summary>
        /// Gets or Sets AlternateSKU
        /// </summary>
        [DataMember(Name="alternateSKU", EmitDefaultValue=false)]
        public string AlternateSKU { get; set; }

        /// <summary>
        /// Gets or Sets IsGiftCard
        /// </summary>
        [DataMember(Name="isGiftCard", EmitDefaultValue=false)]
        public bool? IsGiftCard { get; private set; }

        /// <summary>
        /// Gets or Sets GiftCardAmount
        /// </summary>
        [DataMember(Name="giftCardAmount", EmitDefaultValue=false)]
        public decimal? GiftCardAmount { get; set; }

        /// <summary>
        /// Gets or Sets GiftCardTo
        /// </summary>
        [DataMember(Name="giftCardTo", EmitDefaultValue=false)]
        public string GiftCardTo { get; set; }

        /// <summary>
        /// Gets or Sets GiftCardEmail
        /// </summary>
        [DataMember(Name="giftCardEmail", EmitDefaultValue=false)]
        public string GiftCardEmail { get; set; }

        /// <summary>
        /// Gets or Sets GiftCardMessage
        /// </summary>
        [DataMember(Name="giftCardMessage", EmitDefaultValue=false)]
        public string GiftCardMessage { get; set; }

        /// <summary>
        /// Gets or Sets Account
        /// </summary>
        [DataMember(Name="account", EmitDefaultValue=false)]
        public string Account { get; set; }

        /// <summary>
        /// Gets or Sets CustomFields
        /// </summary>
        [DataMember(Name="customFields", EmitDefaultValue=false)]
        public Dictionary<string, Object> CustomFields { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OrderLineItem {\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  Price: ").Append(Price).Append("\n");
            sb.Append("  Discount: ").Append(Discount).Append("\n");
            sb.Append("  SubTotal: ").Append(SubTotal).Append("\n");
            sb.Append("  OriginalPrice: ").Append(OriginalPrice).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Sku: ").Append(Sku).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  MajorGroup: ").Append(MajorGroup).Append("\n");
            sb.Append("  SubGroup: ").Append(SubGroup).Append("\n");
            sb.Append("  Available: ").Append(Available).Append("\n");
            sb.Append("  OnHand: ").Append(OnHand).Append("\n");
            sb.Append("  OnOrder: ").Append(OnOrder).Append("\n");
            sb.Append("  DiscountType: ").Append(DiscountType).Append("\n");
            sb.Append("  DiscountPercent: ").Append(DiscountPercent).Append("\n");
            sb.Append("  CustomPrice: ").Append(CustomPrice).Append("\n");
            sb.Append("  DiscountedPrice: ").Append(DiscountedPrice).Append("\n");
            sb.Append("  AlternateSKU: ").Append(AlternateSKU).Append("\n");
            sb.Append("  IsGiftCard: ").Append(IsGiftCard).Append("\n");
            sb.Append("  GiftCardAmount: ").Append(GiftCardAmount).Append("\n");
            sb.Append("  GiftCardTo: ").Append(GiftCardTo).Append("\n");
            sb.Append("  GiftCardEmail: ").Append(GiftCardEmail).Append("\n");
            sb.Append("  GiftCardMessage: ").Append(GiftCardMessage).Append("\n");
            sb.Append("  Account: ").Append(Account).Append("\n");
            sb.Append("  CustomFields: ").Append(CustomFields).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OrderLineItem);
        }

        /// <summary>
        /// Returns true if OrderLineItem instances are equal
        /// </summary>
        /// <param name="input">Instance of OrderLineItem to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrderLineItem input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Quantity == input.Quantity ||
                    (this.Quantity != null &&
                    this.Quantity.Equals(input.Quantity))
                ) && 
                (
                    this.Price == input.Price ||
                    (this.Price != null &&
                    this.Price.Equals(input.Price))
                ) && 
                (
                    this.Discount == input.Discount ||
                    (this.Discount != null &&
                    this.Discount.Equals(input.Discount))
                ) && 
                (
                    this.SubTotal == input.SubTotal ||
                    (this.SubTotal != null &&
                    this.SubTotal.Equals(input.SubTotal))
                ) && 
                (
                    this.OriginalPrice == input.OriginalPrice ||
                    (this.OriginalPrice != null &&
                    this.OriginalPrice.Equals(input.OriginalPrice))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Sku == input.Sku ||
                    (this.Sku != null &&
                    this.Sku.Equals(input.Sku))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.MajorGroup == input.MajorGroup ||
                    (this.MajorGroup != null &&
                    this.MajorGroup.Equals(input.MajorGroup))
                ) && 
                (
                    this.SubGroup == input.SubGroup ||
                    (this.SubGroup != null &&
                    this.SubGroup.Equals(input.SubGroup))
                ) && 
                (
                    this.Available == input.Available ||
                    (this.Available != null &&
                    this.Available.Equals(input.Available))
                ) && 
                (
                    this.OnHand == input.OnHand ||
                    (this.OnHand != null &&
                    this.OnHand.Equals(input.OnHand))
                ) && 
                (
                    this.OnOrder == input.OnOrder ||
                    (this.OnOrder != null &&
                    this.OnOrder.Equals(input.OnOrder))
                ) && 
                (
                    this.DiscountType == input.DiscountType ||
                    (this.DiscountType != null &&
                    this.DiscountType.Equals(input.DiscountType))
                ) && 
                (
                    this.DiscountPercent == input.DiscountPercent ||
                    (this.DiscountPercent != null &&
                    this.DiscountPercent.Equals(input.DiscountPercent))
                ) && 
                (
                    this.CustomPrice == input.CustomPrice ||
                    (this.CustomPrice != null &&
                    this.CustomPrice.Equals(input.CustomPrice))
                ) && 
                (
                    this.DiscountedPrice == input.DiscountedPrice ||
                    (this.DiscountedPrice != null &&
                    this.DiscountedPrice.Equals(input.DiscountedPrice))
                ) && 
                (
                    this.AlternateSKU == input.AlternateSKU ||
                    (this.AlternateSKU != null &&
                    this.AlternateSKU.Equals(input.AlternateSKU))
                ) && 
                (
                    this.IsGiftCard == input.IsGiftCard ||
                    (this.IsGiftCard != null &&
                    this.IsGiftCard.Equals(input.IsGiftCard))
                ) && 
                (
                    this.GiftCardAmount == input.GiftCardAmount ||
                    (this.GiftCardAmount != null &&
                    this.GiftCardAmount.Equals(input.GiftCardAmount))
                ) && 
                (
                    this.GiftCardTo == input.GiftCardTo ||
                    (this.GiftCardTo != null &&
                    this.GiftCardTo.Equals(input.GiftCardTo))
                ) && 
                (
                    this.GiftCardEmail == input.GiftCardEmail ||
                    (this.GiftCardEmail != null &&
                    this.GiftCardEmail.Equals(input.GiftCardEmail))
                ) && 
                (
                    this.GiftCardMessage == input.GiftCardMessage ||
                    (this.GiftCardMessage != null &&
                    this.GiftCardMessage.Equals(input.GiftCardMessage))
                ) && 
                (
                    this.Account == input.Account ||
                    (this.Account != null &&
                    this.Account.Equals(input.Account))
                ) && 
                (
                    this.CustomFields == input.CustomFields ||
                    this.CustomFields != null &&
                    this.CustomFields.SequenceEqual(input.CustomFields)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Quantity != null)
                    hashCode = hashCode * 59 + this.Quantity.GetHashCode();
                if (this.Price != null)
                    hashCode = hashCode * 59 + this.Price.GetHashCode();
                if (this.Discount != null)
                    hashCode = hashCode * 59 + this.Discount.GetHashCode();
                if (this.SubTotal != null)
                    hashCode = hashCode * 59 + this.SubTotal.GetHashCode();
                if (this.OriginalPrice != null)
                    hashCode = hashCode * 59 + this.OriginalPrice.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Sku != null)
                    hashCode = hashCode * 59 + this.Sku.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.MajorGroup != null)
                    hashCode = hashCode * 59 + this.MajorGroup.GetHashCode();
                if (this.SubGroup != null)
                    hashCode = hashCode * 59 + this.SubGroup.GetHashCode();
                if (this.Available != null)
                    hashCode = hashCode * 59 + this.Available.GetHashCode();
                if (this.OnHand != null)
                    hashCode = hashCode * 59 + this.OnHand.GetHashCode();
                if (this.OnOrder != null)
                    hashCode = hashCode * 59 + this.OnOrder.GetHashCode();
                if (this.DiscountType != null)
                    hashCode = hashCode * 59 + this.DiscountType.GetHashCode();
                if (this.DiscountPercent != null)
                    hashCode = hashCode * 59 + this.DiscountPercent.GetHashCode();
                if (this.CustomPrice != null)
                    hashCode = hashCode * 59 + this.CustomPrice.GetHashCode();
                if (this.DiscountedPrice != null)
                    hashCode = hashCode * 59 + this.DiscountedPrice.GetHashCode();
                if (this.AlternateSKU != null)
                    hashCode = hashCode * 59 + this.AlternateSKU.GetHashCode();
                if (this.IsGiftCard != null)
                    hashCode = hashCode * 59 + this.IsGiftCard.GetHashCode();
                if (this.GiftCardAmount != null)
                    hashCode = hashCode * 59 + this.GiftCardAmount.GetHashCode();
                if (this.GiftCardTo != null)
                    hashCode = hashCode * 59 + this.GiftCardTo.GetHashCode();
                if (this.GiftCardEmail != null)
                    hashCode = hashCode * 59 + this.GiftCardEmail.GetHashCode();
                if (this.GiftCardMessage != null)
                    hashCode = hashCode * 59 + this.GiftCardMessage.GetHashCode();
                if (this.Account != null)
                    hashCode = hashCode * 59 + this.Account.GetHashCode();
                if (this.CustomFields != null)
                    hashCode = hashCode * 59 + this.CustomFields.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
