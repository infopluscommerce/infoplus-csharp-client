/* 
 * Infoplus API
 *
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Infoplus.Client.SwaggerDateConverter;

namespace Infoplus.Model
{
    /// <summary>
    /// OrderSourceStockStatus
    /// </summary>
    [DataContract]
    public partial class OrderSourceStockStatus :  IEquatable<OrderSourceStockStatus>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OrderSourceStockStatus" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected OrderSourceStockStatus() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="OrderSourceStockStatus" /> class.
        /// </summary>
        /// <param name="OrderSourceId">OrderSourceId (required).</param>
        /// <param name="CustomFields">CustomFields.</param>
        /// <param name="Sku">Sku.</param>
        public OrderSourceStockStatus(int? OrderSourceId = default(int?), Dictionary<string, Object> CustomFields = default(Dictionary<string, Object>), string Sku = default(string))
        {
            // to ensure "OrderSourceId" is required (not null)
            if (OrderSourceId == null)
            {
                throw new InvalidDataException("OrderSourceId is a required property for OrderSourceStockStatus and cannot be null");
            }
            else
            {
                this.OrderSourceId = OrderSourceId;
            }
            this.CustomFields = CustomFields;
            this.Sku = Sku;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; private set; }

        /// <summary>
        /// Gets or Sets OrderSourceId
        /// </summary>
        [DataMember(Name="orderSourceId", EmitDefaultValue=false)]
        public int? OrderSourceId { get; set; }

        /// <summary>
        /// Gets or Sets LobId
        /// </summary>
        [DataMember(Name="lobId", EmitDefaultValue=false)]
        public int? LobId { get; private set; }

        /// <summary>
        /// Gets or Sets TotalReservedQuantity
        /// </summary>
        [DataMember(Name="totalReservedQuantity", EmitDefaultValue=false)]
        public int? TotalReservedQuantity { get; private set; }

        /// <summary>
        /// Gets or Sets Demand
        /// </summary>
        [DataMember(Name="demand", EmitDefaultValue=false)]
        public int? Demand { get; private set; }

        /// <summary>
        /// Gets or Sets ReservedQuantity
        /// </summary>
        [DataMember(Name="reservedQuantity", EmitDefaultValue=false)]
        public int? ReservedQuantity { get; private set; }

        /// <summary>
        /// Gets or Sets QuantityAvailable
        /// </summary>
        [DataMember(Name="quantityAvailable", EmitDefaultValue=false)]
        public int? QuantityAvailable { get; private set; }

        /// <summary>
        /// Gets or Sets OrderableQuantity
        /// </summary>
        [DataMember(Name="orderableQuantity", EmitDefaultValue=false)]
        public int? OrderableQuantity { get; private set; }

        /// <summary>
        /// Gets or Sets UnreservedQuantityAvailable
        /// </summary>
        [DataMember(Name="unreservedQuantityAvailable", EmitDefaultValue=false)]
        public int? UnreservedQuantityAvailable { get; private set; }

        /// <summary>
        /// Gets or Sets NetReservation
        /// </summary>
        [DataMember(Name="netReservation", EmitDefaultValue=false)]
        public int? NetReservation { get; private set; }

        /// <summary>
        /// Gets or Sets CustomFields
        /// </summary>
        [DataMember(Name="customFields", EmitDefaultValue=false)]
        public Dictionary<string, Object> CustomFields { get; set; }

        /// <summary>
        /// Gets or Sets Sku
        /// </summary>
        [DataMember(Name="sku", EmitDefaultValue=false)]
        public string Sku { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OrderSourceStockStatus {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  OrderSourceId: ").Append(OrderSourceId).Append("\n");
            sb.Append("  LobId: ").Append(LobId).Append("\n");
            sb.Append("  TotalReservedQuantity: ").Append(TotalReservedQuantity).Append("\n");
            sb.Append("  Demand: ").Append(Demand).Append("\n");
            sb.Append("  ReservedQuantity: ").Append(ReservedQuantity).Append("\n");
            sb.Append("  QuantityAvailable: ").Append(QuantityAvailable).Append("\n");
            sb.Append("  OrderableQuantity: ").Append(OrderableQuantity).Append("\n");
            sb.Append("  UnreservedQuantityAvailable: ").Append(UnreservedQuantityAvailable).Append("\n");
            sb.Append("  NetReservation: ").Append(NetReservation).Append("\n");
            sb.Append("  CustomFields: ").Append(CustomFields).Append("\n");
            sb.Append("  Sku: ").Append(Sku).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OrderSourceStockStatus);
        }

        /// <summary>
        /// Returns true if OrderSourceStockStatus instances are equal
        /// </summary>
        /// <param name="input">Instance of OrderSourceStockStatus to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrderSourceStockStatus input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.OrderSourceId == input.OrderSourceId ||
                    (this.OrderSourceId != null &&
                    this.OrderSourceId.Equals(input.OrderSourceId))
                ) && 
                (
                    this.LobId == input.LobId ||
                    (this.LobId != null &&
                    this.LobId.Equals(input.LobId))
                ) && 
                (
                    this.TotalReservedQuantity == input.TotalReservedQuantity ||
                    (this.TotalReservedQuantity != null &&
                    this.TotalReservedQuantity.Equals(input.TotalReservedQuantity))
                ) && 
                (
                    this.Demand == input.Demand ||
                    (this.Demand != null &&
                    this.Demand.Equals(input.Demand))
                ) && 
                (
                    this.ReservedQuantity == input.ReservedQuantity ||
                    (this.ReservedQuantity != null &&
                    this.ReservedQuantity.Equals(input.ReservedQuantity))
                ) && 
                (
                    this.QuantityAvailable == input.QuantityAvailable ||
                    (this.QuantityAvailable != null &&
                    this.QuantityAvailable.Equals(input.QuantityAvailable))
                ) && 
                (
                    this.OrderableQuantity == input.OrderableQuantity ||
                    (this.OrderableQuantity != null &&
                    this.OrderableQuantity.Equals(input.OrderableQuantity))
                ) && 
                (
                    this.UnreservedQuantityAvailable == input.UnreservedQuantityAvailable ||
                    (this.UnreservedQuantityAvailable != null &&
                    this.UnreservedQuantityAvailable.Equals(input.UnreservedQuantityAvailable))
                ) && 
                (
                    this.NetReservation == input.NetReservation ||
                    (this.NetReservation != null &&
                    this.NetReservation.Equals(input.NetReservation))
                ) && 
                (
                    this.CustomFields == input.CustomFields ||
                    this.CustomFields != null &&
                    this.CustomFields.SequenceEqual(input.CustomFields)
                ) && 
                (
                    this.Sku == input.Sku ||
                    (this.Sku != null &&
                    this.Sku.Equals(input.Sku))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.OrderSourceId != null)
                    hashCode = hashCode * 59 + this.OrderSourceId.GetHashCode();
                if (this.LobId != null)
                    hashCode = hashCode * 59 + this.LobId.GetHashCode();
                if (this.TotalReservedQuantity != null)
                    hashCode = hashCode * 59 + this.TotalReservedQuantity.GetHashCode();
                if (this.Demand != null)
                    hashCode = hashCode * 59 + this.Demand.GetHashCode();
                if (this.ReservedQuantity != null)
                    hashCode = hashCode * 59 + this.ReservedQuantity.GetHashCode();
                if (this.QuantityAvailable != null)
                    hashCode = hashCode * 59 + this.QuantityAvailable.GetHashCode();
                if (this.OrderableQuantity != null)
                    hashCode = hashCode * 59 + this.OrderableQuantity.GetHashCode();
                if (this.UnreservedQuantityAvailable != null)
                    hashCode = hashCode * 59 + this.UnreservedQuantityAvailable.GetHashCode();
                if (this.NetReservation != null)
                    hashCode = hashCode * 59 + this.NetReservation.GetHashCode();
                if (this.CustomFields != null)
                    hashCode = hashCode * 59 + this.CustomFields.GetHashCode();
                if (this.Sku != null)
                    hashCode = hashCode * 59 + this.Sku.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
