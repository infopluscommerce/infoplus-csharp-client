/* 
 * Infoplus API
 *
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Infoplus.Client.SwaggerDateConverter;

namespace Infoplus.Model
{
    /// <summary>
    /// OrderWarehouseFulfillmentPlan
    /// </summary>
    [DataContract]
    public partial class OrderWarehouseFulfillmentPlan :  IEquatable<OrderWarehouseFulfillmentPlan>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OrderWarehouseFulfillmentPlan" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected OrderWarehouseFulfillmentPlan() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="OrderWarehouseFulfillmentPlan" /> class.
        /// </summary>
        /// <param name="Score">Score.</param>
        /// <param name="PlanDetailList">PlanDetailList (required).</param>
        public OrderWarehouseFulfillmentPlan(int? Score = default(int?), List<OrderWarehouseFulfillmentPlanDetail> PlanDetailList = default(List<OrderWarehouseFulfillmentPlanDetail>))
        {
            // to ensure "PlanDetailList" is required (not null)
            if (PlanDetailList == null)
            {
                throw new InvalidDataException("PlanDetailList is a required property for OrderWarehouseFulfillmentPlan and cannot be null");
            }
            else
            {
                this.PlanDetailList = PlanDetailList;
            }
            this.Score = Score;
        }
        
        /// <summary>
        /// Gets or Sets Score
        /// </summary>
        [DataMember(Name="score", EmitDefaultValue=false)]
        public int? Score { get; set; }

        /// <summary>
        /// Gets or Sets PlanDetailList
        /// </summary>
        [DataMember(Name="planDetailList", EmitDefaultValue=false)]
        public List<OrderWarehouseFulfillmentPlanDetail> PlanDetailList { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OrderWarehouseFulfillmentPlan {\n");
            sb.Append("  Score: ").Append(Score).Append("\n");
            sb.Append("  PlanDetailList: ").Append(PlanDetailList).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OrderWarehouseFulfillmentPlan);
        }

        /// <summary>
        /// Returns true if OrderWarehouseFulfillmentPlan instances are equal
        /// </summary>
        /// <param name="input">Instance of OrderWarehouseFulfillmentPlan to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrderWarehouseFulfillmentPlan input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Score == input.Score ||
                    (this.Score != null &&
                    this.Score.Equals(input.Score))
                ) && 
                (
                    this.PlanDetailList == input.PlanDetailList ||
                    this.PlanDetailList != null &&
                    this.PlanDetailList.SequenceEqual(input.PlanDetailList)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Score != null)
                    hashCode = hashCode * 59 + this.Score.GetHashCode();
                if (this.PlanDetailList != null)
                    hashCode = hashCode * 59 + this.PlanDetailList.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
