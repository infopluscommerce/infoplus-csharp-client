/* 
 * Infoplus API
 *
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Infoplus.Client.SwaggerDateConverter;

namespace Infoplus.Model
{
    /// <summary>
    /// PalletType
    /// </summary>
    [DataContract]
    public partial class PalletType :  IEquatable<PalletType>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PalletType" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PalletType() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PalletType" /> class.
        /// </summary>
        /// <param name="Name">Name (required).</param>
        /// <param name="PalletLengthIn">PalletLengthIn (required).</param>
        /// <param name="PalletWidthIn">PalletWidthIn (required).</param>
        /// <param name="PalletHeightIn">PalletHeightIn (required).</param>
        /// <param name="PalletWeightLbs">PalletWeightLbs.</param>
        /// <param name="PackableLengthIn">PackableLengthIn (required).</param>
        /// <param name="PackableWidthIn">PackableWidthIn (required).</param>
        /// <param name="PackableHeightIn">PackableHeightIn (required).</param>
        /// <param name="LobId">LobId (required).</param>
        /// <param name="IsActive">IsActive (required) (default to false).</param>
        /// <param name="CustomFields">CustomFields.</param>
        public PalletType(string Name = default(string), decimal? PalletLengthIn = default(decimal?), decimal? PalletWidthIn = default(decimal?), decimal? PalletHeightIn = default(decimal?), decimal? PalletWeightLbs = default(decimal?), decimal? PackableLengthIn = default(decimal?), decimal? PackableWidthIn = default(decimal?), decimal? PackableHeightIn = default(decimal?), int? LobId = default(int?), bool? IsActive = false, Dictionary<string, Object> CustomFields = default(Dictionary<string, Object>))
        {
            // to ensure "Name" is required (not null)
            if (Name == null)
            {
                throw new InvalidDataException("Name is a required property for PalletType and cannot be null");
            }
            else
            {
                this.Name = Name;
            }
            // to ensure "PalletLengthIn" is required (not null)
            if (PalletLengthIn == null)
            {
                throw new InvalidDataException("PalletLengthIn is a required property for PalletType and cannot be null");
            }
            else
            {
                this.PalletLengthIn = PalletLengthIn;
            }
            // to ensure "PalletWidthIn" is required (not null)
            if (PalletWidthIn == null)
            {
                throw new InvalidDataException("PalletWidthIn is a required property for PalletType and cannot be null");
            }
            else
            {
                this.PalletWidthIn = PalletWidthIn;
            }
            // to ensure "PalletHeightIn" is required (not null)
            if (PalletHeightIn == null)
            {
                throw new InvalidDataException("PalletHeightIn is a required property for PalletType and cannot be null");
            }
            else
            {
                this.PalletHeightIn = PalletHeightIn;
            }
            // to ensure "PackableLengthIn" is required (not null)
            if (PackableLengthIn == null)
            {
                throw new InvalidDataException("PackableLengthIn is a required property for PalletType and cannot be null");
            }
            else
            {
                this.PackableLengthIn = PackableLengthIn;
            }
            // to ensure "PackableWidthIn" is required (not null)
            if (PackableWidthIn == null)
            {
                throw new InvalidDataException("PackableWidthIn is a required property for PalletType and cannot be null");
            }
            else
            {
                this.PackableWidthIn = PackableWidthIn;
            }
            // to ensure "PackableHeightIn" is required (not null)
            if (PackableHeightIn == null)
            {
                throw new InvalidDataException("PackableHeightIn is a required property for PalletType and cannot be null");
            }
            else
            {
                this.PackableHeightIn = PackableHeightIn;
            }
            // to ensure "LobId" is required (not null)
            if (LobId == null)
            {
                throw new InvalidDataException("LobId is a required property for PalletType and cannot be null");
            }
            else
            {
                this.LobId = LobId;
            }
            // to ensure "IsActive" is required (not null)
            if (IsActive == null)
            {
                throw new InvalidDataException("IsActive is a required property for PalletType and cannot be null");
            }
            else
            {
                this.IsActive = IsActive;
            }
            this.PalletWeightLbs = PalletWeightLbs;
            this.CustomFields = CustomFields;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; private set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets PalletLengthIn
        /// </summary>
        [DataMember(Name="palletLengthIn", EmitDefaultValue=false)]
        public decimal? PalletLengthIn { get; set; }

        /// <summary>
        /// Gets or Sets PalletWidthIn
        /// </summary>
        [DataMember(Name="palletWidthIn", EmitDefaultValue=false)]
        public decimal? PalletWidthIn { get; set; }

        /// <summary>
        /// Gets or Sets PalletHeightIn
        /// </summary>
        [DataMember(Name="palletHeightIn", EmitDefaultValue=false)]
        public decimal? PalletHeightIn { get; set; }

        /// <summary>
        /// Gets or Sets PalletWeightLbs
        /// </summary>
        [DataMember(Name="palletWeightLbs", EmitDefaultValue=false)]
        public decimal? PalletWeightLbs { get; set; }

        /// <summary>
        /// Gets or Sets PackableLengthIn
        /// </summary>
        [DataMember(Name="packableLengthIn", EmitDefaultValue=false)]
        public decimal? PackableLengthIn { get; set; }

        /// <summary>
        /// Gets or Sets PackableWidthIn
        /// </summary>
        [DataMember(Name="packableWidthIn", EmitDefaultValue=false)]
        public decimal? PackableWidthIn { get; set; }

        /// <summary>
        /// Gets or Sets PackableHeightIn
        /// </summary>
        [DataMember(Name="packableHeightIn", EmitDefaultValue=false)]
        public decimal? PackableHeightIn { get; set; }

        /// <summary>
        /// Gets or Sets LobId
        /// </summary>
        [DataMember(Name="lobId", EmitDefaultValue=false)]
        public int? LobId { get; set; }

        /// <summary>
        /// Gets or Sets IsActive
        /// </summary>
        [DataMember(Name="isActive", EmitDefaultValue=false)]
        public bool? IsActive { get; set; }

        /// <summary>
        /// Gets or Sets CustomFields
        /// </summary>
        [DataMember(Name="customFields", EmitDefaultValue=false)]
        public Dictionary<string, Object> CustomFields { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PalletType {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  PalletLengthIn: ").Append(PalletLengthIn).Append("\n");
            sb.Append("  PalletWidthIn: ").Append(PalletWidthIn).Append("\n");
            sb.Append("  PalletHeightIn: ").Append(PalletHeightIn).Append("\n");
            sb.Append("  PalletWeightLbs: ").Append(PalletWeightLbs).Append("\n");
            sb.Append("  PackableLengthIn: ").Append(PackableLengthIn).Append("\n");
            sb.Append("  PackableWidthIn: ").Append(PackableWidthIn).Append("\n");
            sb.Append("  PackableHeightIn: ").Append(PackableHeightIn).Append("\n");
            sb.Append("  LobId: ").Append(LobId).Append("\n");
            sb.Append("  IsActive: ").Append(IsActive).Append("\n");
            sb.Append("  CustomFields: ").Append(CustomFields).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PalletType);
        }

        /// <summary>
        /// Returns true if PalletType instances are equal
        /// </summary>
        /// <param name="input">Instance of PalletType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PalletType input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.PalletLengthIn == input.PalletLengthIn ||
                    (this.PalletLengthIn != null &&
                    this.PalletLengthIn.Equals(input.PalletLengthIn))
                ) && 
                (
                    this.PalletWidthIn == input.PalletWidthIn ||
                    (this.PalletWidthIn != null &&
                    this.PalletWidthIn.Equals(input.PalletWidthIn))
                ) && 
                (
                    this.PalletHeightIn == input.PalletHeightIn ||
                    (this.PalletHeightIn != null &&
                    this.PalletHeightIn.Equals(input.PalletHeightIn))
                ) && 
                (
                    this.PalletWeightLbs == input.PalletWeightLbs ||
                    (this.PalletWeightLbs != null &&
                    this.PalletWeightLbs.Equals(input.PalletWeightLbs))
                ) && 
                (
                    this.PackableLengthIn == input.PackableLengthIn ||
                    (this.PackableLengthIn != null &&
                    this.PackableLengthIn.Equals(input.PackableLengthIn))
                ) && 
                (
                    this.PackableWidthIn == input.PackableWidthIn ||
                    (this.PackableWidthIn != null &&
                    this.PackableWidthIn.Equals(input.PackableWidthIn))
                ) && 
                (
                    this.PackableHeightIn == input.PackableHeightIn ||
                    (this.PackableHeightIn != null &&
                    this.PackableHeightIn.Equals(input.PackableHeightIn))
                ) && 
                (
                    this.LobId == input.LobId ||
                    (this.LobId != null &&
                    this.LobId.Equals(input.LobId))
                ) && 
                (
                    this.IsActive == input.IsActive ||
                    (this.IsActive != null &&
                    this.IsActive.Equals(input.IsActive))
                ) && 
                (
                    this.CustomFields == input.CustomFields ||
                    this.CustomFields != null &&
                    this.CustomFields.SequenceEqual(input.CustomFields)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.PalletLengthIn != null)
                    hashCode = hashCode * 59 + this.PalletLengthIn.GetHashCode();
                if (this.PalletWidthIn != null)
                    hashCode = hashCode * 59 + this.PalletWidthIn.GetHashCode();
                if (this.PalletHeightIn != null)
                    hashCode = hashCode * 59 + this.PalletHeightIn.GetHashCode();
                if (this.PalletWeightLbs != null)
                    hashCode = hashCode * 59 + this.PalletWeightLbs.GetHashCode();
                if (this.PackableLengthIn != null)
                    hashCode = hashCode * 59 + this.PackableLengthIn.GetHashCode();
                if (this.PackableWidthIn != null)
                    hashCode = hashCode * 59 + this.PackableWidthIn.GetHashCode();
                if (this.PackableHeightIn != null)
                    hashCode = hashCode * 59 + this.PackableHeightIn.GetHashCode();
                if (this.LobId != null)
                    hashCode = hashCode * 59 + this.LobId.GetHashCode();
                if (this.IsActive != null)
                    hashCode = hashCode * 59 + this.IsActive.GetHashCode();
                if (this.CustomFields != null)
                    hashCode = hashCode * 59 + this.CustomFields.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
