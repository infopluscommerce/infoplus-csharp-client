/* 
 * Infoplus API
 *
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Infoplus.Client.SwaggerDateConverter;

namespace Infoplus.Model
{
    /// <summary>
    /// ReceivingWorksheetLineItem
    /// </summary>
    [DataContract]
    public partial class ReceivingWorksheetLineItem :  IEquatable<ReceivingWorksheetLineItem>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ReceivingWorksheetLineItem" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ReceivingWorksheetLineItem() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ReceivingWorksheetLineItem" /> class.
        /// </summary>
        /// <param name="ReceivingQty">ReceivingQty (required).</param>
        /// <param name="WrapCode">WrapCode.</param>
        /// <param name="UnitsPerWrap">UnitsPerWrap.</param>
        /// <param name="UnitsPerCase">UnitsPerCase.</param>
        /// <param name="QuantityPerInnerPack">QuantityPerInnerPack.</param>
        /// <param name="QuantityPerPallet">QuantityPerPallet.</param>
        /// <param name="WeightPerWrap">WeightPerWrap (required).</param>
        /// <param name="WeightPerCase">WeightPerCase.</param>
        /// <param name="ProductionLot">ProductionLot.</param>
        /// <param name="ProductIdTag">ProductIdTag.</param>
        /// <param name="RevisionDate">RevisionDate.</param>
        /// <param name="ExpirationDate">ExpirationDate.</param>
        /// <param name="Origin">Origin.</param>
        /// <param name="CartonLength">CartonLength.</param>
        /// <param name="CartonWidth">CartonWidth.</param>
        /// <param name="CartonHeight">CartonHeight.</param>
        /// <param name="PutAwayPlans">PutAwayPlans.</param>
        /// <param name="Quantity">Quantity.</param>
        /// <param name="CustomFields">CustomFields.</param>
        public ReceivingWorksheetLineItem(int? ReceivingQty = default(int?), string WrapCode = default(string), int? UnitsPerWrap = default(int?), int? UnitsPerCase = default(int?), int? QuantityPerInnerPack = default(int?), int? QuantityPerPallet = default(int?), decimal? WeightPerWrap = default(decimal?), decimal? WeightPerCase = default(decimal?), string ProductionLot = default(string), string ProductIdTag = default(string), string RevisionDate = default(string), DateTime? ExpirationDate = default(DateTime?), string Origin = default(string), decimal? CartonLength = default(decimal?), decimal? CartonWidth = default(decimal?), decimal? CartonHeight = default(decimal?), List<ReceivingWorksheetPutAwayPlan> PutAwayPlans = default(List<ReceivingWorksheetPutAwayPlan>), int? Quantity = default(int?), Dictionary<string, Object> CustomFields = default(Dictionary<string, Object>))
        {
            // to ensure "ReceivingQty" is required (not null)
            if (ReceivingQty == null)
            {
                throw new InvalidDataException("ReceivingQty is a required property for ReceivingWorksheetLineItem and cannot be null");
            }
            else
            {
                this.ReceivingQty = ReceivingQty;
            }
            // to ensure "WeightPerWrap" is required (not null)
            if (WeightPerWrap == null)
            {
                throw new InvalidDataException("WeightPerWrap is a required property for ReceivingWorksheetLineItem and cannot be null");
            }
            else
            {
                this.WeightPerWrap = WeightPerWrap;
            }
            this.WrapCode = WrapCode;
            this.UnitsPerWrap = UnitsPerWrap;
            this.UnitsPerCase = UnitsPerCase;
            this.QuantityPerInnerPack = QuantityPerInnerPack;
            this.QuantityPerPallet = QuantityPerPallet;
            this.WeightPerCase = WeightPerCase;
            this.ProductionLot = ProductionLot;
            this.ProductIdTag = ProductIdTag;
            this.RevisionDate = RevisionDate;
            this.ExpirationDate = ExpirationDate;
            this.Origin = Origin;
            this.CartonLength = CartonLength;
            this.CartonWidth = CartonWidth;
            this.CartonHeight = CartonHeight;
            this.PutAwayPlans = PutAwayPlans;
            this.Quantity = Quantity;
            this.CustomFields = CustomFields;
        }
        
        /// <summary>
        /// Gets or Sets Sku
        /// </summary>
        [DataMember(Name="sku", EmitDefaultValue=false)]
        public string Sku { get; private set; }

        /// <summary>
        /// Gets or Sets Sku2
        /// </summary>
        [DataMember(Name="sku2", EmitDefaultValue=false)]
        public string Sku2 { get; private set; }

        /// <summary>
        /// Gets or Sets FullDescription
        /// </summary>
        [DataMember(Name="fullDescription", EmitDefaultValue=false)]
        public string FullDescription { get; private set; }

        /// <summary>
        /// Gets or Sets OrderedQty
        /// </summary>
        [DataMember(Name="orderedQty", EmitDefaultValue=false)]
        public int? OrderedQty { get; private set; }

        /// <summary>
        /// Gets or Sets PrevReceivedQty
        /// </summary>
        [DataMember(Name="prevReceivedQty", EmitDefaultValue=false)]
        public int? PrevReceivedQty { get; private set; }

        /// <summary>
        /// Gets or Sets UnreceivedQty
        /// </summary>
        [DataMember(Name="unreceivedQty", EmitDefaultValue=false)]
        public int? UnreceivedQty { get; private set; }

        /// <summary>
        /// Gets or Sets ReceivingQty
        /// </summary>
        [DataMember(Name="receivingQty", EmitDefaultValue=false)]
        public int? ReceivingQty { get; set; }

        /// <summary>
        /// Gets or Sets UnitCode
        /// </summary>
        [DataMember(Name="unitCode", EmitDefaultValue=false)]
        public string UnitCode { get; private set; }

        /// <summary>
        /// Gets or Sets WrapCode
        /// </summary>
        [DataMember(Name="wrapCode", EmitDefaultValue=false)]
        public string WrapCode { get; set; }

        /// <summary>
        /// Gets or Sets UnitsPerWrap
        /// </summary>
        [DataMember(Name="unitsPerWrap", EmitDefaultValue=false)]
        public int? UnitsPerWrap { get; set; }

        /// <summary>
        /// Gets or Sets UnitsPerCase
        /// </summary>
        [DataMember(Name="unitsPerCase", EmitDefaultValue=false)]
        public int? UnitsPerCase { get; set; }

        /// <summary>
        /// Gets or Sets QuantityPerInnerPack
        /// </summary>
        [DataMember(Name="quantityPerInnerPack", EmitDefaultValue=false)]
        public int? QuantityPerInnerPack { get; set; }

        /// <summary>
        /// Gets or Sets QuantityPerPallet
        /// </summary>
        [DataMember(Name="quantityPerPallet", EmitDefaultValue=false)]
        public int? QuantityPerPallet { get; set; }

        /// <summary>
        /// Gets or Sets WeightPerWrap
        /// </summary>
        [DataMember(Name="weightPerWrap", EmitDefaultValue=false)]
        public decimal? WeightPerWrap { get; set; }

        /// <summary>
        /// Gets or Sets WeightPerCase
        /// </summary>
        [DataMember(Name="weightPerCase", EmitDefaultValue=false)]
        public decimal? WeightPerCase { get; set; }

        /// <summary>
        /// Gets or Sets ProductionLot
        /// </summary>
        [DataMember(Name="productionLot", EmitDefaultValue=false)]
        public string ProductionLot { get; set; }

        /// <summary>
        /// Gets or Sets ProductIdTag
        /// </summary>
        [DataMember(Name="productIdTag", EmitDefaultValue=false)]
        public string ProductIdTag { get; set; }

        /// <summary>
        /// Gets or Sets RevisionDate
        /// </summary>
        [DataMember(Name="revisionDate", EmitDefaultValue=false)]
        public string RevisionDate { get; set; }

        /// <summary>
        /// Gets or Sets ExpirationDate
        /// </summary>
        [DataMember(Name="expirationDate", EmitDefaultValue=false)]
        public DateTime? ExpirationDate { get; set; }

        /// <summary>
        /// Gets or Sets Origin
        /// </summary>
        [DataMember(Name="origin", EmitDefaultValue=false)]
        public string Origin { get; set; }

        /// <summary>
        /// Gets or Sets CartonLength
        /// </summary>
        [DataMember(Name="cartonLength", EmitDefaultValue=false)]
        public decimal? CartonLength { get; set; }

        /// <summary>
        /// Gets or Sets CartonWidth
        /// </summary>
        [DataMember(Name="cartonWidth", EmitDefaultValue=false)]
        public decimal? CartonWidth { get; set; }

        /// <summary>
        /// Gets or Sets CartonHeight
        /// </summary>
        [DataMember(Name="cartonHeight", EmitDefaultValue=false)]
        public decimal? CartonHeight { get; set; }

        /// <summary>
        /// Gets or Sets PutAwayPlans
        /// </summary>
        [DataMember(Name="putAwayPlans", EmitDefaultValue=false)]
        public List<ReceivingWorksheetPutAwayPlan> PutAwayPlans { get; set; }

        /// <summary>
        /// Gets or Sets Quantity
        /// </summary>
        [DataMember(Name="quantity", EmitDefaultValue=false)]
        public int? Quantity { get; set; }

        /// <summary>
        /// Gets or Sets CustomFields
        /// </summary>
        [DataMember(Name="customFields", EmitDefaultValue=false)]
        public Dictionary<string, Object> CustomFields { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ReceivingWorksheetLineItem {\n");
            sb.Append("  Sku: ").Append(Sku).Append("\n");
            sb.Append("  Sku2: ").Append(Sku2).Append("\n");
            sb.Append("  FullDescription: ").Append(FullDescription).Append("\n");
            sb.Append("  OrderedQty: ").Append(OrderedQty).Append("\n");
            sb.Append("  PrevReceivedQty: ").Append(PrevReceivedQty).Append("\n");
            sb.Append("  UnreceivedQty: ").Append(UnreceivedQty).Append("\n");
            sb.Append("  ReceivingQty: ").Append(ReceivingQty).Append("\n");
            sb.Append("  UnitCode: ").Append(UnitCode).Append("\n");
            sb.Append("  WrapCode: ").Append(WrapCode).Append("\n");
            sb.Append("  UnitsPerWrap: ").Append(UnitsPerWrap).Append("\n");
            sb.Append("  UnitsPerCase: ").Append(UnitsPerCase).Append("\n");
            sb.Append("  QuantityPerInnerPack: ").Append(QuantityPerInnerPack).Append("\n");
            sb.Append("  QuantityPerPallet: ").Append(QuantityPerPallet).Append("\n");
            sb.Append("  WeightPerWrap: ").Append(WeightPerWrap).Append("\n");
            sb.Append("  WeightPerCase: ").Append(WeightPerCase).Append("\n");
            sb.Append("  ProductionLot: ").Append(ProductionLot).Append("\n");
            sb.Append("  ProductIdTag: ").Append(ProductIdTag).Append("\n");
            sb.Append("  RevisionDate: ").Append(RevisionDate).Append("\n");
            sb.Append("  ExpirationDate: ").Append(ExpirationDate).Append("\n");
            sb.Append("  Origin: ").Append(Origin).Append("\n");
            sb.Append("  CartonLength: ").Append(CartonLength).Append("\n");
            sb.Append("  CartonWidth: ").Append(CartonWidth).Append("\n");
            sb.Append("  CartonHeight: ").Append(CartonHeight).Append("\n");
            sb.Append("  PutAwayPlans: ").Append(PutAwayPlans).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  CustomFields: ").Append(CustomFields).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ReceivingWorksheetLineItem);
        }

        /// <summary>
        /// Returns true if ReceivingWorksheetLineItem instances are equal
        /// </summary>
        /// <param name="input">Instance of ReceivingWorksheetLineItem to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ReceivingWorksheetLineItem input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Sku == input.Sku ||
                    (this.Sku != null &&
                    this.Sku.Equals(input.Sku))
                ) && 
                (
                    this.Sku2 == input.Sku2 ||
                    (this.Sku2 != null &&
                    this.Sku2.Equals(input.Sku2))
                ) && 
                (
                    this.FullDescription == input.FullDescription ||
                    (this.FullDescription != null &&
                    this.FullDescription.Equals(input.FullDescription))
                ) && 
                (
                    this.OrderedQty == input.OrderedQty ||
                    (this.OrderedQty != null &&
                    this.OrderedQty.Equals(input.OrderedQty))
                ) && 
                (
                    this.PrevReceivedQty == input.PrevReceivedQty ||
                    (this.PrevReceivedQty != null &&
                    this.PrevReceivedQty.Equals(input.PrevReceivedQty))
                ) && 
                (
                    this.UnreceivedQty == input.UnreceivedQty ||
                    (this.UnreceivedQty != null &&
                    this.UnreceivedQty.Equals(input.UnreceivedQty))
                ) && 
                (
                    this.ReceivingQty == input.ReceivingQty ||
                    (this.ReceivingQty != null &&
                    this.ReceivingQty.Equals(input.ReceivingQty))
                ) && 
                (
                    this.UnitCode == input.UnitCode ||
                    (this.UnitCode != null &&
                    this.UnitCode.Equals(input.UnitCode))
                ) && 
                (
                    this.WrapCode == input.WrapCode ||
                    (this.WrapCode != null &&
                    this.WrapCode.Equals(input.WrapCode))
                ) && 
                (
                    this.UnitsPerWrap == input.UnitsPerWrap ||
                    (this.UnitsPerWrap != null &&
                    this.UnitsPerWrap.Equals(input.UnitsPerWrap))
                ) && 
                (
                    this.UnitsPerCase == input.UnitsPerCase ||
                    (this.UnitsPerCase != null &&
                    this.UnitsPerCase.Equals(input.UnitsPerCase))
                ) && 
                (
                    this.QuantityPerInnerPack == input.QuantityPerInnerPack ||
                    (this.QuantityPerInnerPack != null &&
                    this.QuantityPerInnerPack.Equals(input.QuantityPerInnerPack))
                ) && 
                (
                    this.QuantityPerPallet == input.QuantityPerPallet ||
                    (this.QuantityPerPallet != null &&
                    this.QuantityPerPallet.Equals(input.QuantityPerPallet))
                ) && 
                (
                    this.WeightPerWrap == input.WeightPerWrap ||
                    (this.WeightPerWrap != null &&
                    this.WeightPerWrap.Equals(input.WeightPerWrap))
                ) && 
                (
                    this.WeightPerCase == input.WeightPerCase ||
                    (this.WeightPerCase != null &&
                    this.WeightPerCase.Equals(input.WeightPerCase))
                ) && 
                (
                    this.ProductionLot == input.ProductionLot ||
                    (this.ProductionLot != null &&
                    this.ProductionLot.Equals(input.ProductionLot))
                ) && 
                (
                    this.ProductIdTag == input.ProductIdTag ||
                    (this.ProductIdTag != null &&
                    this.ProductIdTag.Equals(input.ProductIdTag))
                ) && 
                (
                    this.RevisionDate == input.RevisionDate ||
                    (this.RevisionDate != null &&
                    this.RevisionDate.Equals(input.RevisionDate))
                ) && 
                (
                    this.ExpirationDate == input.ExpirationDate ||
                    (this.ExpirationDate != null &&
                    this.ExpirationDate.Equals(input.ExpirationDate))
                ) && 
                (
                    this.Origin == input.Origin ||
                    (this.Origin != null &&
                    this.Origin.Equals(input.Origin))
                ) && 
                (
                    this.CartonLength == input.CartonLength ||
                    (this.CartonLength != null &&
                    this.CartonLength.Equals(input.CartonLength))
                ) && 
                (
                    this.CartonWidth == input.CartonWidth ||
                    (this.CartonWidth != null &&
                    this.CartonWidth.Equals(input.CartonWidth))
                ) && 
                (
                    this.CartonHeight == input.CartonHeight ||
                    (this.CartonHeight != null &&
                    this.CartonHeight.Equals(input.CartonHeight))
                ) && 
                (
                    this.PutAwayPlans == input.PutAwayPlans ||
                    this.PutAwayPlans != null &&
                    this.PutAwayPlans.SequenceEqual(input.PutAwayPlans)
                ) && 
                (
                    this.Quantity == input.Quantity ||
                    (this.Quantity != null &&
                    this.Quantity.Equals(input.Quantity))
                ) && 
                (
                    this.CustomFields == input.CustomFields ||
                    this.CustomFields != null &&
                    this.CustomFields.SequenceEqual(input.CustomFields)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Sku != null)
                    hashCode = hashCode * 59 + this.Sku.GetHashCode();
                if (this.Sku2 != null)
                    hashCode = hashCode * 59 + this.Sku2.GetHashCode();
                if (this.FullDescription != null)
                    hashCode = hashCode * 59 + this.FullDescription.GetHashCode();
                if (this.OrderedQty != null)
                    hashCode = hashCode * 59 + this.OrderedQty.GetHashCode();
                if (this.PrevReceivedQty != null)
                    hashCode = hashCode * 59 + this.PrevReceivedQty.GetHashCode();
                if (this.UnreceivedQty != null)
                    hashCode = hashCode * 59 + this.UnreceivedQty.GetHashCode();
                if (this.ReceivingQty != null)
                    hashCode = hashCode * 59 + this.ReceivingQty.GetHashCode();
                if (this.UnitCode != null)
                    hashCode = hashCode * 59 + this.UnitCode.GetHashCode();
                if (this.WrapCode != null)
                    hashCode = hashCode * 59 + this.WrapCode.GetHashCode();
                if (this.UnitsPerWrap != null)
                    hashCode = hashCode * 59 + this.UnitsPerWrap.GetHashCode();
                if (this.UnitsPerCase != null)
                    hashCode = hashCode * 59 + this.UnitsPerCase.GetHashCode();
                if (this.QuantityPerInnerPack != null)
                    hashCode = hashCode * 59 + this.QuantityPerInnerPack.GetHashCode();
                if (this.QuantityPerPallet != null)
                    hashCode = hashCode * 59 + this.QuantityPerPallet.GetHashCode();
                if (this.WeightPerWrap != null)
                    hashCode = hashCode * 59 + this.WeightPerWrap.GetHashCode();
                if (this.WeightPerCase != null)
                    hashCode = hashCode * 59 + this.WeightPerCase.GetHashCode();
                if (this.ProductionLot != null)
                    hashCode = hashCode * 59 + this.ProductionLot.GetHashCode();
                if (this.ProductIdTag != null)
                    hashCode = hashCode * 59 + this.ProductIdTag.GetHashCode();
                if (this.RevisionDate != null)
                    hashCode = hashCode * 59 + this.RevisionDate.GetHashCode();
                if (this.ExpirationDate != null)
                    hashCode = hashCode * 59 + this.ExpirationDate.GetHashCode();
                if (this.Origin != null)
                    hashCode = hashCode * 59 + this.Origin.GetHashCode();
                if (this.CartonLength != null)
                    hashCode = hashCode * 59 + this.CartonLength.GetHashCode();
                if (this.CartonWidth != null)
                    hashCode = hashCode * 59 + this.CartonWidth.GetHashCode();
                if (this.CartonHeight != null)
                    hashCode = hashCode * 59 + this.CartonHeight.GetHashCode();
                if (this.PutAwayPlans != null)
                    hashCode = hashCode * 59 + this.PutAwayPlans.GetHashCode();
                if (this.Quantity != null)
                    hashCode = hashCode * 59 + this.Quantity.GetHashCode();
                if (this.CustomFields != null)
                    hashCode = hashCode * 59 + this.CustomFields.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
