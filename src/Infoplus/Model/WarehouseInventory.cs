/* 
 * Infoplus API
 *
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Infoplus.Client.SwaggerDateConverter;

namespace Infoplus.Model
{
    /// <summary>
    /// WarehouseInventory
    /// </summary>
    [DataContract]
    public partial class WarehouseInventory :  IEquatable<WarehouseInventory>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WarehouseInventory" /> class.
        /// </summary>
        /// <param name="StockStatus">StockStatus.</param>
        /// <param name="CustomFields">CustomFields.</param>
        public WarehouseInventory(string StockStatus = default(string), Dictionary<string, Object> CustomFields = default(Dictionary<string, Object>))
        {
            this.StockStatus = StockStatus;
            this.CustomFields = CustomFields;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; private set; }

        /// <summary>
        /// Gets or Sets Sku
        /// </summary>
        [DataMember(Name="sku", EmitDefaultValue=false)]
        public string Sku { get; private set; }

        /// <summary>
        /// Gets or Sets LobId
        /// </summary>
        [DataMember(Name="lobId", EmitDefaultValue=false)]
        public int? LobId { get; private set; }

        /// <summary>
        /// Gets or Sets WarehouseId
        /// </summary>
        [DataMember(Name="warehouseId", EmitDefaultValue=false)]
        public int? WarehouseId { get; private set; }

        /// <summary>
        /// Gets or Sets OnHandQuantity
        /// </summary>
        [DataMember(Name="onHandQuantity", EmitDefaultValue=false)]
        public int? OnHandQuantity { get; private set; }

        /// <summary>
        /// Gets or Sets UnavailableQuantity
        /// </summary>
        [DataMember(Name="unavailableQuantity", EmitDefaultValue=false)]
        public int? UnavailableQuantity { get; private set; }

        /// <summary>
        /// Gets or Sets OpenPOQuantity
        /// </summary>
        [DataMember(Name="openPOQuantity", EmitDefaultValue=false)]
        public int? OpenPOQuantity { get; private set; }

        /// <summary>
        /// Gets or Sets OpenOrderQuantity
        /// </summary>
        [DataMember(Name="openOrderQuantity", EmitDefaultValue=false)]
        public int? OpenOrderQuantity { get; private set; }

        /// <summary>
        /// Gets or Sets AvailableQuantity
        /// </summary>
        [DataMember(Name="availableQuantity", EmitDefaultValue=false)]
        public int? AvailableQuantity { get; private set; }

        /// <summary>
        /// Gets or Sets DamagedQuantity
        /// </summary>
        [DataMember(Name="damagedQuantity", EmitDefaultValue=false)]
        public int? DamagedQuantity { get; private set; }

        /// <summary>
        /// Gets or Sets InFulfillmentProcessQuantity
        /// </summary>
        [DataMember(Name="inFulfillmentProcessQuantity", EmitDefaultValue=false)]
        public int? InFulfillmentProcessQuantity { get; private set; }

        /// <summary>
        /// Gets or Sets OrderableQuantity
        /// </summary>
        [DataMember(Name="orderableQuantity", EmitDefaultValue=false)]
        public int? OrderableQuantity { get; private set; }

        /// <summary>
        /// Gets or Sets UnallocatableQuantity
        /// </summary>
        [DataMember(Name="unallocatableQuantity", EmitDefaultValue=false)]
        public int? UnallocatableQuantity { get; private set; }

        /// <summary>
        /// Gets or Sets DaysOnHand
        /// </summary>
        [DataMember(Name="daysOnHand", EmitDefaultValue=false)]
        public int? DaysOnHand { get; private set; }

        /// <summary>
        /// Gets or Sets StockStatus
        /// </summary>
        [DataMember(Name="stockStatus", EmitDefaultValue=false)]
        public string StockStatus { get; set; }

        /// <summary>
        /// Gets or Sets AvailableQuantityCases
        /// </summary>
        [DataMember(Name="availableQuantityCases", EmitDefaultValue=false)]
        public int? AvailableQuantityCases { get; private set; }

        /// <summary>
        /// Gets or Sets AvailableQuantityInnerPacks
        /// </summary>
        [DataMember(Name="availableQuantityInnerPacks", EmitDefaultValue=false)]
        public int? AvailableQuantityInnerPacks { get; private set; }

        /// <summary>
        /// Gets or Sets AvailableQuantityPallets
        /// </summary>
        [DataMember(Name="availableQuantityPallets", EmitDefaultValue=false)]
        public int? AvailableQuantityPallets { get; private set; }

        /// <summary>
        /// Gets or Sets DamagedQuantityCases
        /// </summary>
        [DataMember(Name="damagedQuantityCases", EmitDefaultValue=false)]
        public int? DamagedQuantityCases { get; private set; }

        /// <summary>
        /// Gets or Sets DamagedQuantityInnerPacks
        /// </summary>
        [DataMember(Name="damagedQuantityInnerPacks", EmitDefaultValue=false)]
        public int? DamagedQuantityInnerPacks { get; private set; }

        /// <summary>
        /// Gets or Sets DamagedQuantityPallets
        /// </summary>
        [DataMember(Name="damagedQuantityPallets", EmitDefaultValue=false)]
        public int? DamagedQuantityPallets { get; private set; }

        /// <summary>
        /// Gets or Sets InFulfillmentProcessQuantityCases
        /// </summary>
        [DataMember(Name="inFulfillmentProcessQuantityCases", EmitDefaultValue=false)]
        public int? InFulfillmentProcessQuantityCases { get; private set; }

        /// <summary>
        /// Gets or Sets InFulfillmentProcessQuantityInnerPacks
        /// </summary>
        [DataMember(Name="inFulfillmentProcessQuantityInnerPacks", EmitDefaultValue=false)]
        public int? InFulfillmentProcessQuantityInnerPacks { get; private set; }

        /// <summary>
        /// Gets or Sets InFulfillmentProcessQuantityPallets
        /// </summary>
        [DataMember(Name="inFulfillmentProcessQuantityPallets", EmitDefaultValue=false)]
        public int? InFulfillmentProcessQuantityPallets { get; private set; }

        /// <summary>
        /// Gets or Sets OnHandQuantityCases
        /// </summary>
        [DataMember(Name="onHandQuantityCases", EmitDefaultValue=false)]
        public int? OnHandQuantityCases { get; private set; }

        /// <summary>
        /// Gets or Sets OnHandQuantityInnerPacks
        /// </summary>
        [DataMember(Name="onHandQuantityInnerPacks", EmitDefaultValue=false)]
        public int? OnHandQuantityInnerPacks { get; private set; }

        /// <summary>
        /// Gets or Sets OnHandQuantityPallets
        /// </summary>
        [DataMember(Name="onHandQuantityPallets", EmitDefaultValue=false)]
        public int? OnHandQuantityPallets { get; private set; }

        /// <summary>
        /// Gets or Sets OpenOrderQuantityCases
        /// </summary>
        [DataMember(Name="openOrderQuantityCases", EmitDefaultValue=false)]
        public int? OpenOrderQuantityCases { get; private set; }

        /// <summary>
        /// Gets or Sets OpenOrderQuantityInnerPacks
        /// </summary>
        [DataMember(Name="openOrderQuantityInnerPacks", EmitDefaultValue=false)]
        public int? OpenOrderQuantityInnerPacks { get; private set; }

        /// <summary>
        /// Gets or Sets OpenOrderQuantityPallets
        /// </summary>
        [DataMember(Name="openOrderQuantityPallets", EmitDefaultValue=false)]
        public int? OpenOrderQuantityPallets { get; private set; }

        /// <summary>
        /// Gets or Sets OpenPOQuantityCases
        /// </summary>
        [DataMember(Name="openPOQuantityCases", EmitDefaultValue=false)]
        public int? OpenPOQuantityCases { get; private set; }

        /// <summary>
        /// Gets or Sets OpenPOQuantityInnerPacks
        /// </summary>
        [DataMember(Name="openPOQuantityInnerPacks", EmitDefaultValue=false)]
        public int? OpenPOQuantityInnerPacks { get; private set; }

        /// <summary>
        /// Gets or Sets OpenPOQuantityPallets
        /// </summary>
        [DataMember(Name="openPOQuantityPallets", EmitDefaultValue=false)]
        public int? OpenPOQuantityPallets { get; private set; }

        /// <summary>
        /// Gets or Sets OrderableQuantityCases
        /// </summary>
        [DataMember(Name="orderableQuantityCases", EmitDefaultValue=false)]
        public int? OrderableQuantityCases { get; private set; }

        /// <summary>
        /// Gets or Sets OrderableQuantityInnerPacks
        /// </summary>
        [DataMember(Name="orderableQuantityInnerPacks", EmitDefaultValue=false)]
        public int? OrderableQuantityInnerPacks { get; private set; }

        /// <summary>
        /// Gets or Sets OrderableQuantityPallets
        /// </summary>
        [DataMember(Name="orderableQuantityPallets", EmitDefaultValue=false)]
        public int? OrderableQuantityPallets { get; private set; }

        /// <summary>
        /// Gets or Sets UnallocatableQuantityCases
        /// </summary>
        [DataMember(Name="unallocatableQuantityCases", EmitDefaultValue=false)]
        public int? UnallocatableQuantityCases { get; private set; }

        /// <summary>
        /// Gets or Sets UnallocatableQuantityInnerPacks
        /// </summary>
        [DataMember(Name="unallocatableQuantityInnerPacks", EmitDefaultValue=false)]
        public int? UnallocatableQuantityInnerPacks { get; private set; }

        /// <summary>
        /// Gets or Sets UnallocatableQuantityPallets
        /// </summary>
        [DataMember(Name="unallocatableQuantityPallets", EmitDefaultValue=false)]
        public int? UnallocatableQuantityPallets { get; private set; }

        /// <summary>
        /// Gets or Sets UnavailableQuantityCases
        /// </summary>
        [DataMember(Name="unavailableQuantityCases", EmitDefaultValue=false)]
        public int? UnavailableQuantityCases { get; private set; }

        /// <summary>
        /// Gets or Sets UnavailableQuantityInnerPacks
        /// </summary>
        [DataMember(Name="unavailableQuantityInnerPacks", EmitDefaultValue=false)]
        public int? UnavailableQuantityInnerPacks { get; private set; }

        /// <summary>
        /// Gets or Sets UnavailableQuantityPallets
        /// </summary>
        [DataMember(Name="unavailableQuantityPallets", EmitDefaultValue=false)]
        public int? UnavailableQuantityPallets { get; private set; }

        /// <summary>
        /// Gets or Sets TotalDemand
        /// </summary>
        [DataMember(Name="totalDemand", EmitDefaultValue=false)]
        public int? TotalDemand { get; private set; }

        /// <summary>
        /// Gets or Sets NextRequestDeliveryDate
        /// </summary>
        [DataMember(Name="nextRequestDeliveryDate", EmitDefaultValue=false)]
        public DateTime? NextRequestDeliveryDate { get; private set; }

        /// <summary>
        /// Gets or Sets CreateDate
        /// </summary>
        [DataMember(Name="createDate", EmitDefaultValue=false)]
        public DateTime? CreateDate { get; private set; }

        /// <summary>
        /// Gets or Sets ModifyDate
        /// </summary>
        [DataMember(Name="modifyDate", EmitDefaultValue=false)]
        public DateTime? ModifyDate { get; private set; }

        /// <summary>
        /// Gets or Sets CustomFields
        /// </summary>
        [DataMember(Name="customFields", EmitDefaultValue=false)]
        public Dictionary<string, Object> CustomFields { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class WarehouseInventory {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Sku: ").Append(Sku).Append("\n");
            sb.Append("  LobId: ").Append(LobId).Append("\n");
            sb.Append("  WarehouseId: ").Append(WarehouseId).Append("\n");
            sb.Append("  OnHandQuantity: ").Append(OnHandQuantity).Append("\n");
            sb.Append("  UnavailableQuantity: ").Append(UnavailableQuantity).Append("\n");
            sb.Append("  OpenPOQuantity: ").Append(OpenPOQuantity).Append("\n");
            sb.Append("  OpenOrderQuantity: ").Append(OpenOrderQuantity).Append("\n");
            sb.Append("  AvailableQuantity: ").Append(AvailableQuantity).Append("\n");
            sb.Append("  DamagedQuantity: ").Append(DamagedQuantity).Append("\n");
            sb.Append("  InFulfillmentProcessQuantity: ").Append(InFulfillmentProcessQuantity).Append("\n");
            sb.Append("  OrderableQuantity: ").Append(OrderableQuantity).Append("\n");
            sb.Append("  UnallocatableQuantity: ").Append(UnallocatableQuantity).Append("\n");
            sb.Append("  DaysOnHand: ").Append(DaysOnHand).Append("\n");
            sb.Append("  StockStatus: ").Append(StockStatus).Append("\n");
            sb.Append("  AvailableQuantityCases: ").Append(AvailableQuantityCases).Append("\n");
            sb.Append("  AvailableQuantityInnerPacks: ").Append(AvailableQuantityInnerPacks).Append("\n");
            sb.Append("  AvailableQuantityPallets: ").Append(AvailableQuantityPallets).Append("\n");
            sb.Append("  DamagedQuantityCases: ").Append(DamagedQuantityCases).Append("\n");
            sb.Append("  DamagedQuantityInnerPacks: ").Append(DamagedQuantityInnerPacks).Append("\n");
            sb.Append("  DamagedQuantityPallets: ").Append(DamagedQuantityPallets).Append("\n");
            sb.Append("  InFulfillmentProcessQuantityCases: ").Append(InFulfillmentProcessQuantityCases).Append("\n");
            sb.Append("  InFulfillmentProcessQuantityInnerPacks: ").Append(InFulfillmentProcessQuantityInnerPacks).Append("\n");
            sb.Append("  InFulfillmentProcessQuantityPallets: ").Append(InFulfillmentProcessQuantityPallets).Append("\n");
            sb.Append("  OnHandQuantityCases: ").Append(OnHandQuantityCases).Append("\n");
            sb.Append("  OnHandQuantityInnerPacks: ").Append(OnHandQuantityInnerPacks).Append("\n");
            sb.Append("  OnHandQuantityPallets: ").Append(OnHandQuantityPallets).Append("\n");
            sb.Append("  OpenOrderQuantityCases: ").Append(OpenOrderQuantityCases).Append("\n");
            sb.Append("  OpenOrderQuantityInnerPacks: ").Append(OpenOrderQuantityInnerPacks).Append("\n");
            sb.Append("  OpenOrderQuantityPallets: ").Append(OpenOrderQuantityPallets).Append("\n");
            sb.Append("  OpenPOQuantityCases: ").Append(OpenPOQuantityCases).Append("\n");
            sb.Append("  OpenPOQuantityInnerPacks: ").Append(OpenPOQuantityInnerPacks).Append("\n");
            sb.Append("  OpenPOQuantityPallets: ").Append(OpenPOQuantityPallets).Append("\n");
            sb.Append("  OrderableQuantityCases: ").Append(OrderableQuantityCases).Append("\n");
            sb.Append("  OrderableQuantityInnerPacks: ").Append(OrderableQuantityInnerPacks).Append("\n");
            sb.Append("  OrderableQuantityPallets: ").Append(OrderableQuantityPallets).Append("\n");
            sb.Append("  UnallocatableQuantityCases: ").Append(UnallocatableQuantityCases).Append("\n");
            sb.Append("  UnallocatableQuantityInnerPacks: ").Append(UnallocatableQuantityInnerPacks).Append("\n");
            sb.Append("  UnallocatableQuantityPallets: ").Append(UnallocatableQuantityPallets).Append("\n");
            sb.Append("  UnavailableQuantityCases: ").Append(UnavailableQuantityCases).Append("\n");
            sb.Append("  UnavailableQuantityInnerPacks: ").Append(UnavailableQuantityInnerPacks).Append("\n");
            sb.Append("  UnavailableQuantityPallets: ").Append(UnavailableQuantityPallets).Append("\n");
            sb.Append("  TotalDemand: ").Append(TotalDemand).Append("\n");
            sb.Append("  NextRequestDeliveryDate: ").Append(NextRequestDeliveryDate).Append("\n");
            sb.Append("  CreateDate: ").Append(CreateDate).Append("\n");
            sb.Append("  ModifyDate: ").Append(ModifyDate).Append("\n");
            sb.Append("  CustomFields: ").Append(CustomFields).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as WarehouseInventory);
        }

        /// <summary>
        /// Returns true if WarehouseInventory instances are equal
        /// </summary>
        /// <param name="input">Instance of WarehouseInventory to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WarehouseInventory input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Sku == input.Sku ||
                    (this.Sku != null &&
                    this.Sku.Equals(input.Sku))
                ) && 
                (
                    this.LobId == input.LobId ||
                    (this.LobId != null &&
                    this.LobId.Equals(input.LobId))
                ) && 
                (
                    this.WarehouseId == input.WarehouseId ||
                    (this.WarehouseId != null &&
                    this.WarehouseId.Equals(input.WarehouseId))
                ) && 
                (
                    this.OnHandQuantity == input.OnHandQuantity ||
                    (this.OnHandQuantity != null &&
                    this.OnHandQuantity.Equals(input.OnHandQuantity))
                ) && 
                (
                    this.UnavailableQuantity == input.UnavailableQuantity ||
                    (this.UnavailableQuantity != null &&
                    this.UnavailableQuantity.Equals(input.UnavailableQuantity))
                ) && 
                (
                    this.OpenPOQuantity == input.OpenPOQuantity ||
                    (this.OpenPOQuantity != null &&
                    this.OpenPOQuantity.Equals(input.OpenPOQuantity))
                ) && 
                (
                    this.OpenOrderQuantity == input.OpenOrderQuantity ||
                    (this.OpenOrderQuantity != null &&
                    this.OpenOrderQuantity.Equals(input.OpenOrderQuantity))
                ) && 
                (
                    this.AvailableQuantity == input.AvailableQuantity ||
                    (this.AvailableQuantity != null &&
                    this.AvailableQuantity.Equals(input.AvailableQuantity))
                ) && 
                (
                    this.DamagedQuantity == input.DamagedQuantity ||
                    (this.DamagedQuantity != null &&
                    this.DamagedQuantity.Equals(input.DamagedQuantity))
                ) && 
                (
                    this.InFulfillmentProcessQuantity == input.InFulfillmentProcessQuantity ||
                    (this.InFulfillmentProcessQuantity != null &&
                    this.InFulfillmentProcessQuantity.Equals(input.InFulfillmentProcessQuantity))
                ) && 
                (
                    this.OrderableQuantity == input.OrderableQuantity ||
                    (this.OrderableQuantity != null &&
                    this.OrderableQuantity.Equals(input.OrderableQuantity))
                ) && 
                (
                    this.UnallocatableQuantity == input.UnallocatableQuantity ||
                    (this.UnallocatableQuantity != null &&
                    this.UnallocatableQuantity.Equals(input.UnallocatableQuantity))
                ) && 
                (
                    this.DaysOnHand == input.DaysOnHand ||
                    (this.DaysOnHand != null &&
                    this.DaysOnHand.Equals(input.DaysOnHand))
                ) && 
                (
                    this.StockStatus == input.StockStatus ||
                    (this.StockStatus != null &&
                    this.StockStatus.Equals(input.StockStatus))
                ) && 
                (
                    this.AvailableQuantityCases == input.AvailableQuantityCases ||
                    (this.AvailableQuantityCases != null &&
                    this.AvailableQuantityCases.Equals(input.AvailableQuantityCases))
                ) && 
                (
                    this.AvailableQuantityInnerPacks == input.AvailableQuantityInnerPacks ||
                    (this.AvailableQuantityInnerPacks != null &&
                    this.AvailableQuantityInnerPacks.Equals(input.AvailableQuantityInnerPacks))
                ) && 
                (
                    this.AvailableQuantityPallets == input.AvailableQuantityPallets ||
                    (this.AvailableQuantityPallets != null &&
                    this.AvailableQuantityPallets.Equals(input.AvailableQuantityPallets))
                ) && 
                (
                    this.DamagedQuantityCases == input.DamagedQuantityCases ||
                    (this.DamagedQuantityCases != null &&
                    this.DamagedQuantityCases.Equals(input.DamagedQuantityCases))
                ) && 
                (
                    this.DamagedQuantityInnerPacks == input.DamagedQuantityInnerPacks ||
                    (this.DamagedQuantityInnerPacks != null &&
                    this.DamagedQuantityInnerPacks.Equals(input.DamagedQuantityInnerPacks))
                ) && 
                (
                    this.DamagedQuantityPallets == input.DamagedQuantityPallets ||
                    (this.DamagedQuantityPallets != null &&
                    this.DamagedQuantityPallets.Equals(input.DamagedQuantityPallets))
                ) && 
                (
                    this.InFulfillmentProcessQuantityCases == input.InFulfillmentProcessQuantityCases ||
                    (this.InFulfillmentProcessQuantityCases != null &&
                    this.InFulfillmentProcessQuantityCases.Equals(input.InFulfillmentProcessQuantityCases))
                ) && 
                (
                    this.InFulfillmentProcessQuantityInnerPacks == input.InFulfillmentProcessQuantityInnerPacks ||
                    (this.InFulfillmentProcessQuantityInnerPacks != null &&
                    this.InFulfillmentProcessQuantityInnerPacks.Equals(input.InFulfillmentProcessQuantityInnerPacks))
                ) && 
                (
                    this.InFulfillmentProcessQuantityPallets == input.InFulfillmentProcessQuantityPallets ||
                    (this.InFulfillmentProcessQuantityPallets != null &&
                    this.InFulfillmentProcessQuantityPallets.Equals(input.InFulfillmentProcessQuantityPallets))
                ) && 
                (
                    this.OnHandQuantityCases == input.OnHandQuantityCases ||
                    (this.OnHandQuantityCases != null &&
                    this.OnHandQuantityCases.Equals(input.OnHandQuantityCases))
                ) && 
                (
                    this.OnHandQuantityInnerPacks == input.OnHandQuantityInnerPacks ||
                    (this.OnHandQuantityInnerPacks != null &&
                    this.OnHandQuantityInnerPacks.Equals(input.OnHandQuantityInnerPacks))
                ) && 
                (
                    this.OnHandQuantityPallets == input.OnHandQuantityPallets ||
                    (this.OnHandQuantityPallets != null &&
                    this.OnHandQuantityPallets.Equals(input.OnHandQuantityPallets))
                ) && 
                (
                    this.OpenOrderQuantityCases == input.OpenOrderQuantityCases ||
                    (this.OpenOrderQuantityCases != null &&
                    this.OpenOrderQuantityCases.Equals(input.OpenOrderQuantityCases))
                ) && 
                (
                    this.OpenOrderQuantityInnerPacks == input.OpenOrderQuantityInnerPacks ||
                    (this.OpenOrderQuantityInnerPacks != null &&
                    this.OpenOrderQuantityInnerPacks.Equals(input.OpenOrderQuantityInnerPacks))
                ) && 
                (
                    this.OpenOrderQuantityPallets == input.OpenOrderQuantityPallets ||
                    (this.OpenOrderQuantityPallets != null &&
                    this.OpenOrderQuantityPallets.Equals(input.OpenOrderQuantityPallets))
                ) && 
                (
                    this.OpenPOQuantityCases == input.OpenPOQuantityCases ||
                    (this.OpenPOQuantityCases != null &&
                    this.OpenPOQuantityCases.Equals(input.OpenPOQuantityCases))
                ) && 
                (
                    this.OpenPOQuantityInnerPacks == input.OpenPOQuantityInnerPacks ||
                    (this.OpenPOQuantityInnerPacks != null &&
                    this.OpenPOQuantityInnerPacks.Equals(input.OpenPOQuantityInnerPacks))
                ) && 
                (
                    this.OpenPOQuantityPallets == input.OpenPOQuantityPallets ||
                    (this.OpenPOQuantityPallets != null &&
                    this.OpenPOQuantityPallets.Equals(input.OpenPOQuantityPallets))
                ) && 
                (
                    this.OrderableQuantityCases == input.OrderableQuantityCases ||
                    (this.OrderableQuantityCases != null &&
                    this.OrderableQuantityCases.Equals(input.OrderableQuantityCases))
                ) && 
                (
                    this.OrderableQuantityInnerPacks == input.OrderableQuantityInnerPacks ||
                    (this.OrderableQuantityInnerPacks != null &&
                    this.OrderableQuantityInnerPacks.Equals(input.OrderableQuantityInnerPacks))
                ) && 
                (
                    this.OrderableQuantityPallets == input.OrderableQuantityPallets ||
                    (this.OrderableQuantityPallets != null &&
                    this.OrderableQuantityPallets.Equals(input.OrderableQuantityPallets))
                ) && 
                (
                    this.UnallocatableQuantityCases == input.UnallocatableQuantityCases ||
                    (this.UnallocatableQuantityCases != null &&
                    this.UnallocatableQuantityCases.Equals(input.UnallocatableQuantityCases))
                ) && 
                (
                    this.UnallocatableQuantityInnerPacks == input.UnallocatableQuantityInnerPacks ||
                    (this.UnallocatableQuantityInnerPacks != null &&
                    this.UnallocatableQuantityInnerPacks.Equals(input.UnallocatableQuantityInnerPacks))
                ) && 
                (
                    this.UnallocatableQuantityPallets == input.UnallocatableQuantityPallets ||
                    (this.UnallocatableQuantityPallets != null &&
                    this.UnallocatableQuantityPallets.Equals(input.UnallocatableQuantityPallets))
                ) && 
                (
                    this.UnavailableQuantityCases == input.UnavailableQuantityCases ||
                    (this.UnavailableQuantityCases != null &&
                    this.UnavailableQuantityCases.Equals(input.UnavailableQuantityCases))
                ) && 
                (
                    this.UnavailableQuantityInnerPacks == input.UnavailableQuantityInnerPacks ||
                    (this.UnavailableQuantityInnerPacks != null &&
                    this.UnavailableQuantityInnerPacks.Equals(input.UnavailableQuantityInnerPacks))
                ) && 
                (
                    this.UnavailableQuantityPallets == input.UnavailableQuantityPallets ||
                    (this.UnavailableQuantityPallets != null &&
                    this.UnavailableQuantityPallets.Equals(input.UnavailableQuantityPallets))
                ) && 
                (
                    this.TotalDemand == input.TotalDemand ||
                    (this.TotalDemand != null &&
                    this.TotalDemand.Equals(input.TotalDemand))
                ) && 
                (
                    this.NextRequestDeliveryDate == input.NextRequestDeliveryDate ||
                    (this.NextRequestDeliveryDate != null &&
                    this.NextRequestDeliveryDate.Equals(input.NextRequestDeliveryDate))
                ) && 
                (
                    this.CreateDate == input.CreateDate ||
                    (this.CreateDate != null &&
                    this.CreateDate.Equals(input.CreateDate))
                ) && 
                (
                    this.ModifyDate == input.ModifyDate ||
                    (this.ModifyDate != null &&
                    this.ModifyDate.Equals(input.ModifyDate))
                ) && 
                (
                    this.CustomFields == input.CustomFields ||
                    this.CustomFields != null &&
                    this.CustomFields.SequenceEqual(input.CustomFields)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Sku != null)
                    hashCode = hashCode * 59 + this.Sku.GetHashCode();
                if (this.LobId != null)
                    hashCode = hashCode * 59 + this.LobId.GetHashCode();
                if (this.WarehouseId != null)
                    hashCode = hashCode * 59 + this.WarehouseId.GetHashCode();
                if (this.OnHandQuantity != null)
                    hashCode = hashCode * 59 + this.OnHandQuantity.GetHashCode();
                if (this.UnavailableQuantity != null)
                    hashCode = hashCode * 59 + this.UnavailableQuantity.GetHashCode();
                if (this.OpenPOQuantity != null)
                    hashCode = hashCode * 59 + this.OpenPOQuantity.GetHashCode();
                if (this.OpenOrderQuantity != null)
                    hashCode = hashCode * 59 + this.OpenOrderQuantity.GetHashCode();
                if (this.AvailableQuantity != null)
                    hashCode = hashCode * 59 + this.AvailableQuantity.GetHashCode();
                if (this.DamagedQuantity != null)
                    hashCode = hashCode * 59 + this.DamagedQuantity.GetHashCode();
                if (this.InFulfillmentProcessQuantity != null)
                    hashCode = hashCode * 59 + this.InFulfillmentProcessQuantity.GetHashCode();
                if (this.OrderableQuantity != null)
                    hashCode = hashCode * 59 + this.OrderableQuantity.GetHashCode();
                if (this.UnallocatableQuantity != null)
                    hashCode = hashCode * 59 + this.UnallocatableQuantity.GetHashCode();
                if (this.DaysOnHand != null)
                    hashCode = hashCode * 59 + this.DaysOnHand.GetHashCode();
                if (this.StockStatus != null)
                    hashCode = hashCode * 59 + this.StockStatus.GetHashCode();
                if (this.AvailableQuantityCases != null)
                    hashCode = hashCode * 59 + this.AvailableQuantityCases.GetHashCode();
                if (this.AvailableQuantityInnerPacks != null)
                    hashCode = hashCode * 59 + this.AvailableQuantityInnerPacks.GetHashCode();
                if (this.AvailableQuantityPallets != null)
                    hashCode = hashCode * 59 + this.AvailableQuantityPallets.GetHashCode();
                if (this.DamagedQuantityCases != null)
                    hashCode = hashCode * 59 + this.DamagedQuantityCases.GetHashCode();
                if (this.DamagedQuantityInnerPacks != null)
                    hashCode = hashCode * 59 + this.DamagedQuantityInnerPacks.GetHashCode();
                if (this.DamagedQuantityPallets != null)
                    hashCode = hashCode * 59 + this.DamagedQuantityPallets.GetHashCode();
                if (this.InFulfillmentProcessQuantityCases != null)
                    hashCode = hashCode * 59 + this.InFulfillmentProcessQuantityCases.GetHashCode();
                if (this.InFulfillmentProcessQuantityInnerPacks != null)
                    hashCode = hashCode * 59 + this.InFulfillmentProcessQuantityInnerPacks.GetHashCode();
                if (this.InFulfillmentProcessQuantityPallets != null)
                    hashCode = hashCode * 59 + this.InFulfillmentProcessQuantityPallets.GetHashCode();
                if (this.OnHandQuantityCases != null)
                    hashCode = hashCode * 59 + this.OnHandQuantityCases.GetHashCode();
                if (this.OnHandQuantityInnerPacks != null)
                    hashCode = hashCode * 59 + this.OnHandQuantityInnerPacks.GetHashCode();
                if (this.OnHandQuantityPallets != null)
                    hashCode = hashCode * 59 + this.OnHandQuantityPallets.GetHashCode();
                if (this.OpenOrderQuantityCases != null)
                    hashCode = hashCode * 59 + this.OpenOrderQuantityCases.GetHashCode();
                if (this.OpenOrderQuantityInnerPacks != null)
                    hashCode = hashCode * 59 + this.OpenOrderQuantityInnerPacks.GetHashCode();
                if (this.OpenOrderQuantityPallets != null)
                    hashCode = hashCode * 59 + this.OpenOrderQuantityPallets.GetHashCode();
                if (this.OpenPOQuantityCases != null)
                    hashCode = hashCode * 59 + this.OpenPOQuantityCases.GetHashCode();
                if (this.OpenPOQuantityInnerPacks != null)
                    hashCode = hashCode * 59 + this.OpenPOQuantityInnerPacks.GetHashCode();
                if (this.OpenPOQuantityPallets != null)
                    hashCode = hashCode * 59 + this.OpenPOQuantityPallets.GetHashCode();
                if (this.OrderableQuantityCases != null)
                    hashCode = hashCode * 59 + this.OrderableQuantityCases.GetHashCode();
                if (this.OrderableQuantityInnerPacks != null)
                    hashCode = hashCode * 59 + this.OrderableQuantityInnerPacks.GetHashCode();
                if (this.OrderableQuantityPallets != null)
                    hashCode = hashCode * 59 + this.OrderableQuantityPallets.GetHashCode();
                if (this.UnallocatableQuantityCases != null)
                    hashCode = hashCode * 59 + this.UnallocatableQuantityCases.GetHashCode();
                if (this.UnallocatableQuantityInnerPacks != null)
                    hashCode = hashCode * 59 + this.UnallocatableQuantityInnerPacks.GetHashCode();
                if (this.UnallocatableQuantityPallets != null)
                    hashCode = hashCode * 59 + this.UnallocatableQuantityPallets.GetHashCode();
                if (this.UnavailableQuantityCases != null)
                    hashCode = hashCode * 59 + this.UnavailableQuantityCases.GetHashCode();
                if (this.UnavailableQuantityInnerPacks != null)
                    hashCode = hashCode * 59 + this.UnavailableQuantityInnerPacks.GetHashCode();
                if (this.UnavailableQuantityPallets != null)
                    hashCode = hashCode * 59 + this.UnavailableQuantityPallets.GetHashCode();
                if (this.TotalDemand != null)
                    hashCode = hashCode * 59 + this.TotalDemand.GetHashCode();
                if (this.NextRequestDeliveryDate != null)
                    hashCode = hashCode * 59 + this.NextRequestDeliveryDate.GetHashCode();
                if (this.CreateDate != null)
                    hashCode = hashCode * 59 + this.CreateDate.GetHashCode();
                if (this.ModifyDate != null)
                    hashCode = hashCode * 59 + this.ModifyDate.GetHashCode();
                if (this.CustomFields != null)
                    hashCode = hashCode * 59 + this.CustomFields.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
